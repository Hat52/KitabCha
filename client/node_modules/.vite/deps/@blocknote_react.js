import {
  require_react_dom
} from "./chunk-UI45XFUE.js";
import {
  __commonJS,
  __export,
  __toESM,
  require_react
} from "./chunk-3DTCNBNW.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment6 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal2 = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement7(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment2(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment6;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal2;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement7;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment2;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
    "use strict";
    var reactIs = require_react_is();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys5 = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys5 = keys5.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i = 0; i < keys5.length; ++i) {
          var key2 = keys5[i];
          if (!KNOWN_STATICS[key2] && !(blacklist && blacklist[key2]) && !(sourceStatics && sourceStatics[key2]) && !(targetStatics && targetStatics[key2])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key2);
            try {
              defineProperty(targetComponent, key2, descriptor);
            } catch (e) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics2;
  }
});

// node_modules/parse5/lib/common/unicode.js
var require_unicode = __commonJS({
  "node_modules/parse5/lib/common/unicode.js"(exports) {
    "use strict";
    var UNDEFINED_CODE_POINTS = [
      65534,
      65535,
      131070,
      131071,
      196606,
      196607,
      262142,
      262143,
      327678,
      327679,
      393214,
      393215,
      458750,
      458751,
      524286,
      524287,
      589822,
      589823,
      655358,
      655359,
      720894,
      720895,
      786430,
      786431,
      851966,
      851967,
      917502,
      917503,
      983038,
      983039,
      1048574,
      1048575,
      1114110,
      1114111
    ];
    exports.REPLACEMENT_CHARACTER = "�";
    exports.CODE_POINTS = {
      EOF: -1,
      NULL: 0,
      TABULATION: 9,
      CARRIAGE_RETURN: 13,
      LINE_FEED: 10,
      FORM_FEED: 12,
      SPACE: 32,
      EXCLAMATION_MARK: 33,
      QUOTATION_MARK: 34,
      NUMBER_SIGN: 35,
      AMPERSAND: 38,
      APOSTROPHE: 39,
      HYPHEN_MINUS: 45,
      SOLIDUS: 47,
      DIGIT_0: 48,
      DIGIT_9: 57,
      SEMICOLON: 59,
      LESS_THAN_SIGN: 60,
      EQUALS_SIGN: 61,
      GREATER_THAN_SIGN: 62,
      QUESTION_MARK: 63,
      LATIN_CAPITAL_A: 65,
      LATIN_CAPITAL_F: 70,
      LATIN_CAPITAL_X: 88,
      LATIN_CAPITAL_Z: 90,
      RIGHT_SQUARE_BRACKET: 93,
      GRAVE_ACCENT: 96,
      LATIN_SMALL_A: 97,
      LATIN_SMALL_F: 102,
      LATIN_SMALL_X: 120,
      LATIN_SMALL_Z: 122,
      REPLACEMENT_CHARACTER: 65533
    };
    exports.CODE_POINT_SEQUENCES = {
      DASH_DASH_STRING: [45, 45],
      //--
      DOCTYPE_STRING: [68, 79, 67, 84, 89, 80, 69],
      //DOCTYPE
      CDATA_START_STRING: [91, 67, 68, 65, 84, 65, 91],
      //[CDATA[
      SCRIPT_STRING: [115, 99, 114, 105, 112, 116],
      //script
      PUBLIC_STRING: [80, 85, 66, 76, 73, 67],
      //PUBLIC
      SYSTEM_STRING: [83, 89, 83, 84, 69, 77]
      //SYSTEM
    };
    exports.isSurrogate = function(cp) {
      return cp >= 55296 && cp <= 57343;
    };
    exports.isSurrogatePair = function(cp) {
      return cp >= 56320 && cp <= 57343;
    };
    exports.getSurrogatePairCodePoint = function(cp1, cp2) {
      return (cp1 - 55296) * 1024 + 9216 + cp2;
    };
    exports.isControlCodePoint = function(cp) {
      return cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31 || cp >= 127 && cp <= 159;
    };
    exports.isUndefinedCodePoint = function(cp) {
      return cp >= 64976 && cp <= 65007 || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;
    };
  }
});

// node_modules/parse5/lib/common/error-codes.js
var require_error_codes = __commonJS({
  "node_modules/parse5/lib/common/error-codes.js"(exports, module) {
    "use strict";
    module.exports = {
      controlCharacterInInputStream: "control-character-in-input-stream",
      noncharacterInInputStream: "noncharacter-in-input-stream",
      surrogateInInputStream: "surrogate-in-input-stream",
      nonVoidHtmlElementStartTagWithTrailingSolidus: "non-void-html-element-start-tag-with-trailing-solidus",
      endTagWithAttributes: "end-tag-with-attributes",
      endTagWithTrailingSolidus: "end-tag-with-trailing-solidus",
      unexpectedSolidusInTag: "unexpected-solidus-in-tag",
      unexpectedNullCharacter: "unexpected-null-character",
      unexpectedQuestionMarkInsteadOfTagName: "unexpected-question-mark-instead-of-tag-name",
      invalidFirstCharacterOfTagName: "invalid-first-character-of-tag-name",
      unexpectedEqualsSignBeforeAttributeName: "unexpected-equals-sign-before-attribute-name",
      missingEndTagName: "missing-end-tag-name",
      unexpectedCharacterInAttributeName: "unexpected-character-in-attribute-name",
      unknownNamedCharacterReference: "unknown-named-character-reference",
      missingSemicolonAfterCharacterReference: "missing-semicolon-after-character-reference",
      unexpectedCharacterAfterDoctypeSystemIdentifier: "unexpected-character-after-doctype-system-identifier",
      unexpectedCharacterInUnquotedAttributeValue: "unexpected-character-in-unquoted-attribute-value",
      eofBeforeTagName: "eof-before-tag-name",
      eofInTag: "eof-in-tag",
      missingAttributeValue: "missing-attribute-value",
      missingWhitespaceBetweenAttributes: "missing-whitespace-between-attributes",
      missingWhitespaceAfterDoctypePublicKeyword: "missing-whitespace-after-doctype-public-keyword",
      missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: "missing-whitespace-between-doctype-public-and-system-identifiers",
      missingWhitespaceAfterDoctypeSystemKeyword: "missing-whitespace-after-doctype-system-keyword",
      missingQuoteBeforeDoctypePublicIdentifier: "missing-quote-before-doctype-public-identifier",
      missingQuoteBeforeDoctypeSystemIdentifier: "missing-quote-before-doctype-system-identifier",
      missingDoctypePublicIdentifier: "missing-doctype-public-identifier",
      missingDoctypeSystemIdentifier: "missing-doctype-system-identifier",
      abruptDoctypePublicIdentifier: "abrupt-doctype-public-identifier",
      abruptDoctypeSystemIdentifier: "abrupt-doctype-system-identifier",
      cdataInHtmlContent: "cdata-in-html-content",
      incorrectlyOpenedComment: "incorrectly-opened-comment",
      eofInScriptHtmlCommentLikeText: "eof-in-script-html-comment-like-text",
      eofInDoctype: "eof-in-doctype",
      nestedComment: "nested-comment",
      abruptClosingOfEmptyComment: "abrupt-closing-of-empty-comment",
      eofInComment: "eof-in-comment",
      incorrectlyClosedComment: "incorrectly-closed-comment",
      eofInCdata: "eof-in-cdata",
      absenceOfDigitsInNumericCharacterReference: "absence-of-digits-in-numeric-character-reference",
      nullCharacterReference: "null-character-reference",
      surrogateCharacterReference: "surrogate-character-reference",
      characterReferenceOutsideUnicodeRange: "character-reference-outside-unicode-range",
      controlCharacterReference: "control-character-reference",
      noncharacterCharacterReference: "noncharacter-character-reference",
      missingWhitespaceBeforeDoctypeName: "missing-whitespace-before-doctype-name",
      missingDoctypeName: "missing-doctype-name",
      invalidCharacterSequenceAfterDoctypeName: "invalid-character-sequence-after-doctype-name",
      duplicateAttribute: "duplicate-attribute",
      nonConformingDoctype: "non-conforming-doctype",
      missingDoctype: "missing-doctype",
      misplacedDoctype: "misplaced-doctype",
      endTagWithoutMatchingOpenElement: "end-tag-without-matching-open-element",
      closingOfElementWithOpenChildElements: "closing-of-element-with-open-child-elements",
      disallowedContentInNoscriptInHead: "disallowed-content-in-noscript-in-head",
      openElementsLeftAfterEof: "open-elements-left-after-eof",
      abandonedHeadElementChild: "abandoned-head-element-child",
      misplacedStartTagForHeadElement: "misplaced-start-tag-for-head-element",
      nestedNoscriptInHead: "nested-noscript-in-head",
      eofInElementThatCanContainOnlyText: "eof-in-element-that-can-contain-only-text"
    };
  }
});

// node_modules/parse5/lib/tokenizer/preprocessor.js
var require_preprocessor = __commonJS({
  "node_modules/parse5/lib/tokenizer/preprocessor.js"(exports, module) {
    "use strict";
    var unicode = require_unicode();
    var ERR = require_error_codes();
    var $2 = unicode.CODE_POINTS;
    var DEFAULT_BUFFER_WATERLINE = 1 << 16;
    var Preprocessor = class {
      constructor() {
        this.html = null;
        this.pos = -1;
        this.lastGapPos = -1;
        this.lastCharPos = -1;
        this.gapStack = [];
        this.skipNextNewLine = false;
        this.lastChunkWritten = false;
        this.endOfChunkHit = false;
        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
      }
      _err() {
      }
      _addGap() {
        this.gapStack.push(this.lastGapPos);
        this.lastGapPos = this.pos;
      }
      _processSurrogate(cp) {
        if (this.pos !== this.lastCharPos) {
          const nextCp = this.html.charCodeAt(this.pos + 1);
          if (unicode.isSurrogatePair(nextCp)) {
            this.pos++;
            this._addGap();
            return unicode.getSurrogatePairCodePoint(cp, nextCp);
          }
        } else if (!this.lastChunkWritten) {
          this.endOfChunkHit = true;
          return $2.EOF;
        }
        this._err(ERR.surrogateInInputStream);
        return cp;
      }
      dropParsedChunk() {
        if (this.pos > this.bufferWaterline) {
          this.lastCharPos -= this.pos;
          this.html = this.html.substring(this.pos);
          this.pos = 0;
          this.lastGapPos = -1;
          this.gapStack = [];
        }
      }
      write(chunk, isLastChunk) {
        if (this.html) {
          this.html += chunk;
        } else {
          this.html = chunk;
        }
        this.lastCharPos = this.html.length - 1;
        this.endOfChunkHit = false;
        this.lastChunkWritten = isLastChunk;
      }
      insertHtmlAtCurrentPos(chunk) {
        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);
        this.lastCharPos = this.html.length - 1;
        this.endOfChunkHit = false;
      }
      advance() {
        this.pos++;
        if (this.pos > this.lastCharPos) {
          this.endOfChunkHit = !this.lastChunkWritten;
          return $2.EOF;
        }
        let cp = this.html.charCodeAt(this.pos);
        if (this.skipNextNewLine && cp === $2.LINE_FEED) {
          this.skipNextNewLine = false;
          this._addGap();
          return this.advance();
        }
        if (cp === $2.CARRIAGE_RETURN) {
          this.skipNextNewLine = true;
          return $2.LINE_FEED;
        }
        this.skipNextNewLine = false;
        if (unicode.isSurrogate(cp)) {
          cp = this._processSurrogate(cp);
        }
        const isCommonValidRange = cp > 31 && cp < 127 || cp === $2.LINE_FEED || cp === $2.CARRIAGE_RETURN || cp > 159 && cp < 64976;
        if (!isCommonValidRange) {
          this._checkForProblematicCharacters(cp);
        }
        return cp;
      }
      _checkForProblematicCharacters(cp) {
        if (unicode.isControlCodePoint(cp)) {
          this._err(ERR.controlCharacterInInputStream);
        } else if (unicode.isUndefinedCodePoint(cp)) {
          this._err(ERR.noncharacterInInputStream);
        }
      }
      retreat() {
        if (this.pos === this.lastGapPos) {
          this.lastGapPos = this.gapStack.pop();
          this.pos--;
        }
        this.pos--;
      }
    };
    module.exports = Preprocessor;
  }
});

// node_modules/parse5/lib/tokenizer/named-entity-data.js
var require_named_entity_data = __commonJS({
  "node_modules/parse5/lib/tokenizer/named-entity-data.js"(exports, module) {
    "use strict";
    module.exports = new Uint16Array([4, 52, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 106, 303, 412, 810, 1432, 1701, 1796, 1987, 2114, 2360, 2420, 2484, 3170, 3251, 4140, 4393, 4575, 4610, 5106, 5512, 5728, 6117, 6274, 6315, 6345, 6427, 6516, 7002, 7910, 8733, 9323, 9870, 10170, 10631, 10893, 11318, 11386, 11467, 12773, 13092, 14474, 14922, 15448, 15542, 16419, 17666, 18166, 18611, 19004, 19095, 19298, 19397, 4, 16, 69, 77, 97, 98, 99, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 140, 150, 158, 169, 176, 194, 199, 210, 216, 222, 226, 242, 256, 266, 283, 294, 108, 105, 103, 5, 198, 1, 59, 148, 1, 198, 80, 5, 38, 1, 59, 156, 1, 38, 99, 117, 116, 101, 5, 193, 1, 59, 167, 1, 193, 114, 101, 118, 101, 59, 1, 258, 4, 2, 105, 121, 182, 191, 114, 99, 5, 194, 1, 59, 189, 1, 194, 59, 1, 1040, 114, 59, 3, 55349, 56580, 114, 97, 118, 101, 5, 192, 1, 59, 208, 1, 192, 112, 104, 97, 59, 1, 913, 97, 99, 114, 59, 1, 256, 100, 59, 1, 10835, 4, 2, 103, 112, 232, 237, 111, 110, 59, 1, 260, 102, 59, 3, 55349, 56632, 112, 108, 121, 70, 117, 110, 99, 116, 105, 111, 110, 59, 1, 8289, 105, 110, 103, 5, 197, 1, 59, 264, 1, 197, 4, 2, 99, 115, 272, 277, 114, 59, 3, 55349, 56476, 105, 103, 110, 59, 1, 8788, 105, 108, 100, 101, 5, 195, 1, 59, 292, 1, 195, 109, 108, 5, 196, 1, 59, 301, 1, 196, 4, 8, 97, 99, 101, 102, 111, 114, 115, 117, 321, 350, 354, 383, 388, 394, 400, 405, 4, 2, 99, 114, 327, 336, 107, 115, 108, 97, 115, 104, 59, 1, 8726, 4, 2, 118, 119, 342, 345, 59, 1, 10983, 101, 100, 59, 1, 8966, 121, 59, 1, 1041, 4, 3, 99, 114, 116, 362, 369, 379, 97, 117, 115, 101, 59, 1, 8757, 110, 111, 117, 108, 108, 105, 115, 59, 1, 8492, 97, 59, 1, 914, 114, 59, 3, 55349, 56581, 112, 102, 59, 3, 55349, 56633, 101, 118, 101, 59, 1, 728, 99, 114, 59, 1, 8492, 109, 112, 101, 113, 59, 1, 8782, 4, 14, 72, 79, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 117, 442, 447, 456, 504, 542, 547, 569, 573, 577, 616, 678, 784, 790, 796, 99, 121, 59, 1, 1063, 80, 89, 5, 169, 1, 59, 454, 1, 169, 4, 3, 99, 112, 121, 464, 470, 497, 117, 116, 101, 59, 1, 262, 4, 2, 59, 105, 476, 478, 1, 8914, 116, 97, 108, 68, 105, 102, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8517, 108, 101, 121, 115, 59, 1, 8493, 4, 4, 97, 101, 105, 111, 514, 520, 530, 535, 114, 111, 110, 59, 1, 268, 100, 105, 108, 5, 199, 1, 59, 528, 1, 199, 114, 99, 59, 1, 264, 110, 105, 110, 116, 59, 1, 8752, 111, 116, 59, 1, 266, 4, 2, 100, 110, 553, 560, 105, 108, 108, 97, 59, 1, 184, 116, 101, 114, 68, 111, 116, 59, 1, 183, 114, 59, 1, 8493, 105, 59, 1, 935, 114, 99, 108, 101, 4, 4, 68, 77, 80, 84, 591, 596, 603, 609, 111, 116, 59, 1, 8857, 105, 110, 117, 115, 59, 1, 8854, 108, 117, 115, 59, 1, 8853, 105, 109, 101, 115, 59, 1, 8855, 111, 4, 2, 99, 115, 623, 646, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8754, 101, 67, 117, 114, 108, 121, 4, 2, 68, 81, 658, 671, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8221, 117, 111, 116, 101, 59, 1, 8217, 4, 4, 108, 110, 112, 117, 688, 701, 736, 753, 111, 110, 4, 2, 59, 101, 696, 698, 1, 8759, 59, 1, 10868, 4, 3, 103, 105, 116, 709, 717, 722, 114, 117, 101, 110, 116, 59, 1, 8801, 110, 116, 59, 1, 8751, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8750, 4, 2, 102, 114, 742, 745, 59, 1, 8450, 111, 100, 117, 99, 116, 59, 1, 8720, 110, 116, 101, 114, 67, 108, 111, 99, 107, 119, 105, 115, 101, 67, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8755, 111, 115, 115, 59, 1, 10799, 99, 114, 59, 3, 55349, 56478, 112, 4, 2, 59, 67, 803, 805, 1, 8915, 97, 112, 59, 1, 8781, 4, 11, 68, 74, 83, 90, 97, 99, 101, 102, 105, 111, 115, 834, 850, 855, 860, 865, 888, 903, 916, 921, 1011, 1415, 4, 2, 59, 111, 840, 842, 1, 8517, 116, 114, 97, 104, 100, 59, 1, 10513, 99, 121, 59, 1, 1026, 99, 121, 59, 1, 1029, 99, 121, 59, 1, 1039, 4, 3, 103, 114, 115, 873, 879, 883, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8609, 104, 118, 59, 1, 10980, 4, 2, 97, 121, 894, 900, 114, 111, 110, 59, 1, 270, 59, 1, 1044, 108, 4, 2, 59, 116, 910, 912, 1, 8711, 97, 59, 1, 916, 114, 59, 3, 55349, 56583, 4, 2, 97, 102, 927, 998, 4, 2, 99, 109, 933, 992, 114, 105, 116, 105, 99, 97, 108, 4, 4, 65, 68, 71, 84, 950, 957, 978, 985, 99, 117, 116, 101, 59, 1, 180, 111, 4, 2, 116, 117, 964, 967, 59, 1, 729, 98, 108, 101, 65, 99, 117, 116, 101, 59, 1, 733, 114, 97, 118, 101, 59, 1, 96, 105, 108, 100, 101, 59, 1, 732, 111, 110, 100, 59, 1, 8900, 102, 101, 114, 101, 110, 116, 105, 97, 108, 68, 59, 1, 8518, 4, 4, 112, 116, 117, 119, 1021, 1026, 1048, 1249, 102, 59, 3, 55349, 56635, 4, 3, 59, 68, 69, 1034, 1036, 1041, 1, 168, 111, 116, 59, 1, 8412, 113, 117, 97, 108, 59, 1, 8784, 98, 108, 101, 4, 6, 67, 68, 76, 82, 85, 86, 1065, 1082, 1101, 1189, 1211, 1236, 111, 110, 116, 111, 117, 114, 73, 110, 116, 101, 103, 114, 97, 108, 59, 1, 8751, 111, 4, 2, 116, 119, 1089, 1092, 59, 1, 168, 110, 65, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 101, 111, 1107, 1141, 102, 116, 4, 3, 65, 82, 84, 1117, 1124, 1136, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8660, 101, 101, 59, 1, 10980, 110, 103, 4, 2, 76, 82, 1149, 1177, 101, 102, 116, 4, 2, 65, 82, 1158, 1165, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10233, 105, 103, 104, 116, 4, 2, 65, 84, 1199, 1206, 114, 114, 111, 119, 59, 1, 8658, 101, 101, 59, 1, 8872, 112, 4, 2, 65, 68, 1218, 1225, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8741, 110, 4, 6, 65, 66, 76, 82, 84, 97, 1264, 1292, 1299, 1352, 1391, 1408, 114, 114, 111, 119, 4, 3, 59, 66, 85, 1276, 1278, 1283, 1, 8595, 97, 114, 59, 1, 10515, 112, 65, 114, 114, 111, 119, 59, 1, 8693, 114, 101, 118, 101, 59, 1, 785, 101, 102, 116, 4, 3, 82, 84, 86, 1310, 1323, 1334, 105, 103, 104, 116, 86, 101, 99, 116, 111, 114, 59, 1, 10576, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10590, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1345, 1347, 1, 8637, 97, 114, 59, 1, 10582, 105, 103, 104, 116, 4, 2, 84, 86, 1362, 1373, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10591, 101, 99, 116, 111, 114, 4, 2, 59, 66, 1384, 1386, 1, 8641, 97, 114, 59, 1, 10583, 101, 101, 4, 2, 59, 65, 1399, 1401, 1, 8868, 114, 114, 111, 119, 59, 1, 8615, 114, 114, 111, 119, 59, 1, 8659, 4, 2, 99, 116, 1421, 1426, 114, 59, 3, 55349, 56479, 114, 111, 107, 59, 1, 272, 4, 16, 78, 84, 97, 99, 100, 102, 103, 108, 109, 111, 112, 113, 115, 116, 117, 120, 1466, 1470, 1478, 1489, 1515, 1520, 1525, 1536, 1544, 1593, 1609, 1617, 1650, 1664, 1668, 1677, 71, 59, 1, 330, 72, 5, 208, 1, 59, 1476, 1, 208, 99, 117, 116, 101, 5, 201, 1, 59, 1487, 1, 201, 4, 3, 97, 105, 121, 1497, 1503, 1512, 114, 111, 110, 59, 1, 282, 114, 99, 5, 202, 1, 59, 1510, 1, 202, 59, 1, 1069, 111, 116, 59, 1, 278, 114, 59, 3, 55349, 56584, 114, 97, 118, 101, 5, 200, 1, 59, 1534, 1, 200, 101, 109, 101, 110, 116, 59, 1, 8712, 4, 2, 97, 112, 1550, 1555, 99, 114, 59, 1, 274, 116, 121, 4, 2, 83, 86, 1563, 1576, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9723, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9643, 4, 2, 103, 112, 1599, 1604, 111, 110, 59, 1, 280, 102, 59, 3, 55349, 56636, 115, 105, 108, 111, 110, 59, 1, 917, 117, 4, 2, 97, 105, 1624, 1640, 108, 4, 2, 59, 84, 1631, 1633, 1, 10869, 105, 108, 100, 101, 59, 1, 8770, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8652, 4, 2, 99, 105, 1656, 1660, 114, 59, 1, 8496, 109, 59, 1, 10867, 97, 59, 1, 919, 109, 108, 5, 203, 1, 59, 1675, 1, 203, 4, 2, 105, 112, 1683, 1689, 115, 116, 115, 59, 1, 8707, 111, 110, 101, 110, 116, 105, 97, 108, 69, 59, 1, 8519, 4, 5, 99, 102, 105, 111, 115, 1713, 1717, 1722, 1762, 1791, 121, 59, 1, 1060, 114, 59, 3, 55349, 56585, 108, 108, 101, 100, 4, 2, 83, 86, 1732, 1745, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9724, 101, 114, 121, 83, 109, 97, 108, 108, 83, 113, 117, 97, 114, 101, 59, 1, 9642, 4, 3, 112, 114, 117, 1770, 1775, 1781, 102, 59, 3, 55349, 56637, 65, 108, 108, 59, 1, 8704, 114, 105, 101, 114, 116, 114, 102, 59, 1, 8497, 99, 114, 59, 1, 8497, 4, 12, 74, 84, 97, 98, 99, 100, 102, 103, 111, 114, 115, 116, 1822, 1827, 1834, 1848, 1855, 1877, 1882, 1887, 1890, 1896, 1978, 1984, 99, 121, 59, 1, 1027, 5, 62, 1, 59, 1832, 1, 62, 109, 109, 97, 4, 2, 59, 100, 1843, 1845, 1, 915, 59, 1, 988, 114, 101, 118, 101, 59, 1, 286, 4, 3, 101, 105, 121, 1863, 1869, 1874, 100, 105, 108, 59, 1, 290, 114, 99, 59, 1, 284, 59, 1, 1043, 111, 116, 59, 1, 288, 114, 59, 3, 55349, 56586, 59, 1, 8921, 112, 102, 59, 3, 55349, 56638, 101, 97, 116, 101, 114, 4, 6, 69, 70, 71, 76, 83, 84, 1915, 1933, 1944, 1953, 1959, 1971, 113, 117, 97, 108, 4, 2, 59, 76, 1925, 1927, 1, 8805, 101, 115, 115, 59, 1, 8923, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8807, 114, 101, 97, 116, 101, 114, 59, 1, 10914, 101, 115, 115, 59, 1, 8823, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10878, 105, 108, 100, 101, 59, 1, 8819, 99, 114, 59, 3, 55349, 56482, 59, 1, 8811, 4, 8, 65, 97, 99, 102, 105, 111, 115, 117, 2005, 2012, 2026, 2032, 2036, 2049, 2073, 2089, 82, 68, 99, 121, 59, 1, 1066, 4, 2, 99, 116, 2018, 2023, 101, 107, 59, 1, 711, 59, 1, 94, 105, 114, 99, 59, 1, 292, 114, 59, 1, 8460, 108, 98, 101, 114, 116, 83, 112, 97, 99, 101, 59, 1, 8459, 4, 2, 112, 114, 2055, 2059, 102, 59, 1, 8461, 105, 122, 111, 110, 116, 97, 108, 76, 105, 110, 101, 59, 1, 9472, 4, 2, 99, 116, 2079, 2083, 114, 59, 1, 8459, 114, 111, 107, 59, 1, 294, 109, 112, 4, 2, 68, 69, 2097, 2107, 111, 119, 110, 72, 117, 109, 112, 59, 1, 8782, 113, 117, 97, 108, 59, 1, 8783, 4, 14, 69, 74, 79, 97, 99, 100, 102, 103, 109, 110, 111, 115, 116, 117, 2144, 2149, 2155, 2160, 2171, 2189, 2194, 2198, 2209, 2245, 2307, 2329, 2334, 2341, 99, 121, 59, 1, 1045, 108, 105, 103, 59, 1, 306, 99, 121, 59, 1, 1025, 99, 117, 116, 101, 5, 205, 1, 59, 2169, 1, 205, 4, 2, 105, 121, 2177, 2186, 114, 99, 5, 206, 1, 59, 2184, 1, 206, 59, 1, 1048, 111, 116, 59, 1, 304, 114, 59, 1, 8465, 114, 97, 118, 101, 5, 204, 1, 59, 2207, 1, 204, 4, 3, 59, 97, 112, 2217, 2219, 2238, 1, 8465, 4, 2, 99, 103, 2225, 2229, 114, 59, 1, 298, 105, 110, 97, 114, 121, 73, 59, 1, 8520, 108, 105, 101, 115, 59, 1, 8658, 4, 2, 116, 118, 2251, 2281, 4, 2, 59, 101, 2257, 2259, 1, 8748, 4, 2, 103, 114, 2265, 2271, 114, 97, 108, 59, 1, 8747, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8898, 105, 115, 105, 98, 108, 101, 4, 2, 67, 84, 2293, 2300, 111, 109, 109, 97, 59, 1, 8291, 105, 109, 101, 115, 59, 1, 8290, 4, 3, 103, 112, 116, 2315, 2320, 2325, 111, 110, 59, 1, 302, 102, 59, 3, 55349, 56640, 97, 59, 1, 921, 99, 114, 59, 1, 8464, 105, 108, 100, 101, 59, 1, 296, 4, 2, 107, 109, 2347, 2352, 99, 121, 59, 1, 1030, 108, 5, 207, 1, 59, 2358, 1, 207, 4, 5, 99, 102, 111, 115, 117, 2372, 2386, 2391, 2397, 2414, 4, 2, 105, 121, 2378, 2383, 114, 99, 59, 1, 308, 59, 1, 1049, 114, 59, 3, 55349, 56589, 112, 102, 59, 3, 55349, 56641, 4, 2, 99, 101, 2403, 2408, 114, 59, 3, 55349, 56485, 114, 99, 121, 59, 1, 1032, 107, 99, 121, 59, 1, 1028, 4, 7, 72, 74, 97, 99, 102, 111, 115, 2436, 2441, 2446, 2452, 2467, 2472, 2478, 99, 121, 59, 1, 1061, 99, 121, 59, 1, 1036, 112, 112, 97, 59, 1, 922, 4, 2, 101, 121, 2458, 2464, 100, 105, 108, 59, 1, 310, 59, 1, 1050, 114, 59, 3, 55349, 56590, 112, 102, 59, 3, 55349, 56642, 99, 114, 59, 3, 55349, 56486, 4, 11, 74, 84, 97, 99, 101, 102, 108, 109, 111, 115, 116, 2508, 2513, 2520, 2562, 2585, 2981, 2986, 3004, 3011, 3146, 3167, 99, 121, 59, 1, 1033, 5, 60, 1, 59, 2518, 1, 60, 4, 5, 99, 109, 110, 112, 114, 2532, 2538, 2544, 2548, 2558, 117, 116, 101, 59, 1, 313, 98, 100, 97, 59, 1, 923, 103, 59, 1, 10218, 108, 97, 99, 101, 116, 114, 102, 59, 1, 8466, 114, 59, 1, 8606, 4, 3, 97, 101, 121, 2570, 2576, 2582, 114, 111, 110, 59, 1, 317, 100, 105, 108, 59, 1, 315, 59, 1, 1051, 4, 2, 102, 115, 2591, 2907, 116, 4, 10, 65, 67, 68, 70, 82, 84, 85, 86, 97, 114, 2614, 2663, 2672, 2728, 2735, 2760, 2820, 2870, 2888, 2895, 4, 2, 110, 114, 2620, 2633, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10216, 114, 111, 119, 4, 3, 59, 66, 82, 2644, 2646, 2651, 1, 8592, 97, 114, 59, 1, 8676, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8646, 101, 105, 108, 105, 110, 103, 59, 1, 8968, 111, 4, 2, 117, 119, 2679, 2692, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10214, 110, 4, 2, 84, 86, 2699, 2710, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10593, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2721, 2723, 1, 8643, 97, 114, 59, 1, 10585, 108, 111, 111, 114, 59, 1, 8970, 105, 103, 104, 116, 4, 2, 65, 86, 2745, 2752, 114, 114, 111, 119, 59, 1, 8596, 101, 99, 116, 111, 114, 59, 1, 10574, 4, 2, 101, 114, 2766, 2792, 101, 4, 3, 59, 65, 86, 2775, 2777, 2784, 1, 8867, 114, 114, 111, 119, 59, 1, 8612, 101, 99, 116, 111, 114, 59, 1, 10586, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 2806, 2808, 2813, 1, 8882, 97, 114, 59, 1, 10703, 113, 117, 97, 108, 59, 1, 8884, 112, 4, 3, 68, 84, 86, 2829, 2841, 2852, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10577, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10592, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2863, 2865, 1, 8639, 97, 114, 59, 1, 10584, 101, 99, 116, 111, 114, 4, 2, 59, 66, 2881, 2883, 1, 8636, 97, 114, 59, 1, 10578, 114, 114, 111, 119, 59, 1, 8656, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8660, 115, 4, 6, 69, 70, 71, 76, 83, 84, 2922, 2936, 2947, 2956, 2962, 2974, 113, 117, 97, 108, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8922, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8806, 114, 101, 97, 116, 101, 114, 59, 1, 8822, 101, 115, 115, 59, 1, 10913, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 10877, 105, 108, 100, 101, 59, 1, 8818, 114, 59, 3, 55349, 56591, 4, 2, 59, 101, 2992, 2994, 1, 8920, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8666, 105, 100, 111, 116, 59, 1, 319, 4, 3, 110, 112, 119, 3019, 3110, 3115, 103, 4, 4, 76, 82, 108, 114, 3030, 3058, 3070, 3098, 101, 102, 116, 4, 2, 65, 82, 3039, 3046, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10231, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 10230, 101, 102, 116, 4, 2, 97, 114, 3079, 3086, 114, 114, 111, 119, 59, 1, 10232, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10234, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10233, 102, 59, 3, 55349, 56643, 101, 114, 4, 2, 76, 82, 3123, 3134, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8601, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8600, 4, 3, 99, 104, 116, 3154, 3158, 3161, 114, 59, 1, 8466, 59, 1, 8624, 114, 111, 107, 59, 1, 321, 59, 1, 8810, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 3188, 3192, 3196, 3222, 3227, 3237, 3243, 3248, 112, 59, 1, 10501, 121, 59, 1, 1052, 4, 2, 100, 108, 3202, 3213, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8287, 108, 105, 110, 116, 114, 102, 59, 1, 8499, 114, 59, 3, 55349, 56592, 110, 117, 115, 80, 108, 117, 115, 59, 1, 8723, 112, 102, 59, 3, 55349, 56644, 99, 114, 59, 1, 8499, 59, 1, 924, 4, 9, 74, 97, 99, 101, 102, 111, 115, 116, 117, 3271, 3276, 3283, 3306, 3422, 3427, 4120, 4126, 4137, 99, 121, 59, 1, 1034, 99, 117, 116, 101, 59, 1, 323, 4, 3, 97, 101, 121, 3291, 3297, 3303, 114, 111, 110, 59, 1, 327, 100, 105, 108, 59, 1, 325, 59, 1, 1053, 4, 3, 103, 115, 119, 3314, 3380, 3415, 97, 116, 105, 118, 101, 4, 3, 77, 84, 86, 3327, 3340, 3365, 101, 100, 105, 117, 109, 83, 112, 97, 99, 101, 59, 1, 8203, 104, 105, 4, 2, 99, 110, 3348, 3357, 107, 83, 112, 97, 99, 101, 59, 1, 8203, 83, 112, 97, 99, 101, 59, 1, 8203, 101, 114, 121, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8203, 116, 101, 100, 4, 2, 71, 76, 3389, 3405, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 1, 8811, 101, 115, 115, 76, 101, 115, 115, 59, 1, 8810, 76, 105, 110, 101, 59, 1, 10, 114, 59, 3, 55349, 56593, 4, 4, 66, 110, 112, 116, 3437, 3444, 3460, 3464, 114, 101, 97, 107, 59, 1, 8288, 66, 114, 101, 97, 107, 105, 110, 103, 83, 112, 97, 99, 101, 59, 1, 160, 102, 59, 1, 8469, 4, 13, 59, 67, 68, 69, 71, 72, 76, 78, 80, 82, 83, 84, 86, 3492, 3494, 3517, 3536, 3578, 3657, 3685, 3784, 3823, 3860, 3915, 4066, 4107, 1, 10988, 4, 2, 111, 117, 3500, 3510, 110, 103, 114, 117, 101, 110, 116, 59, 1, 8802, 112, 67, 97, 112, 59, 1, 8813, 111, 117, 98, 108, 101, 86, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8742, 4, 3, 108, 113, 120, 3544, 3552, 3571, 101, 109, 101, 110, 116, 59, 1, 8713, 117, 97, 108, 4, 2, 59, 84, 3561, 3563, 1, 8800, 105, 108, 100, 101, 59, 3, 8770, 824, 105, 115, 116, 115, 59, 1, 8708, 114, 101, 97, 116, 101, 114, 4, 7, 59, 69, 70, 71, 76, 83, 84, 3600, 3602, 3609, 3621, 3631, 3637, 3650, 1, 8815, 113, 117, 97, 108, 59, 1, 8817, 117, 108, 108, 69, 113, 117, 97, 108, 59, 3, 8807, 824, 114, 101, 97, 116, 101, 114, 59, 3, 8811, 824, 101, 115, 115, 59, 1, 8825, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10878, 824, 105, 108, 100, 101, 59, 1, 8821, 117, 109, 112, 4, 2, 68, 69, 3666, 3677, 111, 119, 110, 72, 117, 109, 112, 59, 3, 8782, 824, 113, 117, 97, 108, 59, 3, 8783, 824, 101, 4, 2, 102, 115, 3692, 3724, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3709, 3711, 3717, 1, 8938, 97, 114, 59, 3, 10703, 824, 113, 117, 97, 108, 59, 1, 8940, 115, 4, 6, 59, 69, 71, 76, 83, 84, 3739, 3741, 3748, 3757, 3764, 3777, 1, 8814, 113, 117, 97, 108, 59, 1, 8816, 114, 101, 97, 116, 101, 114, 59, 1, 8824, 101, 115, 115, 59, 3, 8810, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 3, 10877, 824, 105, 108, 100, 101, 59, 1, 8820, 101, 115, 116, 101, 100, 4, 2, 71, 76, 3795, 3812, 114, 101, 97, 116, 101, 114, 71, 114, 101, 97, 116, 101, 114, 59, 3, 10914, 824, 101, 115, 115, 76, 101, 115, 115, 59, 3, 10913, 824, 114, 101, 99, 101, 100, 101, 115, 4, 3, 59, 69, 83, 3838, 3840, 3848, 1, 8832, 113, 117, 97, 108, 59, 3, 10927, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8928, 4, 2, 101, 105, 3866, 3881, 118, 101, 114, 115, 101, 69, 108, 101, 109, 101, 110, 116, 59, 1, 8716, 103, 104, 116, 84, 114, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 3900, 3902, 3908, 1, 8939, 97, 114, 59, 3, 10704, 824, 113, 117, 97, 108, 59, 1, 8941, 4, 2, 113, 117, 3921, 3973, 117, 97, 114, 101, 83, 117, 4, 2, 98, 112, 3933, 3952, 115, 101, 116, 4, 2, 59, 69, 3942, 3945, 3, 8847, 824, 113, 117, 97, 108, 59, 1, 8930, 101, 114, 115, 101, 116, 4, 2, 59, 69, 3963, 3966, 3, 8848, 824, 113, 117, 97, 108, 59, 1, 8931, 4, 3, 98, 99, 112, 3981, 4e3, 4045, 115, 101, 116, 4, 2, 59, 69, 3990, 3993, 3, 8834, 8402, 113, 117, 97, 108, 59, 1, 8840, 99, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 4015, 4017, 4025, 4037, 1, 8833, 113, 117, 97, 108, 59, 3, 10928, 824, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8929, 105, 108, 100, 101, 59, 3, 8831, 824, 101, 114, 115, 101, 116, 4, 2, 59, 69, 4056, 4059, 3, 8835, 8402, 113, 117, 97, 108, 59, 1, 8841, 105, 108, 100, 101, 4, 4, 59, 69, 70, 84, 4080, 4082, 4089, 4100, 1, 8769, 113, 117, 97, 108, 59, 1, 8772, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8775, 105, 108, 100, 101, 59, 1, 8777, 101, 114, 116, 105, 99, 97, 108, 66, 97, 114, 59, 1, 8740, 99, 114, 59, 3, 55349, 56489, 105, 108, 100, 101, 5, 209, 1, 59, 4135, 1, 209, 59, 1, 925, 4, 14, 69, 97, 99, 100, 102, 103, 109, 111, 112, 114, 115, 116, 117, 118, 4170, 4176, 4187, 4205, 4212, 4217, 4228, 4253, 4259, 4292, 4295, 4316, 4337, 4346, 108, 105, 103, 59, 1, 338, 99, 117, 116, 101, 5, 211, 1, 59, 4185, 1, 211, 4, 2, 105, 121, 4193, 4202, 114, 99, 5, 212, 1, 59, 4200, 1, 212, 59, 1, 1054, 98, 108, 97, 99, 59, 1, 336, 114, 59, 3, 55349, 56594, 114, 97, 118, 101, 5, 210, 1, 59, 4226, 1, 210, 4, 3, 97, 101, 105, 4236, 4241, 4246, 99, 114, 59, 1, 332, 103, 97, 59, 1, 937, 99, 114, 111, 110, 59, 1, 927, 112, 102, 59, 3, 55349, 56646, 101, 110, 67, 117, 114, 108, 121, 4, 2, 68, 81, 4272, 4285, 111, 117, 98, 108, 101, 81, 117, 111, 116, 101, 59, 1, 8220, 117, 111, 116, 101, 59, 1, 8216, 59, 1, 10836, 4, 2, 99, 108, 4301, 4306, 114, 59, 3, 55349, 56490, 97, 115, 104, 5, 216, 1, 59, 4314, 1, 216, 105, 4, 2, 108, 109, 4323, 4332, 100, 101, 5, 213, 1, 59, 4330, 1, 213, 101, 115, 59, 1, 10807, 109, 108, 5, 214, 1, 59, 4344, 1, 214, 101, 114, 4, 2, 66, 80, 4354, 4380, 4, 2, 97, 114, 4360, 4364, 114, 59, 1, 8254, 97, 99, 4, 2, 101, 107, 4372, 4375, 59, 1, 9182, 101, 116, 59, 1, 9140, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9180, 4, 9, 97, 99, 102, 104, 105, 108, 111, 114, 115, 4413, 4422, 4426, 4431, 4435, 4438, 4448, 4471, 4561, 114, 116, 105, 97, 108, 68, 59, 1, 8706, 121, 59, 1, 1055, 114, 59, 3, 55349, 56595, 105, 59, 1, 934, 59, 1, 928, 117, 115, 77, 105, 110, 117, 115, 59, 1, 177, 4, 2, 105, 112, 4454, 4467, 110, 99, 97, 114, 101, 112, 108, 97, 110, 101, 59, 1, 8460, 102, 59, 1, 8473, 4, 4, 59, 101, 105, 111, 4481, 4483, 4526, 4531, 1, 10939, 99, 101, 100, 101, 115, 4, 4, 59, 69, 83, 84, 4498, 4500, 4507, 4519, 1, 8826, 113, 117, 97, 108, 59, 1, 10927, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8828, 105, 108, 100, 101, 59, 1, 8830, 109, 101, 59, 1, 8243, 4, 2, 100, 112, 4537, 4543, 117, 99, 116, 59, 1, 8719, 111, 114, 116, 105, 111, 110, 4, 2, 59, 97, 4555, 4557, 1, 8759, 108, 59, 1, 8733, 4, 2, 99, 105, 4567, 4572, 114, 59, 3, 55349, 56491, 59, 1, 936, 4, 4, 85, 102, 111, 115, 4585, 4594, 4599, 4604, 79, 84, 5, 34, 1, 59, 4592, 1, 34, 114, 59, 3, 55349, 56596, 112, 102, 59, 1, 8474, 99, 114, 59, 3, 55349, 56492, 4, 12, 66, 69, 97, 99, 101, 102, 104, 105, 111, 114, 115, 117, 4636, 4642, 4650, 4681, 4704, 4763, 4767, 4771, 5047, 5069, 5081, 5094, 97, 114, 114, 59, 1, 10512, 71, 5, 174, 1, 59, 4648, 1, 174, 4, 3, 99, 110, 114, 4658, 4664, 4668, 117, 116, 101, 59, 1, 340, 103, 59, 1, 10219, 114, 4, 2, 59, 116, 4675, 4677, 1, 8608, 108, 59, 1, 10518, 4, 3, 97, 101, 121, 4689, 4695, 4701, 114, 111, 110, 59, 1, 344, 100, 105, 108, 59, 1, 342, 59, 1, 1056, 4, 2, 59, 118, 4710, 4712, 1, 8476, 101, 114, 115, 101, 4, 2, 69, 85, 4722, 4748, 4, 2, 108, 113, 4728, 4736, 101, 109, 101, 110, 116, 59, 1, 8715, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 8651, 112, 69, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10607, 114, 59, 1, 8476, 111, 59, 1, 929, 103, 104, 116, 4, 8, 65, 67, 68, 70, 84, 85, 86, 97, 4792, 4840, 4849, 4905, 4912, 4972, 5022, 5040, 4, 2, 110, 114, 4798, 4811, 103, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10217, 114, 111, 119, 4, 3, 59, 66, 76, 4822, 4824, 4829, 1, 8594, 97, 114, 59, 1, 8677, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8644, 101, 105, 108, 105, 110, 103, 59, 1, 8969, 111, 4, 2, 117, 119, 4856, 4869, 98, 108, 101, 66, 114, 97, 99, 107, 101, 116, 59, 1, 10215, 110, 4, 2, 84, 86, 4876, 4887, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10589, 101, 99, 116, 111, 114, 4, 2, 59, 66, 4898, 4900, 1, 8642, 97, 114, 59, 1, 10581, 108, 111, 111, 114, 59, 1, 8971, 4, 2, 101, 114, 4918, 4944, 101, 4, 3, 59, 65, 86, 4927, 4929, 4936, 1, 8866, 114, 114, 111, 119, 59, 1, 8614, 101, 99, 116, 111, 114, 59, 1, 10587, 105, 97, 110, 103, 108, 101, 4, 3, 59, 66, 69, 4958, 4960, 4965, 1, 8883, 97, 114, 59, 1, 10704, 113, 117, 97, 108, 59, 1, 8885, 112, 4, 3, 68, 84, 86, 4981, 4993, 5004, 111, 119, 110, 86, 101, 99, 116, 111, 114, 59, 1, 10575, 101, 101, 86, 101, 99, 116, 111, 114, 59, 1, 10588, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5015, 5017, 1, 8638, 97, 114, 59, 1, 10580, 101, 99, 116, 111, 114, 4, 2, 59, 66, 5033, 5035, 1, 8640, 97, 114, 59, 1, 10579, 114, 114, 111, 119, 59, 1, 8658, 4, 2, 112, 117, 5053, 5057, 102, 59, 1, 8477, 110, 100, 73, 109, 112, 108, 105, 101, 115, 59, 1, 10608, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8667, 4, 2, 99, 104, 5087, 5091, 114, 59, 1, 8475, 59, 1, 8625, 108, 101, 68, 101, 108, 97, 121, 101, 100, 59, 1, 10740, 4, 13, 72, 79, 97, 99, 102, 104, 105, 109, 111, 113, 115, 116, 117, 5134, 5150, 5157, 5164, 5198, 5203, 5259, 5265, 5277, 5283, 5374, 5380, 5385, 4, 2, 67, 99, 5140, 5146, 72, 99, 121, 59, 1, 1065, 121, 59, 1, 1064, 70, 84, 99, 121, 59, 1, 1068, 99, 117, 116, 101, 59, 1, 346, 4, 5, 59, 97, 101, 105, 121, 5176, 5178, 5184, 5190, 5195, 1, 10940, 114, 111, 110, 59, 1, 352, 100, 105, 108, 59, 1, 350, 114, 99, 59, 1, 348, 59, 1, 1057, 114, 59, 3, 55349, 56598, 111, 114, 116, 4, 4, 68, 76, 82, 85, 5216, 5227, 5238, 5250, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8595, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8592, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8594, 112, 65, 114, 114, 111, 119, 59, 1, 8593, 103, 109, 97, 59, 1, 931, 97, 108, 108, 67, 105, 114, 99, 108, 101, 59, 1, 8728, 112, 102, 59, 3, 55349, 56650, 4, 2, 114, 117, 5289, 5293, 116, 59, 1, 8730, 97, 114, 101, 4, 4, 59, 73, 83, 85, 5306, 5308, 5322, 5367, 1, 9633, 110, 116, 101, 114, 115, 101, 99, 116, 105, 111, 110, 59, 1, 8851, 117, 4, 2, 98, 112, 5329, 5347, 115, 101, 116, 4, 2, 59, 69, 5338, 5340, 1, 8847, 113, 117, 97, 108, 59, 1, 8849, 101, 114, 115, 101, 116, 4, 2, 59, 69, 5358, 5360, 1, 8848, 113, 117, 97, 108, 59, 1, 8850, 110, 105, 111, 110, 59, 1, 8852, 99, 114, 59, 3, 55349, 56494, 97, 114, 59, 1, 8902, 4, 4, 98, 99, 109, 112, 5395, 5420, 5475, 5478, 4, 2, 59, 115, 5401, 5403, 1, 8912, 101, 116, 4, 2, 59, 69, 5411, 5413, 1, 8912, 113, 117, 97, 108, 59, 1, 8838, 4, 2, 99, 104, 5426, 5468, 101, 101, 100, 115, 4, 4, 59, 69, 83, 84, 5440, 5442, 5449, 5461, 1, 8827, 113, 117, 97, 108, 59, 1, 10928, 108, 97, 110, 116, 69, 113, 117, 97, 108, 59, 1, 8829, 105, 108, 100, 101, 59, 1, 8831, 84, 104, 97, 116, 59, 1, 8715, 59, 1, 8721, 4, 3, 59, 101, 115, 5486, 5488, 5507, 1, 8913, 114, 115, 101, 116, 4, 2, 59, 69, 5498, 5500, 1, 8835, 113, 117, 97, 108, 59, 1, 8839, 101, 116, 59, 1, 8913, 4, 11, 72, 82, 83, 97, 99, 102, 104, 105, 111, 114, 115, 5536, 5546, 5552, 5567, 5579, 5602, 5607, 5655, 5695, 5701, 5711, 79, 82, 78, 5, 222, 1, 59, 5544, 1, 222, 65, 68, 69, 59, 1, 8482, 4, 2, 72, 99, 5558, 5563, 99, 121, 59, 1, 1035, 121, 59, 1, 1062, 4, 2, 98, 117, 5573, 5576, 59, 1, 9, 59, 1, 932, 4, 3, 97, 101, 121, 5587, 5593, 5599, 114, 111, 110, 59, 1, 356, 100, 105, 108, 59, 1, 354, 59, 1, 1058, 114, 59, 3, 55349, 56599, 4, 2, 101, 105, 5613, 5631, 4, 2, 114, 116, 5619, 5627, 101, 102, 111, 114, 101, 59, 1, 8756, 97, 59, 1, 920, 4, 2, 99, 110, 5637, 5647, 107, 83, 112, 97, 99, 101, 59, 3, 8287, 8202, 83, 112, 97, 99, 101, 59, 1, 8201, 108, 100, 101, 4, 4, 59, 69, 70, 84, 5668, 5670, 5677, 5688, 1, 8764, 113, 117, 97, 108, 59, 1, 8771, 117, 108, 108, 69, 113, 117, 97, 108, 59, 1, 8773, 105, 108, 100, 101, 59, 1, 8776, 112, 102, 59, 3, 55349, 56651, 105, 112, 108, 101, 68, 111, 116, 59, 1, 8411, 4, 2, 99, 116, 5717, 5722, 114, 59, 3, 55349, 56495, 114, 111, 107, 59, 1, 358, 4, 14, 97, 98, 99, 100, 102, 103, 109, 110, 111, 112, 114, 115, 116, 117, 5758, 5789, 5805, 5823, 5830, 5835, 5846, 5852, 5921, 5937, 6089, 6095, 6101, 6108, 4, 2, 99, 114, 5764, 5774, 117, 116, 101, 5, 218, 1, 59, 5772, 1, 218, 114, 4, 2, 59, 111, 5781, 5783, 1, 8607, 99, 105, 114, 59, 1, 10569, 114, 4, 2, 99, 101, 5796, 5800, 121, 59, 1, 1038, 118, 101, 59, 1, 364, 4, 2, 105, 121, 5811, 5820, 114, 99, 5, 219, 1, 59, 5818, 1, 219, 59, 1, 1059, 98, 108, 97, 99, 59, 1, 368, 114, 59, 3, 55349, 56600, 114, 97, 118, 101, 5, 217, 1, 59, 5844, 1, 217, 97, 99, 114, 59, 1, 362, 4, 2, 100, 105, 5858, 5905, 101, 114, 4, 2, 66, 80, 5866, 5892, 4, 2, 97, 114, 5872, 5876, 114, 59, 1, 95, 97, 99, 4, 2, 101, 107, 5884, 5887, 59, 1, 9183, 101, 116, 59, 1, 9141, 97, 114, 101, 110, 116, 104, 101, 115, 105, 115, 59, 1, 9181, 111, 110, 4, 2, 59, 80, 5913, 5915, 1, 8899, 108, 117, 115, 59, 1, 8846, 4, 2, 103, 112, 5927, 5932, 111, 110, 59, 1, 370, 102, 59, 3, 55349, 56652, 4, 8, 65, 68, 69, 84, 97, 100, 112, 115, 5955, 5985, 5996, 6009, 6026, 6033, 6044, 6075, 114, 114, 111, 119, 4, 3, 59, 66, 68, 5967, 5969, 5974, 1, 8593, 97, 114, 59, 1, 10514, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8645, 111, 119, 110, 65, 114, 114, 111, 119, 59, 1, 8597, 113, 117, 105, 108, 105, 98, 114, 105, 117, 109, 59, 1, 10606, 101, 101, 4, 2, 59, 65, 6017, 6019, 1, 8869, 114, 114, 111, 119, 59, 1, 8613, 114, 114, 111, 119, 59, 1, 8657, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8661, 101, 114, 4, 2, 76, 82, 6052, 6063, 101, 102, 116, 65, 114, 114, 111, 119, 59, 1, 8598, 105, 103, 104, 116, 65, 114, 114, 111, 119, 59, 1, 8599, 105, 4, 2, 59, 108, 6082, 6084, 1, 978, 111, 110, 59, 1, 933, 105, 110, 103, 59, 1, 366, 99, 114, 59, 3, 55349, 56496, 105, 108, 100, 101, 59, 1, 360, 109, 108, 5, 220, 1, 59, 6115, 1, 220, 4, 9, 68, 98, 99, 100, 101, 102, 111, 115, 118, 6137, 6143, 6148, 6152, 6166, 6250, 6255, 6261, 6267, 97, 115, 104, 59, 1, 8875, 97, 114, 59, 1, 10987, 121, 59, 1, 1042, 97, 115, 104, 4, 2, 59, 108, 6161, 6163, 1, 8873, 59, 1, 10982, 4, 2, 101, 114, 6172, 6175, 59, 1, 8897, 4, 3, 98, 116, 121, 6183, 6188, 6238, 97, 114, 59, 1, 8214, 4, 2, 59, 105, 6194, 6196, 1, 8214, 99, 97, 108, 4, 4, 66, 76, 83, 84, 6209, 6214, 6220, 6231, 97, 114, 59, 1, 8739, 105, 110, 101, 59, 1, 124, 101, 112, 97, 114, 97, 116, 111, 114, 59, 1, 10072, 105, 108, 100, 101, 59, 1, 8768, 84, 104, 105, 110, 83, 112, 97, 99, 101, 59, 1, 8202, 114, 59, 3, 55349, 56601, 112, 102, 59, 3, 55349, 56653, 99, 114, 59, 3, 55349, 56497, 100, 97, 115, 104, 59, 1, 8874, 4, 5, 99, 101, 102, 111, 115, 6286, 6292, 6298, 6303, 6309, 105, 114, 99, 59, 1, 372, 100, 103, 101, 59, 1, 8896, 114, 59, 3, 55349, 56602, 112, 102, 59, 3, 55349, 56654, 99, 114, 59, 3, 55349, 56498, 4, 4, 102, 105, 111, 115, 6325, 6330, 6333, 6339, 114, 59, 3, 55349, 56603, 59, 1, 926, 112, 102, 59, 3, 55349, 56655, 99, 114, 59, 3, 55349, 56499, 4, 9, 65, 73, 85, 97, 99, 102, 111, 115, 117, 6365, 6370, 6375, 6380, 6391, 6405, 6410, 6416, 6422, 99, 121, 59, 1, 1071, 99, 121, 59, 1, 1031, 99, 121, 59, 1, 1070, 99, 117, 116, 101, 5, 221, 1, 59, 6389, 1, 221, 4, 2, 105, 121, 6397, 6402, 114, 99, 59, 1, 374, 59, 1, 1067, 114, 59, 3, 55349, 56604, 112, 102, 59, 3, 55349, 56656, 99, 114, 59, 3, 55349, 56500, 109, 108, 59, 1, 376, 4, 8, 72, 97, 99, 100, 101, 102, 111, 115, 6445, 6450, 6457, 6472, 6477, 6501, 6505, 6510, 99, 121, 59, 1, 1046, 99, 117, 116, 101, 59, 1, 377, 4, 2, 97, 121, 6463, 6469, 114, 111, 110, 59, 1, 381, 59, 1, 1047, 111, 116, 59, 1, 379, 4, 2, 114, 116, 6483, 6497, 111, 87, 105, 100, 116, 104, 83, 112, 97, 99, 101, 59, 1, 8203, 97, 59, 1, 918, 114, 59, 1, 8488, 112, 102, 59, 1, 8484, 99, 114, 59, 3, 55349, 56501, 4, 16, 97, 98, 99, 101, 102, 103, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 6550, 6561, 6568, 6612, 6622, 6634, 6645, 6672, 6699, 6854, 6870, 6923, 6933, 6963, 6974, 6983, 99, 117, 116, 101, 5, 225, 1, 59, 6559, 1, 225, 114, 101, 118, 101, 59, 1, 259, 4, 6, 59, 69, 100, 105, 117, 121, 6582, 6584, 6588, 6591, 6600, 6609, 1, 8766, 59, 3, 8766, 819, 59, 1, 8767, 114, 99, 5, 226, 1, 59, 6598, 1, 226, 116, 101, 5, 180, 1, 59, 6607, 1, 180, 59, 1, 1072, 108, 105, 103, 5, 230, 1, 59, 6620, 1, 230, 4, 2, 59, 114, 6628, 6630, 1, 8289, 59, 3, 55349, 56606, 114, 97, 118, 101, 5, 224, 1, 59, 6643, 1, 224, 4, 2, 101, 112, 6651, 6667, 4, 2, 102, 112, 6657, 6663, 115, 121, 109, 59, 1, 8501, 104, 59, 1, 8501, 104, 97, 59, 1, 945, 4, 2, 97, 112, 6678, 6692, 4, 2, 99, 108, 6684, 6688, 114, 59, 1, 257, 103, 59, 1, 10815, 5, 38, 1, 59, 6697, 1, 38, 4, 2, 100, 103, 6705, 6737, 4, 5, 59, 97, 100, 115, 118, 6717, 6719, 6724, 6727, 6734, 1, 8743, 110, 100, 59, 1, 10837, 59, 1, 10844, 108, 111, 112, 101, 59, 1, 10840, 59, 1, 10842, 4, 7, 59, 101, 108, 109, 114, 115, 122, 6753, 6755, 6758, 6762, 6814, 6835, 6848, 1, 8736, 59, 1, 10660, 101, 59, 1, 8736, 115, 100, 4, 2, 59, 97, 6770, 6772, 1, 8737, 4, 8, 97, 98, 99, 100, 101, 102, 103, 104, 6790, 6793, 6796, 6799, 6802, 6805, 6808, 6811, 59, 1, 10664, 59, 1, 10665, 59, 1, 10666, 59, 1, 10667, 59, 1, 10668, 59, 1, 10669, 59, 1, 10670, 59, 1, 10671, 116, 4, 2, 59, 118, 6821, 6823, 1, 8735, 98, 4, 2, 59, 100, 6830, 6832, 1, 8894, 59, 1, 10653, 4, 2, 112, 116, 6841, 6845, 104, 59, 1, 8738, 59, 1, 197, 97, 114, 114, 59, 1, 9084, 4, 2, 103, 112, 6860, 6865, 111, 110, 59, 1, 261, 102, 59, 3, 55349, 56658, 4, 7, 59, 69, 97, 101, 105, 111, 112, 6886, 6888, 6891, 6897, 6900, 6904, 6908, 1, 8776, 59, 1, 10864, 99, 105, 114, 59, 1, 10863, 59, 1, 8778, 100, 59, 1, 8779, 115, 59, 1, 39, 114, 111, 120, 4, 2, 59, 101, 6917, 6919, 1, 8776, 113, 59, 1, 8778, 105, 110, 103, 5, 229, 1, 59, 6931, 1, 229, 4, 3, 99, 116, 121, 6941, 6946, 6949, 114, 59, 3, 55349, 56502, 59, 1, 42, 109, 112, 4, 2, 59, 101, 6957, 6959, 1, 8776, 113, 59, 1, 8781, 105, 108, 100, 101, 5, 227, 1, 59, 6972, 1, 227, 109, 108, 5, 228, 1, 59, 6981, 1, 228, 4, 2, 99, 105, 6989, 6997, 111, 110, 105, 110, 116, 59, 1, 8755, 110, 116, 59, 1, 10769, 4, 16, 78, 97, 98, 99, 100, 101, 102, 105, 107, 108, 110, 111, 112, 114, 115, 117, 7036, 7041, 7119, 7135, 7149, 7155, 7219, 7224, 7347, 7354, 7463, 7489, 7786, 7793, 7814, 7866, 111, 116, 59, 1, 10989, 4, 2, 99, 114, 7047, 7094, 107, 4, 4, 99, 101, 112, 115, 7058, 7064, 7073, 7080, 111, 110, 103, 59, 1, 8780, 112, 115, 105, 108, 111, 110, 59, 1, 1014, 114, 105, 109, 101, 59, 1, 8245, 105, 109, 4, 2, 59, 101, 7088, 7090, 1, 8765, 113, 59, 1, 8909, 4, 2, 118, 119, 7100, 7105, 101, 101, 59, 1, 8893, 101, 100, 4, 2, 59, 103, 7113, 7115, 1, 8965, 101, 59, 1, 8965, 114, 107, 4, 2, 59, 116, 7127, 7129, 1, 9141, 98, 114, 107, 59, 1, 9142, 4, 2, 111, 121, 7141, 7146, 110, 103, 59, 1, 8780, 59, 1, 1073, 113, 117, 111, 59, 1, 8222, 4, 5, 99, 109, 112, 114, 116, 7167, 7181, 7188, 7193, 7199, 97, 117, 115, 4, 2, 59, 101, 7176, 7178, 1, 8757, 59, 1, 8757, 112, 116, 121, 118, 59, 1, 10672, 115, 105, 59, 1, 1014, 110, 111, 117, 59, 1, 8492, 4, 3, 97, 104, 119, 7207, 7210, 7213, 59, 1, 946, 59, 1, 8502, 101, 101, 110, 59, 1, 8812, 114, 59, 3, 55349, 56607, 103, 4, 7, 99, 111, 115, 116, 117, 118, 119, 7241, 7262, 7288, 7305, 7328, 7335, 7340, 4, 3, 97, 105, 117, 7249, 7253, 7258, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 4, 3, 100, 112, 116, 7270, 7275, 7281, 111, 116, 59, 1, 10752, 108, 117, 115, 59, 1, 10753, 105, 109, 101, 115, 59, 1, 10754, 4, 2, 113, 116, 7294, 7300, 99, 117, 112, 59, 1, 10758, 97, 114, 59, 1, 9733, 114, 105, 97, 110, 103, 108, 101, 4, 2, 100, 117, 7318, 7324, 111, 119, 110, 59, 1, 9661, 112, 59, 1, 9651, 112, 108, 117, 115, 59, 1, 10756, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 97, 114, 111, 119, 59, 1, 10509, 4, 3, 97, 107, 111, 7362, 7436, 7458, 4, 2, 99, 110, 7368, 7432, 107, 4, 3, 108, 115, 116, 7377, 7386, 7394, 111, 122, 101, 110, 103, 101, 59, 1, 10731, 113, 117, 97, 114, 101, 59, 1, 9642, 114, 105, 97, 110, 103, 108, 101, 4, 4, 59, 100, 108, 114, 7411, 7413, 7419, 7425, 1, 9652, 111, 119, 110, 59, 1, 9662, 101, 102, 116, 59, 1, 9666, 105, 103, 104, 116, 59, 1, 9656, 107, 59, 1, 9251, 4, 2, 49, 51, 7442, 7454, 4, 2, 50, 52, 7448, 7451, 59, 1, 9618, 59, 1, 9617, 52, 59, 1, 9619, 99, 107, 59, 1, 9608, 4, 2, 101, 111, 7469, 7485, 4, 2, 59, 113, 7475, 7478, 3, 61, 8421, 117, 105, 118, 59, 3, 8801, 8421, 116, 59, 1, 8976, 4, 4, 112, 116, 119, 120, 7499, 7504, 7517, 7523, 102, 59, 3, 55349, 56659, 4, 2, 59, 116, 7510, 7512, 1, 8869, 111, 109, 59, 1, 8869, 116, 105, 101, 59, 1, 8904, 4, 12, 68, 72, 85, 86, 98, 100, 104, 109, 112, 116, 117, 118, 7549, 7571, 7597, 7619, 7655, 7660, 7682, 7708, 7715, 7721, 7728, 7750, 4, 4, 76, 82, 108, 114, 7559, 7562, 7565, 7568, 59, 1, 9559, 59, 1, 9556, 59, 1, 9558, 59, 1, 9555, 4, 5, 59, 68, 85, 100, 117, 7583, 7585, 7588, 7591, 7594, 1, 9552, 59, 1, 9574, 59, 1, 9577, 59, 1, 9572, 59, 1, 9575, 4, 4, 76, 82, 108, 114, 7607, 7610, 7613, 7616, 59, 1, 9565, 59, 1, 9562, 59, 1, 9564, 59, 1, 9561, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7635, 7637, 7640, 7643, 7646, 7649, 7652, 1, 9553, 59, 1, 9580, 59, 1, 9571, 59, 1, 9568, 59, 1, 9579, 59, 1, 9570, 59, 1, 9567, 111, 120, 59, 1, 10697, 4, 4, 76, 82, 108, 114, 7670, 7673, 7676, 7679, 59, 1, 9557, 59, 1, 9554, 59, 1, 9488, 59, 1, 9484, 4, 5, 59, 68, 85, 100, 117, 7694, 7696, 7699, 7702, 7705, 1, 9472, 59, 1, 9573, 59, 1, 9576, 59, 1, 9516, 59, 1, 9524, 105, 110, 117, 115, 59, 1, 8863, 108, 117, 115, 59, 1, 8862, 105, 109, 101, 115, 59, 1, 8864, 4, 4, 76, 82, 108, 114, 7738, 7741, 7744, 7747, 59, 1, 9563, 59, 1, 9560, 59, 1, 9496, 59, 1, 9492, 4, 7, 59, 72, 76, 82, 104, 108, 114, 7766, 7768, 7771, 7774, 7777, 7780, 7783, 1, 9474, 59, 1, 9578, 59, 1, 9569, 59, 1, 9566, 59, 1, 9532, 59, 1, 9508, 59, 1, 9500, 114, 105, 109, 101, 59, 1, 8245, 4, 2, 101, 118, 7799, 7804, 118, 101, 59, 1, 728, 98, 97, 114, 5, 166, 1, 59, 7812, 1, 166, 4, 4, 99, 101, 105, 111, 7824, 7829, 7834, 7846, 114, 59, 3, 55349, 56503, 109, 105, 59, 1, 8271, 109, 4, 2, 59, 101, 7841, 7843, 1, 8765, 59, 1, 8909, 108, 4, 3, 59, 98, 104, 7855, 7857, 7860, 1, 92, 59, 1, 10693, 115, 117, 98, 59, 1, 10184, 4, 2, 108, 109, 7872, 7885, 108, 4, 2, 59, 101, 7879, 7881, 1, 8226, 116, 59, 1, 8226, 112, 4, 3, 59, 69, 101, 7894, 7896, 7899, 1, 8782, 59, 1, 10926, 4, 2, 59, 113, 7905, 7907, 1, 8783, 59, 1, 8783, 4, 15, 97, 99, 100, 101, 102, 104, 105, 108, 111, 114, 115, 116, 117, 119, 121, 7942, 8021, 8075, 8080, 8121, 8126, 8157, 8279, 8295, 8430, 8446, 8485, 8491, 8707, 8726, 4, 3, 99, 112, 114, 7950, 7956, 8007, 117, 116, 101, 59, 1, 263, 4, 6, 59, 97, 98, 99, 100, 115, 7970, 7972, 7977, 7984, 7998, 8003, 1, 8745, 110, 100, 59, 1, 10820, 114, 99, 117, 112, 59, 1, 10825, 4, 2, 97, 117, 7990, 7994, 112, 59, 1, 10827, 112, 59, 1, 10823, 111, 116, 59, 1, 10816, 59, 3, 8745, 65024, 4, 2, 101, 111, 8013, 8017, 116, 59, 1, 8257, 110, 59, 1, 711, 4, 4, 97, 101, 105, 117, 8031, 8046, 8056, 8061, 4, 2, 112, 114, 8037, 8041, 115, 59, 1, 10829, 111, 110, 59, 1, 269, 100, 105, 108, 5, 231, 1, 59, 8054, 1, 231, 114, 99, 59, 1, 265, 112, 115, 4, 2, 59, 115, 8069, 8071, 1, 10828, 109, 59, 1, 10832, 111, 116, 59, 1, 267, 4, 3, 100, 109, 110, 8088, 8097, 8104, 105, 108, 5, 184, 1, 59, 8095, 1, 184, 112, 116, 121, 118, 59, 1, 10674, 116, 5, 162, 2, 59, 101, 8112, 8114, 1, 162, 114, 100, 111, 116, 59, 1, 183, 114, 59, 3, 55349, 56608, 4, 3, 99, 101, 105, 8134, 8138, 8154, 121, 59, 1, 1095, 99, 107, 4, 2, 59, 109, 8146, 8148, 1, 10003, 97, 114, 107, 59, 1, 10003, 59, 1, 967, 114, 4, 7, 59, 69, 99, 101, 102, 109, 115, 8174, 8176, 8179, 8258, 8261, 8268, 8273, 1, 9675, 59, 1, 10691, 4, 3, 59, 101, 108, 8187, 8189, 8193, 1, 710, 113, 59, 1, 8791, 101, 4, 2, 97, 100, 8200, 8223, 114, 114, 111, 119, 4, 2, 108, 114, 8210, 8216, 101, 102, 116, 59, 1, 8634, 105, 103, 104, 116, 59, 1, 8635, 4, 5, 82, 83, 97, 99, 100, 8235, 8238, 8241, 8246, 8252, 59, 1, 174, 59, 1, 9416, 115, 116, 59, 1, 8859, 105, 114, 99, 59, 1, 8858, 97, 115, 104, 59, 1, 8861, 59, 1, 8791, 110, 105, 110, 116, 59, 1, 10768, 105, 100, 59, 1, 10991, 99, 105, 114, 59, 1, 10690, 117, 98, 115, 4, 2, 59, 117, 8288, 8290, 1, 9827, 105, 116, 59, 1, 9827, 4, 4, 108, 109, 110, 112, 8305, 8326, 8376, 8400, 111, 110, 4, 2, 59, 101, 8313, 8315, 1, 58, 4, 2, 59, 113, 8321, 8323, 1, 8788, 59, 1, 8788, 4, 2, 109, 112, 8332, 8344, 97, 4, 2, 59, 116, 8339, 8341, 1, 44, 59, 1, 64, 4, 3, 59, 102, 108, 8352, 8354, 8358, 1, 8705, 110, 59, 1, 8728, 101, 4, 2, 109, 120, 8365, 8371, 101, 110, 116, 59, 1, 8705, 101, 115, 59, 1, 8450, 4, 2, 103, 105, 8382, 8395, 4, 2, 59, 100, 8388, 8390, 1, 8773, 111, 116, 59, 1, 10861, 110, 116, 59, 1, 8750, 4, 3, 102, 114, 121, 8408, 8412, 8417, 59, 3, 55349, 56660, 111, 100, 59, 1, 8720, 5, 169, 2, 59, 115, 8424, 8426, 1, 169, 114, 59, 1, 8471, 4, 2, 97, 111, 8436, 8441, 114, 114, 59, 1, 8629, 115, 115, 59, 1, 10007, 4, 2, 99, 117, 8452, 8457, 114, 59, 3, 55349, 56504, 4, 2, 98, 112, 8463, 8474, 4, 2, 59, 101, 8469, 8471, 1, 10959, 59, 1, 10961, 4, 2, 59, 101, 8480, 8482, 1, 10960, 59, 1, 10962, 100, 111, 116, 59, 1, 8943, 4, 7, 100, 101, 108, 112, 114, 118, 119, 8507, 8522, 8536, 8550, 8600, 8697, 8702, 97, 114, 114, 4, 2, 108, 114, 8516, 8519, 59, 1, 10552, 59, 1, 10549, 4, 2, 112, 115, 8528, 8532, 114, 59, 1, 8926, 99, 59, 1, 8927, 97, 114, 114, 4, 2, 59, 112, 8545, 8547, 1, 8630, 59, 1, 10557, 4, 6, 59, 98, 99, 100, 111, 115, 8564, 8566, 8573, 8587, 8592, 8596, 1, 8746, 114, 99, 97, 112, 59, 1, 10824, 4, 2, 97, 117, 8579, 8583, 112, 59, 1, 10822, 112, 59, 1, 10826, 111, 116, 59, 1, 8845, 114, 59, 1, 10821, 59, 3, 8746, 65024, 4, 4, 97, 108, 114, 118, 8610, 8623, 8663, 8672, 114, 114, 4, 2, 59, 109, 8618, 8620, 1, 8631, 59, 1, 10556, 121, 4, 3, 101, 118, 119, 8632, 8651, 8656, 113, 4, 2, 112, 115, 8639, 8645, 114, 101, 99, 59, 1, 8926, 117, 99, 99, 59, 1, 8927, 101, 101, 59, 1, 8910, 101, 100, 103, 101, 59, 1, 8911, 101, 110, 5, 164, 1, 59, 8670, 1, 164, 101, 97, 114, 114, 111, 119, 4, 2, 108, 114, 8684, 8690, 101, 102, 116, 59, 1, 8630, 105, 103, 104, 116, 59, 1, 8631, 101, 101, 59, 1, 8910, 101, 100, 59, 1, 8911, 4, 2, 99, 105, 8713, 8721, 111, 110, 105, 110, 116, 59, 1, 8754, 110, 116, 59, 1, 8753, 108, 99, 116, 121, 59, 1, 9005, 4, 19, 65, 72, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 111, 114, 115, 116, 117, 119, 122, 8773, 8778, 8783, 8821, 8839, 8854, 8887, 8914, 8930, 8944, 9036, 9041, 9058, 9197, 9227, 9258, 9281, 9297, 9305, 114, 114, 59, 1, 8659, 97, 114, 59, 1, 10597, 4, 4, 103, 108, 114, 115, 8793, 8799, 8805, 8809, 103, 101, 114, 59, 1, 8224, 101, 116, 104, 59, 1, 8504, 114, 59, 1, 8595, 104, 4, 2, 59, 118, 8816, 8818, 1, 8208, 59, 1, 8867, 4, 2, 107, 108, 8827, 8834, 97, 114, 111, 119, 59, 1, 10511, 97, 99, 59, 1, 733, 4, 2, 97, 121, 8845, 8851, 114, 111, 110, 59, 1, 271, 59, 1, 1076, 4, 3, 59, 97, 111, 8862, 8864, 8880, 1, 8518, 4, 2, 103, 114, 8870, 8876, 103, 101, 114, 59, 1, 8225, 114, 59, 1, 8650, 116, 115, 101, 113, 59, 1, 10871, 4, 3, 103, 108, 109, 8895, 8902, 8907, 5, 176, 1, 59, 8900, 1, 176, 116, 97, 59, 1, 948, 112, 116, 121, 118, 59, 1, 10673, 4, 2, 105, 114, 8920, 8926, 115, 104, 116, 59, 1, 10623, 59, 3, 55349, 56609, 97, 114, 4, 2, 108, 114, 8938, 8941, 59, 1, 8643, 59, 1, 8642, 4, 5, 97, 101, 103, 115, 118, 8956, 8986, 8989, 8996, 9001, 109, 4, 3, 59, 111, 115, 8965, 8967, 8983, 1, 8900, 110, 100, 4, 2, 59, 115, 8975, 8977, 1, 8900, 117, 105, 116, 59, 1, 9830, 59, 1, 9830, 59, 1, 168, 97, 109, 109, 97, 59, 1, 989, 105, 110, 59, 1, 8946, 4, 3, 59, 105, 111, 9009, 9011, 9031, 1, 247, 100, 101, 5, 247, 2, 59, 111, 9020, 9022, 1, 247, 110, 116, 105, 109, 101, 115, 59, 1, 8903, 110, 120, 59, 1, 8903, 99, 121, 59, 1, 1106, 99, 4, 2, 111, 114, 9048, 9053, 114, 110, 59, 1, 8990, 111, 112, 59, 1, 8973, 4, 5, 108, 112, 116, 117, 119, 9070, 9076, 9081, 9130, 9144, 108, 97, 114, 59, 1, 36, 102, 59, 3, 55349, 56661, 4, 5, 59, 101, 109, 112, 115, 9093, 9095, 9109, 9116, 9122, 1, 729, 113, 4, 2, 59, 100, 9102, 9104, 1, 8784, 111, 116, 59, 1, 8785, 105, 110, 117, 115, 59, 1, 8760, 108, 117, 115, 59, 1, 8724, 113, 117, 97, 114, 101, 59, 1, 8865, 98, 108, 101, 98, 97, 114, 119, 101, 100, 103, 101, 59, 1, 8966, 110, 4, 3, 97, 100, 104, 9153, 9160, 9172, 114, 114, 111, 119, 59, 1, 8595, 111, 119, 110, 97, 114, 114, 111, 119, 115, 59, 1, 8650, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 9184, 9190, 101, 102, 116, 59, 1, 8643, 105, 103, 104, 116, 59, 1, 8642, 4, 2, 98, 99, 9203, 9211, 107, 97, 114, 111, 119, 59, 1, 10512, 4, 2, 111, 114, 9217, 9222, 114, 110, 59, 1, 8991, 111, 112, 59, 1, 8972, 4, 3, 99, 111, 116, 9235, 9248, 9252, 4, 2, 114, 121, 9241, 9245, 59, 3, 55349, 56505, 59, 1, 1109, 108, 59, 1, 10742, 114, 111, 107, 59, 1, 273, 4, 2, 100, 114, 9264, 9269, 111, 116, 59, 1, 8945, 105, 4, 2, 59, 102, 9276, 9278, 1, 9663, 59, 1, 9662, 4, 2, 97, 104, 9287, 9292, 114, 114, 59, 1, 8693, 97, 114, 59, 1, 10607, 97, 110, 103, 108, 101, 59, 1, 10662, 4, 2, 99, 105, 9311, 9315, 121, 59, 1, 1119, 103, 114, 97, 114, 114, 59, 1, 10239, 4, 18, 68, 97, 99, 100, 101, 102, 103, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 9361, 9376, 9398, 9439, 9444, 9447, 9462, 9495, 9531, 9585, 9598, 9614, 9659, 9755, 9771, 9792, 9808, 9826, 4, 2, 68, 111, 9367, 9372, 111, 116, 59, 1, 10871, 116, 59, 1, 8785, 4, 2, 99, 115, 9382, 9392, 117, 116, 101, 5, 233, 1, 59, 9390, 1, 233, 116, 101, 114, 59, 1, 10862, 4, 4, 97, 105, 111, 121, 9408, 9414, 9430, 9436, 114, 111, 110, 59, 1, 283, 114, 4, 2, 59, 99, 9421, 9423, 1, 8790, 5, 234, 1, 59, 9428, 1, 234, 108, 111, 110, 59, 1, 8789, 59, 1, 1101, 111, 116, 59, 1, 279, 59, 1, 8519, 4, 2, 68, 114, 9453, 9458, 111, 116, 59, 1, 8786, 59, 3, 55349, 56610, 4, 3, 59, 114, 115, 9470, 9472, 9482, 1, 10906, 97, 118, 101, 5, 232, 1, 59, 9480, 1, 232, 4, 2, 59, 100, 9488, 9490, 1, 10902, 111, 116, 59, 1, 10904, 4, 4, 59, 105, 108, 115, 9505, 9507, 9515, 9518, 1, 10905, 110, 116, 101, 114, 115, 59, 1, 9191, 59, 1, 8467, 4, 2, 59, 100, 9524, 9526, 1, 10901, 111, 116, 59, 1, 10903, 4, 3, 97, 112, 115, 9539, 9544, 9564, 99, 114, 59, 1, 275, 116, 121, 4, 3, 59, 115, 118, 9554, 9556, 9561, 1, 8709, 101, 116, 59, 1, 8709, 59, 1, 8709, 112, 4, 2, 49, 59, 9571, 9583, 4, 2, 51, 52, 9577, 9580, 59, 1, 8196, 59, 1, 8197, 1, 8195, 4, 2, 103, 115, 9591, 9594, 59, 1, 331, 112, 59, 1, 8194, 4, 2, 103, 112, 9604, 9609, 111, 110, 59, 1, 281, 102, 59, 3, 55349, 56662, 4, 3, 97, 108, 115, 9622, 9635, 9640, 114, 4, 2, 59, 115, 9629, 9631, 1, 8917, 108, 59, 1, 10723, 117, 115, 59, 1, 10865, 105, 4, 3, 59, 108, 118, 9649, 9651, 9656, 1, 949, 111, 110, 59, 1, 949, 59, 1, 1013, 4, 4, 99, 115, 117, 118, 9669, 9686, 9716, 9747, 4, 2, 105, 111, 9675, 9680, 114, 99, 59, 1, 8790, 108, 111, 110, 59, 1, 8789, 4, 2, 105, 108, 9692, 9696, 109, 59, 1, 8770, 97, 110, 116, 4, 2, 103, 108, 9705, 9710, 116, 114, 59, 1, 10902, 101, 115, 115, 59, 1, 10901, 4, 3, 97, 101, 105, 9724, 9729, 9734, 108, 115, 59, 1, 61, 115, 116, 59, 1, 8799, 118, 4, 2, 59, 68, 9741, 9743, 1, 8801, 68, 59, 1, 10872, 112, 97, 114, 115, 108, 59, 1, 10725, 4, 2, 68, 97, 9761, 9766, 111, 116, 59, 1, 8787, 114, 114, 59, 1, 10609, 4, 3, 99, 100, 105, 9779, 9783, 9788, 114, 59, 1, 8495, 111, 116, 59, 1, 8784, 109, 59, 1, 8770, 4, 2, 97, 104, 9798, 9801, 59, 1, 951, 5, 240, 1, 59, 9806, 1, 240, 4, 2, 109, 114, 9814, 9822, 108, 5, 235, 1, 59, 9820, 1, 235, 111, 59, 1, 8364, 4, 3, 99, 105, 112, 9834, 9838, 9843, 108, 59, 1, 33, 115, 116, 59, 1, 8707, 4, 2, 101, 111, 9849, 9859, 99, 116, 97, 116, 105, 111, 110, 59, 1, 8496, 110, 101, 110, 116, 105, 97, 108, 101, 59, 1, 8519, 4, 12, 97, 99, 101, 102, 105, 106, 108, 110, 111, 112, 114, 115, 9896, 9910, 9914, 9921, 9954, 9960, 9967, 9989, 9994, 10027, 10036, 10164, 108, 108, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8786, 121, 59, 1, 1092, 109, 97, 108, 101, 59, 1, 9792, 4, 3, 105, 108, 114, 9929, 9935, 9950, 108, 105, 103, 59, 1, 64259, 4, 2, 105, 108, 9941, 9945, 103, 59, 1, 64256, 105, 103, 59, 1, 64260, 59, 3, 55349, 56611, 108, 105, 103, 59, 1, 64257, 108, 105, 103, 59, 3, 102, 106, 4, 3, 97, 108, 116, 9975, 9979, 9984, 116, 59, 1, 9837, 105, 103, 59, 1, 64258, 110, 115, 59, 1, 9649, 111, 102, 59, 1, 402, 4, 2, 112, 114, 1e4, 10005, 102, 59, 3, 55349, 56663, 4, 2, 97, 107, 10011, 10016, 108, 108, 59, 1, 8704, 4, 2, 59, 118, 10022, 10024, 1, 8916, 59, 1, 10969, 97, 114, 116, 105, 110, 116, 59, 1, 10765, 4, 2, 97, 111, 10042, 10159, 4, 2, 99, 115, 10048, 10155, 4, 6, 49, 50, 51, 52, 53, 55, 10062, 10102, 10114, 10135, 10139, 10151, 4, 6, 50, 51, 52, 53, 54, 56, 10076, 10083, 10086, 10093, 10096, 10099, 5, 189, 1, 59, 10081, 1, 189, 59, 1, 8531, 5, 188, 1, 59, 10091, 1, 188, 59, 1, 8533, 59, 1, 8537, 59, 1, 8539, 4, 2, 51, 53, 10108, 10111, 59, 1, 8532, 59, 1, 8534, 4, 3, 52, 53, 56, 10122, 10129, 10132, 5, 190, 1, 59, 10127, 1, 190, 59, 1, 8535, 59, 1, 8540, 53, 59, 1, 8536, 4, 2, 54, 56, 10145, 10148, 59, 1, 8538, 59, 1, 8541, 56, 59, 1, 8542, 108, 59, 1, 8260, 119, 110, 59, 1, 8994, 99, 114, 59, 3, 55349, 56507, 4, 17, 69, 97, 98, 99, 100, 101, 102, 103, 105, 106, 108, 110, 111, 114, 115, 116, 118, 10206, 10217, 10247, 10254, 10268, 10273, 10358, 10363, 10374, 10380, 10385, 10406, 10458, 10464, 10470, 10497, 10610, 4, 2, 59, 108, 10212, 10214, 1, 8807, 59, 1, 10892, 4, 3, 99, 109, 112, 10225, 10231, 10244, 117, 116, 101, 59, 1, 501, 109, 97, 4, 2, 59, 100, 10239, 10241, 1, 947, 59, 1, 989, 59, 1, 10886, 114, 101, 118, 101, 59, 1, 287, 4, 2, 105, 121, 10260, 10265, 114, 99, 59, 1, 285, 59, 1, 1075, 111, 116, 59, 1, 289, 4, 4, 59, 108, 113, 115, 10283, 10285, 10288, 10308, 1, 8805, 59, 1, 8923, 4, 3, 59, 113, 115, 10296, 10298, 10301, 1, 8805, 59, 1, 8807, 108, 97, 110, 116, 59, 1, 10878, 4, 4, 59, 99, 100, 108, 10318, 10320, 10324, 10345, 1, 10878, 99, 59, 1, 10921, 111, 116, 4, 2, 59, 111, 10332, 10334, 1, 10880, 4, 2, 59, 108, 10340, 10342, 1, 10882, 59, 1, 10884, 4, 2, 59, 101, 10351, 10354, 3, 8923, 65024, 115, 59, 1, 10900, 114, 59, 3, 55349, 56612, 4, 2, 59, 103, 10369, 10371, 1, 8811, 59, 1, 8921, 109, 101, 108, 59, 1, 8503, 99, 121, 59, 1, 1107, 4, 4, 59, 69, 97, 106, 10395, 10397, 10400, 10403, 1, 8823, 59, 1, 10898, 59, 1, 10917, 59, 1, 10916, 4, 4, 69, 97, 101, 115, 10416, 10419, 10434, 10453, 59, 1, 8809, 112, 4, 2, 59, 112, 10426, 10428, 1, 10890, 114, 111, 120, 59, 1, 10890, 4, 2, 59, 113, 10440, 10442, 1, 10888, 4, 2, 59, 113, 10448, 10450, 1, 10888, 59, 1, 8809, 105, 109, 59, 1, 8935, 112, 102, 59, 3, 55349, 56664, 97, 118, 101, 59, 1, 96, 4, 2, 99, 105, 10476, 10480, 114, 59, 1, 8458, 109, 4, 3, 59, 101, 108, 10489, 10491, 10494, 1, 8819, 59, 1, 10894, 59, 1, 10896, 5, 62, 6, 59, 99, 100, 108, 113, 114, 10512, 10514, 10527, 10532, 10538, 10545, 1, 62, 4, 2, 99, 105, 10520, 10523, 59, 1, 10919, 114, 59, 1, 10874, 111, 116, 59, 1, 8919, 80, 97, 114, 59, 1, 10645, 117, 101, 115, 116, 59, 1, 10876, 4, 5, 97, 100, 101, 108, 115, 10557, 10574, 10579, 10599, 10605, 4, 2, 112, 114, 10563, 10570, 112, 114, 111, 120, 59, 1, 10886, 114, 59, 1, 10616, 111, 116, 59, 1, 8919, 113, 4, 2, 108, 113, 10586, 10592, 101, 115, 115, 59, 1, 8923, 108, 101, 115, 115, 59, 1, 10892, 101, 115, 115, 59, 1, 8823, 105, 109, 59, 1, 8819, 4, 2, 101, 110, 10616, 10626, 114, 116, 110, 101, 113, 113, 59, 3, 8809, 65024, 69, 59, 3, 8809, 65024, 4, 10, 65, 97, 98, 99, 101, 102, 107, 111, 115, 121, 10653, 10658, 10713, 10718, 10724, 10760, 10765, 10786, 10850, 10875, 114, 114, 59, 1, 8660, 4, 4, 105, 108, 109, 114, 10668, 10674, 10678, 10684, 114, 115, 112, 59, 1, 8202, 102, 59, 1, 189, 105, 108, 116, 59, 1, 8459, 4, 2, 100, 114, 10690, 10695, 99, 121, 59, 1, 1098, 4, 3, 59, 99, 119, 10703, 10705, 10710, 1, 8596, 105, 114, 59, 1, 10568, 59, 1, 8621, 97, 114, 59, 1, 8463, 105, 114, 99, 59, 1, 293, 4, 3, 97, 108, 114, 10732, 10748, 10754, 114, 116, 115, 4, 2, 59, 117, 10741, 10743, 1, 9829, 105, 116, 59, 1, 9829, 108, 105, 112, 59, 1, 8230, 99, 111, 110, 59, 1, 8889, 114, 59, 3, 55349, 56613, 115, 4, 2, 101, 119, 10772, 10779, 97, 114, 111, 119, 59, 1, 10533, 97, 114, 111, 119, 59, 1, 10534, 4, 5, 97, 109, 111, 112, 114, 10798, 10803, 10809, 10839, 10844, 114, 114, 59, 1, 8703, 116, 104, 116, 59, 1, 8763, 107, 4, 2, 108, 114, 10816, 10827, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8617, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8618, 102, 59, 3, 55349, 56665, 98, 97, 114, 59, 1, 8213, 4, 3, 99, 108, 116, 10858, 10863, 10869, 114, 59, 3, 55349, 56509, 97, 115, 104, 59, 1, 8463, 114, 111, 107, 59, 1, 295, 4, 2, 98, 112, 10881, 10887, 117, 108, 108, 59, 1, 8259, 104, 101, 110, 59, 1, 8208, 4, 15, 97, 99, 101, 102, 103, 105, 106, 109, 110, 111, 112, 113, 115, 116, 117, 10925, 10936, 10958, 10977, 10990, 11001, 11039, 11045, 11101, 11192, 11220, 11226, 11237, 11285, 11299, 99, 117, 116, 101, 5, 237, 1, 59, 10934, 1, 237, 4, 3, 59, 105, 121, 10944, 10946, 10955, 1, 8291, 114, 99, 5, 238, 1, 59, 10953, 1, 238, 59, 1, 1080, 4, 2, 99, 120, 10964, 10968, 121, 59, 1, 1077, 99, 108, 5, 161, 1, 59, 10975, 1, 161, 4, 2, 102, 114, 10983, 10986, 59, 1, 8660, 59, 3, 55349, 56614, 114, 97, 118, 101, 5, 236, 1, 59, 10999, 1, 236, 4, 4, 59, 105, 110, 111, 11011, 11013, 11028, 11034, 1, 8520, 4, 2, 105, 110, 11019, 11024, 110, 116, 59, 1, 10764, 116, 59, 1, 8749, 102, 105, 110, 59, 1, 10716, 116, 97, 59, 1, 8489, 108, 105, 103, 59, 1, 307, 4, 3, 97, 111, 112, 11053, 11092, 11096, 4, 3, 99, 103, 116, 11061, 11065, 11088, 114, 59, 1, 299, 4, 3, 101, 108, 112, 11073, 11076, 11082, 59, 1, 8465, 105, 110, 101, 59, 1, 8464, 97, 114, 116, 59, 1, 8465, 104, 59, 1, 305, 102, 59, 1, 8887, 101, 100, 59, 1, 437, 4, 5, 59, 99, 102, 111, 116, 11113, 11115, 11121, 11136, 11142, 1, 8712, 97, 114, 101, 59, 1, 8453, 105, 110, 4, 2, 59, 116, 11129, 11131, 1, 8734, 105, 101, 59, 1, 10717, 100, 111, 116, 59, 1, 305, 4, 5, 59, 99, 101, 108, 112, 11154, 11156, 11161, 11179, 11186, 1, 8747, 97, 108, 59, 1, 8890, 4, 2, 103, 114, 11167, 11173, 101, 114, 115, 59, 1, 8484, 99, 97, 108, 59, 1, 8890, 97, 114, 104, 107, 59, 1, 10775, 114, 111, 100, 59, 1, 10812, 4, 4, 99, 103, 112, 116, 11202, 11206, 11211, 11216, 121, 59, 1, 1105, 111, 110, 59, 1, 303, 102, 59, 3, 55349, 56666, 97, 59, 1, 953, 114, 111, 100, 59, 1, 10812, 117, 101, 115, 116, 5, 191, 1, 59, 11235, 1, 191, 4, 2, 99, 105, 11243, 11248, 114, 59, 3, 55349, 56510, 110, 4, 5, 59, 69, 100, 115, 118, 11261, 11263, 11266, 11271, 11282, 1, 8712, 59, 1, 8953, 111, 116, 59, 1, 8949, 4, 2, 59, 118, 11277, 11279, 1, 8948, 59, 1, 8947, 59, 1, 8712, 4, 2, 59, 105, 11291, 11293, 1, 8290, 108, 100, 101, 59, 1, 297, 4, 2, 107, 109, 11305, 11310, 99, 121, 59, 1, 1110, 108, 5, 239, 1, 59, 11316, 1, 239, 4, 6, 99, 102, 109, 111, 115, 117, 11332, 11346, 11351, 11357, 11363, 11380, 4, 2, 105, 121, 11338, 11343, 114, 99, 59, 1, 309, 59, 1, 1081, 114, 59, 3, 55349, 56615, 97, 116, 104, 59, 1, 567, 112, 102, 59, 3, 55349, 56667, 4, 2, 99, 101, 11369, 11374, 114, 59, 3, 55349, 56511, 114, 99, 121, 59, 1, 1112, 107, 99, 121, 59, 1, 1108, 4, 8, 97, 99, 102, 103, 104, 106, 111, 115, 11404, 11418, 11433, 11438, 11445, 11450, 11455, 11461, 112, 112, 97, 4, 2, 59, 118, 11413, 11415, 1, 954, 59, 1, 1008, 4, 2, 101, 121, 11424, 11430, 100, 105, 108, 59, 1, 311, 59, 1, 1082, 114, 59, 3, 55349, 56616, 114, 101, 101, 110, 59, 1, 312, 99, 121, 59, 1, 1093, 99, 121, 59, 1, 1116, 112, 102, 59, 3, 55349, 56668, 99, 114, 59, 3, 55349, 56512, 4, 23, 65, 66, 69, 72, 97, 98, 99, 100, 101, 102, 103, 104, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 11515, 11538, 11544, 11555, 11560, 11721, 11780, 11818, 11868, 12136, 12160, 12171, 12203, 12208, 12246, 12275, 12327, 12509, 12523, 12569, 12641, 12732, 12752, 4, 3, 97, 114, 116, 11523, 11528, 11532, 114, 114, 59, 1, 8666, 114, 59, 1, 8656, 97, 105, 108, 59, 1, 10523, 97, 114, 114, 59, 1, 10510, 4, 2, 59, 103, 11550, 11552, 1, 8806, 59, 1, 10891, 97, 114, 59, 1, 10594, 4, 9, 99, 101, 103, 109, 110, 112, 113, 114, 116, 11580, 11586, 11594, 11600, 11606, 11624, 11627, 11636, 11694, 117, 116, 101, 59, 1, 314, 109, 112, 116, 121, 118, 59, 1, 10676, 114, 97, 110, 59, 1, 8466, 98, 100, 97, 59, 1, 955, 103, 4, 3, 59, 100, 108, 11615, 11617, 11620, 1, 10216, 59, 1, 10641, 101, 59, 1, 10216, 59, 1, 10885, 117, 111, 5, 171, 1, 59, 11634, 1, 171, 114, 4, 8, 59, 98, 102, 104, 108, 112, 115, 116, 11655, 11657, 11669, 11673, 11677, 11681, 11685, 11690, 1, 8592, 4, 2, 59, 102, 11663, 11665, 1, 8676, 115, 59, 1, 10527, 115, 59, 1, 10525, 107, 59, 1, 8617, 112, 59, 1, 8619, 108, 59, 1, 10553, 105, 109, 59, 1, 10611, 108, 59, 1, 8610, 4, 3, 59, 97, 101, 11702, 11704, 11709, 1, 10923, 105, 108, 59, 1, 10521, 4, 2, 59, 115, 11715, 11717, 1, 10925, 59, 3, 10925, 65024, 4, 3, 97, 98, 114, 11729, 11734, 11739, 114, 114, 59, 1, 10508, 114, 107, 59, 1, 10098, 4, 2, 97, 107, 11745, 11758, 99, 4, 2, 101, 107, 11752, 11755, 59, 1, 123, 59, 1, 91, 4, 2, 101, 115, 11764, 11767, 59, 1, 10635, 108, 4, 2, 100, 117, 11774, 11777, 59, 1, 10639, 59, 1, 10637, 4, 4, 97, 101, 117, 121, 11790, 11796, 11811, 11815, 114, 111, 110, 59, 1, 318, 4, 2, 100, 105, 11802, 11807, 105, 108, 59, 1, 316, 108, 59, 1, 8968, 98, 59, 1, 123, 59, 1, 1083, 4, 4, 99, 113, 114, 115, 11828, 11832, 11845, 11864, 97, 59, 1, 10550, 117, 111, 4, 2, 59, 114, 11840, 11842, 1, 8220, 59, 1, 8222, 4, 2, 100, 117, 11851, 11857, 104, 97, 114, 59, 1, 10599, 115, 104, 97, 114, 59, 1, 10571, 104, 59, 1, 8626, 4, 5, 59, 102, 103, 113, 115, 11880, 11882, 12008, 12011, 12031, 1, 8804, 116, 4, 5, 97, 104, 108, 114, 116, 11895, 11913, 11935, 11947, 11996, 114, 114, 111, 119, 4, 2, 59, 116, 11905, 11907, 1, 8592, 97, 105, 108, 59, 1, 8610, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 11925, 11931, 111, 119, 110, 59, 1, 8637, 112, 59, 1, 8636, 101, 102, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8647, 105, 103, 104, 116, 4, 3, 97, 104, 115, 11959, 11974, 11984, 114, 114, 111, 119, 4, 2, 59, 115, 11969, 11971, 1, 8596, 59, 1, 8646, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8651, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8621, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8907, 59, 1, 8922, 4, 3, 59, 113, 115, 12019, 12021, 12024, 1, 8804, 59, 1, 8806, 108, 97, 110, 116, 59, 1, 10877, 4, 5, 59, 99, 100, 103, 115, 12043, 12045, 12049, 12070, 12083, 1, 10877, 99, 59, 1, 10920, 111, 116, 4, 2, 59, 111, 12057, 12059, 1, 10879, 4, 2, 59, 114, 12065, 12067, 1, 10881, 59, 1, 10883, 4, 2, 59, 101, 12076, 12079, 3, 8922, 65024, 115, 59, 1, 10899, 4, 5, 97, 100, 101, 103, 115, 12095, 12103, 12108, 12126, 12131, 112, 112, 114, 111, 120, 59, 1, 10885, 111, 116, 59, 1, 8918, 113, 4, 2, 103, 113, 12115, 12120, 116, 114, 59, 1, 8922, 103, 116, 114, 59, 1, 10891, 116, 114, 59, 1, 8822, 105, 109, 59, 1, 8818, 4, 3, 105, 108, 114, 12144, 12150, 12156, 115, 104, 116, 59, 1, 10620, 111, 111, 114, 59, 1, 8970, 59, 3, 55349, 56617, 4, 2, 59, 69, 12166, 12168, 1, 8822, 59, 1, 10897, 4, 2, 97, 98, 12177, 12198, 114, 4, 2, 100, 117, 12184, 12187, 59, 1, 8637, 4, 2, 59, 108, 12193, 12195, 1, 8636, 59, 1, 10602, 108, 107, 59, 1, 9604, 99, 121, 59, 1, 1113, 4, 5, 59, 97, 99, 104, 116, 12220, 12222, 12227, 12235, 12241, 1, 8810, 114, 114, 59, 1, 8647, 111, 114, 110, 101, 114, 59, 1, 8990, 97, 114, 100, 59, 1, 10603, 114, 105, 59, 1, 9722, 4, 2, 105, 111, 12252, 12258, 100, 111, 116, 59, 1, 320, 117, 115, 116, 4, 2, 59, 97, 12267, 12269, 1, 9136, 99, 104, 101, 59, 1, 9136, 4, 4, 69, 97, 101, 115, 12285, 12288, 12303, 12322, 59, 1, 8808, 112, 4, 2, 59, 112, 12295, 12297, 1, 10889, 114, 111, 120, 59, 1, 10889, 4, 2, 59, 113, 12309, 12311, 1, 10887, 4, 2, 59, 113, 12317, 12319, 1, 10887, 59, 1, 8808, 105, 109, 59, 1, 8934, 4, 8, 97, 98, 110, 111, 112, 116, 119, 122, 12345, 12359, 12364, 12421, 12446, 12467, 12474, 12490, 4, 2, 110, 114, 12351, 12355, 103, 59, 1, 10220, 114, 59, 1, 8701, 114, 107, 59, 1, 10214, 103, 4, 3, 108, 109, 114, 12373, 12401, 12409, 101, 102, 116, 4, 2, 97, 114, 12382, 12389, 114, 114, 111, 119, 59, 1, 10229, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10231, 97, 112, 115, 116, 111, 59, 1, 10236, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 10230, 112, 97, 114, 114, 111, 119, 4, 2, 108, 114, 12433, 12439, 101, 102, 116, 59, 1, 8619, 105, 103, 104, 116, 59, 1, 8620, 4, 3, 97, 102, 108, 12454, 12458, 12462, 114, 59, 1, 10629, 59, 3, 55349, 56669, 117, 115, 59, 1, 10797, 105, 109, 101, 115, 59, 1, 10804, 4, 2, 97, 98, 12480, 12485, 115, 116, 59, 1, 8727, 97, 114, 59, 1, 95, 4, 3, 59, 101, 102, 12498, 12500, 12506, 1, 9674, 110, 103, 101, 59, 1, 9674, 59, 1, 10731, 97, 114, 4, 2, 59, 108, 12517, 12519, 1, 40, 116, 59, 1, 10643, 4, 5, 97, 99, 104, 109, 116, 12535, 12540, 12548, 12561, 12564, 114, 114, 59, 1, 8646, 111, 114, 110, 101, 114, 59, 1, 8991, 97, 114, 4, 2, 59, 100, 12556, 12558, 1, 8651, 59, 1, 10605, 59, 1, 8206, 114, 105, 59, 1, 8895, 4, 6, 97, 99, 104, 105, 113, 116, 12583, 12589, 12594, 12597, 12614, 12635, 113, 117, 111, 59, 1, 8249, 114, 59, 3, 55349, 56513, 59, 1, 8624, 109, 4, 3, 59, 101, 103, 12606, 12608, 12611, 1, 8818, 59, 1, 10893, 59, 1, 10895, 4, 2, 98, 117, 12620, 12623, 59, 1, 91, 111, 4, 2, 59, 114, 12630, 12632, 1, 8216, 59, 1, 8218, 114, 111, 107, 59, 1, 322, 5, 60, 8, 59, 99, 100, 104, 105, 108, 113, 114, 12660, 12662, 12675, 12680, 12686, 12692, 12698, 12705, 1, 60, 4, 2, 99, 105, 12668, 12671, 59, 1, 10918, 114, 59, 1, 10873, 111, 116, 59, 1, 8918, 114, 101, 101, 59, 1, 8907, 109, 101, 115, 59, 1, 8905, 97, 114, 114, 59, 1, 10614, 117, 101, 115, 116, 59, 1, 10875, 4, 2, 80, 105, 12711, 12716, 97, 114, 59, 1, 10646, 4, 3, 59, 101, 102, 12724, 12726, 12729, 1, 9667, 59, 1, 8884, 59, 1, 9666, 114, 4, 2, 100, 117, 12739, 12746, 115, 104, 97, 114, 59, 1, 10570, 104, 97, 114, 59, 1, 10598, 4, 2, 101, 110, 12758, 12768, 114, 116, 110, 101, 113, 113, 59, 3, 8808, 65024, 69, 59, 3, 8808, 65024, 4, 14, 68, 97, 99, 100, 101, 102, 104, 105, 108, 110, 111, 112, 115, 117, 12803, 12809, 12893, 12908, 12914, 12928, 12933, 12937, 13011, 13025, 13032, 13049, 13052, 13069, 68, 111, 116, 59, 1, 8762, 4, 4, 99, 108, 112, 114, 12819, 12827, 12849, 12887, 114, 5, 175, 1, 59, 12825, 1, 175, 4, 2, 101, 116, 12833, 12836, 59, 1, 9794, 4, 2, 59, 101, 12842, 12844, 1, 10016, 115, 101, 59, 1, 10016, 4, 2, 59, 115, 12855, 12857, 1, 8614, 116, 111, 4, 4, 59, 100, 108, 117, 12869, 12871, 12877, 12883, 1, 8614, 111, 119, 110, 59, 1, 8615, 101, 102, 116, 59, 1, 8612, 112, 59, 1, 8613, 107, 101, 114, 59, 1, 9646, 4, 2, 111, 121, 12899, 12905, 109, 109, 97, 59, 1, 10793, 59, 1, 1084, 97, 115, 104, 59, 1, 8212, 97, 115, 117, 114, 101, 100, 97, 110, 103, 108, 101, 59, 1, 8737, 114, 59, 3, 55349, 56618, 111, 59, 1, 8487, 4, 3, 99, 100, 110, 12945, 12954, 12985, 114, 111, 5, 181, 1, 59, 12952, 1, 181, 4, 4, 59, 97, 99, 100, 12964, 12966, 12971, 12976, 1, 8739, 115, 116, 59, 1, 42, 105, 114, 59, 1, 10992, 111, 116, 5, 183, 1, 59, 12983, 1, 183, 117, 115, 4, 3, 59, 98, 100, 12995, 12997, 13e3, 1, 8722, 59, 1, 8863, 4, 2, 59, 117, 13006, 13008, 1, 8760, 59, 1, 10794, 4, 2, 99, 100, 13017, 13021, 112, 59, 1, 10971, 114, 59, 1, 8230, 112, 108, 117, 115, 59, 1, 8723, 4, 2, 100, 112, 13038, 13044, 101, 108, 115, 59, 1, 8871, 102, 59, 3, 55349, 56670, 59, 1, 8723, 4, 2, 99, 116, 13058, 13063, 114, 59, 3, 55349, 56514, 112, 111, 115, 59, 1, 8766, 4, 3, 59, 108, 109, 13077, 13079, 13087, 1, 956, 116, 105, 109, 97, 112, 59, 1, 8888, 97, 112, 59, 1, 8888, 4, 24, 71, 76, 82, 86, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 108, 109, 111, 112, 114, 115, 116, 117, 118, 119, 13142, 13165, 13217, 13229, 13247, 13330, 13359, 13414, 13420, 13508, 13513, 13579, 13602, 13626, 13631, 13762, 13767, 13855, 13936, 13995, 14214, 14285, 14312, 14432, 4, 2, 103, 116, 13148, 13152, 59, 3, 8921, 824, 4, 2, 59, 118, 13158, 13161, 3, 8811, 8402, 59, 3, 8811, 824, 4, 3, 101, 108, 116, 13173, 13200, 13204, 102, 116, 4, 2, 97, 114, 13181, 13188, 114, 114, 111, 119, 59, 1, 8653, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8654, 59, 3, 8920, 824, 4, 2, 59, 118, 13210, 13213, 3, 8810, 8402, 59, 3, 8810, 824, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8655, 4, 2, 68, 100, 13235, 13241, 97, 115, 104, 59, 1, 8879, 97, 115, 104, 59, 1, 8878, 4, 5, 98, 99, 110, 112, 116, 13259, 13264, 13270, 13275, 13308, 108, 97, 59, 1, 8711, 117, 116, 101, 59, 1, 324, 103, 59, 3, 8736, 8402, 4, 5, 59, 69, 105, 111, 112, 13287, 13289, 13293, 13298, 13302, 1, 8777, 59, 3, 10864, 824, 100, 59, 3, 8779, 824, 115, 59, 1, 329, 114, 111, 120, 59, 1, 8777, 117, 114, 4, 2, 59, 97, 13316, 13318, 1, 9838, 108, 4, 2, 59, 115, 13325, 13327, 1, 9838, 59, 1, 8469, 4, 2, 115, 117, 13336, 13344, 112, 5, 160, 1, 59, 13342, 1, 160, 109, 112, 4, 2, 59, 101, 13352, 13355, 3, 8782, 824, 59, 3, 8783, 824, 4, 5, 97, 101, 111, 117, 121, 13371, 13385, 13391, 13407, 13411, 4, 2, 112, 114, 13377, 13380, 59, 1, 10819, 111, 110, 59, 1, 328, 100, 105, 108, 59, 1, 326, 110, 103, 4, 2, 59, 100, 13399, 13401, 1, 8775, 111, 116, 59, 3, 10861, 824, 112, 59, 1, 10818, 59, 1, 1085, 97, 115, 104, 59, 1, 8211, 4, 7, 59, 65, 97, 100, 113, 115, 120, 13436, 13438, 13443, 13466, 13472, 13478, 13494, 1, 8800, 114, 114, 59, 1, 8663, 114, 4, 2, 104, 114, 13450, 13454, 107, 59, 1, 10532, 4, 2, 59, 111, 13460, 13462, 1, 8599, 119, 59, 1, 8599, 111, 116, 59, 3, 8784, 824, 117, 105, 118, 59, 1, 8802, 4, 2, 101, 105, 13484, 13489, 97, 114, 59, 1, 10536, 109, 59, 3, 8770, 824, 105, 115, 116, 4, 2, 59, 115, 13503, 13505, 1, 8708, 59, 1, 8708, 114, 59, 3, 55349, 56619, 4, 4, 69, 101, 115, 116, 13523, 13527, 13563, 13568, 59, 3, 8807, 824, 4, 3, 59, 113, 115, 13535, 13537, 13559, 1, 8817, 4, 3, 59, 113, 115, 13545, 13547, 13551, 1, 8817, 59, 3, 8807, 824, 108, 97, 110, 116, 59, 3, 10878, 824, 59, 3, 10878, 824, 105, 109, 59, 1, 8821, 4, 2, 59, 114, 13574, 13576, 1, 8815, 59, 1, 8815, 4, 3, 65, 97, 112, 13587, 13592, 13597, 114, 114, 59, 1, 8654, 114, 114, 59, 1, 8622, 97, 114, 59, 1, 10994, 4, 3, 59, 115, 118, 13610, 13612, 13623, 1, 8715, 4, 2, 59, 100, 13618, 13620, 1, 8956, 59, 1, 8954, 59, 1, 8715, 99, 121, 59, 1, 1114, 4, 7, 65, 69, 97, 100, 101, 115, 116, 13647, 13652, 13656, 13661, 13665, 13737, 13742, 114, 114, 59, 1, 8653, 59, 3, 8806, 824, 114, 114, 59, 1, 8602, 114, 59, 1, 8229, 4, 4, 59, 102, 113, 115, 13675, 13677, 13703, 13725, 1, 8816, 116, 4, 2, 97, 114, 13684, 13691, 114, 114, 111, 119, 59, 1, 8602, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8622, 4, 3, 59, 113, 115, 13711, 13713, 13717, 1, 8816, 59, 3, 8806, 824, 108, 97, 110, 116, 59, 3, 10877, 824, 4, 2, 59, 115, 13731, 13734, 3, 10877, 824, 59, 1, 8814, 105, 109, 59, 1, 8820, 4, 2, 59, 114, 13748, 13750, 1, 8814, 105, 4, 2, 59, 101, 13757, 13759, 1, 8938, 59, 1, 8940, 105, 100, 59, 1, 8740, 4, 2, 112, 116, 13773, 13778, 102, 59, 3, 55349, 56671, 5, 172, 3, 59, 105, 110, 13787, 13789, 13829, 1, 172, 110, 4, 4, 59, 69, 100, 118, 13800, 13802, 13806, 13812, 1, 8713, 59, 3, 8953, 824, 111, 116, 59, 3, 8949, 824, 4, 3, 97, 98, 99, 13820, 13823, 13826, 59, 1, 8713, 59, 1, 8951, 59, 1, 8950, 105, 4, 2, 59, 118, 13836, 13838, 1, 8716, 4, 3, 97, 98, 99, 13846, 13849, 13852, 59, 1, 8716, 59, 1, 8958, 59, 1, 8957, 4, 3, 97, 111, 114, 13863, 13892, 13899, 114, 4, 4, 59, 97, 115, 116, 13874, 13876, 13883, 13888, 1, 8742, 108, 108, 101, 108, 59, 1, 8742, 108, 59, 3, 11005, 8421, 59, 3, 8706, 824, 108, 105, 110, 116, 59, 1, 10772, 4, 3, 59, 99, 101, 13907, 13909, 13914, 1, 8832, 117, 101, 59, 1, 8928, 4, 2, 59, 99, 13920, 13923, 3, 10927, 824, 4, 2, 59, 101, 13929, 13931, 1, 8832, 113, 59, 3, 10927, 824, 4, 4, 65, 97, 105, 116, 13946, 13951, 13971, 13982, 114, 114, 59, 1, 8655, 114, 114, 4, 3, 59, 99, 119, 13961, 13963, 13967, 1, 8603, 59, 3, 10547, 824, 59, 3, 8605, 824, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8603, 114, 105, 4, 2, 59, 101, 13990, 13992, 1, 8939, 59, 1, 8941, 4, 7, 99, 104, 105, 109, 112, 113, 117, 14011, 14036, 14060, 14080, 14085, 14090, 14106, 4, 4, 59, 99, 101, 114, 14021, 14023, 14028, 14032, 1, 8833, 117, 101, 59, 1, 8929, 59, 3, 10928, 824, 59, 3, 55349, 56515, 111, 114, 116, 4, 2, 109, 112, 14045, 14050, 105, 100, 59, 1, 8740, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8742, 109, 4, 2, 59, 101, 14067, 14069, 1, 8769, 4, 2, 59, 113, 14075, 14077, 1, 8772, 59, 1, 8772, 105, 100, 59, 1, 8740, 97, 114, 59, 1, 8742, 115, 117, 4, 2, 98, 112, 14098, 14102, 101, 59, 1, 8930, 101, 59, 1, 8931, 4, 3, 98, 99, 112, 14114, 14157, 14171, 4, 4, 59, 69, 101, 115, 14124, 14126, 14130, 14133, 1, 8836, 59, 3, 10949, 824, 59, 1, 8840, 101, 116, 4, 2, 59, 101, 14141, 14144, 3, 8834, 8402, 113, 4, 2, 59, 113, 14151, 14153, 1, 8840, 59, 3, 10949, 824, 99, 4, 2, 59, 101, 14164, 14166, 1, 8833, 113, 59, 3, 10928, 824, 4, 4, 59, 69, 101, 115, 14181, 14183, 14187, 14190, 1, 8837, 59, 3, 10950, 824, 59, 1, 8841, 101, 116, 4, 2, 59, 101, 14198, 14201, 3, 8835, 8402, 113, 4, 2, 59, 113, 14208, 14210, 1, 8841, 59, 3, 10950, 824, 4, 4, 103, 105, 108, 114, 14224, 14228, 14238, 14242, 108, 59, 1, 8825, 108, 100, 101, 5, 241, 1, 59, 14236, 1, 241, 103, 59, 1, 8824, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 14254, 14269, 101, 102, 116, 4, 2, 59, 101, 14263, 14265, 1, 8938, 113, 59, 1, 8940, 105, 103, 104, 116, 4, 2, 59, 101, 14279, 14281, 1, 8939, 113, 59, 1, 8941, 4, 2, 59, 109, 14291, 14293, 1, 957, 4, 3, 59, 101, 115, 14301, 14303, 14308, 1, 35, 114, 111, 59, 1, 8470, 112, 59, 1, 8199, 4, 9, 68, 72, 97, 100, 103, 105, 108, 114, 115, 14332, 14338, 14344, 14349, 14355, 14369, 14376, 14408, 14426, 97, 115, 104, 59, 1, 8877, 97, 114, 114, 59, 1, 10500, 112, 59, 3, 8781, 8402, 97, 115, 104, 59, 1, 8876, 4, 2, 101, 116, 14361, 14365, 59, 3, 8805, 8402, 59, 3, 62, 8402, 110, 102, 105, 110, 59, 1, 10718, 4, 3, 65, 101, 116, 14384, 14389, 14393, 114, 114, 59, 1, 10498, 59, 3, 8804, 8402, 4, 2, 59, 114, 14399, 14402, 3, 60, 8402, 105, 101, 59, 3, 8884, 8402, 4, 2, 65, 116, 14414, 14419, 114, 114, 59, 1, 10499, 114, 105, 101, 59, 3, 8885, 8402, 105, 109, 59, 3, 8764, 8402, 4, 3, 65, 97, 110, 14440, 14445, 14468, 114, 114, 59, 1, 8662, 114, 4, 2, 104, 114, 14452, 14456, 107, 59, 1, 10531, 4, 2, 59, 111, 14462, 14464, 1, 8598, 119, 59, 1, 8598, 101, 97, 114, 59, 1, 10535, 4, 18, 83, 97, 99, 100, 101, 102, 103, 104, 105, 108, 109, 111, 112, 114, 115, 116, 117, 118, 14512, 14515, 14535, 14560, 14597, 14603, 14618, 14643, 14657, 14662, 14701, 14741, 14747, 14769, 14851, 14877, 14907, 14916, 59, 1, 9416, 4, 2, 99, 115, 14521, 14531, 117, 116, 101, 5, 243, 1, 59, 14529, 1, 243, 116, 59, 1, 8859, 4, 2, 105, 121, 14541, 14557, 114, 4, 2, 59, 99, 14548, 14550, 1, 8858, 5, 244, 1, 59, 14555, 1, 244, 59, 1, 1086, 4, 5, 97, 98, 105, 111, 115, 14572, 14577, 14583, 14587, 14591, 115, 104, 59, 1, 8861, 108, 97, 99, 59, 1, 337, 118, 59, 1, 10808, 116, 59, 1, 8857, 111, 108, 100, 59, 1, 10684, 108, 105, 103, 59, 1, 339, 4, 2, 99, 114, 14609, 14614, 105, 114, 59, 1, 10687, 59, 3, 55349, 56620, 4, 3, 111, 114, 116, 14626, 14630, 14640, 110, 59, 1, 731, 97, 118, 101, 5, 242, 1, 59, 14638, 1, 242, 59, 1, 10689, 4, 2, 98, 109, 14649, 14654, 97, 114, 59, 1, 10677, 59, 1, 937, 110, 116, 59, 1, 8750, 4, 4, 97, 99, 105, 116, 14672, 14677, 14693, 14698, 114, 114, 59, 1, 8634, 4, 2, 105, 114, 14683, 14687, 114, 59, 1, 10686, 111, 115, 115, 59, 1, 10683, 110, 101, 59, 1, 8254, 59, 1, 10688, 4, 3, 97, 101, 105, 14709, 14714, 14719, 99, 114, 59, 1, 333, 103, 97, 59, 1, 969, 4, 3, 99, 100, 110, 14727, 14733, 14736, 114, 111, 110, 59, 1, 959, 59, 1, 10678, 117, 115, 59, 1, 8854, 112, 102, 59, 3, 55349, 56672, 4, 3, 97, 101, 108, 14755, 14759, 14764, 114, 59, 1, 10679, 114, 112, 59, 1, 10681, 117, 115, 59, 1, 8853, 4, 7, 59, 97, 100, 105, 111, 115, 118, 14785, 14787, 14792, 14831, 14837, 14841, 14848, 1, 8744, 114, 114, 59, 1, 8635, 4, 4, 59, 101, 102, 109, 14802, 14804, 14817, 14824, 1, 10845, 114, 4, 2, 59, 111, 14811, 14813, 1, 8500, 102, 59, 1, 8500, 5, 170, 1, 59, 14822, 1, 170, 5, 186, 1, 59, 14829, 1, 186, 103, 111, 102, 59, 1, 8886, 114, 59, 1, 10838, 108, 111, 112, 101, 59, 1, 10839, 59, 1, 10843, 4, 3, 99, 108, 111, 14859, 14863, 14873, 114, 59, 1, 8500, 97, 115, 104, 5, 248, 1, 59, 14871, 1, 248, 108, 59, 1, 8856, 105, 4, 2, 108, 109, 14884, 14893, 100, 101, 5, 245, 1, 59, 14891, 1, 245, 101, 115, 4, 2, 59, 97, 14901, 14903, 1, 8855, 115, 59, 1, 10806, 109, 108, 5, 246, 1, 59, 14914, 1, 246, 98, 97, 114, 59, 1, 9021, 4, 12, 97, 99, 101, 102, 104, 105, 108, 109, 111, 114, 115, 117, 14948, 14992, 14996, 15033, 15038, 15068, 15090, 15189, 15192, 15222, 15427, 15441, 114, 4, 4, 59, 97, 115, 116, 14959, 14961, 14976, 14989, 1, 8741, 5, 182, 2, 59, 108, 14968, 14970, 1, 182, 108, 101, 108, 59, 1, 8741, 4, 2, 105, 108, 14982, 14986, 109, 59, 1, 10995, 59, 1, 11005, 59, 1, 8706, 121, 59, 1, 1087, 114, 4, 5, 99, 105, 109, 112, 116, 15009, 15014, 15019, 15024, 15027, 110, 116, 59, 1, 37, 111, 100, 59, 1, 46, 105, 108, 59, 1, 8240, 59, 1, 8869, 101, 110, 107, 59, 1, 8241, 114, 59, 3, 55349, 56621, 4, 3, 105, 109, 111, 15046, 15057, 15063, 4, 2, 59, 118, 15052, 15054, 1, 966, 59, 1, 981, 109, 97, 116, 59, 1, 8499, 110, 101, 59, 1, 9742, 4, 3, 59, 116, 118, 15076, 15078, 15087, 1, 960, 99, 104, 102, 111, 114, 107, 59, 1, 8916, 59, 1, 982, 4, 2, 97, 117, 15096, 15119, 110, 4, 2, 99, 107, 15103, 15115, 107, 4, 2, 59, 104, 15110, 15112, 1, 8463, 59, 1, 8462, 118, 59, 1, 8463, 115, 4, 9, 59, 97, 98, 99, 100, 101, 109, 115, 116, 15140, 15142, 15148, 15151, 15156, 15168, 15171, 15179, 15184, 1, 43, 99, 105, 114, 59, 1, 10787, 59, 1, 8862, 105, 114, 59, 1, 10786, 4, 2, 111, 117, 15162, 15165, 59, 1, 8724, 59, 1, 10789, 59, 1, 10866, 110, 5, 177, 1, 59, 15177, 1, 177, 105, 109, 59, 1, 10790, 119, 111, 59, 1, 10791, 59, 1, 177, 4, 3, 105, 112, 117, 15200, 15208, 15213, 110, 116, 105, 110, 116, 59, 1, 10773, 102, 59, 3, 55349, 56673, 110, 100, 5, 163, 1, 59, 15220, 1, 163, 4, 10, 59, 69, 97, 99, 101, 105, 110, 111, 115, 117, 15244, 15246, 15249, 15253, 15258, 15334, 15347, 15367, 15416, 15421, 1, 8826, 59, 1, 10931, 112, 59, 1, 10935, 117, 101, 59, 1, 8828, 4, 2, 59, 99, 15264, 15266, 1, 10927, 4, 6, 59, 97, 99, 101, 110, 115, 15280, 15282, 15290, 15299, 15303, 15329, 1, 8826, 112, 112, 114, 111, 120, 59, 1, 10935, 117, 114, 108, 121, 101, 113, 59, 1, 8828, 113, 59, 1, 10927, 4, 3, 97, 101, 115, 15311, 15319, 15324, 112, 112, 114, 111, 120, 59, 1, 10937, 113, 113, 59, 1, 10933, 105, 109, 59, 1, 8936, 105, 109, 59, 1, 8830, 109, 101, 4, 2, 59, 115, 15342, 15344, 1, 8242, 59, 1, 8473, 4, 3, 69, 97, 115, 15355, 15358, 15362, 59, 1, 10933, 112, 59, 1, 10937, 105, 109, 59, 1, 8936, 4, 3, 100, 102, 112, 15375, 15378, 15404, 59, 1, 8719, 4, 3, 97, 108, 115, 15386, 15392, 15398, 108, 97, 114, 59, 1, 9006, 105, 110, 101, 59, 1, 8978, 117, 114, 102, 59, 1, 8979, 4, 2, 59, 116, 15410, 15412, 1, 8733, 111, 59, 1, 8733, 105, 109, 59, 1, 8830, 114, 101, 108, 59, 1, 8880, 4, 2, 99, 105, 15433, 15438, 114, 59, 3, 55349, 56517, 59, 1, 968, 110, 99, 115, 112, 59, 1, 8200, 4, 6, 102, 105, 111, 112, 115, 117, 15462, 15467, 15472, 15478, 15485, 15491, 114, 59, 3, 55349, 56622, 110, 116, 59, 1, 10764, 112, 102, 59, 3, 55349, 56674, 114, 105, 109, 101, 59, 1, 8279, 99, 114, 59, 3, 55349, 56518, 4, 3, 97, 101, 111, 15499, 15520, 15534, 116, 4, 2, 101, 105, 15506, 15515, 114, 110, 105, 111, 110, 115, 59, 1, 8461, 110, 116, 59, 1, 10774, 115, 116, 4, 2, 59, 101, 15528, 15530, 1, 63, 113, 59, 1, 8799, 116, 5, 34, 1, 59, 15540, 1, 34, 4, 21, 65, 66, 72, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 110, 111, 112, 114, 115, 116, 117, 120, 15586, 15609, 15615, 15620, 15796, 15855, 15893, 15931, 15977, 16001, 16039, 16183, 16204, 16222, 16228, 16285, 16312, 16318, 16363, 16408, 16416, 4, 3, 97, 114, 116, 15594, 15599, 15603, 114, 114, 59, 1, 8667, 114, 59, 1, 8658, 97, 105, 108, 59, 1, 10524, 97, 114, 114, 59, 1, 10511, 97, 114, 59, 1, 10596, 4, 7, 99, 100, 101, 110, 113, 114, 116, 15636, 15651, 15656, 15664, 15687, 15696, 15770, 4, 2, 101, 117, 15642, 15646, 59, 3, 8765, 817, 116, 101, 59, 1, 341, 105, 99, 59, 1, 8730, 109, 112, 116, 121, 118, 59, 1, 10675, 103, 4, 4, 59, 100, 101, 108, 15675, 15677, 15680, 15683, 1, 10217, 59, 1, 10642, 59, 1, 10661, 101, 59, 1, 10217, 117, 111, 5, 187, 1, 59, 15694, 1, 187, 114, 4, 11, 59, 97, 98, 99, 102, 104, 108, 112, 115, 116, 119, 15721, 15723, 15727, 15739, 15742, 15746, 15750, 15754, 15758, 15763, 15767, 1, 8594, 112, 59, 1, 10613, 4, 2, 59, 102, 15733, 15735, 1, 8677, 115, 59, 1, 10528, 59, 1, 10547, 115, 59, 1, 10526, 107, 59, 1, 8618, 112, 59, 1, 8620, 108, 59, 1, 10565, 105, 109, 59, 1, 10612, 108, 59, 1, 8611, 59, 1, 8605, 4, 2, 97, 105, 15776, 15781, 105, 108, 59, 1, 10522, 111, 4, 2, 59, 110, 15788, 15790, 1, 8758, 97, 108, 115, 59, 1, 8474, 4, 3, 97, 98, 114, 15804, 15809, 15814, 114, 114, 59, 1, 10509, 114, 107, 59, 1, 10099, 4, 2, 97, 107, 15820, 15833, 99, 4, 2, 101, 107, 15827, 15830, 59, 1, 125, 59, 1, 93, 4, 2, 101, 115, 15839, 15842, 59, 1, 10636, 108, 4, 2, 100, 117, 15849, 15852, 59, 1, 10638, 59, 1, 10640, 4, 4, 97, 101, 117, 121, 15865, 15871, 15886, 15890, 114, 111, 110, 59, 1, 345, 4, 2, 100, 105, 15877, 15882, 105, 108, 59, 1, 343, 108, 59, 1, 8969, 98, 59, 1, 125, 59, 1, 1088, 4, 4, 99, 108, 113, 115, 15903, 15907, 15914, 15927, 97, 59, 1, 10551, 100, 104, 97, 114, 59, 1, 10601, 117, 111, 4, 2, 59, 114, 15922, 15924, 1, 8221, 59, 1, 8221, 104, 59, 1, 8627, 4, 3, 97, 99, 103, 15939, 15966, 15970, 108, 4, 4, 59, 105, 112, 115, 15950, 15952, 15957, 15963, 1, 8476, 110, 101, 59, 1, 8475, 97, 114, 116, 59, 1, 8476, 59, 1, 8477, 116, 59, 1, 9645, 5, 174, 1, 59, 15975, 1, 174, 4, 3, 105, 108, 114, 15985, 15991, 15997, 115, 104, 116, 59, 1, 10621, 111, 111, 114, 59, 1, 8971, 59, 3, 55349, 56623, 4, 2, 97, 111, 16007, 16028, 114, 4, 2, 100, 117, 16014, 16017, 59, 1, 8641, 4, 2, 59, 108, 16023, 16025, 1, 8640, 59, 1, 10604, 4, 2, 59, 118, 16034, 16036, 1, 961, 59, 1, 1009, 4, 3, 103, 110, 115, 16047, 16167, 16171, 104, 116, 4, 6, 97, 104, 108, 114, 115, 116, 16063, 16081, 16103, 16130, 16143, 16155, 114, 114, 111, 119, 4, 2, 59, 116, 16073, 16075, 1, 8594, 97, 105, 108, 59, 1, 8611, 97, 114, 112, 111, 111, 110, 4, 2, 100, 117, 16093, 16099, 111, 119, 110, 59, 1, 8641, 112, 59, 1, 8640, 101, 102, 116, 4, 2, 97, 104, 16112, 16120, 114, 114, 111, 119, 115, 59, 1, 8644, 97, 114, 112, 111, 111, 110, 115, 59, 1, 8652, 105, 103, 104, 116, 97, 114, 114, 111, 119, 115, 59, 1, 8649, 113, 117, 105, 103, 97, 114, 114, 111, 119, 59, 1, 8605, 104, 114, 101, 101, 116, 105, 109, 101, 115, 59, 1, 8908, 103, 59, 1, 730, 105, 110, 103, 100, 111, 116, 115, 101, 113, 59, 1, 8787, 4, 3, 97, 104, 109, 16191, 16196, 16201, 114, 114, 59, 1, 8644, 97, 114, 59, 1, 8652, 59, 1, 8207, 111, 117, 115, 116, 4, 2, 59, 97, 16214, 16216, 1, 9137, 99, 104, 101, 59, 1, 9137, 109, 105, 100, 59, 1, 10990, 4, 4, 97, 98, 112, 116, 16238, 16252, 16257, 16278, 4, 2, 110, 114, 16244, 16248, 103, 59, 1, 10221, 114, 59, 1, 8702, 114, 107, 59, 1, 10215, 4, 3, 97, 102, 108, 16265, 16269, 16273, 114, 59, 1, 10630, 59, 3, 55349, 56675, 117, 115, 59, 1, 10798, 105, 109, 101, 115, 59, 1, 10805, 4, 2, 97, 112, 16291, 16304, 114, 4, 2, 59, 103, 16298, 16300, 1, 41, 116, 59, 1, 10644, 111, 108, 105, 110, 116, 59, 1, 10770, 97, 114, 114, 59, 1, 8649, 4, 4, 97, 99, 104, 113, 16328, 16334, 16339, 16342, 113, 117, 111, 59, 1, 8250, 114, 59, 3, 55349, 56519, 59, 1, 8625, 4, 2, 98, 117, 16348, 16351, 59, 1, 93, 111, 4, 2, 59, 114, 16358, 16360, 1, 8217, 59, 1, 8217, 4, 3, 104, 105, 114, 16371, 16377, 16383, 114, 101, 101, 59, 1, 8908, 109, 101, 115, 59, 1, 8906, 105, 4, 4, 59, 101, 102, 108, 16394, 16396, 16399, 16402, 1, 9657, 59, 1, 8885, 59, 1, 9656, 116, 114, 105, 59, 1, 10702, 108, 117, 104, 97, 114, 59, 1, 10600, 59, 1, 8478, 4, 19, 97, 98, 99, 100, 101, 102, 104, 105, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 122, 16459, 16466, 16472, 16572, 16590, 16672, 16687, 16746, 16844, 16850, 16924, 16963, 16988, 17115, 17121, 17154, 17206, 17614, 17656, 99, 117, 116, 101, 59, 1, 347, 113, 117, 111, 59, 1, 8218, 4, 10, 59, 69, 97, 99, 101, 105, 110, 112, 115, 121, 16494, 16496, 16499, 16513, 16518, 16531, 16536, 16556, 16564, 16569, 1, 8827, 59, 1, 10932, 4, 2, 112, 114, 16505, 16508, 59, 1, 10936, 111, 110, 59, 1, 353, 117, 101, 59, 1, 8829, 4, 2, 59, 100, 16524, 16526, 1, 10928, 105, 108, 59, 1, 351, 114, 99, 59, 1, 349, 4, 3, 69, 97, 115, 16544, 16547, 16551, 59, 1, 10934, 112, 59, 1, 10938, 105, 109, 59, 1, 8937, 111, 108, 105, 110, 116, 59, 1, 10771, 105, 109, 59, 1, 8831, 59, 1, 1089, 111, 116, 4, 3, 59, 98, 101, 16582, 16584, 16587, 1, 8901, 59, 1, 8865, 59, 1, 10854, 4, 7, 65, 97, 99, 109, 115, 116, 120, 16606, 16611, 16634, 16642, 16646, 16652, 16668, 114, 114, 59, 1, 8664, 114, 4, 2, 104, 114, 16618, 16622, 107, 59, 1, 10533, 4, 2, 59, 111, 16628, 16630, 1, 8600, 119, 59, 1, 8600, 116, 5, 167, 1, 59, 16640, 1, 167, 105, 59, 1, 59, 119, 97, 114, 59, 1, 10537, 109, 4, 2, 105, 110, 16659, 16665, 110, 117, 115, 59, 1, 8726, 59, 1, 8726, 116, 59, 1, 10038, 114, 4, 2, 59, 111, 16679, 16682, 3, 55349, 56624, 119, 110, 59, 1, 8994, 4, 4, 97, 99, 111, 121, 16697, 16702, 16716, 16739, 114, 112, 59, 1, 9839, 4, 2, 104, 121, 16708, 16713, 99, 121, 59, 1, 1097, 59, 1, 1096, 114, 116, 4, 2, 109, 112, 16724, 16729, 105, 100, 59, 1, 8739, 97, 114, 97, 108, 108, 101, 108, 59, 1, 8741, 5, 173, 1, 59, 16744, 1, 173, 4, 2, 103, 109, 16752, 16770, 109, 97, 4, 3, 59, 102, 118, 16762, 16764, 16767, 1, 963, 59, 1, 962, 59, 1, 962, 4, 8, 59, 100, 101, 103, 108, 110, 112, 114, 16788, 16790, 16795, 16806, 16817, 16828, 16832, 16838, 1, 8764, 111, 116, 59, 1, 10858, 4, 2, 59, 113, 16801, 16803, 1, 8771, 59, 1, 8771, 4, 2, 59, 69, 16812, 16814, 1, 10910, 59, 1, 10912, 4, 2, 59, 69, 16823, 16825, 1, 10909, 59, 1, 10911, 101, 59, 1, 8774, 108, 117, 115, 59, 1, 10788, 97, 114, 114, 59, 1, 10610, 97, 114, 114, 59, 1, 8592, 4, 4, 97, 101, 105, 116, 16860, 16883, 16891, 16904, 4, 2, 108, 115, 16866, 16878, 108, 115, 101, 116, 109, 105, 110, 117, 115, 59, 1, 8726, 104, 112, 59, 1, 10803, 112, 97, 114, 115, 108, 59, 1, 10724, 4, 2, 100, 108, 16897, 16900, 59, 1, 8739, 101, 59, 1, 8995, 4, 2, 59, 101, 16910, 16912, 1, 10922, 4, 2, 59, 115, 16918, 16920, 1, 10924, 59, 3, 10924, 65024, 4, 3, 102, 108, 112, 16932, 16938, 16958, 116, 99, 121, 59, 1, 1100, 4, 2, 59, 98, 16944, 16946, 1, 47, 4, 2, 59, 97, 16952, 16954, 1, 10692, 114, 59, 1, 9023, 102, 59, 3, 55349, 56676, 97, 4, 2, 100, 114, 16970, 16985, 101, 115, 4, 2, 59, 117, 16978, 16980, 1, 9824, 105, 116, 59, 1, 9824, 59, 1, 8741, 4, 3, 99, 115, 117, 16996, 17028, 17089, 4, 2, 97, 117, 17002, 17015, 112, 4, 2, 59, 115, 17009, 17011, 1, 8851, 59, 3, 8851, 65024, 112, 4, 2, 59, 115, 17022, 17024, 1, 8852, 59, 3, 8852, 65024, 117, 4, 2, 98, 112, 17035, 17062, 4, 3, 59, 101, 115, 17043, 17045, 17048, 1, 8847, 59, 1, 8849, 101, 116, 4, 2, 59, 101, 17056, 17058, 1, 8847, 113, 59, 1, 8849, 4, 3, 59, 101, 115, 17070, 17072, 17075, 1, 8848, 59, 1, 8850, 101, 116, 4, 2, 59, 101, 17083, 17085, 1, 8848, 113, 59, 1, 8850, 4, 3, 59, 97, 102, 17097, 17099, 17112, 1, 9633, 114, 4, 2, 101, 102, 17106, 17109, 59, 1, 9633, 59, 1, 9642, 59, 1, 9642, 97, 114, 114, 59, 1, 8594, 4, 4, 99, 101, 109, 116, 17131, 17136, 17142, 17148, 114, 59, 3, 55349, 56520, 116, 109, 110, 59, 1, 8726, 105, 108, 101, 59, 1, 8995, 97, 114, 102, 59, 1, 8902, 4, 2, 97, 114, 17160, 17172, 114, 4, 2, 59, 102, 17167, 17169, 1, 9734, 59, 1, 9733, 4, 2, 97, 110, 17178, 17202, 105, 103, 104, 116, 4, 2, 101, 112, 17188, 17197, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 104, 105, 59, 1, 981, 115, 59, 1, 175, 4, 5, 98, 99, 109, 110, 112, 17218, 17351, 17420, 17423, 17427, 4, 9, 59, 69, 100, 101, 109, 110, 112, 114, 115, 17238, 17240, 17243, 17248, 17261, 17267, 17279, 17285, 17291, 1, 8834, 59, 1, 10949, 111, 116, 59, 1, 10941, 4, 2, 59, 100, 17254, 17256, 1, 8838, 111, 116, 59, 1, 10947, 117, 108, 116, 59, 1, 10945, 4, 2, 69, 101, 17273, 17276, 59, 1, 10955, 59, 1, 8842, 108, 117, 115, 59, 1, 10943, 97, 114, 114, 59, 1, 10617, 4, 3, 101, 105, 117, 17299, 17335, 17339, 116, 4, 3, 59, 101, 110, 17308, 17310, 17322, 1, 8834, 113, 4, 2, 59, 113, 17317, 17319, 1, 8838, 59, 1, 10949, 101, 113, 4, 2, 59, 113, 17330, 17332, 1, 8842, 59, 1, 10955, 109, 59, 1, 10951, 4, 2, 98, 112, 17345, 17348, 59, 1, 10965, 59, 1, 10963, 99, 4, 6, 59, 97, 99, 101, 110, 115, 17366, 17368, 17376, 17385, 17389, 17415, 1, 8827, 112, 112, 114, 111, 120, 59, 1, 10936, 117, 114, 108, 121, 101, 113, 59, 1, 8829, 113, 59, 1, 10928, 4, 3, 97, 101, 115, 17397, 17405, 17410, 112, 112, 114, 111, 120, 59, 1, 10938, 113, 113, 59, 1, 10934, 105, 109, 59, 1, 8937, 105, 109, 59, 1, 8831, 59, 1, 8721, 103, 59, 1, 9834, 4, 13, 49, 50, 51, 59, 69, 100, 101, 104, 108, 109, 110, 112, 115, 17455, 17462, 17469, 17476, 17478, 17481, 17496, 17509, 17524, 17530, 17536, 17548, 17554, 5, 185, 1, 59, 17460, 1, 185, 5, 178, 1, 59, 17467, 1, 178, 5, 179, 1, 59, 17474, 1, 179, 1, 8835, 59, 1, 10950, 4, 2, 111, 115, 17487, 17491, 116, 59, 1, 10942, 117, 98, 59, 1, 10968, 4, 2, 59, 100, 17502, 17504, 1, 8839, 111, 116, 59, 1, 10948, 115, 4, 2, 111, 117, 17516, 17520, 108, 59, 1, 10185, 98, 59, 1, 10967, 97, 114, 114, 59, 1, 10619, 117, 108, 116, 59, 1, 10946, 4, 2, 69, 101, 17542, 17545, 59, 1, 10956, 59, 1, 8843, 108, 117, 115, 59, 1, 10944, 4, 3, 101, 105, 117, 17562, 17598, 17602, 116, 4, 3, 59, 101, 110, 17571, 17573, 17585, 1, 8835, 113, 4, 2, 59, 113, 17580, 17582, 1, 8839, 59, 1, 10950, 101, 113, 4, 2, 59, 113, 17593, 17595, 1, 8843, 59, 1, 10956, 109, 59, 1, 10952, 4, 2, 98, 112, 17608, 17611, 59, 1, 10964, 59, 1, 10966, 4, 3, 65, 97, 110, 17622, 17627, 17650, 114, 114, 59, 1, 8665, 114, 4, 2, 104, 114, 17634, 17638, 107, 59, 1, 10534, 4, 2, 59, 111, 17644, 17646, 1, 8601, 119, 59, 1, 8601, 119, 97, 114, 59, 1, 10538, 108, 105, 103, 5, 223, 1, 59, 17664, 1, 223, 4, 13, 97, 98, 99, 100, 101, 102, 104, 105, 111, 112, 114, 115, 119, 17694, 17709, 17714, 17737, 17742, 17749, 17754, 17860, 17905, 17957, 17964, 18090, 18122, 4, 2, 114, 117, 17700, 17706, 103, 101, 116, 59, 1, 8982, 59, 1, 964, 114, 107, 59, 1, 9140, 4, 3, 97, 101, 121, 17722, 17728, 17734, 114, 111, 110, 59, 1, 357, 100, 105, 108, 59, 1, 355, 59, 1, 1090, 111, 116, 59, 1, 8411, 108, 114, 101, 99, 59, 1, 8981, 114, 59, 3, 55349, 56625, 4, 4, 101, 105, 107, 111, 17764, 17805, 17836, 17851, 4, 2, 114, 116, 17770, 17786, 101, 4, 2, 52, 102, 17777, 17780, 59, 1, 8756, 111, 114, 101, 59, 1, 8756, 97, 4, 3, 59, 115, 118, 17795, 17797, 17802, 1, 952, 121, 109, 59, 1, 977, 59, 1, 977, 4, 2, 99, 110, 17811, 17831, 107, 4, 2, 97, 115, 17818, 17826, 112, 112, 114, 111, 120, 59, 1, 8776, 105, 109, 59, 1, 8764, 115, 112, 59, 1, 8201, 4, 2, 97, 115, 17842, 17846, 112, 59, 1, 8776, 105, 109, 59, 1, 8764, 114, 110, 5, 254, 1, 59, 17858, 1, 254, 4, 3, 108, 109, 110, 17868, 17873, 17901, 100, 101, 59, 1, 732, 101, 115, 5, 215, 3, 59, 98, 100, 17884, 17886, 17898, 1, 215, 4, 2, 59, 97, 17892, 17894, 1, 8864, 114, 59, 1, 10801, 59, 1, 10800, 116, 59, 1, 8749, 4, 3, 101, 112, 115, 17913, 17917, 17953, 97, 59, 1, 10536, 4, 4, 59, 98, 99, 102, 17927, 17929, 17934, 17939, 1, 8868, 111, 116, 59, 1, 9014, 105, 114, 59, 1, 10993, 4, 2, 59, 111, 17945, 17948, 3, 55349, 56677, 114, 107, 59, 1, 10970, 97, 59, 1, 10537, 114, 105, 109, 101, 59, 1, 8244, 4, 3, 97, 105, 112, 17972, 17977, 18082, 100, 101, 59, 1, 8482, 4, 7, 97, 100, 101, 109, 112, 115, 116, 17993, 18051, 18056, 18059, 18066, 18072, 18076, 110, 103, 108, 101, 4, 5, 59, 100, 108, 113, 114, 18009, 18011, 18017, 18032, 18035, 1, 9653, 111, 119, 110, 59, 1, 9663, 101, 102, 116, 4, 2, 59, 101, 18026, 18028, 1, 9667, 113, 59, 1, 8884, 59, 1, 8796, 105, 103, 104, 116, 4, 2, 59, 101, 18045, 18047, 1, 9657, 113, 59, 1, 8885, 111, 116, 59, 1, 9708, 59, 1, 8796, 105, 110, 117, 115, 59, 1, 10810, 108, 117, 115, 59, 1, 10809, 98, 59, 1, 10701, 105, 109, 101, 59, 1, 10811, 101, 122, 105, 117, 109, 59, 1, 9186, 4, 3, 99, 104, 116, 18098, 18111, 18116, 4, 2, 114, 121, 18104, 18108, 59, 3, 55349, 56521, 59, 1, 1094, 99, 121, 59, 1, 1115, 114, 111, 107, 59, 1, 359, 4, 2, 105, 111, 18128, 18133, 120, 116, 59, 1, 8812, 104, 101, 97, 100, 4, 2, 108, 114, 18143, 18154, 101, 102, 116, 97, 114, 114, 111, 119, 59, 1, 8606, 105, 103, 104, 116, 97, 114, 114, 111, 119, 59, 1, 8608, 4, 18, 65, 72, 97, 98, 99, 100, 102, 103, 104, 108, 109, 111, 112, 114, 115, 116, 117, 119, 18204, 18209, 18214, 18234, 18250, 18268, 18292, 18308, 18319, 18343, 18379, 18397, 18413, 18504, 18547, 18553, 18584, 18603, 114, 114, 59, 1, 8657, 97, 114, 59, 1, 10595, 4, 2, 99, 114, 18220, 18230, 117, 116, 101, 5, 250, 1, 59, 18228, 1, 250, 114, 59, 1, 8593, 114, 4, 2, 99, 101, 18241, 18245, 121, 59, 1, 1118, 118, 101, 59, 1, 365, 4, 2, 105, 121, 18256, 18265, 114, 99, 5, 251, 1, 59, 18263, 1, 251, 59, 1, 1091, 4, 3, 97, 98, 104, 18276, 18281, 18287, 114, 114, 59, 1, 8645, 108, 97, 99, 59, 1, 369, 97, 114, 59, 1, 10606, 4, 2, 105, 114, 18298, 18304, 115, 104, 116, 59, 1, 10622, 59, 3, 55349, 56626, 114, 97, 118, 101, 5, 249, 1, 59, 18317, 1, 249, 4, 2, 97, 98, 18325, 18338, 114, 4, 2, 108, 114, 18332, 18335, 59, 1, 8639, 59, 1, 8638, 108, 107, 59, 1, 9600, 4, 2, 99, 116, 18349, 18374, 4, 2, 111, 114, 18355, 18369, 114, 110, 4, 2, 59, 101, 18363, 18365, 1, 8988, 114, 59, 1, 8988, 111, 112, 59, 1, 8975, 114, 105, 59, 1, 9720, 4, 2, 97, 108, 18385, 18390, 99, 114, 59, 1, 363, 5, 168, 1, 59, 18395, 1, 168, 4, 2, 103, 112, 18403, 18408, 111, 110, 59, 1, 371, 102, 59, 3, 55349, 56678, 4, 6, 97, 100, 104, 108, 115, 117, 18427, 18434, 18445, 18470, 18475, 18494, 114, 114, 111, 119, 59, 1, 8593, 111, 119, 110, 97, 114, 114, 111, 119, 59, 1, 8597, 97, 114, 112, 111, 111, 110, 4, 2, 108, 114, 18457, 18463, 101, 102, 116, 59, 1, 8639, 105, 103, 104, 116, 59, 1, 8638, 117, 115, 59, 1, 8846, 105, 4, 3, 59, 104, 108, 18484, 18486, 18489, 1, 965, 59, 1, 978, 111, 110, 59, 1, 965, 112, 97, 114, 114, 111, 119, 115, 59, 1, 8648, 4, 3, 99, 105, 116, 18512, 18537, 18542, 4, 2, 111, 114, 18518, 18532, 114, 110, 4, 2, 59, 101, 18526, 18528, 1, 8989, 114, 59, 1, 8989, 111, 112, 59, 1, 8974, 110, 103, 59, 1, 367, 114, 105, 59, 1, 9721, 99, 114, 59, 3, 55349, 56522, 4, 3, 100, 105, 114, 18561, 18566, 18572, 111, 116, 59, 1, 8944, 108, 100, 101, 59, 1, 361, 105, 4, 2, 59, 102, 18579, 18581, 1, 9653, 59, 1, 9652, 4, 2, 97, 109, 18590, 18595, 114, 114, 59, 1, 8648, 108, 5, 252, 1, 59, 18601, 1, 252, 97, 110, 103, 108, 101, 59, 1, 10663, 4, 15, 65, 66, 68, 97, 99, 100, 101, 102, 108, 110, 111, 112, 114, 115, 122, 18643, 18648, 18661, 18667, 18847, 18851, 18857, 18904, 18909, 18915, 18931, 18937, 18943, 18949, 18996, 114, 114, 59, 1, 8661, 97, 114, 4, 2, 59, 118, 18656, 18658, 1, 10984, 59, 1, 10985, 97, 115, 104, 59, 1, 8872, 4, 2, 110, 114, 18673, 18679, 103, 114, 116, 59, 1, 10652, 4, 7, 101, 107, 110, 112, 114, 115, 116, 18695, 18704, 18711, 18720, 18742, 18754, 18810, 112, 115, 105, 108, 111, 110, 59, 1, 1013, 97, 112, 112, 97, 59, 1, 1008, 111, 116, 104, 105, 110, 103, 59, 1, 8709, 4, 3, 104, 105, 114, 18728, 18732, 18735, 105, 59, 1, 981, 59, 1, 982, 111, 112, 116, 111, 59, 1, 8733, 4, 2, 59, 104, 18748, 18750, 1, 8597, 111, 59, 1, 1009, 4, 2, 105, 117, 18760, 18766, 103, 109, 97, 59, 1, 962, 4, 2, 98, 112, 18772, 18791, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18784, 18787, 3, 8842, 65024, 59, 3, 10955, 65024, 115, 101, 116, 110, 101, 113, 4, 2, 59, 113, 18803, 18806, 3, 8843, 65024, 59, 3, 10956, 65024, 4, 2, 104, 114, 18816, 18822, 101, 116, 97, 59, 1, 977, 105, 97, 110, 103, 108, 101, 4, 2, 108, 114, 18834, 18840, 101, 102, 116, 59, 1, 8882, 105, 103, 104, 116, 59, 1, 8883, 121, 59, 1, 1074, 97, 115, 104, 59, 1, 8866, 4, 3, 101, 108, 114, 18865, 18884, 18890, 4, 3, 59, 98, 101, 18873, 18875, 18880, 1, 8744, 97, 114, 59, 1, 8891, 113, 59, 1, 8794, 108, 105, 112, 59, 1, 8942, 4, 2, 98, 116, 18896, 18901, 97, 114, 59, 1, 124, 59, 1, 124, 114, 59, 3, 55349, 56627, 116, 114, 105, 59, 1, 8882, 115, 117, 4, 2, 98, 112, 18923, 18927, 59, 3, 8834, 8402, 59, 3, 8835, 8402, 112, 102, 59, 3, 55349, 56679, 114, 111, 112, 59, 1, 8733, 116, 114, 105, 59, 1, 8883, 4, 2, 99, 117, 18955, 18960, 114, 59, 3, 55349, 56523, 4, 2, 98, 112, 18966, 18981, 110, 4, 2, 69, 101, 18973, 18977, 59, 3, 10955, 65024, 59, 3, 8842, 65024, 110, 4, 2, 69, 101, 18988, 18992, 59, 3, 10956, 65024, 59, 3, 8843, 65024, 105, 103, 122, 97, 103, 59, 1, 10650, 4, 7, 99, 101, 102, 111, 112, 114, 115, 19020, 19026, 19061, 19066, 19072, 19075, 19089, 105, 114, 99, 59, 1, 373, 4, 2, 100, 105, 19032, 19055, 4, 2, 98, 103, 19038, 19043, 97, 114, 59, 1, 10847, 101, 4, 2, 59, 113, 19050, 19052, 1, 8743, 59, 1, 8793, 101, 114, 112, 59, 1, 8472, 114, 59, 3, 55349, 56628, 112, 102, 59, 3, 55349, 56680, 59, 1, 8472, 4, 2, 59, 101, 19081, 19083, 1, 8768, 97, 116, 104, 59, 1, 8768, 99, 114, 59, 3, 55349, 56524, 4, 14, 99, 100, 102, 104, 105, 108, 109, 110, 111, 114, 115, 117, 118, 119, 19125, 19146, 19152, 19157, 19173, 19176, 19192, 19197, 19202, 19236, 19252, 19269, 19286, 19291, 4, 3, 97, 105, 117, 19133, 19137, 19142, 112, 59, 1, 8898, 114, 99, 59, 1, 9711, 112, 59, 1, 8899, 116, 114, 105, 59, 1, 9661, 114, 59, 3, 55349, 56629, 4, 2, 65, 97, 19163, 19168, 114, 114, 59, 1, 10234, 114, 114, 59, 1, 10231, 59, 1, 958, 4, 2, 65, 97, 19182, 19187, 114, 114, 59, 1, 10232, 114, 114, 59, 1, 10229, 97, 112, 59, 1, 10236, 105, 115, 59, 1, 8955, 4, 3, 100, 112, 116, 19210, 19215, 19230, 111, 116, 59, 1, 10752, 4, 2, 102, 108, 19221, 19225, 59, 3, 55349, 56681, 117, 115, 59, 1, 10753, 105, 109, 101, 59, 1, 10754, 4, 2, 65, 97, 19242, 19247, 114, 114, 59, 1, 10233, 114, 114, 59, 1, 10230, 4, 2, 99, 113, 19258, 19263, 114, 59, 3, 55349, 56525, 99, 117, 112, 59, 1, 10758, 4, 2, 112, 116, 19275, 19281, 108, 117, 115, 59, 1, 10756, 114, 105, 59, 1, 9651, 101, 101, 59, 1, 8897, 101, 100, 103, 101, 59, 1, 8896, 4, 8, 97, 99, 101, 102, 105, 111, 115, 117, 19316, 19335, 19349, 19357, 19362, 19367, 19373, 19379, 99, 4, 2, 117, 121, 19323, 19332, 116, 101, 5, 253, 1, 59, 19330, 1, 253, 59, 1, 1103, 4, 2, 105, 121, 19341, 19346, 114, 99, 59, 1, 375, 59, 1, 1099, 110, 5, 165, 1, 59, 19355, 1, 165, 114, 59, 3, 55349, 56630, 99, 121, 59, 1, 1111, 112, 102, 59, 3, 55349, 56682, 99, 114, 59, 3, 55349, 56526, 4, 2, 99, 109, 19385, 19389, 121, 59, 1, 1102, 108, 5, 255, 1, 59, 19395, 1, 255, 4, 10, 97, 99, 100, 101, 102, 104, 105, 111, 115, 119, 19419, 19426, 19441, 19446, 19462, 19467, 19472, 19480, 19486, 19492, 99, 117, 116, 101, 59, 1, 378, 4, 2, 97, 121, 19432, 19438, 114, 111, 110, 59, 1, 382, 59, 1, 1079, 111, 116, 59, 1, 380, 4, 2, 101, 116, 19452, 19458, 116, 114, 102, 59, 1, 8488, 97, 59, 1, 950, 114, 59, 3, 55349, 56631, 99, 121, 59, 1, 1078, 103, 114, 97, 114, 114, 59, 1, 8669, 112, 102, 59, 3, 55349, 56683, 99, 114, 59, 3, 55349, 56527, 4, 2, 106, 110, 19498, 19501, 59, 1, 8205, 106, 59, 1, 8204]);
  }
});

// node_modules/parse5/lib/tokenizer/index.js
var require_tokenizer = __commonJS({
  "node_modules/parse5/lib/tokenizer/index.js"(exports, module) {
    "use strict";
    var Preprocessor = require_preprocessor();
    var unicode = require_unicode();
    var neTree = require_named_entity_data();
    var ERR = require_error_codes();
    var $2 = unicode.CODE_POINTS;
    var $$ = unicode.CODE_POINT_SEQUENCES;
    var C1_CONTROLS_REFERENCE_REPLACEMENTS = {
      128: 8364,
      130: 8218,
      131: 402,
      132: 8222,
      133: 8230,
      134: 8224,
      135: 8225,
      136: 710,
      137: 8240,
      138: 352,
      139: 8249,
      140: 338,
      142: 381,
      145: 8216,
      146: 8217,
      147: 8220,
      148: 8221,
      149: 8226,
      150: 8211,
      151: 8212,
      152: 732,
      153: 8482,
      154: 353,
      155: 8250,
      156: 339,
      158: 382,
      159: 376
    };
    var HAS_DATA_FLAG = 1 << 0;
    var DATA_DUPLET_FLAG = 1 << 1;
    var HAS_BRANCHES_FLAG = 1 << 2;
    var MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;
    var DATA_STATE = "DATA_STATE";
    var RCDATA_STATE = "RCDATA_STATE";
    var RAWTEXT_STATE = "RAWTEXT_STATE";
    var SCRIPT_DATA_STATE = "SCRIPT_DATA_STATE";
    var PLAINTEXT_STATE = "PLAINTEXT_STATE";
    var TAG_OPEN_STATE = "TAG_OPEN_STATE";
    var END_TAG_OPEN_STATE = "END_TAG_OPEN_STATE";
    var TAG_NAME_STATE = "TAG_NAME_STATE";
    var RCDATA_LESS_THAN_SIGN_STATE = "RCDATA_LESS_THAN_SIGN_STATE";
    var RCDATA_END_TAG_OPEN_STATE = "RCDATA_END_TAG_OPEN_STATE";
    var RCDATA_END_TAG_NAME_STATE = "RCDATA_END_TAG_NAME_STATE";
    var RAWTEXT_LESS_THAN_SIGN_STATE = "RAWTEXT_LESS_THAN_SIGN_STATE";
    var RAWTEXT_END_TAG_OPEN_STATE = "RAWTEXT_END_TAG_OPEN_STATE";
    var RAWTEXT_END_TAG_NAME_STATE = "RAWTEXT_END_TAG_NAME_STATE";
    var SCRIPT_DATA_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_LESS_THAN_SIGN_STATE";
    var SCRIPT_DATA_END_TAG_OPEN_STATE = "SCRIPT_DATA_END_TAG_OPEN_STATE";
    var SCRIPT_DATA_END_TAG_NAME_STATE = "SCRIPT_DATA_END_TAG_NAME_STATE";
    var SCRIPT_DATA_ESCAPE_START_STATE = "SCRIPT_DATA_ESCAPE_START_STATE";
    var SCRIPT_DATA_ESCAPE_START_DASH_STATE = "SCRIPT_DATA_ESCAPE_START_DASH_STATE";
    var SCRIPT_DATA_ESCAPED_STATE = "SCRIPT_DATA_ESCAPED_STATE";
    var SCRIPT_DATA_ESCAPED_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_STATE";
    var SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_ESCAPED_DASH_DASH_STATE";
    var SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE";
    var SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE";
    var SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = "SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE";
    var SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE";
    var SCRIPT_DATA_DOUBLE_ESCAPED_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_STATE";
    var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE";
    var SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE";
    var SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = "SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE";
    var SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = "SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE";
    var BEFORE_ATTRIBUTE_NAME_STATE = "BEFORE_ATTRIBUTE_NAME_STATE";
    var ATTRIBUTE_NAME_STATE = "ATTRIBUTE_NAME_STATE";
    var AFTER_ATTRIBUTE_NAME_STATE = "AFTER_ATTRIBUTE_NAME_STATE";
    var BEFORE_ATTRIBUTE_VALUE_STATE = "BEFORE_ATTRIBUTE_VALUE_STATE";
    var ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = "ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE";
    var ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = "ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE";
    var ATTRIBUTE_VALUE_UNQUOTED_STATE = "ATTRIBUTE_VALUE_UNQUOTED_STATE";
    var AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = "AFTER_ATTRIBUTE_VALUE_QUOTED_STATE";
    var SELF_CLOSING_START_TAG_STATE = "SELF_CLOSING_START_TAG_STATE";
    var BOGUS_COMMENT_STATE = "BOGUS_COMMENT_STATE";
    var MARKUP_DECLARATION_OPEN_STATE = "MARKUP_DECLARATION_OPEN_STATE";
    var COMMENT_START_STATE = "COMMENT_START_STATE";
    var COMMENT_START_DASH_STATE = "COMMENT_START_DASH_STATE";
    var COMMENT_STATE = "COMMENT_STATE";
    var COMMENT_LESS_THAN_SIGN_STATE = "COMMENT_LESS_THAN_SIGN_STATE";
    var COMMENT_LESS_THAN_SIGN_BANG_STATE = "COMMENT_LESS_THAN_SIGN_BANG_STATE";
    var COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE";
    var COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = "COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE";
    var COMMENT_END_DASH_STATE = "COMMENT_END_DASH_STATE";
    var COMMENT_END_STATE = "COMMENT_END_STATE";
    var COMMENT_END_BANG_STATE = "COMMENT_END_BANG_STATE";
    var DOCTYPE_STATE = "DOCTYPE_STATE";
    var BEFORE_DOCTYPE_NAME_STATE = "BEFORE_DOCTYPE_NAME_STATE";
    var DOCTYPE_NAME_STATE = "DOCTYPE_NAME_STATE";
    var AFTER_DOCTYPE_NAME_STATE = "AFTER_DOCTYPE_NAME_STATE";
    var AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = "AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE";
    var BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
    var DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE";
    var DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE";
    var AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = "AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE";
    var BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = "BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE";
    var AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = "AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE";
    var BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
    var DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE";
    var DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = "DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE";
    var AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = "AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE";
    var BOGUS_DOCTYPE_STATE = "BOGUS_DOCTYPE_STATE";
    var CDATA_SECTION_STATE = "CDATA_SECTION_STATE";
    var CDATA_SECTION_BRACKET_STATE = "CDATA_SECTION_BRACKET_STATE";
    var CDATA_SECTION_END_STATE = "CDATA_SECTION_END_STATE";
    var CHARACTER_REFERENCE_STATE = "CHARACTER_REFERENCE_STATE";
    var NAMED_CHARACTER_REFERENCE_STATE = "NAMED_CHARACTER_REFERENCE_STATE";
    var AMBIGUOUS_AMPERSAND_STATE = "AMBIGUOS_AMPERSAND_STATE";
    var NUMERIC_CHARACTER_REFERENCE_STATE = "NUMERIC_CHARACTER_REFERENCE_STATE";
    var HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_START_STATE";
    var DECIMAL_CHARACTER_REFERENCE_START_STATE = "DECIMAL_CHARACTER_REFERENCE_START_STATE";
    var HEXADEMICAL_CHARACTER_REFERENCE_STATE = "HEXADEMICAL_CHARACTER_REFERENCE_STATE";
    var DECIMAL_CHARACTER_REFERENCE_STATE = "DECIMAL_CHARACTER_REFERENCE_STATE";
    var NUMERIC_CHARACTER_REFERENCE_END_STATE = "NUMERIC_CHARACTER_REFERENCE_END_STATE";
    function isWhitespace(cp) {
      return cp === $2.SPACE || cp === $2.LINE_FEED || cp === $2.TABULATION || cp === $2.FORM_FEED;
    }
    function isAsciiDigit(cp) {
      return cp >= $2.DIGIT_0 && cp <= $2.DIGIT_9;
    }
    function isAsciiUpper(cp) {
      return cp >= $2.LATIN_CAPITAL_A && cp <= $2.LATIN_CAPITAL_Z;
    }
    function isAsciiLower(cp) {
      return cp >= $2.LATIN_SMALL_A && cp <= $2.LATIN_SMALL_Z;
    }
    function isAsciiLetter(cp) {
      return isAsciiLower(cp) || isAsciiUpper(cp);
    }
    function isAsciiAlphaNumeric(cp) {
      return isAsciiLetter(cp) || isAsciiDigit(cp);
    }
    function isAsciiUpperHexDigit(cp) {
      return cp >= $2.LATIN_CAPITAL_A && cp <= $2.LATIN_CAPITAL_F;
    }
    function isAsciiLowerHexDigit(cp) {
      return cp >= $2.LATIN_SMALL_A && cp <= $2.LATIN_SMALL_F;
    }
    function isAsciiHexDigit(cp) {
      return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
    }
    function toAsciiLowerCodePoint(cp) {
      return cp + 32;
    }
    function toChar(cp) {
      if (cp <= 65535) {
        return String.fromCharCode(cp);
      }
      cp -= 65536;
      return String.fromCharCode(cp >>> 10 & 1023 | 55296) + String.fromCharCode(56320 | cp & 1023);
    }
    function toAsciiLowerChar(cp) {
      return String.fromCharCode(toAsciiLowerCodePoint(cp));
    }
    function findNamedEntityTreeBranch(nodeIx, cp) {
      const branchCount = neTree[++nodeIx];
      let lo = ++nodeIx;
      let hi = lo + branchCount - 1;
      while (lo <= hi) {
        const mid = lo + hi >>> 1;
        const midCp = neTree[mid];
        if (midCp < cp) {
          lo = mid + 1;
        } else if (midCp > cp) {
          hi = mid - 1;
        } else {
          return neTree[mid + branchCount];
        }
      }
      return -1;
    }
    var Tokenizer = class {
      constructor() {
        this.preprocessor = new Preprocessor();
        this.tokenQueue = [];
        this.allowCDATA = false;
        this.state = DATA_STATE;
        this.returnState = "";
        this.charRefCode = -1;
        this.tempBuff = [];
        this.lastStartTagName = "";
        this.consumedAfterSnapshot = -1;
        this.active = false;
        this.currentCharacterToken = null;
        this.currentToken = null;
        this.currentAttr = null;
      }
      //Errors
      _err() {
      }
      _errOnNextCodePoint(err) {
        this._consume();
        this._err(err);
        this._unconsume();
      }
      //API
      getNextToken() {
        while (!this.tokenQueue.length && this.active) {
          this.consumedAfterSnapshot = 0;
          const cp = this._consume();
          if (!this._ensureHibernation()) {
            this[this.state](cp);
          }
        }
        return this.tokenQueue.shift();
      }
      write(chunk, isLastChunk) {
        this.active = true;
        this.preprocessor.write(chunk, isLastChunk);
      }
      insertHtmlAtCurrentPos(chunk) {
        this.active = true;
        this.preprocessor.insertHtmlAtCurrentPos(chunk);
      }
      //Hibernation
      _ensureHibernation() {
        if (this.preprocessor.endOfChunkHit) {
          for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
            this.preprocessor.retreat();
          }
          this.active = false;
          this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });
          return true;
        }
        return false;
      }
      //Consumption
      _consume() {
        this.consumedAfterSnapshot++;
        return this.preprocessor.advance();
      }
      _unconsume() {
        this.consumedAfterSnapshot--;
        this.preprocessor.retreat();
      }
      _reconsumeInState(state) {
        this.state = state;
        this._unconsume();
      }
      _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
        let consumedCount = 0;
        let isMatch = true;
        const patternLength = pattern.length;
        let patternPos = 0;
        let cp = startCp;
        let patternCp = void 0;
        for (; patternPos < patternLength; patternPos++) {
          if (patternPos > 0) {
            cp = this._consume();
            consumedCount++;
          }
          if (cp === $2.EOF) {
            isMatch = false;
            break;
          }
          patternCp = pattern[patternPos];
          if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
            isMatch = false;
            break;
          }
        }
        if (!isMatch) {
          while (consumedCount--) {
            this._unconsume();
          }
        }
        return isMatch;
      }
      //Temp buffer
      _isTempBufferEqualToScriptString() {
        if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
          return false;
        }
        for (let i = 0; i < this.tempBuff.length; i++) {
          if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {
            return false;
          }
        }
        return true;
      }
      //Token creation
      _createStartTagToken() {
        this.currentToken = {
          type: Tokenizer.START_TAG_TOKEN,
          tagName: "",
          selfClosing: false,
          ackSelfClosing: false,
          attrs: []
        };
      }
      _createEndTagToken() {
        this.currentToken = {
          type: Tokenizer.END_TAG_TOKEN,
          tagName: "",
          selfClosing: false,
          attrs: []
        };
      }
      _createCommentToken() {
        this.currentToken = {
          type: Tokenizer.COMMENT_TOKEN,
          data: ""
        };
      }
      _createDoctypeToken(initialName) {
        this.currentToken = {
          type: Tokenizer.DOCTYPE_TOKEN,
          name: initialName,
          forceQuirks: false,
          publicId: null,
          systemId: null
        };
      }
      _createCharacterToken(type, ch) {
        this.currentCharacterToken = {
          type,
          chars: ch
        };
      }
      _createEOFToken() {
        this.currentToken = { type: Tokenizer.EOF_TOKEN };
      }
      //Tag attributes
      _createAttr(attrNameFirstCh) {
        this.currentAttr = {
          name: attrNameFirstCh,
          value: ""
        };
      }
      _leaveAttrName(toState) {
        if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
          this.currentToken.attrs.push(this.currentAttr);
        } else {
          this._err(ERR.duplicateAttribute);
        }
        this.state = toState;
      }
      _leaveAttrValue(toState) {
        this.state = toState;
      }
      //Token emission
      _emitCurrentToken() {
        this._emitCurrentCharacterToken();
        const ct2 = this.currentToken;
        this.currentToken = null;
        if (ct2.type === Tokenizer.START_TAG_TOKEN) {
          this.lastStartTagName = ct2.tagName;
        } else if (ct2.type === Tokenizer.END_TAG_TOKEN) {
          if (ct2.attrs.length > 0) {
            this._err(ERR.endTagWithAttributes);
          }
          if (ct2.selfClosing) {
            this._err(ERR.endTagWithTrailingSolidus);
          }
        }
        this.tokenQueue.push(ct2);
      }
      _emitCurrentCharacterToken() {
        if (this.currentCharacterToken) {
          this.tokenQueue.push(this.currentCharacterToken);
          this.currentCharacterToken = null;
        }
      }
      _emitEOFToken() {
        this._createEOFToken();
        this._emitCurrentToken();
      }
      //Characters emission
      //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
      //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
      //If we have a sequence of characters that belong to the same group, parser can process it
      //as a single solid character token.
      //So, there are 3 types of character tokens in parse5:
      //1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
      //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
      //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
      _appendCharToCurrentCharacterToken(type, ch) {
        if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {
          this._emitCurrentCharacterToken();
        }
        if (this.currentCharacterToken) {
          this.currentCharacterToken.chars += ch;
        } else {
          this._createCharacterToken(type, ch);
        }
      }
      _emitCodePoint(cp) {
        let type = Tokenizer.CHARACTER_TOKEN;
        if (isWhitespace(cp)) {
          type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
        } else if (cp === $2.NULL) {
          type = Tokenizer.NULL_CHARACTER_TOKEN;
        }
        this._appendCharToCurrentCharacterToken(type, toChar(cp));
      }
      _emitSeveralCodePoints(codePoints) {
        for (let i = 0; i < codePoints.length; i++) {
          this._emitCodePoint(codePoints[i]);
        }
      }
      //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
      //So we can avoid additional checks here.
      _emitChars(ch) {
        this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
      }
      // Character reference helpers
      _matchNamedCharacterReference(startCp) {
        let result = null;
        let excess = 1;
        let i = findNamedEntityTreeBranch(0, startCp);
        this.tempBuff.push(startCp);
        while (i > -1) {
          const current = neTree[i];
          const inNode = current < MAX_BRANCH_MARKER_VALUE;
          const nodeWithData = inNode && current & HAS_DATA_FLAG;
          if (nodeWithData) {
            result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
            excess = 0;
          }
          const cp = this._consume();
          this.tempBuff.push(cp);
          excess++;
          if (cp === $2.EOF) {
            break;
          }
          if (inNode) {
            i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;
          } else {
            i = cp === current ? ++i : -1;
          }
        }
        while (excess--) {
          this.tempBuff.pop();
          this._unconsume();
        }
        return result;
      }
      _isCharacterReferenceInAttribute() {
        return this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE || this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE;
      }
      _isCharacterReferenceAttributeQuirk(withSemicolon) {
        if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
          const nextCp = this._consume();
          this._unconsume();
          return nextCp === $2.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
        }
        return false;
      }
      _flushCodePointsConsumedAsCharacterReference() {
        if (this._isCharacterReferenceInAttribute()) {
          for (let i = 0; i < this.tempBuff.length; i++) {
            this.currentAttr.value += toChar(this.tempBuff[i]);
          }
        } else {
          this._emitSeveralCodePoints(this.tempBuff);
        }
        this.tempBuff = [];
      }
      // State machine
      // Data state
      //------------------------------------------------------------------
      [DATA_STATE](cp) {
        this.preprocessor.dropParsedChunk();
        if (cp === $2.LESS_THAN_SIGN) {
          this.state = TAG_OPEN_STATE;
        } else if (cp === $2.AMPERSAND) {
          this.returnState = DATA_STATE;
          this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this._emitCodePoint(cp);
        } else if (cp === $2.EOF) {
          this._emitEOFToken();
        } else {
          this._emitCodePoint(cp);
        }
      }
      //  RCDATA state
      //------------------------------------------------------------------
      [RCDATA_STATE](cp) {
        this.preprocessor.dropParsedChunk();
        if (cp === $2.AMPERSAND) {
          this.returnState = RCDATA_STATE;
          this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.state = RCDATA_LESS_THAN_SIGN_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._emitEOFToken();
        } else {
          this._emitCodePoint(cp);
        }
      }
      // RAWTEXT state
      //------------------------------------------------------------------
      [RAWTEXT_STATE](cp) {
        this.preprocessor.dropParsedChunk();
        if (cp === $2.LESS_THAN_SIGN) {
          this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._emitEOFToken();
        } else {
          this._emitCodePoint(cp);
        }
      }
      // Script data state
      //------------------------------------------------------------------
      [SCRIPT_DATA_STATE](cp) {
        this.preprocessor.dropParsedChunk();
        if (cp === $2.LESS_THAN_SIGN) {
          this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._emitEOFToken();
        } else {
          this._emitCodePoint(cp);
        }
      }
      // PLAINTEXT state
      //------------------------------------------------------------------
      [PLAINTEXT_STATE](cp) {
        this.preprocessor.dropParsedChunk();
        if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._emitEOFToken();
        } else {
          this._emitCodePoint(cp);
        }
      }
      // Tag open state
      //------------------------------------------------------------------
      [TAG_OPEN_STATE](cp) {
        if (cp === $2.EXCLAMATION_MARK) {
          this.state = MARKUP_DECLARATION_OPEN_STATE;
        } else if (cp === $2.SOLIDUS) {
          this.state = END_TAG_OPEN_STATE;
        } else if (isAsciiLetter(cp)) {
          this._createStartTagToken();
          this._reconsumeInState(TAG_NAME_STATE);
        } else if (cp === $2.QUESTION_MARK) {
          this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
          this._createCommentToken();
          this._reconsumeInState(BOGUS_COMMENT_STATE);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofBeforeTagName);
          this._emitChars("<");
          this._emitEOFToken();
        } else {
          this._err(ERR.invalidFirstCharacterOfTagName);
          this._emitChars("<");
          this._reconsumeInState(DATA_STATE);
        }
      }
      // End tag open state
      //------------------------------------------------------------------
      [END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
          this._createEndTagToken();
          this._reconsumeInState(TAG_NAME_STATE);
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.missingEndTagName);
          this.state = DATA_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofBeforeTagName);
          this._emitChars("</");
          this._emitEOFToken();
        } else {
          this._err(ERR.invalidFirstCharacterOfTagName);
          this._createCommentToken();
          this._reconsumeInState(BOGUS_COMMENT_STATE);
        }
      }
      // Tag name state
      //------------------------------------------------------------------
      [TAG_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
          this.state = BEFORE_ATTRIBUTE_NAME_STATE;
        } else if (cp === $2.SOLIDUS) {
          this.state = SELF_CLOSING_START_TAG_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (isAsciiUpper(cp)) {
          this.currentToken.tagName += toAsciiLowerChar(cp);
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentToken.tagName += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
        } else {
          this.currentToken.tagName += toChar(cp);
        }
      }
      // RCDATA less-than sign state
      //------------------------------------------------------------------
      [RCDATA_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $2.SOLIDUS) {
          this.tempBuff = [];
          this.state = RCDATA_END_TAG_OPEN_STATE;
        } else {
          this._emitChars("<");
          this._reconsumeInState(RCDATA_STATE);
        }
      }
      // RCDATA end tag open state
      //------------------------------------------------------------------
      [RCDATA_END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
          this._createEndTagToken();
          this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
        } else {
          this._emitChars("</");
          this._reconsumeInState(RCDATA_STATE);
        }
      }
      // RCDATA end tag name state
      //------------------------------------------------------------------
      [RCDATA_END_TAG_NAME_STATE](cp) {
        if (isAsciiUpper(cp)) {
          this.currentToken.tagName += toAsciiLowerChar(cp);
          this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
          this.currentToken.tagName += toChar(cp);
          this.tempBuff.push(cp);
        } else {
          if (this.lastStartTagName === this.currentToken.tagName) {
            if (isWhitespace(cp)) {
              this.state = BEFORE_ATTRIBUTE_NAME_STATE;
              return;
            }
            if (cp === $2.SOLIDUS) {
              this.state = SELF_CLOSING_START_TAG_STATE;
              return;
            }
            if (cp === $2.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
              this._emitCurrentToken();
              return;
            }
          }
          this._emitChars("</");
          this._emitSeveralCodePoints(this.tempBuff);
          this._reconsumeInState(RCDATA_STATE);
        }
      }
      // RAWTEXT less-than sign state
      //------------------------------------------------------------------
      [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $2.SOLIDUS) {
          this.tempBuff = [];
          this.state = RAWTEXT_END_TAG_OPEN_STATE;
        } else {
          this._emitChars("<");
          this._reconsumeInState(RAWTEXT_STATE);
        }
      }
      // RAWTEXT end tag open state
      //------------------------------------------------------------------
      [RAWTEXT_END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
          this._createEndTagToken();
          this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
        } else {
          this._emitChars("</");
          this._reconsumeInState(RAWTEXT_STATE);
        }
      }
      // RAWTEXT end tag name state
      //------------------------------------------------------------------
      [RAWTEXT_END_TAG_NAME_STATE](cp) {
        if (isAsciiUpper(cp)) {
          this.currentToken.tagName += toAsciiLowerChar(cp);
          this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
          this.currentToken.tagName += toChar(cp);
          this.tempBuff.push(cp);
        } else {
          if (this.lastStartTagName === this.currentToken.tagName) {
            if (isWhitespace(cp)) {
              this.state = BEFORE_ATTRIBUTE_NAME_STATE;
              return;
            }
            if (cp === $2.SOLIDUS) {
              this.state = SELF_CLOSING_START_TAG_STATE;
              return;
            }
            if (cp === $2.GREATER_THAN_SIGN) {
              this._emitCurrentToken();
              this.state = DATA_STATE;
              return;
            }
          }
          this._emitChars("</");
          this._emitSeveralCodePoints(this.tempBuff);
          this._reconsumeInState(RAWTEXT_STATE);
        }
      }
      // Script data less-than sign state
      //------------------------------------------------------------------
      [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $2.SOLIDUS) {
          this.tempBuff = [];
          this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
        } else if (cp === $2.EXCLAMATION_MARK) {
          this.state = SCRIPT_DATA_ESCAPE_START_STATE;
          this._emitChars("<!");
        } else {
          this._emitChars("<");
          this._reconsumeInState(SCRIPT_DATA_STATE);
        }
      }
      // Script data end tag open state
      //------------------------------------------------------------------
      [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
          this._createEndTagToken();
          this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
        } else {
          this._emitChars("</");
          this._reconsumeInState(SCRIPT_DATA_STATE);
        }
      }
      // Script data end tag name state
      //------------------------------------------------------------------
      [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {
        if (isAsciiUpper(cp)) {
          this.currentToken.tagName += toAsciiLowerChar(cp);
          this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
          this.currentToken.tagName += toChar(cp);
          this.tempBuff.push(cp);
        } else {
          if (this.lastStartTagName === this.currentToken.tagName) {
            if (isWhitespace(cp)) {
              this.state = BEFORE_ATTRIBUTE_NAME_STATE;
              return;
            } else if (cp === $2.SOLIDUS) {
              this.state = SELF_CLOSING_START_TAG_STATE;
              return;
            } else if (cp === $2.GREATER_THAN_SIGN) {
              this._emitCurrentToken();
              this.state = DATA_STATE;
              return;
            }
          }
          this._emitChars("</");
          this._emitSeveralCodePoints(this.tempBuff);
          this._reconsumeInState(SCRIPT_DATA_STATE);
        }
      }
      // Script data escape start state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPE_START_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
          this._emitChars("-");
        } else {
          this._reconsumeInState(SCRIPT_DATA_STATE);
        }
      }
      // Script data escape start dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
          this._emitChars("-");
        } else {
          this._reconsumeInState(SCRIPT_DATA_STATE);
        }
      }
      // Script data escaped state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
          this._emitChars("-");
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
        } else {
          this._emitCodePoint(cp);
        }
      }
      // Script data escaped dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
          this._emitChars("-");
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.state = SCRIPT_DATA_ESCAPED_STATE;
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
        } else {
          this.state = SCRIPT_DATA_ESCAPED_STATE;
          this._emitCodePoint(cp);
        }
      }
      // Script data escaped dash dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this._emitChars("-");
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this.state = SCRIPT_DATA_STATE;
          this._emitChars(">");
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.state = SCRIPT_DATA_ESCAPED_STATE;
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
        } else {
          this.state = SCRIPT_DATA_ESCAPED_STATE;
          this._emitCodePoint(cp);
        }
      }
      // Script data escaped less-than sign state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $2.SOLIDUS) {
          this.tempBuff = [];
          this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
        } else if (isAsciiLetter(cp)) {
          this.tempBuff = [];
          this._emitChars("<");
          this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
        } else {
          this._emitChars("<");
          this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
      }
      // Script data escaped end tag open state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {
        if (isAsciiLetter(cp)) {
          this._createEndTagToken();
          this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
        } else {
          this._emitChars("</");
          this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
      }
      // Script data escaped end tag name state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {
        if (isAsciiUpper(cp)) {
          this.currentToken.tagName += toAsciiLowerChar(cp);
          this.tempBuff.push(cp);
        } else if (isAsciiLower(cp)) {
          this.currentToken.tagName += toChar(cp);
          this.tempBuff.push(cp);
        } else {
          if (this.lastStartTagName === this.currentToken.tagName) {
            if (isWhitespace(cp)) {
              this.state = BEFORE_ATTRIBUTE_NAME_STATE;
              return;
            }
            if (cp === $2.SOLIDUS) {
              this.state = SELF_CLOSING_START_TAG_STATE;
              return;
            }
            if (cp === $2.GREATER_THAN_SIGN) {
              this._emitCurrentToken();
              this.state = DATA_STATE;
              return;
            }
          }
          this._emitChars("</");
          this._emitSeveralCodePoints(this.tempBuff);
          this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
      }
      // Script data double escape start state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {
        if (isWhitespace(cp) || cp === $2.SOLIDUS || cp === $2.GREATER_THAN_SIGN) {
          this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE : SCRIPT_DATA_ESCAPED_STATE;
          this._emitCodePoint(cp);
        } else if (isAsciiUpper(cp)) {
          this.tempBuff.push(toAsciiLowerCodePoint(cp));
          this._emitCodePoint(cp);
        } else if (isAsciiLower(cp)) {
          this.tempBuff.push(cp);
          this._emitCodePoint(cp);
        } else {
          this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
        }
      }
      // Script data double escaped state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
          this._emitChars("-");
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
          this._emitChars("<");
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
        } else {
          this._emitCodePoint(cp);
        }
      }
      // Script data double escaped dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
          this._emitChars("-");
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
          this._emitChars("<");
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
        } else {
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
          this._emitCodePoint(cp);
        }
      }
      // Script data double escaped dash dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this._emitChars("-");
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
          this._emitChars("<");
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this.state = SCRIPT_DATA_STATE;
          this._emitChars(">");
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
          this._emitChars(unicode.REPLACEMENT_CHARACTER);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInScriptHtmlCommentLikeText);
          this._emitEOFToken();
        } else {
          this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
          this._emitCodePoint(cp);
        }
      }
      // Script data double escaped less-than sign state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $2.SOLIDUS) {
          this.tempBuff = [];
          this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
          this._emitChars("/");
        } else {
          this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
        }
      }
      // Script data double escape end state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {
        if (isWhitespace(cp) || cp === $2.SOLIDUS || cp === $2.GREATER_THAN_SIGN) {
          this.state = this._isTempBufferEqualToScriptString() ? SCRIPT_DATA_ESCAPED_STATE : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
          this._emitCodePoint(cp);
        } else if (isAsciiUpper(cp)) {
          this.tempBuff.push(toAsciiLowerCodePoint(cp));
          this._emitCodePoint(cp);
        } else if (isAsciiLower(cp)) {
          this.tempBuff.push(cp);
          this._emitCodePoint(cp);
        } else {
          this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
        }
      }
      // Before attribute name state
      //------------------------------------------------------------------
      [BEFORE_ATTRIBUTE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (cp === $2.SOLIDUS || cp === $2.GREATER_THAN_SIGN || cp === $2.EOF) {
          this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
        } else if (cp === $2.EQUALS_SIGN) {
          this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
          this._createAttr("=");
          this.state = ATTRIBUTE_NAME_STATE;
        } else {
          this._createAttr("");
          this._reconsumeInState(ATTRIBUTE_NAME_STATE);
        }
      }
      // Attribute name state
      //------------------------------------------------------------------
      [ATTRIBUTE_NAME_STATE](cp) {
        if (isWhitespace(cp) || cp === $2.SOLIDUS || cp === $2.GREATER_THAN_SIGN || cp === $2.EOF) {
          this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
          this._unconsume();
        } else if (cp === $2.EQUALS_SIGN) {
          this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
        } else if (isAsciiUpper(cp)) {
          this.currentAttr.name += toAsciiLowerChar(cp);
        } else if (cp === $2.QUOTATION_MARK || cp === $2.APOSTROPHE || cp === $2.LESS_THAN_SIGN) {
          this._err(ERR.unexpectedCharacterInAttributeName);
          this.currentAttr.name += toChar(cp);
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentAttr.name += unicode.REPLACEMENT_CHARACTER;
        } else {
          this.currentAttr.name += toChar(cp);
        }
      }
      // After attribute name state
      //------------------------------------------------------------------
      [AFTER_ATTRIBUTE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (cp === $2.SOLIDUS) {
          this.state = SELF_CLOSING_START_TAG_STATE;
        } else if (cp === $2.EQUALS_SIGN) {
          this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
        } else {
          this._createAttr("");
          this._reconsumeInState(ATTRIBUTE_NAME_STATE);
        }
      }
      // Before attribute value state
      //------------------------------------------------------------------
      [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (cp === $2.QUOTATION_MARK) {
          this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
        } else if (cp === $2.APOSTROPHE) {
          this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.missingAttributeValue);
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else {
          this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
        }
      }
      // Attribute value (double-quoted) state
      //------------------------------------------------------------------
      [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {
        if (cp === $2.QUOTATION_MARK) {
          this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
        } else if (cp === $2.AMPERSAND) {
          this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
          this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
        } else {
          this.currentAttr.value += toChar(cp);
        }
      }
      // Attribute value (single-quoted) state
      //------------------------------------------------------------------
      [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {
        if (cp === $2.APOSTROPHE) {
          this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
        } else if (cp === $2.AMPERSAND) {
          this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
          this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
        } else {
          this.currentAttr.value += toChar(cp);
        }
      }
      // Attribute value (unquoted) state
      //------------------------------------------------------------------
      [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {
        if (isWhitespace(cp)) {
          this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
        } else if (cp === $2.AMPERSAND) {
          this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
          this.state = CHARACTER_REFERENCE_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._leaveAttrValue(DATA_STATE);
          this._emitCurrentToken();
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentAttr.value += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.QUOTATION_MARK || cp === $2.APOSTROPHE || cp === $2.LESS_THAN_SIGN || cp === $2.EQUALS_SIGN || cp === $2.GRAVE_ACCENT) {
          this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
          this.currentAttr.value += toChar(cp);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
        } else {
          this.currentAttr.value += toChar(cp);
        }
      }
      // After attribute value (quoted) state
      //------------------------------------------------------------------
      [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {
        if (isWhitespace(cp)) {
          this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
        } else if (cp === $2.SOLIDUS) {
          this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._leaveAttrValue(DATA_STATE);
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
        } else {
          this._err(ERR.missingWhitespaceBetweenAttributes);
          this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
        }
      }
      // Self-closing start tag state
      //------------------------------------------------------------------
      [SELF_CLOSING_START_TAG_STATE](cp) {
        if (cp === $2.GREATER_THAN_SIGN) {
          this.currentToken.selfClosing = true;
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInTag);
          this._emitEOFToken();
        } else {
          this._err(ERR.unexpectedSolidusInTag);
          this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
        }
      }
      // Bogus comment state
      //------------------------------------------------------------------
      [BOGUS_COMMENT_STATE](cp) {
        if (cp === $2.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._emitCurrentToken();
          this._emitEOFToken();
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
        } else {
          this.currentToken.data += toChar(cp);
        }
      }
      // Markup declaration open state
      //------------------------------------------------------------------
      [MARKUP_DECLARATION_OPEN_STATE](cp) {
        if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
          this._createCommentToken();
          this.state = COMMENT_START_STATE;
        } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
          this.state = DOCTYPE_STATE;
        } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
          if (this.allowCDATA) {
            this.state = CDATA_SECTION_STATE;
          } else {
            this._err(ERR.cdataInHtmlContent);
            this._createCommentToken();
            this.currentToken.data = "[CDATA[";
            this.state = BOGUS_COMMENT_STATE;
          }
        } else if (!this._ensureHibernation()) {
          this._err(ERR.incorrectlyOpenedComment);
          this._createCommentToken();
          this._reconsumeInState(BOGUS_COMMENT_STATE);
        }
      }
      // Comment start state
      //------------------------------------------------------------------
      [COMMENT_START_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = COMMENT_START_DASH_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.abruptClosingOfEmptyComment);
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else {
          this._reconsumeInState(COMMENT_STATE);
        }
      }
      // Comment start dash state
      //------------------------------------------------------------------
      [COMMENT_START_DASH_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = COMMENT_END_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.abruptClosingOfEmptyComment);
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInComment);
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.data += "-";
          this._reconsumeInState(COMMENT_STATE);
        }
      }
      // Comment state
      //------------------------------------------------------------------
      [COMMENT_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = COMMENT_END_DASH_STATE;
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.currentToken.data += "<";
          this.state = COMMENT_LESS_THAN_SIGN_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentToken.data += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInComment);
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.data += toChar(cp);
        }
      }
      // Comment less-than sign state
      //------------------------------------------------------------------
      [COMMENT_LESS_THAN_SIGN_STATE](cp) {
        if (cp === $2.EXCLAMATION_MARK) {
          this.currentToken.data += "!";
          this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
        } else if (cp === $2.LESS_THAN_SIGN) {
          this.currentToken.data += "!";
        } else {
          this._reconsumeInState(COMMENT_STATE);
        }
      }
      // Comment less-than sign bang state
      //------------------------------------------------------------------
      [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
        } else {
          this._reconsumeInState(COMMENT_STATE);
        }
      }
      // Comment less-than sign bang dash state
      //------------------------------------------------------------------
      [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
        } else {
          this._reconsumeInState(COMMENT_END_DASH_STATE);
        }
      }
      // Comment less-than sign bang dash dash state
      //------------------------------------------------------------------
      [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {
        if (cp !== $2.GREATER_THAN_SIGN && cp !== $2.EOF) {
          this._err(ERR.nestedComment);
        }
        this._reconsumeInState(COMMENT_END_STATE);
      }
      // Comment end dash state
      //------------------------------------------------------------------
      [COMMENT_END_DASH_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.state = COMMENT_END_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInComment);
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.data += "-";
          this._reconsumeInState(COMMENT_STATE);
        }
      }
      // Comment end state
      //------------------------------------------------------------------
      [COMMENT_END_STATE](cp) {
        if (cp === $2.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EXCLAMATION_MARK) {
          this.state = COMMENT_END_BANG_STATE;
        } else if (cp === $2.HYPHEN_MINUS) {
          this.currentToken.data += "-";
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInComment);
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.data += "--";
          this._reconsumeInState(COMMENT_STATE);
        }
      }
      // Comment end bang state
      //------------------------------------------------------------------
      [COMMENT_END_BANG_STATE](cp) {
        if (cp === $2.HYPHEN_MINUS) {
          this.currentToken.data += "--!";
          this.state = COMMENT_END_DASH_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.incorrectlyClosedComment);
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInComment);
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.data += "--!";
          this._reconsumeInState(COMMENT_STATE);
        }
      }
      // DOCTYPE state
      //------------------------------------------------------------------
      [DOCTYPE_STATE](cp) {
        if (isWhitespace(cp)) {
          this.state = BEFORE_DOCTYPE_NAME_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this._createDoctypeToken(null);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._err(ERR.missingWhitespaceBeforeDoctypeName);
          this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
        }
      }
      // Before DOCTYPE name state
      //------------------------------------------------------------------
      [BEFORE_DOCTYPE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (isAsciiUpper(cp)) {
          this._createDoctypeToken(toAsciiLowerChar(cp));
          this.state = DOCTYPE_NAME_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this._createDoctypeToken(unicode.REPLACEMENT_CHARACTER);
          this.state = DOCTYPE_NAME_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.missingDoctypeName);
          this._createDoctypeToken(null);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this.state = DATA_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this._createDoctypeToken(null);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._createDoctypeToken(toChar(cp));
          this.state = DOCTYPE_NAME_STATE;
        }
      }
      // DOCTYPE name state
      //------------------------------------------------------------------
      [DOCTYPE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
          this.state = AFTER_DOCTYPE_NAME_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (isAsciiUpper(cp)) {
          this.currentToken.name += toAsciiLowerChar(cp);
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentToken.name += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.name += toChar(cp);
        }
      }
      // After DOCTYPE name state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_NAME_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (cp === $2.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
          this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
        } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
          this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
        } else if (!this._ensureHibernation()) {
          this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
          this.currentToken.forceQuirks = true;
          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
      }
      // After DOCTYPE public keyword state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {
        if (isWhitespace(cp)) {
          this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
        } else if (cp === $2.QUOTATION_MARK) {
          this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
          this.currentToken.publicId = "";
          this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $2.APOSTROPHE) {
          this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
          this.currentToken.publicId = "";
          this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.missingDoctypePublicIdentifier);
          this.currentToken.forceQuirks = true;
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
          this.currentToken.forceQuirks = true;
          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
      }
      // Before DOCTYPE public identifier state
      //------------------------------------------------------------------
      [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (cp === $2.QUOTATION_MARK) {
          this.currentToken.publicId = "";
          this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $2.APOSTROPHE) {
          this.currentToken.publicId = "";
          this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.missingDoctypePublicIdentifier);
          this.currentToken.forceQuirks = true;
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
          this.currentToken.forceQuirks = true;
          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
      }
      // DOCTYPE public identifier (double-quoted) state
      //------------------------------------------------------------------
      [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
        if (cp === $2.QUOTATION_MARK) {
          this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.abruptDoctypePublicIdentifier);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this.state = DATA_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.publicId += toChar(cp);
        }
      }
      // DOCTYPE public identifier (single-quoted) state
      //------------------------------------------------------------------
      [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
        if (cp === $2.APOSTROPHE) {
          this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentToken.publicId += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.abruptDoctypePublicIdentifier);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this.state = DATA_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.publicId += toChar(cp);
        }
      }
      // After DOCTYPE public identifier state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
        if (isWhitespace(cp)) {
          this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.QUOTATION_MARK) {
          this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
          this.currentToken.systemId = "";
          this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $2.APOSTROPHE) {
          this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
          this.currentToken.systemId = "";
          this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
          this.currentToken.forceQuirks = true;
          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
      }
      // Between DOCTYPE public and system identifiers state
      //------------------------------------------------------------------
      [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (cp === $2.GREATER_THAN_SIGN) {
          this._emitCurrentToken();
          this.state = DATA_STATE;
        } else if (cp === $2.QUOTATION_MARK) {
          this.currentToken.systemId = "";
          this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $2.APOSTROPHE) {
          this.currentToken.systemId = "";
          this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
          this.currentToken.forceQuirks = true;
          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
      }
      // After DOCTYPE system keyword state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {
        if (isWhitespace(cp)) {
          this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
        } else if (cp === $2.QUOTATION_MARK) {
          this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
          this.currentToken.systemId = "";
          this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $2.APOSTROPHE) {
          this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
          this.currentToken.systemId = "";
          this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.missingDoctypeSystemIdentifier);
          this.currentToken.forceQuirks = true;
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
          this.currentToken.forceQuirks = true;
          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
      }
      // Before DOCTYPE system identifier state
      //------------------------------------------------------------------
      [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (cp === $2.QUOTATION_MARK) {
          this.currentToken.systemId = "";
          this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
        } else if (cp === $2.APOSTROPHE) {
          this.currentToken.systemId = "";
          this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.missingDoctypeSystemIdentifier);
          this.currentToken.forceQuirks = true;
          this.state = DATA_STATE;
          this._emitCurrentToken();
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
          this.currentToken.forceQuirks = true;
          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
      }
      // DOCTYPE system identifier (double-quoted) state
      //------------------------------------------------------------------
      [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
        if (cp === $2.QUOTATION_MARK) {
          this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.abruptDoctypeSystemIdentifier);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this.state = DATA_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.systemId += toChar(cp);
        }
      }
      // DOCTYPE system identifier (single-quoted) state
      //------------------------------------------------------------------
      [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
        if (cp === $2.APOSTROPHE) {
          this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
          this.currentToken.systemId += unicode.REPLACEMENT_CHARACTER;
        } else if (cp === $2.GREATER_THAN_SIGN) {
          this._err(ERR.abruptDoctypeSystemIdentifier);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this.state = DATA_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this.currentToken.systemId += toChar(cp);
        }
      }
      // After DOCTYPE system identifier state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
        if (isWhitespace(cp)) {
          return;
        }
        if (cp === $2.GREATER_THAN_SIGN) {
          this._emitCurrentToken();
          this.state = DATA_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInDoctype);
          this.currentToken.forceQuirks = true;
          this._emitCurrentToken();
          this._emitEOFToken();
        } else {
          this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
          this._reconsumeInState(BOGUS_DOCTYPE_STATE);
        }
      }
      // Bogus DOCTYPE state
      //------------------------------------------------------------------
      [BOGUS_DOCTYPE_STATE](cp) {
        if (cp === $2.GREATER_THAN_SIGN) {
          this._emitCurrentToken();
          this.state = DATA_STATE;
        } else if (cp === $2.NULL) {
          this._err(ERR.unexpectedNullCharacter);
        } else if (cp === $2.EOF) {
          this._emitCurrentToken();
          this._emitEOFToken();
        }
      }
      // CDATA section state
      //------------------------------------------------------------------
      [CDATA_SECTION_STATE](cp) {
        if (cp === $2.RIGHT_SQUARE_BRACKET) {
          this.state = CDATA_SECTION_BRACKET_STATE;
        } else if (cp === $2.EOF) {
          this._err(ERR.eofInCdata);
          this._emitEOFToken();
        } else {
          this._emitCodePoint(cp);
        }
      }
      // CDATA section bracket state
      //------------------------------------------------------------------
      [CDATA_SECTION_BRACKET_STATE](cp) {
        if (cp === $2.RIGHT_SQUARE_BRACKET) {
          this.state = CDATA_SECTION_END_STATE;
        } else {
          this._emitChars("]");
          this._reconsumeInState(CDATA_SECTION_STATE);
        }
      }
      // CDATA section end state
      //------------------------------------------------------------------
      [CDATA_SECTION_END_STATE](cp) {
        if (cp === $2.GREATER_THAN_SIGN) {
          this.state = DATA_STATE;
        } else if (cp === $2.RIGHT_SQUARE_BRACKET) {
          this._emitChars("]");
        } else {
          this._emitChars("]]");
          this._reconsumeInState(CDATA_SECTION_STATE);
        }
      }
      // Character reference state
      //------------------------------------------------------------------
      [CHARACTER_REFERENCE_STATE](cp) {
        this.tempBuff = [$2.AMPERSAND];
        if (cp === $2.NUMBER_SIGN) {
          this.tempBuff.push(cp);
          this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
        } else if (isAsciiAlphaNumeric(cp)) {
          this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
        } else {
          this._flushCodePointsConsumedAsCharacterReference();
          this._reconsumeInState(this.returnState);
        }
      }
      // Named character reference state
      //------------------------------------------------------------------
      [NAMED_CHARACTER_REFERENCE_STATE](cp) {
        const matchResult = this._matchNamedCharacterReference(cp);
        if (this._ensureHibernation()) {
          this.tempBuff = [$2.AMPERSAND];
        } else if (matchResult) {
          const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $2.SEMICOLON;
          if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
            if (!withSemicolon) {
              this._errOnNextCodePoint(ERR.missingSemicolonAfterCharacterReference);
            }
            this.tempBuff = matchResult;
          }
          this._flushCodePointsConsumedAsCharacterReference();
          this.state = this.returnState;
        } else {
          this._flushCodePointsConsumedAsCharacterReference();
          this.state = AMBIGUOUS_AMPERSAND_STATE;
        }
      }
      // Ambiguos ampersand state
      //------------------------------------------------------------------
      [AMBIGUOUS_AMPERSAND_STATE](cp) {
        if (isAsciiAlphaNumeric(cp)) {
          if (this._isCharacterReferenceInAttribute()) {
            this.currentAttr.value += toChar(cp);
          } else {
            this._emitCodePoint(cp);
          }
        } else {
          if (cp === $2.SEMICOLON) {
            this._err(ERR.unknownNamedCharacterReference);
          }
          this._reconsumeInState(this.returnState);
        }
      }
      // Numeric character reference state
      //------------------------------------------------------------------
      [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {
        this.charRefCode = 0;
        if (cp === $2.LATIN_SMALL_X || cp === $2.LATIN_CAPITAL_X) {
          this.tempBuff.push(cp);
          this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
        } else {
          this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
        }
      }
      // Hexademical character reference start state
      //------------------------------------------------------------------
      [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {
        if (isAsciiHexDigit(cp)) {
          this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
        } else {
          this._err(ERR.absenceOfDigitsInNumericCharacterReference);
          this._flushCodePointsConsumedAsCharacterReference();
          this._reconsumeInState(this.returnState);
        }
      }
      // Decimal character reference start state
      //------------------------------------------------------------------
      [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {
        if (isAsciiDigit(cp)) {
          this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
        } else {
          this._err(ERR.absenceOfDigitsInNumericCharacterReference);
          this._flushCodePointsConsumedAsCharacterReference();
          this._reconsumeInState(this.returnState);
        }
      }
      // Hexademical character reference state
      //------------------------------------------------------------------
      [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {
        if (isAsciiUpperHexDigit(cp)) {
          this.charRefCode = this.charRefCode * 16 + cp - 55;
        } else if (isAsciiLowerHexDigit(cp)) {
          this.charRefCode = this.charRefCode * 16 + cp - 87;
        } else if (isAsciiDigit(cp)) {
          this.charRefCode = this.charRefCode * 16 + cp - 48;
        } else if (cp === $2.SEMICOLON) {
          this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
        } else {
          this._err(ERR.missingSemicolonAfterCharacterReference);
          this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
        }
      }
      // Decimal character reference state
      //------------------------------------------------------------------
      [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {
        if (isAsciiDigit(cp)) {
          this.charRefCode = this.charRefCode * 10 + cp - 48;
        } else if (cp === $2.SEMICOLON) {
          this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
        } else {
          this._err(ERR.missingSemicolonAfterCharacterReference);
          this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
        }
      }
      // Numeric character reference end state
      //------------------------------------------------------------------
      [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {
        if (this.charRefCode === $2.NULL) {
          this._err(ERR.nullCharacterReference);
          this.charRefCode = $2.REPLACEMENT_CHARACTER;
        } else if (this.charRefCode > 1114111) {
          this._err(ERR.characterReferenceOutsideUnicodeRange);
          this.charRefCode = $2.REPLACEMENT_CHARACTER;
        } else if (unicode.isSurrogate(this.charRefCode)) {
          this._err(ERR.surrogateCharacterReference);
          this.charRefCode = $2.REPLACEMENT_CHARACTER;
        } else if (unicode.isUndefinedCodePoint(this.charRefCode)) {
          this._err(ERR.noncharacterCharacterReference);
        } else if (unicode.isControlCodePoint(this.charRefCode) || this.charRefCode === $2.CARRIAGE_RETURN) {
          this._err(ERR.controlCharacterReference);
          const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];
          if (replacement) {
            this.charRefCode = replacement;
          }
        }
        this.tempBuff = [this.charRefCode];
        this._flushCodePointsConsumedAsCharacterReference();
        this._reconsumeInState(this.returnState);
      }
    };
    Tokenizer.CHARACTER_TOKEN = "CHARACTER_TOKEN";
    Tokenizer.NULL_CHARACTER_TOKEN = "NULL_CHARACTER_TOKEN";
    Tokenizer.WHITESPACE_CHARACTER_TOKEN = "WHITESPACE_CHARACTER_TOKEN";
    Tokenizer.START_TAG_TOKEN = "START_TAG_TOKEN";
    Tokenizer.END_TAG_TOKEN = "END_TAG_TOKEN";
    Tokenizer.COMMENT_TOKEN = "COMMENT_TOKEN";
    Tokenizer.DOCTYPE_TOKEN = "DOCTYPE_TOKEN";
    Tokenizer.EOF_TOKEN = "EOF_TOKEN";
    Tokenizer.HIBERNATION_TOKEN = "HIBERNATION_TOKEN";
    Tokenizer.MODE = {
      DATA: DATA_STATE,
      RCDATA: RCDATA_STATE,
      RAWTEXT: RAWTEXT_STATE,
      SCRIPT_DATA: SCRIPT_DATA_STATE,
      PLAINTEXT: PLAINTEXT_STATE
    };
    Tokenizer.getTokenAttr = function(token2, attrName) {
      for (let i = token2.attrs.length - 1; i >= 0; i--) {
        if (token2.attrs[i].name === attrName) {
          return token2.attrs[i].value;
        }
      }
      return null;
    };
    module.exports = Tokenizer;
  }
});

// node_modules/parse5/lib/common/html.js
var require_html = __commonJS({
  "node_modules/parse5/lib/common/html.js"(exports) {
    "use strict";
    var NS = exports.NAMESPACES = {
      HTML: "http://www.w3.org/1999/xhtml",
      MATHML: "http://www.w3.org/1998/Math/MathML",
      SVG: "http://www.w3.org/2000/svg",
      XLINK: "http://www.w3.org/1999/xlink",
      XML: "http://www.w3.org/XML/1998/namespace",
      XMLNS: "http://www.w3.org/2000/xmlns/"
    };
    exports.ATTRS = {
      TYPE: "type",
      ACTION: "action",
      ENCODING: "encoding",
      PROMPT: "prompt",
      NAME: "name",
      COLOR: "color",
      FACE: "face",
      SIZE: "size"
    };
    exports.DOCUMENT_MODE = {
      NO_QUIRKS: "no-quirks",
      QUIRKS: "quirks",
      LIMITED_QUIRKS: "limited-quirks"
    };
    var $2 = exports.TAG_NAMES = {
      A: "a",
      ADDRESS: "address",
      ANNOTATION_XML: "annotation-xml",
      APPLET: "applet",
      AREA: "area",
      ARTICLE: "article",
      ASIDE: "aside",
      B: "b",
      BASE: "base",
      BASEFONT: "basefont",
      BGSOUND: "bgsound",
      BIG: "big",
      BLOCKQUOTE: "blockquote",
      BODY: "body",
      BR: "br",
      BUTTON: "button",
      CAPTION: "caption",
      CENTER: "center",
      CODE: "code",
      COL: "col",
      COLGROUP: "colgroup",
      DD: "dd",
      DESC: "desc",
      DETAILS: "details",
      DIALOG: "dialog",
      DIR: "dir",
      DIV: "div",
      DL: "dl",
      DT: "dt",
      EM: "em",
      EMBED: "embed",
      FIELDSET: "fieldset",
      FIGCAPTION: "figcaption",
      FIGURE: "figure",
      FONT: "font",
      FOOTER: "footer",
      FOREIGN_OBJECT: "foreignObject",
      FORM: "form",
      FRAME: "frame",
      FRAMESET: "frameset",
      H1: "h1",
      H2: "h2",
      H3: "h3",
      H4: "h4",
      H5: "h5",
      H6: "h6",
      HEAD: "head",
      HEADER: "header",
      HGROUP: "hgroup",
      HR: "hr",
      HTML: "html",
      I: "i",
      IMG: "img",
      IMAGE: "image",
      INPUT: "input",
      IFRAME: "iframe",
      KEYGEN: "keygen",
      LABEL: "label",
      LI: "li",
      LINK: "link",
      LISTING: "listing",
      MAIN: "main",
      MALIGNMARK: "malignmark",
      MARQUEE: "marquee",
      MATH: "math",
      MENU: "menu",
      META: "meta",
      MGLYPH: "mglyph",
      MI: "mi",
      MO: "mo",
      MN: "mn",
      MS: "ms",
      MTEXT: "mtext",
      NAV: "nav",
      NOBR: "nobr",
      NOFRAMES: "noframes",
      NOEMBED: "noembed",
      NOSCRIPT: "noscript",
      OBJECT: "object",
      OL: "ol",
      OPTGROUP: "optgroup",
      OPTION: "option",
      P: "p",
      PARAM: "param",
      PLAINTEXT: "plaintext",
      PRE: "pre",
      RB: "rb",
      RP: "rp",
      RT: "rt",
      RTC: "rtc",
      RUBY: "ruby",
      S: "s",
      SCRIPT: "script",
      SECTION: "section",
      SELECT: "select",
      SOURCE: "source",
      SMALL: "small",
      SPAN: "span",
      STRIKE: "strike",
      STRONG: "strong",
      STYLE: "style",
      SUB: "sub",
      SUMMARY: "summary",
      SUP: "sup",
      TABLE: "table",
      TBODY: "tbody",
      TEMPLATE: "template",
      TEXTAREA: "textarea",
      TFOOT: "tfoot",
      TD: "td",
      TH: "th",
      THEAD: "thead",
      TITLE: "title",
      TR: "tr",
      TRACK: "track",
      TT: "tt",
      U: "u",
      UL: "ul",
      SVG: "svg",
      VAR: "var",
      WBR: "wbr",
      XMP: "xmp"
    };
    exports.SPECIAL_ELEMENTS = {
      [NS.HTML]: {
        [$2.ADDRESS]: true,
        [$2.APPLET]: true,
        [$2.AREA]: true,
        [$2.ARTICLE]: true,
        [$2.ASIDE]: true,
        [$2.BASE]: true,
        [$2.BASEFONT]: true,
        [$2.BGSOUND]: true,
        [$2.BLOCKQUOTE]: true,
        [$2.BODY]: true,
        [$2.BR]: true,
        [$2.BUTTON]: true,
        [$2.CAPTION]: true,
        [$2.CENTER]: true,
        [$2.COL]: true,
        [$2.COLGROUP]: true,
        [$2.DD]: true,
        [$2.DETAILS]: true,
        [$2.DIR]: true,
        [$2.DIV]: true,
        [$2.DL]: true,
        [$2.DT]: true,
        [$2.EMBED]: true,
        [$2.FIELDSET]: true,
        [$2.FIGCAPTION]: true,
        [$2.FIGURE]: true,
        [$2.FOOTER]: true,
        [$2.FORM]: true,
        [$2.FRAME]: true,
        [$2.FRAMESET]: true,
        [$2.H1]: true,
        [$2.H2]: true,
        [$2.H3]: true,
        [$2.H4]: true,
        [$2.H5]: true,
        [$2.H6]: true,
        [$2.HEAD]: true,
        [$2.HEADER]: true,
        [$2.HGROUP]: true,
        [$2.HR]: true,
        [$2.HTML]: true,
        [$2.IFRAME]: true,
        [$2.IMG]: true,
        [$2.INPUT]: true,
        [$2.LI]: true,
        [$2.LINK]: true,
        [$2.LISTING]: true,
        [$2.MAIN]: true,
        [$2.MARQUEE]: true,
        [$2.MENU]: true,
        [$2.META]: true,
        [$2.NAV]: true,
        [$2.NOEMBED]: true,
        [$2.NOFRAMES]: true,
        [$2.NOSCRIPT]: true,
        [$2.OBJECT]: true,
        [$2.OL]: true,
        [$2.P]: true,
        [$2.PARAM]: true,
        [$2.PLAINTEXT]: true,
        [$2.PRE]: true,
        [$2.SCRIPT]: true,
        [$2.SECTION]: true,
        [$2.SELECT]: true,
        [$2.SOURCE]: true,
        [$2.STYLE]: true,
        [$2.SUMMARY]: true,
        [$2.TABLE]: true,
        [$2.TBODY]: true,
        [$2.TD]: true,
        [$2.TEMPLATE]: true,
        [$2.TEXTAREA]: true,
        [$2.TFOOT]: true,
        [$2.TH]: true,
        [$2.THEAD]: true,
        [$2.TITLE]: true,
        [$2.TR]: true,
        [$2.TRACK]: true,
        [$2.UL]: true,
        [$2.WBR]: true,
        [$2.XMP]: true
      },
      [NS.MATHML]: {
        [$2.MI]: true,
        [$2.MO]: true,
        [$2.MN]: true,
        [$2.MS]: true,
        [$2.MTEXT]: true,
        [$2.ANNOTATION_XML]: true
      },
      [NS.SVG]: {
        [$2.TITLE]: true,
        [$2.FOREIGN_OBJECT]: true,
        [$2.DESC]: true
      }
    };
  }
});

// node_modules/parse5/lib/parser/open-element-stack.js
var require_open_element_stack = __commonJS({
  "node_modules/parse5/lib/parser/open-element-stack.js"(exports, module) {
    "use strict";
    var HTML = require_html();
    var $2 = HTML.TAG_NAMES;
    var NS = HTML.NAMESPACES;
    function isImpliedEndTagRequired(tn2) {
      switch (tn2.length) {
        case 1:
          return tn2 === $2.P;
        case 2:
          return tn2 === $2.RB || tn2 === $2.RP || tn2 === $2.RT || tn2 === $2.DD || tn2 === $2.DT || tn2 === $2.LI;
        case 3:
          return tn2 === $2.RTC;
        case 6:
          return tn2 === $2.OPTION;
        case 8:
          return tn2 === $2.OPTGROUP;
      }
      return false;
    }
    function isImpliedEndTagRequiredThoroughly(tn2) {
      switch (tn2.length) {
        case 1:
          return tn2 === $2.P;
        case 2:
          return tn2 === $2.RB || tn2 === $2.RP || tn2 === $2.RT || tn2 === $2.DD || tn2 === $2.DT || tn2 === $2.LI || tn2 === $2.TD || tn2 === $2.TH || tn2 === $2.TR;
        case 3:
          return tn2 === $2.RTC;
        case 5:
          return tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD;
        case 6:
          return tn2 === $2.OPTION;
        case 7:
          return tn2 === $2.CAPTION;
        case 8:
          return tn2 === $2.OPTGROUP || tn2 === $2.COLGROUP;
      }
      return false;
    }
    function isScopingElement(tn2, ns) {
      switch (tn2.length) {
        case 2:
          if (tn2 === $2.TD || tn2 === $2.TH) {
            return ns === NS.HTML;
          } else if (tn2 === $2.MI || tn2 === $2.MO || tn2 === $2.MN || tn2 === $2.MS) {
            return ns === NS.MATHML;
          }
          break;
        case 4:
          if (tn2 === $2.HTML) {
            return ns === NS.HTML;
          } else if (tn2 === $2.DESC) {
            return ns === NS.SVG;
          }
          break;
        case 5:
          if (tn2 === $2.TABLE) {
            return ns === NS.HTML;
          } else if (tn2 === $2.MTEXT) {
            return ns === NS.MATHML;
          } else if (tn2 === $2.TITLE) {
            return ns === NS.SVG;
          }
          break;
        case 6:
          return (tn2 === $2.APPLET || tn2 === $2.OBJECT) && ns === NS.HTML;
        case 7:
          return (tn2 === $2.CAPTION || tn2 === $2.MARQUEE) && ns === NS.HTML;
        case 8:
          return tn2 === $2.TEMPLATE && ns === NS.HTML;
        case 13:
          return tn2 === $2.FOREIGN_OBJECT && ns === NS.SVG;
        case 14:
          return tn2 === $2.ANNOTATION_XML && ns === NS.MATHML;
      }
      return false;
    }
    var OpenElementStack = class {
      constructor(document4, treeAdapter) {
        this.stackTop = -1;
        this.items = [];
        this.current = document4;
        this.currentTagName = null;
        this.currentTmplContent = null;
        this.tmplCount = 0;
        this.treeAdapter = treeAdapter;
      }
      //Index of element
      _indexOf(element7) {
        let idx = -1;
        for (let i = this.stackTop; i >= 0; i--) {
          if (this.items[i] === element7) {
            idx = i;
            break;
          }
        }
        return idx;
      }
      //Update current element
      _isInTemplate() {
        return this.currentTagName === $2.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;
      }
      _updateCurrentElement() {
        this.current = this.items[this.stackTop];
        this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);
        this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
      }
      //Mutations
      push(element7) {
        this.items[++this.stackTop] = element7;
        this._updateCurrentElement();
        if (this._isInTemplate()) {
          this.tmplCount++;
        }
      }
      pop() {
        this.stackTop--;
        if (this.tmplCount > 0 && this._isInTemplate()) {
          this.tmplCount--;
        }
        this._updateCurrentElement();
      }
      replace(oldElement, newElement) {
        const idx = this._indexOf(oldElement);
        this.items[idx] = newElement;
        if (idx === this.stackTop) {
          this._updateCurrentElement();
        }
      }
      insertAfter(referenceElement, newElement) {
        const insertionIdx = this._indexOf(referenceElement) + 1;
        this.items.splice(insertionIdx, 0, newElement);
        if (insertionIdx === ++this.stackTop) {
          this._updateCurrentElement();
        }
      }
      popUntilTagNamePopped(tagName) {
        while (this.stackTop > -1) {
          const tn2 = this.currentTagName;
          const ns = this.treeAdapter.getNamespaceURI(this.current);
          this.pop();
          if (tn2 === tagName && ns === NS.HTML) {
            break;
          }
        }
      }
      popUntilElementPopped(element7) {
        while (this.stackTop > -1) {
          const poppedElement = this.current;
          this.pop();
          if (poppedElement === element7) {
            break;
          }
        }
      }
      popUntilNumberedHeaderPopped() {
        while (this.stackTop > -1) {
          const tn2 = this.currentTagName;
          const ns = this.treeAdapter.getNamespaceURI(this.current);
          this.pop();
          if (tn2 === $2.H1 || tn2 === $2.H2 || tn2 === $2.H3 || tn2 === $2.H4 || tn2 === $2.H5 || tn2 === $2.H6 && ns === NS.HTML) {
            break;
          }
        }
      }
      popUntilTableCellPopped() {
        while (this.stackTop > -1) {
          const tn2 = this.currentTagName;
          const ns = this.treeAdapter.getNamespaceURI(this.current);
          this.pop();
          if (tn2 === $2.TD || tn2 === $2.TH && ns === NS.HTML) {
            break;
          }
        }
      }
      popAllUpToHtmlElement() {
        this.stackTop = 0;
        this._updateCurrentElement();
      }
      clearBackToTableContext() {
        while (this.currentTagName !== $2.TABLE && this.currentTagName !== $2.TEMPLATE && this.currentTagName !== $2.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
          this.pop();
        }
      }
      clearBackToTableBodyContext() {
        while (this.currentTagName !== $2.TBODY && this.currentTagName !== $2.TFOOT && this.currentTagName !== $2.THEAD && this.currentTagName !== $2.TEMPLATE && this.currentTagName !== $2.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
          this.pop();
        }
      }
      clearBackToTableRowContext() {
        while (this.currentTagName !== $2.TR && this.currentTagName !== $2.TEMPLATE && this.currentTagName !== $2.HTML || this.treeAdapter.getNamespaceURI(this.current) !== NS.HTML) {
          this.pop();
        }
      }
      remove(element7) {
        for (let i = this.stackTop; i >= 0; i--) {
          if (this.items[i] === element7) {
            this.items.splice(i, 1);
            this.stackTop--;
            this._updateCurrentElement();
            break;
          }
        }
      }
      //Search
      tryPeekProperlyNestedBodyElement() {
        const element7 = this.items[1];
        return element7 && this.treeAdapter.getTagName(element7) === $2.BODY ? element7 : null;
      }
      contains(element7) {
        return this._indexOf(element7) > -1;
      }
      getCommonAncestor(element7) {
        let elementIdx = this._indexOf(element7);
        return --elementIdx >= 0 ? this.items[elementIdx] : null;
      }
      isRootHtmlElementCurrent() {
        return this.stackTop === 0 && this.currentTagName === $2.HTML;
      }
      //Element in scope
      hasInScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
          const tn2 = this.treeAdapter.getTagName(this.items[i]);
          const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
          if (tn2 === tagName && ns === NS.HTML) {
            return true;
          }
          if (isScopingElement(tn2, ns)) {
            return false;
          }
        }
        return true;
      }
      hasNumberedHeaderInScope() {
        for (let i = this.stackTop; i >= 0; i--) {
          const tn2 = this.treeAdapter.getTagName(this.items[i]);
          const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
          if ((tn2 === $2.H1 || tn2 === $2.H2 || tn2 === $2.H3 || tn2 === $2.H4 || tn2 === $2.H5 || tn2 === $2.H6) && ns === NS.HTML) {
            return true;
          }
          if (isScopingElement(tn2, ns)) {
            return false;
          }
        }
        return true;
      }
      hasInListItemScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
          const tn2 = this.treeAdapter.getTagName(this.items[i]);
          const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
          if (tn2 === tagName && ns === NS.HTML) {
            return true;
          }
          if ((tn2 === $2.UL || tn2 === $2.OL) && ns === NS.HTML || isScopingElement(tn2, ns)) {
            return false;
          }
        }
        return true;
      }
      hasInButtonScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
          const tn2 = this.treeAdapter.getTagName(this.items[i]);
          const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
          if (tn2 === tagName && ns === NS.HTML) {
            return true;
          }
          if (tn2 === $2.BUTTON && ns === NS.HTML || isScopingElement(tn2, ns)) {
            return false;
          }
        }
        return true;
      }
      hasInTableScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
          const tn2 = this.treeAdapter.getTagName(this.items[i]);
          const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
          if (ns !== NS.HTML) {
            continue;
          }
          if (tn2 === tagName) {
            return true;
          }
          if (tn2 === $2.TABLE || tn2 === $2.TEMPLATE || tn2 === $2.HTML) {
            return false;
          }
        }
        return true;
      }
      hasTableBodyContextInTableScope() {
        for (let i = this.stackTop; i >= 0; i--) {
          const tn2 = this.treeAdapter.getTagName(this.items[i]);
          const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
          if (ns !== NS.HTML) {
            continue;
          }
          if (tn2 === $2.TBODY || tn2 === $2.THEAD || tn2 === $2.TFOOT) {
            return true;
          }
          if (tn2 === $2.TABLE || tn2 === $2.HTML) {
            return false;
          }
        }
        return true;
      }
      hasInSelectScope(tagName) {
        for (let i = this.stackTop; i >= 0; i--) {
          const tn2 = this.treeAdapter.getTagName(this.items[i]);
          const ns = this.treeAdapter.getNamespaceURI(this.items[i]);
          if (ns !== NS.HTML) {
            continue;
          }
          if (tn2 === tagName) {
            return true;
          }
          if (tn2 !== $2.OPTION && tn2 !== $2.OPTGROUP) {
            return false;
          }
        }
        return true;
      }
      //Implied end tags
      generateImpliedEndTags() {
        while (isImpliedEndTagRequired(this.currentTagName)) {
          this.pop();
        }
      }
      generateImpliedEndTagsThoroughly() {
        while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
          this.pop();
        }
      }
      generateImpliedEndTagsWithExclusion(exclusionTagName) {
        while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
          this.pop();
        }
      }
    };
    module.exports = OpenElementStack;
  }
});

// node_modules/parse5/lib/parser/formatting-element-list.js
var require_formatting_element_list = __commonJS({
  "node_modules/parse5/lib/parser/formatting-element-list.js"(exports, module) {
    "use strict";
    var NOAH_ARK_CAPACITY = 3;
    var FormattingElementList = class {
      constructor(treeAdapter) {
        this.length = 0;
        this.entries = [];
        this.treeAdapter = treeAdapter;
        this.bookmark = null;
      }
      //Noah Ark's condition
      //OPTIMIZATION: at first we try to find possible candidates for exclusion using
      //lightweight heuristics without thorough attributes check.
      _getNoahArkConditionCandidates(newElement) {
        const candidates = [];
        if (this.length >= NOAH_ARK_CAPACITY) {
          const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
          const neTagName = this.treeAdapter.getTagName(newElement);
          const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
          for (let i = this.length - 1; i >= 0; i--) {
            const entry = this.entries[i];
            if (entry.type === FormattingElementList.MARKER_ENTRY) {
              break;
            }
            const element7 = entry.element;
            const elementAttrs = this.treeAdapter.getAttrList(element7);
            const isCandidate = this.treeAdapter.getTagName(element7) === neTagName && this.treeAdapter.getNamespaceURI(element7) === neNamespaceURI && elementAttrs.length === neAttrsLength;
            if (isCandidate) {
              candidates.push({ idx: i, attrs: elementAttrs });
            }
          }
        }
        return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
      }
      _ensureNoahArkCondition(newElement) {
        const candidates = this._getNoahArkConditionCandidates(newElement);
        let cLength = candidates.length;
        if (cLength) {
          const neAttrs = this.treeAdapter.getAttrList(newElement);
          const neAttrsLength = neAttrs.length;
          const neAttrsMap = /* @__PURE__ */ Object.create(null);
          for (let i = 0; i < neAttrsLength; i++) {
            const neAttr = neAttrs[i];
            neAttrsMap[neAttr.name] = neAttr.value;
          }
          for (let i = 0; i < neAttrsLength; i++) {
            for (let j = 0; j < cLength; j++) {
              const cAttr = candidates[j].attrs[i];
              if (neAttrsMap[cAttr.name] !== cAttr.value) {
                candidates.splice(j, 1);
                cLength--;
              }
              if (candidates.length < NOAH_ARK_CAPACITY) {
                return;
              }
            }
          }
          for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
            this.entries.splice(candidates[i].idx, 1);
            this.length--;
          }
        }
      }
      //Mutations
      insertMarker() {
        this.entries.push({ type: FormattingElementList.MARKER_ENTRY });
        this.length++;
      }
      pushElement(element7, token2) {
        this._ensureNoahArkCondition(element7);
        this.entries.push({
          type: FormattingElementList.ELEMENT_ENTRY,
          element: element7,
          token: token2
        });
        this.length++;
      }
      insertElementAfterBookmark(element7, token2) {
        let bookmarkIdx = this.length - 1;
        for (; bookmarkIdx >= 0; bookmarkIdx--) {
          if (this.entries[bookmarkIdx] === this.bookmark) {
            break;
          }
        }
        this.entries.splice(bookmarkIdx + 1, 0, {
          type: FormattingElementList.ELEMENT_ENTRY,
          element: element7,
          token: token2
        });
        this.length++;
      }
      removeEntry(entry) {
        for (let i = this.length - 1; i >= 0; i--) {
          if (this.entries[i] === entry) {
            this.entries.splice(i, 1);
            this.length--;
            break;
          }
        }
      }
      clearToLastMarker() {
        while (this.length) {
          const entry = this.entries.pop();
          this.length--;
          if (entry.type === FormattingElementList.MARKER_ENTRY) {
            break;
          }
        }
      }
      //Search
      getElementEntryInScopeWithTagName(tagName) {
        for (let i = this.length - 1; i >= 0; i--) {
          const entry = this.entries[i];
          if (entry.type === FormattingElementList.MARKER_ENTRY) {
            return null;
          }
          if (this.treeAdapter.getTagName(entry.element) === tagName) {
            return entry;
          }
        }
        return null;
      }
      getElementEntry(element7) {
        for (let i = this.length - 1; i >= 0; i--) {
          const entry = this.entries[i];
          if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element7) {
            return entry;
          }
        }
        return null;
      }
    };
    FormattingElementList.MARKER_ENTRY = "MARKER_ENTRY";
    FormattingElementList.ELEMENT_ENTRY = "ELEMENT_ENTRY";
    module.exports = FormattingElementList;
  }
});

// node_modules/parse5/lib/utils/mixin.js
var require_mixin = __commonJS({
  "node_modules/parse5/lib/utils/mixin.js"(exports, module) {
    "use strict";
    var Mixin = class {
      constructor(host) {
        const originalMethods = {};
        const overriddenMethods = this._getOverriddenMethods(this, originalMethods);
        for (const key2 of Object.keys(overriddenMethods)) {
          if (typeof overriddenMethods[key2] === "function") {
            originalMethods[key2] = host[key2];
            host[key2] = overriddenMethods[key2];
          }
        }
      }
      _getOverriddenMethods() {
        throw new Error("Not implemented");
      }
    };
    Mixin.install = function(host, Ctor, opts) {
      if (!host.__mixins) {
        host.__mixins = [];
      }
      for (let i = 0; i < host.__mixins.length; i++) {
        if (host.__mixins[i].constructor === Ctor) {
          return host.__mixins[i];
        }
      }
      const mixin = new Ctor(host, opts);
      host.__mixins.push(mixin);
      return mixin;
    };
    module.exports = Mixin;
  }
});

// node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js
var require_preprocessor_mixin = __commonJS({
  "node_modules/parse5/lib/extensions/position-tracking/preprocessor-mixin.js"(exports, module) {
    "use strict";
    var Mixin = require_mixin();
    var PositionTrackingPreprocessorMixin = class extends Mixin {
      constructor(preprocessor) {
        super(preprocessor);
        this.preprocessor = preprocessor;
        this.isEol = false;
        this.lineStartPos = 0;
        this.droppedBufferSize = 0;
        this.offset = 0;
        this.col = 0;
        this.line = 1;
      }
      _getOverriddenMethods(mxn, orig) {
        return {
          advance() {
            const pos = this.pos + 1;
            const ch = this.html[pos];
            if (mxn.isEol) {
              mxn.isEol = false;
              mxn.line++;
              mxn.lineStartPos = pos;
            }
            if (ch === "\n" || ch === "\r" && this.html[pos + 1] !== "\n") {
              mxn.isEol = true;
            }
            mxn.col = pos - mxn.lineStartPos + 1;
            mxn.offset = mxn.droppedBufferSize + pos;
            return orig.advance.call(this);
          },
          retreat() {
            orig.retreat.call(this);
            mxn.isEol = false;
            mxn.col = this.pos - mxn.lineStartPos + 1;
          },
          dropParsedChunk() {
            const prevPos = this.pos;
            orig.dropParsedChunk.call(this);
            const reduction = prevPos - this.pos;
            mxn.lineStartPos -= reduction;
            mxn.droppedBufferSize += reduction;
            mxn.offset = mxn.droppedBufferSize + this.pos;
          }
        };
      }
    };
    module.exports = PositionTrackingPreprocessorMixin;
  }
});

// node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js
var require_tokenizer_mixin = __commonJS({
  "node_modules/parse5/lib/extensions/location-info/tokenizer-mixin.js"(exports, module) {
    "use strict";
    var Mixin = require_mixin();
    var Tokenizer = require_tokenizer();
    var PositionTrackingPreprocessorMixin = require_preprocessor_mixin();
    var LocationInfoTokenizerMixin = class extends Mixin {
      constructor(tokenizer) {
        super(tokenizer);
        this.tokenizer = tokenizer;
        this.posTracker = Mixin.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin);
        this.currentAttrLocation = null;
        this.ctLoc = null;
      }
      _getCurrentLocation() {
        return {
          startLine: this.posTracker.line,
          startCol: this.posTracker.col,
          startOffset: this.posTracker.offset,
          endLine: -1,
          endCol: -1,
          endOffset: -1
        };
      }
      _attachCurrentAttrLocationInfo() {
        this.currentAttrLocation.endLine = this.posTracker.line;
        this.currentAttrLocation.endCol = this.posTracker.col;
        this.currentAttrLocation.endOffset = this.posTracker.offset;
        const currentToken = this.tokenizer.currentToken;
        const currentAttr = this.tokenizer.currentAttr;
        if (!currentToken.location.attrs) {
          currentToken.location.attrs = /* @__PURE__ */ Object.create(null);
        }
        currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
      }
      _getOverriddenMethods(mxn, orig) {
        const methods = {
          _createStartTagToken() {
            orig._createStartTagToken.call(this);
            this.currentToken.location = mxn.ctLoc;
          },
          _createEndTagToken() {
            orig._createEndTagToken.call(this);
            this.currentToken.location = mxn.ctLoc;
          },
          _createCommentToken() {
            orig._createCommentToken.call(this);
            this.currentToken.location = mxn.ctLoc;
          },
          _createDoctypeToken(initialName) {
            orig._createDoctypeToken.call(this, initialName);
            this.currentToken.location = mxn.ctLoc;
          },
          _createCharacterToken(type, ch) {
            orig._createCharacterToken.call(this, type, ch);
            this.currentCharacterToken.location = mxn.ctLoc;
          },
          _createEOFToken() {
            orig._createEOFToken.call(this);
            this.currentToken.location = mxn._getCurrentLocation();
          },
          _createAttr(attrNameFirstCh) {
            orig._createAttr.call(this, attrNameFirstCh);
            mxn.currentAttrLocation = mxn._getCurrentLocation();
          },
          _leaveAttrName(toState) {
            orig._leaveAttrName.call(this, toState);
            mxn._attachCurrentAttrLocationInfo();
          },
          _leaveAttrValue(toState) {
            orig._leaveAttrValue.call(this, toState);
            mxn._attachCurrentAttrLocationInfo();
          },
          _emitCurrentToken() {
            const ctLoc = this.currentToken.location;
            if (this.currentCharacterToken) {
              this.currentCharacterToken.location.endLine = ctLoc.startLine;
              this.currentCharacterToken.location.endCol = ctLoc.startCol;
              this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
            }
            if (this.currentToken.type === Tokenizer.EOF_TOKEN) {
              ctLoc.endLine = ctLoc.startLine;
              ctLoc.endCol = ctLoc.startCol;
              ctLoc.endOffset = ctLoc.startOffset;
            } else {
              ctLoc.endLine = mxn.posTracker.line;
              ctLoc.endCol = mxn.posTracker.col + 1;
              ctLoc.endOffset = mxn.posTracker.offset + 1;
            }
            orig._emitCurrentToken.call(this);
          },
          _emitCurrentCharacterToken() {
            const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;
            if (ctLoc && ctLoc.endOffset === -1) {
              ctLoc.endLine = mxn.posTracker.line;
              ctLoc.endCol = mxn.posTracker.col;
              ctLoc.endOffset = mxn.posTracker.offset;
            }
            orig._emitCurrentCharacterToken.call(this);
          }
        };
        Object.keys(Tokenizer.MODE).forEach((modeName) => {
          const state = Tokenizer.MODE[modeName];
          methods[state] = function(cp) {
            mxn.ctLoc = mxn._getCurrentLocation();
            orig[state].call(this, cp);
          };
        });
        return methods;
      }
    };
    module.exports = LocationInfoTokenizerMixin;
  }
});

// node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js
var require_open_element_stack_mixin = __commonJS({
  "node_modules/parse5/lib/extensions/location-info/open-element-stack-mixin.js"(exports, module) {
    "use strict";
    var Mixin = require_mixin();
    var LocationInfoOpenElementStackMixin = class extends Mixin {
      constructor(stack, opts) {
        super(stack);
        this.onItemPop = opts.onItemPop;
      }
      _getOverriddenMethods(mxn, orig) {
        return {
          pop() {
            mxn.onItemPop(this.current);
            orig.pop.call(this);
          },
          popAllUpToHtmlElement() {
            for (let i = this.stackTop; i > 0; i--) {
              mxn.onItemPop(this.items[i]);
            }
            orig.popAllUpToHtmlElement.call(this);
          },
          remove(element7) {
            mxn.onItemPop(this.current);
            orig.remove.call(this, element7);
          }
        };
      }
    };
    module.exports = LocationInfoOpenElementStackMixin;
  }
});

// node_modules/parse5/lib/extensions/location-info/parser-mixin.js
var require_parser_mixin = __commonJS({
  "node_modules/parse5/lib/extensions/location-info/parser-mixin.js"(exports, module) {
    "use strict";
    var Mixin = require_mixin();
    var Tokenizer = require_tokenizer();
    var LocationInfoTokenizerMixin = require_tokenizer_mixin();
    var LocationInfoOpenElementStackMixin = require_open_element_stack_mixin();
    var HTML = require_html();
    var $2 = HTML.TAG_NAMES;
    var LocationInfoParserMixin = class extends Mixin {
      constructor(parser) {
        super(parser);
        this.parser = parser;
        this.treeAdapter = this.parser.treeAdapter;
        this.posTracker = null;
        this.lastStartTagToken = null;
        this.lastFosterParentingLocation = null;
        this.currentToken = null;
      }
      _setStartLocation(element7) {
        let loc = null;
        if (this.lastStartTagToken) {
          loc = Object.assign({}, this.lastStartTagToken.location);
          loc.startTag = this.lastStartTagToken.location;
        }
        this.treeAdapter.setNodeSourceCodeLocation(element7, loc);
      }
      _setEndLocation(element7, closingToken) {
        const loc = this.treeAdapter.getNodeSourceCodeLocation(element7);
        if (loc) {
          if (closingToken.location) {
            const ctLoc = closingToken.location;
            const tn2 = this.treeAdapter.getTagName(element7);
            const isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn2 === closingToken.tagName;
            const endLoc = {};
            if (isClosingEndTag) {
              endLoc.endTag = Object.assign({}, ctLoc);
              endLoc.endLine = ctLoc.endLine;
              endLoc.endCol = ctLoc.endCol;
              endLoc.endOffset = ctLoc.endOffset;
            } else {
              endLoc.endLine = ctLoc.startLine;
              endLoc.endCol = ctLoc.startCol;
              endLoc.endOffset = ctLoc.startOffset;
            }
            this.treeAdapter.updateNodeSourceCodeLocation(element7, endLoc);
          }
        }
      }
      _getOverriddenMethods(mxn, orig) {
        return {
          _bootstrap(document4, fragmentContext) {
            orig._bootstrap.call(this, document4, fragmentContext);
            mxn.lastStartTagToken = null;
            mxn.lastFosterParentingLocation = null;
            mxn.currentToken = null;
            const tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
            mxn.posTracker = tokenizerMixin.posTracker;
            Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {
              onItemPop: function(element7) {
                mxn._setEndLocation(element7, mxn.currentToken);
              }
            });
          },
          _runParsingLoop(scriptHandler) {
            orig._runParsingLoop.call(this, scriptHandler);
            for (let i = this.openElements.stackTop; i >= 0; i--) {
              mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
            }
          },
          //Token processing
          _processTokenInForeignContent(token2) {
            mxn.currentToken = token2;
            orig._processTokenInForeignContent.call(this, token2);
          },
          _processToken(token2) {
            mxn.currentToken = token2;
            orig._processToken.call(this, token2);
            const requireExplicitUpdate = token2.type === Tokenizer.END_TAG_TOKEN && (token2.tagName === $2.HTML || token2.tagName === $2.BODY && this.openElements.hasInScope($2.BODY));
            if (requireExplicitUpdate) {
              for (let i = this.openElements.stackTop; i >= 0; i--) {
                const element7 = this.openElements.items[i];
                if (this.treeAdapter.getTagName(element7) === token2.tagName) {
                  mxn._setEndLocation(element7, token2);
                  break;
                }
              }
            }
          },
          //Doctype
          _setDocumentType(token2) {
            orig._setDocumentType.call(this, token2);
            const documentChildren = this.treeAdapter.getChildNodes(this.document);
            const cnLength = documentChildren.length;
            for (let i = 0; i < cnLength; i++) {
              const node4 = documentChildren[i];
              if (this.treeAdapter.isDocumentTypeNode(node4)) {
                this.treeAdapter.setNodeSourceCodeLocation(node4, token2.location);
                break;
              }
            }
          },
          //Elements
          _attachElementToTree(element7) {
            mxn._setStartLocation(element7);
            mxn.lastStartTagToken = null;
            orig._attachElementToTree.call(this, element7);
          },
          _appendElement(token2, namespaceURI) {
            mxn.lastStartTagToken = token2;
            orig._appendElement.call(this, token2, namespaceURI);
          },
          _insertElement(token2, namespaceURI) {
            mxn.lastStartTagToken = token2;
            orig._insertElement.call(this, token2, namespaceURI);
          },
          _insertTemplate(token2) {
            mxn.lastStartTagToken = token2;
            orig._insertTemplate.call(this, token2);
            const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);
            this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
          },
          _insertFakeRootElement() {
            orig._insertFakeRootElement.call(this);
            this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
          },
          //Comments
          _appendCommentNode(token2, parent) {
            orig._appendCommentNode.call(this, token2, parent);
            const children = this.treeAdapter.getChildNodes(parent);
            const commentNode = children[children.length - 1];
            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token2.location);
          },
          //Text
          _findFosterParentingLocation() {
            mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);
            return mxn.lastFosterParentingLocation;
          },
          _insertCharacters(token2) {
            orig._insertCharacters.call(this, token2);
            const hasFosterParent = this._shouldFosterParentOnInsertion();
            const parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;
            const siblings2 = this.treeAdapter.getChildNodes(parent);
            const textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings2.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings2.length - 1;
            const textNode = siblings2[textNodeIdx];
            const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
            if (tnLoc) {
              const { endLine, endCol, endOffset } = token2.location;
              this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
            } else {
              this.treeAdapter.setNodeSourceCodeLocation(textNode, token2.location);
            }
          }
        };
      }
    };
    module.exports = LocationInfoParserMixin;
  }
});

// node_modules/parse5/lib/extensions/error-reporting/mixin-base.js
var require_mixin_base = __commonJS({
  "node_modules/parse5/lib/extensions/error-reporting/mixin-base.js"(exports, module) {
    "use strict";
    var Mixin = require_mixin();
    var ErrorReportingMixinBase = class extends Mixin {
      constructor(host, opts) {
        super(host);
        this.posTracker = null;
        this.onParseError = opts.onParseError;
      }
      _setErrorLocation(err) {
        err.startLine = err.endLine = this.posTracker.line;
        err.startCol = err.endCol = this.posTracker.col;
        err.startOffset = err.endOffset = this.posTracker.offset;
      }
      _reportError(code5) {
        const err = {
          code: code5,
          startLine: -1,
          startCol: -1,
          startOffset: -1,
          endLine: -1,
          endCol: -1,
          endOffset: -1
        };
        this._setErrorLocation(err);
        this.onParseError(err);
      }
      _getOverriddenMethods(mxn) {
        return {
          _err(code5) {
            mxn._reportError(code5);
          }
        };
      }
    };
    module.exports = ErrorReportingMixinBase;
  }
});

// node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js
var require_preprocessor_mixin2 = __commonJS({
  "node_modules/parse5/lib/extensions/error-reporting/preprocessor-mixin.js"(exports, module) {
    "use strict";
    var ErrorReportingMixinBase = require_mixin_base();
    var PositionTrackingPreprocessorMixin = require_preprocessor_mixin();
    var Mixin = require_mixin();
    var ErrorReportingPreprocessorMixin = class extends ErrorReportingMixinBase {
      constructor(preprocessor, opts) {
        super(preprocessor, opts);
        this.posTracker = Mixin.install(preprocessor, PositionTrackingPreprocessorMixin);
        this.lastErrOffset = -1;
      }
      _reportError(code5) {
        if (this.lastErrOffset !== this.posTracker.offset) {
          this.lastErrOffset = this.posTracker.offset;
          super._reportError(code5);
        }
      }
    };
    module.exports = ErrorReportingPreprocessorMixin;
  }
});

// node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js
var require_tokenizer_mixin2 = __commonJS({
  "node_modules/parse5/lib/extensions/error-reporting/tokenizer-mixin.js"(exports, module) {
    "use strict";
    var ErrorReportingMixinBase = require_mixin_base();
    var ErrorReportingPreprocessorMixin = require_preprocessor_mixin2();
    var Mixin = require_mixin();
    var ErrorReportingTokenizerMixin = class extends ErrorReportingMixinBase {
      constructor(tokenizer, opts) {
        super(tokenizer, opts);
        const preprocessorMixin = Mixin.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);
        this.posTracker = preprocessorMixin.posTracker;
      }
    };
    module.exports = ErrorReportingTokenizerMixin;
  }
});

// node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js
var require_parser_mixin2 = __commonJS({
  "node_modules/parse5/lib/extensions/error-reporting/parser-mixin.js"(exports, module) {
    "use strict";
    var ErrorReportingMixinBase = require_mixin_base();
    var ErrorReportingTokenizerMixin = require_tokenizer_mixin2();
    var LocationInfoTokenizerMixin = require_tokenizer_mixin();
    var Mixin = require_mixin();
    var ErrorReportingParserMixin = class extends ErrorReportingMixinBase {
      constructor(parser, opts) {
        super(parser, opts);
        this.opts = opts;
        this.ctLoc = null;
        this.locBeforeToken = false;
      }
      _setErrorLocation(err) {
        if (this.ctLoc) {
          err.startLine = this.ctLoc.startLine;
          err.startCol = this.ctLoc.startCol;
          err.startOffset = this.ctLoc.startOffset;
          err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
          err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
          err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
        }
      }
      _getOverriddenMethods(mxn, orig) {
        return {
          _bootstrap(document4, fragmentContext) {
            orig._bootstrap.call(this, document4, fragmentContext);
            Mixin.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
            Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);
          },
          _processInputToken(token2) {
            mxn.ctLoc = token2.location;
            orig._processInputToken.call(this, token2);
          },
          _err(code5, options2) {
            mxn.locBeforeToken = options2 && options2.beforeToken;
            mxn._reportError(code5);
          }
        };
      }
    };
    module.exports = ErrorReportingParserMixin;
  }
});

// node_modules/parse5/lib/tree-adapters/default.js
var require_default = __commonJS({
  "node_modules/parse5/lib/tree-adapters/default.js"(exports) {
    "use strict";
    var { DOCUMENT_MODE } = require_html();
    exports.createDocument = function() {
      return {
        nodeName: "#document",
        mode: DOCUMENT_MODE.NO_QUIRKS,
        childNodes: []
      };
    };
    exports.createDocumentFragment = function() {
      return {
        nodeName: "#document-fragment",
        childNodes: []
      };
    };
    exports.createElement = function(tagName, namespaceURI, attrs) {
      return {
        nodeName: tagName,
        tagName,
        attrs,
        namespaceURI,
        childNodes: [],
        parentNode: null
      };
    };
    exports.createCommentNode = function(data) {
      return {
        nodeName: "#comment",
        data,
        parentNode: null
      };
    };
    var createTextNode = function(value) {
      return {
        nodeName: "#text",
        value,
        parentNode: null
      };
    };
    var appendChild = exports.appendChild = function(parentNode2, newNode) {
      parentNode2.childNodes.push(newNode);
      newNode.parentNode = parentNode2;
    };
    var insertBefore = exports.insertBefore = function(parentNode2, newNode, referenceNode) {
      const insertionIdx = parentNode2.childNodes.indexOf(referenceNode);
      parentNode2.childNodes.splice(insertionIdx, 0, newNode);
      newNode.parentNode = parentNode2;
    };
    exports.setTemplateContent = function(templateElement, contentElement) {
      templateElement.content = contentElement;
    };
    exports.getTemplateContent = function(templateElement) {
      return templateElement.content;
    };
    exports.setDocumentType = function(document4, name, publicId, systemId) {
      let doctypeNode = null;
      for (let i = 0; i < document4.childNodes.length; i++) {
        if (document4.childNodes[i].nodeName === "#documentType") {
          doctypeNode = document4.childNodes[i];
          break;
        }
      }
      if (doctypeNode) {
        doctypeNode.name = name;
        doctypeNode.publicId = publicId;
        doctypeNode.systemId = systemId;
      } else {
        appendChild(document4, {
          nodeName: "#documentType",
          name,
          publicId,
          systemId
        });
      }
    };
    exports.setDocumentMode = function(document4, mode) {
      document4.mode = mode;
    };
    exports.getDocumentMode = function(document4) {
      return document4.mode;
    };
    exports.detachNode = function(node4) {
      if (node4.parentNode) {
        const idx = node4.parentNode.childNodes.indexOf(node4);
        node4.parentNode.childNodes.splice(idx, 1);
        node4.parentNode = null;
      }
    };
    exports.insertText = function(parentNode2, text10) {
      if (parentNode2.childNodes.length) {
        const prevNode = parentNode2.childNodes[parentNode2.childNodes.length - 1];
        if (prevNode.nodeName === "#text") {
          prevNode.value += text10;
          return;
        }
      }
      appendChild(parentNode2, createTextNode(text10));
    };
    exports.insertTextBefore = function(parentNode2, text10, referenceNode) {
      const prevNode = parentNode2.childNodes[parentNode2.childNodes.indexOf(referenceNode) - 1];
      if (prevNode && prevNode.nodeName === "#text") {
        prevNode.value += text10;
      } else {
        insertBefore(parentNode2, createTextNode(text10), referenceNode);
      }
    };
    exports.adoptAttributes = function(recipient, attrs) {
      const recipientAttrsMap = [];
      for (let i = 0; i < recipient.attrs.length; i++) {
        recipientAttrsMap.push(recipient.attrs[i].name);
      }
      for (let j = 0; j < attrs.length; j++) {
        if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {
          recipient.attrs.push(attrs[j]);
        }
      }
    };
    exports.getFirstChild = function(node4) {
      return node4.childNodes[0];
    };
    exports.getChildNodes = function(node4) {
      return node4.childNodes;
    };
    exports.getParentNode = function(node4) {
      return node4.parentNode;
    };
    exports.getAttrList = function(element7) {
      return element7.attrs;
    };
    exports.getTagName = function(element7) {
      return element7.tagName;
    };
    exports.getNamespaceURI = function(element7) {
      return element7.namespaceURI;
    };
    exports.getTextNodeContent = function(textNode) {
      return textNode.value;
    };
    exports.getCommentNodeContent = function(commentNode) {
      return commentNode.data;
    };
    exports.getDocumentTypeNodeName = function(doctypeNode) {
      return doctypeNode.name;
    };
    exports.getDocumentTypeNodePublicId = function(doctypeNode) {
      return doctypeNode.publicId;
    };
    exports.getDocumentTypeNodeSystemId = function(doctypeNode) {
      return doctypeNode.systemId;
    };
    exports.isTextNode = function(node4) {
      return node4.nodeName === "#text";
    };
    exports.isCommentNode = function(node4) {
      return node4.nodeName === "#comment";
    };
    exports.isDocumentTypeNode = function(node4) {
      return node4.nodeName === "#documentType";
    };
    exports.isElementNode = function(node4) {
      return !!node4.tagName;
    };
    exports.setNodeSourceCodeLocation = function(node4, location3) {
      node4.sourceCodeLocation = location3;
    };
    exports.getNodeSourceCodeLocation = function(node4) {
      return node4.sourceCodeLocation;
    };
    exports.updateNodeSourceCodeLocation = function(node4, endLocation) {
      node4.sourceCodeLocation = Object.assign(node4.sourceCodeLocation, endLocation);
    };
  }
});

// node_modules/parse5/lib/utils/merge-options.js
var require_merge_options = __commonJS({
  "node_modules/parse5/lib/utils/merge-options.js"(exports, module) {
    "use strict";
    module.exports = function mergeOptions(defaults2, options2) {
      options2 = options2 || /* @__PURE__ */ Object.create(null);
      return [defaults2, options2].reduce((merged, optObj) => {
        Object.keys(optObj).forEach((key2) => {
          merged[key2] = optObj[key2];
        });
        return merged;
      }, /* @__PURE__ */ Object.create(null));
    };
  }
});

// node_modules/parse5/lib/common/doctype.js
var require_doctype = __commonJS({
  "node_modules/parse5/lib/common/doctype.js"(exports) {
    "use strict";
    var { DOCUMENT_MODE } = require_html();
    var VALID_DOCTYPE_NAME = "html";
    var VALID_SYSTEM_ID = "about:legacy-compat";
    var QUIRKS_MODE_SYSTEM_ID = "http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd";
    var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
      "+//silmaril//dtd html pro v0r11 19970101//",
      "-//as//dtd html 3.0 aswedit + extensions//",
      "-//advasoft ltd//dtd html 3.0 aswedit + extensions//",
      "-//ietf//dtd html 2.0 level 1//",
      "-//ietf//dtd html 2.0 level 2//",
      "-//ietf//dtd html 2.0 strict level 1//",
      "-//ietf//dtd html 2.0 strict level 2//",
      "-//ietf//dtd html 2.0 strict//",
      "-//ietf//dtd html 2.0//",
      "-//ietf//dtd html 2.1e//",
      "-//ietf//dtd html 3.0//",
      "-//ietf//dtd html 3.2 final//",
      "-//ietf//dtd html 3.2//",
      "-//ietf//dtd html 3//",
      "-//ietf//dtd html level 0//",
      "-//ietf//dtd html level 1//",
      "-//ietf//dtd html level 2//",
      "-//ietf//dtd html level 3//",
      "-//ietf//dtd html strict level 0//",
      "-//ietf//dtd html strict level 1//",
      "-//ietf//dtd html strict level 2//",
      "-//ietf//dtd html strict level 3//",
      "-//ietf//dtd html strict//",
      "-//ietf//dtd html//",
      "-//metrius//dtd metrius presentational//",
      "-//microsoft//dtd internet explorer 2.0 html strict//",
      "-//microsoft//dtd internet explorer 2.0 html//",
      "-//microsoft//dtd internet explorer 2.0 tables//",
      "-//microsoft//dtd internet explorer 3.0 html strict//",
      "-//microsoft//dtd internet explorer 3.0 html//",
      "-//microsoft//dtd internet explorer 3.0 tables//",
      "-//netscape comm. corp.//dtd html//",
      "-//netscape comm. corp.//dtd strict html//",
      "-//o'reilly and associates//dtd html 2.0//",
      "-//o'reilly and associates//dtd html extended 1.0//",
      "-//o'reilly and associates//dtd html extended relaxed 1.0//",
      "-//sq//dtd html 2.0 hotmetal + extensions//",
      "-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//",
      "-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//",
      "-//spyglass//dtd html 2.0 extended//",
      "-//sun microsystems corp.//dtd hotjava html//",
      "-//sun microsystems corp.//dtd hotjava strict html//",
      "-//w3c//dtd html 3 1995-03-24//",
      "-//w3c//dtd html 3.2 draft//",
      "-//w3c//dtd html 3.2 final//",
      "-//w3c//dtd html 3.2//",
      "-//w3c//dtd html 3.2s draft//",
      "-//w3c//dtd html 4.0 frameset//",
      "-//w3c//dtd html 4.0 transitional//",
      "-//w3c//dtd html experimental 19960712//",
      "-//w3c//dtd html experimental 970421//",
      "-//w3c//dtd w3 html//",
      "-//w3o//dtd w3 html 3.0//",
      "-//webtechs//dtd mozilla html 2.0//",
      "-//webtechs//dtd mozilla html//"
    ];
    var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([
      "-//w3c//dtd html 4.01 frameset//",
      "-//w3c//dtd html 4.01 transitional//"
    ]);
    var QUIRKS_MODE_PUBLIC_IDS = ["-//w3o//dtd w3 html strict 3.0//en//", "-/w3c/dtd html 4.0 transitional/en", "html"];
    var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ["-//w3c//dtd xhtml 1.0 frameset//", "-//w3c//dtd xhtml 1.0 transitional//"];
    var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([
      "-//w3c//dtd html 4.01 frameset//",
      "-//w3c//dtd html 4.01 transitional//"
    ]);
    function enquoteDoctypeId(id2) {
      const quote = id2.indexOf('"') !== -1 ? "'" : '"';
      return quote + id2 + quote;
    }
    function hasPrefix(publicId, prefixes) {
      for (let i = 0; i < prefixes.length; i++) {
        if (publicId.indexOf(prefixes[i]) === 0) {
          return true;
        }
      }
      return false;
    }
    exports.isConforming = function(token2) {
      return token2.name === VALID_DOCTYPE_NAME && token2.publicId === null && (token2.systemId === null || token2.systemId === VALID_SYSTEM_ID);
    };
    exports.getDocumentMode = function(token2) {
      if (token2.name !== VALID_DOCTYPE_NAME) {
        return DOCUMENT_MODE.QUIRKS;
      }
      const systemId = token2.systemId;
      if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
        return DOCUMENT_MODE.QUIRKS;
      }
      let publicId = token2.publicId;
      if (publicId !== null) {
        publicId = publicId.toLowerCase();
        if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {
          return DOCUMENT_MODE.QUIRKS;
        }
        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
        if (hasPrefix(publicId, prefixes)) {
          return DOCUMENT_MODE.QUIRKS;
        }
        prefixes = systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
        if (hasPrefix(publicId, prefixes)) {
          return DOCUMENT_MODE.LIMITED_QUIRKS;
        }
      }
      return DOCUMENT_MODE.NO_QUIRKS;
    };
    exports.serializeContent = function(name, publicId, systemId) {
      let str = "!DOCTYPE ";
      if (name) {
        str += name;
      }
      if (publicId) {
        str += " PUBLIC " + enquoteDoctypeId(publicId);
      } else if (systemId) {
        str += " SYSTEM";
      }
      if (systemId !== null) {
        str += " " + enquoteDoctypeId(systemId);
      }
      return str;
    };
  }
});

// node_modules/parse5/lib/common/foreign-content.js
var require_foreign_content = __commonJS({
  "node_modules/parse5/lib/common/foreign-content.js"(exports) {
    "use strict";
    var Tokenizer = require_tokenizer();
    var HTML = require_html();
    var $2 = HTML.TAG_NAMES;
    var NS = HTML.NAMESPACES;
    var ATTRS = HTML.ATTRS;
    var MIME_TYPES = {
      TEXT_HTML: "text/html",
      APPLICATION_XML: "application/xhtml+xml"
    };
    var DEFINITION_URL_ATTR = "definitionurl";
    var ADJUSTED_DEFINITION_URL_ATTR = "definitionURL";
    var SVG_ATTRS_ADJUSTMENT_MAP = {
      attributename: "attributeName",
      attributetype: "attributeType",
      basefrequency: "baseFrequency",
      baseprofile: "baseProfile",
      calcmode: "calcMode",
      clippathunits: "clipPathUnits",
      diffuseconstant: "diffuseConstant",
      edgemode: "edgeMode",
      filterunits: "filterUnits",
      glyphref: "glyphRef",
      gradienttransform: "gradientTransform",
      gradientunits: "gradientUnits",
      kernelmatrix: "kernelMatrix",
      kernelunitlength: "kernelUnitLength",
      keypoints: "keyPoints",
      keysplines: "keySplines",
      keytimes: "keyTimes",
      lengthadjust: "lengthAdjust",
      limitingconeangle: "limitingConeAngle",
      markerheight: "markerHeight",
      markerunits: "markerUnits",
      markerwidth: "markerWidth",
      maskcontentunits: "maskContentUnits",
      maskunits: "maskUnits",
      numoctaves: "numOctaves",
      pathlength: "pathLength",
      patterncontentunits: "patternContentUnits",
      patterntransform: "patternTransform",
      patternunits: "patternUnits",
      pointsatx: "pointsAtX",
      pointsaty: "pointsAtY",
      pointsatz: "pointsAtZ",
      preservealpha: "preserveAlpha",
      preserveaspectratio: "preserveAspectRatio",
      primitiveunits: "primitiveUnits",
      refx: "refX",
      refy: "refY",
      repeatcount: "repeatCount",
      repeatdur: "repeatDur",
      requiredextensions: "requiredExtensions",
      requiredfeatures: "requiredFeatures",
      specularconstant: "specularConstant",
      specularexponent: "specularExponent",
      spreadmethod: "spreadMethod",
      startoffset: "startOffset",
      stddeviation: "stdDeviation",
      stitchtiles: "stitchTiles",
      surfacescale: "surfaceScale",
      systemlanguage: "systemLanguage",
      tablevalues: "tableValues",
      targetx: "targetX",
      targety: "targetY",
      textlength: "textLength",
      viewbox: "viewBox",
      viewtarget: "viewTarget",
      xchannelselector: "xChannelSelector",
      ychannelselector: "yChannelSelector",
      zoomandpan: "zoomAndPan"
    };
    var XML_ATTRS_ADJUSTMENT_MAP = {
      "xlink:actuate": { prefix: "xlink", name: "actuate", namespace: NS.XLINK },
      "xlink:arcrole": { prefix: "xlink", name: "arcrole", namespace: NS.XLINK },
      "xlink:href": { prefix: "xlink", name: "href", namespace: NS.XLINK },
      "xlink:role": { prefix: "xlink", name: "role", namespace: NS.XLINK },
      "xlink:show": { prefix: "xlink", name: "show", namespace: NS.XLINK },
      "xlink:title": { prefix: "xlink", name: "title", namespace: NS.XLINK },
      "xlink:type": { prefix: "xlink", name: "type", namespace: NS.XLINK },
      "xml:base": { prefix: "xml", name: "base", namespace: NS.XML },
      "xml:lang": { prefix: "xml", name: "lang", namespace: NS.XML },
      "xml:space": { prefix: "xml", name: "space", namespace: NS.XML },
      xmlns: { prefix: "", name: "xmlns", namespace: NS.XMLNS },
      "xmlns:xlink": { prefix: "xmlns", name: "xlink", namespace: NS.XMLNS }
    };
    var SVG_TAG_NAMES_ADJUSTMENT_MAP = exports.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
      altglyph: "altGlyph",
      altglyphdef: "altGlyphDef",
      altglyphitem: "altGlyphItem",
      animatecolor: "animateColor",
      animatemotion: "animateMotion",
      animatetransform: "animateTransform",
      clippath: "clipPath",
      feblend: "feBlend",
      fecolormatrix: "feColorMatrix",
      fecomponenttransfer: "feComponentTransfer",
      fecomposite: "feComposite",
      feconvolvematrix: "feConvolveMatrix",
      fediffuselighting: "feDiffuseLighting",
      fedisplacementmap: "feDisplacementMap",
      fedistantlight: "feDistantLight",
      feflood: "feFlood",
      fefunca: "feFuncA",
      fefuncb: "feFuncB",
      fefuncg: "feFuncG",
      fefuncr: "feFuncR",
      fegaussianblur: "feGaussianBlur",
      feimage: "feImage",
      femerge: "feMerge",
      femergenode: "feMergeNode",
      femorphology: "feMorphology",
      feoffset: "feOffset",
      fepointlight: "fePointLight",
      fespecularlighting: "feSpecularLighting",
      fespotlight: "feSpotLight",
      fetile: "feTile",
      feturbulence: "feTurbulence",
      foreignobject: "foreignObject",
      glyphref: "glyphRef",
      lineargradient: "linearGradient",
      radialgradient: "radialGradient",
      textpath: "textPath"
    };
    var EXITS_FOREIGN_CONTENT = {
      [$2.B]: true,
      [$2.BIG]: true,
      [$2.BLOCKQUOTE]: true,
      [$2.BODY]: true,
      [$2.BR]: true,
      [$2.CENTER]: true,
      [$2.CODE]: true,
      [$2.DD]: true,
      [$2.DIV]: true,
      [$2.DL]: true,
      [$2.DT]: true,
      [$2.EM]: true,
      [$2.EMBED]: true,
      [$2.H1]: true,
      [$2.H2]: true,
      [$2.H3]: true,
      [$2.H4]: true,
      [$2.H5]: true,
      [$2.H6]: true,
      [$2.HEAD]: true,
      [$2.HR]: true,
      [$2.I]: true,
      [$2.IMG]: true,
      [$2.LI]: true,
      [$2.LISTING]: true,
      [$2.MENU]: true,
      [$2.META]: true,
      [$2.NOBR]: true,
      [$2.OL]: true,
      [$2.P]: true,
      [$2.PRE]: true,
      [$2.RUBY]: true,
      [$2.S]: true,
      [$2.SMALL]: true,
      [$2.SPAN]: true,
      [$2.STRONG]: true,
      [$2.STRIKE]: true,
      [$2.SUB]: true,
      [$2.SUP]: true,
      [$2.TABLE]: true,
      [$2.TT]: true,
      [$2.U]: true,
      [$2.UL]: true,
      [$2.VAR]: true
    };
    exports.causesExit = function(startTagToken) {
      const tn2 = startTagToken.tagName;
      const isFontWithAttrs = tn2 === $2.FONT && (Tokenizer.getTokenAttr(startTagToken, ATTRS.COLOR) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.SIZE) !== null || Tokenizer.getTokenAttr(startTagToken, ATTRS.FACE) !== null);
      return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn2];
    };
    exports.adjustTokenMathMLAttrs = function(token2) {
      for (let i = 0; i < token2.attrs.length; i++) {
        if (token2.attrs[i].name === DEFINITION_URL_ATTR) {
          token2.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
          break;
        }
      }
    };
    exports.adjustTokenSVGAttrs = function(token2) {
      for (let i = 0; i < token2.attrs.length; i++) {
        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token2.attrs[i].name];
        if (adjustedAttrName) {
          token2.attrs[i].name = adjustedAttrName;
        }
      }
    };
    exports.adjustTokenXMLAttrs = function(token2) {
      for (let i = 0; i < token2.attrs.length; i++) {
        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token2.attrs[i].name];
        if (adjustedAttrEntry) {
          token2.attrs[i].prefix = adjustedAttrEntry.prefix;
          token2.attrs[i].name = adjustedAttrEntry.name;
          token2.attrs[i].namespace = adjustedAttrEntry.namespace;
        }
      }
    };
    exports.adjustTokenSVGTagName = function(token2) {
      const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token2.tagName];
      if (adjustedTagName) {
        token2.tagName = adjustedTagName;
      }
    };
    function isMathMLTextIntegrationPoint(tn2, ns) {
      return ns === NS.MATHML && (tn2 === $2.MI || tn2 === $2.MO || tn2 === $2.MN || tn2 === $2.MS || tn2 === $2.MTEXT);
    }
    function isHtmlIntegrationPoint(tn2, ns, attrs) {
      if (ns === NS.MATHML && tn2 === $2.ANNOTATION_XML) {
        for (let i = 0; i < attrs.length; i++) {
          if (attrs[i].name === ATTRS.ENCODING) {
            const value = attrs[i].value.toLowerCase();
            return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
          }
        }
      }
      return ns === NS.SVG && (tn2 === $2.FOREIGN_OBJECT || tn2 === $2.DESC || tn2 === $2.TITLE);
    }
    exports.isIntegrationPoint = function(tn2, ns, attrs, foreignNS) {
      if ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn2, ns, attrs)) {
        return true;
      }
      if ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn2, ns)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/parse5/lib/parser/index.js
var require_parser = __commonJS({
  "node_modules/parse5/lib/parser/index.js"(exports, module) {
    "use strict";
    var Tokenizer = require_tokenizer();
    var OpenElementStack = require_open_element_stack();
    var FormattingElementList = require_formatting_element_list();
    var LocationInfoParserMixin = require_parser_mixin();
    var ErrorReportingParserMixin = require_parser_mixin2();
    var Mixin = require_mixin();
    var defaultTreeAdapter = require_default();
    var mergeOptions = require_merge_options();
    var doctype3 = require_doctype();
    var foreignContent = require_foreign_content();
    var ERR = require_error_codes();
    var unicode = require_unicode();
    var HTML = require_html();
    var $2 = HTML.TAG_NAMES;
    var NS = HTML.NAMESPACES;
    var ATTRS = HTML.ATTRS;
    var DEFAULT_OPTIONS2 = {
      scriptingEnabled: true,
      sourceCodeLocationInfo: false,
      onParseError: null,
      treeAdapter: defaultTreeAdapter
    };
    var HIDDEN_INPUT_TYPE = "hidden";
    var AA_OUTER_LOOP_ITER = 8;
    var AA_INNER_LOOP_ITER = 3;
    var INITIAL_MODE = "INITIAL_MODE";
    var BEFORE_HTML_MODE = "BEFORE_HTML_MODE";
    var BEFORE_HEAD_MODE = "BEFORE_HEAD_MODE";
    var IN_HEAD_MODE = "IN_HEAD_MODE";
    var IN_HEAD_NO_SCRIPT_MODE = "IN_HEAD_NO_SCRIPT_MODE";
    var AFTER_HEAD_MODE = "AFTER_HEAD_MODE";
    var IN_BODY_MODE = "IN_BODY_MODE";
    var TEXT_MODE = "TEXT_MODE";
    var IN_TABLE_MODE = "IN_TABLE_MODE";
    var IN_TABLE_TEXT_MODE = "IN_TABLE_TEXT_MODE";
    var IN_CAPTION_MODE = "IN_CAPTION_MODE";
    var IN_COLUMN_GROUP_MODE = "IN_COLUMN_GROUP_MODE";
    var IN_TABLE_BODY_MODE = "IN_TABLE_BODY_MODE";
    var IN_ROW_MODE = "IN_ROW_MODE";
    var IN_CELL_MODE = "IN_CELL_MODE";
    var IN_SELECT_MODE = "IN_SELECT_MODE";
    var IN_SELECT_IN_TABLE_MODE = "IN_SELECT_IN_TABLE_MODE";
    var IN_TEMPLATE_MODE = "IN_TEMPLATE_MODE";
    var AFTER_BODY_MODE = "AFTER_BODY_MODE";
    var IN_FRAMESET_MODE = "IN_FRAMESET_MODE";
    var AFTER_FRAMESET_MODE = "AFTER_FRAMESET_MODE";
    var AFTER_AFTER_BODY_MODE = "AFTER_AFTER_BODY_MODE";
    var AFTER_AFTER_FRAMESET_MODE = "AFTER_AFTER_FRAMESET_MODE";
    var INSERTION_MODE_RESET_MAP = {
      [$2.TR]: IN_ROW_MODE,
      [$2.TBODY]: IN_TABLE_BODY_MODE,
      [$2.THEAD]: IN_TABLE_BODY_MODE,
      [$2.TFOOT]: IN_TABLE_BODY_MODE,
      [$2.CAPTION]: IN_CAPTION_MODE,
      [$2.COLGROUP]: IN_COLUMN_GROUP_MODE,
      [$2.TABLE]: IN_TABLE_MODE,
      [$2.BODY]: IN_BODY_MODE,
      [$2.FRAMESET]: IN_FRAMESET_MODE
    };
    var TEMPLATE_INSERTION_MODE_SWITCH_MAP = {
      [$2.CAPTION]: IN_TABLE_MODE,
      [$2.COLGROUP]: IN_TABLE_MODE,
      [$2.TBODY]: IN_TABLE_MODE,
      [$2.TFOOT]: IN_TABLE_MODE,
      [$2.THEAD]: IN_TABLE_MODE,
      [$2.COL]: IN_COLUMN_GROUP_MODE,
      [$2.TR]: IN_TABLE_BODY_MODE,
      [$2.TD]: IN_ROW_MODE,
      [$2.TH]: IN_ROW_MODE
    };
    var TOKEN_HANDLERS = {
      [INITIAL_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,
        [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,
        [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,
        [Tokenizer.EOF_TOKEN]: tokenInInitialMode
      },
      [BEFORE_HTML_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,
        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,
        [Tokenizer.EOF_TOKEN]: tokenBeforeHtml
      },
      [BEFORE_HEAD_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
        [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,
        [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,
        [Tokenizer.EOF_TOKEN]: tokenBeforeHead
      },
      [IN_HEAD_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenInHead,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
        [Tokenizer.START_TAG_TOKEN]: startTagInHead,
        [Tokenizer.END_TAG_TOKEN]: endTagInHead,
        [Tokenizer.EOF_TOKEN]: tokenInHead
      },
      [IN_HEAD_NO_SCRIPT_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
        [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,
        [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,
        [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript
      },
      [AFTER_HEAD_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,
        [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,
        [Tokenizer.EOF_TOKEN]: tokenAfterHead
      },
      [IN_BODY_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInBody,
        [Tokenizer.END_TAG_TOKEN]: endTagInBody,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [TEXT_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: ignoreToken,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: ignoreToken,
        [Tokenizer.END_TAG_TOKEN]: endTagInText,
        [Tokenizer.EOF_TOKEN]: eofInText
      },
      [IN_TABLE_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInTable,
        [Tokenizer.END_TAG_TOKEN]: endTagInTable,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_TABLE_TEXT_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInTableText,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,
        [Tokenizer.COMMENT_TOKEN]: tokenInTableText,
        [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,
        [Tokenizer.START_TAG_TOKEN]: tokenInTableText,
        [Tokenizer.END_TAG_TOKEN]: tokenInTableText,
        [Tokenizer.EOF_TOKEN]: tokenInTableText
      },
      [IN_CAPTION_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInCaption,
        [Tokenizer.END_TAG_TOKEN]: endTagInCaption,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_COLUMN_GROUP_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,
        [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_TABLE_BODY_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,
        [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_ROW_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInRow,
        [Tokenizer.END_TAG_TOKEN]: endTagInRow,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_CELL_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInCell,
        [Tokenizer.END_TAG_TOKEN]: endTagInCell,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_SELECT_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInSelect,
        [Tokenizer.END_TAG_TOKEN]: endTagInSelect,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_SELECT_IN_TABLE_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,
        [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,
        [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_TEMPLATE_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: characterInBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,
        [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,
        [Tokenizer.EOF_TOKEN]: eofInTemplate
      },
      [AFTER_BODY_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,
        [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,
        [Tokenizer.EOF_TOKEN]: stopParsing
      },
      [IN_FRAMESET_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,
        [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,
        [Tokenizer.EOF_TOKEN]: stopParsing
      },
      [AFTER_FRAMESET_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
        [Tokenizer.COMMENT_TOKEN]: appendComment,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,
        [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,
        [Tokenizer.EOF_TOKEN]: stopParsing
      },
      [AFTER_AFTER_BODY_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,
        [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,
        [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,
        [Tokenizer.EOF_TOKEN]: stopParsing
      },
      [AFTER_AFTER_FRAMESET_MODE]: {
        [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
        [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
        [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
        [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
        [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,
        [Tokenizer.END_TAG_TOKEN]: ignoreToken,
        [Tokenizer.EOF_TOKEN]: stopParsing
      }
    };
    var Parser = class {
      constructor(options2) {
        this.options = mergeOptions(DEFAULT_OPTIONS2, options2);
        this.treeAdapter = this.options.treeAdapter;
        this.pendingScript = null;
        if (this.options.sourceCodeLocationInfo) {
          Mixin.install(this, LocationInfoParserMixin);
        }
        if (this.options.onParseError) {
          Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });
        }
      }
      // API
      parse(html7) {
        const document4 = this.treeAdapter.createDocument();
        this._bootstrap(document4, null);
        this.tokenizer.write(html7, true);
        this._runParsingLoop(null);
        return document4;
      }
      parseFragment(html7, fragmentContext) {
        if (!fragmentContext) {
          fragmentContext = this.treeAdapter.createElement($2.TEMPLATE, NS.HTML, []);
        }
        const documentMock = this.treeAdapter.createElement("documentmock", NS.HTML, []);
        this._bootstrap(documentMock, fragmentContext);
        if (this.treeAdapter.getTagName(fragmentContext) === $2.TEMPLATE) {
          this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
        }
        this._initTokenizerForFragmentParsing();
        this._insertFakeRootElement();
        this._resetInsertionMode();
        this._findFormInFragmentContext();
        this.tokenizer.write(html7, true);
        this._runParsingLoop(null);
        const rootElement = this.treeAdapter.getFirstChild(documentMock);
        const fragment = this.treeAdapter.createDocumentFragment();
        this._adoptNodes(rootElement, fragment);
        return fragment;
      }
      //Bootstrap parser
      _bootstrap(document4, fragmentContext) {
        this.tokenizer = new Tokenizer(this.options);
        this.stopped = false;
        this.insertionMode = INITIAL_MODE;
        this.originalInsertionMode = "";
        this.document = document4;
        this.fragmentContext = fragmentContext;
        this.headElement = null;
        this.formElement = null;
        this.openElements = new OpenElementStack(this.document, this.treeAdapter);
        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
        this.tmplInsertionModeStack = [];
        this.tmplInsertionModeStackTop = -1;
        this.currentTmplInsertionMode = null;
        this.pendingCharacterTokens = [];
        this.hasNonWhitespacePendingCharacterToken = false;
        this.framesetOk = true;
        this.skipNextNewLine = false;
        this.fosterParentingEnabled = false;
      }
      //Errors
      _err() {
      }
      //Parsing loop
      _runParsingLoop(scriptHandler) {
        while (!this.stopped) {
          this._setupTokenizerCDATAMode();
          const token2 = this.tokenizer.getNextToken();
          if (token2.type === Tokenizer.HIBERNATION_TOKEN) {
            break;
          }
          if (this.skipNextNewLine) {
            this.skipNextNewLine = false;
            if (token2.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token2.chars[0] === "\n") {
              if (token2.chars.length === 1) {
                continue;
              }
              token2.chars = token2.chars.substr(1);
            }
          }
          this._processInputToken(token2);
          if (scriptHandler && this.pendingScript) {
            break;
          }
        }
      }
      runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
        this._runParsingLoop(scriptHandler);
        if (scriptHandler && this.pendingScript) {
          const script = this.pendingScript;
          this.pendingScript = null;
          scriptHandler(script);
          return;
        }
        if (writeCallback) {
          writeCallback();
        }
      }
      //Text parsing
      _setupTokenizerCDATAMode() {
        const current = this._getAdjustedCurrentElement();
        this.tokenizer.allowCDATA = current && current !== this.document && this.treeAdapter.getNamespaceURI(current) !== NS.HTML && !this._isIntegrationPoint(current);
      }
      _switchToTextParsing(currentToken, nextTokenizerState) {
        this._insertElement(currentToken, NS.HTML);
        this.tokenizer.state = nextTokenizerState;
        this.originalInsertionMode = this.insertionMode;
        this.insertionMode = TEXT_MODE;
      }
      switchToPlaintextParsing() {
        this.insertionMode = TEXT_MODE;
        this.originalInsertionMode = IN_BODY_MODE;
        this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
      }
      //Fragment parsing
      _getAdjustedCurrentElement() {
        return this.openElements.stackTop === 0 && this.fragmentContext ? this.fragmentContext : this.openElements.current;
      }
      _findFormInFragmentContext() {
        let node4 = this.fragmentContext;
        do {
          if (this.treeAdapter.getTagName(node4) === $2.FORM) {
            this.formElement = node4;
            break;
          }
          node4 = this.treeAdapter.getParentNode(node4);
        } while (node4);
      }
      _initTokenizerForFragmentParsing() {
        if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
          const tn2 = this.treeAdapter.getTagName(this.fragmentContext);
          if (tn2 === $2.TITLE || tn2 === $2.TEXTAREA) {
            this.tokenizer.state = Tokenizer.MODE.RCDATA;
          } else if (tn2 === $2.STYLE || tn2 === $2.XMP || tn2 === $2.IFRAME || tn2 === $2.NOEMBED || tn2 === $2.NOFRAMES || tn2 === $2.NOSCRIPT) {
            this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
          } else if (tn2 === $2.SCRIPT) {
            this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
          } else if (tn2 === $2.PLAINTEXT) {
            this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
          }
        }
      }
      //Tree mutation
      _setDocumentType(token2) {
        const name = token2.name || "";
        const publicId = token2.publicId || "";
        const systemId = token2.systemId || "";
        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
      }
      _attachElementToTree(element7) {
        if (this._shouldFosterParentOnInsertion()) {
          this._fosterParentElement(element7);
        } else {
          const parent = this.openElements.currentTmplContent || this.openElements.current;
          this.treeAdapter.appendChild(parent, element7);
        }
      }
      _appendElement(token2, namespaceURI) {
        const element7 = this.treeAdapter.createElement(token2.tagName, namespaceURI, token2.attrs);
        this._attachElementToTree(element7);
      }
      _insertElement(token2, namespaceURI) {
        const element7 = this.treeAdapter.createElement(token2.tagName, namespaceURI, token2.attrs);
        this._attachElementToTree(element7);
        this.openElements.push(element7);
      }
      _insertFakeElement(tagName) {
        const element7 = this.treeAdapter.createElement(tagName, NS.HTML, []);
        this._attachElementToTree(element7);
        this.openElements.push(element7);
      }
      _insertTemplate(token2) {
        const tmpl = this.treeAdapter.createElement(token2.tagName, NS.HTML, token2.attrs);
        const content5 = this.treeAdapter.createDocumentFragment();
        this.treeAdapter.setTemplateContent(tmpl, content5);
        this._attachElementToTree(tmpl);
        this.openElements.push(tmpl);
      }
      _insertFakeRootElement() {
        const element7 = this.treeAdapter.createElement($2.HTML, NS.HTML, []);
        this.treeAdapter.appendChild(this.openElements.current, element7);
        this.openElements.push(element7);
      }
      _appendCommentNode(token2, parent) {
        const commentNode = this.treeAdapter.createCommentNode(token2.data);
        this.treeAdapter.appendChild(parent, commentNode);
      }
      _insertCharacters(token2) {
        if (this._shouldFosterParentOnInsertion()) {
          this._fosterParentText(token2.chars);
        } else {
          const parent = this.openElements.currentTmplContent || this.openElements.current;
          this.treeAdapter.insertText(parent, token2.chars);
        }
      }
      _adoptNodes(donor, recipient) {
        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
          this.treeAdapter.detachNode(child);
          this.treeAdapter.appendChild(recipient, child);
        }
      }
      //Token processing
      _shouldProcessTokenInForeignContent(token2) {
        const current = this._getAdjustedCurrentElement();
        if (!current || current === this.document) {
          return false;
        }
        const ns = this.treeAdapter.getNamespaceURI(current);
        if (ns === NS.HTML) {
          return false;
        }
        if (this.treeAdapter.getTagName(current) === $2.ANNOTATION_XML && ns === NS.MATHML && token2.type === Tokenizer.START_TAG_TOKEN && token2.tagName === $2.SVG) {
          return false;
        }
        const isCharacterToken = token2.type === Tokenizer.CHARACTER_TOKEN || token2.type === Tokenizer.NULL_CHARACTER_TOKEN || token2.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;
        const isMathMLTextStartTag = token2.type === Tokenizer.START_TAG_TOKEN && token2.tagName !== $2.MGLYPH && token2.tagName !== $2.MALIGNMARK;
        if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {
          return false;
        }
        if ((token2.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) && this._isIntegrationPoint(current, NS.HTML)) {
          return false;
        }
        return token2.type !== Tokenizer.EOF_TOKEN;
      }
      _processToken(token2) {
        TOKEN_HANDLERS[this.insertionMode][token2.type](this, token2);
      }
      _processTokenInBodyMode(token2) {
        TOKEN_HANDLERS[IN_BODY_MODE][token2.type](this, token2);
      }
      _processTokenInForeignContent(token2) {
        if (token2.type === Tokenizer.CHARACTER_TOKEN) {
          characterInForeignContent(this, token2);
        } else if (token2.type === Tokenizer.NULL_CHARACTER_TOKEN) {
          nullCharacterInForeignContent(this, token2);
        } else if (token2.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
          insertCharacters(this, token2);
        } else if (token2.type === Tokenizer.COMMENT_TOKEN) {
          appendComment(this, token2);
        } else if (token2.type === Tokenizer.START_TAG_TOKEN) {
          startTagInForeignContent(this, token2);
        } else if (token2.type === Tokenizer.END_TAG_TOKEN) {
          endTagInForeignContent(this, token2);
        }
      }
      _processInputToken(token2) {
        if (this._shouldProcessTokenInForeignContent(token2)) {
          this._processTokenInForeignContent(token2);
        } else {
          this._processToken(token2);
        }
        if (token2.type === Tokenizer.START_TAG_TOKEN && token2.selfClosing && !token2.ackSelfClosing) {
          this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
        }
      }
      //Integration points
      _isIntegrationPoint(element7, foreignNS) {
        const tn2 = this.treeAdapter.getTagName(element7);
        const ns = this.treeAdapter.getNamespaceURI(element7);
        const attrs = this.treeAdapter.getAttrList(element7);
        return foreignContent.isIntegrationPoint(tn2, ns, attrs, foreignNS);
      }
      //Active formatting elements reconstruction
      _reconstructActiveFormattingElements() {
        const listLength = this.activeFormattingElements.length;
        if (listLength) {
          let unopenIdx = listLength;
          let entry = null;
          do {
            unopenIdx--;
            entry = this.activeFormattingElements.entries[unopenIdx];
            if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
              unopenIdx++;
              break;
            }
          } while (unopenIdx > 0);
          for (let i = unopenIdx; i < listLength; i++) {
            entry = this.activeFormattingElements.entries[i];
            this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
            entry.element = this.openElements.current;
          }
        }
      }
      //Close elements
      _closeTableCell() {
        this.openElements.generateImpliedEndTags();
        this.openElements.popUntilTableCellPopped();
        this.activeFormattingElements.clearToLastMarker();
        this.insertionMode = IN_ROW_MODE;
      }
      _closePElement() {
        this.openElements.generateImpliedEndTagsWithExclusion($2.P);
        this.openElements.popUntilTagNamePopped($2.P);
      }
      //Insertion modes
      _resetInsertionMode() {
        for (let i = this.openElements.stackTop, last2 = false; i >= 0; i--) {
          let element7 = this.openElements.items[i];
          if (i === 0) {
            last2 = true;
            if (this.fragmentContext) {
              element7 = this.fragmentContext;
            }
          }
          const tn2 = this.treeAdapter.getTagName(element7);
          const newInsertionMode = INSERTION_MODE_RESET_MAP[tn2];
          if (newInsertionMode) {
            this.insertionMode = newInsertionMode;
            break;
          } else if (!last2 && (tn2 === $2.TD || tn2 === $2.TH)) {
            this.insertionMode = IN_CELL_MODE;
            break;
          } else if (!last2 && tn2 === $2.HEAD) {
            this.insertionMode = IN_HEAD_MODE;
            break;
          } else if (tn2 === $2.SELECT) {
            this._resetInsertionModeForSelect(i);
            break;
          } else if (tn2 === $2.TEMPLATE) {
            this.insertionMode = this.currentTmplInsertionMode;
            break;
          } else if (tn2 === $2.HTML) {
            this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
            break;
          } else if (last2) {
            this.insertionMode = IN_BODY_MODE;
            break;
          }
        }
      }
      _resetInsertionModeForSelect(selectIdx) {
        if (selectIdx > 0) {
          for (let i = selectIdx - 1; i > 0; i--) {
            const ancestor = this.openElements.items[i];
            const tn2 = this.treeAdapter.getTagName(ancestor);
            if (tn2 === $2.TEMPLATE) {
              break;
            } else if (tn2 === $2.TABLE) {
              this.insertionMode = IN_SELECT_IN_TABLE_MODE;
              return;
            }
          }
        }
        this.insertionMode = IN_SELECT_MODE;
      }
      _pushTmplInsertionMode(mode) {
        this.tmplInsertionModeStack.push(mode);
        this.tmplInsertionModeStackTop++;
        this.currentTmplInsertionMode = mode;
      }
      _popTmplInsertionMode() {
        this.tmplInsertionModeStack.pop();
        this.tmplInsertionModeStackTop--;
        this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
      }
      //Foster parenting
      _isElementCausesFosterParenting(element7) {
        const tn2 = this.treeAdapter.getTagName(element7);
        return tn2 === $2.TABLE || tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD || tn2 === $2.TR;
      }
      _shouldFosterParentOnInsertion() {
        return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
      }
      _findFosterParentingLocation() {
        const location3 = {
          parent: null,
          beforeElement: null
        };
        for (let i = this.openElements.stackTop; i >= 0; i--) {
          const openElement = this.openElements.items[i];
          const tn2 = this.treeAdapter.getTagName(openElement);
          const ns = this.treeAdapter.getNamespaceURI(openElement);
          if (tn2 === $2.TEMPLATE && ns === NS.HTML) {
            location3.parent = this.treeAdapter.getTemplateContent(openElement);
            break;
          } else if (tn2 === $2.TABLE) {
            location3.parent = this.treeAdapter.getParentNode(openElement);
            if (location3.parent) {
              location3.beforeElement = openElement;
            } else {
              location3.parent = this.openElements.items[i - 1];
            }
            break;
          }
        }
        if (!location3.parent) {
          location3.parent = this.openElements.items[0];
        }
        return location3;
      }
      _fosterParentElement(element7) {
        const location3 = this._findFosterParentingLocation();
        if (location3.beforeElement) {
          this.treeAdapter.insertBefore(location3.parent, element7, location3.beforeElement);
        } else {
          this.treeAdapter.appendChild(location3.parent, element7);
        }
      }
      _fosterParentText(chars2) {
        const location3 = this._findFosterParentingLocation();
        if (location3.beforeElement) {
          this.treeAdapter.insertTextBefore(location3.parent, chars2, location3.beforeElement);
        } else {
          this.treeAdapter.insertText(location3.parent, chars2);
        }
      }
      //Special elements
      _isSpecialElement(element7) {
        const tn2 = this.treeAdapter.getTagName(element7);
        const ns = this.treeAdapter.getNamespaceURI(element7);
        return HTML.SPECIAL_ELEMENTS[ns][tn2];
      }
    };
    module.exports = Parser;
    function aaObtainFormattingElementEntry(p5, token2) {
      let formattingElementEntry = p5.activeFormattingElements.getElementEntryInScopeWithTagName(token2.tagName);
      if (formattingElementEntry) {
        if (!p5.openElements.contains(formattingElementEntry.element)) {
          p5.activeFormattingElements.removeEntry(formattingElementEntry);
          formattingElementEntry = null;
        } else if (!p5.openElements.hasInScope(token2.tagName)) {
          formattingElementEntry = null;
        }
      } else {
        genericEndTagInBody(p5, token2);
      }
      return formattingElementEntry;
    }
    function aaObtainFurthestBlock(p5, formattingElementEntry) {
      let furthestBlock = null;
      for (let i = p5.openElements.stackTop; i >= 0; i--) {
        const element7 = p5.openElements.items[i];
        if (element7 === formattingElementEntry.element) {
          break;
        }
        if (p5._isSpecialElement(element7)) {
          furthestBlock = element7;
        }
      }
      if (!furthestBlock) {
        p5.openElements.popUntilElementPopped(formattingElementEntry.element);
        p5.activeFormattingElements.removeEntry(formattingElementEntry);
      }
      return furthestBlock;
    }
    function aaInnerLoop(p5, furthestBlock, formattingElement) {
      let lastElement = furthestBlock;
      let nextElement = p5.openElements.getCommonAncestor(furthestBlock);
      for (let i = 0, element7 = nextElement; element7 !== formattingElement; i++, element7 = nextElement) {
        nextElement = p5.openElements.getCommonAncestor(element7);
        const elementEntry = p5.activeFormattingElements.getElementEntry(element7);
        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
        if (shouldRemoveFromOpenElements) {
          if (counterOverflow) {
            p5.activeFormattingElements.removeEntry(elementEntry);
          }
          p5.openElements.remove(element7);
        } else {
          element7 = aaRecreateElementFromEntry(p5, elementEntry);
          if (lastElement === furthestBlock) {
            p5.activeFormattingElements.bookmark = elementEntry;
          }
          p5.treeAdapter.detachNode(lastElement);
          p5.treeAdapter.appendChild(element7, lastElement);
          lastElement = element7;
        }
      }
      return lastElement;
    }
    function aaRecreateElementFromEntry(p5, elementEntry) {
      const ns = p5.treeAdapter.getNamespaceURI(elementEntry.element);
      const newElement = p5.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);
      p5.openElements.replace(elementEntry.element, newElement);
      elementEntry.element = newElement;
      return newElement;
    }
    function aaInsertLastNodeInCommonAncestor(p5, commonAncestor, lastElement) {
      if (p5._isElementCausesFosterParenting(commonAncestor)) {
        p5._fosterParentElement(lastElement);
      } else {
        const tn2 = p5.treeAdapter.getTagName(commonAncestor);
        const ns = p5.treeAdapter.getNamespaceURI(commonAncestor);
        if (tn2 === $2.TEMPLATE && ns === NS.HTML) {
          commonAncestor = p5.treeAdapter.getTemplateContent(commonAncestor);
        }
        p5.treeAdapter.appendChild(commonAncestor, lastElement);
      }
    }
    function aaReplaceFormattingElement(p5, furthestBlock, formattingElementEntry) {
      const ns = p5.treeAdapter.getNamespaceURI(formattingElementEntry.element);
      const token2 = formattingElementEntry.token;
      const newElement = p5.treeAdapter.createElement(token2.tagName, ns, token2.attrs);
      p5._adoptNodes(furthestBlock, newElement);
      p5.treeAdapter.appendChild(furthestBlock, newElement);
      p5.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
      p5.activeFormattingElements.removeEntry(formattingElementEntry);
      p5.openElements.remove(formattingElementEntry.element);
      p5.openElements.insertAfter(furthestBlock, newElement);
    }
    function callAdoptionAgency(p5, token2) {
      let formattingElementEntry;
      for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
        formattingElementEntry = aaObtainFormattingElementEntry(p5, token2, formattingElementEntry);
        if (!formattingElementEntry) {
          break;
        }
        const furthestBlock = aaObtainFurthestBlock(p5, formattingElementEntry);
        if (!furthestBlock) {
          break;
        }
        p5.activeFormattingElements.bookmark = formattingElementEntry;
        const lastElement = aaInnerLoop(p5, furthestBlock, formattingElementEntry.element);
        const commonAncestor = p5.openElements.getCommonAncestor(formattingElementEntry.element);
        p5.treeAdapter.detachNode(lastElement);
        aaInsertLastNodeInCommonAncestor(p5, commonAncestor, lastElement);
        aaReplaceFormattingElement(p5, furthestBlock, formattingElementEntry);
      }
    }
    function ignoreToken() {
    }
    function misplacedDoctype(p5) {
      p5._err(ERR.misplacedDoctype);
    }
    function appendComment(p5, token2) {
      p5._appendCommentNode(token2, p5.openElements.currentTmplContent || p5.openElements.current);
    }
    function appendCommentToRootHtmlElement(p5, token2) {
      p5._appendCommentNode(token2, p5.openElements.items[0]);
    }
    function appendCommentToDocument(p5, token2) {
      p5._appendCommentNode(token2, p5.document);
    }
    function insertCharacters(p5, token2) {
      p5._insertCharacters(token2);
    }
    function stopParsing(p5) {
      p5.stopped = true;
    }
    function doctypeInInitialMode(p5, token2) {
      p5._setDocumentType(token2);
      const mode = token2.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype3.getDocumentMode(token2);
      if (!doctype3.isConforming(token2)) {
        p5._err(ERR.nonConformingDoctype);
      }
      p5.treeAdapter.setDocumentMode(p5.document, mode);
      p5.insertionMode = BEFORE_HTML_MODE;
    }
    function tokenInInitialMode(p5, token2) {
      p5._err(ERR.missingDoctype, { beforeToken: true });
      p5.treeAdapter.setDocumentMode(p5.document, HTML.DOCUMENT_MODE.QUIRKS);
      p5.insertionMode = BEFORE_HTML_MODE;
      p5._processToken(token2);
    }
    function startTagBeforeHtml(p5, token2) {
      if (token2.tagName === $2.HTML) {
        p5._insertElement(token2, NS.HTML);
        p5.insertionMode = BEFORE_HEAD_MODE;
      } else {
        tokenBeforeHtml(p5, token2);
      }
    }
    function endTagBeforeHtml(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML || tn2 === $2.HEAD || tn2 === $2.BODY || tn2 === $2.BR) {
        tokenBeforeHtml(p5, token2);
      }
    }
    function tokenBeforeHtml(p5, token2) {
      p5._insertFakeRootElement();
      p5.insertionMode = BEFORE_HEAD_MODE;
      p5._processToken(token2);
    }
    function startTagBeforeHead(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.HEAD) {
        p5._insertElement(token2, NS.HTML);
        p5.headElement = p5.openElements.current;
        p5.insertionMode = IN_HEAD_MODE;
      } else {
        tokenBeforeHead(p5, token2);
      }
    }
    function endTagBeforeHead(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HEAD || tn2 === $2.BODY || tn2 === $2.HTML || tn2 === $2.BR) {
        tokenBeforeHead(p5, token2);
      } else {
        p5._err(ERR.endTagWithoutMatchingOpenElement);
      }
    }
    function tokenBeforeHead(p5, token2) {
      p5._insertFakeElement($2.HEAD);
      p5.headElement = p5.openElements.current;
      p5.insertionMode = IN_HEAD_MODE;
      p5._processToken(token2);
    }
    function startTagInHead(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.BASE || tn2 === $2.BASEFONT || tn2 === $2.BGSOUND || tn2 === $2.LINK || tn2 === $2.META) {
        p5._appendElement(token2, NS.HTML);
        token2.ackSelfClosing = true;
      } else if (tn2 === $2.TITLE) {
        p5._switchToTextParsing(token2, Tokenizer.MODE.RCDATA);
      } else if (tn2 === $2.NOSCRIPT) {
        if (p5.options.scriptingEnabled) {
          p5._switchToTextParsing(token2, Tokenizer.MODE.RAWTEXT);
        } else {
          p5._insertElement(token2, NS.HTML);
          p5.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
        }
      } else if (tn2 === $2.NOFRAMES || tn2 === $2.STYLE) {
        p5._switchToTextParsing(token2, Tokenizer.MODE.RAWTEXT);
      } else if (tn2 === $2.SCRIPT) {
        p5._switchToTextParsing(token2, Tokenizer.MODE.SCRIPT_DATA);
      } else if (tn2 === $2.TEMPLATE) {
        p5._insertTemplate(token2, NS.HTML);
        p5.activeFormattingElements.insertMarker();
        p5.framesetOk = false;
        p5.insertionMode = IN_TEMPLATE_MODE;
        p5._pushTmplInsertionMode(IN_TEMPLATE_MODE);
      } else if (tn2 === $2.HEAD) {
        p5._err(ERR.misplacedStartTagForHeadElement);
      } else {
        tokenInHead(p5, token2);
      }
    }
    function endTagInHead(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HEAD) {
        p5.openElements.pop();
        p5.insertionMode = AFTER_HEAD_MODE;
      } else if (tn2 === $2.BODY || tn2 === $2.BR || tn2 === $2.HTML) {
        tokenInHead(p5, token2);
      } else if (tn2 === $2.TEMPLATE) {
        if (p5.openElements.tmplCount > 0) {
          p5.openElements.generateImpliedEndTagsThoroughly();
          if (p5.openElements.currentTagName !== $2.TEMPLATE) {
            p5._err(ERR.closingOfElementWithOpenChildElements);
          }
          p5.openElements.popUntilTagNamePopped($2.TEMPLATE);
          p5.activeFormattingElements.clearToLastMarker();
          p5._popTmplInsertionMode();
          p5._resetInsertionMode();
        } else {
          p5._err(ERR.endTagWithoutMatchingOpenElement);
        }
      } else {
        p5._err(ERR.endTagWithoutMatchingOpenElement);
      }
    }
    function tokenInHead(p5, token2) {
      p5.openElements.pop();
      p5.insertionMode = AFTER_HEAD_MODE;
      p5._processToken(token2);
    }
    function startTagInHeadNoScript(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.BASEFONT || tn2 === $2.BGSOUND || tn2 === $2.HEAD || tn2 === $2.LINK || tn2 === $2.META || tn2 === $2.NOFRAMES || tn2 === $2.STYLE) {
        startTagInHead(p5, token2);
      } else if (tn2 === $2.NOSCRIPT) {
        p5._err(ERR.nestedNoscriptInHead);
      } else {
        tokenInHeadNoScript(p5, token2);
      }
    }
    function endTagInHeadNoScript(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.NOSCRIPT) {
        p5.openElements.pop();
        p5.insertionMode = IN_HEAD_MODE;
      } else if (tn2 === $2.BR) {
        tokenInHeadNoScript(p5, token2);
      } else {
        p5._err(ERR.endTagWithoutMatchingOpenElement);
      }
    }
    function tokenInHeadNoScript(p5, token2) {
      const errCode = token2.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;
      p5._err(errCode);
      p5.openElements.pop();
      p5.insertionMode = IN_HEAD_MODE;
      p5._processToken(token2);
    }
    function startTagAfterHead(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.BODY) {
        p5._insertElement(token2, NS.HTML);
        p5.framesetOk = false;
        p5.insertionMode = IN_BODY_MODE;
      } else if (tn2 === $2.FRAMESET) {
        p5._insertElement(token2, NS.HTML);
        p5.insertionMode = IN_FRAMESET_MODE;
      } else if (tn2 === $2.BASE || tn2 === $2.BASEFONT || tn2 === $2.BGSOUND || tn2 === $2.LINK || tn2 === $2.META || tn2 === $2.NOFRAMES || tn2 === $2.SCRIPT || tn2 === $2.STYLE || tn2 === $2.TEMPLATE || tn2 === $2.TITLE) {
        p5._err(ERR.abandonedHeadElementChild);
        p5.openElements.push(p5.headElement);
        startTagInHead(p5, token2);
        p5.openElements.remove(p5.headElement);
      } else if (tn2 === $2.HEAD) {
        p5._err(ERR.misplacedStartTagForHeadElement);
      } else {
        tokenAfterHead(p5, token2);
      }
    }
    function endTagAfterHead(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.BODY || tn2 === $2.HTML || tn2 === $2.BR) {
        tokenAfterHead(p5, token2);
      } else if (tn2 === $2.TEMPLATE) {
        endTagInHead(p5, token2);
      } else {
        p5._err(ERR.endTagWithoutMatchingOpenElement);
      }
    }
    function tokenAfterHead(p5, token2) {
      p5._insertFakeElement($2.BODY);
      p5.insertionMode = IN_BODY_MODE;
      p5._processToken(token2);
    }
    function whitespaceCharacterInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      p5._insertCharacters(token2);
    }
    function characterInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      p5._insertCharacters(token2);
      p5.framesetOk = false;
    }
    function htmlStartTagInBody(p5, token2) {
      if (p5.openElements.tmplCount === 0) {
        p5.treeAdapter.adoptAttributes(p5.openElements.items[0], token2.attrs);
      }
    }
    function bodyStartTagInBody(p5, token2) {
      const bodyElement = p5.openElements.tryPeekProperlyNestedBodyElement();
      if (bodyElement && p5.openElements.tmplCount === 0) {
        p5.framesetOk = false;
        p5.treeAdapter.adoptAttributes(bodyElement, token2.attrs);
      }
    }
    function framesetStartTagInBody(p5, token2) {
      const bodyElement = p5.openElements.tryPeekProperlyNestedBodyElement();
      if (p5.framesetOk && bodyElement) {
        p5.treeAdapter.detachNode(bodyElement);
        p5.openElements.popAllUpToHtmlElement();
        p5._insertElement(token2, NS.HTML);
        p5.insertionMode = IN_FRAMESET_MODE;
      }
    }
    function addressStartTagInBody(p5, token2) {
      if (p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      p5._insertElement(token2, NS.HTML);
    }
    function numberedHeaderStartTagInBody(p5, token2) {
      if (p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      const tn2 = p5.openElements.currentTagName;
      if (tn2 === $2.H1 || tn2 === $2.H2 || tn2 === $2.H3 || tn2 === $2.H4 || tn2 === $2.H5 || tn2 === $2.H6) {
        p5.openElements.pop();
      }
      p5._insertElement(token2, NS.HTML);
    }
    function preStartTagInBody(p5, token2) {
      if (p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      p5._insertElement(token2, NS.HTML);
      p5.skipNextNewLine = true;
      p5.framesetOk = false;
    }
    function formStartTagInBody(p5, token2) {
      const inTemplate = p5.openElements.tmplCount > 0;
      if (!p5.formElement || inTemplate) {
        if (p5.openElements.hasInButtonScope($2.P)) {
          p5._closePElement();
        }
        p5._insertElement(token2, NS.HTML);
        if (!inTemplate) {
          p5.formElement = p5.openElements.current;
        }
      }
    }
    function listItemStartTagInBody(p5, token2) {
      p5.framesetOk = false;
      const tn2 = token2.tagName;
      for (let i = p5.openElements.stackTop; i >= 0; i--) {
        const element7 = p5.openElements.items[i];
        const elementTn = p5.treeAdapter.getTagName(element7);
        let closeTn = null;
        if (tn2 === $2.LI && elementTn === $2.LI) {
          closeTn = $2.LI;
        } else if ((tn2 === $2.DD || tn2 === $2.DT) && (elementTn === $2.DD || elementTn === $2.DT)) {
          closeTn = elementTn;
        }
        if (closeTn) {
          p5.openElements.generateImpliedEndTagsWithExclusion(closeTn);
          p5.openElements.popUntilTagNamePopped(closeTn);
          break;
        }
        if (elementTn !== $2.ADDRESS && elementTn !== $2.DIV && elementTn !== $2.P && p5._isSpecialElement(element7)) {
          break;
        }
      }
      if (p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      p5._insertElement(token2, NS.HTML);
    }
    function plaintextStartTagInBody(p5, token2) {
      if (p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      p5._insertElement(token2, NS.HTML);
      p5.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
    }
    function buttonStartTagInBody(p5, token2) {
      if (p5.openElements.hasInScope($2.BUTTON)) {
        p5.openElements.generateImpliedEndTags();
        p5.openElements.popUntilTagNamePopped($2.BUTTON);
      }
      p5._reconstructActiveFormattingElements();
      p5._insertElement(token2, NS.HTML);
      p5.framesetOk = false;
    }
    function aStartTagInBody(p5, token2) {
      const activeElementEntry = p5.activeFormattingElements.getElementEntryInScopeWithTagName($2.A);
      if (activeElementEntry) {
        callAdoptionAgency(p5, token2);
        p5.openElements.remove(activeElementEntry.element);
        p5.activeFormattingElements.removeEntry(activeElementEntry);
      }
      p5._reconstructActiveFormattingElements();
      p5._insertElement(token2, NS.HTML);
      p5.activeFormattingElements.pushElement(p5.openElements.current, token2);
    }
    function bStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      p5._insertElement(token2, NS.HTML);
      p5.activeFormattingElements.pushElement(p5.openElements.current, token2);
    }
    function nobrStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      if (p5.openElements.hasInScope($2.NOBR)) {
        callAdoptionAgency(p5, token2);
        p5._reconstructActiveFormattingElements();
      }
      p5._insertElement(token2, NS.HTML);
      p5.activeFormattingElements.pushElement(p5.openElements.current, token2);
    }
    function appletStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      p5._insertElement(token2, NS.HTML);
      p5.activeFormattingElements.insertMarker();
      p5.framesetOk = false;
    }
    function tableStartTagInBody(p5, token2) {
      if (p5.treeAdapter.getDocumentMode(p5.document) !== HTML.DOCUMENT_MODE.QUIRKS && p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      p5._insertElement(token2, NS.HTML);
      p5.framesetOk = false;
      p5.insertionMode = IN_TABLE_MODE;
    }
    function areaStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      p5._appendElement(token2, NS.HTML);
      p5.framesetOk = false;
      token2.ackSelfClosing = true;
    }
    function inputStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      p5._appendElement(token2, NS.HTML);
      const inputType = Tokenizer.getTokenAttr(token2, ATTRS.TYPE);
      if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
        p5.framesetOk = false;
      }
      token2.ackSelfClosing = true;
    }
    function paramStartTagInBody(p5, token2) {
      p5._appendElement(token2, NS.HTML);
      token2.ackSelfClosing = true;
    }
    function hrStartTagInBody(p5, token2) {
      if (p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      p5._appendElement(token2, NS.HTML);
      p5.framesetOk = false;
      token2.ackSelfClosing = true;
    }
    function imageStartTagInBody(p5, token2) {
      token2.tagName = $2.IMG;
      areaStartTagInBody(p5, token2);
    }
    function textareaStartTagInBody(p5, token2) {
      p5._insertElement(token2, NS.HTML);
      p5.skipNextNewLine = true;
      p5.tokenizer.state = Tokenizer.MODE.RCDATA;
      p5.originalInsertionMode = p5.insertionMode;
      p5.framesetOk = false;
      p5.insertionMode = TEXT_MODE;
    }
    function xmpStartTagInBody(p5, token2) {
      if (p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      p5._reconstructActiveFormattingElements();
      p5.framesetOk = false;
      p5._switchToTextParsing(token2, Tokenizer.MODE.RAWTEXT);
    }
    function iframeStartTagInBody(p5, token2) {
      p5.framesetOk = false;
      p5._switchToTextParsing(token2, Tokenizer.MODE.RAWTEXT);
    }
    function noembedStartTagInBody(p5, token2) {
      p5._switchToTextParsing(token2, Tokenizer.MODE.RAWTEXT);
    }
    function selectStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      p5._insertElement(token2, NS.HTML);
      p5.framesetOk = false;
      if (p5.insertionMode === IN_TABLE_MODE || p5.insertionMode === IN_CAPTION_MODE || p5.insertionMode === IN_TABLE_BODY_MODE || p5.insertionMode === IN_ROW_MODE || p5.insertionMode === IN_CELL_MODE) {
        p5.insertionMode = IN_SELECT_IN_TABLE_MODE;
      } else {
        p5.insertionMode = IN_SELECT_MODE;
      }
    }
    function optgroupStartTagInBody(p5, token2) {
      if (p5.openElements.currentTagName === $2.OPTION) {
        p5.openElements.pop();
      }
      p5._reconstructActiveFormattingElements();
      p5._insertElement(token2, NS.HTML);
    }
    function rbStartTagInBody(p5, token2) {
      if (p5.openElements.hasInScope($2.RUBY)) {
        p5.openElements.generateImpliedEndTags();
      }
      p5._insertElement(token2, NS.HTML);
    }
    function rtStartTagInBody(p5, token2) {
      if (p5.openElements.hasInScope($2.RUBY)) {
        p5.openElements.generateImpliedEndTagsWithExclusion($2.RTC);
      }
      p5._insertElement(token2, NS.HTML);
    }
    function menuStartTagInBody(p5, token2) {
      if (p5.openElements.hasInButtonScope($2.P)) {
        p5._closePElement();
      }
      p5._insertElement(token2, NS.HTML);
    }
    function mathStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      foreignContent.adjustTokenMathMLAttrs(token2);
      foreignContent.adjustTokenXMLAttrs(token2);
      if (token2.selfClosing) {
        p5._appendElement(token2, NS.MATHML);
      } else {
        p5._insertElement(token2, NS.MATHML);
      }
      token2.ackSelfClosing = true;
    }
    function svgStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      foreignContent.adjustTokenSVGAttrs(token2);
      foreignContent.adjustTokenXMLAttrs(token2);
      if (token2.selfClosing) {
        p5._appendElement(token2, NS.SVG);
      } else {
        p5._insertElement(token2, NS.SVG);
      }
      token2.ackSelfClosing = true;
    }
    function genericStartTagInBody(p5, token2) {
      p5._reconstructActiveFormattingElements();
      p5._insertElement(token2, NS.HTML);
    }
    function startTagInBody(p5, token2) {
      const tn2 = token2.tagName;
      switch (tn2.length) {
        case 1:
          if (tn2 === $2.I || tn2 === $2.S || tn2 === $2.B || tn2 === $2.U) {
            bStartTagInBody(p5, token2);
          } else if (tn2 === $2.P) {
            addressStartTagInBody(p5, token2);
          } else if (tn2 === $2.A) {
            aStartTagInBody(p5, token2);
          } else {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 2:
          if (tn2 === $2.DL || tn2 === $2.OL || tn2 === $2.UL) {
            addressStartTagInBody(p5, token2);
          } else if (tn2 === $2.H1 || tn2 === $2.H2 || tn2 === $2.H3 || tn2 === $2.H4 || tn2 === $2.H5 || tn2 === $2.H6) {
            numberedHeaderStartTagInBody(p5, token2);
          } else if (tn2 === $2.LI || tn2 === $2.DD || tn2 === $2.DT) {
            listItemStartTagInBody(p5, token2);
          } else if (tn2 === $2.EM || tn2 === $2.TT) {
            bStartTagInBody(p5, token2);
          } else if (tn2 === $2.BR) {
            areaStartTagInBody(p5, token2);
          } else if (tn2 === $2.HR) {
            hrStartTagInBody(p5, token2);
          } else if (tn2 === $2.RB) {
            rbStartTagInBody(p5, token2);
          } else if (tn2 === $2.RT || tn2 === $2.RP) {
            rtStartTagInBody(p5, token2);
          } else if (tn2 !== $2.TH && tn2 !== $2.TD && tn2 !== $2.TR) {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 3:
          if (tn2 === $2.DIV || tn2 === $2.DIR || tn2 === $2.NAV) {
            addressStartTagInBody(p5, token2);
          } else if (tn2 === $2.PRE) {
            preStartTagInBody(p5, token2);
          } else if (tn2 === $2.BIG) {
            bStartTagInBody(p5, token2);
          } else if (tn2 === $2.IMG || tn2 === $2.WBR) {
            areaStartTagInBody(p5, token2);
          } else if (tn2 === $2.XMP) {
            xmpStartTagInBody(p5, token2);
          } else if (tn2 === $2.SVG) {
            svgStartTagInBody(p5, token2);
          } else if (tn2 === $2.RTC) {
            rbStartTagInBody(p5, token2);
          } else if (tn2 !== $2.COL) {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 4:
          if (tn2 === $2.HTML) {
            htmlStartTagInBody(p5, token2);
          } else if (tn2 === $2.BASE || tn2 === $2.LINK || tn2 === $2.META) {
            startTagInHead(p5, token2);
          } else if (tn2 === $2.BODY) {
            bodyStartTagInBody(p5, token2);
          } else if (tn2 === $2.MAIN || tn2 === $2.MENU) {
            addressStartTagInBody(p5, token2);
          } else if (tn2 === $2.FORM) {
            formStartTagInBody(p5, token2);
          } else if (tn2 === $2.CODE || tn2 === $2.FONT) {
            bStartTagInBody(p5, token2);
          } else if (tn2 === $2.NOBR) {
            nobrStartTagInBody(p5, token2);
          } else if (tn2 === $2.AREA) {
            areaStartTagInBody(p5, token2);
          } else if (tn2 === $2.MATH) {
            mathStartTagInBody(p5, token2);
          } else if (tn2 === $2.MENU) {
            menuStartTagInBody(p5, token2);
          } else if (tn2 !== $2.HEAD) {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 5:
          if (tn2 === $2.STYLE || tn2 === $2.TITLE) {
            startTagInHead(p5, token2);
          } else if (tn2 === $2.ASIDE) {
            addressStartTagInBody(p5, token2);
          } else if (tn2 === $2.SMALL) {
            bStartTagInBody(p5, token2);
          } else if (tn2 === $2.TABLE) {
            tableStartTagInBody(p5, token2);
          } else if (tn2 === $2.EMBED) {
            areaStartTagInBody(p5, token2);
          } else if (tn2 === $2.INPUT) {
            inputStartTagInBody(p5, token2);
          } else if (tn2 === $2.PARAM || tn2 === $2.TRACK) {
            paramStartTagInBody(p5, token2);
          } else if (tn2 === $2.IMAGE) {
            imageStartTagInBody(p5, token2);
          } else if (tn2 !== $2.FRAME && tn2 !== $2.TBODY && tn2 !== $2.TFOOT && tn2 !== $2.THEAD) {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 6:
          if (tn2 === $2.SCRIPT) {
            startTagInHead(p5, token2);
          } else if (tn2 === $2.CENTER || tn2 === $2.FIGURE || tn2 === $2.FOOTER || tn2 === $2.HEADER || tn2 === $2.HGROUP || tn2 === $2.DIALOG) {
            addressStartTagInBody(p5, token2);
          } else if (tn2 === $2.BUTTON) {
            buttonStartTagInBody(p5, token2);
          } else if (tn2 === $2.STRIKE || tn2 === $2.STRONG) {
            bStartTagInBody(p5, token2);
          } else if (tn2 === $2.APPLET || tn2 === $2.OBJECT) {
            appletStartTagInBody(p5, token2);
          } else if (tn2 === $2.KEYGEN) {
            areaStartTagInBody(p5, token2);
          } else if (tn2 === $2.SOURCE) {
            paramStartTagInBody(p5, token2);
          } else if (tn2 === $2.IFRAME) {
            iframeStartTagInBody(p5, token2);
          } else if (tn2 === $2.SELECT) {
            selectStartTagInBody(p5, token2);
          } else if (tn2 === $2.OPTION) {
            optgroupStartTagInBody(p5, token2);
          } else {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 7:
          if (tn2 === $2.BGSOUND) {
            startTagInHead(p5, token2);
          } else if (tn2 === $2.DETAILS || tn2 === $2.ADDRESS || tn2 === $2.ARTICLE || tn2 === $2.SECTION || tn2 === $2.SUMMARY) {
            addressStartTagInBody(p5, token2);
          } else if (tn2 === $2.LISTING) {
            preStartTagInBody(p5, token2);
          } else if (tn2 === $2.MARQUEE) {
            appletStartTagInBody(p5, token2);
          } else if (tn2 === $2.NOEMBED) {
            noembedStartTagInBody(p5, token2);
          } else if (tn2 !== $2.CAPTION) {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 8:
          if (tn2 === $2.BASEFONT) {
            startTagInHead(p5, token2);
          } else if (tn2 === $2.FRAMESET) {
            framesetStartTagInBody(p5, token2);
          } else if (tn2 === $2.FIELDSET) {
            addressStartTagInBody(p5, token2);
          } else if (tn2 === $2.TEXTAREA) {
            textareaStartTagInBody(p5, token2);
          } else if (tn2 === $2.TEMPLATE) {
            startTagInHead(p5, token2);
          } else if (tn2 === $2.NOSCRIPT) {
            if (p5.options.scriptingEnabled) {
              noembedStartTagInBody(p5, token2);
            } else {
              genericStartTagInBody(p5, token2);
            }
          } else if (tn2 === $2.OPTGROUP) {
            optgroupStartTagInBody(p5, token2);
          } else if (tn2 !== $2.COLGROUP) {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 9:
          if (tn2 === $2.PLAINTEXT) {
            plaintextStartTagInBody(p5, token2);
          } else {
            genericStartTagInBody(p5, token2);
          }
          break;
        case 10:
          if (tn2 === $2.BLOCKQUOTE || tn2 === $2.FIGCAPTION) {
            addressStartTagInBody(p5, token2);
          } else {
            genericStartTagInBody(p5, token2);
          }
          break;
        default:
          genericStartTagInBody(p5, token2);
      }
    }
    function bodyEndTagInBody(p5) {
      if (p5.openElements.hasInScope($2.BODY)) {
        p5.insertionMode = AFTER_BODY_MODE;
      }
    }
    function htmlEndTagInBody(p5, token2) {
      if (p5.openElements.hasInScope($2.BODY)) {
        p5.insertionMode = AFTER_BODY_MODE;
        p5._processToken(token2);
      }
    }
    function addressEndTagInBody(p5, token2) {
      const tn2 = token2.tagName;
      if (p5.openElements.hasInScope(tn2)) {
        p5.openElements.generateImpliedEndTags();
        p5.openElements.popUntilTagNamePopped(tn2);
      }
    }
    function formEndTagInBody(p5) {
      const inTemplate = p5.openElements.tmplCount > 0;
      const formElement = p5.formElement;
      if (!inTemplate) {
        p5.formElement = null;
      }
      if ((formElement || inTemplate) && p5.openElements.hasInScope($2.FORM)) {
        p5.openElements.generateImpliedEndTags();
        if (inTemplate) {
          p5.openElements.popUntilTagNamePopped($2.FORM);
        } else {
          p5.openElements.remove(formElement);
        }
      }
    }
    function pEndTagInBody(p5) {
      if (!p5.openElements.hasInButtonScope($2.P)) {
        p5._insertFakeElement($2.P);
      }
      p5._closePElement();
    }
    function liEndTagInBody(p5) {
      if (p5.openElements.hasInListItemScope($2.LI)) {
        p5.openElements.generateImpliedEndTagsWithExclusion($2.LI);
        p5.openElements.popUntilTagNamePopped($2.LI);
      }
    }
    function ddEndTagInBody(p5, token2) {
      const tn2 = token2.tagName;
      if (p5.openElements.hasInScope(tn2)) {
        p5.openElements.generateImpliedEndTagsWithExclusion(tn2);
        p5.openElements.popUntilTagNamePopped(tn2);
      }
    }
    function numberedHeaderEndTagInBody(p5) {
      if (p5.openElements.hasNumberedHeaderInScope()) {
        p5.openElements.generateImpliedEndTags();
        p5.openElements.popUntilNumberedHeaderPopped();
      }
    }
    function appletEndTagInBody(p5, token2) {
      const tn2 = token2.tagName;
      if (p5.openElements.hasInScope(tn2)) {
        p5.openElements.generateImpliedEndTags();
        p5.openElements.popUntilTagNamePopped(tn2);
        p5.activeFormattingElements.clearToLastMarker();
      }
    }
    function brEndTagInBody(p5) {
      p5._reconstructActiveFormattingElements();
      p5._insertFakeElement($2.BR);
      p5.openElements.pop();
      p5.framesetOk = false;
    }
    function genericEndTagInBody(p5, token2) {
      const tn2 = token2.tagName;
      for (let i = p5.openElements.stackTop; i > 0; i--) {
        const element7 = p5.openElements.items[i];
        if (p5.treeAdapter.getTagName(element7) === tn2) {
          p5.openElements.generateImpliedEndTagsWithExclusion(tn2);
          p5.openElements.popUntilElementPopped(element7);
          break;
        }
        if (p5._isSpecialElement(element7)) {
          break;
        }
      }
    }
    function endTagInBody(p5, token2) {
      const tn2 = token2.tagName;
      switch (tn2.length) {
        case 1:
          if (tn2 === $2.A || tn2 === $2.B || tn2 === $2.I || tn2 === $2.S || tn2 === $2.U) {
            callAdoptionAgency(p5, token2);
          } else if (tn2 === $2.P) {
            pEndTagInBody(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        case 2:
          if (tn2 === $2.DL || tn2 === $2.UL || tn2 === $2.OL) {
            addressEndTagInBody(p5, token2);
          } else if (tn2 === $2.LI) {
            liEndTagInBody(p5, token2);
          } else if (tn2 === $2.DD || tn2 === $2.DT) {
            ddEndTagInBody(p5, token2);
          } else if (tn2 === $2.H1 || tn2 === $2.H2 || tn2 === $2.H3 || tn2 === $2.H4 || tn2 === $2.H5 || tn2 === $2.H6) {
            numberedHeaderEndTagInBody(p5, token2);
          } else if (tn2 === $2.BR) {
            brEndTagInBody(p5, token2);
          } else if (tn2 === $2.EM || tn2 === $2.TT) {
            callAdoptionAgency(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        case 3:
          if (tn2 === $2.BIG) {
            callAdoptionAgency(p5, token2);
          } else if (tn2 === $2.DIR || tn2 === $2.DIV || tn2 === $2.NAV || tn2 === $2.PRE) {
            addressEndTagInBody(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        case 4:
          if (tn2 === $2.BODY) {
            bodyEndTagInBody(p5, token2);
          } else if (tn2 === $2.HTML) {
            htmlEndTagInBody(p5, token2);
          } else if (tn2 === $2.FORM) {
            formEndTagInBody(p5, token2);
          } else if (tn2 === $2.CODE || tn2 === $2.FONT || tn2 === $2.NOBR) {
            callAdoptionAgency(p5, token2);
          } else if (tn2 === $2.MAIN || tn2 === $2.MENU) {
            addressEndTagInBody(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        case 5:
          if (tn2 === $2.ASIDE) {
            addressEndTagInBody(p5, token2);
          } else if (tn2 === $2.SMALL) {
            callAdoptionAgency(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        case 6:
          if (tn2 === $2.CENTER || tn2 === $2.FIGURE || tn2 === $2.FOOTER || tn2 === $2.HEADER || tn2 === $2.HGROUP || tn2 === $2.DIALOG) {
            addressEndTagInBody(p5, token2);
          } else if (tn2 === $2.APPLET || tn2 === $2.OBJECT) {
            appletEndTagInBody(p5, token2);
          } else if (tn2 === $2.STRIKE || tn2 === $2.STRONG) {
            callAdoptionAgency(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        case 7:
          if (tn2 === $2.ADDRESS || tn2 === $2.ARTICLE || tn2 === $2.DETAILS || tn2 === $2.SECTION || tn2 === $2.SUMMARY || tn2 === $2.LISTING) {
            addressEndTagInBody(p5, token2);
          } else if (tn2 === $2.MARQUEE) {
            appletEndTagInBody(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        case 8:
          if (tn2 === $2.FIELDSET) {
            addressEndTagInBody(p5, token2);
          } else if (tn2 === $2.TEMPLATE) {
            endTagInHead(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        case 10:
          if (tn2 === $2.BLOCKQUOTE || tn2 === $2.FIGCAPTION) {
            addressEndTagInBody(p5, token2);
          } else {
            genericEndTagInBody(p5, token2);
          }
          break;
        default:
          genericEndTagInBody(p5, token2);
      }
    }
    function eofInBody(p5, token2) {
      if (p5.tmplInsertionModeStackTop > -1) {
        eofInTemplate(p5, token2);
      } else {
        p5.stopped = true;
      }
    }
    function endTagInText(p5, token2) {
      if (token2.tagName === $2.SCRIPT) {
        p5.pendingScript = p5.openElements.current;
      }
      p5.openElements.pop();
      p5.insertionMode = p5.originalInsertionMode;
    }
    function eofInText(p5, token2) {
      p5._err(ERR.eofInElementThatCanContainOnlyText);
      p5.openElements.pop();
      p5.insertionMode = p5.originalInsertionMode;
      p5._processToken(token2);
    }
    function characterInTable(p5, token2) {
      const curTn = p5.openElements.currentTagName;
      if (curTn === $2.TABLE || curTn === $2.TBODY || curTn === $2.TFOOT || curTn === $2.THEAD || curTn === $2.TR) {
        p5.pendingCharacterTokens = [];
        p5.hasNonWhitespacePendingCharacterToken = false;
        p5.originalInsertionMode = p5.insertionMode;
        p5.insertionMode = IN_TABLE_TEXT_MODE;
        p5._processToken(token2);
      } else {
        tokenInTable(p5, token2);
      }
    }
    function captionStartTagInTable(p5, token2) {
      p5.openElements.clearBackToTableContext();
      p5.activeFormattingElements.insertMarker();
      p5._insertElement(token2, NS.HTML);
      p5.insertionMode = IN_CAPTION_MODE;
    }
    function colgroupStartTagInTable(p5, token2) {
      p5.openElements.clearBackToTableContext();
      p5._insertElement(token2, NS.HTML);
      p5.insertionMode = IN_COLUMN_GROUP_MODE;
    }
    function colStartTagInTable(p5, token2) {
      p5.openElements.clearBackToTableContext();
      p5._insertFakeElement($2.COLGROUP);
      p5.insertionMode = IN_COLUMN_GROUP_MODE;
      p5._processToken(token2);
    }
    function tbodyStartTagInTable(p5, token2) {
      p5.openElements.clearBackToTableContext();
      p5._insertElement(token2, NS.HTML);
      p5.insertionMode = IN_TABLE_BODY_MODE;
    }
    function tdStartTagInTable(p5, token2) {
      p5.openElements.clearBackToTableContext();
      p5._insertFakeElement($2.TBODY);
      p5.insertionMode = IN_TABLE_BODY_MODE;
      p5._processToken(token2);
    }
    function tableStartTagInTable(p5, token2) {
      if (p5.openElements.hasInTableScope($2.TABLE)) {
        p5.openElements.popUntilTagNamePopped($2.TABLE);
        p5._resetInsertionMode();
        p5._processToken(token2);
      }
    }
    function inputStartTagInTable(p5, token2) {
      const inputType = Tokenizer.getTokenAttr(token2, ATTRS.TYPE);
      if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
        p5._appendElement(token2, NS.HTML);
      } else {
        tokenInTable(p5, token2);
      }
      token2.ackSelfClosing = true;
    }
    function formStartTagInTable(p5, token2) {
      if (!p5.formElement && p5.openElements.tmplCount === 0) {
        p5._insertElement(token2, NS.HTML);
        p5.formElement = p5.openElements.current;
        p5.openElements.pop();
      }
    }
    function startTagInTable(p5, token2) {
      const tn2 = token2.tagName;
      switch (tn2.length) {
        case 2:
          if (tn2 === $2.TD || tn2 === $2.TH || tn2 === $2.TR) {
            tdStartTagInTable(p5, token2);
          } else {
            tokenInTable(p5, token2);
          }
          break;
        case 3:
          if (tn2 === $2.COL) {
            colStartTagInTable(p5, token2);
          } else {
            tokenInTable(p5, token2);
          }
          break;
        case 4:
          if (tn2 === $2.FORM) {
            formStartTagInTable(p5, token2);
          } else {
            tokenInTable(p5, token2);
          }
          break;
        case 5:
          if (tn2 === $2.TABLE) {
            tableStartTagInTable(p5, token2);
          } else if (tn2 === $2.STYLE) {
            startTagInHead(p5, token2);
          } else if (tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD) {
            tbodyStartTagInTable(p5, token2);
          } else if (tn2 === $2.INPUT) {
            inputStartTagInTable(p5, token2);
          } else {
            tokenInTable(p5, token2);
          }
          break;
        case 6:
          if (tn2 === $2.SCRIPT) {
            startTagInHead(p5, token2);
          } else {
            tokenInTable(p5, token2);
          }
          break;
        case 7:
          if (tn2 === $2.CAPTION) {
            captionStartTagInTable(p5, token2);
          } else {
            tokenInTable(p5, token2);
          }
          break;
        case 8:
          if (tn2 === $2.COLGROUP) {
            colgroupStartTagInTable(p5, token2);
          } else if (tn2 === $2.TEMPLATE) {
            startTagInHead(p5, token2);
          } else {
            tokenInTable(p5, token2);
          }
          break;
        default:
          tokenInTable(p5, token2);
      }
    }
    function endTagInTable(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.TABLE) {
        if (p5.openElements.hasInTableScope($2.TABLE)) {
          p5.openElements.popUntilTagNamePopped($2.TABLE);
          p5._resetInsertionMode();
        }
      } else if (tn2 === $2.TEMPLATE) {
        endTagInHead(p5, token2);
      } else if (tn2 !== $2.BODY && tn2 !== $2.CAPTION && tn2 !== $2.COL && tn2 !== $2.COLGROUP && tn2 !== $2.HTML && tn2 !== $2.TBODY && tn2 !== $2.TD && tn2 !== $2.TFOOT && tn2 !== $2.TH && tn2 !== $2.THEAD && tn2 !== $2.TR) {
        tokenInTable(p5, token2);
      }
    }
    function tokenInTable(p5, token2) {
      const savedFosterParentingState = p5.fosterParentingEnabled;
      p5.fosterParentingEnabled = true;
      p5._processTokenInBodyMode(token2);
      p5.fosterParentingEnabled = savedFosterParentingState;
    }
    function whitespaceCharacterInTableText(p5, token2) {
      p5.pendingCharacterTokens.push(token2);
    }
    function characterInTableText(p5, token2) {
      p5.pendingCharacterTokens.push(token2);
      p5.hasNonWhitespacePendingCharacterToken = true;
    }
    function tokenInTableText(p5, token2) {
      let i = 0;
      if (p5.hasNonWhitespacePendingCharacterToken) {
        for (; i < p5.pendingCharacterTokens.length; i++) {
          tokenInTable(p5, p5.pendingCharacterTokens[i]);
        }
      } else {
        for (; i < p5.pendingCharacterTokens.length; i++) {
          p5._insertCharacters(p5.pendingCharacterTokens[i]);
        }
      }
      p5.insertionMode = p5.originalInsertionMode;
      p5._processToken(token2);
    }
    function startTagInCaption(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.CAPTION || tn2 === $2.COL || tn2 === $2.COLGROUP || tn2 === $2.TBODY || tn2 === $2.TD || tn2 === $2.TFOOT || tn2 === $2.TH || tn2 === $2.THEAD || tn2 === $2.TR) {
        if (p5.openElements.hasInTableScope($2.CAPTION)) {
          p5.openElements.generateImpliedEndTags();
          p5.openElements.popUntilTagNamePopped($2.CAPTION);
          p5.activeFormattingElements.clearToLastMarker();
          p5.insertionMode = IN_TABLE_MODE;
          p5._processToken(token2);
        }
      } else {
        startTagInBody(p5, token2);
      }
    }
    function endTagInCaption(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.CAPTION || tn2 === $2.TABLE) {
        if (p5.openElements.hasInTableScope($2.CAPTION)) {
          p5.openElements.generateImpliedEndTags();
          p5.openElements.popUntilTagNamePopped($2.CAPTION);
          p5.activeFormattingElements.clearToLastMarker();
          p5.insertionMode = IN_TABLE_MODE;
          if (tn2 === $2.TABLE) {
            p5._processToken(token2);
          }
        }
      } else if (tn2 !== $2.BODY && tn2 !== $2.COL && tn2 !== $2.COLGROUP && tn2 !== $2.HTML && tn2 !== $2.TBODY && tn2 !== $2.TD && tn2 !== $2.TFOOT && tn2 !== $2.TH && tn2 !== $2.THEAD && tn2 !== $2.TR) {
        endTagInBody(p5, token2);
      }
    }
    function startTagInColumnGroup(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.COL) {
        p5._appendElement(token2, NS.HTML);
        token2.ackSelfClosing = true;
      } else if (tn2 === $2.TEMPLATE) {
        startTagInHead(p5, token2);
      } else {
        tokenInColumnGroup(p5, token2);
      }
    }
    function endTagInColumnGroup(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.COLGROUP) {
        if (p5.openElements.currentTagName === $2.COLGROUP) {
          p5.openElements.pop();
          p5.insertionMode = IN_TABLE_MODE;
        }
      } else if (tn2 === $2.TEMPLATE) {
        endTagInHead(p5, token2);
      } else if (tn2 !== $2.COL) {
        tokenInColumnGroup(p5, token2);
      }
    }
    function tokenInColumnGroup(p5, token2) {
      if (p5.openElements.currentTagName === $2.COLGROUP) {
        p5.openElements.pop();
        p5.insertionMode = IN_TABLE_MODE;
        p5._processToken(token2);
      }
    }
    function startTagInTableBody(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.TR) {
        p5.openElements.clearBackToTableBodyContext();
        p5._insertElement(token2, NS.HTML);
        p5.insertionMode = IN_ROW_MODE;
      } else if (tn2 === $2.TH || tn2 === $2.TD) {
        p5.openElements.clearBackToTableBodyContext();
        p5._insertFakeElement($2.TR);
        p5.insertionMode = IN_ROW_MODE;
        p5._processToken(token2);
      } else if (tn2 === $2.CAPTION || tn2 === $2.COL || tn2 === $2.COLGROUP || tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD) {
        if (p5.openElements.hasTableBodyContextInTableScope()) {
          p5.openElements.clearBackToTableBodyContext();
          p5.openElements.pop();
          p5.insertionMode = IN_TABLE_MODE;
          p5._processToken(token2);
        }
      } else {
        startTagInTable(p5, token2);
      }
    }
    function endTagInTableBody(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD) {
        if (p5.openElements.hasInTableScope(tn2)) {
          p5.openElements.clearBackToTableBodyContext();
          p5.openElements.pop();
          p5.insertionMode = IN_TABLE_MODE;
        }
      } else if (tn2 === $2.TABLE) {
        if (p5.openElements.hasTableBodyContextInTableScope()) {
          p5.openElements.clearBackToTableBodyContext();
          p5.openElements.pop();
          p5.insertionMode = IN_TABLE_MODE;
          p5._processToken(token2);
        }
      } else if (tn2 !== $2.BODY && tn2 !== $2.CAPTION && tn2 !== $2.COL && tn2 !== $2.COLGROUP || tn2 !== $2.HTML && tn2 !== $2.TD && tn2 !== $2.TH && tn2 !== $2.TR) {
        endTagInTable(p5, token2);
      }
    }
    function startTagInRow(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.TH || tn2 === $2.TD) {
        p5.openElements.clearBackToTableRowContext();
        p5._insertElement(token2, NS.HTML);
        p5.insertionMode = IN_CELL_MODE;
        p5.activeFormattingElements.insertMarker();
      } else if (tn2 === $2.CAPTION || tn2 === $2.COL || tn2 === $2.COLGROUP || tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD || tn2 === $2.TR) {
        if (p5.openElements.hasInTableScope($2.TR)) {
          p5.openElements.clearBackToTableRowContext();
          p5.openElements.pop();
          p5.insertionMode = IN_TABLE_BODY_MODE;
          p5._processToken(token2);
        }
      } else {
        startTagInTable(p5, token2);
      }
    }
    function endTagInRow(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.TR) {
        if (p5.openElements.hasInTableScope($2.TR)) {
          p5.openElements.clearBackToTableRowContext();
          p5.openElements.pop();
          p5.insertionMode = IN_TABLE_BODY_MODE;
        }
      } else if (tn2 === $2.TABLE) {
        if (p5.openElements.hasInTableScope($2.TR)) {
          p5.openElements.clearBackToTableRowContext();
          p5.openElements.pop();
          p5.insertionMode = IN_TABLE_BODY_MODE;
          p5._processToken(token2);
        }
      } else if (tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD) {
        if (p5.openElements.hasInTableScope(tn2) || p5.openElements.hasInTableScope($2.TR)) {
          p5.openElements.clearBackToTableRowContext();
          p5.openElements.pop();
          p5.insertionMode = IN_TABLE_BODY_MODE;
          p5._processToken(token2);
        }
      } else if (tn2 !== $2.BODY && tn2 !== $2.CAPTION && tn2 !== $2.COL && tn2 !== $2.COLGROUP || tn2 !== $2.HTML && tn2 !== $2.TD && tn2 !== $2.TH) {
        endTagInTable(p5, token2);
      }
    }
    function startTagInCell(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.CAPTION || tn2 === $2.COL || tn2 === $2.COLGROUP || tn2 === $2.TBODY || tn2 === $2.TD || tn2 === $2.TFOOT || tn2 === $2.TH || tn2 === $2.THEAD || tn2 === $2.TR) {
        if (p5.openElements.hasInTableScope($2.TD) || p5.openElements.hasInTableScope($2.TH)) {
          p5._closeTableCell();
          p5._processToken(token2);
        }
      } else {
        startTagInBody(p5, token2);
      }
    }
    function endTagInCell(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.TD || tn2 === $2.TH) {
        if (p5.openElements.hasInTableScope(tn2)) {
          p5.openElements.generateImpliedEndTags();
          p5.openElements.popUntilTagNamePopped(tn2);
          p5.activeFormattingElements.clearToLastMarker();
          p5.insertionMode = IN_ROW_MODE;
        }
      } else if (tn2 === $2.TABLE || tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD || tn2 === $2.TR) {
        if (p5.openElements.hasInTableScope(tn2)) {
          p5._closeTableCell();
          p5._processToken(token2);
        }
      } else if (tn2 !== $2.BODY && tn2 !== $2.CAPTION && tn2 !== $2.COL && tn2 !== $2.COLGROUP && tn2 !== $2.HTML) {
        endTagInBody(p5, token2);
      }
    }
    function startTagInSelect(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.OPTION) {
        if (p5.openElements.currentTagName === $2.OPTION) {
          p5.openElements.pop();
        }
        p5._insertElement(token2, NS.HTML);
      } else if (tn2 === $2.OPTGROUP) {
        if (p5.openElements.currentTagName === $2.OPTION) {
          p5.openElements.pop();
        }
        if (p5.openElements.currentTagName === $2.OPTGROUP) {
          p5.openElements.pop();
        }
        p5._insertElement(token2, NS.HTML);
      } else if (tn2 === $2.INPUT || tn2 === $2.KEYGEN || tn2 === $2.TEXTAREA || tn2 === $2.SELECT) {
        if (p5.openElements.hasInSelectScope($2.SELECT)) {
          p5.openElements.popUntilTagNamePopped($2.SELECT);
          p5._resetInsertionMode();
          if (tn2 !== $2.SELECT) {
            p5._processToken(token2);
          }
        }
      } else if (tn2 === $2.SCRIPT || tn2 === $2.TEMPLATE) {
        startTagInHead(p5, token2);
      }
    }
    function endTagInSelect(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.OPTGROUP) {
        const prevOpenElement = p5.openElements.items[p5.openElements.stackTop - 1];
        const prevOpenElementTn = prevOpenElement && p5.treeAdapter.getTagName(prevOpenElement);
        if (p5.openElements.currentTagName === $2.OPTION && prevOpenElementTn === $2.OPTGROUP) {
          p5.openElements.pop();
        }
        if (p5.openElements.currentTagName === $2.OPTGROUP) {
          p5.openElements.pop();
        }
      } else if (tn2 === $2.OPTION) {
        if (p5.openElements.currentTagName === $2.OPTION) {
          p5.openElements.pop();
        }
      } else if (tn2 === $2.SELECT && p5.openElements.hasInSelectScope($2.SELECT)) {
        p5.openElements.popUntilTagNamePopped($2.SELECT);
        p5._resetInsertionMode();
      } else if (tn2 === $2.TEMPLATE) {
        endTagInHead(p5, token2);
      }
    }
    function startTagInSelectInTable(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.CAPTION || tn2 === $2.TABLE || tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD || tn2 === $2.TR || tn2 === $2.TD || tn2 === $2.TH) {
        p5.openElements.popUntilTagNamePopped($2.SELECT);
        p5._resetInsertionMode();
        p5._processToken(token2);
      } else {
        startTagInSelect(p5, token2);
      }
    }
    function endTagInSelectInTable(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.CAPTION || tn2 === $2.TABLE || tn2 === $2.TBODY || tn2 === $2.TFOOT || tn2 === $2.THEAD || tn2 === $2.TR || tn2 === $2.TD || tn2 === $2.TH) {
        if (p5.openElements.hasInTableScope(tn2)) {
          p5.openElements.popUntilTagNamePopped($2.SELECT);
          p5._resetInsertionMode();
          p5._processToken(token2);
        }
      } else {
        endTagInSelect(p5, token2);
      }
    }
    function startTagInTemplate(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.BASE || tn2 === $2.BASEFONT || tn2 === $2.BGSOUND || tn2 === $2.LINK || tn2 === $2.META || tn2 === $2.NOFRAMES || tn2 === $2.SCRIPT || tn2 === $2.STYLE || tn2 === $2.TEMPLATE || tn2 === $2.TITLE) {
        startTagInHead(p5, token2);
      } else {
        const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn2] || IN_BODY_MODE;
        p5._popTmplInsertionMode();
        p5._pushTmplInsertionMode(newInsertionMode);
        p5.insertionMode = newInsertionMode;
        p5._processToken(token2);
      }
    }
    function endTagInTemplate(p5, token2) {
      if (token2.tagName === $2.TEMPLATE) {
        endTagInHead(p5, token2);
      }
    }
    function eofInTemplate(p5, token2) {
      if (p5.openElements.tmplCount > 0) {
        p5.openElements.popUntilTagNamePopped($2.TEMPLATE);
        p5.activeFormattingElements.clearToLastMarker();
        p5._popTmplInsertionMode();
        p5._resetInsertionMode();
        p5._processToken(token2);
      } else {
        p5.stopped = true;
      }
    }
    function startTagAfterBody(p5, token2) {
      if (token2.tagName === $2.HTML) {
        startTagInBody(p5, token2);
      } else {
        tokenAfterBody(p5, token2);
      }
    }
    function endTagAfterBody(p5, token2) {
      if (token2.tagName === $2.HTML) {
        if (!p5.fragmentContext) {
          p5.insertionMode = AFTER_AFTER_BODY_MODE;
        }
      } else {
        tokenAfterBody(p5, token2);
      }
    }
    function tokenAfterBody(p5, token2) {
      p5.insertionMode = IN_BODY_MODE;
      p5._processToken(token2);
    }
    function startTagInFrameset(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.FRAMESET) {
        p5._insertElement(token2, NS.HTML);
      } else if (tn2 === $2.FRAME) {
        p5._appendElement(token2, NS.HTML);
        token2.ackSelfClosing = true;
      } else if (tn2 === $2.NOFRAMES) {
        startTagInHead(p5, token2);
      }
    }
    function endTagInFrameset(p5, token2) {
      if (token2.tagName === $2.FRAMESET && !p5.openElements.isRootHtmlElementCurrent()) {
        p5.openElements.pop();
        if (!p5.fragmentContext && p5.openElements.currentTagName !== $2.FRAMESET) {
          p5.insertionMode = AFTER_FRAMESET_MODE;
        }
      }
    }
    function startTagAfterFrameset(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.NOFRAMES) {
        startTagInHead(p5, token2);
      }
    }
    function endTagAfterFrameset(p5, token2) {
      if (token2.tagName === $2.HTML) {
        p5.insertionMode = AFTER_AFTER_FRAMESET_MODE;
      }
    }
    function startTagAfterAfterBody(p5, token2) {
      if (token2.tagName === $2.HTML) {
        startTagInBody(p5, token2);
      } else {
        tokenAfterAfterBody(p5, token2);
      }
    }
    function tokenAfterAfterBody(p5, token2) {
      p5.insertionMode = IN_BODY_MODE;
      p5._processToken(token2);
    }
    function startTagAfterAfterFrameset(p5, token2) {
      const tn2 = token2.tagName;
      if (tn2 === $2.HTML) {
        startTagInBody(p5, token2);
      } else if (tn2 === $2.NOFRAMES) {
        startTagInHead(p5, token2);
      }
    }
    function nullCharacterInForeignContent(p5, token2) {
      token2.chars = unicode.REPLACEMENT_CHARACTER;
      p5._insertCharacters(token2);
    }
    function characterInForeignContent(p5, token2) {
      p5._insertCharacters(token2);
      p5.framesetOk = false;
    }
    function startTagInForeignContent(p5, token2) {
      if (foreignContent.causesExit(token2) && !p5.fragmentContext) {
        while (p5.treeAdapter.getNamespaceURI(p5.openElements.current) !== NS.HTML && !p5._isIntegrationPoint(p5.openElements.current)) {
          p5.openElements.pop();
        }
        p5._processToken(token2);
      } else {
        const current = p5._getAdjustedCurrentElement();
        const currentNs = p5.treeAdapter.getNamespaceURI(current);
        if (currentNs === NS.MATHML) {
          foreignContent.adjustTokenMathMLAttrs(token2);
        } else if (currentNs === NS.SVG) {
          foreignContent.adjustTokenSVGTagName(token2);
          foreignContent.adjustTokenSVGAttrs(token2);
        }
        foreignContent.adjustTokenXMLAttrs(token2);
        if (token2.selfClosing) {
          p5._appendElement(token2, currentNs);
        } else {
          p5._insertElement(token2, currentNs);
        }
        token2.ackSelfClosing = true;
      }
    }
    function endTagInForeignContent(p5, token2) {
      for (let i = p5.openElements.stackTop; i > 0; i--) {
        const element7 = p5.openElements.items[i];
        if (p5.treeAdapter.getNamespaceURI(element7) === NS.HTML) {
          p5._processToken(token2);
          break;
        }
        if (p5.treeAdapter.getTagName(element7).toLowerCase() === token2.tagName) {
          p5.openElements.popUntilElementPopped(element7);
          break;
        }
      }
    }
  }
});

// node_modules/extend/index.js
var require_extend = __commonJS({
  "node_modules/extend/index.js"(exports, module) {
    "use strict";
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var defineProperty = Object.defineProperty;
    var gOPD = Object.getOwnPropertyDescriptor;
    var isArray2 = function isArray3(arr) {
      if (typeof Array.isArray === "function") {
        return Array.isArray(arr);
      }
      return toStr.call(arr) === "[object Array]";
    };
    var isPlainObject3 = function isPlainObject4(obj) {
      if (!obj || toStr.call(obj) !== "[object Object]") {
        return false;
      }
      var hasOwnConstructor = hasOwn.call(obj, "constructor");
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false;
      }
      var key2;
      for (key2 in obj) {
      }
      return typeof key2 === "undefined" || hasOwn.call(obj, key2);
    };
    var setProperty = function setProperty2(target, options2) {
      if (defineProperty && options2.name === "__proto__") {
        defineProperty(target, options2.name, {
          enumerable: true,
          configurable: true,
          value: options2.newValue,
          writable: true
        });
      } else {
        target[options2.name] = options2.newValue;
      }
    };
    var getProperty = function getProperty2(obj, name) {
      if (name === "__proto__") {
        if (!hasOwn.call(obj, name)) {
          return void 0;
        } else if (gOPD) {
          return gOPD(obj, name).value;
        }
      }
      return obj[name];
    };
    module.exports = function extend3() {
      var options2, name, src, copy4, copyIsArray, clone;
      var target = arguments[0];
      var i = 1;
      var length4 = arguments.length;
      var deep = false;
      if (typeof target === "boolean") {
        deep = target;
        target = arguments[1] || {};
        i = 2;
      }
      if (target == null || typeof target !== "object" && typeof target !== "function") {
        target = {};
      }
      for (; i < length4; ++i) {
        options2 = arguments[i];
        if (options2 != null) {
          for (name in options2) {
            src = getProperty(target, name);
            copy4 = getProperty(options2, name);
            if (target !== copy4) {
              if (deep && copy4 && (isPlainObject3(copy4) || (copyIsArray = isArray2(copy4)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray2(src) ? src : [];
                } else {
                  clone = src && isPlainObject3(src) ? src : {};
                }
                setProperty(target, { name, newValue: extend3(deep, clone, copy4) });
              } else if (typeof copy4 !== "undefined") {
                setProperty(target, { name, newValue: copy4 });
              }
            }
          }
        }
      }
      return target;
    };
  }
});

// node_modules/ms/index.js
var require_ms = __commonJS({
  "node_modules/ms/index.js"(exports, module) {
    var s2 = 1e3;
    var m = s2 * 60;
    var h2 = m * 60;
    var d = h2 * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options2) {
      options2 = options2 || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse6(val);
      } else if (type === "number" && isFinite(val)) {
        return options2.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse6(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match2 = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match2) {
        return;
      }
      var n = parseFloat(match2[1]);
      var type = (match2[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h2;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s2;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h2) {
        return Math.round(ms / h2) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s2) {
        return Math.round(ms / s2) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h2) {
        return plural(ms, msAbs, h2, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s2) {
        return plural(ms, msAbs, s2, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS({
  "node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug2.debug = createDebug2;
      createDebug2.default = createDebug2;
      createDebug2.coerce = coerce;
      createDebug2.disable = disable2;
      createDebug2.enable = enable;
      createDebug2.enabled = enabled;
      createDebug2.humanize = require_ms();
      createDebug2.destroy = destroy;
      Object.keys(env).forEach((key2) => {
        createDebug2[key2] = env[key2];
      });
      createDebug2.names = [];
      createDebug2.skips = [];
      createDebug2.formatters = {};
      function selectColor(namespace) {
        let hash4 = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash4 = (hash4 << 5) - hash4 + namespace.charCodeAt(i);
          hash4 |= 0;
        }
        return createDebug2.colors[Math.abs(hash4) % createDebug2.colors.length];
      }
      createDebug2.selectColor = selectColor;
      function createDebug2(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug2(...args2) {
          if (!debug2.enabled) {
            return;
          }
          const self2 = debug2;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args2[0] = createDebug2.coerce(args2[0]);
          if (typeof args2[0] !== "string") {
            args2.unshift("%O");
          }
          let index7 = 0;
          args2[0] = args2[0].replace(/%([a-zA-Z%])/g, (match2, format) => {
            if (match2 === "%%") {
              return "%";
            }
            index7++;
            const formatter = createDebug2.formatters[format];
            if (typeof formatter === "function") {
              const val = args2[index7];
              match2 = formatter.call(self2, val);
              args2.splice(index7, 1);
              index7--;
            }
            return match2;
          });
          createDebug2.formatArgs.call(self2, args2);
          const logFn = self2.log || createDebug2.log;
          logFn.apply(self2, args2);
        }
        debug2.namespace = namespace;
        debug2.useColors = createDebug2.useColors();
        debug2.color = createDebug2.selectColor(namespace);
        debug2.extend = extend3;
        debug2.destroy = createDebug2.destroy;
        Object.defineProperty(debug2, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug2.namespaces) {
              namespacesCache = createDebug2.namespaces;
              enabledCache = createDebug2.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug2.init === "function") {
          createDebug2.init(debug2);
        }
        return debug2;
      }
      function extend3(namespace, delimiter2) {
        const newDebug = createDebug2(this.namespace + (typeof delimiter2 === "undefined" ? ":" : delimiter2) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug2.save(namespaces);
        createDebug2.namespaces = namespaces;
        createDebug2.names = [];
        createDebug2.skips = [];
        let i;
        const split3 = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split3.length;
        for (i = 0; i < len; i++) {
          if (!split3[i]) {
            continue;
          }
          namespaces = split3[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug2.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug2.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable2() {
        const namespaces = [
          ...createDebug2.names.map(toNamespace),
          ...createDebug2.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug2.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug2.skips.length; i < len; i++) {
          if (createDebug2.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug2.names.length; i < len; i++) {
          if (createDebug2.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp2) {
        return regexp2.toString().substring(2, regexp2.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug2.enable(createDebug2.load());
      return createDebug2;
    }
    module.exports = setup;
  }
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args2) {
      args2[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args2[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args2.splice(1, 0, c, "color: inherit");
      let index7 = 0;
      let lastC = 0;
      args2[0].replace(/%[a-zA-Z%]/g, (match2) => {
        if (match2 === "%%") {
          return;
        }
        index7++;
        if (match2 === "%c") {
          lastC = index7;
        }
      });
      args2.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// node_modules/is-buffer/index.js
var require_is_buffer = __commonJS({
  "node_modules/is-buffer/index.js"(exports, module) {
    module.exports = function isBuffer2(obj) {
      return obj != null && obj.constructor != null && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    };
  }
});

// node_modules/@blocknote/react/dist/blocknote-react.js
var import_react291 = __toESM(require_react());

// node_modules/orderedmap/dist/index.js
function OrderedMap(content5) {
  this.content = content5;
}
OrderedMap.prototype = {
  constructor: OrderedMap,
  find: function(key2) {
    for (var i = 0; i < this.content.length; i += 2)
      if (this.content[i] === key2)
        return i;
    return -1;
  },
  // :: (string) → ?any
  // Retrieve the value stored under `key`, or return undefined when
  // no such key exists.
  get: function(key2) {
    var found2 = this.find(key2);
    return found2 == -1 ? void 0 : this.content[found2 + 1];
  },
  // :: (string, any, ?string) → OrderedMap
  // Create a new map by replacing the value of `key` with a new
  // value, or adding a binding to the end of the map. If `newKey` is
  // given, the key of the binding will be replaced with that key.
  update: function(key2, value, newKey) {
    var self2 = newKey && newKey != key2 ? this.remove(newKey) : this;
    var found2 = self2.find(key2), content5 = self2.content.slice();
    if (found2 == -1) {
      content5.push(newKey || key2, value);
    } else {
      content5[found2 + 1] = value;
      if (newKey)
        content5[found2] = newKey;
    }
    return new OrderedMap(content5);
  },
  // :: (string) → OrderedMap
  // Return a map with the given key removed, if it existed.
  remove: function(key2) {
    var found2 = this.find(key2);
    if (found2 == -1)
      return this;
    var content5 = this.content.slice();
    content5.splice(found2, 2);
    return new OrderedMap(content5);
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the start of the map.
  addToStart: function(key2, value) {
    return new OrderedMap([key2, value].concat(this.remove(key2).content));
  },
  // :: (string, any) → OrderedMap
  // Add a new key to the end of the map.
  addToEnd: function(key2, value) {
    var content5 = this.remove(key2).content.slice();
    content5.push(key2, value);
    return new OrderedMap(content5);
  },
  // :: (string, string, any) → OrderedMap
  // Add a key after the given key. If `place` is not found, the new
  // key is added to the end.
  addBefore: function(place, key2, value) {
    var without = this.remove(key2), content5 = without.content.slice();
    var found2 = without.find(place);
    content5.splice(found2 == -1 ? content5.length : found2, 0, key2, value);
    return new OrderedMap(content5);
  },
  // :: ((key: string, value: any))
  // Call the given function for each key/value pair in the map, in
  // order.
  forEach: function(f2) {
    for (var i = 0; i < this.content.length; i += 2)
      f2(this.content[i], this.content[i + 1]);
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by prepending the keys in this map that don't
  // appear in `map` before the keys in `map`.
  prepend: function(map6) {
    map6 = OrderedMap.from(map6);
    if (!map6.size)
      return this;
    return new OrderedMap(map6.content.concat(this.subtract(map6).content));
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a new map by appending the keys in this map that don't
  // appear in `map` after the keys in `map`.
  append: function(map6) {
    map6 = OrderedMap.from(map6);
    if (!map6.size)
      return this;
    return new OrderedMap(this.subtract(map6).content.concat(map6.content));
  },
  // :: (union<Object, OrderedMap>) → OrderedMap
  // Create a map containing all the keys in this map that don't
  // appear in `map`.
  subtract: function(map6) {
    var result = this;
    map6 = OrderedMap.from(map6);
    for (var i = 0; i < map6.content.length; i += 2)
      result = result.remove(map6.content[i]);
    return result;
  },
  // :: () → Object
  // Turn ordered map into a plain object.
  toObject: function() {
    var result = {};
    this.forEach(function(key2, value) {
      result[key2] = value;
    });
    return result;
  },
  // :: number
  // The amount of keys in this map.
  get size() {
    return this.content.length >> 1;
  }
};
OrderedMap.from = function(value) {
  if (value instanceof OrderedMap)
    return value;
  var content5 = [];
  if (value)
    for (var prop in value)
      content5.push(prop, value[prop]);
  return new OrderedMap(content5);
};
var dist_default = OrderedMap;

// node_modules/prosemirror-model/dist/index.js
function findDiffStart(a2, b2, pos) {
  for (let i = 0; ; i++) {
    if (i == a2.childCount || i == b2.childCount)
      return a2.childCount == b2.childCount ? null : pos;
    let childA = a2.child(i), childB = b2.child(i);
    if (childA == childB) {
      pos += childA.nodeSize;
      continue;
    }
    if (!childA.sameMarkup(childB))
      return pos;
    if (childA.isText && childA.text != childB.text) {
      for (let j = 0; childA.text[j] == childB.text[j]; j++)
        pos++;
      return pos;
    }
    if (childA.content.size || childB.content.size) {
      let inner = findDiffStart(childA.content, childB.content, pos + 1);
      if (inner != null)
        return inner;
    }
    pos += childA.nodeSize;
  }
}
function findDiffEnd(a2, b2, posA, posB) {
  for (let iA = a2.childCount, iB = b2.childCount; ; ) {
    if (iA == 0 || iB == 0)
      return iA == iB ? null : { a: posA, b: posB };
    let childA = a2.child(--iA), childB = b2.child(--iB), size3 = childA.nodeSize;
    if (childA == childB) {
      posA -= size3;
      posB -= size3;
      continue;
    }
    if (!childA.sameMarkup(childB))
      return { a: posA, b: posB };
    if (childA.isText && childA.text != childB.text) {
      let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
      while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
        same++;
        posA--;
        posB--;
      }
      return { a: posA, b: posB };
    }
    if (childA.content.size || childB.content.size) {
      let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
      if (inner)
        return inner;
    }
    posA -= size3;
    posB -= size3;
  }
}
var Fragment = class {
  /**
  @internal
  */
  constructor(content5, size3) {
    this.content = content5;
    this.size = size3 || 0;
    if (size3 == null)
      for (let i = 0; i < content5.length; i++)
        this.size += content5[i].nodeSize;
  }
  /**
  Invoke a callback for all descendant nodes between the given two
  positions (relative to start of this fragment). Doesn't descend
  into a node when the callback returns `false`.
  */
  nodesBetween(from5, to3, f2, nodeStart = 0, parent) {
    for (let i = 0, pos = 0; pos < to3; i++) {
      let child = this.content[i], end2 = pos + child.nodeSize;
      if (end2 > from5 && f2(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {
        let start2 = pos + 1;
        child.nodesBetween(Math.max(0, from5 - start2), Math.min(child.content.size, to3 - start2), f2, nodeStart + start2);
      }
      pos = end2;
    }
  }
  /**
  Call the given callback for every descendant node. `pos` will be
  relative to the start of the fragment. The callback may return
  `false` to prevent traversal of a given node's children.
  */
  descendants(f2) {
    this.nodesBetween(0, this.size, f2);
  }
  /**
  Extract the text between `from` and `to`. See the same method on
  [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
  */
  textBetween(from5, to3, blockSeparator, leafText) {
    let text10 = "", separated = true;
    this.nodesBetween(from5, to3, (node4, pos) => {
      if (node4.isText) {
        text10 += node4.text.slice(Math.max(from5, pos) - pos, to3 - pos);
        separated = !blockSeparator;
      } else if (node4.isLeaf) {
        if (leafText) {
          text10 += typeof leafText === "function" ? leafText(node4) : leafText;
        } else if (node4.type.spec.leafText) {
          text10 += node4.type.spec.leafText(node4);
        }
        separated = !blockSeparator;
      } else if (!separated && node4.isBlock) {
        text10 += blockSeparator;
        separated = true;
      }
    }, 0);
    return text10;
  }
  /**
  Create a new fragment containing the combined content of this
  fragment and the other.
  */
  append(other) {
    if (!other.size)
      return this;
    if (!this.size)
      return other;
    let last2 = this.lastChild, first2 = other.firstChild, content5 = this.content.slice(), i = 0;
    if (last2.isText && last2.sameMarkup(first2)) {
      content5[content5.length - 1] = last2.withText(last2.text + first2.text);
      i = 1;
    }
    for (; i < other.content.length; i++)
      content5.push(other.content[i]);
    return new Fragment(content5, this.size + other.size);
  }
  /**
  Cut out the sub-fragment between the two given positions.
  */
  cut(from5, to3 = this.size) {
    if (from5 == 0 && to3 == this.size)
      return this;
    let result = [], size3 = 0;
    if (to3 > from5)
      for (let i = 0, pos = 0; pos < to3; i++) {
        let child = this.content[i], end2 = pos + child.nodeSize;
        if (end2 > from5) {
          if (pos < from5 || end2 > to3) {
            if (child.isText)
              child = child.cut(Math.max(0, from5 - pos), Math.min(child.text.length, to3 - pos));
            else
              child = child.cut(Math.max(0, from5 - pos - 1), Math.min(child.content.size, to3 - pos - 1));
          }
          result.push(child);
          size3 += child.nodeSize;
        }
        pos = end2;
      }
    return new Fragment(result, size3);
  }
  /**
  @internal
  */
  cutByIndex(from5, to3) {
    if (from5 == to3)
      return Fragment.empty;
    if (from5 == 0 && to3 == this.content.length)
      return this;
    return new Fragment(this.content.slice(from5, to3));
  }
  /**
  Create a new fragment in which the node at the given index is
  replaced by the given node.
  */
  replaceChild(index7, node4) {
    let current = this.content[index7];
    if (current == node4)
      return this;
    let copy4 = this.content.slice();
    let size3 = this.size + node4.nodeSize - current.nodeSize;
    copy4[index7] = node4;
    return new Fragment(copy4, size3);
  }
  /**
  Create a new fragment by prepending the given node to this
  fragment.
  */
  addToStart(node4) {
    return new Fragment([node4].concat(this.content), this.size + node4.nodeSize);
  }
  /**
  Create a new fragment by appending the given node to this
  fragment.
  */
  addToEnd(node4) {
    return new Fragment(this.content.concat(node4), this.size + node4.nodeSize);
  }
  /**
  Compare this fragment to another one.
  */
  eq(other) {
    if (this.content.length != other.content.length)
      return false;
    for (let i = 0; i < this.content.length; i++)
      if (!this.content[i].eq(other.content[i]))
        return false;
    return true;
  }
  /**
  The first child of the fragment, or `null` if it is empty.
  */
  get firstChild() {
    return this.content.length ? this.content[0] : null;
  }
  /**
  The last child of the fragment, or `null` if it is empty.
  */
  get lastChild() {
    return this.content.length ? this.content[this.content.length - 1] : null;
  }
  /**
  The number of child nodes in this fragment.
  */
  get childCount() {
    return this.content.length;
  }
  /**
  Get the child node at the given index. Raise an error when the
  index is out of range.
  */
  child(index7) {
    let found2 = this.content[index7];
    if (!found2)
      throw new RangeError("Index " + index7 + " out of range for " + this);
    return found2;
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(index7) {
    return this.content[index7] || null;
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(f2) {
    for (let i = 0, p5 = 0; i < this.content.length; i++) {
      let child = this.content[i];
      f2(child, p5, i);
      p5 += child.nodeSize;
    }
  }
  /**
  Find the first position at which this fragment and another
  fragment differ, or `null` if they are the same.
  */
  findDiffStart(other, pos = 0) {
    return findDiffStart(this, other, pos);
  }
  /**
  Find the first position, searching from the end, at which this
  fragment and the given fragment differ, or `null` if they are
  the same. Since this position will not be the same in both
  nodes, an object with two separate positions is returned.
  */
  findDiffEnd(other, pos = this.size, otherPos = other.size) {
    return findDiffEnd(this, other, pos, otherPos);
  }
  /**
  Find the index and inner offset corresponding to a given relative
  position in this fragment. The result object will be reused
  (overwritten) the next time the function is called. (Not public.)
  */
  findIndex(pos, round5 = -1) {
    if (pos == 0)
      return retIndex(0, pos);
    if (pos == this.size)
      return retIndex(this.content.length, pos);
    if (pos > this.size || pos < 0)
      throw new RangeError(`Position ${pos} outside of fragment (${this})`);
    for (let i = 0, curPos = 0; ; i++) {
      let cur = this.child(i), end2 = curPos + cur.nodeSize;
      if (end2 >= pos) {
        if (end2 == pos || round5 > 0)
          return retIndex(i + 1, end2);
        return retIndex(i, curPos);
      }
      curPos = end2;
    }
  }
  /**
  Return a debugging string that describes this fragment.
  */
  toString() {
    return "<" + this.toStringInner() + ">";
  }
  /**
  @internal
  */
  toStringInner() {
    return this.content.join(", ");
  }
  /**
  Create a JSON-serializeable representation of this fragment.
  */
  toJSON() {
    return this.content.length ? this.content.map((n) => n.toJSON()) : null;
  }
  /**
  Deserialize a fragment from its JSON representation.
  */
  static fromJSON(schema, value) {
    if (!value)
      return Fragment.empty;
    if (!Array.isArray(value))
      throw new RangeError("Invalid input for Fragment.fromJSON");
    return new Fragment(value.map(schema.nodeFromJSON));
  }
  /**
  Build a fragment from an array of nodes. Ensures that adjacent
  text nodes with the same marks are joined together.
  */
  static fromArray(array) {
    if (!array.length)
      return Fragment.empty;
    let joined, size3 = 0;
    for (let i = 0; i < array.length; i++) {
      let node4 = array[i];
      size3 += node4.nodeSize;
      if (i && node4.isText && array[i - 1].sameMarkup(node4)) {
        if (!joined)
          joined = array.slice(0, i);
        joined[joined.length - 1] = node4.withText(joined[joined.length - 1].text + node4.text);
      } else if (joined) {
        joined.push(node4);
      }
    }
    return new Fragment(joined || array, size3);
  }
  /**
  Create a fragment from something that can be interpreted as a
  set of nodes. For `null`, it returns the empty fragment. For a
  fragment, the fragment itself. For a node or array of nodes, a
  fragment containing those nodes.
  */
  static from(nodes) {
    if (!nodes)
      return Fragment.empty;
    if (nodes instanceof Fragment)
      return nodes;
    if (Array.isArray(nodes))
      return this.fromArray(nodes);
    if (nodes.attrs)
      return new Fragment([nodes], nodes.nodeSize);
    throw new RangeError("Can not convert " + nodes + " to a Fragment" + (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
  }
};
Fragment.empty = new Fragment([], 0);
var found = { index: 0, offset: 0 };
function retIndex(index7, offset3) {
  found.index = index7;
  found.offset = offset3;
  return found;
}
function compareDeep(a2, b2) {
  if (a2 === b2)
    return true;
  if (!(a2 && typeof a2 == "object") || !(b2 && typeof b2 == "object"))
    return false;
  let array = Array.isArray(a2);
  if (Array.isArray(b2) != array)
    return false;
  if (array) {
    if (a2.length != b2.length)
      return false;
    for (let i = 0; i < a2.length; i++)
      if (!compareDeep(a2[i], b2[i]))
        return false;
  } else {
    for (let p5 in a2)
      if (!(p5 in b2) || !compareDeep(a2[p5], b2[p5]))
        return false;
    for (let p5 in b2)
      if (!(p5 in a2))
        return false;
  }
  return true;
}
var Mark = class {
  /**
  @internal
  */
  constructor(type, attrs) {
    this.type = type;
    this.attrs = attrs;
  }
  /**
  Given a set of marks, create a new set which contains this one as
  well, in the right position. If this mark is already in the set,
  the set itself is returned. If any marks that are set to be
  [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
  those are replaced by this one.
  */
  addToSet(set) {
    let copy4, placed = false;
    for (let i = 0; i < set.length; i++) {
      let other = set[i];
      if (this.eq(other))
        return set;
      if (this.type.excludes(other.type)) {
        if (!copy4)
          copy4 = set.slice(0, i);
      } else if (other.type.excludes(this.type)) {
        return set;
      } else {
        if (!placed && other.type.rank > this.type.rank) {
          if (!copy4)
            copy4 = set.slice(0, i);
          copy4.push(this);
          placed = true;
        }
        if (copy4)
          copy4.push(other);
      }
    }
    if (!copy4)
      copy4 = set.slice();
    if (!placed)
      copy4.push(this);
    return copy4;
  }
  /**
  Remove this mark from the given set, returning a new set. If this
  mark is not in the set, the set itself is returned.
  */
  removeFromSet(set) {
    for (let i = 0; i < set.length; i++)
      if (this.eq(set[i]))
        return set.slice(0, i).concat(set.slice(i + 1));
    return set;
  }
  /**
  Test whether this mark is in the given set of marks.
  */
  isInSet(set) {
    for (let i = 0; i < set.length; i++)
      if (this.eq(set[i]))
        return true;
    return false;
  }
  /**
  Test whether this mark has the same type and attributes as
  another mark.
  */
  eq(other) {
    return this == other || this.type == other.type && compareDeep(this.attrs, other.attrs);
  }
  /**
  Convert this mark to a JSON-serializeable representation.
  */
  toJSON() {
    let obj = { type: this.type.name };
    for (let _2 in this.attrs) {
      obj.attrs = this.attrs;
      break;
    }
    return obj;
  }
  /**
  Deserialize a mark from JSON.
  */
  static fromJSON(schema, json) {
    if (!json)
      throw new RangeError("Invalid input for Mark.fromJSON");
    let type = schema.marks[json.type];
    if (!type)
      throw new RangeError(`There is no mark type ${json.type} in this schema`);
    return type.create(json.attrs);
  }
  /**
  Test whether two sets of marks are identical.
  */
  static sameSet(a2, b2) {
    if (a2 == b2)
      return true;
    if (a2.length != b2.length)
      return false;
    for (let i = 0; i < a2.length; i++)
      if (!a2[i].eq(b2[i]))
        return false;
    return true;
  }
  /**
  Create a properly sorted mark set from null, a single mark, or an
  unsorted array of marks.
  */
  static setFrom(marks) {
    if (!marks || Array.isArray(marks) && marks.length == 0)
      return Mark.none;
    if (marks instanceof Mark)
      return [marks];
    let copy4 = marks.slice();
    copy4.sort((a2, b2) => a2.type.rank - b2.type.rank);
    return copy4;
  }
};
Mark.none = [];
var ReplaceError = class extends Error {
};
var Slice = class {
  /**
  Create a slice. When specifying a non-zero open depth, you must
  make sure that there are nodes of at least that depth at the
  appropriate side of the fragment—i.e. if the fragment is an
  empty paragraph node, `openStart` and `openEnd` can't be greater
  than 1.
  
  It is not necessary for the content of open nodes to conform to
  the schema's content constraints, though it should be a valid
  start/end/middle for such a node, depending on which sides are
  open.
  */
  constructor(content5, openStart, openEnd) {
    this.content = content5;
    this.openStart = openStart;
    this.openEnd = openEnd;
  }
  /**
  The size this slice would add when inserted into a document.
  */
  get size() {
    return this.content.size - this.openStart - this.openEnd;
  }
  /**
  @internal
  */
  insertAt(pos, fragment) {
    let content5 = insertInto(this.content, pos + this.openStart, fragment);
    return content5 && new Slice(content5, this.openStart, this.openEnd);
  }
  /**
  @internal
  */
  removeBetween(from5, to3) {
    return new Slice(removeRange(this.content, from5 + this.openStart, to3 + this.openStart), this.openStart, this.openEnd);
  }
  /**
  Tests whether this slice is equal to another slice.
  */
  eq(other) {
    return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
  }
  /**
  @internal
  */
  toString() {
    return this.content + "(" + this.openStart + "," + this.openEnd + ")";
  }
  /**
  Convert a slice to a JSON-serializable representation.
  */
  toJSON() {
    if (!this.content.size)
      return null;
    let json = { content: this.content.toJSON() };
    if (this.openStart > 0)
      json.openStart = this.openStart;
    if (this.openEnd > 0)
      json.openEnd = this.openEnd;
    return json;
  }
  /**
  Deserialize a slice from its JSON representation.
  */
  static fromJSON(schema, json) {
    if (!json)
      return Slice.empty;
    let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
    if (typeof openStart != "number" || typeof openEnd != "number")
      throw new RangeError("Invalid input for Slice.fromJSON");
    return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
  }
  /**
  Create a slice from a fragment by taking the maximum possible
  open value on both side of the fragment.
  */
  static maxOpen(fragment, openIsolating = true) {
    let openStart = 0, openEnd = 0;
    for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)
      openStart++;
    for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)
      openEnd++;
    return new Slice(fragment, openStart, openEnd);
  }
};
Slice.empty = new Slice(Fragment.empty, 0, 0);
function removeRange(content5, from5, to3) {
  let { index: index7, offset: offset3 } = content5.findIndex(from5), child = content5.maybeChild(index7);
  let { index: indexTo, offset: offsetTo } = content5.findIndex(to3);
  if (offset3 == from5 || child.isText) {
    if (offsetTo != to3 && !content5.child(indexTo).isText)
      throw new RangeError("Removing non-flat range");
    return content5.cut(0, from5).append(content5.cut(to3));
  }
  if (index7 != indexTo)
    throw new RangeError("Removing non-flat range");
  return content5.replaceChild(index7, child.copy(removeRange(child.content, from5 - offset3 - 1, to3 - offset3 - 1)));
}
function insertInto(content5, dist, insert, parent) {
  let { index: index7, offset: offset3 } = content5.findIndex(dist), child = content5.maybeChild(index7);
  if (offset3 == dist || child.isText) {
    if (parent && !parent.canReplace(index7, index7, insert))
      return null;
    return content5.cut(0, dist).append(insert).append(content5.cut(dist));
  }
  let inner = insertInto(child.content, dist - offset3 - 1, insert);
  return inner && content5.replaceChild(index7, child.copy(inner));
}
function replace($from, $to, slice3) {
  if (slice3.openStart > $from.depth)
    throw new ReplaceError("Inserted content deeper than insertion position");
  if ($from.depth - slice3.openStart != $to.depth - slice3.openEnd)
    throw new ReplaceError("Inconsistent open depths");
  return replaceOuter($from, $to, slice3, 0);
}
function replaceOuter($from, $to, slice3, depth) {
  let index7 = $from.index(depth), node4 = $from.node(depth);
  if (index7 == $to.index(depth) && depth < $from.depth - slice3.openStart) {
    let inner = replaceOuter($from, $to, slice3, depth + 1);
    return node4.copy(node4.content.replaceChild(index7, inner));
  } else if (!slice3.content.size) {
    return close(node4, replaceTwoWay($from, $to, depth));
  } else if (!slice3.openStart && !slice3.openEnd && $from.depth == depth && $to.depth == depth) {
    let parent = $from.parent, content5 = parent.content;
    return close(parent, content5.cut(0, $from.parentOffset).append(slice3.content).append(content5.cut($to.parentOffset)));
  } else {
    let { start: start2, end: end2 } = prepareSliceForReplace(slice3, $from);
    return close(node4, replaceThreeWay($from, start2, end2, $to, depth));
  }
}
function checkJoin(main2, sub) {
  if (!sub.type.compatibleContent(main2.type))
    throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main2.type.name);
}
function joinable($before, $after, depth) {
  let node4 = $before.node(depth);
  checkJoin(node4, $after.node(depth));
  return node4;
}
function addNode(child, target) {
  let last2 = target.length - 1;
  if (last2 >= 0 && child.isText && child.sameMarkup(target[last2]))
    target[last2] = child.withText(target[last2].text + child.text);
  else
    target.push(child);
}
function addRange($start, $end, depth, target) {
  let node4 = ($end || $start).node(depth);
  let startIndex = 0, endIndex = $end ? $end.index(depth) : node4.childCount;
  if ($start) {
    startIndex = $start.index(depth);
    if ($start.depth > depth) {
      startIndex++;
    } else if ($start.textOffset) {
      addNode($start.nodeAfter, target);
      startIndex++;
    }
  }
  for (let i = startIndex; i < endIndex; i++)
    addNode(node4.child(i), target);
  if ($end && $end.depth == depth && $end.textOffset)
    addNode($end.nodeBefore, target);
}
function close(node4, content5) {
  node4.type.checkContent(content5);
  return node4.copy(content5);
}
function replaceThreeWay($from, $start, $end, $to, depth) {
  let openStart = $from.depth > depth && joinable($from, $start, depth + 1);
  let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);
  let content5 = [];
  addRange(null, $from, depth, content5);
  if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
    checkJoin(openStart, openEnd);
    addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content5);
  } else {
    if (openStart)
      addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content5);
    addRange($start, $end, depth, content5);
    if (openEnd)
      addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content5);
  }
  addRange($to, null, depth, content5);
  return new Fragment(content5);
}
function replaceTwoWay($from, $to, depth) {
  let content5 = [];
  addRange(null, $from, depth, content5);
  if ($from.depth > depth) {
    let type = joinable($from, $to, depth + 1);
    addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content5);
  }
  addRange($to, null, depth, content5);
  return new Fragment(content5);
}
function prepareSliceForReplace(slice3, $along) {
  let extra = $along.depth - slice3.openStart, parent = $along.node(extra);
  let node4 = parent.copy(slice3.content);
  for (let i = extra - 1; i >= 0; i--)
    node4 = $along.node(i).copy(Fragment.from(node4));
  return {
    start: node4.resolveNoCache(slice3.openStart + extra),
    end: node4.resolveNoCache(node4.content.size - slice3.openEnd - extra)
  };
}
var ResolvedPos = class {
  /**
  @internal
  */
  constructor(pos, path3, parentOffset) {
    this.pos = pos;
    this.path = path3;
    this.parentOffset = parentOffset;
    this.depth = path3.length / 3 - 1;
  }
  /**
  @internal
  */
  resolveDepth(val) {
    if (val == null)
      return this.depth;
    if (val < 0)
      return this.depth + val;
    return val;
  }
  /**
  The parent node that the position points into. Note that even if
  a position points into a text node, that node is not considered
  the parent—text nodes are ‘flat’ in this model, and have no content.
  */
  get parent() {
    return this.node(this.depth);
  }
  /**
  The root node in which the position was resolved.
  */
  get doc() {
    return this.node(0);
  }
  /**
  The ancestor node at the given level. `p.node(p.depth)` is the
  same as `p.parent`.
  */
  node(depth) {
    return this.path[this.resolveDepth(depth) * 3];
  }
  /**
  The index into the ancestor at the given level. If this points
  at the 3rd node in the 2nd paragraph on the top level, for
  example, `p.index(0)` is 1 and `p.index(1)` is 2.
  */
  index(depth) {
    return this.path[this.resolveDepth(depth) * 3 + 1];
  }
  /**
  The index pointing after this position into the ancestor at the
  given level.
  */
  indexAfter(depth) {
    depth = this.resolveDepth(depth);
    return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
  }
  /**
  The (absolute) position at the start of the node at the given
  level.
  */
  start(depth) {
    depth = this.resolveDepth(depth);
    return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
  }
  /**
  The (absolute) position at the end of the node at the given
  level.
  */
  end(depth) {
    depth = this.resolveDepth(depth);
    return this.start(depth) + this.node(depth).content.size;
  }
  /**
  The (absolute) position directly before the wrapping node at the
  given level, or, when `depth` is `this.depth + 1`, the original
  position.
  */
  before(depth) {
    depth = this.resolveDepth(depth);
    if (!depth)
      throw new RangeError("There is no position before the top-level node");
    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
  }
  /**
  The (absolute) position directly after the wrapping node at the
  given level, or the original position when `depth` is `this.depth + 1`.
  */
  after(depth) {
    depth = this.resolveDepth(depth);
    if (!depth)
      throw new RangeError("There is no position after the top-level node");
    return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
  }
  /**
  When this position points into a text node, this returns the
  distance between the position and the start of the text node.
  Will be zero for positions that point between nodes.
  */
  get textOffset() {
    return this.pos - this.path[this.path.length - 1];
  }
  /**
  Get the node directly after the position, if any. If the position
  points into a text node, only the part of that node after the
  position is returned.
  */
  get nodeAfter() {
    let parent = this.parent, index7 = this.index(this.depth);
    if (index7 == parent.childCount)
      return null;
    let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index7);
    return dOff ? parent.child(index7).cut(dOff) : child;
  }
  /**
  Get the node directly before the position, if any. If the
  position points into a text node, only the part of that node
  before the position is returned.
  */
  get nodeBefore() {
    let index7 = this.index(this.depth);
    let dOff = this.pos - this.path[this.path.length - 1];
    if (dOff)
      return this.parent.child(index7).cut(0, dOff);
    return index7 == 0 ? null : this.parent.child(index7 - 1);
  }
  /**
  Get the position at the given index in the parent node at the
  given depth (which defaults to `this.depth`).
  */
  posAtIndex(index7, depth) {
    depth = this.resolveDepth(depth);
    let node4 = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
    for (let i = 0; i < index7; i++)
      pos += node4.child(i).nodeSize;
    return pos;
  }
  /**
  Get the marks at this position, factoring in the surrounding
  marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
  position is at the start of a non-empty node, the marks of the
  node after it (if any) are returned.
  */
  marks() {
    let parent = this.parent, index7 = this.index();
    if (parent.content.size == 0)
      return Mark.none;
    if (this.textOffset)
      return parent.child(index7).marks;
    let main2 = parent.maybeChild(index7 - 1), other = parent.maybeChild(index7);
    if (!main2) {
      let tmp = main2;
      main2 = other;
      other = tmp;
    }
    let marks = main2.marks;
    for (var i = 0; i < marks.length; i++)
      if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))
        marks = marks[i--].removeFromSet(marks);
    return marks;
  }
  /**
  Get the marks after the current position, if any, except those
  that are non-inclusive and not present at position `$end`. This
  is mostly useful for getting the set of marks to preserve after a
  deletion. Will return `null` if this position is at the end of
  its parent node or its parent node isn't a textblock (in which
  case no marks should be preserved).
  */
  marksAcross($end) {
    let after = this.parent.maybeChild(this.index());
    if (!after || !after.isInline)
      return null;
    let marks = after.marks, next2 = $end.parent.maybeChild($end.index());
    for (var i = 0; i < marks.length; i++)
      if (marks[i].type.spec.inclusive === false && (!next2 || !marks[i].isInSet(next2.marks)))
        marks = marks[i--].removeFromSet(marks);
    return marks;
  }
  /**
  The depth up to which this position and the given (non-resolved)
  position share the same parent nodes.
  */
  sharedDepth(pos) {
    for (let depth = this.depth; depth > 0; depth--)
      if (this.start(depth) <= pos && this.end(depth) >= pos)
        return depth;
    return 0;
  }
  /**
  Returns a range based on the place where this position and the
  given position diverge around block content. If both point into
  the same textblock, for example, a range around that textblock
  will be returned. If they point into different blocks, the range
  around those blocks in their shared ancestor is returned. You can
  pass in an optional predicate that will be called with a parent
  node to see if a range into that parent is acceptable.
  */
  blockRange(other = this, pred) {
    if (other.pos < this.pos)
      return other.blockRange(this);
    for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
      if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
        return new NodeRange(this, other, d);
    return null;
  }
  /**
  Query whether the given position shares the same parent node.
  */
  sameParent(other) {
    return this.pos - this.parentOffset == other.pos - other.parentOffset;
  }
  /**
  Return the greater of this and the given position.
  */
  max(other) {
    return other.pos > this.pos ? other : this;
  }
  /**
  Return the smaller of this and the given position.
  */
  min(other) {
    return other.pos < this.pos ? other : this;
  }
  /**
  @internal
  */
  toString() {
    let str = "";
    for (let i = 1; i <= this.depth; i++)
      str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
    return str + ":" + this.parentOffset;
  }
  /**
  @internal
  */
  static resolve(doc4, pos) {
    if (!(pos >= 0 && pos <= doc4.content.size))
      throw new RangeError("Position " + pos + " out of range");
    let path3 = [];
    let start2 = 0, parentOffset = pos;
    for (let node4 = doc4; ; ) {
      let { index: index7, offset: offset3 } = node4.content.findIndex(parentOffset);
      let rem = parentOffset - offset3;
      path3.push(node4, index7, start2 + offset3);
      if (!rem)
        break;
      node4 = node4.child(index7);
      if (node4.isText)
        break;
      parentOffset = rem - 1;
      start2 += offset3 + 1;
    }
    return new ResolvedPos(pos, path3, parentOffset);
  }
  /**
  @internal
  */
  static resolveCached(doc4, pos) {
    for (let i = 0; i < resolveCache.length; i++) {
      let cached = resolveCache[i];
      if (cached.pos == pos && cached.doc == doc4)
        return cached;
    }
    let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc4, pos);
    resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
    return result;
  }
};
var resolveCache = [];
var resolveCachePos = 0;
var resolveCacheSize = 12;
var NodeRange = class {
  /**
  Construct a node range. `$from` and `$to` should point into the
  same node until at least the given `depth`, since a node range
  denotes an adjacent set of nodes in a single parent node.
  */
  constructor($from, $to, depth) {
    this.$from = $from;
    this.$to = $to;
    this.depth = depth;
  }
  /**
  The position at the start of the range.
  */
  get start() {
    return this.$from.before(this.depth + 1);
  }
  /**
  The position at the end of the range.
  */
  get end() {
    return this.$to.after(this.depth + 1);
  }
  /**
  The parent node that the range points into.
  */
  get parent() {
    return this.$from.node(this.depth);
  }
  /**
  The start index of the range in the parent node.
  */
  get startIndex() {
    return this.$from.index(this.depth);
  }
  /**
  The end index of the range in the parent node.
  */
  get endIndex() {
    return this.$to.indexAfter(this.depth);
  }
};
var emptyAttrs = /* @__PURE__ */ Object.create(null);
var Node = class {
  /**
  @internal
  */
  constructor(type, attrs, content5, marks = Mark.none) {
    this.type = type;
    this.attrs = attrs;
    this.marks = marks;
    this.content = content5 || Fragment.empty;
  }
  /**
  The size of this node, as defined by the integer-based [indexing
  scheme](/docs/guide/#doc.indexing). For text nodes, this is the
  amount of characters. For other leaf nodes, it is one. For
  non-leaf nodes, it is the size of the content plus two (the
  start and end token).
  */
  get nodeSize() {
    return this.isLeaf ? 1 : 2 + this.content.size;
  }
  /**
  The number of children that the node has.
  */
  get childCount() {
    return this.content.childCount;
  }
  /**
  Get the child node at the given index. Raises an error when the
  index is out of range.
  */
  child(index7) {
    return this.content.child(index7);
  }
  /**
  Get the child node at the given index, if it exists.
  */
  maybeChild(index7) {
    return this.content.maybeChild(index7);
  }
  /**
  Call `f` for every child node, passing the node, its offset
  into this parent node, and its index.
  */
  forEach(f2) {
    this.content.forEach(f2);
  }
  /**
  Invoke a callback for all descendant nodes recursively between
  the given two positions that are relative to start of this
  node's content. The callback is invoked with the node, its
  position relative to the original node (method receiver),
  its parent node, and its child index. When the callback returns
  false for a given node, that node's children will not be
  recursed over. The last parameter can be used to specify a
  starting position to count from.
  */
  nodesBetween(from5, to3, f2, startPos = 0) {
    this.content.nodesBetween(from5, to3, f2, startPos, this);
  }
  /**
  Call the given callback for every descendant node. Doesn't
  descend into a node when the callback returns `false`.
  */
  descendants(f2) {
    this.nodesBetween(0, this.content.size, f2);
  }
  /**
  Concatenates all the text nodes found in this fragment and its
  children.
  */
  get textContent() {
    return this.isLeaf && this.type.spec.leafText ? this.type.spec.leafText(this) : this.textBetween(0, this.content.size, "");
  }
  /**
  Get all text between positions `from` and `to`. When
  `blockSeparator` is given, it will be inserted to separate text
  from different block nodes. If `leafText` is given, it'll be
  inserted for every non-text leaf node encountered, otherwise
  [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
  */
  textBetween(from5, to3, blockSeparator, leafText) {
    return this.content.textBetween(from5, to3, blockSeparator, leafText);
  }
  /**
  Returns this node's first child, or `null` if there are no
  children.
  */
  get firstChild() {
    return this.content.firstChild;
  }
  /**
  Returns this node's last child, or `null` if there are no
  children.
  */
  get lastChild() {
    return this.content.lastChild;
  }
  /**
  Test whether two nodes represent the same piece of document.
  */
  eq(other) {
    return this == other || this.sameMarkup(other) && this.content.eq(other.content);
  }
  /**
  Compare the markup (type, attributes, and marks) of this node to
  those of another. Returns `true` if both have the same markup.
  */
  sameMarkup(other) {
    return this.hasMarkup(other.type, other.attrs, other.marks);
  }
  /**
  Check whether this node's markup correspond to the given type,
  attributes, and marks.
  */
  hasMarkup(type, attrs, marks) {
    return this.type == type && compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) && Mark.sameSet(this.marks, marks || Mark.none);
  }
  /**
  Create a new node with the same markup as this node, containing
  the given content (or empty, if no content is given).
  */
  copy(content5 = null) {
    if (content5 == this.content)
      return this;
    return new Node(this.type, this.attrs, content5, this.marks);
  }
  /**
  Create a copy of this node, with the given set of marks instead
  of the node's own marks.
  */
  mark(marks) {
    return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);
  }
  /**
  Create a copy of this node with only the content between the
  given positions. If `to` is not given, it defaults to the end of
  the node.
  */
  cut(from5, to3 = this.content.size) {
    if (from5 == 0 && to3 == this.content.size)
      return this;
    return this.copy(this.content.cut(from5, to3));
  }
  /**
  Cut out the part of the document between the given positions, and
  return it as a `Slice` object.
  */
  slice(from5, to3 = this.content.size, includeParents = false) {
    if (from5 == to3)
      return Slice.empty;
    let $from = this.resolve(from5), $to = this.resolve(to3);
    let depth = includeParents ? 0 : $from.sharedDepth(to3);
    let start2 = $from.start(depth), node4 = $from.node(depth);
    let content5 = node4.content.cut($from.pos - start2, $to.pos - start2);
    return new Slice(content5, $from.depth - depth, $to.depth - depth);
  }
  /**
  Replace the part of the document between the given positions with
  the given slice. The slice must 'fit', meaning its open sides
  must be able to connect to the surrounding content, and its
  content nodes must be valid children for the node they are placed
  into. If any of this is violated, an error of type
  [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
  */
  replace(from5, to3, slice3) {
    return replace(this.resolve(from5), this.resolve(to3), slice3);
  }
  /**
  Find the node directly after the given position.
  */
  nodeAt(pos) {
    for (let node4 = this; ; ) {
      let { index: index7, offset: offset3 } = node4.content.findIndex(pos);
      node4 = node4.maybeChild(index7);
      if (!node4)
        return null;
      if (offset3 == pos || node4.isText)
        return node4;
      pos -= offset3 + 1;
    }
  }
  /**
  Find the (direct) child node after the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childAfter(pos) {
    let { index: index7, offset: offset3 } = this.content.findIndex(pos);
    return { node: this.content.maybeChild(index7), index: index7, offset: offset3 };
  }
  /**
  Find the (direct) child node before the given offset, if any,
  and return it along with its index and offset relative to this
  node.
  */
  childBefore(pos) {
    if (pos == 0)
      return { node: null, index: 0, offset: 0 };
    let { index: index7, offset: offset3 } = this.content.findIndex(pos);
    if (offset3 < pos)
      return { node: this.content.child(index7), index: index7, offset: offset3 };
    let node4 = this.content.child(index7 - 1);
    return { node: node4, index: index7 - 1, offset: offset3 - node4.nodeSize };
  }
  /**
  Resolve the given position in the document, returning an
  [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
  */
  resolve(pos) {
    return ResolvedPos.resolveCached(this, pos);
  }
  /**
  @internal
  */
  resolveNoCache(pos) {
    return ResolvedPos.resolve(this, pos);
  }
  /**
  Test whether a given mark or mark type occurs in this document
  between the two given positions.
  */
  rangeHasMark(from5, to3, type) {
    let found2 = false;
    if (to3 > from5)
      this.nodesBetween(from5, to3, (node4) => {
        if (type.isInSet(node4.marks))
          found2 = true;
        return !found2;
      });
    return found2;
  }
  /**
  True when this is a block (non-inline node)
  */
  get isBlock() {
    return this.type.isBlock;
  }
  /**
  True when this is a textblock node, a block node with inline
  content.
  */
  get isTextblock() {
    return this.type.isTextblock;
  }
  /**
  True when this node allows inline content.
  */
  get inlineContent() {
    return this.type.inlineContent;
  }
  /**
  True when this is an inline node (a text node or a node that can
  appear among text).
  */
  get isInline() {
    return this.type.isInline;
  }
  /**
  True when this is a text node.
  */
  get isText() {
    return this.type.isText;
  }
  /**
  True when this is a leaf node.
  */
  get isLeaf() {
    return this.type.isLeaf;
  }
  /**
  True when this is an atom, i.e. when it does not have directly
  editable content. This is usually the same as `isLeaf`, but can
  be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
  on a node's spec (typically used when the node is displayed as
  an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
  */
  get isAtom() {
    return this.type.isAtom;
  }
  /**
  Return a string representation of this node for debugging
  purposes.
  */
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    let name = this.type.name;
    if (this.content.size)
      name += "(" + this.content.toStringInner() + ")";
    return wrapMarks(this.marks, name);
  }
  /**
  Get the content match in this node at the given index.
  */
  contentMatchAt(index7) {
    let match2 = this.type.contentMatch.matchFragment(this.content, 0, index7);
    if (!match2)
      throw new Error("Called contentMatchAt on a node with invalid content");
    return match2;
  }
  /**
  Test whether replacing the range between `from` and `to` (by
  child index) with the given replacement fragment (which defaults
  to the empty fragment) would leave the node's content valid. You
  can optionally pass `start` and `end` indices into the
  replacement fragment.
  */
  canReplace(from5, to3, replacement = Fragment.empty, start2 = 0, end2 = replacement.childCount) {
    let one7 = this.contentMatchAt(from5).matchFragment(replacement, start2, end2);
    let two = one7 && one7.matchFragment(this.content, to3);
    if (!two || !two.validEnd)
      return false;
    for (let i = start2; i < end2; i++)
      if (!this.type.allowsMarks(replacement.child(i).marks))
        return false;
    return true;
  }
  /**
  Test whether replacing the range `from` to `to` (by index) with
  a node of the given type would leave the node's content valid.
  */
  canReplaceWith(from5, to3, type, marks) {
    if (marks && !this.type.allowsMarks(marks))
      return false;
    let start2 = this.contentMatchAt(from5).matchType(type);
    let end2 = start2 && start2.matchFragment(this.content, to3);
    return end2 ? end2.validEnd : false;
  }
  /**
  Test whether the given node's content could be appended to this
  node. If that node is empty, this will only return true if there
  is at least one node type that can appear in both nodes (to avoid
  merging completely incompatible nodes).
  */
  canAppend(other) {
    if (other.content.size)
      return this.canReplace(this.childCount, this.childCount, other.content);
    else
      return this.type.compatibleContent(other.type);
  }
  /**
  Check whether this node and its descendants conform to the
  schema, and raise error when they do not.
  */
  check() {
    this.type.checkContent(this.content);
    let copy4 = Mark.none;
    for (let i = 0; i < this.marks.length; i++)
      copy4 = this.marks[i].addToSet(copy4);
    if (!Mark.sameSet(copy4, this.marks))
      throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map((m) => m.type.name)}`);
    this.content.forEach((node4) => node4.check());
  }
  /**
  Return a JSON-serializeable representation of this node.
  */
  toJSON() {
    let obj = { type: this.type.name };
    for (let _2 in this.attrs) {
      obj.attrs = this.attrs;
      break;
    }
    if (this.content.size)
      obj.content = this.content.toJSON();
    if (this.marks.length)
      obj.marks = this.marks.map((n) => n.toJSON());
    return obj;
  }
  /**
  Deserialize a node from its JSON representation.
  */
  static fromJSON(schema, json) {
    if (!json)
      throw new RangeError("Invalid input for Node.fromJSON");
    let marks = null;
    if (json.marks) {
      if (!Array.isArray(json.marks))
        throw new RangeError("Invalid mark data for Node.fromJSON");
      marks = json.marks.map(schema.markFromJSON);
    }
    if (json.type == "text") {
      if (typeof json.text != "string")
        throw new RangeError("Invalid text node in JSON");
      return schema.text(json.text, marks);
    }
    let content5 = Fragment.fromJSON(schema, json.content);
    return schema.nodeType(json.type).create(json.attrs, content5, marks);
  }
};
Node.prototype.text = void 0;
var TextNode = class extends Node {
  /**
  @internal
  */
  constructor(type, attrs, content5, marks) {
    super(type, attrs, null, marks);
    if (!content5)
      throw new RangeError("Empty text nodes are not allowed");
    this.text = content5;
  }
  toString() {
    if (this.type.spec.toDebugString)
      return this.type.spec.toDebugString(this);
    return wrapMarks(this.marks, JSON.stringify(this.text));
  }
  get textContent() {
    return this.text;
  }
  textBetween(from5, to3) {
    return this.text.slice(from5, to3);
  }
  get nodeSize() {
    return this.text.length;
  }
  mark(marks) {
    return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
  }
  withText(text10) {
    if (text10 == this.text)
      return this;
    return new TextNode(this.type, this.attrs, text10, this.marks);
  }
  cut(from5 = 0, to3 = this.text.length) {
    if (from5 == 0 && to3 == this.text.length)
      return this;
    return this.withText(this.text.slice(from5, to3));
  }
  eq(other) {
    return this.sameMarkup(other) && this.text == other.text;
  }
  toJSON() {
    let base5 = super.toJSON();
    base5.text = this.text;
    return base5;
  }
};
function wrapMarks(marks, str) {
  for (let i = marks.length - 1; i >= 0; i--)
    str = marks[i].type.name + "(" + str + ")";
  return str;
}
var ContentMatch = class {
  /**
  @internal
  */
  constructor(validEnd) {
    this.validEnd = validEnd;
    this.next = [];
    this.wrapCache = [];
  }
  /**
  @internal
  */
  static parse(string3, nodeTypes) {
    let stream = new TokenStream(string3, nodeTypes);
    if (stream.next == null)
      return ContentMatch.empty;
    let expr = parseExpr(stream);
    if (stream.next)
      stream.err("Unexpected trailing text");
    let match2 = dfa(nfa(expr));
    checkForDeadEnds(match2, stream);
    return match2;
  }
  /**
  Match a node type, returning a match after that node if
  successful.
  */
  matchType(type) {
    for (let i = 0; i < this.next.length; i++)
      if (this.next[i].type == type)
        return this.next[i].next;
    return null;
  }
  /**
  Try to match a fragment. Returns the resulting match when
  successful.
  */
  matchFragment(frag, start2 = 0, end2 = frag.childCount) {
    let cur = this;
    for (let i = start2; cur && i < end2; i++)
      cur = cur.matchType(frag.child(i).type);
    return cur;
  }
  /**
  @internal
  */
  get inlineContent() {
    return this.next.length != 0 && this.next[0].type.isInline;
  }
  /**
  Get the first matching node type at this match position that can
  be generated.
  */
  get defaultType() {
    for (let i = 0; i < this.next.length; i++) {
      let { type } = this.next[i];
      if (!(type.isText || type.hasRequiredAttrs()))
        return type;
    }
    return null;
  }
  /**
  @internal
  */
  compatible(other) {
    for (let i = 0; i < this.next.length; i++)
      for (let j = 0; j < other.next.length; j++)
        if (this.next[i].type == other.next[j].type)
          return true;
    return false;
  }
  /**
  Try to match the given fragment, and if that fails, see if it can
  be made to match by inserting nodes in front of it. When
  successful, return a fragment of inserted nodes (which may be
  empty if nothing had to be inserted). When `toEnd` is true, only
  return a fragment if the resulting match goes to the end of the
  content expression.
  */
  fillBefore(after, toEnd = false, startIndex = 0) {
    let seen = [this];
    function search3(match2, types2) {
      let finished = match2.matchFragment(after, startIndex);
      if (finished && (!toEnd || finished.validEnd))
        return Fragment.from(types2.map((tp) => tp.createAndFill()));
      for (let i = 0; i < match2.next.length; i++) {
        let { type, next: next2 } = match2.next[i];
        if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next2) == -1) {
          seen.push(next2);
          let found2 = search3(next2, types2.concat(type));
          if (found2)
            return found2;
        }
      }
      return null;
    }
    return search3(this, []);
  }
  /**
  Find a set of wrapping node types that would allow a node of the
  given type to appear at this position. The result may be empty
  (when it fits directly) and will be null when no such wrapping
  exists.
  */
  findWrapping(target) {
    for (let i = 0; i < this.wrapCache.length; i += 2)
      if (this.wrapCache[i] == target)
        return this.wrapCache[i + 1];
    let computed = this.computeWrapping(target);
    this.wrapCache.push(target, computed);
    return computed;
  }
  /**
  @internal
  */
  computeWrapping(target) {
    let seen = /* @__PURE__ */ Object.create(null), active = [{ match: this, type: null, via: null }];
    while (active.length) {
      let current = active.shift(), match2 = current.match;
      if (match2.matchType(target)) {
        let result = [];
        for (let obj = current; obj.type; obj = obj.via)
          result.push(obj.type);
        return result.reverse();
      }
      for (let i = 0; i < match2.next.length; i++) {
        let { type, next: next2 } = match2.next[i];
        if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next2.validEnd)) {
          active.push({ match: type.contentMatch, type, via: current });
          seen[type.name] = true;
        }
      }
    }
    return null;
  }
  /**
  The number of outgoing edges this node has in the finite
  automaton that describes the content expression.
  */
  get edgeCount() {
    return this.next.length;
  }
  /**
  Get the _n_​th outgoing edge from this node in the finite
  automaton that describes the content expression.
  */
  edge(n) {
    if (n >= this.next.length)
      throw new RangeError(`There's no ${n}th edge in this content match`);
    return this.next[n];
  }
  /**
  @internal
  */
  toString() {
    let seen = [];
    function scan(m) {
      seen.push(m);
      for (let i = 0; i < m.next.length; i++)
        if (seen.indexOf(m.next[i].next) == -1)
          scan(m.next[i].next);
    }
    scan(this);
    return seen.map((m, i) => {
      let out = i + (m.validEnd ? "*" : " ") + " ";
      for (let i2 = 0; i2 < m.next.length; i2++)
        out += (i2 ? ", " : "") + m.next[i2].type.name + "->" + seen.indexOf(m.next[i2].next);
      return out;
    }).join("\n");
  }
};
ContentMatch.empty = new ContentMatch(true);
var TokenStream = class {
  constructor(string3, nodeTypes) {
    this.string = string3;
    this.nodeTypes = nodeTypes;
    this.inline = null;
    this.pos = 0;
    this.tokens = string3.split(/\s*(?=\b|\W|$)/);
    if (this.tokens[this.tokens.length - 1] == "")
      this.tokens.pop();
    if (this.tokens[0] == "")
      this.tokens.shift();
  }
  get next() {
    return this.tokens[this.pos];
  }
  eat(tok) {
    return this.next == tok && (this.pos++ || true);
  }
  err(str) {
    throw new SyntaxError(str + " (in content expression '" + this.string + "')");
  }
};
function parseExpr(stream) {
  let exprs = [];
  do {
    exprs.push(parseExprSeq(stream));
  } while (stream.eat("|"));
  return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
}
function parseExprSeq(stream) {
  let exprs = [];
  do {
    exprs.push(parseExprSubscript(stream));
  } while (stream.next && stream.next != ")" && stream.next != "|");
  return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
}
function parseExprSubscript(stream) {
  let expr = parseExprAtom(stream);
  for (; ; ) {
    if (stream.eat("+"))
      expr = { type: "plus", expr };
    else if (stream.eat("*"))
      expr = { type: "star", expr };
    else if (stream.eat("?"))
      expr = { type: "opt", expr };
    else if (stream.eat("{"))
      expr = parseExprRange(stream, expr);
    else
      break;
  }
  return expr;
}
function parseNum(stream) {
  if (/\D/.test(stream.next))
    stream.err("Expected number, got '" + stream.next + "'");
  let result = Number(stream.next);
  stream.pos++;
  return result;
}
function parseExprRange(stream, expr) {
  let min5 = parseNum(stream), max5 = min5;
  if (stream.eat(",")) {
    if (stream.next != "}")
      max5 = parseNum(stream);
    else
      max5 = -1;
  }
  if (!stream.eat("}"))
    stream.err("Unclosed braced range");
  return { type: "range", min: min5, max: max5, expr };
}
function resolveName(stream, name) {
  let types2 = stream.nodeTypes, type = types2[name];
  if (type)
    return [type];
  let result = [];
  for (let typeName in types2) {
    let type2 = types2[typeName];
    if (type2.groups.indexOf(name) > -1)
      result.push(type2);
  }
  if (result.length == 0)
    stream.err("No node type or group '" + name + "' found");
  return result;
}
function parseExprAtom(stream) {
  if (stream.eat("(")) {
    let expr = parseExpr(stream);
    if (!stream.eat(")"))
      stream.err("Missing closing paren");
    return expr;
  } else if (!/\W/.test(stream.next)) {
    let exprs = resolveName(stream, stream.next).map((type) => {
      if (stream.inline == null)
        stream.inline = type.isInline;
      else if (stream.inline != type.isInline)
        stream.err("Mixing inline and block content");
      return { type: "name", value: type };
    });
    stream.pos++;
    return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
  } else {
    stream.err("Unexpected token '" + stream.next + "'");
  }
}
function nfa(expr) {
  let nfa2 = [[]];
  connect(compile2(expr, 0), node4());
  return nfa2;
  function node4() {
    return nfa2.push([]) - 1;
  }
  function edge(from5, to3, term) {
    let edge2 = { term, to: to3 };
    nfa2[from5].push(edge2);
    return edge2;
  }
  function connect(edges, to3) {
    edges.forEach((edge2) => edge2.to = to3);
  }
  function compile2(expr2, from5) {
    if (expr2.type == "choice") {
      return expr2.exprs.reduce((out, expr3) => out.concat(compile2(expr3, from5)), []);
    } else if (expr2.type == "seq") {
      for (let i = 0; ; i++) {
        let next2 = compile2(expr2.exprs[i], from5);
        if (i == expr2.exprs.length - 1)
          return next2;
        connect(next2, from5 = node4());
      }
    } else if (expr2.type == "star") {
      let loop = node4();
      edge(from5, loop);
      connect(compile2(expr2.expr, loop), loop);
      return [edge(loop)];
    } else if (expr2.type == "plus") {
      let loop = node4();
      connect(compile2(expr2.expr, from5), loop);
      connect(compile2(expr2.expr, loop), loop);
      return [edge(loop)];
    } else if (expr2.type == "opt") {
      return [edge(from5)].concat(compile2(expr2.expr, from5));
    } else if (expr2.type == "range") {
      let cur = from5;
      for (let i = 0; i < expr2.min; i++) {
        let next2 = node4();
        connect(compile2(expr2.expr, cur), next2);
        cur = next2;
      }
      if (expr2.max == -1) {
        connect(compile2(expr2.expr, cur), cur);
      } else {
        for (let i = expr2.min; i < expr2.max; i++) {
          let next2 = node4();
          edge(cur, next2);
          connect(compile2(expr2.expr, cur), next2);
          cur = next2;
        }
      }
      return [edge(cur)];
    } else if (expr2.type == "name") {
      return [edge(from5, void 0, expr2.value)];
    } else {
      throw new Error("Unknown expr type");
    }
  }
}
function cmp(a2, b2) {
  return b2 - a2;
}
function nullFrom(nfa2, node4) {
  let result = [];
  scan(node4);
  return result.sort(cmp);
  function scan(node5) {
    let edges = nfa2[node5];
    if (edges.length == 1 && !edges[0].term)
      return scan(edges[0].to);
    result.push(node5);
    for (let i = 0; i < edges.length; i++) {
      let { term, to: to3 } = edges[i];
      if (!term && result.indexOf(to3) == -1)
        scan(to3);
    }
  }
}
function dfa(nfa2) {
  let labeled = /* @__PURE__ */ Object.create(null);
  return explore(nullFrom(nfa2, 0));
  function explore(states) {
    let out = [];
    states.forEach((node4) => {
      nfa2[node4].forEach(({ term, to: to3 }) => {
        if (!term)
          return;
        let set;
        for (let i = 0; i < out.length; i++)
          if (out[i][0] == term)
            set = out[i][1];
        nullFrom(nfa2, to3).forEach((node5) => {
          if (!set)
            out.push([term, set = []]);
          if (set.indexOf(node5) == -1)
            set.push(node5);
        });
      });
    });
    let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa2.length - 1) > -1);
    for (let i = 0; i < out.length; i++) {
      let states2 = out[i][1].sort(cmp);
      state.next.push({ type: out[i][0], next: labeled[states2.join(",")] || explore(states2) });
    }
    return state;
  }
}
function checkForDeadEnds(match2, stream) {
  for (let i = 0, work = [match2]; i < work.length; i++) {
    let state = work[i], dead = !state.validEnd, nodes = [];
    for (let j = 0; j < state.next.length; j++) {
      let { type, next: next2 } = state.next[j];
      nodes.push(type.name);
      if (dead && !(type.isText || type.hasRequiredAttrs()))
        dead = false;
      if (work.indexOf(next2) == -1)
        work.push(next2);
    }
    if (dead)
      stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
  }
}
function defaultAttrs(attrs) {
  let defaults2 = /* @__PURE__ */ Object.create(null);
  for (let attrName in attrs) {
    let attr = attrs[attrName];
    if (!attr.hasDefault)
      return null;
    defaults2[attrName] = attr.default;
  }
  return defaults2;
}
function computeAttrs(attrs, value) {
  let built = /* @__PURE__ */ Object.create(null);
  for (let name in attrs) {
    let given = value && value[name];
    if (given === void 0) {
      let attr = attrs[name];
      if (attr.hasDefault)
        given = attr.default;
      else
        throw new RangeError("No value supplied for attribute " + name);
    }
    built[name] = given;
  }
  return built;
}
function initAttrs(attrs) {
  let result = /* @__PURE__ */ Object.create(null);
  if (attrs)
    for (let name in attrs)
      result[name] = new Attribute(attrs[name]);
  return result;
}
var NodeType = class {
  /**
  @internal
  */
  constructor(name, schema, spec) {
    this.name = name;
    this.schema = schema;
    this.spec = spec;
    this.markSet = null;
    this.groups = spec.group ? spec.group.split(" ") : [];
    this.attrs = initAttrs(spec.attrs);
    this.defaultAttrs = defaultAttrs(this.attrs);
    this.contentMatch = null;
    this.inlineContent = null;
    this.isBlock = !(spec.inline || name == "text");
    this.isText = name == "text";
  }
  /**
  True if this is an inline type.
  */
  get isInline() {
    return !this.isBlock;
  }
  /**
  True if this is a textblock type, a block that contains inline
  content.
  */
  get isTextblock() {
    return this.isBlock && this.inlineContent;
  }
  /**
  True for node types that allow no content.
  */
  get isLeaf() {
    return this.contentMatch == ContentMatch.empty;
  }
  /**
  True when this node is an atom, i.e. when it does not have
  directly editable content.
  */
  get isAtom() {
    return this.isLeaf || !!this.spec.atom;
  }
  /**
  The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
  */
  get whitespace() {
    return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
  }
  /**
  Tells you whether this node type has any required attributes.
  */
  hasRequiredAttrs() {
    for (let n in this.attrs)
      if (this.attrs[n].isRequired)
        return true;
    return false;
  }
  /**
  Indicates whether this node allows some of the same content as
  the given node type.
  */
  compatibleContent(other) {
    return this == other || this.contentMatch.compatible(other.contentMatch);
  }
  /**
  @internal
  */
  computeAttrs(attrs) {
    if (!attrs && this.defaultAttrs)
      return this.defaultAttrs;
    else
      return computeAttrs(this.attrs, attrs);
  }
  /**
  Create a `Node` of this type. The given attributes are
  checked and defaulted (you can pass `null` to use the type's
  defaults entirely, if no required attributes exist). `content`
  may be a `Fragment`, a node, an array of nodes, or
  `null`. Similarly `marks` may be `null` to default to the empty
  set of marks.
  */
  create(attrs = null, content5, marks) {
    if (this.isText)
      throw new Error("NodeType.create can't construct text nodes");
    return new Node(this, this.computeAttrs(attrs), Fragment.from(content5), Mark.setFrom(marks));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
  against the node type's content restrictions, and throw an error
  if it doesn't match.
  */
  createChecked(attrs = null, content5, marks) {
    content5 = Fragment.from(content5);
    this.checkContent(content5);
    return new Node(this, this.computeAttrs(attrs), content5, Mark.setFrom(marks));
  }
  /**
  Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
  necessary to add nodes to the start or end of the given fragment
  to make it fit the node. If no fitting wrapping can be found,
  return null. Note that, due to the fact that required nodes can
  always be created, this will always succeed if you pass null or
  `Fragment.empty` as content.
  */
  createAndFill(attrs = null, content5, marks) {
    attrs = this.computeAttrs(attrs);
    content5 = Fragment.from(content5);
    if (content5.size) {
      let before = this.contentMatch.fillBefore(content5);
      if (!before)
        return null;
      content5 = before.append(content5);
    }
    let matched = this.contentMatch.matchFragment(content5);
    let after = matched && matched.fillBefore(Fragment.empty, true);
    if (!after)
      return null;
    return new Node(this, attrs, content5.append(after), Mark.setFrom(marks));
  }
  /**
  Returns true if the given fragment is valid content for this node
  type with the given attributes.
  */
  validContent(content5) {
    let result = this.contentMatch.matchFragment(content5);
    if (!result || !result.validEnd)
      return false;
    for (let i = 0; i < content5.childCount; i++)
      if (!this.allowsMarks(content5.child(i).marks))
        return false;
    return true;
  }
  /**
  Throws a RangeError if the given fragment is not valid content for this
  node type.
  @internal
  */
  checkContent(content5) {
    if (!this.validContent(content5))
      throw new RangeError(`Invalid content for node ${this.name}: ${content5.toString().slice(0, 50)}`);
  }
  /**
  Check whether the given mark type is allowed in this node.
  */
  allowsMarkType(markType) {
    return this.markSet == null || this.markSet.indexOf(markType) > -1;
  }
  /**
  Test whether the given set of marks are allowed in this node.
  */
  allowsMarks(marks) {
    if (this.markSet == null)
      return true;
    for (let i = 0; i < marks.length; i++)
      if (!this.allowsMarkType(marks[i].type))
        return false;
    return true;
  }
  /**
  Removes the marks that are not allowed in this node from the given set.
  */
  allowedMarks(marks) {
    if (this.markSet == null)
      return marks;
    let copy4;
    for (let i = 0; i < marks.length; i++) {
      if (!this.allowsMarkType(marks[i].type)) {
        if (!copy4)
          copy4 = marks.slice(0, i);
      } else if (copy4) {
        copy4.push(marks[i]);
      }
    }
    return !copy4 ? marks : copy4.length ? copy4 : Mark.none;
  }
  /**
  @internal
  */
  static compile(nodes, schema) {
    let result = /* @__PURE__ */ Object.create(null);
    nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));
    let topType = schema.spec.topNode || "doc";
    if (!result[topType])
      throw new RangeError("Schema is missing its top node type ('" + topType + "')");
    if (!result.text)
      throw new RangeError("Every schema needs a 'text' type");
    for (let _2 in result.text.attrs)
      throw new RangeError("The text node type should not have attributes");
    return result;
  }
};
var Attribute = class {
  constructor(options2) {
    this.hasDefault = Object.prototype.hasOwnProperty.call(options2, "default");
    this.default = options2.default;
  }
  get isRequired() {
    return !this.hasDefault;
  }
};
var MarkType = class {
  /**
  @internal
  */
  constructor(name, rank, schema, spec) {
    this.name = name;
    this.rank = rank;
    this.schema = schema;
    this.spec = spec;
    this.attrs = initAttrs(spec.attrs);
    this.excluded = null;
    let defaults2 = defaultAttrs(this.attrs);
    this.instance = defaults2 ? new Mark(this, defaults2) : null;
  }
  /**
  Create a mark of this type. `attrs` may be `null` or an object
  containing only some of the mark's attributes. The others, if
  they have defaults, will be added.
  */
  create(attrs = null) {
    if (!attrs && this.instance)
      return this.instance;
    return new Mark(this, computeAttrs(this.attrs, attrs));
  }
  /**
  @internal
  */
  static compile(marks, schema) {
    let result = /* @__PURE__ */ Object.create(null), rank = 0;
    marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));
    return result;
  }
  /**
  When there is a mark of this type in the given set, a new set
  without it is returned. Otherwise, the input set is returned.
  */
  removeFromSet(set) {
    for (var i = 0; i < set.length; i++)
      if (set[i].type == this) {
        set = set.slice(0, i).concat(set.slice(i + 1));
        i--;
      }
    return set;
  }
  /**
  Tests whether there is a mark of this type in the given set.
  */
  isInSet(set) {
    for (let i = 0; i < set.length; i++)
      if (set[i].type == this)
        return set[i];
  }
  /**
  Queries whether a given mark type is
  [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
  */
  excludes(other) {
    return this.excluded.indexOf(other) > -1;
  }
};
var Schema = class {
  /**
  Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
  */
  constructor(spec) {
    this.cached = /* @__PURE__ */ Object.create(null);
    let instanceSpec = this.spec = {};
    for (let prop in spec)
      instanceSpec[prop] = spec[prop];
    instanceSpec.nodes = dist_default.from(spec.nodes), instanceSpec.marks = dist_default.from(spec.marks || {}), this.nodes = NodeType.compile(this.spec.nodes, this);
    this.marks = MarkType.compile(this.spec.marks, this);
    let contentExprCache = /* @__PURE__ */ Object.create(null);
    for (let prop in this.nodes) {
      if (prop in this.marks)
        throw new RangeError(prop + " can not be both a node and a mark");
      let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
      type.contentMatch = contentExprCache[contentExpr] || (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
      type.inlineContent = type.contentMatch.inlineContent;
      type.markSet = markExpr == "_" ? null : markExpr ? gatherMarks(this, markExpr.split(" ")) : markExpr == "" || !type.inlineContent ? [] : null;
    }
    for (let prop in this.marks) {
      let type = this.marks[prop], excl = type.spec.excludes;
      type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
    }
    this.nodeFromJSON = this.nodeFromJSON.bind(this);
    this.markFromJSON = this.markFromJSON.bind(this);
    this.topNodeType = this.nodes[this.spec.topNode || "doc"];
    this.cached.wrappings = /* @__PURE__ */ Object.create(null);
  }
  /**
  Create a node in this schema. The `type` may be a string or a
  `NodeType` instance. Attributes will be extended with defaults,
  `content` may be a `Fragment`, `null`, a `Node`, or an array of
  nodes.
  */
  node(type, attrs = null, content5, marks) {
    if (typeof type == "string")
      type = this.nodeType(type);
    else if (!(type instanceof NodeType))
      throw new RangeError("Invalid node type: " + type);
    else if (type.schema != this)
      throw new RangeError("Node type from different schema used (" + type.name + ")");
    return type.createChecked(attrs, content5, marks);
  }
  /**
  Create a text node in the schema. Empty text nodes are not
  allowed.
  */
  text(text10, marks) {
    let type = this.nodes.text;
    return new TextNode(type, type.defaultAttrs, text10, Mark.setFrom(marks));
  }
  /**
  Create a mark with the given type and attributes.
  */
  mark(type, attrs) {
    if (typeof type == "string")
      type = this.marks[type];
    return type.create(attrs);
  }
  /**
  Deserialize a node from its JSON representation. This method is
  bound.
  */
  nodeFromJSON(json) {
    return Node.fromJSON(this, json);
  }
  /**
  Deserialize a mark from its JSON representation. This method is
  bound.
  */
  markFromJSON(json) {
    return Mark.fromJSON(this, json);
  }
  /**
  @internal
  */
  nodeType(name) {
    let found2 = this.nodes[name];
    if (!found2)
      throw new RangeError("Unknown node type: " + name);
    return found2;
  }
};
function gatherMarks(schema, marks) {
  let found2 = [];
  for (let i = 0; i < marks.length; i++) {
    let name = marks[i], mark2 = schema.marks[name], ok3 = mark2;
    if (mark2) {
      found2.push(mark2);
    } else {
      for (let prop in schema.marks) {
        let mark3 = schema.marks[prop];
        if (name == "_" || mark3.spec.group && mark3.spec.group.split(" ").indexOf(name) > -1)
          found2.push(ok3 = mark3);
      }
    }
    if (!ok3)
      throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
  }
  return found2;
}
var DOMParser2 = class {
  /**
  Create a parser that targets the given schema, using the given
  parsing rules.
  */
  constructor(schema, rules) {
    this.schema = schema;
    this.rules = rules;
    this.tags = [];
    this.styles = [];
    rules.forEach((rule) => {
      if (rule.tag)
        this.tags.push(rule);
      else if (rule.style)
        this.styles.push(rule);
    });
    this.normalizeLists = !this.tags.some((r) => {
      if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
        return false;
      let node4 = schema.nodes[r.node];
      return node4.contentMatch.matchType(node4);
    });
  }
  /**
  Parse a document from the content of a DOM node.
  */
  parse(dom, options2 = {}) {
    let context = new ParseContext(this, options2, false);
    context.addAll(dom, options2.from, options2.to);
    return context.finish();
  }
  /**
  Parses the content of the given DOM node, like
  [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
  options. But unlike that method, which produces a whole node,
  this one returns a slice that is open at the sides, meaning that
  the schema constraints aren't applied to the start of nodes to
  the left of the input and the end of nodes at the end.
  */
  parseSlice(dom, options2 = {}) {
    let context = new ParseContext(this, options2, true);
    context.addAll(dom, options2.from, options2.to);
    return Slice.maxOpen(context.finish());
  }
  /**
  @internal
  */
  matchTag(dom, context, after) {
    for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
      let rule = this.tags[i];
      if (matches(dom, rule.tag) && (rule.namespace === void 0 || dom.namespaceURI == rule.namespace) && (!rule.context || context.matchesContext(rule.context))) {
        if (rule.getAttrs) {
          let result = rule.getAttrs(dom);
          if (result === false)
            continue;
          rule.attrs = result || void 0;
        }
        return rule;
      }
    }
  }
  /**
  @internal
  */
  matchStyle(prop, value, context, after) {
    for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
      let rule = this.styles[i], style3 = rule.style;
      if (style3.indexOf(prop) != 0 || rule.context && !context.matchesContext(rule.context) || // Test that the style string either precisely matches the prop,
      // or has an '=' sign after the prop, followed by the given
      // value.
      style3.length > prop.length && (style3.charCodeAt(prop.length) != 61 || style3.slice(prop.length + 1) != value))
        continue;
      if (rule.getAttrs) {
        let result = rule.getAttrs(value);
        if (result === false)
          continue;
        rule.attrs = result || void 0;
      }
      return rule;
    }
  }
  /**
  @internal
  */
  static schemaRules(schema) {
    let result = [];
    function insert(rule) {
      let priority = rule.priority == null ? 50 : rule.priority, i = 0;
      for (; i < result.length; i++) {
        let next2 = result[i], nextPriority = next2.priority == null ? 50 : next2.priority;
        if (nextPriority < priority)
          break;
      }
      result.splice(i, 0, rule);
    }
    for (let name in schema.marks) {
      let rules = schema.marks[name].spec.parseDOM;
      if (rules)
        rules.forEach((rule) => {
          insert(rule = copy(rule));
          if (!(rule.mark || rule.ignore || rule.clearMark))
            rule.mark = name;
        });
    }
    for (let name in schema.nodes) {
      let rules = schema.nodes[name].spec.parseDOM;
      if (rules)
        rules.forEach((rule) => {
          insert(rule = copy(rule));
          if (!(rule.node || rule.ignore || rule.mark))
            rule.node = name;
        });
    }
    return result;
  }
  /**
  Construct a DOM parser using the parsing rules listed in a
  schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
  [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
  */
  static fromSchema(schema) {
    return schema.cached.domParser || (schema.cached.domParser = new DOMParser2(schema, DOMParser2.schemaRules(schema)));
  }
};
var blockTags = {
  address: true,
  article: true,
  aside: true,
  blockquote: true,
  canvas: true,
  dd: true,
  div: true,
  dl: true,
  fieldset: true,
  figcaption: true,
  figure: true,
  footer: true,
  form: true,
  h1: true,
  h2: true,
  h3: true,
  h4: true,
  h5: true,
  h6: true,
  header: true,
  hgroup: true,
  hr: true,
  li: true,
  noscript: true,
  ol: true,
  output: true,
  p: true,
  pre: true,
  section: true,
  table: true,
  tfoot: true,
  ul: true
};
var ignoreTags = {
  head: true,
  noscript: true,
  object: true,
  script: true,
  style: true,
  title: true
};
var listTags = { ol: true, ul: true };
var OPT_PRESERVE_WS = 1;
var OPT_PRESERVE_WS_FULL = 2;
var OPT_OPEN_LEFT = 4;
function wsOptionsFor(type, preserveWhitespace, base5) {
  if (preserveWhitespace != null)
    return (preserveWhitespace ? OPT_PRESERVE_WS : 0) | (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
  return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base5 & ~OPT_OPEN_LEFT;
}
var NodeContext = class {
  constructor(type, attrs, marks, pendingMarks, solid, match2, options2) {
    this.type = type;
    this.attrs = attrs;
    this.marks = marks;
    this.pendingMarks = pendingMarks;
    this.solid = solid;
    this.options = options2;
    this.content = [];
    this.activeMarks = Mark.none;
    this.stashMarks = [];
    this.match = match2 || (options2 & OPT_OPEN_LEFT ? null : type.contentMatch);
  }
  findWrapping(node4) {
    if (!this.match) {
      if (!this.type)
        return [];
      let fill = this.type.contentMatch.fillBefore(Fragment.from(node4));
      if (fill) {
        this.match = this.type.contentMatch.matchFragment(fill);
      } else {
        let start2 = this.type.contentMatch, wrap5;
        if (wrap5 = start2.findWrapping(node4.type)) {
          this.match = start2;
          return wrap5;
        } else {
          return null;
        }
      }
    }
    return this.match.findWrapping(node4.type);
  }
  finish(openEnd) {
    if (!(this.options & OPT_PRESERVE_WS)) {
      let last2 = this.content[this.content.length - 1], m;
      if (last2 && last2.isText && (m = /[ \t\r\n\u000c]+$/.exec(last2.text))) {
        let text10 = last2;
        if (last2.text.length == m[0].length)
          this.content.pop();
        else
          this.content[this.content.length - 1] = text10.withText(text10.text.slice(0, text10.text.length - m[0].length));
      }
    }
    let content5 = Fragment.from(this.content);
    if (!openEnd && this.match)
      content5 = content5.append(this.match.fillBefore(Fragment.empty, true));
    return this.type ? this.type.create(this.attrs, content5, this.marks) : content5;
  }
  popFromStashMark(mark2) {
    for (let i = this.stashMarks.length - 1; i >= 0; i--)
      if (mark2.eq(this.stashMarks[i]))
        return this.stashMarks.splice(i, 1)[0];
  }
  applyPending(nextType) {
    for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {
      let mark2 = pending[i];
      if ((this.type ? this.type.allowsMarkType(mark2.type) : markMayApply(mark2.type, nextType)) && !mark2.isInSet(this.activeMarks)) {
        this.activeMarks = mark2.addToSet(this.activeMarks);
        this.pendingMarks = mark2.removeFromSet(this.pendingMarks);
      }
    }
  }
  inlineContext(node4) {
    if (this.type)
      return this.type.inlineContent;
    if (this.content.length)
      return this.content[0].isInline;
    return node4.parentNode && !blockTags.hasOwnProperty(node4.parentNode.nodeName.toLowerCase());
  }
};
var ParseContext = class {
  constructor(parser, options2, isOpen) {
    this.parser = parser;
    this.options = options2;
    this.isOpen = isOpen;
    this.open = 0;
    let topNode = options2.topNode, topContext;
    let topOptions = wsOptionsFor(null, options2.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
    if (topNode)
      topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options2.topMatch || topNode.type.contentMatch, topOptions);
    else if (isOpen)
      topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);
    else
      topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);
    this.nodes = [topContext];
    this.find = options2.findPositions;
    this.needsBlock = false;
  }
  get top() {
    return this.nodes[this.open];
  }
  // Add a DOM node to the content. Text is inserted as text node,
  // otherwise, the node is passed to `addElement` or, if it has a
  // `style` attribute, `addElementWithStyles`.
  addDOM(dom) {
    if (dom.nodeType == 3) {
      this.addTextNode(dom);
    } else if (dom.nodeType == 1) {
      let style3 = dom.getAttribute("style");
      if (!style3) {
        this.addElement(dom);
      } else {
        let marks = this.readStyles(parseStyles(style3));
        if (!marks)
          return;
        let [addMarks, removeMarks] = marks, top2 = this.top;
        for (let i = 0; i < removeMarks.length; i++)
          this.removePendingMark(removeMarks[i], top2);
        for (let i = 0; i < addMarks.length; i++)
          this.addPendingMark(addMarks[i]);
        this.addElement(dom);
        for (let i = 0; i < addMarks.length; i++)
          this.removePendingMark(addMarks[i], top2);
        for (let i = 0; i < removeMarks.length; i++)
          this.addPendingMark(removeMarks[i]);
      }
    }
  }
  addTextNode(dom) {
    let value = dom.nodeValue;
    let top2 = this.top;
    if (top2.options & OPT_PRESERVE_WS_FULL || top2.inlineContext(dom) || /[^ \t\r\n\u000c]/.test(value)) {
      if (!(top2.options & OPT_PRESERVE_WS)) {
        value = value.replace(/[ \t\r\n\u000c]+/g, " ");
        if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
          let nodeBefore = top2.content[top2.content.length - 1];
          let domNodeBefore = dom.previousSibling;
          if (!nodeBefore || domNodeBefore && domNodeBefore.nodeName == "BR" || nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text))
            value = value.slice(1);
        }
      } else if (!(top2.options & OPT_PRESERVE_WS_FULL)) {
        value = value.replace(/\r?\n|\r/g, " ");
      } else {
        value = value.replace(/\r\n?/g, "\n");
      }
      if (value)
        this.insertNode(this.parser.schema.text(value));
      this.findInText(dom);
    } else {
      this.findInside(dom);
    }
  }
  // Try to find a handler for the given tag and use that to parse. If
  // none is found, the element's content nodes are added directly.
  addElement(dom, matchAfter) {
    let name = dom.nodeName.toLowerCase(), ruleID;
    if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
      normalizeList(dom);
    let rule = this.options.ruleFromNode && this.options.ruleFromNode(dom) || (ruleID = this.parser.matchTag(dom, this, matchAfter));
    if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
      this.findInside(dom);
      this.ignoreFallback(dom);
    } else if (!rule || rule.skip || rule.closeParent) {
      if (rule && rule.closeParent)
        this.open = Math.max(0, this.open - 1);
      else if (rule && rule.skip.nodeType)
        dom = rule.skip;
      let sync, top2 = this.top, oldNeedsBlock = this.needsBlock;
      if (blockTags.hasOwnProperty(name)) {
        if (top2.content.length && top2.content[0].isInline && this.open) {
          this.open--;
          top2 = this.top;
        }
        sync = true;
        if (!top2.type)
          this.needsBlock = true;
      } else if (!dom.firstChild) {
        this.leafFallback(dom);
        return;
      }
      this.addAll(dom);
      if (sync)
        this.sync(top2);
      this.needsBlock = oldNeedsBlock;
    } else {
      this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : void 0);
    }
  }
  // Called for leaf DOM nodes that would otherwise be ignored
  leafFallback(dom) {
    if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
      this.addTextNode(dom.ownerDocument.createTextNode("\n"));
  }
  // Called for ignored nodes
  ignoreFallback(dom) {
    if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
      this.findPlace(this.parser.schema.text("-"));
  }
  // Run any style parser associated with the node's styles. Either
  // return an array of marks, or null to indicate some of the styles
  // had a rule with `ignore` set.
  readStyles(styles2) {
    let add = Mark.none, remove = Mark.none;
    for (let i = 0; i < styles2.length; i += 2) {
      for (let after = void 0; ; ) {
        let rule = this.parser.matchStyle(styles2[i], styles2[i + 1], this, after);
        if (!rule)
          break;
        if (rule.ignore)
          return null;
        if (rule.clearMark) {
          this.top.pendingMarks.concat(this.top.activeMarks).forEach((m) => {
            if (rule.clearMark(m))
              remove = m.addToSet(remove);
          });
        } else {
          add = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add);
        }
        if (rule.consuming === false)
          after = rule;
        else
          break;
      }
    }
    return [add, remove];
  }
  // Look up a handler for the given node. If none are found, return
  // false. Otherwise, apply it, use its return value to drive the way
  // the node's content is wrapped, and return true.
  addElementByRule(dom, rule, continueAfter) {
    let sync, nodeType, mark2;
    if (rule.node) {
      nodeType = this.parser.schema.nodes[rule.node];
      if (!nodeType.isLeaf) {
        sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
      } else if (!this.insertNode(nodeType.create(rule.attrs))) {
        this.leafFallback(dom);
      }
    } else {
      let markType = this.parser.schema.marks[rule.mark];
      mark2 = markType.create(rule.attrs);
      this.addPendingMark(mark2);
    }
    let startIn = this.top;
    if (nodeType && nodeType.isLeaf) {
      this.findInside(dom);
    } else if (continueAfter) {
      this.addElement(dom, continueAfter);
    } else if (rule.getContent) {
      this.findInside(dom);
      rule.getContent(dom, this.parser.schema).forEach((node4) => this.insertNode(node4));
    } else {
      let contentDOM = dom;
      if (typeof rule.contentElement == "string")
        contentDOM = dom.querySelector(rule.contentElement);
      else if (typeof rule.contentElement == "function")
        contentDOM = rule.contentElement(dom);
      else if (rule.contentElement)
        contentDOM = rule.contentElement;
      this.findAround(dom, contentDOM, true);
      this.addAll(contentDOM);
    }
    if (sync && this.sync(startIn))
      this.open--;
    if (mark2)
      this.removePendingMark(mark2, startIn);
  }
  // Add all child nodes between `startIndex` and `endIndex` (or the
  // whole node, if not given). If `sync` is passed, use it to
  // synchronize after every block element.
  addAll(parent, startIndex, endIndex) {
    let index7 = startIndex || 0;
    for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end2 = endIndex == null ? null : parent.childNodes[endIndex]; dom != end2; dom = dom.nextSibling, ++index7) {
      this.findAtPoint(parent, index7);
      this.addDOM(dom);
    }
    this.findAtPoint(parent, index7);
  }
  // Try to find a way to fit the given node type into the current
  // context. May add intermediate wrappers and/or leave non-solid
  // nodes that we're in.
  findPlace(node4) {
    let route, sync;
    for (let depth = this.open; depth >= 0; depth--) {
      let cx = this.nodes[depth];
      let found2 = cx.findWrapping(node4);
      if (found2 && (!route || route.length > found2.length)) {
        route = found2;
        sync = cx;
        if (!found2.length)
          break;
      }
      if (cx.solid)
        break;
    }
    if (!route)
      return false;
    this.sync(sync);
    for (let i = 0; i < route.length; i++)
      this.enterInner(route[i], null, false);
    return true;
  }
  // Try to insert the given node, adjusting the context when needed.
  insertNode(node4) {
    if (node4.isInline && this.needsBlock && !this.top.type) {
      let block2 = this.textblockFromContext();
      if (block2)
        this.enterInner(block2);
    }
    if (this.findPlace(node4)) {
      this.closeExtra();
      let top2 = this.top;
      top2.applyPending(node4.type);
      if (top2.match)
        top2.match = top2.match.matchType(node4.type);
      let marks = top2.activeMarks;
      for (let i = 0; i < node4.marks.length; i++)
        if (!top2.type || top2.type.allowsMarkType(node4.marks[i].type))
          marks = node4.marks[i].addToSet(marks);
      top2.content.push(node4.mark(marks));
      return true;
    }
    return false;
  }
  // Try to start a node of the given type, adjusting the context when
  // necessary.
  enter(type, attrs, preserveWS) {
    let ok3 = this.findPlace(type.create(attrs));
    if (ok3)
      this.enterInner(type, attrs, true, preserveWS);
    return ok3;
  }
  // Open a node of the given type
  enterInner(type, attrs = null, solid = false, preserveWS) {
    this.closeExtra();
    let top2 = this.top;
    top2.applyPending(type);
    top2.match = top2.match && top2.match.matchType(type);
    let options2 = wsOptionsFor(type, preserveWS, top2.options);
    if (top2.options & OPT_OPEN_LEFT && top2.content.length == 0)
      options2 |= OPT_OPEN_LEFT;
    this.nodes.push(new NodeContext(type, attrs, top2.activeMarks, top2.pendingMarks, solid, null, options2));
    this.open++;
  }
  // Make sure all nodes above this.open are finished and added to
  // their parents
  closeExtra(openEnd = false) {
    let i = this.nodes.length - 1;
    if (i > this.open) {
      for (; i > this.open; i--)
        this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
      this.nodes.length = this.open + 1;
    }
  }
  finish() {
    this.open = 0;
    this.closeExtra(this.isOpen);
    return this.nodes[0].finish(this.isOpen || this.options.topOpen);
  }
  sync(to3) {
    for (let i = this.open; i >= 0; i--)
      if (this.nodes[i] == to3) {
        this.open = i;
        return true;
      }
    return false;
  }
  get currentPos() {
    this.closeExtra();
    let pos = 0;
    for (let i = this.open; i >= 0; i--) {
      let content5 = this.nodes[i].content;
      for (let j = content5.length - 1; j >= 0; j--)
        pos += content5[j].nodeSize;
      if (i)
        pos++;
    }
    return pos;
  }
  findAtPoint(parent, offset3) {
    if (this.find)
      for (let i = 0; i < this.find.length; i++) {
        if (this.find[i].node == parent && this.find[i].offset == offset3)
          this.find[i].pos = this.currentPos;
      }
  }
  findInside(parent) {
    if (this.find)
      for (let i = 0; i < this.find.length; i++) {
        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
          this.find[i].pos = this.currentPos;
      }
  }
  findAround(parent, content5, before) {
    if (parent != content5 && this.find)
      for (let i = 0; i < this.find.length; i++) {
        if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
          let pos = content5.compareDocumentPosition(this.find[i].node);
          if (pos & (before ? 2 : 4))
            this.find[i].pos = this.currentPos;
        }
      }
  }
  findInText(textNode) {
    if (this.find)
      for (let i = 0; i < this.find.length; i++) {
        if (this.find[i].node == textNode)
          this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);
      }
  }
  // Determines whether the given context string matches this context.
  matchesContext(context) {
    if (context.indexOf("|") > -1)
      return context.split(/\s*\|\s*/).some(this.matchesContext, this);
    let parts = context.split("/");
    let option3 = this.options.context;
    let useRoot = !this.isOpen && (!option3 || option3.parent.type == this.nodes[0].type);
    let minDepth = -(option3 ? option3.depth + 1 : 0) + (useRoot ? 0 : 1);
    let match2 = (i, depth) => {
      for (; i >= 0; i--) {
        let part = parts[i];
        if (part == "") {
          if (i == parts.length - 1 || i == 0)
            continue;
          for (; depth >= minDepth; depth--)
            if (match2(i - 1, depth))
              return true;
          return false;
        } else {
          let next2 = depth > 0 || depth == 0 && useRoot ? this.nodes[depth].type : option3 && depth >= minDepth ? option3.node(depth - minDepth).type : null;
          if (!next2 || next2.name != part && next2.groups.indexOf(part) == -1)
            return false;
          depth--;
        }
      }
      return true;
    };
    return match2(parts.length - 1, this.open);
  }
  textblockFromContext() {
    let $context = this.options.context;
    if ($context)
      for (let d = $context.depth; d >= 0; d--) {
        let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
        if (deflt && deflt.isTextblock && deflt.defaultAttrs)
          return deflt;
      }
    for (let name in this.parser.schema.nodes) {
      let type = this.parser.schema.nodes[name];
      if (type.isTextblock && type.defaultAttrs)
        return type;
    }
  }
  addPendingMark(mark2) {
    let found2 = findSameMarkInSet(mark2, this.top.pendingMarks);
    if (found2)
      this.top.stashMarks.push(found2);
    this.top.pendingMarks = mark2.addToSet(this.top.pendingMarks);
  }
  removePendingMark(mark2, upto) {
    for (let depth = this.open; depth >= 0; depth--) {
      let level = this.nodes[depth];
      let found2 = level.pendingMarks.lastIndexOf(mark2);
      if (found2 > -1) {
        level.pendingMarks = mark2.removeFromSet(level.pendingMarks);
      } else {
        level.activeMarks = mark2.removeFromSet(level.activeMarks);
        let stashMark = level.popFromStashMark(mark2);
        if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
          level.activeMarks = stashMark.addToSet(level.activeMarks);
      }
      if (level == upto)
        break;
    }
  }
};
function normalizeList(dom) {
  for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
    let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
    if (name && listTags.hasOwnProperty(name) && prevItem) {
      prevItem.appendChild(child);
      child = prevItem;
    } else if (name == "li") {
      prevItem = child;
    } else if (name) {
      prevItem = null;
    }
  }
}
function matches(dom, selector) {
  return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
}
function parseStyles(style3) {
  let re2 = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
  while (m = re2.exec(style3))
    result.push(m[1], m[2].trim());
  return result;
}
function copy(obj) {
  let copy4 = {};
  for (let prop in obj)
    copy4[prop] = obj[prop];
  return copy4;
}
function markMayApply(markType, nodeType) {
  let nodes = nodeType.schema.nodes;
  for (let name in nodes) {
    let parent = nodes[name];
    if (!parent.allowsMarkType(markType))
      continue;
    let seen = [], scan = (match2) => {
      seen.push(match2);
      for (let i = 0; i < match2.edgeCount; i++) {
        let { type, next: next2 } = match2.edge(i);
        if (type == nodeType)
          return true;
        if (seen.indexOf(next2) < 0 && scan(next2))
          return true;
      }
    };
    if (scan(parent.contentMatch))
      return true;
  }
}
function findSameMarkInSet(mark2, set) {
  for (let i = 0; i < set.length; i++) {
    if (mark2.eq(set[i]))
      return set[i];
  }
}
var DOMSerializer = class {
  /**
  Create a serializer. `nodes` should map node names to functions
  that take a node and return a description of the corresponding
  DOM. `marks` does the same for mark names, but also gets an
  argument that tells it whether the mark's content is block or
  inline content (for typical use, it'll always be inline). A mark
  serializer may be `null` to indicate that marks of that type
  should not be serialized.
  */
  constructor(nodes, marks) {
    this.nodes = nodes;
    this.marks = marks;
  }
  /**
  Serialize the content of this fragment to a DOM fragment. When
  not in the browser, the `document` option, containing a DOM
  document, should be passed so that the serializer can create
  nodes.
  */
  serializeFragment(fragment, options2 = {}, target) {
    if (!target)
      target = doc(options2).createDocumentFragment();
    let top2 = target, active = [];
    fragment.forEach((node4) => {
      if (active.length || node4.marks.length) {
        let keep = 0, rendered = 0;
        while (keep < active.length && rendered < node4.marks.length) {
          let next2 = node4.marks[rendered];
          if (!this.marks[next2.type.name]) {
            rendered++;
            continue;
          }
          if (!next2.eq(active[keep][0]) || next2.type.spec.spanning === false)
            break;
          keep++;
          rendered++;
        }
        while (keep < active.length)
          top2 = active.pop()[1];
        while (rendered < node4.marks.length) {
          let add = node4.marks[rendered++];
          let markDOM = this.serializeMark(add, node4.isInline, options2);
          if (markDOM) {
            active.push([add, top2]);
            top2.appendChild(markDOM.dom);
            top2 = markDOM.contentDOM || markDOM.dom;
          }
        }
      }
      top2.appendChild(this.serializeNodeInner(node4, options2));
    });
    return target;
  }
  /**
  @internal
  */
  serializeNodeInner(node4, options2) {
    let { dom, contentDOM } = DOMSerializer.renderSpec(doc(options2), this.nodes[node4.type.name](node4));
    if (contentDOM) {
      if (node4.isLeaf)
        throw new RangeError("Content hole not allowed in a leaf node spec");
      this.serializeFragment(node4.content, options2, contentDOM);
    }
    return dom;
  }
  /**
  Serialize this node to a DOM node. This can be useful when you
  need to serialize a part of a document, as opposed to the whole
  document. To serialize a whole document, use
  [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
  its [content](https://prosemirror.net/docs/ref/#model.Node.content).
  */
  serializeNode(node4, options2 = {}) {
    let dom = this.serializeNodeInner(node4, options2);
    for (let i = node4.marks.length - 1; i >= 0; i--) {
      let wrap5 = this.serializeMark(node4.marks[i], node4.isInline, options2);
      if (wrap5) {
        (wrap5.contentDOM || wrap5.dom).appendChild(dom);
        dom = wrap5.dom;
      }
    }
    return dom;
  }
  /**
  @internal
  */
  serializeMark(mark2, inline2, options2 = {}) {
    let toDOM = this.marks[mark2.type.name];
    return toDOM && DOMSerializer.renderSpec(doc(options2), toDOM(mark2, inline2));
  }
  /**
  Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
  the spec has a hole (zero) in it, `contentDOM` will point at the
  node with the hole.
  */
  static renderSpec(doc4, structure, xmlNS = null) {
    if (typeof structure == "string")
      return { dom: doc4.createTextNode(structure) };
    if (structure.nodeType != null)
      return { dom: structure };
    if (structure.dom && structure.dom.nodeType != null)
      return structure;
    let tagName = structure[0], space2 = tagName.indexOf(" ");
    if (space2 > 0) {
      xmlNS = tagName.slice(0, space2);
      tagName = tagName.slice(space2 + 1);
    }
    let contentDOM;
    let dom = xmlNS ? doc4.createElementNS(xmlNS, tagName) : doc4.createElement(tagName);
    let attrs = structure[1], start2 = 1;
    if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
      start2 = 2;
      for (let name in attrs)
        if (attrs[name] != null) {
          let space3 = name.indexOf(" ");
          if (space3 > 0)
            dom.setAttributeNS(name.slice(0, space3), name.slice(space3 + 1), attrs[name]);
          else
            dom.setAttribute(name, attrs[name]);
        }
    }
    for (let i = start2; i < structure.length; i++) {
      let child = structure[i];
      if (child === 0) {
        if (i < structure.length - 1 || i > start2)
          throw new RangeError("Content hole must be the only child of its parent node");
        return { dom, contentDOM: dom };
      } else {
        let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc4, child, xmlNS);
        dom.appendChild(inner);
        if (innerContent) {
          if (contentDOM)
            throw new RangeError("Multiple content holes");
          contentDOM = innerContent;
        }
      }
    }
    return { dom, contentDOM };
  }
  /**
  Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
  properties in a schema's node and mark specs.
  */
  static fromSchema(schema) {
    return schema.cached.domSerializer || (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
  }
  /**
  Gather the serializers in a schema's node specs into an object.
  This can be useful as a base to build a custom serializer from.
  */
  static nodesFromSchema(schema) {
    let result = gatherToDOM(schema.nodes);
    if (!result.text)
      result.text = (node4) => node4.text;
    return result;
  }
  /**
  Gather the serializers in a schema's mark specs into an object.
  */
  static marksFromSchema(schema) {
    return gatherToDOM(schema.marks);
  }
};
function gatherToDOM(obj) {
  let result = {};
  for (let name in obj) {
    let toDOM = obj[name].spec.toDOM;
    if (toDOM)
      result[name] = toDOM;
  }
  return result;
}
function doc(options2) {
  return options2.document || window.document;
}

// node_modules/prosemirror-transform/dist/index.js
var lower16 = 65535;
var factor16 = Math.pow(2, 16);
function makeRecover(index7, offset3) {
  return index7 + offset3 * factor16;
}
function recoverIndex(value) {
  return value & lower16;
}
function recoverOffset(value) {
  return (value - (value & lower16)) / factor16;
}
var DEL_BEFORE = 1;
var DEL_AFTER = 2;
var DEL_ACROSS = 4;
var DEL_SIDE = 8;
var MapResult = class {
  /**
  @internal
  */
  constructor(pos, delInfo, recover) {
    this.pos = pos;
    this.delInfo = delInfo;
    this.recover = recover;
  }
  /**
  Tells you whether the position was deleted, that is, whether the
  step removed the token on the side queried (via the `assoc`)
  argument from the document.
  */
  get deleted() {
    return (this.delInfo & DEL_SIDE) > 0;
  }
  /**
  Tells you whether the token before the mapped position was deleted.
  */
  get deletedBefore() {
    return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0;
  }
  /**
  True when the token after the mapped position was deleted.
  */
  get deletedAfter() {
    return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0;
  }
  /**
  Tells whether any of the steps mapped through deletes across the
  position (including both the token before and after the
  position).
  */
  get deletedAcross() {
    return (this.delInfo & DEL_ACROSS) > 0;
  }
};
var StepMap = class {
  /**
  Create a position map. The modifications to the document are
  represented as an array of numbers, in which each group of three
  represents a modified chunk as `[start, oldSize, newSize]`.
  */
  constructor(ranges, inverted = false) {
    this.ranges = ranges;
    this.inverted = inverted;
    if (!ranges.length && StepMap.empty)
      return StepMap.empty;
  }
  /**
  @internal
  */
  recover(value) {
    let diff2 = 0, index7 = recoverIndex(value);
    if (!this.inverted)
      for (let i = 0; i < index7; i++)
        diff2 += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
    return this.ranges[index7 * 3] + diff2 + recoverOffset(value);
  }
  mapResult(pos, assoc = 1) {
    return this._map(pos, assoc, false);
  }
  map(pos, assoc = 1) {
    return this._map(pos, assoc, true);
  }
  /**
  @internal
  */
  _map(pos, assoc, simple) {
    let diff2 = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i = 0; i < this.ranges.length; i += 3) {
      let start2 = this.ranges[i] - (this.inverted ? diff2 : 0);
      if (start2 > pos)
        break;
      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end2 = start2 + oldSize;
      if (pos <= end2) {
        let side = !oldSize ? assoc : pos == start2 ? -1 : pos == end2 ? 1 : assoc;
        let result = start2 + diff2 + (side < 0 ? 0 : newSize);
        if (simple)
          return result;
        let recover = pos == (assoc < 0 ? start2 : end2) ? null : makeRecover(i / 3, pos - start2);
        let del3 = pos == start2 ? DEL_AFTER : pos == end2 ? DEL_BEFORE : DEL_ACROSS;
        if (assoc < 0 ? pos != start2 : pos != end2)
          del3 |= DEL_SIDE;
        return new MapResult(result, del3, recover);
      }
      diff2 += newSize - oldSize;
    }
    return simple ? pos + diff2 : new MapResult(pos + diff2, 0, null);
  }
  /**
  @internal
  */
  touches(pos, recover) {
    let diff2 = 0, index7 = recoverIndex(recover);
    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i = 0; i < this.ranges.length; i += 3) {
      let start2 = this.ranges[i] - (this.inverted ? diff2 : 0);
      if (start2 > pos)
        break;
      let oldSize = this.ranges[i + oldIndex], end2 = start2 + oldSize;
      if (pos <= end2 && i == index7 * 3)
        return true;
      diff2 += this.ranges[i + newIndex] - oldSize;
    }
    return false;
  }
  /**
  Calls the given function on each of the changed ranges included in
  this map.
  */
  forEach(f2) {
    let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
    for (let i = 0, diff2 = 0; i < this.ranges.length; i += 3) {
      let start2 = this.ranges[i], oldStart = start2 - (this.inverted ? diff2 : 0), newStart = start2 + (this.inverted ? 0 : diff2);
      let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
      f2(oldStart, oldStart + oldSize, newStart, newStart + newSize);
      diff2 += newSize - oldSize;
    }
  }
  /**
  Create an inverted version of this map. The result can be used to
  map positions in the post-step document to the pre-step document.
  */
  invert() {
    return new StepMap(this.ranges, !this.inverted);
  }
  /**
  @internal
  */
  toString() {
    return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
  }
  /**
  Create a map that moves all positions by offset `n` (which may be
  negative). This can be useful when applying steps meant for a
  sub-document to a larger document, or vice-versa.
  */
  static offset(n) {
    return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
  }
};
StepMap.empty = new StepMap([]);
var Mapping = class {
  /**
  Create a new mapping with the given position maps.
  */
  constructor(maps = [], mirror, from5 = 0, to3 = maps.length) {
    this.maps = maps;
    this.mirror = mirror;
    this.from = from5;
    this.to = to3;
  }
  /**
  Create a mapping that maps only through a part of this one.
  */
  slice(from5 = 0, to3 = this.maps.length) {
    return new Mapping(this.maps, this.mirror, from5, to3);
  }
  /**
  @internal
  */
  copy() {
    return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
  }
  /**
  Add a step map to the end of this mapping. If `mirrors` is
  given, it should be the index of the step map that is the mirror
  image of this one.
  */
  appendMap(map6, mirrors) {
    this.to = this.maps.push(map6);
    if (mirrors != null)
      this.setMirror(this.maps.length - 1, mirrors);
  }
  /**
  Add all the step maps in a given mapping to this one (preserving
  mirroring information).
  */
  appendMapping(mapping) {
    for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
      let mirr = mapping.getMirror(i);
      this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : void 0);
    }
  }
  /**
  Finds the offset of the step map that mirrors the map at the
  given offset, in this mapping (as per the second argument to
  `appendMap`).
  */
  getMirror(n) {
    if (this.mirror) {
      for (let i = 0; i < this.mirror.length; i++)
        if (this.mirror[i] == n)
          return this.mirror[i + (i % 2 ? -1 : 1)];
    }
  }
  /**
  @internal
  */
  setMirror(n, m) {
    if (!this.mirror)
      this.mirror = [];
    this.mirror.push(n, m);
  }
  /**
  Append the inverse of the given mapping to this one.
  */
  appendMappingInverted(mapping) {
    for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
      let mirr = mapping.getMirror(i);
      this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : void 0);
    }
  }
  /**
  Create an inverted version of this mapping.
  */
  invert() {
    let inverse = new Mapping();
    inverse.appendMappingInverted(this);
    return inverse;
  }
  /**
  Map a position through this mapping.
  */
  map(pos, assoc = 1) {
    if (this.mirror)
      return this._map(pos, assoc, true);
    for (let i = this.from; i < this.to; i++)
      pos = this.maps[i].map(pos, assoc);
    return pos;
  }
  /**
  Map a position through this mapping, returning a mapping
  result.
  */
  mapResult(pos, assoc = 1) {
    return this._map(pos, assoc, false);
  }
  /**
  @internal
  */
  _map(pos, assoc, simple) {
    let delInfo = 0;
    for (let i = this.from; i < this.to; i++) {
      let map6 = this.maps[i], result = map6.mapResult(pos, assoc);
      if (result.recover != null) {
        let corr = this.getMirror(i);
        if (corr != null && corr > i && corr < this.to) {
          i = corr;
          pos = this.maps[corr].recover(result.recover);
          continue;
        }
      }
      delInfo |= result.delInfo;
      pos = result.pos;
    }
    return simple ? pos : new MapResult(pos, delInfo, null);
  }
};
var stepsByID = /* @__PURE__ */ Object.create(null);
var Step = class {
  /**
  Get the step map that represents the changes made by this step,
  and which can be used to transform between positions in the old
  and the new document.
  */
  getMap() {
    return StepMap.empty;
  }
  /**
  Try to merge this step with another one, to be applied directly
  after it. Returns the merged step when possible, null if the
  steps can't be merged.
  */
  merge(other) {
    return null;
  }
  /**
  Deserialize a step from its JSON representation. Will call
  through to the step class' own implementation of this method.
  */
  static fromJSON(schema, json) {
    if (!json || !json.stepType)
      throw new RangeError("Invalid input for Step.fromJSON");
    let type = stepsByID[json.stepType];
    if (!type)
      throw new RangeError(`No step type ${json.stepType} defined`);
    return type.fromJSON(schema, json);
  }
  /**
  To be able to serialize steps to JSON, each step needs a string
  ID to attach to its JSON representation. Use this method to
  register an ID for your step classes. Try to pick something
  that's unlikely to clash with steps from other modules.
  */
  static jsonID(id2, stepClass) {
    if (id2 in stepsByID)
      throw new RangeError("Duplicate use of step JSON ID " + id2);
    stepsByID[id2] = stepClass;
    stepClass.prototype.jsonID = id2;
    return stepClass;
  }
};
var StepResult = class {
  /**
  @internal
  */
  constructor(doc4, failed) {
    this.doc = doc4;
    this.failed = failed;
  }
  /**
  Create a successful step result.
  */
  static ok(doc4) {
    return new StepResult(doc4, null);
  }
  /**
  Create a failed step result.
  */
  static fail(message) {
    return new StepResult(null, message);
  }
  /**
  Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
  arguments. Create a successful result if it succeeds, and a
  failed one if it throws a `ReplaceError`.
  */
  static fromReplace(doc4, from5, to3, slice3) {
    try {
      return StepResult.ok(doc4.replace(from5, to3, slice3));
    } catch (e) {
      if (e instanceof ReplaceError)
        return StepResult.fail(e.message);
      throw e;
    }
  }
};
function mapFragment(fragment, f2, parent) {
  let mapped = [];
  for (let i = 0; i < fragment.childCount; i++) {
    let child = fragment.child(i);
    if (child.content.size)
      child = child.copy(mapFragment(child.content, f2, child));
    if (child.isInline)
      child = f2(child, parent, i);
    mapped.push(child);
  }
  return Fragment.fromArray(mapped);
}
var AddMarkStep = class extends Step {
  /**
  Create a mark step.
  */
  constructor(from5, to3, mark2) {
    super();
    this.from = from5;
    this.to = to3;
    this.mark = mark2;
  }
  apply(doc4) {
    let oldSlice = doc4.slice(this.from, this.to), $from = doc4.resolve(this.from);
    let parent = $from.node($from.sharedDepth(this.to));
    let slice3 = new Slice(mapFragment(oldSlice.content, (node4, parent2) => {
      if (!node4.isAtom || !parent2.type.allowsMarkType(this.mark.type))
        return node4;
      return node4.mark(this.mark.addToSet(node4.marks));
    }, parent), oldSlice.openStart, oldSlice.openEnd);
    return StepResult.fromReplace(doc4, this.from, this.to, slice3);
  }
  invert() {
    return new RemoveMarkStep(this.from, this.to, this.mark);
  }
  map(mapping) {
    let from5 = mapping.mapResult(this.from, 1), to3 = mapping.mapResult(this.to, -1);
    if (from5.deleted && to3.deleted || from5.pos >= to3.pos)
      return null;
    return new AddMarkStep(from5.pos, to3.pos, this.mark);
  }
  merge(other) {
    if (other instanceof AddMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from)
      return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
    return null;
  }
  toJSON() {
    return {
      stepType: "addMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for AddMarkStep.fromJSON");
    return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
  }
};
Step.jsonID("addMark", AddMarkStep);
var RemoveMarkStep = class extends Step {
  /**
  Create a mark-removing step.
  */
  constructor(from5, to3, mark2) {
    super();
    this.from = from5;
    this.to = to3;
    this.mark = mark2;
  }
  apply(doc4) {
    let oldSlice = doc4.slice(this.from, this.to);
    let slice3 = new Slice(mapFragment(oldSlice.content, (node4) => {
      return node4.mark(this.mark.removeFromSet(node4.marks));
    }, doc4), oldSlice.openStart, oldSlice.openEnd);
    return StepResult.fromReplace(doc4, this.from, this.to, slice3);
  }
  invert() {
    return new AddMarkStep(this.from, this.to, this.mark);
  }
  map(mapping) {
    let from5 = mapping.mapResult(this.from, 1), to3 = mapping.mapResult(this.to, -1);
    if (from5.deleted && to3.deleted || from5.pos >= to3.pos)
      return null;
    return new RemoveMarkStep(from5.pos, to3.pos, this.mark);
  }
  merge(other) {
    if (other instanceof RemoveMarkStep && other.mark.eq(this.mark) && this.from <= other.to && this.to >= other.from)
      return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
    return null;
  }
  toJSON() {
    return {
      stepType: "removeMark",
      mark: this.mark.toJSON(),
      from: this.from,
      to: this.to
    };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
    return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
  }
};
Step.jsonID("removeMark", RemoveMarkStep);
var AddNodeMarkStep = class extends Step {
  /**
  Create a node mark step.
  */
  constructor(pos, mark2) {
    super();
    this.pos = pos;
    this.mark = mark2;
  }
  apply(doc4) {
    let node4 = doc4.nodeAt(this.pos);
    if (!node4)
      return StepResult.fail("No node at mark step's position");
    let updated = node4.type.create(node4.attrs, null, this.mark.addToSet(node4.marks));
    return StepResult.fromReplace(doc4, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node4.isLeaf ? 0 : 1));
  }
  invert(doc4) {
    let node4 = doc4.nodeAt(this.pos);
    if (node4) {
      let newSet = this.mark.addToSet(node4.marks);
      if (newSet.length == node4.marks.length) {
        for (let i = 0; i < node4.marks.length; i++)
          if (!node4.marks[i].isInSet(newSet))
            return new AddNodeMarkStep(this.pos, node4.marks[i]);
        return new AddNodeMarkStep(this.pos, this.mark);
      }
    }
    return new RemoveNodeMarkStep(this.pos, this.mark);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
  }
  toJSON() {
    return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.pos != "number")
      throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
    return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
  }
};
Step.jsonID("addNodeMark", AddNodeMarkStep);
var RemoveNodeMarkStep = class extends Step {
  /**
  Create a mark-removing step.
  */
  constructor(pos, mark2) {
    super();
    this.pos = pos;
    this.mark = mark2;
  }
  apply(doc4) {
    let node4 = doc4.nodeAt(this.pos);
    if (!node4)
      return StepResult.fail("No node at mark step's position");
    let updated = node4.type.create(node4.attrs, null, this.mark.removeFromSet(node4.marks));
    return StepResult.fromReplace(doc4, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node4.isLeaf ? 0 : 1));
  }
  invert(doc4) {
    let node4 = doc4.nodeAt(this.pos);
    if (!node4 || !this.mark.isInSet(node4.marks))
      return this;
    return new AddNodeMarkStep(this.pos, this.mark);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
  }
  toJSON() {
    return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.pos != "number")
      throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
    return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
  }
};
Step.jsonID("removeNodeMark", RemoveNodeMarkStep);
var ReplaceStep = class extends Step {
  /**
  The given `slice` should fit the 'gap' between `from` and
  `to`—the depths must line up, and the surrounding nodes must be
  able to be joined with the open sides of the slice. When
  `structure` is true, the step will fail if the content between
  from and to is not just a sequence of closing and then opening
  tokens (this is to guard against rebased replace steps
  overwriting something they weren't supposed to).
  */
  constructor(from5, to3, slice3, structure = false) {
    super();
    this.from = from5;
    this.to = to3;
    this.slice = slice3;
    this.structure = structure;
  }
  apply(doc4) {
    if (this.structure && contentBetween(doc4, this.from, this.to))
      return StepResult.fail("Structure replace would overwrite content");
    return StepResult.fromReplace(doc4, this.from, this.to, this.slice);
  }
  getMap() {
    return new StepMap([this.from, this.to - this.from, this.slice.size]);
  }
  invert(doc4) {
    return new ReplaceStep(this.from, this.from + this.slice.size, doc4.slice(this.from, this.to));
  }
  map(mapping) {
    let from5 = mapping.mapResult(this.from, 1), to3 = mapping.mapResult(this.to, -1);
    if (from5.deletedAcross && to3.deletedAcross)
      return null;
    return new ReplaceStep(from5.pos, Math.max(from5.pos, to3.pos), this.slice);
  }
  merge(other) {
    if (!(other instanceof ReplaceStep) || other.structure || this.structure)
      return null;
    if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
      let slice3 = this.slice.size + other.slice.size == 0 ? Slice.empty : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
      return new ReplaceStep(this.from, this.to + (other.to - other.from), slice3, this.structure);
    } else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
      let slice3 = this.slice.size + other.slice.size == 0 ? Slice.empty : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
      return new ReplaceStep(other.from, this.to, slice3, this.structure);
    } else {
      return null;
    }
  }
  toJSON() {
    let json = { stepType: "replace", from: this.from, to: this.to };
    if (this.slice.size)
      json.slice = this.slice.toJSON();
    if (this.structure)
      json.structure = true;
    return json;
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number")
      throw new RangeError("Invalid input for ReplaceStep.fromJSON");
    return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
  }
};
Step.jsonID("replace", ReplaceStep);
var ReplaceAroundStep = class extends Step {
  /**
  Create a replace-around step with the given range and gap.
  `insert` should be the point in the slice into which the content
  of the gap should be moved. `structure` has the same meaning as
  it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
  */
  constructor(from5, to3, gapFrom, gapTo, slice3, insert, structure = false) {
    super();
    this.from = from5;
    this.to = to3;
    this.gapFrom = gapFrom;
    this.gapTo = gapTo;
    this.slice = slice3;
    this.insert = insert;
    this.structure = structure;
  }
  apply(doc4) {
    if (this.structure && (contentBetween(doc4, this.from, this.gapFrom) || contentBetween(doc4, this.gapTo, this.to)))
      return StepResult.fail("Structure gap-replace would overwrite content");
    let gap = doc4.slice(this.gapFrom, this.gapTo);
    if (gap.openStart || gap.openEnd)
      return StepResult.fail("Gap is not a flat range");
    let inserted = this.slice.insertAt(this.insert, gap.content);
    if (!inserted)
      return StepResult.fail("Content does not fit in gap");
    return StepResult.fromReplace(doc4, this.from, this.to, inserted);
  }
  getMap() {
    return new StepMap([
      this.from,
      this.gapFrom - this.from,
      this.insert,
      this.gapTo,
      this.to - this.gapTo,
      this.slice.size - this.insert
    ]);
  }
  invert(doc4) {
    let gap = this.gapTo - this.gapFrom;
    return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc4.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
  }
  map(mapping) {
    let from5 = mapping.mapResult(this.from, 1), to3 = mapping.mapResult(this.to, -1);
    let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
    if (from5.deletedAcross && to3.deletedAcross || gapFrom < from5.pos || gapTo > to3.pos)
      return null;
    return new ReplaceAroundStep(from5.pos, to3.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
  }
  toJSON() {
    let json = {
      stepType: "replaceAround",
      from: this.from,
      to: this.to,
      gapFrom: this.gapFrom,
      gapTo: this.gapTo,
      insert: this.insert
    };
    if (this.slice.size)
      json.slice = this.slice.toJSON();
    if (this.structure)
      json.structure = true;
    return json;
  }
  /**
  @internal
  */
  static fromJSON(schema, json) {
    if (typeof json.from != "number" || typeof json.to != "number" || typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
      throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
    return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
  }
};
Step.jsonID("replaceAround", ReplaceAroundStep);
function contentBetween(doc4, from5, to3) {
  let $from = doc4.resolve(from5), dist = to3 - from5, depth = $from.depth;
  while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
    depth--;
    dist--;
  }
  if (dist > 0) {
    let next2 = $from.node(depth).maybeChild($from.indexAfter(depth));
    while (dist > 0) {
      if (!next2 || next2.isLeaf)
        return true;
      next2 = next2.firstChild;
      dist--;
    }
  }
  return false;
}
function addMark(tr4, from5, to3, mark2) {
  let removed = [], added = [];
  let removing, adding;
  tr4.doc.nodesBetween(from5, to3, (node4, pos, parent) => {
    if (!node4.isInline)
      return;
    let marks = node4.marks;
    if (!mark2.isInSet(marks) && parent.type.allowsMarkType(mark2.type)) {
      let start2 = Math.max(pos, from5), end2 = Math.min(pos + node4.nodeSize, to3);
      let newSet = mark2.addToSet(marks);
      for (let i = 0; i < marks.length; i++) {
        if (!marks[i].isInSet(newSet)) {
          if (removing && removing.to == start2 && removing.mark.eq(marks[i]))
            removing.to = end2;
          else
            removed.push(removing = new RemoveMarkStep(start2, end2, marks[i]));
        }
      }
      if (adding && adding.to == start2)
        adding.to = end2;
      else
        added.push(adding = new AddMarkStep(start2, end2, mark2));
    }
  });
  removed.forEach((s2) => tr4.step(s2));
  added.forEach((s2) => tr4.step(s2));
}
function removeMark(tr4, from5, to3, mark2) {
  let matched = [], step = 0;
  tr4.doc.nodesBetween(from5, to3, (node4, pos) => {
    if (!node4.isInline)
      return;
    step++;
    let toRemove = null;
    if (mark2 instanceof MarkType) {
      let set = node4.marks, found2;
      while (found2 = mark2.isInSet(set)) {
        (toRemove || (toRemove = [])).push(found2);
        set = found2.removeFromSet(set);
      }
    } else if (mark2) {
      if (mark2.isInSet(node4.marks))
        toRemove = [mark2];
    } else {
      toRemove = node4.marks;
    }
    if (toRemove && toRemove.length) {
      let end2 = Math.min(pos + node4.nodeSize, to3);
      for (let i = 0; i < toRemove.length; i++) {
        let style3 = toRemove[i], found2;
        for (let j = 0; j < matched.length; j++) {
          let m = matched[j];
          if (m.step == step - 1 && style3.eq(matched[j].style))
            found2 = m;
        }
        if (found2) {
          found2.to = end2;
          found2.step = step;
        } else {
          matched.push({ style: style3, from: Math.max(pos, from5), to: end2, step });
        }
      }
    }
  });
  matched.forEach((m) => tr4.step(new RemoveMarkStep(m.from, m.to, m.style)));
}
function clearIncompatible(tr4, pos, parentType, match2 = parentType.contentMatch) {
  let node4 = tr4.doc.nodeAt(pos);
  let delSteps = [], cur = pos + 1;
  for (let i = 0; i < node4.childCount; i++) {
    let child = node4.child(i), end2 = cur + child.nodeSize;
    let allowed = match2.matchType(child.type);
    if (!allowed) {
      delSteps.push(new ReplaceStep(cur, end2, Slice.empty));
    } else {
      match2 = allowed;
      for (let j = 0; j < child.marks.length; j++)
        if (!parentType.allowsMarkType(child.marks[j].type))
          tr4.step(new RemoveMarkStep(cur, end2, child.marks[j]));
    }
    cur = end2;
  }
  if (!match2.validEnd) {
    let fill = match2.fillBefore(Fragment.empty, true);
    tr4.replace(cur, cur, new Slice(fill, 0, 0));
  }
  for (let i = delSteps.length - 1; i >= 0; i--)
    tr4.step(delSteps[i]);
}
function canCut(node4, start2, end2) {
  return (start2 == 0 || node4.canReplace(start2, node4.childCount)) && (end2 == node4.childCount || node4.canReplace(0, end2));
}
function liftTarget(range2) {
  let parent = range2.parent;
  let content5 = parent.content.cutByIndex(range2.startIndex, range2.endIndex);
  for (let depth = range2.depth; ; --depth) {
    let node4 = range2.$from.node(depth);
    let index7 = range2.$from.index(depth), endIndex = range2.$to.indexAfter(depth);
    if (depth < range2.depth && node4.canReplace(index7, endIndex, content5))
      return depth;
    if (depth == 0 || node4.type.spec.isolating || !canCut(node4, index7, endIndex))
      break;
  }
  return null;
}
function lift(tr4, range2, target) {
  let { $from, $to, depth } = range2;
  let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
  let start2 = gapStart, end2 = gapEnd;
  let before = Fragment.empty, openStart = 0;
  for (let d = depth, splitting = false; d > target; d--)
    if (splitting || $from.index(d) > 0) {
      splitting = true;
      before = Fragment.from($from.node(d).copy(before));
      openStart++;
    } else {
      start2--;
    }
  let after = Fragment.empty, openEnd = 0;
  for (let d = depth, splitting = false; d > target; d--)
    if (splitting || $to.after(d + 1) < $to.end(d)) {
      splitting = true;
      after = Fragment.from($to.node(d).copy(after));
      openEnd++;
    } else {
      end2++;
    }
  tr4.step(new ReplaceAroundStep(start2, end2, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
}
function findWrapping(range2, nodeType, attrs = null, innerRange = range2) {
  let around = findWrappingOutside(range2, nodeType);
  let inner = around && findWrappingInside(innerRange, nodeType);
  if (!inner)
    return null;
  return around.map(withAttrs).concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
}
function withAttrs(type) {
  return { type, attrs: null };
}
function findWrappingOutside(range2, type) {
  let { parent, startIndex, endIndex } = range2;
  let around = parent.contentMatchAt(startIndex).findWrapping(type);
  if (!around)
    return null;
  let outer = around.length ? around[0] : type;
  return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
}
function findWrappingInside(range2, type) {
  let { parent, startIndex, endIndex } = range2;
  let inner = parent.child(startIndex);
  let inside = type.contentMatch.findWrapping(inner.type);
  if (!inside)
    return null;
  let lastType = inside.length ? inside[inside.length - 1] : type;
  let innerMatch = lastType.contentMatch;
  for (let i = startIndex; innerMatch && i < endIndex; i++)
    innerMatch = innerMatch.matchType(parent.child(i).type);
  if (!innerMatch || !innerMatch.validEnd)
    return null;
  return inside;
}
function wrap(tr4, range2, wrappers) {
  let content5 = Fragment.empty;
  for (let i = wrappers.length - 1; i >= 0; i--) {
    if (content5.size) {
      let match2 = wrappers[i].type.contentMatch.matchFragment(content5);
      if (!match2 || !match2.validEnd)
        throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
    }
    content5 = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content5));
  }
  let start2 = range2.start, end2 = range2.end;
  tr4.step(new ReplaceAroundStep(start2, end2, start2, end2, new Slice(content5, 0, 0), wrappers.length, true));
}
function setBlockType(tr4, from5, to3, type, attrs) {
  if (!type.isTextblock)
    throw new RangeError("Type given to setBlockType should be a textblock");
  let mapFrom = tr4.steps.length;
  tr4.doc.nodesBetween(from5, to3, (node4, pos) => {
    if (node4.isTextblock && !node4.hasMarkup(type, attrs) && canChangeType(tr4.doc, tr4.mapping.slice(mapFrom).map(pos), type)) {
      tr4.clearIncompatible(tr4.mapping.slice(mapFrom).map(pos, 1), type);
      let mapping = tr4.mapping.slice(mapFrom);
      let startM = mapping.map(pos, 1), endM = mapping.map(pos + node4.nodeSize, 1);
      tr4.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node4.marks)), 0, 0), 1, true));
      return false;
    }
  });
}
function canChangeType(doc4, pos, type) {
  let $pos = doc4.resolve(pos), index7 = $pos.index();
  return $pos.parent.canReplaceWith(index7, index7 + 1, type);
}
function setNodeMarkup(tr4, pos, type, attrs, marks) {
  let node4 = tr4.doc.nodeAt(pos);
  if (!node4)
    throw new RangeError("No node at given position");
  if (!type)
    type = node4.type;
  let newNode = type.create(attrs, null, marks || node4.marks);
  if (node4.isLeaf)
    return tr4.replaceWith(pos, pos + node4.nodeSize, newNode);
  if (!type.validContent(node4.content))
    throw new RangeError("Invalid content for node type " + type.name);
  tr4.step(new ReplaceAroundStep(pos, pos + node4.nodeSize, pos + 1, pos + node4.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
}
function canSplit(doc4, pos, depth = 1, typesAfter) {
  let $pos = doc4.resolve(pos), base5 = $pos.depth - depth;
  let innerType = typesAfter && typesAfter[typesAfter.length - 1] || $pos.parent;
  if (base5 < 0 || $pos.parent.type.spec.isolating || !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) || !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
    return false;
  for (let d = $pos.depth - 1, i = depth - 2; d > base5; d--, i--) {
    let node4 = $pos.node(d), index8 = $pos.index(d);
    if (node4.type.spec.isolating)
      return false;
    let rest = node4.content.cutByIndex(index8, node4.childCount);
    let after = typesAfter && typesAfter[i] || node4;
    if (after != node4)
      rest = rest.replaceChild(0, after.type.create(after.attrs));
    if (!node4.canReplace(index8 + 1, node4.childCount) || !after.type.validContent(rest))
      return false;
  }
  let index7 = $pos.indexAfter(base5);
  let baseType = typesAfter && typesAfter[0];
  return $pos.node(base5).canReplaceWith(index7, index7, baseType ? baseType.type : $pos.node(base5 + 1).type);
}
function split(tr4, pos, depth = 1, typesAfter) {
  let $pos = tr4.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
  for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
    before = Fragment.from($pos.node(d).copy(before));
    let typeAfter = typesAfter && typesAfter[i];
    after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
  }
  tr4.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));
}
function canJoin(doc4, pos) {
  let $pos = doc4.resolve(pos), index7 = $pos.index();
  return joinable2($pos.nodeBefore, $pos.nodeAfter) && $pos.parent.canReplace(index7, index7 + 1);
}
function joinable2(a2, b2) {
  return !!(a2 && b2 && !a2.isLeaf && a2.canAppend(b2));
}
function joinPoint(doc4, pos, dir = -1) {
  let $pos = doc4.resolve(pos);
  for (let d = $pos.depth; ; d--) {
    let before, after, index7 = $pos.index(d);
    if (d == $pos.depth) {
      before = $pos.nodeBefore;
      after = $pos.nodeAfter;
    } else if (dir > 0) {
      before = $pos.node(d + 1);
      index7++;
      after = $pos.node(d).maybeChild(index7);
    } else {
      before = $pos.node(d).maybeChild(index7 - 1);
      after = $pos.node(d + 1);
    }
    if (before && !before.isTextblock && joinable2(before, after) && $pos.node(d).canReplace(index7, index7 + 1))
      return pos;
    if (d == 0)
      break;
    pos = dir < 0 ? $pos.before(d) : $pos.after(d);
  }
}
function join(tr4, pos, depth) {
  let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
  tr4.step(step);
}
function insertPoint(doc4, pos, nodeType) {
  let $pos = doc4.resolve(pos);
  if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
    return pos;
  if ($pos.parentOffset == 0)
    for (let d = $pos.depth - 1; d >= 0; d--) {
      let index7 = $pos.index(d);
      if ($pos.node(d).canReplaceWith(index7, index7, nodeType))
        return $pos.before(d + 1);
      if (index7 > 0)
        return null;
    }
  if ($pos.parentOffset == $pos.parent.content.size)
    for (let d = $pos.depth - 1; d >= 0; d--) {
      let index7 = $pos.indexAfter(d);
      if ($pos.node(d).canReplaceWith(index7, index7, nodeType))
        return $pos.after(d + 1);
      if (index7 < $pos.node(d).childCount)
        return null;
    }
  return null;
}
function dropPoint(doc4, pos, slice3) {
  let $pos = doc4.resolve(pos);
  if (!slice3.content.size)
    return pos;
  let content5 = slice3.content;
  for (let i = 0; i < slice3.openStart; i++)
    content5 = content5.firstChild.content;
  for (let pass = 1; pass <= (slice3.openStart == 0 && slice3.size ? 2 : 1); pass++) {
    for (let d = $pos.depth; d >= 0; d--) {
      let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
      let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
      let parent = $pos.node(d), fits = false;
      if (pass == 1) {
        fits = parent.canReplace(insertPos, insertPos, content5);
      } else {
        let wrapping = parent.contentMatchAt(insertPos).findWrapping(content5.firstChild.type);
        fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
      }
      if (fits)
        return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
    }
  }
  return null;
}
function replaceStep(doc4, from5, to3 = from5, slice3 = Slice.empty) {
  if (from5 == to3 && !slice3.size)
    return null;
  let $from = doc4.resolve(from5), $to = doc4.resolve(to3);
  if (fitsTrivially($from, $to, slice3))
    return new ReplaceStep(from5, to3, slice3);
  return new Fitter($from, $to, slice3).fit();
}
function fitsTrivially($from, $to, slice3) {
  return !slice3.openStart && !slice3.openEnd && $from.start() == $to.start() && $from.parent.canReplace($from.index(), $to.index(), slice3.content);
}
var Fitter = class {
  constructor($from, $to, unplaced) {
    this.$from = $from;
    this.$to = $to;
    this.unplaced = unplaced;
    this.frontier = [];
    this.placed = Fragment.empty;
    for (let i = 0; i <= $from.depth; i++) {
      let node4 = $from.node(i);
      this.frontier.push({
        type: node4.type,
        match: node4.contentMatchAt($from.indexAfter(i))
      });
    }
    for (let i = $from.depth; i > 0; i--)
      this.placed = Fragment.from($from.node(i).copy(this.placed));
  }
  get depth() {
    return this.frontier.length - 1;
  }
  fit() {
    while (this.unplaced.size) {
      let fit = this.findFittable();
      if (fit)
        this.placeNodes(fit);
      else
        this.openMore() || this.dropNode();
    }
    let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
    let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
    if (!$to)
      return null;
    let content5 = this.placed, openStart = $from.depth, openEnd = $to.depth;
    while (openStart && openEnd && content5.childCount == 1) {
      content5 = content5.firstChild.content;
      openStart--;
      openEnd--;
    }
    let slice3 = new Slice(content5, openStart, openEnd);
    if (moveInline > -1)
      return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice3, placedSize);
    if (slice3.size || $from.pos != this.$to.pos)
      return new ReplaceStep($from.pos, $to.pos, slice3);
    return null;
  }
  // Find a position on the start spine of `this.unplaced` that has
  // content that can be moved somewhere on the frontier. Returns two
  // depths, one for the slice and one for the frontier.
  findFittable() {
    let startDepth = this.unplaced.openStart;
    for (let cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd; d < startDepth; d++) {
      let node4 = cur.firstChild;
      if (cur.childCount > 1)
        openEnd = 0;
      if (node4.type.spec.isolating && openEnd <= d) {
        startDepth = d;
        break;
      }
      cur = node4.content;
    }
    for (let pass = 1; pass <= 2; pass++) {
      for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
        let fragment, parent = null;
        if (sliceDepth) {
          parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
          fragment = parent.content;
        } else {
          fragment = this.unplaced.content;
        }
        let first2 = fragment.firstChild;
        for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
          let { type, match: match2 } = this.frontier[frontierDepth], wrap5, inject = null;
          if (pass == 1 && (first2 ? match2.matchType(first2.type) || (inject = match2.fillBefore(Fragment.from(first2), false)) : parent && type.compatibleContent(parent.type)))
            return { sliceDepth, frontierDepth, parent, inject };
          else if (pass == 2 && first2 && (wrap5 = match2.findWrapping(first2.type)))
            return { sliceDepth, frontierDepth, parent, wrap: wrap5 };
          if (parent && match2.matchType(parent.type))
            break;
        }
      }
    }
  }
  openMore() {
    let { content: content5, openStart, openEnd } = this.unplaced;
    let inner = contentAt(content5, openStart);
    if (!inner.childCount || inner.firstChild.isLeaf)
      return false;
    this.unplaced = new Slice(content5, openStart + 1, Math.max(openEnd, inner.size + openStart >= content5.size - openEnd ? openStart + 1 : 0));
    return true;
  }
  dropNode() {
    let { content: content5, openStart, openEnd } = this.unplaced;
    let inner = contentAt(content5, openStart);
    if (inner.childCount <= 1 && openStart > 0) {
      let openAtEnd = content5.size - openStart <= openStart + inner.size;
      this.unplaced = new Slice(dropFromFragment(content5, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
    } else {
      this.unplaced = new Slice(dropFromFragment(content5, openStart, 1), openStart, openEnd);
    }
  }
  // Move content from the unplaced slice at `sliceDepth` to the
  // frontier node at `frontierDepth`. Close that frontier node when
  // applicable.
  placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap: wrap5 }) {
    while (this.depth > frontierDepth)
      this.closeFrontierNode();
    if (wrap5)
      for (let i = 0; i < wrap5.length; i++)
        this.openFrontierNode(wrap5[i]);
    let slice3 = this.unplaced, fragment = parent ? parent.content : slice3.content;
    let openStart = slice3.openStart - sliceDepth;
    let taken = 0, add = [];
    let { match: match2, type } = this.frontier[frontierDepth];
    if (inject) {
      for (let i = 0; i < inject.childCount; i++)
        add.push(inject.child(i));
      match2 = match2.matchFragment(inject);
    }
    let openEndCount = fragment.size + sliceDepth - (slice3.content.size - slice3.openEnd);
    while (taken < fragment.childCount) {
      let next2 = fragment.child(taken), matches3 = match2.matchType(next2.type);
      if (!matches3)
        break;
      taken++;
      if (taken > 1 || openStart == 0 || next2.content.size) {
        match2 = matches3;
        add.push(closeNodeStart(next2.mark(type.allowedMarks(next2.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
      }
    }
    let toEnd = taken == fragment.childCount;
    if (!toEnd)
      openEndCount = -1;
    this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));
    this.frontier[frontierDepth].match = match2;
    if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
      this.closeFrontierNode();
    for (let i = 0, cur = fragment; i < openEndCount; i++) {
      let node4 = cur.lastChild;
      this.frontier.push({ type: node4.type, match: node4.contentMatchAt(node4.childCount) });
      cur = node4.content;
    }
    this.unplaced = !toEnd ? new Slice(dropFromFragment(slice3.content, sliceDepth, taken), slice3.openStart, slice3.openEnd) : sliceDepth == 0 ? Slice.empty : new Slice(dropFromFragment(slice3.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice3.openEnd : sliceDepth - 1);
  }
  mustMoveInline() {
    if (!this.$to.parent.isTextblock)
      return -1;
    let top2 = this.frontier[this.depth], level;
    if (!top2.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top2.type, top2.match, false) || this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth)
      return -1;
    let { depth } = this.$to, after = this.$to.after(depth);
    while (depth > 1 && after == this.$to.end(--depth))
      ++after;
    return after;
  }
  findCloseLevel($to) {
    scan:
      for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
        let { match: match2, type } = this.frontier[i];
        let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
        let fit = contentAfterFits($to, i, type, match2, dropInner);
        if (!fit)
          continue;
        for (let d = i - 1; d >= 0; d--) {
          let { match: match3, type: type2 } = this.frontier[d];
          let matches3 = contentAfterFits($to, d, type2, match3, true);
          if (!matches3 || matches3.childCount)
            continue scan;
        }
        return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
      }
  }
  close($to) {
    let close2 = this.findCloseLevel($to);
    if (!close2)
      return null;
    while (this.depth > close2.depth)
      this.closeFrontierNode();
    if (close2.fit.childCount)
      this.placed = addToFragment(this.placed, close2.depth, close2.fit);
    $to = close2.move;
    for (let d = close2.depth + 1; d <= $to.depth; d++) {
      let node4 = $to.node(d), add = node4.type.contentMatch.fillBefore(node4.content, true, $to.index(d));
      this.openFrontierNode(node4.type, node4.attrs, add);
    }
    return $to;
  }
  openFrontierNode(type, attrs = null, content5) {
    let top2 = this.frontier[this.depth];
    top2.match = top2.match.matchType(type);
    this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content5)));
    this.frontier.push({ type, match: type.contentMatch });
  }
  closeFrontierNode() {
    let open = this.frontier.pop();
    let add = open.match.fillBefore(Fragment.empty, true);
    if (add.childCount)
      this.placed = addToFragment(this.placed, this.frontier.length, add);
  }
};
function dropFromFragment(fragment, depth, count2) {
  if (depth == 0)
    return fragment.cutByIndex(count2, fragment.childCount);
  return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count2)));
}
function addToFragment(fragment, depth, content5) {
  if (depth == 0)
    return fragment.append(content5);
  return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content5)));
}
function contentAt(fragment, depth) {
  for (let i = 0; i < depth; i++)
    fragment = fragment.firstChild.content;
  return fragment;
}
function closeNodeStart(node4, openStart, openEnd) {
  if (openStart <= 0)
    return node4;
  let frag = node4.content;
  if (openStart > 1)
    frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
  if (openStart > 0) {
    frag = node4.type.contentMatch.fillBefore(frag).append(frag);
    if (openEnd <= 0)
      frag = frag.append(node4.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
  }
  return node4.copy(frag);
}
function contentAfterFits($to, depth, type, match2, open) {
  let node4 = $to.node(depth), index7 = open ? $to.indexAfter(depth) : $to.index(depth);
  if (index7 == node4.childCount && !type.compatibleContent(node4.type))
    return null;
  let fit = match2.fillBefore(node4.content, true, index7);
  return fit && !invalidMarks(type, node4.content, index7) ? fit : null;
}
function invalidMarks(type, fragment, start2) {
  for (let i = start2; i < fragment.childCount; i++)
    if (!type.allowsMarks(fragment.child(i).marks))
      return true;
  return false;
}
function definesContent(type) {
  return type.spec.defining || type.spec.definingForContent;
}
function replaceRange(tr4, from5, to3, slice3) {
  if (!slice3.size)
    return tr4.deleteRange(from5, to3);
  let $from = tr4.doc.resolve(from5), $to = tr4.doc.resolve(to3);
  if (fitsTrivially($from, $to, slice3))
    return tr4.step(new ReplaceStep(from5, to3, slice3));
  let targetDepths = coveredDepths($from, tr4.doc.resolve(to3));
  if (targetDepths[targetDepths.length - 1] == 0)
    targetDepths.pop();
  let preferredTarget = -($from.depth + 1);
  targetDepths.unshift(preferredTarget);
  for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
    let spec = $from.node(d).type.spec;
    if (spec.defining || spec.definingAsContext || spec.isolating)
      break;
    if (targetDepths.indexOf(d) > -1)
      preferredTarget = d;
    else if ($from.before(d) == pos)
      targetDepths.splice(1, 0, -d);
  }
  let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
  let leftNodes = [], preferredDepth = slice3.openStart;
  for (let content5 = slice3.content, i = 0; ; i++) {
    let node4 = content5.firstChild;
    leftNodes.push(node4);
    if (i == slice3.openStart)
      break;
    content5 = node4.content;
  }
  for (let d = preferredDepth - 1; d >= 0; d--) {
    let type = leftNodes[d].type, def = definesContent(type);
    if (def && $from.node(preferredTargetIndex).type != type)
      preferredDepth = d;
    else if (def || !type.isTextblock)
      break;
  }
  for (let j = slice3.openStart; j >= 0; j--) {
    let openDepth = (j + preferredDepth + 1) % (slice3.openStart + 1);
    let insert = leftNodes[openDepth];
    if (!insert)
      continue;
    for (let i = 0; i < targetDepths.length; i++) {
      let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
      if (targetDepth < 0) {
        expand = false;
        targetDepth = -targetDepth;
      }
      let parent = $from.node(targetDepth - 1), index7 = $from.index(targetDepth - 1);
      if (parent.canReplaceWith(index7, index7, insert.type, insert.marks))
        return tr4.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to3, new Slice(closeFragment(slice3.content, 0, slice3.openStart, openDepth), openDepth, slice3.openEnd));
    }
  }
  let startSteps = tr4.steps.length;
  for (let i = targetDepths.length - 1; i >= 0; i--) {
    tr4.replace(from5, to3, slice3);
    if (tr4.steps.length > startSteps)
      break;
    let depth = targetDepths[i];
    if (depth < 0)
      continue;
    from5 = $from.before(depth);
    to3 = $to.after(depth);
  }
}
function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
  if (depth < oldOpen) {
    let first2 = fragment.firstChild;
    fragment = fragment.replaceChild(0, first2.copy(closeFragment(first2.content, depth + 1, oldOpen, newOpen, first2)));
  }
  if (depth > newOpen) {
    let match2 = parent.contentMatchAt(0);
    let start2 = match2.fillBefore(fragment).append(fragment);
    fragment = start2.append(match2.matchFragment(start2).fillBefore(Fragment.empty, true));
  }
  return fragment;
}
function replaceRangeWith(tr4, from5, to3, node4) {
  if (!node4.isInline && from5 == to3 && tr4.doc.resolve(from5).parent.content.size) {
    let point5 = insertPoint(tr4.doc, from5, node4.type);
    if (point5 != null)
      from5 = to3 = point5;
  }
  tr4.replaceRange(from5, to3, new Slice(Fragment.from(node4), 0, 0));
}
function deleteRange(tr4, from5, to3) {
  let $from = tr4.doc.resolve(from5), $to = tr4.doc.resolve(to3);
  let covered = coveredDepths($from, $to);
  for (let i = 0; i < covered.length; i++) {
    let depth = covered[i], last2 = i == covered.length - 1;
    if (last2 && depth == 0 || $from.node(depth).type.contentMatch.validEnd)
      return tr4.delete($from.start(depth), $to.end(depth));
    if (depth > 0 && (last2 || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
      return tr4.delete($from.before(depth), $to.after(depth));
  }
  for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
    if (from5 - $from.start(d) == $from.depth - d && to3 > $from.end(d) && $to.end(d) - to3 != $to.depth - d)
      return tr4.delete($from.before(d), to3);
  }
  tr4.delete(from5, to3);
}
function coveredDepths($from, $to) {
  let result = [], minDepth = Math.min($from.depth, $to.depth);
  for (let d = minDepth; d >= 0; d--) {
    let start2 = $from.start(d);
    if (start2 < $from.pos - ($from.depth - d) || $to.end(d) > $to.pos + ($to.depth - d) || $from.node(d).type.spec.isolating || $to.node(d).type.spec.isolating)
      break;
    if (start2 == $to.start(d) || d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent && d && $to.start(d - 1) == start2 - 1)
      result.push(d);
  }
  return result;
}
var AttrStep = class extends Step {
  /**
  Construct an attribute step.
  */
  constructor(pos, attr, value) {
    super();
    this.pos = pos;
    this.attr = attr;
    this.value = value;
  }
  apply(doc4) {
    let node4 = doc4.nodeAt(this.pos);
    if (!node4)
      return StepResult.fail("No node at attribute step's position");
    let attrs = /* @__PURE__ */ Object.create(null);
    for (let name in node4.attrs)
      attrs[name] = node4.attrs[name];
    attrs[this.attr] = this.value;
    let updated = node4.type.create(attrs, null, node4.marks);
    return StepResult.fromReplace(doc4, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node4.isLeaf ? 0 : 1));
  }
  getMap() {
    return StepMap.empty;
  }
  invert(doc4) {
    return new AttrStep(this.pos, this.attr, doc4.nodeAt(this.pos).attrs[this.attr]);
  }
  map(mapping) {
    let pos = mapping.mapResult(this.pos, 1);
    return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
  }
  toJSON() {
    return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
  }
  static fromJSON(schema, json) {
    if (typeof json.pos != "number" || typeof json.attr != "string")
      throw new RangeError("Invalid input for AttrStep.fromJSON");
    return new AttrStep(json.pos, json.attr, json.value);
  }
};
Step.jsonID("attr", AttrStep);
var TransformError = class extends Error {
};
TransformError = function TransformError2(message) {
  let err = Error.call(this, message);
  err.__proto__ = TransformError2.prototype;
  return err;
};
TransformError.prototype = Object.create(Error.prototype);
TransformError.prototype.constructor = TransformError;
TransformError.prototype.name = "TransformError";
var Transform = class {
  /**
  Create a transform that starts with the given document.
  */
  constructor(doc4) {
    this.doc = doc4;
    this.steps = [];
    this.docs = [];
    this.mapping = new Mapping();
  }
  /**
  The starting document.
  */
  get before() {
    return this.docs.length ? this.docs[0] : this.doc;
  }
  /**
  Apply a new step in this transform, saving the result. Throws an
  error when the step fails.
  */
  step(step) {
    let result = this.maybeStep(step);
    if (result.failed)
      throw new TransformError(result.failed);
    return this;
  }
  /**
  Try to apply a step in this transformation, ignoring it if it
  fails. Returns the step result.
  */
  maybeStep(step) {
    let result = step.apply(this.doc);
    if (!result.failed)
      this.addStep(step, result.doc);
    return result;
  }
  /**
  True when the document has been changed (when there are any
  steps).
  */
  get docChanged() {
    return this.steps.length > 0;
  }
  /**
  @internal
  */
  addStep(step, doc4) {
    this.docs.push(this.doc);
    this.steps.push(step);
    this.mapping.appendMap(step.getMap());
    this.doc = doc4;
  }
  /**
  Replace the part of the document between `from` and `to` with the
  given `slice`.
  */
  replace(from5, to3 = from5, slice3 = Slice.empty) {
    let step = replaceStep(this.doc, from5, to3, slice3);
    if (step)
      this.step(step);
    return this;
  }
  /**
  Replace the given range with the given content, which may be a
  fragment, node, or array of nodes.
  */
  replaceWith(from5, to3, content5) {
    return this.replace(from5, to3, new Slice(Fragment.from(content5), 0, 0));
  }
  /**
  Delete the content between the given positions.
  */
  delete(from5, to3) {
    return this.replace(from5, to3, Slice.empty);
  }
  /**
  Insert the given content at the given position.
  */
  insert(pos, content5) {
    return this.replaceWith(pos, pos, content5);
  }
  /**
  Replace a range of the document with a given slice, using
  `from`, `to`, and the slice's
  [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
  than fixed start and end points. This method may grow the
  replaced area or close open nodes in the slice in order to get a
  fit that is more in line with WYSIWYG expectations, by dropping
  fully covered parent nodes of the replaced region when they are
  marked [non-defining as
  context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
  open parent node from the slice that _is_ marked as [defining
  its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
  
  This is the method, for example, to handle paste. The similar
  [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
  primitive tool which will _not_ move the start and end of its given
  range, and is useful in situations where you need more precise
  control over what happens.
  */
  replaceRange(from5, to3, slice3) {
    replaceRange(this, from5, to3, slice3);
    return this;
  }
  /**
  Replace the given range with a node, but use `from` and `to` as
  hints, rather than precise positions. When from and to are the same
  and are at the start or end of a parent node in which the given
  node doesn't fit, this method may _move_ them out towards a parent
  that does allow the given node to be placed. When the given range
  completely covers a parent node, this method may completely replace
  that parent node.
  */
  replaceRangeWith(from5, to3, node4) {
    replaceRangeWith(this, from5, to3, node4);
    return this;
  }
  /**
  Delete the given range, expanding it to cover fully covered
  parent nodes until a valid replace is found.
  */
  deleteRange(from5, to3) {
    deleteRange(this, from5, to3);
    return this;
  }
  /**
  Split the content in the given range off from its parent, if there
  is sibling content before or after it, and move it up the tree to
  the depth specified by `target`. You'll probably want to use
  [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
  sure the lift is valid.
  */
  lift(range2, target) {
    lift(this, range2, target);
    return this;
  }
  /**
  Join the blocks around the given position. If depth is 2, their
  last and first siblings are also joined, and so on.
  */
  join(pos, depth = 1) {
    join(this, pos, depth);
    return this;
  }
  /**
  Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
  The wrappers are assumed to be valid in this position, and should
  probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
  */
  wrap(range2, wrappers) {
    wrap(this, range2, wrappers);
    return this;
  }
  /**
  Set the type of all textblocks (partly) between `from` and `to` to
  the given node type with the given attributes.
  */
  setBlockType(from5, to3 = from5, type, attrs = null) {
    setBlockType(this, from5, to3, type, attrs);
    return this;
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  setNodeMarkup(pos, type, attrs = null, marks) {
    setNodeMarkup(this, pos, type, attrs, marks);
    return this;
  }
  /**
  Set a single attribute on a given node to a new value.
  */
  setNodeAttribute(pos, attr, value) {
    this.step(new AttrStep(pos, attr, value));
    return this;
  }
  /**
  Add a mark to the node at position `pos`.
  */
  addNodeMark(pos, mark2) {
    this.step(new AddNodeMarkStep(pos, mark2));
    return this;
  }
  /**
  Remove a mark (or a mark of the given type) from the node at
  position `pos`.
  */
  removeNodeMark(pos, mark2) {
    if (!(mark2 instanceof Mark)) {
      let node4 = this.doc.nodeAt(pos);
      if (!node4)
        throw new RangeError("No node at position " + pos);
      mark2 = mark2.isInSet(node4.marks);
      if (!mark2)
        return this;
    }
    this.step(new RemoveNodeMarkStep(pos, mark2));
    return this;
  }
  /**
  Split the node at the given position, and optionally, if `depth` is
  greater than one, any number of nodes above that. By default, the
  parts split off will inherit the node type of the original node.
  This can be changed by passing an array of types and attributes to
  use after the split.
  */
  split(pos, depth = 1, typesAfter) {
    split(this, pos, depth, typesAfter);
    return this;
  }
  /**
  Add the given mark to the inline content between `from` and `to`.
  */
  addMark(from5, to3, mark2) {
    addMark(this, from5, to3, mark2);
    return this;
  }
  /**
  Remove marks from inline nodes between `from` and `to`. When
  `mark` is a single mark, remove precisely that mark. When it is
  a mark type, remove all marks of that type. When it is null,
  remove all marks of any type.
  */
  removeMark(from5, to3, mark2) {
    removeMark(this, from5, to3, mark2);
    return this;
  }
  /**
  Removes all marks and nodes from the content of the node at
  `pos` that don't match the given new parent node type. Accepts
  an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
  third argument.
  */
  clearIncompatible(pos, parentType, match2) {
    clearIncompatible(this, pos, parentType, match2);
    return this;
  }
};

// node_modules/prosemirror-state/dist/index.js
var classesById = /* @__PURE__ */ Object.create(null);
var Selection = class {
  /**
  Initialize a selection with the head and anchor and ranges. If no
  ranges are given, constructs a single range across `$anchor` and
  `$head`.
  */
  constructor($anchor, $head, ranges) {
    this.$anchor = $anchor;
    this.$head = $head;
    this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
  }
  /**
  The selection's anchor, as an unresolved position.
  */
  get anchor() {
    return this.$anchor.pos;
  }
  /**
  The selection's head.
  */
  get head() {
    return this.$head.pos;
  }
  /**
  The lower bound of the selection's main range.
  */
  get from() {
    return this.$from.pos;
  }
  /**
  The upper bound of the selection's main range.
  */
  get to() {
    return this.$to.pos;
  }
  /**
  The resolved lower  bound of the selection's main range.
  */
  get $from() {
    return this.ranges[0].$from;
  }
  /**
  The resolved upper bound of the selection's main range.
  */
  get $to() {
    return this.ranges[0].$to;
  }
  /**
  Indicates whether the selection contains any content.
  */
  get empty() {
    let ranges = this.ranges;
    for (let i = 0; i < ranges.length; i++)
      if (ranges[i].$from.pos != ranges[i].$to.pos)
        return false;
    return true;
  }
  /**
  Get the content of this selection as a slice.
  */
  content() {
    return this.$from.doc.slice(this.from, this.to, true);
  }
  /**
  Replace the selection with a slice or, if no slice is given,
  delete the selection. Will append to the given transaction.
  */
  replace(tr4, content5 = Slice.empty) {
    let lastNode = content5.content.lastChild, lastParent = null;
    for (let i = 0; i < content5.openEnd; i++) {
      lastParent = lastNode;
      lastNode = lastNode.lastChild;
    }
    let mapFrom = tr4.steps.length, ranges = this.ranges;
    for (let i = 0; i < ranges.length; i++) {
      let { $from, $to } = ranges[i], mapping = tr4.mapping.slice(mapFrom);
      tr4.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content5);
      if (i == 0)
        selectionToInsertionEnd(tr4, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
    }
  }
  /**
  Replace the selection with the given node, appending the changes
  to the given transaction.
  */
  replaceWith(tr4, node4) {
    let mapFrom = tr4.steps.length, ranges = this.ranges;
    for (let i = 0; i < ranges.length; i++) {
      let { $from, $to } = ranges[i], mapping = tr4.mapping.slice(mapFrom);
      let from5 = mapping.map($from.pos), to3 = mapping.map($to.pos);
      if (i) {
        tr4.deleteRange(from5, to3);
      } else {
        tr4.replaceRangeWith(from5, to3, node4);
        selectionToInsertionEnd(tr4, mapFrom, node4.isInline ? -1 : 1);
      }
    }
  }
  /**
  Find a valid cursor or leaf node selection starting at the given
  position and searching back if `dir` is negative, and forward if
  positive. When `textOnly` is true, only consider cursor
  selections. Will return null when no valid selection position is
  found.
  */
  static findFrom($pos, dir, textOnly = false) {
    let inner = $pos.parent.inlineContent ? new TextSelection($pos) : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
    if (inner)
      return inner;
    for (let depth = $pos.depth - 1; depth >= 0; depth--) {
      let found2 = dir < 0 ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly) : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
      if (found2)
        return found2;
    }
    return null;
  }
  /**
  Find a valid cursor or leaf node selection near the given
  position. Searches forward first by default, but if `bias` is
  negative, it will search backwards first.
  */
  static near($pos, bias = 1) {
    return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
  }
  /**
  Find the cursor or leaf node selection closest to the start of
  the given document. Will return an
  [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
  exists.
  */
  static atStart(doc4) {
    return findSelectionIn(doc4, doc4, 0, 0, 1) || new AllSelection(doc4);
  }
  /**
  Find the cursor or leaf node selection closest to the end of the
  given document.
  */
  static atEnd(doc4) {
    return findSelectionIn(doc4, doc4, doc4.content.size, doc4.childCount, -1) || new AllSelection(doc4);
  }
  /**
  Deserialize the JSON representation of a selection. Must be
  implemented for custom classes (as a static class method).
  */
  static fromJSON(doc4, json) {
    if (!json || !json.type)
      throw new RangeError("Invalid input for Selection.fromJSON");
    let cls = classesById[json.type];
    if (!cls)
      throw new RangeError(`No selection type ${json.type} defined`);
    return cls.fromJSON(doc4, json);
  }
  /**
  To be able to deserialize selections from JSON, custom selection
  classes must register themselves with an ID string, so that they
  can be disambiguated. Try to pick something that's unlikely to
  clash with classes from other modules.
  */
  static jsonID(id2, selectionClass) {
    if (id2 in classesById)
      throw new RangeError("Duplicate use of selection JSON ID " + id2);
    classesById[id2] = selectionClass;
    selectionClass.prototype.jsonID = id2;
    return selectionClass;
  }
  /**
  Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
  which is a value that can be mapped without having access to a
  current document, and later resolved to a real selection for a
  given document again. (This is used mostly by the history to
  track and restore old selections.) The default implementation of
  this method just converts the selection to a text selection and
  returns the bookmark for that.
  */
  getBookmark() {
    return TextSelection.between(this.$anchor, this.$head).getBookmark();
  }
};
Selection.prototype.visible = true;
var SelectionRange = class {
  /**
  Create a range.
  */
  constructor($from, $to) {
    this.$from = $from;
    this.$to = $to;
  }
};
var warnedAboutTextSelection = false;
function checkTextSelection($pos) {
  if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
    warnedAboutTextSelection = true;
    console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
  }
}
var TextSelection = class extends Selection {
  /**
  Construct a text selection between the given points.
  */
  constructor($anchor, $head = $anchor) {
    checkTextSelection($anchor);
    checkTextSelection($head);
    super($anchor, $head);
  }
  /**
  Returns a resolved position if this is a cursor selection (an
  empty text selection), and null otherwise.
  */
  get $cursor() {
    return this.$anchor.pos == this.$head.pos ? this.$head : null;
  }
  map(doc4, mapping) {
    let $head = doc4.resolve(mapping.map(this.head));
    if (!$head.parent.inlineContent)
      return Selection.near($head);
    let $anchor = doc4.resolve(mapping.map(this.anchor));
    return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
  }
  replace(tr4, content5 = Slice.empty) {
    super.replace(tr4, content5);
    if (content5 == Slice.empty) {
      let marks = this.$from.marksAcross(this.$to);
      if (marks)
        tr4.ensureMarks(marks);
    }
  }
  eq(other) {
    return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
  }
  getBookmark() {
    return new TextBookmark(this.anchor, this.head);
  }
  toJSON() {
    return { type: "text", anchor: this.anchor, head: this.head };
  }
  /**
  @internal
  */
  static fromJSON(doc4, json) {
    if (typeof json.anchor != "number" || typeof json.head != "number")
      throw new RangeError("Invalid input for TextSelection.fromJSON");
    return new TextSelection(doc4.resolve(json.anchor), doc4.resolve(json.head));
  }
  /**
  Create a text selection from non-resolved positions.
  */
  static create(doc4, anchor, head2 = anchor) {
    let $anchor = doc4.resolve(anchor);
    return new this($anchor, head2 == anchor ? $anchor : doc4.resolve(head2));
  }
  /**
  Return a text selection that spans the given positions or, if
  they aren't text positions, find a text selection near them.
  `bias` determines whether the method searches forward (default)
  or backwards (negative number) first. Will fall back to calling
  [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
  doesn't contain a valid text position.
  */
  static between($anchor, $head, bias) {
    let dPos = $anchor.pos - $head.pos;
    if (!bias || dPos)
      bias = dPos >= 0 ? 1 : -1;
    if (!$head.parent.inlineContent) {
      let found2 = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
      if (found2)
        $head = found2.$head;
      else
        return Selection.near($head, bias);
    }
    if (!$anchor.parent.inlineContent) {
      if (dPos == 0) {
        $anchor = $head;
      } else {
        $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
        if ($anchor.pos < $head.pos != dPos < 0)
          $anchor = $head;
      }
    }
    return new TextSelection($anchor, $head);
  }
};
Selection.jsonID("text", TextSelection);
var TextBookmark = class {
  constructor(anchor, head2) {
    this.anchor = anchor;
    this.head = head2;
  }
  map(mapping) {
    return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
  }
  resolve(doc4) {
    return TextSelection.between(doc4.resolve(this.anchor), doc4.resolve(this.head));
  }
};
var NodeSelection = class extends Selection {
  /**
  Create a node selection. Does not verify the validity of its
  argument.
  */
  constructor($pos) {
    let node4 = $pos.nodeAfter;
    let $end = $pos.node(0).resolve($pos.pos + node4.nodeSize);
    super($pos, $end);
    this.node = node4;
  }
  map(doc4, mapping) {
    let { deleted, pos } = mapping.mapResult(this.anchor);
    let $pos = doc4.resolve(pos);
    if (deleted)
      return Selection.near($pos);
    return new NodeSelection($pos);
  }
  content() {
    return new Slice(Fragment.from(this.node), 0, 0);
  }
  eq(other) {
    return other instanceof NodeSelection && other.anchor == this.anchor;
  }
  toJSON() {
    return { type: "node", anchor: this.anchor };
  }
  getBookmark() {
    return new NodeBookmark(this.anchor);
  }
  /**
  @internal
  */
  static fromJSON(doc4, json) {
    if (typeof json.anchor != "number")
      throw new RangeError("Invalid input for NodeSelection.fromJSON");
    return new NodeSelection(doc4.resolve(json.anchor));
  }
  /**
  Create a node selection from non-resolved positions.
  */
  static create(doc4, from5) {
    return new NodeSelection(doc4.resolve(from5));
  }
  /**
  Determines whether the given node may be selected as a node
  selection.
  */
  static isSelectable(node4) {
    return !node4.isText && node4.type.spec.selectable !== false;
  }
};
NodeSelection.prototype.visible = false;
Selection.jsonID("node", NodeSelection);
var NodeBookmark = class {
  constructor(anchor) {
    this.anchor = anchor;
  }
  map(mapping) {
    let { deleted, pos } = mapping.mapResult(this.anchor);
    return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
  }
  resolve(doc4) {
    let $pos = doc4.resolve(this.anchor), node4 = $pos.nodeAfter;
    if (node4 && NodeSelection.isSelectable(node4))
      return new NodeSelection($pos);
    return Selection.near($pos);
  }
};
var AllSelection = class extends Selection {
  /**
  Create an all-selection over the given document.
  */
  constructor(doc4) {
    super(doc4.resolve(0), doc4.resolve(doc4.content.size));
  }
  replace(tr4, content5 = Slice.empty) {
    if (content5 == Slice.empty) {
      tr4.delete(0, tr4.doc.content.size);
      let sel = Selection.atStart(tr4.doc);
      if (!sel.eq(tr4.selection))
        tr4.setSelection(sel);
    } else {
      super.replace(tr4, content5);
    }
  }
  toJSON() {
    return { type: "all" };
  }
  /**
  @internal
  */
  static fromJSON(doc4) {
    return new AllSelection(doc4);
  }
  map(doc4) {
    return new AllSelection(doc4);
  }
  eq(other) {
    return other instanceof AllSelection;
  }
  getBookmark() {
    return AllBookmark;
  }
};
Selection.jsonID("all", AllSelection);
var AllBookmark = {
  map() {
    return this;
  },
  resolve(doc4) {
    return new AllSelection(doc4);
  }
};
function findSelectionIn(doc4, node4, pos, index7, dir, text10 = false) {
  if (node4.inlineContent)
    return TextSelection.create(doc4, pos);
  for (let i = index7 - (dir > 0 ? 0 : 1); dir > 0 ? i < node4.childCount : i >= 0; i += dir) {
    let child = node4.child(i);
    if (!child.isAtom) {
      let inner = findSelectionIn(doc4, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text10);
      if (inner)
        return inner;
    } else if (!text10 && NodeSelection.isSelectable(child)) {
      return NodeSelection.create(doc4, pos - (dir < 0 ? child.nodeSize : 0));
    }
    pos += child.nodeSize * dir;
  }
  return null;
}
function selectionToInsertionEnd(tr4, startLen, bias) {
  let last2 = tr4.steps.length - 1;
  if (last2 < startLen)
    return;
  let step = tr4.steps[last2];
  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
    return;
  let map6 = tr4.mapping.maps[last2], end2;
  map6.forEach((_from, _to, _newFrom, newTo) => {
    if (end2 == null)
      end2 = newTo;
  });
  tr4.setSelection(Selection.near(tr4.doc.resolve(end2), bias));
}
var UPDATED_SEL = 1;
var UPDATED_MARKS = 2;
var UPDATED_SCROLL = 4;
var Transaction = class extends Transform {
  /**
  @internal
  */
  constructor(state) {
    super(state.doc);
    this.curSelectionFor = 0;
    this.updated = 0;
    this.meta = /* @__PURE__ */ Object.create(null);
    this.time = Date.now();
    this.curSelection = state.selection;
    this.storedMarks = state.storedMarks;
  }
  /**
  The transaction's current selection. This defaults to the editor
  selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
  transaction, but can be overwritten with
  [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
  */
  get selection() {
    if (this.curSelectionFor < this.steps.length) {
      this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
      this.curSelectionFor = this.steps.length;
    }
    return this.curSelection;
  }
  /**
  Update the transaction's current selection. Will determine the
  selection that the editor gets when the transaction is applied.
  */
  setSelection(selection) {
    if (selection.$from.doc != this.doc)
      throw new RangeError("Selection passed to setSelection must point at the current document");
    this.curSelection = selection;
    this.curSelectionFor = this.steps.length;
    this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
    this.storedMarks = null;
    return this;
  }
  /**
  Whether the selection was explicitly updated by this transaction.
  */
  get selectionSet() {
    return (this.updated & UPDATED_SEL) > 0;
  }
  /**
  Set the current stored marks.
  */
  setStoredMarks(marks) {
    this.storedMarks = marks;
    this.updated |= UPDATED_MARKS;
    return this;
  }
  /**
  Make sure the current stored marks or, if that is null, the marks
  at the selection, match the given set of marks. Does nothing if
  this is already the case.
  */
  ensureMarks(marks) {
    if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
      this.setStoredMarks(marks);
    return this;
  }
  /**
  Add a mark to the set of stored marks.
  */
  addStoredMark(mark2) {
    return this.ensureMarks(mark2.addToSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Remove a mark or mark type from the set of stored marks.
  */
  removeStoredMark(mark2) {
    return this.ensureMarks(mark2.removeFromSet(this.storedMarks || this.selection.$head.marks()));
  }
  /**
  Whether the stored marks were explicitly set for this transaction.
  */
  get storedMarksSet() {
    return (this.updated & UPDATED_MARKS) > 0;
  }
  /**
  @internal
  */
  addStep(step, doc4) {
    super.addStep(step, doc4);
    this.updated = this.updated & ~UPDATED_MARKS;
    this.storedMarks = null;
  }
  /**
  Update the timestamp for the transaction.
  */
  setTime(time) {
    this.time = time;
    return this;
  }
  /**
  Replace the current selection with the given slice.
  */
  replaceSelection(slice3) {
    this.selection.replace(this, slice3);
    return this;
  }
  /**
  Replace the selection with the given node. When `inheritMarks` is
  true and the content is inline, it inherits the marks from the
  place where it is inserted.
  */
  replaceSelectionWith(node4, inheritMarks = true) {
    let selection = this.selection;
    if (inheritMarks)
      node4 = node4.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : selection.$from.marksAcross(selection.$to) || Mark.none));
    selection.replaceWith(this, node4);
    return this;
  }
  /**
  Delete the selection.
  */
  deleteSelection() {
    this.selection.replace(this);
    return this;
  }
  /**
  Replace the given range, or the selection if no range is given,
  with a text node containing the given string.
  */
  insertText(text10, from5, to3) {
    let schema = this.doc.type.schema;
    if (from5 == null) {
      if (!text10)
        return this.deleteSelection();
      return this.replaceSelectionWith(schema.text(text10), true);
    } else {
      if (to3 == null)
        to3 = from5;
      to3 = to3 == null ? from5 : to3;
      if (!text10)
        return this.deleteRange(from5, to3);
      let marks = this.storedMarks;
      if (!marks) {
        let $from = this.doc.resolve(from5);
        marks = to3 == from5 ? $from.marks() : $from.marksAcross(this.doc.resolve(to3));
      }
      this.replaceRangeWith(from5, to3, schema.text(text10, marks));
      if (!this.selection.empty)
        this.setSelection(Selection.near(this.selection.$to));
      return this;
    }
  }
  /**
  Store a metadata property in this transaction, keyed either by
  name or by plugin.
  */
  setMeta(key2, value) {
    this.meta[typeof key2 == "string" ? key2 : key2.key] = value;
    return this;
  }
  /**
  Retrieve a metadata property for a given name or plugin.
  */
  getMeta(key2) {
    return this.meta[typeof key2 == "string" ? key2 : key2.key];
  }
  /**
  Returns true if this transaction doesn't contain any metadata,
  and can thus safely be extended.
  */
  get isGeneric() {
    for (let _2 in this.meta)
      return false;
    return true;
  }
  /**
  Indicate that the editor should scroll the selection into view
  when updated to the state produced by this transaction.
  */
  scrollIntoView() {
    this.updated |= UPDATED_SCROLL;
    return this;
  }
  /**
  True when this transaction has had `scrollIntoView` called on it.
  */
  get scrolledIntoView() {
    return (this.updated & UPDATED_SCROLL) > 0;
  }
};
function bind(f2, self2) {
  return !self2 || !f2 ? f2 : f2.bind(self2);
}
var FieldDesc = class {
  constructor(name, desc, self2) {
    this.name = name;
    this.init = bind(desc.init, self2);
    this.apply = bind(desc.apply, self2);
  }
};
var baseFields = [
  new FieldDesc("doc", {
    init(config) {
      return config.doc || config.schema.topNodeType.createAndFill();
    },
    apply(tr4) {
      return tr4.doc;
    }
  }),
  new FieldDesc("selection", {
    init(config, instance) {
      return config.selection || Selection.atStart(instance.doc);
    },
    apply(tr4) {
      return tr4.selection;
    }
  }),
  new FieldDesc("storedMarks", {
    init(config) {
      return config.storedMarks || null;
    },
    apply(tr4, _marks, _old, state) {
      return state.selection.$cursor ? tr4.storedMarks : null;
    }
  }),
  new FieldDesc("scrollToSelection", {
    init() {
      return 0;
    },
    apply(tr4, prev2) {
      return tr4.scrolledIntoView ? prev2 + 1 : prev2;
    }
  })
];
var Configuration = class {
  constructor(schema, plugins) {
    this.schema = schema;
    this.plugins = [];
    this.pluginsByKey = /* @__PURE__ */ Object.create(null);
    this.fields = baseFields.slice();
    if (plugins)
      plugins.forEach((plugin) => {
        if (this.pluginsByKey[plugin.key])
          throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
        this.plugins.push(plugin);
        this.pluginsByKey[plugin.key] = plugin;
        if (plugin.spec.state)
          this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
      });
  }
};
var EditorState = class {
  /**
  @internal
  */
  constructor(config) {
    this.config = config;
  }
  /**
  The schema of the state's document.
  */
  get schema() {
    return this.config.schema;
  }
  /**
  The plugins that are active in this state.
  */
  get plugins() {
    return this.config.plugins;
  }
  /**
  Apply the given transaction to produce a new state.
  */
  apply(tr4) {
    return this.applyTransaction(tr4).state;
  }
  /**
  @internal
  */
  filterTransaction(tr4, ignore3 = -1) {
    for (let i = 0; i < this.config.plugins.length; i++)
      if (i != ignore3) {
        let plugin = this.config.plugins[i];
        if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr4, this))
          return false;
      }
    return true;
  }
  /**
  Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
  returns the precise transactions that were applied (which might
  be influenced by the [transaction
  hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
  plugins) along with the new state.
  */
  applyTransaction(rootTr) {
    if (!this.filterTransaction(rootTr))
      return { state: this, transactions: [] };
    let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
    for (; ; ) {
      let haveNew = false;
      for (let i = 0; i < this.config.plugins.length; i++) {
        let plugin = this.config.plugins[i];
        if (plugin.spec.appendTransaction) {
          let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
          let tr4 = n < trs.length && plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
          if (tr4 && newState.filterTransaction(tr4, i)) {
            tr4.setMeta("appendedTransaction", rootTr);
            if (!seen) {
              seen = [];
              for (let j = 0; j < this.config.plugins.length; j++)
                seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });
            }
            trs.push(tr4);
            newState = newState.applyInner(tr4);
            haveNew = true;
          }
          if (seen)
            seen[i] = { state: newState, n: trs.length };
        }
      }
      if (!haveNew)
        return { state: newState, transactions: trs };
    }
  }
  /**
  @internal
  */
  applyInner(tr4) {
    if (!tr4.before.eq(this.doc))
      throw new RangeError("Applying a mismatched transaction");
    let newInstance = new EditorState(this.config), fields = this.config.fields;
    for (let i = 0; i < fields.length; i++) {
      let field = fields[i];
      newInstance[field.name] = field.apply(tr4, this[field.name], this, newInstance);
    }
    return newInstance;
  }
  /**
  Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
  */
  get tr() {
    return new Transaction(this);
  }
  /**
  Create a new state.
  */
  static create(config) {
    let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
    let instance = new EditorState($config);
    for (let i = 0; i < $config.fields.length; i++)
      instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
    return instance;
  }
  /**
  Create a new state based on this one, but with an adjusted set
  of active plugins. State fields that exist in both sets of
  plugins are kept unchanged. Those that no longer exist are
  dropped, and those that are new are initialized using their
  [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
  configuration object..
  */
  reconfigure(config) {
    let $config = new Configuration(this.schema, config.plugins);
    let fields = $config.fields, instance = new EditorState($config);
    for (let i = 0; i < fields.length; i++) {
      let name = fields[i].name;
      instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
    }
    return instance;
  }
  /**
  Serialize this state to JSON. If you want to serialize the state
  of plugins, pass an object mapping property names to use in the
  resulting JSON object to plugin objects. The argument may also be
  a string or number, in which case it is ignored, to support the
  way `JSON.stringify` calls `toString` methods.
  */
  toJSON(pluginFields) {
    let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
    if (this.storedMarks)
      result.storedMarks = this.storedMarks.map((m) => m.toJSON());
    if (pluginFields && typeof pluginFields == "object")
      for (let prop in pluginFields) {
        if (prop == "doc" || prop == "selection")
          throw new RangeError("The JSON fields `doc` and `selection` are reserved");
        let plugin = pluginFields[prop], state = plugin.spec.state;
        if (state && state.toJSON)
          result[prop] = state.toJSON.call(plugin, this[plugin.key]);
      }
    return result;
  }
  /**
  Deserialize a JSON representation of a state. `config` should
  have at least a `schema` field, and should contain array of
  plugins to initialize the state with. `pluginFields` can be used
  to deserialize the state of plugins, by associating plugin
  instances with the property names they use in the JSON object.
  */
  static fromJSON(config, json, pluginFields) {
    if (!json)
      throw new RangeError("Invalid input for EditorState.fromJSON");
    if (!config.schema)
      throw new RangeError("Required config field 'schema' missing");
    let $config = new Configuration(config.schema, config.plugins);
    let instance = new EditorState($config);
    $config.fields.forEach((field) => {
      if (field.name == "doc") {
        instance.doc = Node.fromJSON(config.schema, json.doc);
      } else if (field.name == "selection") {
        instance.selection = Selection.fromJSON(instance.doc, json.selection);
      } else if (field.name == "storedMarks") {
        if (json.storedMarks)
          instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
      } else {
        if (pluginFields)
          for (let prop in pluginFields) {
            let plugin = pluginFields[prop], state = plugin.spec.state;
            if (plugin.key == field.name && state && state.fromJSON && Object.prototype.hasOwnProperty.call(json, prop)) {
              instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
              return;
            }
          }
        instance[field.name] = field.init(config, instance);
      }
    });
    return instance;
  }
};
function bindProps(obj, self2, target) {
  for (let prop in obj) {
    let val = obj[prop];
    if (val instanceof Function)
      val = val.bind(self2);
    else if (prop == "handleDOMEvents")
      val = bindProps(val, self2, {});
    target[prop] = val;
  }
  return target;
}
var Plugin = class {
  /**
  Create a plugin.
  */
  constructor(spec) {
    this.spec = spec;
    this.props = {};
    if (spec.props)
      bindProps(spec.props, this, this.props);
    this.key = spec.key ? spec.key.key : createKey("plugin");
  }
  /**
  Extract the plugin's state field from an editor state.
  */
  getState(state) {
    return state[this.key];
  }
};
var keys = /* @__PURE__ */ Object.create(null);
function createKey(name) {
  if (name in keys)
    return name + "$" + ++keys[name];
  keys[name] = 0;
  return name + "$";
}
var PluginKey = class {
  /**
  Create a plugin key.
  */
  constructor(name = "key") {
    this.key = createKey(name);
  }
  /**
  Get the active plugin with this key, if any, from an editor
  state.
  */
  get(state) {
    return state.config.pluginsByKey[this.key];
  }
  /**
  Get the plugin's state from an editor state.
  */
  getState(state) {
    return state[this.key];
  }
};

// node_modules/prosemirror-view/dist/index.js
var domIndex = function(node4) {
  for (var index7 = 0; ; index7++) {
    node4 = node4.previousSibling;
    if (!node4)
      return index7;
  }
};
var parentNode = function(node4) {
  let parent = node4.assignedSlot || node4.parentNode;
  return parent && parent.nodeType == 11 ? parent.host : parent;
};
var reusedRange = null;
var textRange = function(node4, from5, to3) {
  let range2 = reusedRange || (reusedRange = document.createRange());
  range2.setEnd(node4, to3 == null ? node4.nodeValue.length : to3);
  range2.setStart(node4, from5 || 0);
  return range2;
};
var isEquivalentPosition = function(node4, off, targetNode, targetOff) {
  return targetNode && (scanFor(node4, off, targetNode, targetOff, -1) || scanFor(node4, off, targetNode, targetOff, 1));
};
var atomElements = /^(img|br|input|textarea|hr)$/i;
function scanFor(node4, off, targetNode, targetOff, dir) {
  for (; ; ) {
    if (node4 == targetNode && off == targetOff)
      return true;
    if (off == (dir < 0 ? 0 : nodeSize(node4))) {
      let parent = node4.parentNode;
      if (!parent || parent.nodeType != 1 || hasBlockDesc(node4) || atomElements.test(node4.nodeName) || node4.contentEditable == "false")
        return false;
      off = domIndex(node4) + (dir < 0 ? 0 : 1);
      node4 = parent;
    } else if (node4.nodeType == 1) {
      node4 = node4.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node4.contentEditable == "false")
        return false;
      off = dir < 0 ? nodeSize(node4) : 0;
    } else {
      return false;
    }
  }
}
function nodeSize(node4) {
  return node4.nodeType == 3 ? node4.nodeValue.length : node4.childNodes.length;
}
function isOnEdge(node4, offset3, parent) {
  for (let atStart = offset3 == 0, atEnd = offset3 == nodeSize(node4); atStart || atEnd; ) {
    if (node4 == parent)
      return true;
    let index7 = domIndex(node4);
    node4 = node4.parentNode;
    if (!node4)
      return false;
    atStart = atStart && index7 == 0;
    atEnd = atEnd && index7 == nodeSize(node4);
  }
}
function hasBlockDesc(dom) {
  let desc;
  for (let cur = dom; cur; cur = cur.parentNode)
    if (desc = cur.pmViewDesc)
      break;
  return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
}
var selectionCollapsed = function(domSel) {
  return domSel.focusNode && isEquivalentPosition(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);
};
function keyEvent(keyCode, key2) {
  let event = document.createEvent("Event");
  event.initEvent("keydown", true, true);
  event.keyCode = keyCode;
  event.key = event.code = key2;
  return event;
}
function deepActiveElement(doc4) {
  let elt = doc4.activeElement;
  while (elt && elt.shadowRoot)
    elt = elt.shadowRoot.activeElement;
  return elt;
}
function caretFromPoint(doc4, x3, y) {
  if (doc4.caretPositionFromPoint) {
    try {
      let pos = doc4.caretPositionFromPoint(x3, y);
      if (pos)
        return { node: pos.offsetNode, offset: pos.offset };
    } catch (_2) {
    }
  }
  if (doc4.caretRangeFromPoint) {
    let range2 = doc4.caretRangeFromPoint(x3, y);
    if (range2)
      return { node: range2.startContainer, offset: range2.startOffset };
  }
}
var nav = typeof navigator != "undefined" ? navigator : null;
var doc2 = typeof document != "undefined" ? document : null;
var agent = nav && nav.userAgent || "";
var ie_edge = /Edge\/(\d+)/.exec(agent);
var ie_upto10 = /MSIE \d/.exec(agent);
var ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
var ie = !!(ie_upto10 || ie_11up || ie_edge);
var ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
var gecko = !ie && /gecko\/(\d+)/i.test(agent);
gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
var _chrome = !ie && /Chrome\/(\d+)/.exec(agent);
var chrome = !!_chrome;
var chrome_version = _chrome ? +_chrome[1] : 0;
var safari = !ie && !!nav && /Apple Computer/.test(nav.vendor);
var ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
var mac = ios || (nav ? /Mac/.test(nav.platform) : false);
var windows = nav ? /Win/.test(nav.platform) : false;
var android = /Android \d/.test(agent);
var webkit = !!doc2 && "webkitFontSmoothing" in doc2.documentElement.style;
var webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;
function windowRect(doc4) {
  return {
    left: 0,
    right: doc4.documentElement.clientWidth,
    top: 0,
    bottom: doc4.documentElement.clientHeight
  };
}
function getSide(value, side) {
  return typeof value == "number" ? value : value[side];
}
function clientRect(node4) {
  let rect = node4.getBoundingClientRect();
  let scaleX = rect.width / node4.offsetWidth || 1;
  let scaleY = rect.height / node4.offsetHeight || 1;
  return {
    left: rect.left,
    right: rect.left + node4.clientWidth * scaleX,
    top: rect.top,
    bottom: rect.top + node4.clientHeight * scaleY
  };
}
function scrollRectIntoView(view, rect, startDOM) {
  let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
  let doc4 = view.dom.ownerDocument;
  for (let parent = startDOM || view.dom; ; parent = parentNode(parent)) {
    if (!parent)
      break;
    if (parent.nodeType != 1)
      continue;
    let elt = parent;
    let atTop = elt == doc4.body;
    let bounding = atTop ? windowRect(doc4) : clientRect(elt);
    let moveX = 0, moveY = 0;
    if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
      moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
    else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
      moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
    if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
      moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
    else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
      moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
    if (moveX || moveY) {
      if (atTop) {
        doc4.defaultView.scrollBy(moveX, moveY);
      } else {
        let startX = elt.scrollLeft, startY = elt.scrollTop;
        if (moveY)
          elt.scrollTop += moveY;
        if (moveX)
          elt.scrollLeft += moveX;
        let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
        rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
      }
    }
    if (atTop)
      break;
  }
}
function storeScrollPos(view) {
  let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
  let refDOM, refTop;
  for (let x3 = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
    let dom = view.root.elementFromPoint(x3, y);
    if (!dom || dom == view.dom || !view.dom.contains(dom))
      continue;
    let localRect = dom.getBoundingClientRect();
    if (localRect.top >= startY - 20) {
      refDOM = dom;
      refTop = localRect.top;
      break;
    }
  }
  return { refDOM, refTop, stack: scrollStack(view.dom) };
}
function scrollStack(dom) {
  let stack = [], doc4 = dom.ownerDocument;
  for (let cur = dom; cur; cur = parentNode(cur)) {
    stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
    if (dom == doc4)
      break;
  }
  return stack;
}
function resetScrollPos({ refDOM, refTop, stack }) {
  let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
  restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
}
function restoreScrollStack(stack, dTop) {
  for (let i = 0; i < stack.length; i++) {
    let { dom, top: top2, left: left2 } = stack[i];
    if (dom.scrollTop != top2 + dTop)
      dom.scrollTop = top2 + dTop;
    if (dom.scrollLeft != left2)
      dom.scrollLeft = left2;
  }
}
var preventScrollSupported = null;
function focusPreventScroll(dom) {
  if (dom.setActive)
    return dom.setActive();
  if (preventScrollSupported)
    return dom.focus(preventScrollSupported);
  let stored = scrollStack(dom);
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = { preventScroll: true };
      return true;
    }
  } : void 0);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    restoreScrollStack(stored, 0);
  }
}
function findOffsetInNode(node4, coords) {
  let closest, dxClosest = 2e8, coordsClosest, offset3 = 0;
  let rowBot = coords.top, rowTop = coords.top;
  let firstBelow, coordsBelow;
  for (let child = node4.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
    let rects;
    if (child.nodeType == 1)
      rects = child.getClientRects();
    else if (child.nodeType == 3)
      rects = textRange(child).getClientRects();
    else
      continue;
    for (let i = 0; i < rects.length; i++) {
      let rect = rects[i];
      if (rect.top <= rowBot && rect.bottom >= rowTop) {
        rowBot = Math.max(rect.bottom, rowBot);
        rowTop = Math.min(rect.top, rowTop);
        let dx = rect.left > coords.left ? rect.left - coords.left : rect.right < coords.left ? coords.left - rect.right : 0;
        if (dx < dxClosest) {
          closest = child;
          dxClosest = dx;
          coordsClosest = dx && closest.nodeType == 3 ? {
            left: rect.right < coords.left ? rect.right : rect.left,
            top: coords.top
          } : coords;
          if (child.nodeType == 1 && dx)
            offset3 = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
          continue;
        }
      } else if (rect.top > coords.top && !firstBelow && rect.left <= coords.left && rect.right >= coords.left) {
        firstBelow = child;
        coordsBelow = { left: Math.max(rect.left, Math.min(rect.right, coords.left)), top: rect.top };
      }
      if (!closest && (coords.left >= rect.right && coords.top >= rect.top || coords.left >= rect.left && coords.top >= rect.bottom))
        offset3 = childIndex + 1;
    }
  }
  if (!closest && firstBelow) {
    closest = firstBelow;
    coordsClosest = coordsBelow;
    dxClosest = 0;
  }
  if (closest && closest.nodeType == 3)
    return findOffsetInText(closest, coordsClosest);
  if (!closest || dxClosest && closest.nodeType == 1)
    return { node: node4, offset: offset3 };
  return findOffsetInNode(closest, coordsClosest);
}
function findOffsetInText(node4, coords) {
  let len = node4.nodeValue.length;
  let range2 = document.createRange();
  for (let i = 0; i < len; i++) {
    range2.setEnd(node4, i + 1);
    range2.setStart(node4, i);
    let rect = singleRect(range2, 1);
    if (rect.top == rect.bottom)
      continue;
    if (inRect(coords, rect))
      return { node: node4, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
  }
  return { node: node4, offset: 0 };
}
function inRect(coords, rect) {
  return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 && coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
}
function targetKludge(dom, coords) {
  let parent = dom.parentNode;
  if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
    return parent;
  return dom;
}
function posFromElement(view, elt, coords) {
  let { node: node4, offset: offset3 } = findOffsetInNode(elt, coords), bias = -1;
  if (node4.nodeType == 1 && !node4.firstChild) {
    let rect = node4.getBoundingClientRect();
    bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
  }
  return view.docView.posFromDOM(node4, offset3, bias);
}
function posFromCaret(view, node4, offset3, coords) {
  let outsideBlock = -1;
  for (let cur = node4, sawBlock = false; ; ) {
    if (cur == view.dom)
      break;
    let desc = view.docView.nearestDesc(cur, true);
    if (!desc)
      return null;
    if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent && !sawBlock || !desc.contentDOM)) {
      let rect = desc.dom.getBoundingClientRect();
      if (desc.node.isBlock && desc.parent && !sawBlock) {
        sawBlock = true;
        if (rect.left > coords.left || rect.top > coords.top)
          outsideBlock = desc.posBefore;
        else if (rect.right < coords.left || rect.bottom < coords.top)
          outsideBlock = desc.posAfter;
      }
      if (!desc.contentDOM && outsideBlock < 0) {
        let before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2 : coords.left < (rect.left + rect.right) / 2;
        return before ? desc.posBefore : desc.posAfter;
      }
    }
    cur = desc.dom.parentNode;
  }
  return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node4, offset3, -1);
}
function elementFromPoint(element7, coords, box) {
  let len = element7.childNodes.length;
  if (len && box.top < box.bottom) {
    for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI; ; ) {
      let child = element7.childNodes[i];
      if (child.nodeType == 1) {
        let rects = child.getClientRects();
        for (let j = 0; j < rects.length; j++) {
          let rect = rects[j];
          if (inRect(coords, rect))
            return elementFromPoint(child, coords, rect);
        }
      }
      if ((i = (i + 1) % len) == startI)
        break;
    }
  }
  return element7;
}
function posAtCoords(view, coords) {
  let doc4 = view.dom.ownerDocument, node4, offset3 = 0;
  let caret2 = caretFromPoint(doc4, coords.left, coords.top);
  if (caret2)
    ({ node: node4, offset: offset3 } = caret2);
  let elt = (view.root.elementFromPoint ? view.root : doc4).elementFromPoint(coords.left, coords.top);
  let pos;
  if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
    let box = view.dom.getBoundingClientRect();
    if (!inRect(coords, box))
      return null;
    elt = elementFromPoint(view.dom, coords, box);
    if (!elt)
      return null;
  }
  if (safari) {
    for (let p5 = elt; node4 && p5; p5 = parentNode(p5))
      if (p5.draggable)
        node4 = void 0;
  }
  elt = targetKludge(elt, coords);
  if (node4) {
    if (gecko && node4.nodeType == 1) {
      offset3 = Math.min(offset3, node4.childNodes.length);
      if (offset3 < node4.childNodes.length) {
        let next2 = node4.childNodes[offset3], box;
        if (next2.nodeName == "IMG" && (box = next2.getBoundingClientRect()).right <= coords.left && box.bottom > coords.top)
          offset3++;
      }
    }
    if (node4 == view.dom && offset3 == node4.childNodes.length - 1 && node4.lastChild.nodeType == 1 && coords.top > node4.lastChild.getBoundingClientRect().bottom)
      pos = view.state.doc.content.size;
    else if (offset3 == 0 || node4.nodeType != 1 || node4.childNodes[offset3 - 1].nodeName != "BR")
      pos = posFromCaret(view, node4, offset3, coords);
  }
  if (pos == null)
    pos = posFromElement(view, elt, coords);
  let desc = view.docView.nearestDesc(elt, true);
  return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
}
function nonZero(rect) {
  return rect.top < rect.bottom || rect.left < rect.right;
}
function singleRect(target, bias) {
  let rects = target.getClientRects();
  if (rects.length) {
    let first2 = rects[bias < 0 ? 0 : rects.length - 1];
    if (nonZero(first2))
      return first2;
  }
  return Array.prototype.find.call(rects, nonZero) || target.getBoundingClientRect();
}
var BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
function coordsAtPos(view, pos, side) {
  let { node: node4, offset: offset3, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
  let supportEmptyRange = webkit || gecko;
  if (node4.nodeType == 3) {
    if (supportEmptyRange && (BIDI.test(node4.nodeValue) || (side < 0 ? !offset3 : offset3 == node4.nodeValue.length))) {
      let rect = singleRect(textRange(node4, offset3, offset3), side);
      if (gecko && offset3 && /\s/.test(node4.nodeValue[offset3 - 1]) && offset3 < node4.nodeValue.length) {
        let rectBefore = singleRect(textRange(node4, offset3 - 1, offset3 - 1), -1);
        if (rectBefore.top == rect.top) {
          let rectAfter = singleRect(textRange(node4, offset3, offset3 + 1), -1);
          if (rectAfter.top != rect.top)
            return flattenV(rectAfter, rectAfter.left < rectBefore.left);
        }
      }
      return rect;
    } else {
      let from5 = offset3, to3 = offset3, takeSide = side < 0 ? 1 : -1;
      if (side < 0 && !offset3) {
        to3++;
        takeSide = -1;
      } else if (side >= 0 && offset3 == node4.nodeValue.length) {
        from5--;
        takeSide = 1;
      } else if (side < 0) {
        from5--;
      } else {
        to3++;
      }
      return flattenV(singleRect(textRange(node4, from5, to3), takeSide), takeSide < 0);
    }
  }
  let $dom = view.state.doc.resolve(pos - (atom || 0));
  if (!$dom.parent.inlineContent) {
    if (atom == null && offset3 && (side < 0 || offset3 == nodeSize(node4))) {
      let before = node4.childNodes[offset3 - 1];
      if (before.nodeType == 1)
        return flattenH(before.getBoundingClientRect(), false);
    }
    if (atom == null && offset3 < nodeSize(node4)) {
      let after = node4.childNodes[offset3];
      if (after.nodeType == 1)
        return flattenH(after.getBoundingClientRect(), true);
    }
    return flattenH(node4.getBoundingClientRect(), side >= 0);
  }
  if (atom == null && offset3 && (side < 0 || offset3 == nodeSize(node4))) {
    let before = node4.childNodes[offset3 - 1];
    let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1)) : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
    if (target)
      return flattenV(singleRect(target, 1), false);
  }
  if (atom == null && offset3 < nodeSize(node4)) {
    let after = node4.childNodes[offset3];
    while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
      after = after.nextSibling;
    let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, supportEmptyRange ? 0 : 1) : after.nodeType == 1 ? after : null;
    if (target)
      return flattenV(singleRect(target, -1), true);
  }
  return flattenV(singleRect(node4.nodeType == 3 ? textRange(node4) : node4, -side), side >= 0);
}
function flattenV(rect, left2) {
  if (rect.width == 0)
    return rect;
  let x3 = left2 ? rect.left : rect.right;
  return { top: rect.top, bottom: rect.bottom, left: x3, right: x3 };
}
function flattenH(rect, top2) {
  if (rect.height == 0)
    return rect;
  let y = top2 ? rect.top : rect.bottom;
  return { top: y, bottom: y, left: rect.left, right: rect.right };
}
function withFlushedState(view, state, f2) {
  let viewState = view.state, active = view.root.activeElement;
  if (viewState != state)
    view.updateState(state);
  if (active != view.dom)
    view.focus();
  try {
    return f2();
  } finally {
    if (viewState != state)
      view.updateState(viewState);
    if (active != view.dom && active)
      active.focus();
  }
}
function endOfTextblockVertical(view, state, dir) {
  let sel = state.selection;
  let $pos = dir == "up" ? sel.$from : sel.$to;
  return withFlushedState(view, state, () => {
    let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
    for (; ; ) {
      let nearest = view.docView.nearestDesc(dom, true);
      if (!nearest)
        break;
      if (nearest.node.isBlock) {
        dom = nearest.contentDOM || nearest.dom;
        break;
      }
      dom = nearest.dom.parentNode;
    }
    let coords = coordsAtPos(view, $pos.pos, 1);
    for (let child = dom.firstChild; child; child = child.nextSibling) {
      let boxes;
      if (child.nodeType == 1)
        boxes = child.getClientRects();
      else if (child.nodeType == 3)
        boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
      else
        continue;
      for (let i = 0; i < boxes.length; i++) {
        let box = boxes[i];
        if (box.bottom > box.top + 1 && (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2 : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
          return false;
      }
    }
    return true;
  });
}
var maybeRTL = /[\u0590-\u08ac]/;
function endOfTextblockHorizontal(view, state, dir) {
  let { $head } = state.selection;
  if (!$head.parent.isTextblock)
    return false;
  let offset3 = $head.parentOffset, atStart = !offset3, atEnd = offset3 == $head.parent.content.size;
  let sel = view.domSelection();
  if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
    return dir == "left" || dir == "backward" ? atStart : atEnd;
  return withFlushedState(view, state, () => {
    let { focusNode: oldNode, focusOffset: oldOff, anchorNode, anchorOffset } = view.domSelectionRange();
    let oldBidiLevel = sel.caretBidiLevel;
    sel.modify("move", dir, "character");
    let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
    let { focusNode: newNode, focusOffset: newOff } = view.domSelectionRange();
    let result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) || oldNode == newNode && oldOff == newOff;
    try {
      sel.collapse(anchorNode, anchorOffset);
      if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend)
        sel.extend(oldNode, oldOff);
    } catch (_2) {
    }
    if (oldBidiLevel != null)
      sel.caretBidiLevel = oldBidiLevel;
    return result;
  });
}
var cachedState = null;
var cachedDir = null;
var cachedResult = false;
function endOfTextblock(view, state, dir) {
  if (cachedState == state && cachedDir == dir)
    return cachedResult;
  cachedState = state;
  cachedDir = dir;
  return cachedResult = dir == "up" || dir == "down" ? endOfTextblockVertical(view, state, dir) : endOfTextblockHorizontal(view, state, dir);
}
var NOT_DIRTY = 0;
var CHILD_DIRTY = 1;
var CONTENT_DIRTY = 2;
var NODE_DIRTY = 3;
var ViewDesc = class {
  constructor(parent, children, dom, contentDOM) {
    this.parent = parent;
    this.children = children;
    this.dom = dom;
    this.contentDOM = contentDOM;
    this.dirty = NOT_DIRTY;
    dom.pmViewDesc = this;
  }
  // Used to check whether a given description corresponds to a
  // widget/mark/node.
  matchesWidget(widget) {
    return false;
  }
  matchesMark(mark2) {
    return false;
  }
  matchesNode(node4, outerDeco, innerDeco) {
    return false;
  }
  matchesHack(nodeName) {
    return false;
  }
  // When parsing in-editor content (in domchange.js), we allow
  // descriptions to determine the parse rules that should be used to
  // parse them.
  parseRule() {
    return null;
  }
  // Used by the editor's event handler to ignore events that come
  // from certain descs.
  stopEvent(event) {
    return false;
  }
  // The size of the content represented by this desc.
  get size() {
    let size3 = 0;
    for (let i = 0; i < this.children.length; i++)
      size3 += this.children[i].size;
    return size3;
  }
  // For block nodes, this represents the space taken up by their
  // start/end tokens.
  get border() {
    return 0;
  }
  destroy() {
    this.parent = void 0;
    if (this.dom.pmViewDesc == this)
      this.dom.pmViewDesc = void 0;
    for (let i = 0; i < this.children.length; i++)
      this.children[i].destroy();
  }
  posBeforeChild(child) {
    for (let i = 0, pos = this.posAtStart; ; i++) {
      let cur = this.children[i];
      if (cur == child)
        return pos;
      pos += cur.size;
    }
  }
  get posBefore() {
    return this.parent.posBeforeChild(this);
  }
  get posAtStart() {
    return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
  }
  get posAfter() {
    return this.posBefore + this.size;
  }
  get posAtEnd() {
    return this.posAtStart + this.size - 2 * this.border;
  }
  localPosFromDOM(dom, offset3, bias) {
    if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
      if (bias < 0) {
        let domBefore, desc;
        if (dom == this.contentDOM) {
          domBefore = dom.childNodes[offset3 - 1];
        } else {
          while (dom.parentNode != this.contentDOM)
            dom = dom.parentNode;
          domBefore = dom.previousSibling;
        }
        while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
          domBefore = domBefore.previousSibling;
        return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
      } else {
        let domAfter, desc;
        if (dom == this.contentDOM) {
          domAfter = dom.childNodes[offset3];
        } else {
          while (dom.parentNode != this.contentDOM)
            dom = dom.parentNode;
          domAfter = dom.nextSibling;
        }
        while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
          domAfter = domAfter.nextSibling;
        return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
      }
    }
    let atEnd;
    if (dom == this.dom && this.contentDOM) {
      atEnd = offset3 > domIndex(this.contentDOM);
    } else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
      atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
    } else if (this.dom.firstChild) {
      if (offset3 == 0)
        for (let search3 = dom; ; search3 = search3.parentNode) {
          if (search3 == this.dom) {
            atEnd = false;
            break;
          }
          if (search3.previousSibling)
            break;
        }
      if (atEnd == null && offset3 == dom.childNodes.length)
        for (let search3 = dom; ; search3 = search3.parentNode) {
          if (search3 == this.dom) {
            atEnd = true;
            break;
          }
          if (search3.nextSibling)
            break;
        }
    }
    return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
  }
  nearestDesc(dom, onlyNodes = false) {
    for (let first2 = true, cur = dom; cur; cur = cur.parentNode) {
      let desc = this.getDesc(cur), nodeDOM;
      if (desc && (!onlyNodes || desc.node)) {
        if (first2 && (nodeDOM = desc.nodeDOM) && !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
          first2 = false;
        else
          return desc;
      }
    }
  }
  getDesc(dom) {
    let desc = dom.pmViewDesc;
    for (let cur = desc; cur; cur = cur.parent)
      if (cur == this)
        return desc;
  }
  posFromDOM(dom, offset3, bias) {
    for (let scan = dom; scan; scan = scan.parentNode) {
      let desc = this.getDesc(scan);
      if (desc)
        return desc.localPosFromDOM(dom, offset3, bias);
    }
    return -1;
  }
  // Find the desc for the node after the given pos, if any. (When a
  // parent node overrode rendering, there might not be one.)
  descAt(pos) {
    for (let i = 0, offset3 = 0; i < this.children.length; i++) {
      let child = this.children[i], end2 = offset3 + child.size;
      if (offset3 == pos && end2 != offset3) {
        while (!child.border && child.children.length)
          child = child.children[0];
        return child;
      }
      if (pos < end2)
        return child.descAt(pos - offset3 - child.border);
      offset3 = end2;
    }
  }
  domFromPos(pos, side) {
    if (!this.contentDOM)
      return { node: this.dom, offset: 0, atom: pos + 1 };
    let i = 0, offset3 = 0;
    for (let curPos = 0; i < this.children.length; i++) {
      let child = this.children[i], end2 = curPos + child.size;
      if (end2 > pos || child instanceof TrailingHackViewDesc) {
        offset3 = pos - curPos;
        break;
      }
      curPos = end2;
    }
    if (offset3)
      return this.children[i].domFromPos(offset3 - this.children[i].border, side);
    for (let prev2; i && !(prev2 = this.children[i - 1]).size && prev2 instanceof WidgetViewDesc && prev2.side >= 0; i--) {
    }
    if (side <= 0) {
      let prev2, enter2 = true;
      for (; ; i--, enter2 = false) {
        prev2 = i ? this.children[i - 1] : null;
        if (!prev2 || prev2.dom.parentNode == this.contentDOM)
          break;
      }
      if (prev2 && side && enter2 && !prev2.border && !prev2.domAtom)
        return prev2.domFromPos(prev2.size, side);
      return { node: this.contentDOM, offset: prev2 ? domIndex(prev2.dom) + 1 : 0 };
    } else {
      let next2, enter2 = true;
      for (; ; i++, enter2 = false) {
        next2 = i < this.children.length ? this.children[i] : null;
        if (!next2 || next2.dom.parentNode == this.contentDOM)
          break;
      }
      if (next2 && enter2 && !next2.border && !next2.domAtom)
        return next2.domFromPos(0, side);
      return { node: this.contentDOM, offset: next2 ? domIndex(next2.dom) : this.contentDOM.childNodes.length };
    }
  }
  // Used to find a DOM range in a single parent for a given changed
  // range.
  parseRange(from5, to3, base5 = 0) {
    if (this.children.length == 0)
      return { node: this.contentDOM, from: from5, to: to3, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
    let fromOffset = -1, toOffset = -1;
    for (let offset3 = base5, i = 0; ; i++) {
      let child = this.children[i], end2 = offset3 + child.size;
      if (fromOffset == -1 && from5 <= end2) {
        let childBase = offset3 + child.border;
        if (from5 >= childBase && to3 <= end2 - child.border && child.node && child.contentDOM && this.contentDOM.contains(child.contentDOM))
          return child.parseRange(from5, to3, childBase);
        from5 = offset3;
        for (let j = i; j > 0; j--) {
          let prev2 = this.children[j - 1];
          if (prev2.size && prev2.dom.parentNode == this.contentDOM && !prev2.emptyChildAt(1)) {
            fromOffset = domIndex(prev2.dom) + 1;
            break;
          }
          from5 -= prev2.size;
        }
        if (fromOffset == -1)
          fromOffset = 0;
      }
      if (fromOffset > -1 && (end2 > to3 || i == this.children.length - 1)) {
        to3 = end2;
        for (let j = i + 1; j < this.children.length; j++) {
          let next2 = this.children[j];
          if (next2.size && next2.dom.parentNode == this.contentDOM && !next2.emptyChildAt(-1)) {
            toOffset = domIndex(next2.dom);
            break;
          }
          to3 += next2.size;
        }
        if (toOffset == -1)
          toOffset = this.contentDOM.childNodes.length;
        break;
      }
      offset3 = end2;
    }
    return { node: this.contentDOM, from: from5, to: to3, fromOffset, toOffset };
  }
  emptyChildAt(side) {
    if (this.border || !this.contentDOM || !this.children.length)
      return false;
    let child = this.children[side < 0 ? 0 : this.children.length - 1];
    return child.size == 0 || child.emptyChildAt(side);
  }
  domAfterPos(pos) {
    let { node: node4, offset: offset3 } = this.domFromPos(pos, 0);
    if (node4.nodeType != 1 || offset3 == node4.childNodes.length)
      throw new RangeError("No node after pos " + pos);
    return node4.childNodes[offset3];
  }
  // View descs are responsible for setting any selection that falls
  // entirely inside of them, so that custom implementations can do
  // custom things with the selection. Note that this falls apart when
  // a selection starts in such a node and ends in another, in which
  // case we just use whatever domFromPos produces as a best effort.
  setSelection(anchor, head2, root6, force = false) {
    let from5 = Math.min(anchor, head2), to3 = Math.max(anchor, head2);
    for (let i = 0, offset3 = 0; i < this.children.length; i++) {
      let child = this.children[i], end2 = offset3 + child.size;
      if (from5 > offset3 && to3 < end2)
        return child.setSelection(anchor - offset3 - child.border, head2 - offset3 - child.border, root6, force);
      offset3 = end2;
    }
    let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
    let headDOM = head2 == anchor ? anchorDOM : this.domFromPos(head2, head2 ? -1 : 1);
    let domSel = root6.getSelection();
    let brKludge = false;
    if ((gecko || safari) && anchor == head2) {
      let { node: node4, offset: offset3 } = anchorDOM;
      if (node4.nodeType == 3) {
        brKludge = !!(offset3 && node4.nodeValue[offset3 - 1] == "\n");
      } else {
        let prev2 = node4.childNodes[offset3 - 1];
        brKludge = prev2 && (prev2.nodeName == "BR" || prev2.contentEditable == "false");
      }
    }
    if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
      let after = domSel.focusNode.childNodes[domSel.focusOffset];
      if (after && after.contentEditable == "false")
        force = true;
    }
    if (!(force || brKludge && safari) && isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) && isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
      return;
    let domSelExtended = false;
    if ((domSel.extend || anchor == head2) && !brKludge) {
      domSel.collapse(anchorDOM.node, anchorDOM.offset);
      try {
        if (anchor != head2)
          domSel.extend(headDOM.node, headDOM.offset);
        domSelExtended = true;
      } catch (_2) {
      }
    }
    if (!domSelExtended) {
      if (anchor > head2) {
        let tmp = anchorDOM;
        anchorDOM = headDOM;
        headDOM = tmp;
      }
      let range2 = document.createRange();
      range2.setEnd(headDOM.node, headDOM.offset);
      range2.setStart(anchorDOM.node, anchorDOM.offset);
      domSel.removeAllRanges();
      domSel.addRange(range2);
    }
  }
  ignoreMutation(mutation) {
    return !this.contentDOM && mutation.type != "selection";
  }
  get contentLost() {
    return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
  }
  // Remove a subtree of the element tree that has been touched
  // by a DOM change, so that the next update will redraw it.
  markDirty(from5, to3) {
    for (let offset3 = 0, i = 0; i < this.children.length; i++) {
      let child = this.children[i], end2 = offset3 + child.size;
      if (offset3 == end2 ? from5 <= end2 && to3 >= offset3 : from5 < end2 && to3 > offset3) {
        let startInside = offset3 + child.border, endInside = end2 - child.border;
        if (from5 >= startInside && to3 <= endInside) {
          this.dirty = from5 == offset3 || to3 == end2 ? CONTENT_DIRTY : CHILD_DIRTY;
          if (from5 == startInside && to3 == endInside && (child.contentLost || child.dom.parentNode != this.contentDOM))
            child.dirty = NODE_DIRTY;
          else
            child.markDirty(from5 - startInside, to3 - startInside);
          return;
        } else {
          child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length ? CONTENT_DIRTY : NODE_DIRTY;
        }
      }
      offset3 = end2;
    }
    this.dirty = CONTENT_DIRTY;
  }
  markParentsDirty() {
    let level = 1;
    for (let node4 = this.parent; node4; node4 = node4.parent, level++) {
      let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
      if (node4.dirty < dirty)
        node4.dirty = dirty;
    }
  }
  get domAtom() {
    return false;
  }
  get ignoreForCoords() {
    return false;
  }
};
var WidgetViewDesc = class extends ViewDesc {
  constructor(parent, widget, view, pos) {
    let self2, dom = widget.type.toDOM;
    if (typeof dom == "function")
      dom = dom(view, () => {
        if (!self2)
          return pos;
        if (self2.parent)
          return self2.parent.posBeforeChild(self2);
      });
    if (!widget.type.spec.raw) {
      if (dom.nodeType != 1) {
        let wrap5 = document.createElement("span");
        wrap5.appendChild(dom);
        dom = wrap5;
      }
      dom.contentEditable = "false";
      dom.classList.add("ProseMirror-widget");
    }
    super(parent, [], dom, null);
    this.widget = widget;
    this.widget = widget;
    self2 = this;
  }
  matchesWidget(widget) {
    return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
  }
  parseRule() {
    return { ignore: true };
  }
  stopEvent(event) {
    let stop = this.widget.spec.stopEvent;
    return stop ? stop(event) : false;
  }
  ignoreMutation(mutation) {
    return mutation.type != "selection" || this.widget.spec.ignoreSelection;
  }
  destroy() {
    this.widget.type.destroy(this.dom);
    super.destroy();
  }
  get domAtom() {
    return true;
  }
  get side() {
    return this.widget.type.side;
  }
};
var CompositionViewDesc = class extends ViewDesc {
  constructor(parent, dom, textDOM, text10) {
    super(parent, [], dom, null);
    this.textDOM = textDOM;
    this.text = text10;
  }
  get size() {
    return this.text.length;
  }
  localPosFromDOM(dom, offset3) {
    if (dom != this.textDOM)
      return this.posAtStart + (offset3 ? this.size : 0);
    return this.posAtStart + offset3;
  }
  domFromPos(pos) {
    return { node: this.textDOM, offset: pos };
  }
  ignoreMutation(mut) {
    return mut.type === "characterData" && mut.target.nodeValue == mut.oldValue;
  }
};
var MarkViewDesc = class extends ViewDesc {
  constructor(parent, mark2, dom, contentDOM) {
    super(parent, [], dom, contentDOM);
    this.mark = mark2;
  }
  static create(parent, mark2, inline2, view) {
    let custom = view.nodeViews[mark2.type.name];
    let spec = custom && custom(mark2, view, inline2);
    if (!spec || !spec.dom)
      spec = DOMSerializer.renderSpec(document, mark2.type.spec.toDOM(mark2, inline2));
    return new MarkViewDesc(parent, mark2, spec.dom, spec.contentDOM || spec.dom);
  }
  parseRule() {
    if (this.dirty & NODE_DIRTY || this.mark.type.spec.reparseInView)
      return null;
    return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM || void 0 };
  }
  matchesMark(mark2) {
    return this.dirty != NODE_DIRTY && this.mark.eq(mark2);
  }
  markDirty(from5, to3) {
    super.markDirty(from5, to3);
    if (this.dirty != NOT_DIRTY) {
      let parent = this.parent;
      while (!parent.node)
        parent = parent.parent;
      if (parent.dirty < this.dirty)
        parent.dirty = this.dirty;
      this.dirty = NOT_DIRTY;
    }
  }
  slice(from5, to3, view) {
    let copy4 = MarkViewDesc.create(this.parent, this.mark, true, view);
    let nodes = this.children, size3 = this.size;
    if (to3 < size3)
      nodes = replaceNodes(nodes, to3, size3, view);
    if (from5 > 0)
      nodes = replaceNodes(nodes, 0, from5, view);
    for (let i = 0; i < nodes.length; i++)
      nodes[i].parent = copy4;
    copy4.children = nodes;
    return copy4;
  }
};
var NodeViewDesc = class extends ViewDesc {
  constructor(parent, node4, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
    super(parent, [], dom, contentDOM);
    this.node = node4;
    this.outerDeco = outerDeco;
    this.innerDeco = innerDeco;
    this.nodeDOM = nodeDOM;
  }
  // By default, a node is rendered using the `toDOM` method from the
  // node type spec. But client code can use the `nodeViews` spec to
  // supply a custom node view, which can influence various aspects of
  // the way the node works.
  //
  // (Using subclassing for this was intentionally decided against,
  // since it'd require exposing a whole slew of finicky
  // implementation details to the user code that they probably will
  // never need.)
  static create(parent, node4, outerDeco, innerDeco, view, pos) {
    let custom = view.nodeViews[node4.type.name], descObj;
    let spec = custom && custom(node4, view, () => {
      if (!descObj)
        return pos;
      if (descObj.parent)
        return descObj.parent.posBeforeChild(descObj);
    }, outerDeco, innerDeco);
    let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
    if (node4.isText) {
      if (!dom)
        dom = document.createTextNode(node4.text);
      else if (dom.nodeType != 3)
        throw new RangeError("Text must be rendered as a DOM text node");
    } else if (!dom) {
      ({ dom, contentDOM } = DOMSerializer.renderSpec(document, node4.type.spec.toDOM(node4)));
    }
    if (!contentDOM && !node4.isText && dom.nodeName != "BR") {
      if (!dom.hasAttribute("contenteditable"))
        dom.contentEditable = "false";
      if (node4.type.spec.draggable)
        dom.draggable = true;
    }
    let nodeDOM = dom;
    dom = applyOuterDeco(dom, outerDeco, node4);
    if (spec)
      return descObj = new CustomNodeViewDesc(parent, node4, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
    else if (node4.isText)
      return new TextViewDesc(parent, node4, outerDeco, innerDeco, dom, nodeDOM, view);
    else
      return new NodeViewDesc(parent, node4, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
  }
  parseRule() {
    if (this.node.type.spec.reparseInView)
      return null;
    let rule = { node: this.node.type.name, attrs: this.node.attrs };
    if (this.node.type.whitespace == "pre")
      rule.preserveWhitespace = "full";
    if (!this.contentDOM) {
      rule.getContent = () => this.node.content;
    } else if (!this.contentLost) {
      rule.contentElement = this.contentDOM;
    } else {
      for (let i = this.children.length - 1; i >= 0; i--) {
        let child = this.children[i];
        if (this.dom.contains(child.dom.parentNode)) {
          rule.contentElement = child.dom.parentNode;
          break;
        }
      }
      if (!rule.contentElement)
        rule.getContent = () => Fragment.empty;
    }
    return rule;
  }
  matchesNode(node4, outerDeco, innerDeco) {
    return this.dirty == NOT_DIRTY && node4.eq(this.node) && sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
  }
  get size() {
    return this.node.nodeSize;
  }
  get border() {
    return this.node.isLeaf ? 0 : 1;
  }
  // Syncs `this.children` to match `this.node.content` and the local
  // decorations, possibly introducing nesting for marks. Then, in a
  // separate step, syncs the DOM inside `this.contentDOM` to
  // `this.children`.
  updateChildren(view, pos) {
    let inline2 = this.node.inlineContent, off = pos;
    let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
    let localComposition = composition && composition.pos > -1 ? composition : null;
    let compositionInChild = composition && composition.pos < 0;
    let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
    iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
      if (widget.spec.marks)
        updater.syncToMarks(widget.spec.marks, inline2, view);
      else if (widget.type.side >= 0 && !insideNode)
        updater.syncToMarks(i == this.node.childCount ? Mark.none : this.node.child(i).marks, inline2, view);
      updater.placeWidget(widget, view, off);
    }, (child, outerDeco, innerDeco, i) => {
      updater.syncToMarks(child.marks, inline2, view);
      let compIndex;
      if (updater.findNodeMatch(child, outerDeco, innerDeco, i))
        ;
      else if (compositionInChild && view.state.selection.from > off && view.state.selection.to < off + child.nodeSize && (compIndex = updater.findIndexWithChild(composition.node)) > -1 && updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view))
        ;
      else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i, off))
        ;
      else {
        updater.addNode(child, outerDeco, innerDeco, view, off);
      }
      off += child.nodeSize;
    });
    updater.syncToMarks([], inline2, view);
    if (this.node.isTextblock)
      updater.addTextblockHacks();
    updater.destroyRest();
    if (updater.changed || this.dirty == CONTENT_DIRTY) {
      if (localComposition)
        this.protectLocalComposition(view, localComposition);
      renderDescs(this.contentDOM, this.children, view);
      if (ios)
        iosHacks(this.dom);
    }
  }
  localCompositionInfo(view, pos) {
    let { from: from5, to: to3 } = view.state.selection;
    if (!(view.state.selection instanceof TextSelection) || from5 < pos || to3 > pos + this.node.content.size)
      return null;
    let sel = view.domSelectionRange();
    let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
    if (!textNode || !this.dom.contains(textNode.parentNode))
      return null;
    if (this.node.inlineContent) {
      let text10 = textNode.nodeValue;
      let textPos = findTextInFragment(this.node.content, text10, from5 - pos, to3 - pos);
      return textPos < 0 ? null : { node: textNode, pos: textPos, text: text10 };
    } else {
      return { node: textNode, pos: -1, text: "" };
    }
  }
  protectLocalComposition(view, { node: node4, pos, text: text10 }) {
    if (this.getDesc(node4))
      return;
    let topNode = node4;
    for (; ; topNode = topNode.parentNode) {
      if (topNode.parentNode == this.contentDOM)
        break;
      while (topNode.previousSibling)
        topNode.parentNode.removeChild(topNode.previousSibling);
      while (topNode.nextSibling)
        topNode.parentNode.removeChild(topNode.nextSibling);
      if (topNode.pmViewDesc)
        topNode.pmViewDesc = void 0;
    }
    let desc = new CompositionViewDesc(this, topNode, node4, text10);
    view.input.compositionNodes.push(desc);
    this.children = replaceNodes(this.children, pos, pos + text10.length, view, desc);
  }
  // If this desc must be updated to match the given node decoration,
  // do so and return true.
  update(node4, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY || !node4.sameMarkup(this.node))
      return false;
    this.updateInner(node4, outerDeco, innerDeco, view);
    return true;
  }
  updateInner(node4, outerDeco, innerDeco, view) {
    this.updateOuterDeco(outerDeco);
    this.node = node4;
    this.innerDeco = innerDeco;
    if (this.contentDOM)
      this.updateChildren(view, this.posAtStart);
    this.dirty = NOT_DIRTY;
  }
  updateOuterDeco(outerDeco) {
    if (sameOuterDeco(outerDeco, this.outerDeco))
      return;
    let needsWrap = this.nodeDOM.nodeType != 1;
    let oldDOM = this.dom;
    this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
    if (this.dom != oldDOM) {
      oldDOM.pmViewDesc = void 0;
      this.dom.pmViewDesc = this;
    }
    this.outerDeco = outerDeco;
  }
  // Mark this node as being the selected node.
  selectNode() {
    if (this.nodeDOM.nodeType == 1)
      this.nodeDOM.classList.add("ProseMirror-selectednode");
    if (this.contentDOM || !this.node.type.spec.draggable)
      this.dom.draggable = true;
  }
  // Remove selected node marking from this node.
  deselectNode() {
    if (this.nodeDOM.nodeType == 1)
      this.nodeDOM.classList.remove("ProseMirror-selectednode");
    if (this.contentDOM || !this.node.type.spec.draggable)
      this.dom.removeAttribute("draggable");
  }
  get domAtom() {
    return this.node.isAtom;
  }
};
function docViewDesc(doc4, outerDeco, innerDeco, dom, view) {
  applyOuterDeco(dom, outerDeco, doc4);
  let docView = new NodeViewDesc(void 0, doc4, outerDeco, innerDeco, dom, dom, dom, view, 0);
  if (docView.contentDOM)
    docView.updateChildren(view, 0);
  return docView;
}
var TextViewDesc = class extends NodeViewDesc {
  constructor(parent, node4, outerDeco, innerDeco, dom, nodeDOM, view) {
    super(parent, node4, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
  }
  parseRule() {
    let skip = this.nodeDOM.parentNode;
    while (skip && skip != this.dom && !skip.pmIsDeco)
      skip = skip.parentNode;
    return { skip: skip || true };
  }
  update(node4, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY || this.dirty != NOT_DIRTY && !this.inParent() || !node4.sameMarkup(this.node))
      return false;
    this.updateOuterDeco(outerDeco);
    if ((this.dirty != NOT_DIRTY || node4.text != this.node.text) && node4.text != this.nodeDOM.nodeValue) {
      this.nodeDOM.nodeValue = node4.text;
      if (view.trackWrites == this.nodeDOM)
        view.trackWrites = null;
    }
    this.node = node4;
    this.dirty = NOT_DIRTY;
    return true;
  }
  inParent() {
    let parentDOM = this.parent.contentDOM;
    for (let n = this.nodeDOM; n; n = n.parentNode)
      if (n == parentDOM)
        return true;
    return false;
  }
  domFromPos(pos) {
    return { node: this.nodeDOM, offset: pos };
  }
  localPosFromDOM(dom, offset3, bias) {
    if (dom == this.nodeDOM)
      return this.posAtStart + Math.min(offset3, this.node.text.length);
    return super.localPosFromDOM(dom, offset3, bias);
  }
  ignoreMutation(mutation) {
    return mutation.type != "characterData" && mutation.type != "selection";
  }
  slice(from5, to3, view) {
    let node4 = this.node.cut(from5, to3), dom = document.createTextNode(node4.text);
    return new TextViewDesc(this.parent, node4, this.outerDeco, this.innerDeco, dom, dom, view);
  }
  markDirty(from5, to3) {
    super.markDirty(from5, to3);
    if (this.dom != this.nodeDOM && (from5 == 0 || to3 == this.nodeDOM.nodeValue.length))
      this.dirty = NODE_DIRTY;
  }
  get domAtom() {
    return false;
  }
};
var TrailingHackViewDesc = class extends ViewDesc {
  parseRule() {
    return { ignore: true };
  }
  matchesHack(nodeName) {
    return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName;
  }
  get domAtom() {
    return true;
  }
  get ignoreForCoords() {
    return this.dom.nodeName == "IMG";
  }
};
var CustomNodeViewDesc = class extends NodeViewDesc {
  constructor(parent, node4, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
    super(parent, node4, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
    this.spec = spec;
  }
  // A custom `update` method gets to decide whether the update goes
  // through. If it does, and there's a `contentDOM` node, our logic
  // updates the children.
  update(node4, outerDeco, innerDeco, view) {
    if (this.dirty == NODE_DIRTY)
      return false;
    if (this.spec.update) {
      let result = this.spec.update(node4, outerDeco, innerDeco);
      if (result)
        this.updateInner(node4, outerDeco, innerDeco, view);
      return result;
    } else if (!this.contentDOM && !node4.isLeaf) {
      return false;
    } else {
      return super.update(node4, outerDeco, innerDeco, view);
    }
  }
  selectNode() {
    this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
  }
  deselectNode() {
    this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
  }
  setSelection(anchor, head2, root6, force) {
    this.spec.setSelection ? this.spec.setSelection(anchor, head2, root6) : super.setSelection(anchor, head2, root6, force);
  }
  destroy() {
    if (this.spec.destroy)
      this.spec.destroy();
    super.destroy();
  }
  stopEvent(event) {
    return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
  }
  ignoreMutation(mutation) {
    return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
  }
};
function renderDescs(parentDOM, descs, view) {
  let dom = parentDOM.firstChild, written = false;
  for (let i = 0; i < descs.length; i++) {
    let desc = descs[i], childDOM = desc.dom;
    if (childDOM.parentNode == parentDOM) {
      while (childDOM != dom) {
        dom = rm(dom);
        written = true;
      }
      dom = dom.nextSibling;
    } else {
      written = true;
      parentDOM.insertBefore(childDOM, dom);
    }
    if (desc instanceof MarkViewDesc) {
      let pos = dom ? dom.previousSibling : parentDOM.lastChild;
      renderDescs(desc.contentDOM, desc.children, view);
      dom = pos ? pos.nextSibling : parentDOM.firstChild;
    }
  }
  while (dom) {
    dom = rm(dom);
    written = true;
  }
  if (written && view.trackWrites == parentDOM)
    view.trackWrites = null;
}
var OuterDecoLevel = function(nodeName) {
  if (nodeName)
    this.nodeName = nodeName;
};
OuterDecoLevel.prototype = /* @__PURE__ */ Object.create(null);
var noDeco = [new OuterDecoLevel()];
function computeOuterDeco(outerDeco, node4, needsWrap) {
  if (outerDeco.length == 0)
    return noDeco;
  let top2 = needsWrap ? noDeco[0] : new OuterDecoLevel(), result = [top2];
  for (let i = 0; i < outerDeco.length; i++) {
    let attrs = outerDeco[i].type.attrs;
    if (!attrs)
      continue;
    if (attrs.nodeName)
      result.push(top2 = new OuterDecoLevel(attrs.nodeName));
    for (let name in attrs) {
      let val = attrs[name];
      if (val == null)
        continue;
      if (needsWrap && result.length == 1)
        result.push(top2 = new OuterDecoLevel(node4.isInline ? "span" : "div"));
      if (name == "class")
        top2.class = (top2.class ? top2.class + " " : "") + val;
      else if (name == "style")
        top2.style = (top2.style ? top2.style + ";" : "") + val;
      else if (name != "nodeName")
        top2[name] = val;
    }
  }
  return result;
}
function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
  if (prevComputed == noDeco && curComputed == noDeco)
    return nodeDOM;
  let curDOM = nodeDOM;
  for (let i = 0; i < curComputed.length; i++) {
    let deco = curComputed[i], prev2 = prevComputed[i];
    if (i) {
      let parent;
      if (prev2 && prev2.nodeName == deco.nodeName && curDOM != outerDOM && (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
        curDOM = parent;
      } else {
        parent = document.createElement(deco.nodeName);
        parent.pmIsDeco = true;
        parent.appendChild(curDOM);
        prev2 = noDeco[0];
        curDOM = parent;
      }
    }
    patchAttributes(curDOM, prev2 || noDeco[0], deco);
  }
  return curDOM;
}
function patchAttributes(dom, prev2, cur) {
  for (let name in prev2)
    if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
      dom.removeAttribute(name);
  for (let name in cur)
    if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev2[name])
      dom.setAttribute(name, cur[name]);
  if (prev2.class != cur.class) {
    let prevList = prev2.class ? prev2.class.split(" ").filter(Boolean) : [];
    let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
    for (let i = 0; i < prevList.length; i++)
      if (curList.indexOf(prevList[i]) == -1)
        dom.classList.remove(prevList[i]);
    for (let i = 0; i < curList.length; i++)
      if (prevList.indexOf(curList[i]) == -1)
        dom.classList.add(curList[i]);
    if (dom.classList.length == 0)
      dom.removeAttribute("class");
  }
  if (prev2.style != cur.style) {
    if (prev2.style) {
      let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
      while (m = prop.exec(prev2.style))
        dom.style.removeProperty(m[1]);
    }
    if (cur.style)
      dom.style.cssText += cur.style;
  }
}
function applyOuterDeco(dom, deco, node4) {
  return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node4, dom.nodeType != 1));
}
function sameOuterDeco(a2, b2) {
  if (a2.length != b2.length)
    return false;
  for (let i = 0; i < a2.length; i++)
    if (!a2[i].type.eq(b2[i].type))
      return false;
  return true;
}
function rm(dom) {
  let next2 = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next2;
}
var ViewTreeUpdater = class {
  constructor(top2, lock, view) {
    this.lock = lock;
    this.view = view;
    this.index = 0;
    this.stack = [];
    this.changed = false;
    this.top = top2;
    this.preMatch = preMatch(top2.node.content, top2);
  }
  // Destroy and remove the children between the given indices in
  // `this.top`.
  destroyBetween(start2, end2) {
    if (start2 == end2)
      return;
    for (let i = start2; i < end2; i++)
      this.top.children[i].destroy();
    this.top.children.splice(start2, end2 - start2);
    this.changed = true;
  }
  // Destroy all remaining children in `this.top`.
  destroyRest() {
    this.destroyBetween(this.index, this.top.children.length);
  }
  // Sync the current stack of mark descs with the given array of
  // marks, reusing existing mark descs when possible.
  syncToMarks(marks, inline2, view) {
    let keep = 0, depth = this.stack.length >> 1;
    let maxKeep = Math.min(depth, marks.length);
    while (keep < maxKeep && (keep == depth - 1 ? this.top : this.stack[keep + 1 << 1]).matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
      keep++;
    while (keep < depth) {
      this.destroyRest();
      this.top.dirty = NOT_DIRTY;
      this.index = this.stack.pop();
      this.top = this.stack.pop();
      depth--;
    }
    while (depth < marks.length) {
      this.stack.push(this.top, this.index + 1);
      let found2 = -1;
      for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
        let next2 = this.top.children[i];
        if (next2.matchesMark(marks[depth]) && !this.isLocked(next2.dom)) {
          found2 = i;
          break;
        }
      }
      if (found2 > -1) {
        if (found2 > this.index) {
          this.changed = true;
          this.destroyBetween(this.index, found2);
        }
        this.top = this.top.children[this.index];
      } else {
        let markDesc = MarkViewDesc.create(this.top, marks[depth], inline2, view);
        this.top.children.splice(this.index, 0, markDesc);
        this.top = markDesc;
        this.changed = true;
      }
      this.index = 0;
      depth++;
    }
  }
  // Try to find a node desc matching the given data. Skip over it and
  // return true when successful.
  findNodeMatch(node4, outerDeco, innerDeco, index7) {
    let found2 = -1, targetDesc;
    if (index7 >= this.preMatch.index && (targetDesc = this.preMatch.matches[index7 - this.preMatch.index]).parent == this.top && targetDesc.matchesNode(node4, outerDeco, innerDeco)) {
      found2 = this.top.children.indexOf(targetDesc, this.index);
    } else {
      for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
        let child = this.top.children[i];
        if (child.matchesNode(node4, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
          found2 = i;
          break;
        }
      }
    }
    if (found2 < 0)
      return false;
    this.destroyBetween(this.index, found2);
    this.index++;
    return true;
  }
  updateNodeAt(node4, outerDeco, innerDeco, index7, view) {
    let child = this.top.children[index7];
    if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
      child.dirty = CONTENT_DIRTY;
    if (!child.update(node4, outerDeco, innerDeco, view))
      return false;
    this.destroyBetween(this.index, index7);
    this.index++;
    return true;
  }
  findIndexWithChild(domNode) {
    for (; ; ) {
      let parent = domNode.parentNode;
      if (!parent)
        return -1;
      if (parent == this.top.contentDOM) {
        let desc = domNode.pmViewDesc;
        if (desc)
          for (let i = this.index; i < this.top.children.length; i++) {
            if (this.top.children[i] == desc)
              return i;
          }
        return -1;
      }
      domNode = parent;
    }
  }
  // Try to update the next node, if any, to the given data. Checks
  // pre-matches to avoid overwriting nodes that could still be used.
  updateNextNode(node4, outerDeco, innerDeco, view, index7, pos) {
    for (let i = this.index; i < this.top.children.length; i++) {
      let next2 = this.top.children[i];
      if (next2 instanceof NodeViewDesc) {
        let preMatch2 = this.preMatch.matched.get(next2);
        if (preMatch2 != null && preMatch2 != index7)
          return false;
        let nextDOM = next2.dom, updated;
        let locked = this.isLocked(nextDOM) && !(node4.isText && next2.node && next2.node.isText && next2.nodeDOM.nodeValue == node4.text && next2.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next2.outerDeco));
        if (!locked && next2.update(node4, outerDeco, innerDeco, view)) {
          this.destroyBetween(this.index, i);
          if (next2.dom != nextDOM)
            this.changed = true;
          this.index++;
          return true;
        } else if (!locked && (updated = this.recreateWrapper(next2, node4, outerDeco, innerDeco, view, pos))) {
          this.top.children[this.index] = updated;
          updated.dirty = CONTENT_DIRTY;
          updated.updateChildren(view, pos + 1);
          updated.dirty = NOT_DIRTY;
          this.changed = true;
          this.index++;
          return true;
        }
        break;
      }
    }
    return false;
  }
  // When a node with content is replaced by a different node with
  // identical content, move over its children.
  recreateWrapper(next2, node4, outerDeco, innerDeco, view, pos) {
    if (next2.dirty || node4.isAtom || !next2.children.length || !next2.node.content.eq(node4.content))
      return null;
    let wrapper = NodeViewDesc.create(this.top, node4, outerDeco, innerDeco, view, pos);
    if (!wrapper.contentDOM)
      return null;
    wrapper.children = next2.children;
    next2.children = [];
    for (let ch of wrapper.children)
      ch.parent = wrapper;
    return wrapper;
  }
  // Insert the node as a newly created node desc.
  addNode(node4, outerDeco, innerDeco, view, pos) {
    let desc = NodeViewDesc.create(this.top, node4, outerDeco, innerDeco, view, pos);
    if (desc.contentDOM)
      desc.updateChildren(view, pos + 1);
    this.top.children.splice(this.index++, 0, desc);
    this.changed = true;
  }
  placeWidget(widget, view, pos) {
    let next2 = this.index < this.top.children.length ? this.top.children[this.index] : null;
    if (next2 && next2.matchesWidget(widget) && (widget == next2.widget || !next2.widget.type.toDOM.parentNode)) {
      this.index++;
    } else {
      let desc = new WidgetViewDesc(this.top, widget, view, pos);
      this.top.children.splice(this.index++, 0, desc);
      this.changed = true;
    }
  }
  // Make sure a textblock looks and behaves correctly in
  // contentEditable.
  addTextblockHacks() {
    let lastChild = this.top.children[this.index - 1], parent = this.top;
    while (lastChild instanceof MarkViewDesc) {
      parent = lastChild;
      lastChild = parent.children[parent.children.length - 1];
    }
    if (!lastChild || // Empty textblock
    !(lastChild instanceof TextViewDesc) || /\n$/.test(lastChild.node.text) || this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text)) {
      if ((safari || chrome) && lastChild && lastChild.dom.contentEditable == "false")
        this.addHackNode("IMG", parent);
      this.addHackNode("BR", this.top);
    }
  }
  addHackNode(nodeName, parent) {
    if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
      this.index++;
    } else {
      let dom = document.createElement(nodeName);
      if (nodeName == "IMG") {
        dom.className = "ProseMirror-separator";
        dom.alt = "";
      }
      if (nodeName == "BR")
        dom.className = "ProseMirror-trailingBreak";
      let hack = new TrailingHackViewDesc(this.top, [], dom, null);
      if (parent != this.top)
        parent.children.push(hack);
      else
        parent.children.splice(this.index++, 0, hack);
      this.changed = true;
    }
  }
  isLocked(node4) {
    return this.lock && (node4 == this.lock || node4.nodeType == 1 && node4.contains(this.lock.parentNode));
  }
};
function preMatch(frag, parentDesc) {
  let curDesc = parentDesc, descI = curDesc.children.length;
  let fI = frag.childCount, matched = /* @__PURE__ */ new Map(), matches3 = [];
  outer:
    while (fI > 0) {
      let desc;
      for (; ; ) {
        if (descI) {
          let next2 = curDesc.children[descI - 1];
          if (next2 instanceof MarkViewDesc) {
            curDesc = next2;
            descI = next2.children.length;
          } else {
            desc = next2;
            descI--;
            break;
          }
        } else if (curDesc == parentDesc) {
          break outer;
        } else {
          descI = curDesc.parent.children.indexOf(curDesc);
          curDesc = curDesc.parent;
        }
      }
      let node4 = desc.node;
      if (!node4)
        continue;
      if (node4 != frag.child(fI - 1))
        break;
      --fI;
      matched.set(desc, fI);
      matches3.push(desc);
    }
  return { index: fI, matched, matches: matches3.reverse() };
}
function compareSide(a2, b2) {
  return a2.type.side - b2.type.side;
}
function iterDeco(parent, deco, onWidget, onNode) {
  let locals = deco.locals(parent), offset3 = 0;
  if (locals.length == 0) {
    for (let i = 0; i < parent.childCount; i++) {
      let child = parent.child(i);
      onNode(child, locals, deco.forChild(offset3, child), i);
      offset3 += child.nodeSize;
    }
    return;
  }
  let decoIndex = 0, active = [], restNode = null;
  for (let parentIndex = 0; ; ) {
    if (decoIndex < locals.length && locals[decoIndex].to == offset3) {
      let widget = locals[decoIndex++], widgets;
      while (decoIndex < locals.length && locals[decoIndex].to == offset3)
        (widgets || (widgets = [widget])).push(locals[decoIndex++]);
      if (widgets) {
        widgets.sort(compareSide);
        for (let i = 0; i < widgets.length; i++)
          onWidget(widgets[i], parentIndex, !!restNode);
      } else {
        onWidget(widget, parentIndex, !!restNode);
      }
    }
    let child, index7;
    if (restNode) {
      index7 = -1;
      child = restNode;
      restNode = null;
    } else if (parentIndex < parent.childCount) {
      index7 = parentIndex;
      child = parent.child(parentIndex++);
    } else {
      break;
    }
    for (let i = 0; i < active.length; i++)
      if (active[i].to <= offset3)
        active.splice(i--, 1);
    while (decoIndex < locals.length && locals[decoIndex].from <= offset3 && locals[decoIndex].to > offset3)
      active.push(locals[decoIndex++]);
    let end2 = offset3 + child.nodeSize;
    if (child.isText) {
      let cutAt = end2;
      if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
        cutAt = locals[decoIndex].from;
      for (let i = 0; i < active.length; i++)
        if (active[i].to < cutAt)
          cutAt = active[i].to;
      if (cutAt < end2) {
        restNode = child.cut(cutAt - offset3);
        child = child.cut(0, cutAt - offset3);
        end2 = cutAt;
        index7 = -1;
      }
    }
    let outerDeco = child.isInline && !child.isLeaf ? active.filter((d) => !d.inline) : active.slice();
    onNode(child, outerDeco, deco.forChild(offset3, child), index7);
    offset3 = end2;
  }
}
function iosHacks(dom) {
  if (dom.nodeName == "UL" || dom.nodeName == "OL") {
    let oldCSS = dom.style.cssText;
    dom.style.cssText = oldCSS + "; list-style: square !important";
    window.getComputedStyle(dom).listStyle;
    dom.style.cssText = oldCSS;
  }
}
function nearbyTextNode(node4, offset3) {
  for (; ; ) {
    if (node4.nodeType == 3)
      return node4;
    if (node4.nodeType == 1 && offset3 > 0) {
      if (node4.childNodes.length > offset3 && node4.childNodes[offset3].nodeType == 3)
        return node4.childNodes[offset3];
      node4 = node4.childNodes[offset3 - 1];
      offset3 = nodeSize(node4);
    } else if (node4.nodeType == 1 && offset3 < node4.childNodes.length) {
      node4 = node4.childNodes[offset3];
      offset3 = 0;
    } else {
      return null;
    }
  }
}
function findTextInFragment(frag, text10, from5, to3) {
  for (let i = 0, pos = 0; i < frag.childCount && pos <= to3; ) {
    let child = frag.child(i++), childStart = pos;
    pos += child.nodeSize;
    if (!child.isText)
      continue;
    let str = child.text;
    while (i < frag.childCount) {
      let next2 = frag.child(i++);
      pos += next2.nodeSize;
      if (!next2.isText)
        break;
      str += next2.text;
    }
    if (pos >= from5) {
      let found2 = childStart < to3 ? str.lastIndexOf(text10, to3 - childStart - 1) : -1;
      if (found2 >= 0 && found2 + text10.length + childStart >= from5)
        return childStart + found2;
      if (from5 == to3 && str.length >= to3 + text10.length - childStart && str.slice(to3 - childStart, to3 - childStart + text10.length) == text10)
        return to3;
    }
  }
  return -1;
}
function replaceNodes(nodes, from5, to3, view, replacement) {
  let result = [];
  for (let i = 0, off = 0; i < nodes.length; i++) {
    let child = nodes[i], start2 = off, end2 = off += child.size;
    if (start2 >= to3 || end2 <= from5) {
      result.push(child);
    } else {
      if (start2 < from5)
        result.push(child.slice(0, from5 - start2, view));
      if (replacement) {
        result.push(replacement);
        replacement = void 0;
      }
      if (end2 > to3)
        result.push(child.slice(to3 - start2, child.size, view));
    }
  }
  return result;
}
function selectionFromDOM(view, origin = null) {
  let domSel = view.domSelectionRange(), doc4 = view.state.doc;
  if (!domSel.focusNode)
    return null;
  let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
  let head2 = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
  if (head2 < 0)
    return null;
  let $head = doc4.resolve(head2), $anchor, selection;
  if (selectionCollapsed(domSel)) {
    $anchor = $head;
    while (nearestDesc && !nearestDesc.node)
      nearestDesc = nearestDesc.parent;
    let nearestDescNode = nearestDesc.node;
    if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
      let pos = nearestDesc.posBefore;
      selection = new NodeSelection(head2 == pos ? $head : doc4.resolve(pos));
    }
  } else {
    let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
    if (anchor < 0)
      return null;
    $anchor = doc4.resolve(anchor);
  }
  if (!selection) {
    let bias = origin == "pointer" || view.state.selection.head < $head.pos && !inWidget ? 1 : -1;
    selection = selectionBetween(view, $anchor, $head, bias);
  }
  return selection;
}
function editorOwnsSelection(view) {
  return view.editable ? view.hasFocus() : hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
}
function selectionToDOM(view, force = false) {
  let sel = view.state.selection;
  syncNodeSelection(view, sel);
  if (!editorOwnsSelection(view))
    return;
  if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome) {
    let domSel = view.domSelectionRange(), curSel = view.domObserver.currentSelection;
    if (domSel.anchorNode && curSel.anchorNode && isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
      view.input.mouseDown.delayedSelectionSync = true;
      view.domObserver.setCurSelection();
      return;
    }
  }
  view.domObserver.disconnectSelection();
  if (view.cursorWrapper) {
    selectCursorWrapper(view);
  } else {
    let { anchor, head: head2 } = sel, resetEditableFrom, resetEditableTo;
    if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
      if (!sel.$from.parent.inlineContent)
        resetEditableFrom = temporarilyEditableNear(view, sel.from);
      if (!sel.empty && !sel.$from.parent.inlineContent)
        resetEditableTo = temporarilyEditableNear(view, sel.to);
    }
    view.docView.setSelection(anchor, head2, view.root, force);
    if (brokenSelectBetweenUneditable) {
      if (resetEditableFrom)
        resetEditable(resetEditableFrom);
      if (resetEditableTo)
        resetEditable(resetEditableTo);
    }
    if (sel.visible) {
      view.dom.classList.remove("ProseMirror-hideselection");
    } else {
      view.dom.classList.add("ProseMirror-hideselection");
      if ("onselectionchange" in document)
        removeClassOnSelectionChange(view);
    }
  }
  view.domObserver.setCurSelection();
  view.domObserver.connectSelection();
}
var brokenSelectBetweenUneditable = safari || chrome && chrome_version < 63;
function temporarilyEditableNear(view, pos) {
  let { node: node4, offset: offset3 } = view.docView.domFromPos(pos, 0);
  let after = offset3 < node4.childNodes.length ? node4.childNodes[offset3] : null;
  let before = offset3 ? node4.childNodes[offset3 - 1] : null;
  if (safari && after && after.contentEditable == "false")
    return setEditable(after);
  if ((!after || after.contentEditable == "false") && (!before || before.contentEditable == "false")) {
    if (after)
      return setEditable(after);
    else if (before)
      return setEditable(before);
  }
}
function setEditable(element7) {
  element7.contentEditable = "true";
  if (safari && element7.draggable) {
    element7.draggable = false;
    element7.wasDraggable = true;
  }
  return element7;
}
function resetEditable(element7) {
  element7.contentEditable = "false";
  if (element7.wasDraggable) {
    element7.draggable = true;
    element7.wasDraggable = null;
  }
}
function removeClassOnSelectionChange(view) {
  let doc4 = view.dom.ownerDocument;
  doc4.removeEventListener("selectionchange", view.input.hideSelectionGuard);
  let domSel = view.domSelectionRange();
  let node4 = domSel.anchorNode, offset3 = domSel.anchorOffset;
  doc4.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
    if (domSel.anchorNode != node4 || domSel.anchorOffset != offset3) {
      doc4.removeEventListener("selectionchange", view.input.hideSelectionGuard);
      setTimeout(() => {
        if (!editorOwnsSelection(view) || view.state.selection.visible)
          view.dom.classList.remove("ProseMirror-hideselection");
      }, 20);
    }
  });
}
function selectCursorWrapper(view) {
  let domSel = view.domSelection(), range2 = document.createRange();
  let node4 = view.cursorWrapper.dom, img2 = node4.nodeName == "IMG";
  if (img2)
    range2.setEnd(node4.parentNode, domIndex(node4) + 1);
  else
    range2.setEnd(node4, 0);
  range2.collapse(false);
  domSel.removeAllRanges();
  domSel.addRange(range2);
  if (!img2 && !view.state.selection.visible && ie && ie_version <= 11) {
    node4.disabled = true;
    node4.disabled = false;
  }
}
function syncNodeSelection(view, sel) {
  if (sel instanceof NodeSelection) {
    let desc = view.docView.descAt(sel.from);
    if (desc != view.lastSelectedViewDesc) {
      clearNodeSelection(view);
      if (desc)
        desc.selectNode();
      view.lastSelectedViewDesc = desc;
    }
  } else {
    clearNodeSelection(view);
  }
}
function clearNodeSelection(view) {
  if (view.lastSelectedViewDesc) {
    if (view.lastSelectedViewDesc.parent)
      view.lastSelectedViewDesc.deselectNode();
    view.lastSelectedViewDesc = void 0;
  }
}
function selectionBetween(view, $anchor, $head, bias) {
  return view.someProp("createSelectionBetween", (f2) => f2(view, $anchor, $head)) || TextSelection.between($anchor, $head, bias);
}
function hasFocusAndSelection(view) {
  if (view.editable && !view.hasFocus())
    return false;
  return hasSelection(view);
}
function hasSelection(view) {
  let sel = view.domSelectionRange();
  if (!sel.anchorNode)
    return false;
  try {
    return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) && (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
  } catch (_2) {
    return false;
  }
}
function anchorInRightPlace(view) {
  let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
  let domSel = view.domSelectionRange();
  return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
}
function moveSelectionBlock(state, dir) {
  let { $anchor, $head } = state.selection;
  let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
  let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
  return $start && Selection.findFrom($start, dir);
}
function apply(view, sel) {
  view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
  return true;
}
function selectHorizontally(view, dir, mods) {
  let sel = view.state.selection;
  if (sel instanceof TextSelection) {
    if (!sel.empty || mods.indexOf("s") > -1) {
      return false;
    } else if (view.endOfTextblock(dir > 0 ? "forward" : "backward")) {
      let next2 = moveSelectionBlock(view.state, dir);
      if (next2 && next2 instanceof NodeSelection)
        return apply(view, next2);
      return false;
    } else if (!(mac && mods.indexOf("m") > -1)) {
      let $head = sel.$head, node4 = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
      if (!node4 || node4.isText)
        return false;
      let nodePos = dir < 0 ? $head.pos - node4.nodeSize : $head.pos;
      if (!(node4.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
        return false;
      if (NodeSelection.isSelectable(node4)) {
        return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node4.nodeSize) : $head));
      } else if (webkit) {
        return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node4.nodeSize)));
      } else {
        return false;
      }
    }
  } else if (sel instanceof NodeSelection && sel.node.isInline) {
    return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
  } else {
    let next2 = moveSelectionBlock(view.state, dir);
    if (next2)
      return apply(view, next2);
    return false;
  }
}
function nodeLen(node4) {
  return node4.nodeType == 3 ? node4.nodeValue.length : node4.childNodes.length;
}
function isIgnorable(dom) {
  let desc = dom.pmViewDesc;
  return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR");
}
function skipIgnoredNodes(view, dir) {
  return dir < 0 ? skipIgnoredNodesBefore(view) : skipIgnoredNodesAfter(view);
}
function skipIgnoredNodesBefore(view) {
  let sel = view.domSelectionRange();
  let node4 = sel.focusNode, offset3 = sel.focusOffset;
  if (!node4)
    return;
  let moveNode, moveOffset, force = false;
  if (gecko && node4.nodeType == 1 && offset3 < nodeLen(node4) && isIgnorable(node4.childNodes[offset3]))
    force = true;
  for (; ; ) {
    if (offset3 > 0) {
      if (node4.nodeType != 1) {
        break;
      } else {
        let before = node4.childNodes[offset3 - 1];
        if (isIgnorable(before)) {
          moveNode = node4;
          moveOffset = --offset3;
        } else if (before.nodeType == 3) {
          node4 = before;
          offset3 = node4.nodeValue.length;
        } else
          break;
      }
    } else if (isBlockNode(node4)) {
      break;
    } else {
      let prev2 = node4.previousSibling;
      while (prev2 && isIgnorable(prev2)) {
        moveNode = node4.parentNode;
        moveOffset = domIndex(prev2);
        prev2 = prev2.previousSibling;
      }
      if (!prev2) {
        node4 = node4.parentNode;
        if (node4 == view.dom)
          break;
        offset3 = 0;
      } else {
        node4 = prev2;
        offset3 = nodeLen(node4);
      }
    }
  }
  if (force)
    setSelFocus(view, node4, offset3);
  else if (moveNode)
    setSelFocus(view, moveNode, moveOffset);
}
function skipIgnoredNodesAfter(view) {
  let sel = view.domSelectionRange();
  let node4 = sel.focusNode, offset3 = sel.focusOffset;
  if (!node4)
    return;
  let len = nodeLen(node4);
  let moveNode, moveOffset;
  for (; ; ) {
    if (offset3 < len) {
      if (node4.nodeType != 1)
        break;
      let after = node4.childNodes[offset3];
      if (isIgnorable(after)) {
        moveNode = node4;
        moveOffset = ++offset3;
      } else
        break;
    } else if (isBlockNode(node4)) {
      break;
    } else {
      let next2 = node4.nextSibling;
      while (next2 && isIgnorable(next2)) {
        moveNode = next2.parentNode;
        moveOffset = domIndex(next2) + 1;
        next2 = next2.nextSibling;
      }
      if (!next2) {
        node4 = node4.parentNode;
        if (node4 == view.dom)
          break;
        offset3 = len = 0;
      } else {
        node4 = next2;
        offset3 = 0;
        len = nodeLen(node4);
      }
    }
  }
  if (moveNode)
    setSelFocus(view, moveNode, moveOffset);
}
function isBlockNode(dom) {
  let desc = dom.pmViewDesc;
  return desc && desc.node && desc.node.isBlock;
}
function setSelFocus(view, node4, offset3) {
  let sel = view.domSelection();
  if (selectionCollapsed(sel)) {
    let range2 = document.createRange();
    range2.setEnd(node4, offset3);
    range2.setStart(node4, offset3);
    sel.removeAllRanges();
    sel.addRange(range2);
  } else if (sel.extend) {
    sel.extend(node4, offset3);
  }
  view.domObserver.setCurSelection();
  let { state } = view;
  setTimeout(() => {
    if (view.state == state)
      selectionToDOM(view);
  }, 50);
}
function findDirection(view, pos) {
  let $pos = view.state.doc.resolve(pos);
  if (!(chrome || windows) && $pos.parent.inlineContent) {
    let coords = view.coordsAtPos(pos);
    if (pos > $pos.start()) {
      let before = view.coordsAtPos(pos - 1);
      let mid = (before.top + before.bottom) / 2;
      if (mid > coords.top && mid < coords.bottom && Math.abs(before.left - coords.left) > 1)
        return before.left < coords.left ? "ltr" : "rtl";
    }
    if (pos < $pos.end()) {
      let after = view.coordsAtPos(pos + 1);
      let mid = (after.top + after.bottom) / 2;
      if (mid > coords.top && mid < coords.bottom && Math.abs(after.left - coords.left) > 1)
        return after.left > coords.left ? "ltr" : "rtl";
    }
  }
  let computed = getComputedStyle(view.dom).direction;
  return computed == "rtl" ? "rtl" : "ltr";
}
function selectVertically(view, dir, mods) {
  let sel = view.state.selection;
  if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
    return false;
  if (mac && mods.indexOf("m") > -1)
    return false;
  let { $from, $to } = sel;
  if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
    let next2 = moveSelectionBlock(view.state, dir);
    if (next2 && next2 instanceof NodeSelection)
      return apply(view, next2);
  }
  if (!$from.parent.inlineContent) {
    let side = dir < 0 ? $from : $to;
    let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
    return beyond ? apply(view, beyond) : false;
  }
  return false;
}
function stopNativeHorizontalDelete(view, dir) {
  if (!(view.state.selection instanceof TextSelection))
    return true;
  let { $head, $anchor, empty: empty2 } = view.state.selection;
  if (!$head.sameParent($anchor))
    return true;
  if (!empty2)
    return false;
  if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
    return true;
  let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
  if (nextNode && !nextNode.isText) {
    let tr4 = view.state.tr;
    if (dir < 0)
      tr4.delete($head.pos - nextNode.nodeSize, $head.pos);
    else
      tr4.delete($head.pos, $head.pos + nextNode.nodeSize);
    view.dispatch(tr4);
    return true;
  }
  return false;
}
function switchEditable(view, node4, state) {
  view.domObserver.stop();
  node4.contentEditable = state;
  view.domObserver.start();
}
function safariDownArrowBug(view) {
  if (!safari || view.state.selection.$head.parentOffset > 0)
    return false;
  let { focusNode, focusOffset } = view.domSelectionRange();
  if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 && focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
    let child = focusNode.firstChild;
    switchEditable(view, child, "true");
    setTimeout(() => switchEditable(view, child, "false"), 20);
  }
  return false;
}
function getMods(event) {
  let result = "";
  if (event.ctrlKey)
    result += "c";
  if (event.metaKey)
    result += "m";
  if (event.altKey)
    result += "a";
  if (event.shiftKey)
    result += "s";
  return result;
}
function captureKeyDown(view, event) {
  let code5 = event.keyCode, mods = getMods(event);
  if (code5 == 8 || mac && code5 == 72 && mods == "c") {
    return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodes(view, -1);
  } else if (code5 == 46 || mac && code5 == 68 && mods == "c") {
    return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodes(view, 1);
  } else if (code5 == 13 || code5 == 27) {
    return true;
  } else if (code5 == 37 || mac && code5 == 66 && mods == "c") {
    let dir = code5 == 37 ? findDirection(view, view.state.selection.from) == "ltr" ? -1 : 1 : -1;
    return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
  } else if (code5 == 39 || mac && code5 == 70 && mods == "c") {
    let dir = code5 == 39 ? findDirection(view, view.state.selection.from) == "ltr" ? 1 : -1 : 1;
    return selectHorizontally(view, dir, mods) || skipIgnoredNodes(view, dir);
  } else if (code5 == 38 || mac && code5 == 80 && mods == "c") {
    return selectVertically(view, -1, mods) || skipIgnoredNodes(view, -1);
  } else if (code5 == 40 || mac && code5 == 78 && mods == "c") {
    return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesAfter(view);
  } else if (mods == (mac ? "m" : "c") && (code5 == 66 || code5 == 73 || code5 == 89 || code5 == 90)) {
    return true;
  }
  return false;
}
function serializeForClipboard(view, slice3) {
  view.someProp("transformCopied", (f2) => {
    slice3 = f2(slice3, view);
  });
  let context = [], { content: content5, openStart, openEnd } = slice3;
  while (openStart > 1 && openEnd > 1 && content5.childCount == 1 && content5.firstChild.childCount == 1) {
    openStart--;
    openEnd--;
    let node4 = content5.firstChild;
    context.push(node4.type.name, node4.attrs != node4.type.defaultAttrs ? node4.attrs : null);
    content5 = node4.content;
  }
  let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
  let doc4 = detachedDoc(), wrap5 = doc4.createElement("div");
  wrap5.appendChild(serializer.serializeFragment(content5, { document: doc4 }));
  let firstChild = wrap5.firstChild, needsWrap, wrappers = 0;
  while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
    for (let i = needsWrap.length - 1; i >= 0; i--) {
      let wrapper = doc4.createElement(needsWrap[i]);
      while (wrap5.firstChild)
        wrapper.appendChild(wrap5.firstChild);
      wrap5.appendChild(wrapper);
      wrappers++;
    }
    firstChild = wrap5.firstChild;
  }
  if (firstChild && firstChild.nodeType == 1)
    firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
  let text10 = view.someProp("clipboardTextSerializer", (f2) => f2(slice3, view)) || slice3.content.textBetween(0, slice3.content.size, "\n\n");
  return { dom: wrap5, text: text10 };
}
function parseFromClipboard(view, text10, html7, plainText, $context) {
  let inCode = $context.parent.type.spec.code;
  let dom, slice3;
  if (!html7 && !text10)
    return null;
  let asText = text10 && (plainText || inCode || !html7);
  if (asText) {
    view.someProp("transformPastedText", (f2) => {
      text10 = f2(text10, inCode || plainText, view);
    });
    if (inCode)
      return text10 ? new Slice(Fragment.from(view.state.schema.text(text10.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
    let parsed = view.someProp("clipboardTextParser", (f2) => f2(text10, $context, plainText, view));
    if (parsed) {
      slice3 = parsed;
    } else {
      let marks = $context.marks();
      let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
      dom = document.createElement("div");
      text10.split(/(?:\r\n?|\n)+/).forEach((block2) => {
        let p5 = dom.appendChild(document.createElement("p"));
        if (block2)
          p5.appendChild(serializer.serializeNode(schema.text(block2, marks)));
      });
    }
  } else {
    view.someProp("transformPastedHTML", (f2) => {
      html7 = f2(html7, view);
    });
    dom = readHTML(html7);
    if (webkit)
      restoreReplacedSpaces(dom);
  }
  let contextNode = dom && dom.querySelector("[data-pm-slice]");
  let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
  if (sliceData && sliceData[3])
    for (let i = +sliceData[3]; i > 0; i--) {
      let child = dom.firstChild;
      while (child && child.nodeType != 1)
        child = child.nextSibling;
      if (!child)
        break;
      dom = child;
    }
  if (!slice3) {
    let parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser2.fromSchema(view.state.schema);
    slice3 = parser.parseSlice(dom, {
      preserveWhitespace: !!(asText || sliceData),
      context: $context,
      ruleFromNode(dom2) {
        if (dom2.nodeName == "BR" && !dom2.nextSibling && dom2.parentNode && !inlineParents.test(dom2.parentNode.nodeName))
          return { ignore: true };
        return null;
      }
    });
  }
  if (sliceData) {
    slice3 = addContext(closeSlice(slice3, +sliceData[1], +sliceData[2]), sliceData[4]);
  } else {
    slice3 = Slice.maxOpen(normalizeSiblings(slice3.content, $context), true);
    if (slice3.openStart || slice3.openEnd) {
      let openStart = 0, openEnd = 0;
      for (let node4 = slice3.content.firstChild; openStart < slice3.openStart && !node4.type.spec.isolating; openStart++, node4 = node4.firstChild) {
      }
      for (let node4 = slice3.content.lastChild; openEnd < slice3.openEnd && !node4.type.spec.isolating; openEnd++, node4 = node4.lastChild) {
      }
      slice3 = closeSlice(slice3, openStart, openEnd);
    }
  }
  view.someProp("transformPasted", (f2) => {
    slice3 = f2(slice3, view);
  });
  return slice3;
}
var inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
function normalizeSiblings(fragment, $context) {
  if (fragment.childCount < 2)
    return fragment;
  for (let d = $context.depth; d >= 0; d--) {
    let parent = $context.node(d);
    let match2 = parent.contentMatchAt($context.index(d));
    let lastWrap, result = [];
    fragment.forEach((node4) => {
      if (!result)
        return;
      let wrap5 = match2.findWrapping(node4.type), inLast;
      if (!wrap5)
        return result = null;
      if (inLast = result.length && lastWrap.length && addToSibling(wrap5, lastWrap, node4, result[result.length - 1], 0)) {
        result[result.length - 1] = inLast;
      } else {
        if (result.length)
          result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
        let wrapped = withWrappers(node4, wrap5);
        result.push(wrapped);
        match2 = match2.matchType(wrapped.type);
        lastWrap = wrap5;
      }
    });
    if (result)
      return Fragment.from(result);
  }
  return fragment;
}
function withWrappers(node4, wrap5, from5 = 0) {
  for (let i = wrap5.length - 1; i >= from5; i--)
    node4 = wrap5[i].create(null, Fragment.from(node4));
  return node4;
}
function addToSibling(wrap5, lastWrap, node4, sibling, depth) {
  if (depth < wrap5.length && depth < lastWrap.length && wrap5[depth] == lastWrap[depth]) {
    let inner = addToSibling(wrap5, lastWrap, node4, sibling.lastChild, depth + 1);
    if (inner)
      return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
    let match2 = sibling.contentMatchAt(sibling.childCount);
    if (match2.matchType(depth == wrap5.length - 1 ? node4.type : wrap5[depth + 1]))
      return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node4, wrap5, depth + 1))));
  }
}
function closeRight(node4, depth) {
  if (depth == 0)
    return node4;
  let fragment = node4.content.replaceChild(node4.childCount - 1, closeRight(node4.lastChild, depth - 1));
  let fill = node4.contentMatchAt(node4.childCount).fillBefore(Fragment.empty, true);
  return node4.copy(fragment.append(fill));
}
function closeRange(fragment, side, from5, to3, depth, openEnd) {
  let node4 = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node4.content;
  if (fragment.childCount > 1)
    openEnd = 0;
  if (depth < to3 - 1)
    inner = closeRange(inner, side, from5, to3, depth + 1, openEnd);
  if (depth >= from5)
    inner = side < 0 ? node4.contentMatchAt(0).fillBefore(inner, openEnd <= depth).append(inner) : inner.append(node4.contentMatchAt(node4.childCount).fillBefore(Fragment.empty, true));
  return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node4.copy(inner));
}
function closeSlice(slice3, openStart, openEnd) {
  if (openStart < slice3.openStart)
    slice3 = new Slice(closeRange(slice3.content, -1, openStart, slice3.openStart, 0, slice3.openEnd), openStart, slice3.openEnd);
  if (openEnd < slice3.openEnd)
    slice3 = new Slice(closeRange(slice3.content, 1, openEnd, slice3.openEnd, 0, 0), slice3.openStart, openEnd);
  return slice3;
}
var wrapMap = {
  thead: ["table"],
  tbody: ["table"],
  tfoot: ["table"],
  caption: ["table"],
  colgroup: ["table"],
  col: ["table", "colgroup"],
  tr: ["table", "tbody"],
  td: ["table", "tbody", "tr"],
  th: ["table", "tbody", "tr"]
};
var _detachedDoc = null;
function detachedDoc() {
  return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
}
function readHTML(html7) {
  let metas = /^(\s*<meta [^>]*>)*/.exec(html7);
  if (metas)
    html7 = html7.slice(metas[0].length);
  let elt = detachedDoc().createElement("div");
  let firstTag = /<([a-z][^>\s]+)/i.exec(html7), wrap5;
  if (wrap5 = firstTag && wrapMap[firstTag[1].toLowerCase()])
    html7 = wrap5.map((n) => "<" + n + ">").join("") + html7 + wrap5.map((n) => "</" + n + ">").reverse().join("");
  elt.innerHTML = html7;
  if (wrap5)
    for (let i = 0; i < wrap5.length; i++)
      elt = elt.querySelector(wrap5[i]) || elt;
  return elt;
}
function restoreReplacedSpaces(dom) {
  let nodes = dom.querySelectorAll(chrome ? "span:not([class]):not([style])" : "span.Apple-converted-space");
  for (let i = 0; i < nodes.length; i++) {
    let node4 = nodes[i];
    if (node4.childNodes.length == 1 && node4.textContent == " " && node4.parentNode)
      node4.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node4);
  }
}
function addContext(slice3, context) {
  if (!slice3.size)
    return slice3;
  let schema = slice3.content.firstChild.type.schema, array;
  try {
    array = JSON.parse(context);
  } catch (e) {
    return slice3;
  }
  let { content: content5, openStart, openEnd } = slice3;
  for (let i = array.length - 2; i >= 0; i -= 2) {
    let type = schema.nodes[array[i]];
    if (!type || type.hasRequiredAttrs())
      break;
    content5 = Fragment.from(type.create(array[i + 1], content5));
    openStart++;
    openEnd++;
  }
  return new Slice(content5, openStart, openEnd);
}
var handlers = {};
var editHandlers = {};
var passiveHandlers = { touchstart: true, touchmove: true };
var InputState = class {
  constructor() {
    this.shiftKey = false;
    this.mouseDown = null;
    this.lastKeyCode = null;
    this.lastKeyCodeTime = 0;
    this.lastClick = { time: 0, x: 0, y: 0, type: "" };
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastIOSEnter = 0;
    this.lastIOSEnterFallbackTimeout = -1;
    this.lastFocus = 0;
    this.lastTouch = 0;
    this.lastAndroidDelete = 0;
    this.composing = false;
    this.composingTimeout = -1;
    this.compositionNodes = [];
    this.compositionEndedAt = -2e8;
    this.compositionID = 1;
    this.domChangeCount = 0;
    this.eventHandlers = /* @__PURE__ */ Object.create(null);
    this.hideSelectionGuard = null;
  }
};
function initInput(view) {
  for (let event in handlers) {
    let handler = handlers[event];
    view.dom.addEventListener(event, view.input.eventHandlers[event] = (event2) => {
      if (eventBelongsToView(view, event2) && !runCustomHandler(view, event2) && (view.editable || !(event2.type in editHandlers)))
        handler(view, event2);
    }, passiveHandlers[event] ? { passive: true } : void 0);
  }
  if (safari)
    view.dom.addEventListener("input", () => null);
  ensureListeners(view);
}
function setSelectionOrigin(view, origin) {
  view.input.lastSelectionOrigin = origin;
  view.input.lastSelectionTime = Date.now();
}
function destroyInput(view) {
  view.domObserver.stop();
  for (let type in view.input.eventHandlers)
    view.dom.removeEventListener(type, view.input.eventHandlers[type]);
  clearTimeout(view.input.composingTimeout);
  clearTimeout(view.input.lastIOSEnterFallbackTimeout);
}
function ensureListeners(view) {
  view.someProp("handleDOMEvents", (currentHandlers) => {
    for (let type in currentHandlers)
      if (!view.input.eventHandlers[type])
        view.dom.addEventListener(type, view.input.eventHandlers[type] = (event) => runCustomHandler(view, event));
  });
}
function runCustomHandler(view, event) {
  return view.someProp("handleDOMEvents", (handlers4) => {
    let handler = handlers4[event.type];
    return handler ? handler(view, event) || event.defaultPrevented : false;
  });
}
function eventBelongsToView(view, event) {
  if (!event.bubbles)
    return true;
  if (event.defaultPrevented)
    return false;
  for (let node4 = event.target; node4 != view.dom; node4 = node4.parentNode)
    if (!node4 || node4.nodeType == 11 || node4.pmViewDesc && node4.pmViewDesc.stopEvent(event))
      return false;
  return true;
}
function dispatchEvent(view, event) {
  if (!runCustomHandler(view, event) && handlers[event.type] && (view.editable || !(event.type in editHandlers)))
    handlers[event.type](view, event);
}
editHandlers.keydown = (view, _event) => {
  let event = _event;
  view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
  if (inOrNearComposition(view, event))
    return;
  view.input.lastKeyCode = event.keyCode;
  view.input.lastKeyCodeTime = Date.now();
  if (android && chrome && event.keyCode == 13)
    return;
  if (event.keyCode != 229)
    view.domObserver.forceFlush();
  if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
    let now = Date.now();
    view.input.lastIOSEnter = now;
    view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
      if (view.input.lastIOSEnter == now) {
        view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(13, "Enter")));
        view.input.lastIOSEnter = 0;
      }
    }, 200);
  } else if (view.someProp("handleKeyDown", (f2) => f2(view, event)) || captureKeyDown(view, event)) {
    event.preventDefault();
  } else {
    setSelectionOrigin(view, "key");
  }
};
editHandlers.keyup = (view, event) => {
  if (event.keyCode == 16)
    view.input.shiftKey = false;
};
editHandlers.keypress = (view, _event) => {
  let event = _event;
  if (inOrNearComposition(view, event) || !event.charCode || event.ctrlKey && !event.altKey || mac && event.metaKey)
    return;
  if (view.someProp("handleKeyPress", (f2) => f2(view, event))) {
    event.preventDefault();
    return;
  }
  let sel = view.state.selection;
  if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
    let text10 = String.fromCharCode(event.charCode);
    if (!/[\r\n]/.test(text10) && !view.someProp("handleTextInput", (f2) => f2(view, sel.$from.pos, sel.$to.pos, text10)))
      view.dispatch(view.state.tr.insertText(text10).scrollIntoView());
    event.preventDefault();
  }
};
function eventCoords(event) {
  return { left: event.clientX, top: event.clientY };
}
function isNear(event, click) {
  let dx = click.x - event.clientX, dy = click.y - event.clientY;
  return dx * dx + dy * dy < 100;
}
function runHandlerOnContext(view, propName, pos, inside, event) {
  if (inside == -1)
    return false;
  let $pos = view.state.doc.resolve(inside);
  for (let i = $pos.depth + 1; i > 0; i--) {
    if (view.someProp(propName, (f2) => i > $pos.depth ? f2(view, pos, $pos.nodeAfter, $pos.before(i), event, true) : f2(view, pos, $pos.node(i), $pos.before(i), event, false)))
      return true;
  }
  return false;
}
function updateSelection(view, selection, origin) {
  if (!view.focused)
    view.focus();
  let tr4 = view.state.tr.setSelection(selection);
  if (origin == "pointer")
    tr4.setMeta("pointer", true);
  view.dispatch(tr4);
}
function selectClickedLeaf(view, inside) {
  if (inside == -1)
    return false;
  let $pos = view.state.doc.resolve(inside), node4 = $pos.nodeAfter;
  if (node4 && node4.isAtom && NodeSelection.isSelectable(node4)) {
    updateSelection(view, new NodeSelection($pos), "pointer");
    return true;
  }
  return false;
}
function selectClickedNode(view, inside) {
  if (inside == -1)
    return false;
  let sel = view.state.selection, selectedNode, selectAt;
  if (sel instanceof NodeSelection)
    selectedNode = sel.node;
  let $pos = view.state.doc.resolve(inside);
  for (let i = $pos.depth + 1; i > 0; i--) {
    let node4 = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
    if (NodeSelection.isSelectable(node4)) {
      if (selectedNode && sel.$from.depth > 0 && i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
        selectAt = $pos.before(sel.$from.depth);
      else
        selectAt = $pos.before(i);
      break;
    }
  }
  if (selectAt != null) {
    updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
    return true;
  } else {
    return false;
  }
}
function handleSingleClick(view, pos, inside, event, selectNode) {
  return runHandlerOnContext(view, "handleClickOn", pos, inside, event) || view.someProp("handleClick", (f2) => f2(view, pos, event)) || (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
}
function handleDoubleClick(view, pos, inside, event) {
  return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) || view.someProp("handleDoubleClick", (f2) => f2(view, pos, event));
}
function handleTripleClick(view, pos, inside, event) {
  return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) || view.someProp("handleTripleClick", (f2) => f2(view, pos, event)) || defaultTripleClick(view, inside, event);
}
function defaultTripleClick(view, inside, event) {
  if (event.button != 0)
    return false;
  let doc4 = view.state.doc;
  if (inside == -1) {
    if (doc4.inlineContent) {
      updateSelection(view, TextSelection.create(doc4, 0, doc4.content.size), "pointer");
      return true;
    }
    return false;
  }
  let $pos = doc4.resolve(inside);
  for (let i = $pos.depth + 1; i > 0; i--) {
    let node4 = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
    let nodePos = $pos.before(i);
    if (node4.inlineContent)
      updateSelection(view, TextSelection.create(doc4, nodePos + 1, nodePos + 1 + node4.content.size), "pointer");
    else if (NodeSelection.isSelectable(node4))
      updateSelection(view, NodeSelection.create(doc4, nodePos), "pointer");
    else
      continue;
    return true;
  }
}
function forceDOMFlush(view) {
  return endComposition(view);
}
var selectNodeModifier = mac ? "metaKey" : "ctrlKey";
handlers.mousedown = (view, _event) => {
  let event = _event;
  view.input.shiftKey = event.shiftKey;
  let flushed = forceDOMFlush(view);
  let now = Date.now(), type = "singleClick";
  if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
    if (view.input.lastClick.type == "singleClick")
      type = "doubleClick";
    else if (view.input.lastClick.type == "doubleClick")
      type = "tripleClick";
  }
  view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
  let pos = view.posAtCoords(eventCoords(event));
  if (!pos)
    return;
  if (type == "singleClick") {
    if (view.input.mouseDown)
      view.input.mouseDown.done();
    view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
  } else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
    event.preventDefault();
  } else {
    setSelectionOrigin(view, "pointer");
  }
};
var MouseDown = class {
  constructor(view, pos, event, flushed) {
    this.view = view;
    this.pos = pos;
    this.event = event;
    this.flushed = flushed;
    this.delayedSelectionSync = false;
    this.mightDrag = null;
    this.startDoc = view.state.doc;
    this.selectNode = !!event[selectNodeModifier];
    this.allowDefault = event.shiftKey;
    let targetNode, targetPos;
    if (pos.inside > -1) {
      targetNode = view.state.doc.nodeAt(pos.inside);
      targetPos = pos.inside;
    } else {
      let $pos = view.state.doc.resolve(pos.pos);
      targetNode = $pos.parent;
      targetPos = $pos.depth ? $pos.before() : 0;
    }
    const target = flushed ? null : event.target;
    const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
    this.target = targetDesc ? targetDesc.dom : null;
    let { selection } = view.state;
    if (event.button == 0 && targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false || selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
      this.mightDrag = {
        node: targetNode,
        pos: targetPos,
        addAttr: !!(this.target && !this.target.draggable),
        setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
      };
    if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
      this.view.domObserver.stop();
      if (this.mightDrag.addAttr)
        this.target.draggable = true;
      if (this.mightDrag.setUneditable)
        setTimeout(() => {
          if (this.view.input.mouseDown == this)
            this.target.setAttribute("contentEditable", "false");
        }, 20);
      this.view.domObserver.start();
    }
    view.root.addEventListener("mouseup", this.up = this.up.bind(this));
    view.root.addEventListener("mousemove", this.move = this.move.bind(this));
    setSelectionOrigin(view, "pointer");
  }
  done() {
    this.view.root.removeEventListener("mouseup", this.up);
    this.view.root.removeEventListener("mousemove", this.move);
    if (this.mightDrag && this.target) {
      this.view.domObserver.stop();
      if (this.mightDrag.addAttr)
        this.target.removeAttribute("draggable");
      if (this.mightDrag.setUneditable)
        this.target.removeAttribute("contentEditable");
      this.view.domObserver.start();
    }
    if (this.delayedSelectionSync)
      setTimeout(() => selectionToDOM(this.view));
    this.view.input.mouseDown = null;
  }
  up(event) {
    this.done();
    if (!this.view.dom.contains(event.target))
      return;
    let pos = this.pos;
    if (this.view.state.doc != this.startDoc)
      pos = this.view.posAtCoords(eventCoords(event));
    this.updateAllowDefault(event);
    if (this.allowDefault || !pos) {
      setSelectionOrigin(this.view, "pointer");
    } else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
      event.preventDefault();
    } else if (event.button == 0 && (this.flushed || // Safari ignores clicks on draggable elements
    safari && this.mightDrag && !this.mightDrag.node.isAtom || // Chrome will sometimes treat a node selection as a
    // cursor, but still report that the node is selected
    // when asked through getSelection. You'll then get a
    // situation where clicking at the point where that
    // (hidden) cursor is doesn't change the selection, and
    // thus doesn't get a reaction from ProseMirror. This
    // works around that.
    chrome && !this.view.state.selection.visible && Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2)) {
      updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
      event.preventDefault();
    } else {
      setSelectionOrigin(this.view, "pointer");
    }
  }
  move(event) {
    this.updateAllowDefault(event);
    setSelectionOrigin(this.view, "pointer");
    if (event.buttons == 0)
      this.done();
  }
  updateAllowDefault(event) {
    if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 || Math.abs(this.event.y - event.clientY) > 4))
      this.allowDefault = true;
  }
};
handlers.touchstart = (view) => {
  view.input.lastTouch = Date.now();
  forceDOMFlush(view);
  setSelectionOrigin(view, "pointer");
};
handlers.touchmove = (view) => {
  view.input.lastTouch = Date.now();
  setSelectionOrigin(view, "pointer");
};
handlers.contextmenu = (view) => forceDOMFlush(view);
function inOrNearComposition(view, event) {
  if (view.composing)
    return true;
  if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
    view.input.compositionEndedAt = -2e8;
    return true;
  }
  return false;
}
var timeoutComposition = android ? 5e3 : -1;
editHandlers.compositionstart = editHandlers.compositionupdate = (view) => {
  if (!view.composing) {
    view.domObserver.flush();
    let { state } = view, $pos = state.selection.$from;
    if (state.selection.empty && (state.storedMarks || !$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some((m) => m.type.spec.inclusive === false))) {
      view.markCursor = view.state.storedMarks || $pos.marks();
      endComposition(view, true);
      view.markCursor = null;
    } else {
      endComposition(view);
      if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
        let sel = view.domSelectionRange();
        for (let node4 = sel.focusNode, offset3 = sel.focusOffset; node4 && node4.nodeType == 1 && offset3 != 0; ) {
          let before = offset3 < 0 ? node4.lastChild : node4.childNodes[offset3 - 1];
          if (!before)
            break;
          if (before.nodeType == 3) {
            view.domSelection().collapse(before, before.nodeValue.length);
            break;
          } else {
            node4 = before;
            offset3 = -1;
          }
        }
      }
    }
    view.input.composing = true;
  }
  scheduleComposeEnd(view, timeoutComposition);
};
editHandlers.compositionend = (view, event) => {
  if (view.composing) {
    view.input.composing = false;
    view.input.compositionEndedAt = event.timeStamp;
    view.input.compositionID++;
    scheduleComposeEnd(view, 20);
  }
};
function scheduleComposeEnd(view, delay) {
  clearTimeout(view.input.composingTimeout);
  if (delay > -1)
    view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
}
function clearComposition(view) {
  if (view.composing) {
    view.input.composing = false;
    view.input.compositionEndedAt = timestampFromCustomEvent();
  }
  while (view.input.compositionNodes.length > 0)
    view.input.compositionNodes.pop().markParentsDirty();
}
function timestampFromCustomEvent() {
  let event = document.createEvent("Event");
  event.initEvent("event", true, true);
  return event.timeStamp;
}
function endComposition(view, forceUpdate = false) {
  if (android && view.domObserver.flushingSoon >= 0)
    return;
  view.domObserver.forceFlush();
  clearComposition(view);
  if (forceUpdate || view.docView && view.docView.dirty) {
    let sel = selectionFromDOM(view);
    if (sel && !sel.eq(view.state.selection))
      view.dispatch(view.state.tr.setSelection(sel));
    else
      view.updateState(view.state);
    return true;
  }
  return false;
}
function captureCopy(view, dom) {
  if (!view.dom.parentNode)
    return;
  let wrap5 = view.dom.parentNode.appendChild(document.createElement("div"));
  wrap5.appendChild(dom);
  wrap5.style.cssText = "position: fixed; left: -10000px; top: 10px";
  let sel = getSelection(), range2 = document.createRange();
  range2.selectNodeContents(dom);
  view.dom.blur();
  sel.removeAllRanges();
  sel.addRange(range2);
  setTimeout(() => {
    if (wrap5.parentNode)
      wrap5.parentNode.removeChild(wrap5);
    view.focus();
  }, 50);
}
var brokenClipboardAPI = ie && ie_version < 15 || ios && webkit_version < 604;
handlers.copy = editHandlers.cut = (view, _event) => {
  let event = _event;
  let sel = view.state.selection, cut = event.type == "cut";
  if (sel.empty)
    return;
  let data = brokenClipboardAPI ? null : event.clipboardData;
  let slice3 = sel.content(), { dom, text: text10 } = serializeForClipboard(view, slice3);
  if (data) {
    event.preventDefault();
    data.clearData();
    data.setData("text/html", dom.innerHTML);
    data.setData("text/plain", text10);
  } else {
    captureCopy(view, dom);
  }
  if (cut)
    view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
};
function sliceSingleNode(slice3) {
  return slice3.openStart == 0 && slice3.openEnd == 0 && slice3.content.childCount == 1 ? slice3.content.firstChild : null;
}
function capturePaste(view, event) {
  if (!view.dom.parentNode)
    return;
  let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
  let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
  if (!plainText)
    target.contentEditable = "true";
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(() => {
    view.focus();
    if (target.parentNode)
      target.parentNode.removeChild(target);
    if (plainText)
      doPaste(view, target.value, null, view.input.shiftKey, event);
    else
      doPaste(view, target.textContent, target.innerHTML, view.input.shiftKey, event);
  }, 50);
}
function doPaste(view, text10, html7, preferPlain, event) {
  let slice3 = parseFromClipboard(view, text10, html7, preferPlain, view.state.selection.$from);
  if (view.someProp("handlePaste", (f2) => f2(view, event, slice3 || Slice.empty)))
    return true;
  if (!slice3)
    return false;
  let singleNode = sliceSingleNode(slice3);
  let tr4 = singleNode ? view.state.tr.replaceSelectionWith(singleNode, view.input.shiftKey) : view.state.tr.replaceSelection(slice3);
  view.dispatch(tr4.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
  return true;
}
editHandlers.paste = (view, _event) => {
  let event = _event;
  if (view.composing && !android)
    return;
  let data = brokenClipboardAPI ? null : event.clipboardData;
  if (data && doPaste(view, data.getData("text/plain"), data.getData("text/html"), view.input.shiftKey, event))
    event.preventDefault();
  else
    capturePaste(view, event);
};
var Dragging = class {
  constructor(slice3, move) {
    this.slice = slice3;
    this.move = move;
  }
};
var dragCopyModifier = mac ? "altKey" : "ctrlKey";
handlers.dragstart = (view, _event) => {
  let event = _event;
  let mouseDown = view.input.mouseDown;
  if (mouseDown)
    mouseDown.done();
  if (!event.dataTransfer)
    return;
  let sel = view.state.selection;
  let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
  if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to))
    ;
  else if (mouseDown && mouseDown.mightDrag) {
    view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
  } else if (event.target && event.target.nodeType == 1) {
    let desc = view.docView.nearestDesc(event.target, true);
    if (desc && desc.node.type.spec.draggable && desc != view.docView)
      view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)));
  }
  let slice3 = view.state.selection.content(), { dom, text: text10 } = serializeForClipboard(view, slice3);
  event.dataTransfer.clearData();
  event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
  event.dataTransfer.effectAllowed = "copyMove";
  if (!brokenClipboardAPI)
    event.dataTransfer.setData("text/plain", text10);
  view.dragging = new Dragging(slice3, !event[dragCopyModifier]);
};
handlers.dragend = (view) => {
  let dragging = view.dragging;
  window.setTimeout(() => {
    if (view.dragging == dragging)
      view.dragging = null;
  }, 50);
};
editHandlers.dragover = editHandlers.dragenter = (_2, e) => e.preventDefault();
editHandlers.drop = (view, _event) => {
  let event = _event;
  let dragging = view.dragging;
  view.dragging = null;
  if (!event.dataTransfer)
    return;
  let eventPos = view.posAtCoords(eventCoords(event));
  if (!eventPos)
    return;
  let $mouse = view.state.doc.resolve(eventPos.pos);
  let slice3 = dragging && dragging.slice;
  if (slice3) {
    view.someProp("transformPasted", (f2) => {
      slice3 = f2(slice3, view);
    });
  } else {
    slice3 = parseFromClipboard(view, event.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
  }
  let move = !!(dragging && !event[dragCopyModifier]);
  if (view.someProp("handleDrop", (f2) => f2(view, event, slice3 || Slice.empty, move))) {
    event.preventDefault();
    return;
  }
  if (!slice3)
    return;
  event.preventDefault();
  let insertPos = slice3 ? dropPoint(view.state.doc, $mouse.pos, slice3) : $mouse.pos;
  if (insertPos == null)
    insertPos = $mouse.pos;
  let tr4 = view.state.tr;
  if (move)
    tr4.deleteSelection();
  let pos = tr4.mapping.map(insertPos);
  let isNode4 = slice3.openStart == 0 && slice3.openEnd == 0 && slice3.content.childCount == 1;
  let beforeInsert = tr4.doc;
  if (isNode4)
    tr4.replaceRangeWith(pos, pos, slice3.content.firstChild);
  else
    tr4.replaceRange(pos, pos, slice3);
  if (tr4.doc.eq(beforeInsert))
    return;
  let $pos = tr4.doc.resolve(pos);
  if (isNode4 && NodeSelection.isSelectable(slice3.content.firstChild) && $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice3.content.firstChild)) {
    tr4.setSelection(new NodeSelection($pos));
  } else {
    let end2 = tr4.mapping.map(insertPos);
    tr4.mapping.maps[tr4.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end2 = newTo);
    tr4.setSelection(selectionBetween(view, $pos, tr4.doc.resolve(end2)));
  }
  view.focus();
  view.dispatch(tr4.setMeta("uiEvent", "drop"));
};
handlers.focus = (view) => {
  view.input.lastFocus = Date.now();
  if (!view.focused) {
    view.domObserver.stop();
    view.dom.classList.add("ProseMirror-focused");
    view.domObserver.start();
    view.focused = true;
    setTimeout(() => {
      if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange()))
        selectionToDOM(view);
    }, 20);
  }
};
handlers.blur = (view, _event) => {
  let event = _event;
  if (view.focused) {
    view.domObserver.stop();
    view.dom.classList.remove("ProseMirror-focused");
    view.domObserver.start();
    if (event.relatedTarget && view.dom.contains(event.relatedTarget))
      view.domObserver.currentSelection.clear();
    view.focused = false;
  }
};
handlers.beforeinput = (view, _event) => {
  let event = _event;
  if (chrome && android && event.inputType == "deleteContentBackward") {
    view.domObserver.flushSoon();
    let { domChangeCount } = view.input;
    setTimeout(() => {
      if (view.input.domChangeCount != domChangeCount)
        return;
      view.dom.blur();
      view.focus();
      if (view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(8, "Backspace"))))
        return;
      let { $cursor } = view.state.selection;
      if ($cursor && $cursor.pos > 0)
        view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
    }, 50);
  }
};
for (let prop in editHandlers)
  handlers[prop] = editHandlers[prop];
function compareObjs(a2, b2) {
  if (a2 == b2)
    return true;
  for (let p5 in a2)
    if (a2[p5] !== b2[p5])
      return false;
  for (let p5 in b2)
    if (!(p5 in a2))
      return false;
  return true;
}
var WidgetType = class {
  constructor(toDOM, spec) {
    this.toDOM = toDOM;
    this.spec = spec || noSpec;
    this.side = this.spec.side || 0;
  }
  map(mapping, span, offset3, oldOffset) {
    let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
    return deleted ? null : new Decoration(pos - offset3, pos - offset3, this);
  }
  valid() {
    return true;
  }
  eq(other) {
    return this == other || other instanceof WidgetType && (this.spec.key && this.spec.key == other.spec.key || this.toDOM == other.toDOM && compareObjs(this.spec, other.spec));
  }
  destroy(node4) {
    if (this.spec.destroy)
      this.spec.destroy(node4);
  }
};
var InlineType = class {
  constructor(attrs, spec) {
    this.attrs = attrs;
    this.spec = spec || noSpec;
  }
  map(mapping, span, offset3, oldOffset) {
    let from5 = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset3;
    let to3 = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset3;
    return from5 >= to3 ? null : new Decoration(from5, to3, this);
  }
  valid(_2, span) {
    return span.from < span.to;
  }
  eq(other) {
    return this == other || other instanceof InlineType && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);
  }
  static is(span) {
    return span.type instanceof InlineType;
  }
  destroy() {
  }
};
var NodeType2 = class {
  constructor(attrs, spec) {
    this.attrs = attrs;
    this.spec = spec || noSpec;
  }
  map(mapping, span, offset3, oldOffset) {
    let from5 = mapping.mapResult(span.from + oldOffset, 1);
    if (from5.deleted)
      return null;
    let to3 = mapping.mapResult(span.to + oldOffset, -1);
    if (to3.deleted || to3.pos <= from5.pos)
      return null;
    return new Decoration(from5.pos - offset3, to3.pos - offset3, this);
  }
  valid(node4, span) {
    let { index: index7, offset: offset3 } = node4.content.findIndex(span.from), child;
    return offset3 == span.from && !(child = node4.child(index7)).isText && offset3 + child.nodeSize == span.to;
  }
  eq(other) {
    return this == other || other instanceof NodeType2 && compareObjs(this.attrs, other.attrs) && compareObjs(this.spec, other.spec);
  }
  destroy() {
  }
};
var Decoration = class {
  /**
  @internal
  */
  constructor(from5, to3, type) {
    this.from = from5;
    this.to = to3;
    this.type = type;
  }
  /**
  @internal
  */
  copy(from5, to3) {
    return new Decoration(from5, to3, this.type);
  }
  /**
  @internal
  */
  eq(other, offset3 = 0) {
    return this.type.eq(other.type) && this.from + offset3 == other.from && this.to + offset3 == other.to;
  }
  /**
  @internal
  */
  map(mapping, offset3, oldOffset) {
    return this.type.map(mapping, this, offset3, oldOffset);
  }
  /**
  Creates a widget decoration, which is a DOM node that's shown in
  the document at the given position. It is recommended that you
  delay rendering the widget by passing a function that will be
  called when the widget is actually drawn in a view, but you can
  also directly pass a DOM node. `getPos` can be used to find the
  widget's current document position.
  */
  static widget(pos, toDOM, spec) {
    return new Decoration(pos, pos, new WidgetType(toDOM, spec));
  }
  /**
  Creates an inline decoration, which adds the given attributes to
  each inline node between `from` and `to`.
  */
  static inline(from5, to3, attrs, spec) {
    return new Decoration(from5, to3, new InlineType(attrs, spec));
  }
  /**
  Creates a node decoration. `from` and `to` should point precisely
  before and after a node in the document. That node, and only that
  node, will receive the given attributes.
  */
  static node(from5, to3, attrs, spec) {
    return new Decoration(from5, to3, new NodeType2(attrs, spec));
  }
  /**
  The spec provided when creating this decoration. Can be useful
  if you've stored extra information in that object.
  */
  get spec() {
    return this.type.spec;
  }
  /**
  @internal
  */
  get inline() {
    return this.type instanceof InlineType;
  }
};
var none = [];
var noSpec = {};
var DecorationSet = class {
  /**
  @internal
  */
  constructor(local, children) {
    this.local = local.length ? local : none;
    this.children = children.length ? children : none;
  }
  /**
  Create a set of decorations, using the structure of the given
  document.
  */
  static create(doc4, decorations) {
    return decorations.length ? buildTree(decorations, doc4, 0, noSpec) : empty;
  }
  /**
  Find all decorations in this set which touch the given range
  (including decorations that start or end directly at the
  boundaries) and match the given predicate on their spec. When
  `start` and `end` are omitted, all decorations in the set are
  considered. When `predicate` isn't given, all decorations are
  assumed to match.
  */
  find(start2, end2, predicate) {
    let result = [];
    this.findInner(start2 == null ? 0 : start2, end2 == null ? 1e9 : end2, result, 0, predicate);
    return result;
  }
  findInner(start2, end2, result, offset3, predicate) {
    for (let i = 0; i < this.local.length; i++) {
      let span = this.local[i];
      if (span.from <= end2 && span.to >= start2 && (!predicate || predicate(span.spec)))
        result.push(span.copy(span.from + offset3, span.to + offset3));
    }
    for (let i = 0; i < this.children.length; i += 3) {
      if (this.children[i] < end2 && this.children[i + 1] > start2) {
        let childOff = this.children[i] + 1;
        this.children[i + 2].findInner(start2 - childOff, end2 - childOff, result, offset3 + childOff, predicate);
      }
    }
  }
  /**
  Map the set of decorations in response to a change in the
  document.
  */
  map(mapping, doc4, options2) {
    if (this == empty || mapping.maps.length == 0)
      return this;
    return this.mapInner(mapping, doc4, 0, 0, options2 || noSpec);
  }
  /**
  @internal
  */
  mapInner(mapping, node4, offset3, oldOffset, options2) {
    let newLocal;
    for (let i = 0; i < this.local.length; i++) {
      let mapped = this.local[i].map(mapping, offset3, oldOffset);
      if (mapped && mapped.type.valid(node4, mapped))
        (newLocal || (newLocal = [])).push(mapped);
      else if (options2.onRemove)
        options2.onRemove(this.local[i].spec);
    }
    if (this.children.length)
      return mapChildren(this.children, newLocal || [], mapping, node4, offset3, oldOffset, options2);
    else
      return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty;
  }
  /**
  Add the given array of decorations to the ones in the set,
  producing a new set. Needs access to the current document to
  create the appropriate tree structure.
  */
  add(doc4, decorations) {
    if (!decorations.length)
      return this;
    if (this == empty)
      return DecorationSet.create(doc4, decorations);
    return this.addInner(doc4, decorations, 0);
  }
  addInner(doc4, decorations, offset3) {
    let children, childIndex = 0;
    doc4.forEach((childNode, childOffset) => {
      let baseOffset = childOffset + offset3, found2;
      if (!(found2 = takeSpansForNode(decorations, childNode, baseOffset)))
        return;
      if (!children)
        children = this.children.slice();
      while (childIndex < children.length && children[childIndex] < childOffset)
        childIndex += 3;
      if (children[childIndex] == childOffset)
        children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found2, baseOffset + 1);
      else
        children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found2, childNode, baseOffset + 1, noSpec));
      childIndex += 3;
    });
    let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset3);
    for (let i = 0; i < local.length; i++)
      if (!local[i].type.valid(doc4, local[i]))
        local.splice(i--, 1);
    return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
  }
  /**
  Create a new set that contains the decorations in this set, minus
  the ones in the given array.
  */
  remove(decorations) {
    if (decorations.length == 0 || this == empty)
      return this;
    return this.removeInner(decorations, 0);
  }
  removeInner(decorations, offset3) {
    let children = this.children, local = this.local;
    for (let i = 0; i < children.length; i += 3) {
      let found2;
      let from5 = children[i] + offset3, to3 = children[i + 1] + offset3;
      for (let j = 0, span; j < decorations.length; j++)
        if (span = decorations[j]) {
          if (span.from > from5 && span.to < to3) {
            decorations[j] = null;
            (found2 || (found2 = [])).push(span);
          }
        }
      if (!found2)
        continue;
      if (children == this.children)
        children = this.children.slice();
      let removed = children[i + 2].removeInner(found2, from5 + 1);
      if (removed != empty) {
        children[i + 2] = removed;
      } else {
        children.splice(i, 3);
        i -= 3;
      }
    }
    if (local.length) {
      for (let i = 0, span; i < decorations.length; i++)
        if (span = decorations[i]) {
          for (let j = 0; j < local.length; j++)
            if (local[j].eq(span, offset3)) {
              if (local == this.local)
                local = this.local.slice();
              local.splice(j--, 1);
            }
        }
    }
    if (children == this.children && local == this.local)
      return this;
    return local.length || children.length ? new DecorationSet(local, children) : empty;
  }
  /**
  @internal
  */
  forChild(offset3, node4) {
    if (this == empty)
      return this;
    if (node4.isLeaf)
      return DecorationSet.empty;
    let child, local;
    for (let i = 0; i < this.children.length; i += 3)
      if (this.children[i] >= offset3) {
        if (this.children[i] == offset3)
          child = this.children[i + 2];
        break;
      }
    let start2 = offset3 + 1, end2 = start2 + node4.content.size;
    for (let i = 0; i < this.local.length; i++) {
      let dec = this.local[i];
      if (dec.from < end2 && dec.to > start2 && dec.type instanceof InlineType) {
        let from5 = Math.max(start2, dec.from) - start2, to3 = Math.min(end2, dec.to) - start2;
        if (from5 < to3)
          (local || (local = [])).push(dec.copy(from5, to3));
      }
    }
    if (local) {
      let localSet = new DecorationSet(local.sort(byPos), none);
      return child ? new DecorationGroup([localSet, child]) : localSet;
    }
    return child || empty;
  }
  /**
  @internal
  */
  eq(other) {
    if (this == other)
      return true;
    if (!(other instanceof DecorationSet) || this.local.length != other.local.length || this.children.length != other.children.length)
      return false;
    for (let i = 0; i < this.local.length; i++)
      if (!this.local[i].eq(other.local[i]))
        return false;
    for (let i = 0; i < this.children.length; i += 3)
      if (this.children[i] != other.children[i] || this.children[i + 1] != other.children[i + 1] || !this.children[i + 2].eq(other.children[i + 2]))
        return false;
    return true;
  }
  /**
  @internal
  */
  locals(node4) {
    return removeOverlap(this.localsInner(node4));
  }
  /**
  @internal
  */
  localsInner(node4) {
    if (this == empty)
      return none;
    if (node4.inlineContent || !this.local.some(InlineType.is))
      return this.local;
    let result = [];
    for (let i = 0; i < this.local.length; i++) {
      if (!(this.local[i].type instanceof InlineType))
        result.push(this.local[i]);
    }
    return result;
  }
};
DecorationSet.empty = new DecorationSet([], []);
DecorationSet.removeOverlap = removeOverlap;
var empty = DecorationSet.empty;
var DecorationGroup = class {
  constructor(members) {
    this.members = members;
  }
  map(mapping, doc4) {
    const mappedDecos = this.members.map((member) => member.map(mapping, doc4, noSpec));
    return DecorationGroup.from(mappedDecos);
  }
  forChild(offset3, child) {
    if (child.isLeaf)
      return DecorationSet.empty;
    let found2 = [];
    for (let i = 0; i < this.members.length; i++) {
      let result = this.members[i].forChild(offset3, child);
      if (result == empty)
        continue;
      if (result instanceof DecorationGroup)
        found2 = found2.concat(result.members);
      else
        found2.push(result);
    }
    return DecorationGroup.from(found2);
  }
  eq(other) {
    if (!(other instanceof DecorationGroup) || other.members.length != this.members.length)
      return false;
    for (let i = 0; i < this.members.length; i++)
      if (!this.members[i].eq(other.members[i]))
        return false;
    return true;
  }
  locals(node4) {
    let result, sorted = true;
    for (let i = 0; i < this.members.length; i++) {
      let locals = this.members[i].localsInner(node4);
      if (!locals.length)
        continue;
      if (!result) {
        result = locals;
      } else {
        if (sorted) {
          result = result.slice();
          sorted = false;
        }
        for (let j = 0; j < locals.length; j++)
          result.push(locals[j]);
      }
    }
    return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
  }
  // Create a group for the given array of decoration sets, or return
  // a single set when possible.
  static from(members) {
    switch (members.length) {
      case 0:
        return empty;
      case 1:
        return members[0];
      default:
        return new DecorationGroup(members.every((m) => m instanceof DecorationSet) ? members : members.reduce((r, m) => r.concat(m instanceof DecorationSet ? m : m.members), []));
    }
  }
};
function mapChildren(oldChildren, newLocal, mapping, node4, offset3, oldOffset, options2) {
  let children = oldChildren.slice();
  for (let i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {
    let moved = 0;
    mapping.maps[i].forEach((oldStart, oldEnd, newStart, newEnd) => {
      let dSize = newEnd - newStart - (oldEnd - oldStart);
      for (let i2 = 0; i2 < children.length; i2 += 3) {
        let end2 = children[i2 + 1];
        if (end2 < 0 || oldStart > end2 + baseOffset - moved)
          continue;
        let start2 = children[i2] + baseOffset - moved;
        if (oldEnd >= start2) {
          children[i2 + 1] = oldStart <= start2 ? -2 : -1;
        } else if (newStart >= offset3 && dSize) {
          children[i2] += dSize;
          children[i2 + 1] += dSize;
        }
      }
      moved += dSize;
    });
    baseOffset = mapping.maps[i].map(baseOffset, -1);
  }
  let mustRebuild = false;
  for (let i = 0; i < children.length; i += 3)
    if (children[i + 1] < 0) {
      if (children[i + 1] == -2) {
        mustRebuild = true;
        children[i + 1] = -1;
        continue;
      }
      let from5 = mapping.map(oldChildren[i] + oldOffset), fromLocal = from5 - offset3;
      if (fromLocal < 0 || fromLocal >= node4.content.size) {
        mustRebuild = true;
        continue;
      }
      let to3 = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to3 - offset3;
      let { index: index7, offset: childOffset } = node4.content.findIndex(fromLocal);
      let childNode = node4.maybeChild(index7);
      if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
        let mapped = children[i + 2].mapInner(mapping, childNode, from5 + 1, oldChildren[i] + oldOffset + 1, options2);
        if (mapped != empty) {
          children[i] = fromLocal;
          children[i + 1] = toLocal;
          children[i + 2] = mapped;
        } else {
          children[i + 1] = -2;
          mustRebuild = true;
        }
      } else {
        mustRebuild = true;
      }
    }
  if (mustRebuild) {
    let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset3, oldOffset, options2);
    let built = buildTree(decorations, node4, 0, options2);
    newLocal = built.local;
    for (let i = 0; i < children.length; i += 3)
      if (children[i + 1] < 0) {
        children.splice(i, 3);
        i -= 3;
      }
    for (let i = 0, j = 0; i < built.children.length; i += 3) {
      let from5 = built.children[i];
      while (j < children.length && children[j] < from5)
        j += 3;
      children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
    }
  }
  return new DecorationSet(newLocal.sort(byPos), children);
}
function moveSpans(spans, offset3) {
  if (!offset3 || !spans.length)
    return spans;
  let result = [];
  for (let i = 0; i < spans.length; i++) {
    let span = spans[i];
    result.push(new Decoration(span.from + offset3, span.to + offset3, span.type));
  }
  return result;
}
function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset3, oldOffset, options2) {
  function gather(set, oldOffset2) {
    for (let i = 0; i < set.local.length; i++) {
      let mapped = set.local[i].map(mapping, offset3, oldOffset2);
      if (mapped)
        decorations.push(mapped);
      else if (options2.onRemove)
        options2.onRemove(set.local[i].spec);
    }
    for (let i = 0; i < set.children.length; i += 3)
      gather(set.children[i + 2], set.children[i] + oldOffset2 + 1);
  }
  for (let i = 0; i < children.length; i += 3)
    if (children[i + 1] == -1)
      gather(children[i + 2], oldChildren[i] + oldOffset + 1);
  return decorations;
}
function takeSpansForNode(spans, node4, offset3) {
  if (node4.isLeaf)
    return null;
  let end2 = offset3 + node4.nodeSize, found2 = null;
  for (let i = 0, span; i < spans.length; i++) {
    if ((span = spans[i]) && span.from > offset3 && span.to < end2) {
      (found2 || (found2 = [])).push(span);
      spans[i] = null;
    }
  }
  return found2;
}
function withoutNulls(array) {
  let result = [];
  for (let i = 0; i < array.length; i++)
    if (array[i] != null)
      result.push(array[i]);
  return result;
}
function buildTree(spans, node4, offset3, options2) {
  let children = [], hasNulls = false;
  node4.forEach((childNode, localStart) => {
    let found2 = takeSpansForNode(spans, childNode, localStart + offset3);
    if (found2) {
      hasNulls = true;
      let subtree = buildTree(found2, childNode, offset3 + localStart + 1, options2);
      if (subtree != empty)
        children.push(localStart, localStart + childNode.nodeSize, subtree);
    }
  });
  let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset3).sort(byPos);
  for (let i = 0; i < locals.length; i++)
    if (!locals[i].type.valid(node4, locals[i])) {
      if (options2.onRemove)
        options2.onRemove(locals[i].spec);
      locals.splice(i--, 1);
    }
  return locals.length || children.length ? new DecorationSet(locals, children) : empty;
}
function byPos(a2, b2) {
  return a2.from - b2.from || a2.to - b2.to;
}
function removeOverlap(spans) {
  let working = spans;
  for (let i = 0; i < working.length - 1; i++) {
    let span = working[i];
    if (span.from != span.to)
      for (let j = i + 1; j < working.length; j++) {
        let next2 = working[j];
        if (next2.from == span.from) {
          if (next2.to != span.to) {
            if (working == spans)
              working = spans.slice();
            working[j] = next2.copy(next2.from, span.to);
            insertAhead(working, j + 1, next2.copy(span.to, next2.to));
          }
          continue;
        } else {
          if (next2.from < span.to) {
            if (working == spans)
              working = spans.slice();
            working[i] = span.copy(span.from, next2.from);
            insertAhead(working, j, span.copy(next2.from, span.to));
          }
          break;
        }
      }
  }
  return working;
}
function insertAhead(array, i, deco) {
  while (i < array.length && byPos(deco, array[i]) > 0)
    i++;
  array.splice(i, 0, deco);
}
function viewDecorations(view) {
  let found2 = [];
  view.someProp("decorations", (f2) => {
    let result = f2(view.state);
    if (result && result != empty)
      found2.push(result);
  });
  if (view.cursorWrapper)
    found2.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
  return DecorationGroup.from(found2);
}
var observeOptions = {
  childList: true,
  characterData: true,
  characterDataOldValue: true,
  attributes: true,
  attributeOldValue: true,
  subtree: true
};
var useCharData = ie && ie_version <= 11;
var SelectionState = class {
  constructor() {
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  set(sel) {
    this.anchorNode = sel.anchorNode;
    this.anchorOffset = sel.anchorOffset;
    this.focusNode = sel.focusNode;
    this.focusOffset = sel.focusOffset;
  }
  clear() {
    this.anchorNode = this.focusNode = null;
  }
  eq(sel) {
    return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset && sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
  }
};
var DOMObserver = class {
  constructor(view, handleDOMChange) {
    this.view = view;
    this.handleDOMChange = handleDOMChange;
    this.queue = [];
    this.flushingSoon = -1;
    this.observer = null;
    this.currentSelection = new SelectionState();
    this.onCharData = null;
    this.suppressingSelectionUpdates = false;
    this.observer = window.MutationObserver && new window.MutationObserver((mutations) => {
      for (let i = 0; i < mutations.length; i++)
        this.queue.push(mutations[i]);
      if (ie && ie_version <= 11 && mutations.some((m) => m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
        this.flushSoon();
      else
        this.flush();
    });
    if (useCharData) {
      this.onCharData = (e) => {
        this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
        this.flushSoon();
      };
    }
    this.onSelectionChange = this.onSelectionChange.bind(this);
  }
  flushSoon() {
    if (this.flushingSoon < 0)
      this.flushingSoon = window.setTimeout(() => {
        this.flushingSoon = -1;
        this.flush();
      }, 20);
  }
  forceFlush() {
    if (this.flushingSoon > -1) {
      window.clearTimeout(this.flushingSoon);
      this.flushingSoon = -1;
      this.flush();
    }
  }
  start() {
    if (this.observer) {
      this.observer.takeRecords();
      this.observer.observe(this.view.dom, observeOptions);
    }
    if (this.onCharData)
      this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
    this.connectSelection();
  }
  stop() {
    if (this.observer) {
      let take = this.observer.takeRecords();
      if (take.length) {
        for (let i = 0; i < take.length; i++)
          this.queue.push(take[i]);
        window.setTimeout(() => this.flush(), 20);
      }
      this.observer.disconnect();
    }
    if (this.onCharData)
      this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    this.disconnectSelection();
  }
  connectSelection() {
    this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
  }
  disconnectSelection() {
    this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
  }
  suppressSelectionUpdates() {
    this.suppressingSelectionUpdates = true;
    setTimeout(() => this.suppressingSelectionUpdates = false, 50);
  }
  onSelectionChange() {
    if (!hasFocusAndSelection(this.view))
      return;
    if (this.suppressingSelectionUpdates)
      return selectionToDOM(this.view);
    if (ie && ie_version <= 11 && !this.view.state.selection.empty) {
      let sel = this.view.domSelectionRange();
      if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
        return this.flushSoon();
    }
    this.flush();
  }
  setCurSelection() {
    this.currentSelection.set(this.view.domSelectionRange());
  }
  ignoreSelectionChange(sel) {
    if (!sel.focusNode)
      return true;
    let ancestors = /* @__PURE__ */ new Set(), container;
    for (let scan = sel.focusNode; scan; scan = parentNode(scan))
      ancestors.add(scan);
    for (let scan = sel.anchorNode; scan; scan = parentNode(scan))
      if (ancestors.has(scan)) {
        container = scan;
        break;
      }
    let desc = container && this.view.docView.nearestDesc(container);
    if (desc && desc.ignoreMutation({
      type: "selection",
      target: container.nodeType == 3 ? container.parentNode : container
    })) {
      this.setCurSelection();
      return true;
    }
  }
  flush() {
    let { view } = this;
    if (!view.docView || this.flushingSoon > -1)
      return;
    let mutations = this.observer ? this.observer.takeRecords() : [];
    if (this.queue.length) {
      mutations = this.queue.concat(mutations);
      this.queue.length = 0;
    }
    let sel = view.domSelectionRange();
    let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
    let from5 = -1, to3 = -1, typeOver = false, added = [];
    if (view.editable) {
      for (let i = 0; i < mutations.length; i++) {
        let result = this.registerMutation(mutations[i], added);
        if (result) {
          from5 = from5 < 0 ? result.from : Math.min(result.from, from5);
          to3 = to3 < 0 ? result.to : Math.max(result.to, to3);
          if (result.typeOver)
            typeOver = true;
        }
      }
    }
    if (gecko && added.length > 1) {
      let brs = added.filter((n) => n.nodeName == "BR");
      if (brs.length == 2) {
        let a2 = brs[0], b2 = brs[1];
        if (a2.parentNode && a2.parentNode.parentNode == b2.parentNode)
          b2.remove();
        else
          a2.remove();
      }
    }
    let readSel = null;
    if (from5 < 0 && newSel && view.input.lastFocus > Date.now() - 200 && Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 && selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) && readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
      view.input.lastFocus = 0;
      selectionToDOM(view);
      this.currentSelection.set(sel);
      view.scrollToSelection();
    } else if (from5 > -1 || newSel) {
      if (from5 > -1) {
        view.docView.markDirty(from5, to3);
        checkCSS(view);
      }
      this.handleDOMChange(from5, to3, typeOver, added);
      if (view.docView && view.docView.dirty)
        view.updateState(view.state);
      else if (!this.currentSelection.eq(sel))
        selectionToDOM(view);
      this.currentSelection.set(sel);
    }
  }
  registerMutation(mut, added) {
    if (added.indexOf(mut.target) > -1)
      return null;
    let desc = this.view.docView.nearestDesc(mut.target);
    if (mut.type == "attributes" && (desc == this.view.docView || mut.attributeName == "contenteditable" || // Firefox sometimes fires spurious events for null/empty styles
    mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style")))
      return null;
    if (!desc || desc.ignoreMutation(mut))
      return null;
    if (mut.type == "childList") {
      for (let i = 0; i < mut.addedNodes.length; i++)
        added.push(mut.addedNodes[i]);
      if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
        return { from: desc.posBefore, to: desc.posAfter };
      let prev2 = mut.previousSibling, next2 = mut.nextSibling;
      if (ie && ie_version <= 11 && mut.addedNodes.length) {
        for (let i = 0; i < mut.addedNodes.length; i++) {
          let { previousSibling, nextSibling } = mut.addedNodes[i];
          if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
            prev2 = previousSibling;
          if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
            next2 = nextSibling;
        }
      }
      let fromOffset = prev2 && prev2.parentNode == mut.target ? domIndex(prev2) + 1 : 0;
      let from5 = desc.localPosFromDOM(mut.target, fromOffset, -1);
      let toOffset = next2 && next2.parentNode == mut.target ? domIndex(next2) : mut.target.childNodes.length;
      let to3 = desc.localPosFromDOM(mut.target, toOffset, 1);
      return { from: from5, to: to3 };
    } else if (mut.type == "attributes") {
      return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
    } else {
      return {
        from: desc.posAtStart,
        to: desc.posAtEnd,
        // An event was generated for a text change that didn't change
        // any text. Mark the dom change to fall back to assuming the
        // selection was typed over with an identical value if it can't
        // find another change.
        typeOver: mut.target.nodeValue == mut.oldValue
      };
    }
  }
};
var cssChecked = /* @__PURE__ */ new WeakMap();
var cssCheckWarned = false;
function checkCSS(view) {
  if (cssChecked.has(view))
    return;
  cssChecked.set(view, null);
  if (["normal", "nowrap", "pre-line"].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
    view.requiresGeckoHackNode = gecko;
    if (cssCheckWarned)
      return;
    console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
    cssCheckWarned = true;
  }
}
function safariShadowSelectionRange(view) {
  let found2;
  function read2(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found2 = event.getTargetRanges()[0];
  }
  view.dom.addEventListener("beforeinput", read2, true);
  document.execCommand("indent");
  view.dom.removeEventListener("beforeinput", read2, true);
  let anchorNode = found2.startContainer, anchorOffset = found2.startOffset;
  let focusNode = found2.endContainer, focusOffset = found2.endOffset;
  let currentAnchor = view.domAtPos(view.state.selection.anchor);
  if (isEquivalentPosition(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset))
    [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
  return { anchorNode, anchorOffset, focusNode, focusOffset };
}
function parseBetween(view, from_, to_) {
  let { node: parent, fromOffset, toOffset, from: from5, to: to3 } = view.docView.parseRange(from_, to_);
  let domSel = view.domSelectionRange();
  let find5;
  let anchor = domSel.anchorNode;
  if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
    find5 = [{ node: anchor, offset: domSel.anchorOffset }];
    if (!selectionCollapsed(domSel))
      find5.push({ node: domSel.focusNode, offset: domSel.focusOffset });
  }
  if (chrome && view.input.lastKeyCode === 8) {
    for (let off = toOffset; off > fromOffset; off--) {
      let node4 = parent.childNodes[off - 1], desc = node4.pmViewDesc;
      if (node4.nodeName == "BR" && !desc) {
        toOffset = off;
        break;
      }
      if (!desc || desc.size)
        break;
    }
  }
  let startDoc = view.state.doc;
  let parser = view.someProp("domParser") || DOMParser2.fromSchema(view.state.schema);
  let $from = startDoc.resolve(from5);
  let sel = null, doc4 = parser.parse(parent, {
    topNode: $from.parent,
    topMatch: $from.parent.contentMatchAt($from.index()),
    topOpen: true,
    from: fromOffset,
    to: toOffset,
    preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
    findPositions: find5,
    ruleFromNode,
    context: $from
  });
  if (find5 && find5[0].pos != null) {
    let anchor2 = find5[0].pos, head2 = find5[1] && find5[1].pos;
    if (head2 == null)
      head2 = anchor2;
    sel = { anchor: anchor2 + from5, head: head2 + from5 };
  }
  return { doc: doc4, sel, from: from5, to: to3 };
}
function ruleFromNode(dom) {
  let desc = dom.pmViewDesc;
  if (desc) {
    return desc.parseRule();
  } else if (dom.nodeName == "BR" && dom.parentNode) {
    if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
      let skip = document.createElement("div");
      skip.appendChild(document.createElement("li"));
      return { skip };
    } else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
      return { ignore: true };
    }
  } else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
    return { ignore: true };
  }
  return null;
}
var isInline = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
function readDOMChange(view, from5, to3, typeOver, addedNodes) {
  if (from5 < 0) {
    let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
    let newSel = selectionFromDOM(view, origin);
    if (newSel && !view.state.selection.eq(newSel)) {
      if (chrome && android && view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime && view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(13, "Enter"))))
        return;
      let tr5 = view.state.tr.setSelection(newSel);
      if (origin == "pointer")
        tr5.setMeta("pointer", true);
      else if (origin == "key")
        tr5.scrollIntoView();
      if (view.composing)
        tr5.setMeta("composition", view.input.compositionID);
      view.dispatch(tr5);
    }
    return;
  }
  let $before = view.state.doc.resolve(from5);
  let shared = $before.sharedDepth(to3);
  from5 = $before.before(shared + 1);
  to3 = view.state.doc.resolve(to3).after(shared + 1);
  let sel = view.state.selection;
  let parse6 = parseBetween(view, from5, to3);
  let doc4 = view.state.doc, compare2 = doc4.slice(parse6.from, parse6.to);
  let preferredPos, preferredSide;
  if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
    preferredPos = view.state.selection.to;
    preferredSide = "end";
  } else {
    preferredPos = view.state.selection.from;
    preferredSide = "start";
  }
  view.input.lastKeyCode = null;
  let change = findDiff(compare2.content, parse6.doc.content, parse6.from, preferredPos, preferredSide);
  if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) && addedNodes.some((n) => n.nodeType == 1 && !isInline.test(n.nodeName)) && (!change || change.endA >= change.endB) && view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(13, "Enter")))) {
    view.input.lastIOSEnter = 0;
    return;
  }
  if (!change) {
    if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) && !view.composing && !(parse6.sel && parse6.sel.anchor != parse6.sel.head)) {
      change = { start: sel.from, endA: sel.to, endB: sel.to };
    } else {
      if (parse6.sel) {
        let sel2 = resolveSelection(view, view.state.doc, parse6.sel);
        if (sel2 && !sel2.eq(view.state.selection)) {
          let tr5 = view.state.tr.setSelection(sel2);
          if (view.composing)
            tr5.setMeta("composition", view.input.compositionID);
          view.dispatch(tr5);
        }
      }
      return;
    }
  }
  if (chrome && view.cursorWrapper && parse6.sel && parse6.sel.anchor == view.cursorWrapper.deco.from && parse6.sel.head == parse6.sel.anchor) {
    let size3 = change.endB - change.start;
    parse6.sel = { anchor: parse6.sel.anchor + size3, head: parse6.sel.anchor + size3 };
  }
  view.input.domChangeCount++;
  if (view.state.selection.from < view.state.selection.to && change.start == change.endB && view.state.selection instanceof TextSelection) {
    if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 && view.state.selection.from >= parse6.from) {
      change.start = view.state.selection.from;
    } else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 && view.state.selection.to <= parse6.to) {
      change.endB += view.state.selection.to - change.endA;
      change.endA = view.state.selection.to;
    }
  }
  if (ie && ie_version <= 11 && change.endB == change.start + 1 && change.endA == change.start && change.start > parse6.from && parse6.doc.textBetween(change.start - parse6.from - 1, change.start - parse6.from + 1) == "  ") {
    change.start--;
    change.endA--;
    change.endB--;
  }
  let $from = parse6.doc.resolveNoCache(change.start - parse6.from);
  let $to = parse6.doc.resolveNoCache(change.endB - parse6.from);
  let $fromA = doc4.resolve(change.start);
  let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
  let nextSel;
  if ((ios && view.input.lastIOSEnter > Date.now() - 225 && (!inlineChange || addedNodes.some((n) => n.nodeName == "DIV" || n.nodeName == "P")) || !inlineChange && $from.pos < parse6.doc.content.size && (nextSel = Selection.findFrom(parse6.doc.resolve($from.pos + 1), 1, true)) && nextSel.head == $to.pos) && view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(13, "Enter")))) {
    view.input.lastIOSEnter = 0;
    return;
  }
  if (view.state.selection.anchor > change.start && looksLikeJoin(doc4, change.start, change.endA, $from, $to) && view.someProp("handleKeyDown", (f2) => f2(view, keyEvent(8, "Backspace")))) {
    if (android && chrome)
      view.domObserver.suppressSelectionUpdates();
    return;
  }
  if (chrome && android && change.endB == change.start)
    view.input.lastAndroidDelete = Date.now();
  if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth && parse6.sel && parse6.sel.anchor == parse6.sel.head && parse6.sel.head == change.endA) {
    change.endB -= 2;
    $to = parse6.doc.resolveNoCache(change.endB - parse6.from);
    setTimeout(() => {
      view.someProp("handleKeyDown", function(f2) {
        return f2(view, keyEvent(13, "Enter"));
      });
    }, 20);
  }
  let chFrom = change.start, chTo = change.endA;
  let tr4, storedMarks, markChange;
  if (inlineChange) {
    if ($from.pos == $to.pos) {
      if (ie && ie_version <= 11 && $from.parentOffset == 0) {
        view.domObserver.suppressSelectionUpdates();
        setTimeout(() => selectionToDOM(view), 20);
      }
      tr4 = view.state.tr.delete(chFrom, chTo);
      storedMarks = doc4.resolve(change.start).marksAcross(doc4.resolve(change.endA));
    } else if (
      // Adding or removing a mark
      change.endA == change.endB && (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))
    ) {
      tr4 = view.state.tr;
      if (markChange.type == "add")
        tr4.addMark(chFrom, chTo, markChange.mark);
      else
        tr4.removeMark(chFrom, chTo, markChange.mark);
    } else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
      let text10 = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
      if (view.someProp("handleTextInput", (f2) => f2(view, chFrom, chTo, text10)))
        return;
      tr4 = view.state.tr.insertText(text10, chFrom, chTo);
    }
  }
  if (!tr4)
    tr4 = view.state.tr.replace(chFrom, chTo, parse6.doc.slice(change.start - parse6.from, change.endB - parse6.from));
  if (parse6.sel) {
    let sel2 = resolveSelection(view, tr4.doc, parse6.sel);
    if (sel2 && !(chrome && android && view.composing && sel2.empty && (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) && (sel2.head == chFrom || sel2.head == tr4.mapping.map(chTo) - 1) || ie && sel2.empty && sel2.head == chFrom))
      tr4.setSelection(sel2);
  }
  if (storedMarks)
    tr4.ensureMarks(storedMarks);
  if (view.composing)
    tr4.setMeta("composition", view.input.compositionID);
  view.dispatch(tr4.scrollIntoView());
}
function resolveSelection(view, doc4, parsedSel) {
  if (Math.max(parsedSel.anchor, parsedSel.head) > doc4.content.size)
    return null;
  return selectionBetween(view, doc4.resolve(parsedSel.anchor), doc4.resolve(parsedSel.head));
}
function isMarkChange(cur, prev2) {
  let curMarks = cur.firstChild.marks, prevMarks = prev2.firstChild.marks;
  let added = curMarks, removed = prevMarks, type, mark2, update;
  for (let i = 0; i < prevMarks.length; i++)
    added = prevMarks[i].removeFromSet(added);
  for (let i = 0; i < curMarks.length; i++)
    removed = curMarks[i].removeFromSet(removed);
  if (added.length == 1 && removed.length == 0) {
    mark2 = added[0];
    type = "add";
    update = (node4) => node4.mark(mark2.addToSet(node4.marks));
  } else if (added.length == 0 && removed.length == 1) {
    mark2 = removed[0];
    type = "remove";
    update = (node4) => node4.mark(mark2.removeFromSet(node4.marks));
  } else {
    return null;
  }
  let updated = [];
  for (let i = 0; i < prev2.childCount; i++)
    updated.push(update(prev2.child(i)));
  if (Fragment.from(updated).eq(cur))
    return { mark: mark2, type };
}
function looksLikeJoin(old, start2, end2, $newStart, $newEnd) {
  if (!$newStart.parent.isTextblock || // The content must have shrunk
  end2 - start2 <= $newEnd.pos - $newStart.pos || // newEnd must point directly at or after the end of the block that newStart points into
  skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
    return false;
  let $start = old.resolve(start2);
  if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
    return false;
  let $next = old.resolve(skipClosingAndOpening($start, true, true));
  if (!$next.parent.isTextblock || $next.pos > end2 || skipClosingAndOpening($next, true, false) < end2)
    return false;
  return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
}
function skipClosingAndOpening($pos, fromEnd, mayOpen) {
  let depth = $pos.depth, end2 = fromEnd ? $pos.end() : $pos.pos;
  while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
    depth--;
    end2++;
    fromEnd = false;
  }
  if (mayOpen) {
    let next2 = $pos.node(depth).maybeChild($pos.indexAfter(depth));
    while (next2 && !next2.isLeaf) {
      next2 = next2.firstChild;
      end2++;
    }
  }
  return end2;
}
function findDiff(a2, b2, pos, preferredPos, preferredSide) {
  let start2 = a2.findDiffStart(b2, pos);
  if (start2 == null)
    return null;
  let { a: endA, b: endB } = a2.findDiffEnd(b2, pos + a2.size, pos + b2.size);
  if (preferredSide == "end") {
    let adjust = Math.max(0, start2 - Math.min(endA, endB));
    preferredPos -= endA + adjust - start2;
  }
  if (endA < start2 && a2.size < b2.size) {
    let move = preferredPos <= start2 && preferredPos >= endA ? start2 - preferredPos : 0;
    start2 -= move;
    endB = start2 + (endB - endA);
    endA = start2;
  } else if (endB < start2) {
    let move = preferredPos <= start2 && preferredPos >= endB ? start2 - preferredPos : 0;
    start2 -= move;
    endA = start2 + (endA - endB);
    endB = start2;
  }
  return { start: start2, endA, endB };
}
var __serializeForClipboard = serializeForClipboard;
var EditorView = class {
  /**
  Create a view. `place` may be a DOM node that the editor should
  be appended to, a function that will place it into the document,
  or an object whose `mount` property holds the node to use as the
  document container. If it is `null`, the editor will not be
  added to the document.
  */
  constructor(place, props) {
    this._root = null;
    this.focused = false;
    this.trackWrites = null;
    this.mounted = false;
    this.markCursor = null;
    this.cursorWrapper = null;
    this.lastSelectedViewDesc = void 0;
    this.input = new InputState();
    this.prevDirectPlugins = [];
    this.pluginViews = [];
    this.requiresGeckoHackNode = false;
    this.dragging = null;
    this._props = props;
    this.state = props.state;
    this.directPlugins = props.plugins || [];
    this.directPlugins.forEach(checkStateComponent);
    this.dispatch = this.dispatch.bind(this);
    this.dom = place && place.mount || document.createElement("div");
    if (place) {
      if (place.appendChild)
        place.appendChild(this.dom);
      else if (typeof place == "function")
        place(this.dom);
      else if (place.mount)
        this.mounted = true;
    }
    this.editable = getEditable(this);
    updateCursorWrapper(this);
    this.nodeViews = buildNodeViews(this);
    this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
    this.domObserver = new DOMObserver(this, (from5, to3, typeOver, added) => readDOMChange(this, from5, to3, typeOver, added));
    this.domObserver.start();
    initInput(this);
    this.updatePluginViews();
  }
  /**
  Holds `true` when a
  [composition](https://w3c.github.io/uievents/#events-compositionevents)
  is active.
  */
  get composing() {
    return this.input.composing;
  }
  /**
  The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
  */
  get props() {
    if (this._props.state != this.state) {
      let prev2 = this._props;
      this._props = {};
      for (let name in prev2)
        this._props[name] = prev2[name];
      this._props.state = this.state;
    }
    return this._props;
  }
  /**
  Update the view's props. Will immediately cause an update to
  the DOM.
  */
  update(props) {
    if (props.handleDOMEvents != this._props.handleDOMEvents)
      ensureListeners(this);
    let prevProps = this._props;
    this._props = props;
    if (props.plugins) {
      props.plugins.forEach(checkStateComponent);
      this.directPlugins = props.plugins;
    }
    this.updateStateInner(props.state, prevProps);
  }
  /**
  Update the view by updating existing props object with the object
  given as argument. Equivalent to `view.update(Object.assign({},
  view.props, props))`.
  */
  setProps(props) {
    let updated = {};
    for (let name in this._props)
      updated[name] = this._props[name];
    updated.state = this.state;
    for (let name in props)
      updated[name] = props[name];
    this.update(updated);
  }
  /**
  Update the editor's `state` prop, without touching any of the
  other props.
  */
  updateState(state) {
    this.updateStateInner(state, this._props);
  }
  updateStateInner(state, prevProps) {
    let prev2 = this.state, redraw = false, updateSel = false;
    if (state.storedMarks && this.composing) {
      clearComposition(this);
      updateSel = true;
    }
    this.state = state;
    let pluginsChanged = prev2.plugins != state.plugins || this._props.plugins != prevProps.plugins;
    if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
      let nodeViews = buildNodeViews(this);
      if (changedNodeViews(nodeViews, this.nodeViews)) {
        this.nodeViews = nodeViews;
        redraw = true;
      }
    }
    if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
      ensureListeners(this);
    }
    this.editable = getEditable(this);
    updateCursorWrapper(this);
    let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
    let scroll = prev2.plugins != state.plugins && !prev2.doc.eq(state.doc) ? "reset" : state.scrollToSelection > prev2.scrollToSelection ? "to selection" : "preserve";
    let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
    if (updateDoc || !state.selection.eq(prev2.selection))
      updateSel = true;
    let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
    if (updateSel) {
      this.domObserver.stop();
      let forceSelUpdate = updateDoc && (ie || chrome) && !this.composing && !prev2.selection.empty && !state.selection.empty && selectionContextChanged(prev2.selection, state.selection);
      if (updateDoc) {
        let chromeKludge = chrome ? this.trackWrites = this.domSelectionRange().focusNode : null;
        if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
          this.docView.updateOuterDeco([]);
          this.docView.destroy();
          this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
        }
        if (chromeKludge && !this.trackWrites)
          forceSelUpdate = true;
      }
      if (forceSelUpdate || !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) && anchorInRightPlace(this))) {
        selectionToDOM(this, forceSelUpdate);
      } else {
        syncNodeSelection(this, state.selection);
        this.domObserver.setCurSelection();
      }
      this.domObserver.start();
    }
    this.updatePluginViews(prev2);
    if (scroll == "reset") {
      this.dom.scrollTop = 0;
    } else if (scroll == "to selection") {
      this.scrollToSelection();
    } else if (oldScrollPos) {
      resetScrollPos(oldScrollPos);
    }
  }
  /**
  @internal
  */
  scrollToSelection() {
    let startDOM = this.domSelectionRange().focusNode;
    if (this.someProp("handleScrollToSelection", (f2) => f2(this)))
      ;
    else if (this.state.selection instanceof NodeSelection) {
      let target = this.docView.domAfterPos(this.state.selection.from);
      if (target.nodeType == 1)
        scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
    } else {
      scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
    }
  }
  destroyPluginViews() {
    let view;
    while (view = this.pluginViews.pop())
      if (view.destroy)
        view.destroy();
  }
  updatePluginViews(prevState) {
    if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
      this.prevDirectPlugins = this.directPlugins;
      this.destroyPluginViews();
      for (let i = 0; i < this.directPlugins.length; i++) {
        let plugin = this.directPlugins[i];
        if (plugin.spec.view)
          this.pluginViews.push(plugin.spec.view(this));
      }
      for (let i = 0; i < this.state.plugins.length; i++) {
        let plugin = this.state.plugins[i];
        if (plugin.spec.view)
          this.pluginViews.push(plugin.spec.view(this));
      }
    } else {
      for (let i = 0; i < this.pluginViews.length; i++) {
        let pluginView = this.pluginViews[i];
        if (pluginView.update)
          pluginView.update(this, prevState);
      }
    }
  }
  someProp(propName, f2) {
    let prop = this._props && this._props[propName], value;
    if (prop != null && (value = f2 ? f2(prop) : prop))
      return value;
    for (let i = 0; i < this.directPlugins.length; i++) {
      let prop2 = this.directPlugins[i].props[propName];
      if (prop2 != null && (value = f2 ? f2(prop2) : prop2))
        return value;
    }
    let plugins = this.state.plugins;
    if (plugins)
      for (let i = 0; i < plugins.length; i++) {
        let prop2 = plugins[i].props[propName];
        if (prop2 != null && (value = f2 ? f2(prop2) : prop2))
          return value;
      }
  }
  /**
  Query whether the view has focus.
  */
  hasFocus() {
    if (ie) {
      let node4 = this.root.activeElement;
      if (node4 == this.dom)
        return true;
      if (!node4 || !this.dom.contains(node4))
        return false;
      while (node4 && this.dom != node4 && this.dom.contains(node4)) {
        if (node4.contentEditable == "false")
          return false;
        node4 = node4.parentElement;
      }
      return true;
    }
    return this.root.activeElement == this.dom;
  }
  /**
  Focus the editor.
  */
  focus() {
    this.domObserver.stop();
    if (this.editable)
      focusPreventScroll(this.dom);
    selectionToDOM(this);
    this.domObserver.start();
  }
  /**
  Get the document root in which the editor exists. This will
  usually be the top-level `document`, but might be a [shadow
  DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
  root if the editor is inside one.
  */
  get root() {
    let cached = this._root;
    if (cached == null)
      for (let search3 = this.dom.parentNode; search3; search3 = search3.parentNode) {
        if (search3.nodeType == 9 || search3.nodeType == 11 && search3.host) {
          if (!search3.getSelection)
            Object.getPrototypeOf(search3).getSelection = () => search3.ownerDocument.getSelection();
          return this._root = search3;
        }
      }
    return cached || document;
  }
  /**
  Given a pair of viewport coordinates, return the document
  position that corresponds to them. May return null if the given
  coordinates aren't inside of the editor. When an object is
  returned, its `pos` property is the position nearest to the
  coordinates, and its `inside` property holds the position of the
  inner node that the position falls inside of, or -1 if it is at
  the top level, not in any node.
  */
  posAtCoords(coords) {
    return posAtCoords(this, coords);
  }
  /**
  Returns the viewport rectangle at a given document position.
  `left` and `right` will be the same number, as this returns a
  flat cursor-ish rectangle. If the position is between two things
  that aren't directly adjacent, `side` determines which element
  is used. When < 0, the element before the position is used,
  otherwise the element after.
  */
  coordsAtPos(pos, side = 1) {
    return coordsAtPos(this, pos, side);
  }
  /**
  Find the DOM position that corresponds to the given document
  position. When `side` is negative, find the position as close as
  possible to the content before the position. When positive,
  prefer positions close to the content after the position. When
  zero, prefer as shallow a position as possible.
  
  Note that you should **not** mutate the editor's internal DOM,
  only inspect it (and even that is usually not necessary).
  */
  domAtPos(pos, side = 0) {
    return this.docView.domFromPos(pos, side);
  }
  /**
  Find the DOM node that represents the document node after the
  given position. May return `null` when the position doesn't point
  in front of a node or if the node is inside an opaque node view.
  
  This is intended to be able to call things like
  `getBoundingClientRect` on that DOM node. Do **not** mutate the
  editor DOM directly, or add styling this way, since that will be
  immediately overriden by the editor as it redraws the node.
  */
  nodeDOM(pos) {
    let desc = this.docView.descAt(pos);
    return desc ? desc.nodeDOM : null;
  }
  /**
  Find the document position that corresponds to a given DOM
  position. (Whenever possible, it is preferable to inspect the
  document structure directly, rather than poking around in the
  DOM, but sometimes—for example when interpreting an event
  target—you don't have a choice.)
  
  The `bias` parameter can be used to influence which side of a DOM
  node to use when the position is inside a leaf node.
  */
  posAtDOM(node4, offset3, bias = -1) {
    let pos = this.docView.posFromDOM(node4, offset3, bias);
    if (pos == null)
      throw new RangeError("DOM position not inside the editor");
    return pos;
  }
  /**
  Find out whether the selection is at the end of a textblock when
  moving in a given direction. When, for example, given `"left"`,
  it will return true if moving left from the current cursor
  position would leave that position's parent textblock. Will apply
  to the view's current state by default, but it is possible to
  pass a different state.
  */
  endOfTextblock(dir, state) {
    return endOfTextblock(this, state || this.state, dir);
  }
  /**
  Run the editor's paste logic with the given HTML string. The
  `event`, if given, will be passed to the
  [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
  */
  pasteHTML(html7, event) {
    return doPaste(this, "", html7, false, event || new ClipboardEvent("paste"));
  }
  /**
  Run the editor's paste logic with the given plain-text input.
  */
  pasteText(text10, event) {
    return doPaste(this, text10, null, true, event || new ClipboardEvent("paste"));
  }
  /**
  Removes the editor from the DOM and destroys all [node
  views](https://prosemirror.net/docs/ref/#view.NodeView).
  */
  destroy() {
    if (!this.docView)
      return;
    destroyInput(this);
    this.destroyPluginViews();
    if (this.mounted) {
      this.docView.update(this.state.doc, [], viewDecorations(this), this);
      this.dom.textContent = "";
    } else if (this.dom.parentNode) {
      this.dom.parentNode.removeChild(this.dom);
    }
    this.docView.destroy();
    this.docView = null;
  }
  /**
  This is true when the view has been
  [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
  used anymore).
  */
  get isDestroyed() {
    return this.docView == null;
  }
  /**
  Used for testing.
  */
  dispatchEvent(event) {
    return dispatchEvent(this, event);
  }
  /**
  Dispatch a transaction. Will call
  [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
  when given, and otherwise defaults to applying the transaction to
  the current state and calling
  [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
  This method is bound to the view instance, so that it can be
  easily passed around.
  */
  dispatch(tr4) {
    let dispatchTransaction = this._props.dispatchTransaction;
    if (dispatchTransaction)
      dispatchTransaction.call(this, tr4);
    else
      this.updateState(this.state.apply(tr4));
  }
  /**
  @internal
  */
  domSelectionRange() {
    return safari && this.root.nodeType === 11 && deepActiveElement(this.dom.ownerDocument) == this.dom ? safariShadowSelectionRange(this) : this.domSelection();
  }
  /**
  @internal
  */
  domSelection() {
    return this.root.getSelection();
  }
};
function computeDocDeco(view) {
  let attrs = /* @__PURE__ */ Object.create(null);
  attrs.class = "ProseMirror";
  attrs.contenteditable = String(view.editable);
  view.someProp("attributes", (value) => {
    if (typeof value == "function")
      value = value(view.state);
    if (value)
      for (let attr in value) {
        if (attr == "class")
          attrs.class += " " + value[attr];
        else if (attr == "style")
          attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
        else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
          attrs[attr] = String(value[attr]);
      }
  });
  if (!attrs.translate)
    attrs.translate = "no";
  return [Decoration.node(0, view.state.doc.content.size, attrs)];
}
function updateCursorWrapper(view) {
  if (view.markCursor) {
    let dom = document.createElement("img");
    dom.className = "ProseMirror-separator";
    dom.setAttribute("mark-placeholder", "true");
    dom.setAttribute("alt", "");
    view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
  } else {
    view.cursorWrapper = null;
  }
}
function getEditable(view) {
  return !view.someProp("editable", (value) => value(view.state) === false);
}
function selectionContextChanged(sel1, sel2) {
  let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
  return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
}
function buildNodeViews(view) {
  let result = /* @__PURE__ */ Object.create(null);
  function add(obj) {
    for (let prop in obj)
      if (!Object.prototype.hasOwnProperty.call(result, prop))
        result[prop] = obj[prop];
  }
  view.someProp("nodeViews", add);
  view.someProp("markViews", add);
  return result;
}
function changedNodeViews(a2, b2) {
  let nA = 0, nB = 0;
  for (let prop in a2) {
    if (a2[prop] != b2[prop])
      return true;
    nA++;
  }
  for (let _2 in b2)
    nB++;
  return nA != nB;
}
function checkStateComponent(plugin) {
  if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
    throw new RangeError("Plugins passed directly to the view must not have a state component");
}

// node_modules/w3c-keyname/index.js
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: '"'
};
var chrome2 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
var gecko2 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
var mac2 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie2 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
var brokenModifierNames = mac2 || chrome2 && +chrome2[1] < 57;
for (i = 0; i < 10; i++)
  base[48 + i] = base[96 + i] = String(i);
var i;
for (i = 1; i <= 24; i++)
  base[i + 111] = "F" + i;
var i;
for (i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}
var i;
for (code5 in base)
  if (!shift.hasOwnProperty(code5))
    shift[code5] = base[code5];
var code5;
function keyName(event) {
  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || ie2 && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  if (name == "Esc")
    name = "Escape";
  if (name == "Del")
    name = "Delete";
  if (name == "Left")
    name = "ArrowLeft";
  if (name == "Up")
    name = "ArrowUp";
  if (name == "Right")
    name = "ArrowRight";
  if (name == "Down")
    name = "ArrowDown";
  return name;
}

// node_modules/prosemirror-keymap/dist/index.js
var mac3 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
function normalizeKeyName(name) {
  let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
  if (result == "Space")
    result = " ";
  let alt, ctrl, shift3, meta2;
  for (let i = 0; i < parts.length - 1; i++) {
    let mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod))
      meta2 = true;
    else if (/^a(lt)?$/i.test(mod))
      alt = true;
    else if (/^(c|ctrl|control)$/i.test(mod))
      ctrl = true;
    else if (/^s(hift)?$/i.test(mod))
      shift3 = true;
    else if (/^mod$/i.test(mod)) {
      if (mac3)
        meta2 = true;
      else
        ctrl = true;
    } else
      throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt)
    result = "Alt-" + result;
  if (ctrl)
    result = "Ctrl-" + result;
  if (meta2)
    result = "Meta-" + result;
  if (shift3)
    result = "Shift-" + result;
  return result;
}
function normalize(map6) {
  let copy4 = /* @__PURE__ */ Object.create(null);
  for (let prop in map6)
    copy4[normalizeKeyName(prop)] = map6[prop];
  return copy4;
}
function modifiers(name, event, shift3 = true) {
  if (event.altKey)
    name = "Alt-" + name;
  if (event.ctrlKey)
    name = "Ctrl-" + name;
  if (event.metaKey)
    name = "Meta-" + name;
  if (shift3 && event.shiftKey)
    name = "Shift-" + name;
  return name;
}
function keymap(bindings) {
  return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
}
function keydownHandler(bindings) {
  let map6 = normalize(bindings);
  return function(view, event) {
    let name = keyName(event), baseName, direct2 = map6[modifiers(name, event)];
    if (direct2 && direct2(view.state, view.dispatch, view))
      return true;
    if (name.length == 1 && name != " ") {
      if (event.shiftKey) {
        let noShift = map6[modifiers(name, event, false)];
        if (noShift && noShift(view.state, view.dispatch, view))
          return true;
      }
      if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) && (baseName = base[event.keyCode]) && baseName != name) {
        let fromCode = map6[modifiers(baseName, event)];
        if (fromCode && fromCode(view.state, view.dispatch, view))
          return true;
      }
    }
    return false;
  };
}

// node_modules/prosemirror-commands/dist/index.js
var deleteSelection = (state, dispatch) => {
  if (state.selection.empty)
    return false;
  if (dispatch)
    dispatch(state.tr.deleteSelection().scrollIntoView());
  return true;
};
function atBlockStart(state, view) {
  let { $cursor } = state.selection;
  if (!$cursor || (view ? !view.endOfTextblock("backward", state) : $cursor.parentOffset > 0))
    return null;
  return $cursor;
}
var joinBackward = (state, dispatch, view) => {
  let $cursor = atBlockStart(state, view);
  if (!$cursor)
    return false;
  let $cut = findCutBefore($cursor);
  if (!$cut) {
    let range2 = $cursor.blockRange(), target = range2 && liftTarget(range2);
    if (target == null)
      return false;
    if (dispatch)
      dispatch(state.tr.lift(range2, target).scrollIntoView());
    return true;
  }
  let before = $cut.nodeBefore;
  if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
    return true;
  if ($cursor.parent.content.size == 0 && (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
    if (delStep && delStep.slice.size < delStep.to - delStep.from) {
      if (dispatch) {
        let tr4 = state.tr.step(delStep);
        tr4.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr4.doc.resolve(tr4.mapping.map($cut.pos, -1)), -1) : NodeSelection.create(tr4.doc, $cut.pos - before.nodeSize));
        dispatch(tr4.scrollIntoView());
      }
      return true;
    }
  }
  if (before.isAtom && $cut.depth == $cursor.depth - 1) {
    if (dispatch)
      dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
    return true;
  }
  return false;
};
function textblockAt(node4, side, only = false) {
  for (let scan = node4; scan; scan = side == "start" ? scan.firstChild : scan.lastChild) {
    if (scan.isTextblock)
      return true;
    if (only && scan.childCount != 1)
      return false;
  }
  return false;
}
var selectNodeBackward = (state, dispatch, view) => {
  let { $head, empty: empty2 } = state.selection, $cut = $head;
  if (!empty2)
    return false;
  if ($head.parent.isTextblock) {
    if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
      return false;
    $cut = findCutBefore($head);
  }
  let node4 = $cut && $cut.nodeBefore;
  if (!node4 || !NodeSelection.isSelectable(node4))
    return false;
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node4.nodeSize)).scrollIntoView());
  return true;
};
function findCutBefore($pos) {
  if (!$pos.parent.type.spec.isolating)
    for (let i = $pos.depth - 1; i >= 0; i--) {
      if ($pos.index(i) > 0)
        return $pos.doc.resolve($pos.before(i + 1));
      if ($pos.node(i).type.spec.isolating)
        break;
    }
  return null;
}
function atBlockEnd(state, view) {
  let { $cursor } = state.selection;
  if (!$cursor || (view ? !view.endOfTextblock("forward", state) : $cursor.parentOffset < $cursor.parent.content.size))
    return null;
  return $cursor;
}
var joinForward = (state, dispatch, view) => {
  let $cursor = atBlockEnd(state, view);
  if (!$cursor)
    return false;
  let $cut = findCutAfter($cursor);
  if (!$cut)
    return false;
  let after = $cut.nodeAfter;
  if (deleteBarrier(state, $cut, dispatch))
    return true;
  if ($cursor.parent.content.size == 0 && (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
    let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
    if (delStep && delStep.slice.size < delStep.to - delStep.from) {
      if (dispatch) {
        let tr4 = state.tr.step(delStep);
        tr4.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr4.doc.resolve(tr4.mapping.map($cut.pos)), 1) : NodeSelection.create(tr4.doc, tr4.mapping.map($cut.pos)));
        dispatch(tr4.scrollIntoView());
      }
      return true;
    }
  }
  if (after.isAtom && $cut.depth == $cursor.depth - 1) {
    if (dispatch)
      dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
    return true;
  }
  return false;
};
var selectNodeForward = (state, dispatch, view) => {
  let { $head, empty: empty2 } = state.selection, $cut = $head;
  if (!empty2)
    return false;
  if ($head.parent.isTextblock) {
    if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
      return false;
    $cut = findCutAfter($head);
  }
  let node4 = $cut && $cut.nodeAfter;
  if (!node4 || !NodeSelection.isSelectable(node4))
    return false;
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
  return true;
};
function findCutAfter($pos) {
  if (!$pos.parent.type.spec.isolating)
    for (let i = $pos.depth - 1; i >= 0; i--) {
      let parent = $pos.node(i);
      if ($pos.index(i) + 1 < parent.childCount)
        return $pos.doc.resolve($pos.after(i + 1));
      if (parent.type.spec.isolating)
        break;
    }
  return null;
}
var joinUp = (state, dispatch) => {
  let sel = state.selection, nodeSel = sel instanceof NodeSelection, point5;
  if (nodeSel) {
    if (sel.node.isTextblock || !canJoin(state.doc, sel.from))
      return false;
    point5 = sel.from;
  } else {
    point5 = joinPoint(state.doc, sel.from, -1);
    if (point5 == null)
      return false;
  }
  if (dispatch) {
    let tr4 = state.tr.join(point5);
    if (nodeSel)
      tr4.setSelection(NodeSelection.create(tr4.doc, point5 - state.doc.resolve(point5).nodeBefore.nodeSize));
    dispatch(tr4.scrollIntoView());
  }
  return true;
};
var joinDown = (state, dispatch) => {
  let sel = state.selection, point5;
  if (sel instanceof NodeSelection) {
    if (sel.node.isTextblock || !canJoin(state.doc, sel.to))
      return false;
    point5 = sel.to;
  } else {
    point5 = joinPoint(state.doc, sel.to, 1);
    if (point5 == null)
      return false;
  }
  if (dispatch)
    dispatch(state.tr.join(point5).scrollIntoView());
  return true;
};
var lift2 = (state, dispatch) => {
  let { $from, $to } = state.selection;
  let range2 = $from.blockRange($to), target = range2 && liftTarget(range2);
  if (target == null)
    return false;
  if (dispatch)
    dispatch(state.tr.lift(range2, target).scrollIntoView());
  return true;
};
var newlineInCode = (state, dispatch) => {
  let { $head, $anchor } = state.selection;
  if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
    return false;
  if (dispatch)
    dispatch(state.tr.insertText("\n").scrollIntoView());
  return true;
};
function defaultBlockAt(match2) {
  for (let i = 0; i < match2.edgeCount; i++) {
    let { type } = match2.edge(i);
    if (type.isTextblock && !type.hasRequiredAttrs())
      return type;
  }
  return null;
}
var exitCode = (state, dispatch) => {
  let { $head, $anchor } = state.selection;
  if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
    return false;
  let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt(above.contentMatchAt(after));
  if (!type || !above.canReplaceWith(after, after, type))
    return false;
  if (dispatch) {
    let pos = $head.after(), tr4 = state.tr.replaceWith(pos, pos, type.createAndFill());
    tr4.setSelection(Selection.near(tr4.doc.resolve(pos), 1));
    dispatch(tr4.scrollIntoView());
  }
  return true;
};
var createParagraphNear = (state, dispatch) => {
  let sel = state.selection, { $from, $to } = sel;
  if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
    return false;
  let type = defaultBlockAt($to.parent.contentMatchAt($to.indexAfter()));
  if (!type || !type.isTextblock)
    return false;
  if (dispatch) {
    let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
    let tr4 = state.tr.insert(side, type.createAndFill());
    tr4.setSelection(TextSelection.create(tr4.doc, side + 1));
    dispatch(tr4.scrollIntoView());
  }
  return true;
};
var liftEmptyBlock = (state, dispatch) => {
  let { $cursor } = state.selection;
  if (!$cursor || $cursor.parent.content.size)
    return false;
  if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
    let before = $cursor.before();
    if (canSplit(state.doc, before)) {
      if (dispatch)
        dispatch(state.tr.split(before).scrollIntoView());
      return true;
    }
  }
  let range2 = $cursor.blockRange(), target = range2 && liftTarget(range2);
  if (target == null)
    return false;
  if (dispatch)
    dispatch(state.tr.lift(range2, target).scrollIntoView());
  return true;
};
function splitBlockAs(splitNode) {
  return (state, dispatch) => {
    let { $from, $to } = state.selection;
    if (state.selection instanceof NodeSelection && state.selection.node.isBlock) {
      if (!$from.parentOffset || !canSplit(state.doc, $from.pos))
        return false;
      if (dispatch)
        dispatch(state.tr.split($from.pos).scrollIntoView());
      return true;
    }
    if (!$from.parent.isBlock)
      return false;
    if (dispatch) {
      let atEnd = $to.parentOffset == $to.parent.content.size;
      let tr4 = state.tr;
      if (state.selection instanceof TextSelection || state.selection instanceof AllSelection)
        tr4.deleteSelection();
      let deflt = $from.depth == 0 ? null : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
      let splitType = splitNode && splitNode($to.parent, atEnd);
      let types2 = splitType ? [splitType] : atEnd && deflt ? [{ type: deflt }] : void 0;
      let can = canSplit(tr4.doc, tr4.mapping.map($from.pos), 1, types2);
      if (!types2 && !can && canSplit(tr4.doc, tr4.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : void 0)) {
        if (deflt)
          types2 = [{ type: deflt }];
        can = true;
      }
      if (can) {
        tr4.split(tr4.mapping.map($from.pos), 1, types2);
        if (!atEnd && !$from.parentOffset && $from.parent.type != deflt) {
          let first2 = tr4.mapping.map($from.before()), $first = tr4.doc.resolve(first2);
          if (deflt && $from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt))
            tr4.setNodeMarkup(tr4.mapping.map($from.before()), deflt);
        }
      }
      dispatch(tr4.scrollIntoView());
    }
    return true;
  };
}
var splitBlock = splitBlockAs();
var selectParentNode = (state, dispatch) => {
  let { $from, to: to3 } = state.selection, pos;
  let same = $from.sharedDepth(to3);
  if (same == 0)
    return false;
  pos = $from.before(same);
  if (dispatch)
    dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
  return true;
};
var selectAll = (state, dispatch) => {
  if (dispatch)
    dispatch(state.tr.setSelection(new AllSelection(state.doc)));
  return true;
};
function joinMaybeClear(state, $pos, dispatch) {
  let before = $pos.nodeBefore, after = $pos.nodeAfter, index7 = $pos.index();
  if (!before || !after || !before.type.compatibleContent(after.type))
    return false;
  if (!before.content.size && $pos.parent.canReplace(index7 - 1, index7)) {
    if (dispatch)
      dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
    return true;
  }
  if (!$pos.parent.canReplace(index7, index7 + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
    return false;
  if (dispatch)
    dispatch(state.tr.clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount)).join($pos.pos).scrollIntoView());
  return true;
}
function deleteBarrier(state, $cut, dispatch) {
  let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match2;
  if (before.type.spec.isolating || after.type.spec.isolating)
    return false;
  if (joinMaybeClear(state, $cut, dispatch))
    return true;
  let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
  if (canDelAfter && (conn = (match2 = before.contentMatchAt(before.childCount)).findWrapping(after.type)) && match2.matchType(conn[0] || after.type).validEnd) {
    if (dispatch) {
      let end2 = $cut.pos + after.nodeSize, wrap5 = Fragment.empty;
      for (let i = conn.length - 1; i >= 0; i--)
        wrap5 = Fragment.from(conn[i].create(null, wrap5));
      wrap5 = Fragment.from(before.copy(wrap5));
      let tr4 = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end2, $cut.pos, end2, new Slice(wrap5, 1, 0), conn.length, true));
      let joinAt = end2 + 2 * conn.length;
      if (canJoin(tr4.doc, joinAt))
        tr4.join(joinAt);
      dispatch(tr4.scrollIntoView());
    }
    return true;
  }
  let selAfter = Selection.findFrom($cut, 1);
  let range2 = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range2 && liftTarget(range2);
  if (target != null && target >= $cut.depth) {
    if (dispatch)
      dispatch(state.tr.lift(range2, target).scrollIntoView());
    return true;
  }
  if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
    let at = before, wrap5 = [];
    for (; ; ) {
      wrap5.push(at);
      if (at.isTextblock)
        break;
      at = at.lastChild;
    }
    let afterText = after, afterDepth = 1;
    for (; !afterText.isTextblock; afterText = afterText.firstChild)
      afterDepth++;
    if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
      if (dispatch) {
        let end2 = Fragment.empty;
        for (let i = wrap5.length - 1; i >= 0; i--)
          end2 = Fragment.from(wrap5[i].copy(end2));
        let tr4 = state.tr.step(new ReplaceAroundStep($cut.pos - wrap5.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end2, wrap5.length, 0), 0, true));
        dispatch(tr4.scrollIntoView());
      }
      return true;
    }
  }
  return false;
}
function selectTextblockSide(side) {
  return function(state, dispatch) {
    let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
    let depth = $pos.depth;
    while ($pos.node(depth).isInline) {
      if (!depth)
        return false;
      depth--;
    }
    if (!$pos.node(depth).isTextblock)
      return false;
    if (dispatch)
      dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
    return true;
  };
}
var selectTextblockStart = selectTextblockSide(-1);
var selectTextblockEnd = selectTextblockSide(1);
function wrapIn(nodeType, attrs = null) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range2 = $from.blockRange($to), wrapping = range2 && findWrapping(range2, nodeType, attrs);
    if (!wrapping)
      return false;
    if (dispatch)
      dispatch(state.tr.wrap(range2, wrapping).scrollIntoView());
    return true;
  };
}
function setBlockType2(nodeType, attrs = null) {
  return function(state, dispatch) {
    let applicable = false;
    for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {
      let { $from: { pos: from5 }, $to: { pos: to3 } } = state.selection.ranges[i];
      state.doc.nodesBetween(from5, to3, (node4, pos) => {
        if (applicable)
          return false;
        if (!node4.isTextblock || node4.hasMarkup(nodeType, attrs))
          return;
        if (node4.type == nodeType) {
          applicable = true;
        } else {
          let $pos = state.doc.resolve(pos), index7 = $pos.index();
          applicable = $pos.parent.canReplaceWith(index7, index7 + 1, nodeType);
        }
      });
    }
    if (!applicable)
      return false;
    if (dispatch) {
      let tr4 = state.tr;
      for (let i = 0; i < state.selection.ranges.length; i++) {
        let { $from: { pos: from5 }, $to: { pos: to3 } } = state.selection.ranges[i];
        tr4.setBlockType(from5, to3, nodeType, attrs);
      }
      dispatch(tr4.scrollIntoView());
    }
    return true;
  };
}
function chainCommands(...commands2) {
  return function(state, dispatch, view) {
    for (let i = 0; i < commands2.length; i++)
      if (commands2[i](state, dispatch, view))
        return true;
    return false;
  };
}
var backspace = chainCommands(deleteSelection, joinBackward, selectNodeBackward);
var del = chainCommands(deleteSelection, joinForward, selectNodeForward);
var pcBaseKeymap = {
  "Enter": chainCommands(newlineInCode, createParagraphNear, liftEmptyBlock, splitBlock),
  "Mod-Enter": exitCode,
  "Backspace": backspace,
  "Mod-Backspace": backspace,
  "Shift-Backspace": backspace,
  "Delete": del,
  "Mod-Delete": del,
  "Mod-a": selectAll
};
var macBaseKeymap = {
  "Ctrl-h": pcBaseKeymap["Backspace"],
  "Alt-Backspace": pcBaseKeymap["Mod-Backspace"],
  "Ctrl-d": pcBaseKeymap["Delete"],
  "Ctrl-Alt-Backspace": pcBaseKeymap["Mod-Delete"],
  "Alt-Delete": pcBaseKeymap["Mod-Delete"],
  "Alt-d": pcBaseKeymap["Mod-Delete"],
  "Ctrl-a": selectTextblockStart,
  "Ctrl-e": selectTextblockEnd
};
for (let key2 in pcBaseKeymap)
  macBaseKeymap[key2] = pcBaseKeymap[key2];
var mac4 = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;

// node_modules/prosemirror-schema-list/dist/index.js
function wrapInList(listType, attrs = null) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range2 = $from.blockRange($to), doJoin = false, outerRange = range2;
    if (!range2)
      return false;
    if (range2.depth >= 2 && $from.node(range2.depth - 1).type.compatibleContent(listType) && range2.startIndex == 0) {
      if ($from.index(range2.depth - 1) == 0)
        return false;
      let $insert = state.doc.resolve(range2.start - 2);
      outerRange = new NodeRange($insert, $insert, range2.depth);
      if (range2.endIndex < range2.parent.childCount)
        range2 = new NodeRange($from, state.doc.resolve($to.end(range2.depth)), range2.depth);
      doJoin = true;
    }
    let wrap5 = findWrapping(outerRange, listType, attrs, range2);
    if (!wrap5)
      return false;
    if (dispatch)
      dispatch(doWrapInList(state.tr, range2, wrap5, doJoin, listType).scrollIntoView());
    return true;
  };
}
function doWrapInList(tr4, range2, wrappers, joinBefore, listType) {
  let content5 = Fragment.empty;
  for (let i = wrappers.length - 1; i >= 0; i--)
    content5 = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content5));
  tr4.step(new ReplaceAroundStep(range2.start - (joinBefore ? 2 : 0), range2.end, range2.start, range2.end, new Slice(content5, 0, 0), wrappers.length, true));
  let found2 = 0;
  for (let i = 0; i < wrappers.length; i++)
    if (wrappers[i].type == listType)
      found2 = i + 1;
  let splitDepth = wrappers.length - found2;
  let splitPos = range2.start + wrappers.length - (joinBefore ? 2 : 0), parent = range2.parent;
  for (let i = range2.startIndex, e = range2.endIndex, first2 = true; i < e; i++, first2 = false) {
    if (!first2 && canSplit(tr4.doc, splitPos, splitDepth)) {
      tr4.split(splitPos, splitDepth);
      splitPos += 2 * splitDepth;
    }
    splitPos += parent.child(i).nodeSize;
  }
  return tr4;
}
function liftListItem(itemType) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range2 = $from.blockRange($to, (node4) => node4.childCount > 0 && node4.firstChild.type == itemType);
    if (!range2)
      return false;
    if (!dispatch)
      return true;
    if ($from.node(range2.depth - 1).type == itemType)
      return liftToOuterList(state, dispatch, itemType, range2);
    else
      return liftOutOfList(state, dispatch, range2);
  };
}
function liftToOuterList(state, dispatch, itemType, range2) {
  let tr4 = state.tr, end2 = range2.end, endOfList = range2.$to.end(range2.depth);
  if (end2 < endOfList) {
    tr4.step(new ReplaceAroundStep(end2 - 1, endOfList, end2, endOfList, new Slice(Fragment.from(itemType.create(null, range2.parent.copy())), 1, 0), 1, true));
    range2 = new NodeRange(tr4.doc.resolve(range2.$from.pos), tr4.doc.resolve(endOfList), range2.depth);
  }
  const target = liftTarget(range2);
  if (target == null)
    return false;
  tr4.lift(range2, target);
  let after = tr4.mapping.map(end2, -1) - 1;
  if (canJoin(tr4.doc, after))
    tr4.join(after);
  dispatch(tr4.scrollIntoView());
  return true;
}
function liftOutOfList(state, dispatch, range2) {
  let tr4 = state.tr, list6 = range2.parent;
  for (let pos = range2.end, i = range2.endIndex - 1, e = range2.startIndex; i > e; i--) {
    pos -= list6.child(i).nodeSize;
    tr4.delete(pos - 1, pos + 1);
  }
  let $start = tr4.doc.resolve(range2.start), item = $start.nodeAfter;
  if (tr4.mapping.map(range2.end) != range2.start + $start.nodeAfter.nodeSize)
    return false;
  let atStart = range2.startIndex == 0, atEnd = range2.endIndex == list6.childCount;
  let parent = $start.node(-1), indexBefore = $start.index(-1);
  if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list6))))
    return false;
  let start2 = $start.pos, end2 = start2 + item.nodeSize;
  tr4.step(new ReplaceAroundStep(start2 - (atStart ? 1 : 0), end2 + (atEnd ? 1 : 0), start2 + 1, end2 - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list6.copy(Fragment.empty))).append(atEnd ? Fragment.empty : Fragment.from(list6.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
  dispatch(tr4.scrollIntoView());
  return true;
}
function sinkListItem(itemType) {
  return function(state, dispatch) {
    let { $from, $to } = state.selection;
    let range2 = $from.blockRange($to, (node4) => node4.childCount > 0 && node4.firstChild.type == itemType);
    if (!range2)
      return false;
    let startIndex = range2.startIndex;
    if (startIndex == 0)
      return false;
    let parent = range2.parent, nodeBefore = parent.child(startIndex - 1);
    if (nodeBefore.type != itemType)
      return false;
    if (dispatch) {
      let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
      let inner = Fragment.from(nestedBefore ? itemType.create() : null);
      let slice3 = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
      let before = range2.start, after = range2.end;
      dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice3, 1, true)).scrollIntoView());
    }
    return true;
  };
}

// node_modules/@tiptap/core/dist/index.js
function createChainableState(config) {
  const { state, transaction } = config;
  let { selection } = transaction;
  let { doc: doc4 } = transaction;
  let { storedMarks } = transaction;
  return {
    ...state,
    apply: state.apply.bind(state),
    applyTransaction: state.applyTransaction.bind(state),
    filterTransaction: state.filterTransaction,
    plugins: state.plugins,
    schema: state.schema,
    reconfigure: state.reconfigure.bind(state),
    toJSON: state.toJSON.bind(state),
    get storedMarks() {
      return storedMarks;
    },
    get selection() {
      return selection;
    },
    get doc() {
      return doc4;
    },
    get tr() {
      selection = transaction.selection;
      doc4 = transaction.doc;
      storedMarks = transaction.storedMarks;
      return transaction;
    }
  };
}
var CommandManager = class {
  constructor(props) {
    this.editor = props.editor;
    this.rawCommands = this.editor.extensionManager.commands;
    this.customState = props.state;
  }
  get hasCustomState() {
    return !!this.customState;
  }
  get state() {
    return this.customState || this.editor.state;
  }
  get commands() {
    const { rawCommands, editor, state } = this;
    const { view } = editor;
    const { tr: tr4 } = state;
    const props = this.buildProps(tr4);
    return Object.fromEntries(Object.entries(rawCommands).map(([name, command2]) => {
      const method = (...args2) => {
        const callback = command2(...args2)(props);
        if (!tr4.getMeta("preventDispatch") && !this.hasCustomState) {
          view.dispatch(tr4);
        }
        return callback;
      };
      return [name, method];
    }));
  }
  get chain() {
    return () => this.createChain();
  }
  get can() {
    return () => this.createCan();
  }
  createChain(startTr, shouldDispatch = true) {
    const { rawCommands, editor, state } = this;
    const { view } = editor;
    const callbacks = [];
    const hasStartTransaction = !!startTr;
    const tr4 = startTr || state.tr;
    const run4 = () => {
      if (!hasStartTransaction && shouldDispatch && !tr4.getMeta("preventDispatch") && !this.hasCustomState) {
        view.dispatch(tr4);
      }
      return callbacks.every((callback) => callback === true);
    };
    const chain2 = {
      ...Object.fromEntries(Object.entries(rawCommands).map(([name, command2]) => {
        const chainedCommand = (...args2) => {
          const props = this.buildProps(tr4, shouldDispatch);
          const callback = command2(...args2)(props);
          callbacks.push(callback);
          return chain2;
        };
        return [name, chainedCommand];
      })),
      run: run4
    };
    return chain2;
  }
  createCan(startTr) {
    const { rawCommands, state } = this;
    const dispatch = false;
    const tr4 = startTr || state.tr;
    const props = this.buildProps(tr4, dispatch);
    const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command2]) => {
      return [name, (...args2) => command2(...args2)({ ...props, dispatch: void 0 })];
    }));
    return {
      ...formattedCommands,
      chain: () => this.createChain(tr4, dispatch)
    };
  }
  buildProps(tr4, shouldDispatch = true) {
    const { rawCommands, editor, state } = this;
    const { view } = editor;
    if (state.storedMarks) {
      tr4.setStoredMarks(state.storedMarks);
    }
    const props = {
      tr: tr4,
      editor,
      view,
      state: createChainableState({
        state,
        transaction: tr4
      }),
      dispatch: shouldDispatch ? () => void 0 : void 0,
      chain: () => this.createChain(tr4),
      can: () => this.createCan(tr4),
      get commands() {
        return Object.fromEntries(Object.entries(rawCommands).map(([name, command2]) => {
          return [name, (...args2) => command2(...args2)(props)];
        }));
      }
    };
    return props;
  }
};
var EventEmitter = class {
  constructor() {
    this.callbacks = {};
  }
  on(event, fn3) {
    if (!this.callbacks[event]) {
      this.callbacks[event] = [];
    }
    this.callbacks[event].push(fn3);
    return this;
  }
  emit(event, ...args2) {
    const callbacks = this.callbacks[event];
    if (callbacks) {
      callbacks.forEach((callback) => callback.apply(this, args2));
    }
    return this;
  }
  off(event, fn3) {
    const callbacks = this.callbacks[event];
    if (callbacks) {
      if (fn3) {
        this.callbacks[event] = callbacks.filter((callback) => callback !== fn3);
      } else {
        delete this.callbacks[event];
      }
    }
    return this;
  }
  removeAllListeners() {
    this.callbacks = {};
  }
};
function getExtensionField(extension2, field, context) {
  if (extension2.config[field] === void 0 && extension2.parent) {
    return getExtensionField(extension2.parent, field, context);
  }
  if (typeof extension2.config[field] === "function") {
    const value = extension2.config[field].bind({
      ...context,
      parent: extension2.parent ? getExtensionField(extension2.parent, field, context) : null
    });
    return value;
  }
  return extension2.config[field];
}
function splitExtensions(extensions2) {
  const baseExtensions = extensions2.filter((extension2) => extension2.type === "extension");
  const nodeExtensions = extensions2.filter((extension2) => extension2.type === "node");
  const markExtensions = extensions2.filter((extension2) => extension2.type === "mark");
  return {
    baseExtensions,
    nodeExtensions,
    markExtensions
  };
}
function getAttributesFromExtensions(extensions2) {
  const extensionAttributes = [];
  const { nodeExtensions, markExtensions } = splitExtensions(extensions2);
  const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];
  const defaultAttribute = {
    default: null,
    rendered: true,
    renderHTML: null,
    parseHTML: null,
    keepOnSplit: true,
    isRequired: false
  };
  extensions2.forEach((extension2) => {
    const context = {
      name: extension2.name,
      options: extension2.options,
      storage: extension2.storage
    };
    const addGlobalAttributes = getExtensionField(extension2, "addGlobalAttributes", context);
    if (!addGlobalAttributes) {
      return;
    }
    const globalAttributes = addGlobalAttributes();
    globalAttributes.forEach((globalAttribute) => {
      globalAttribute.types.forEach((type) => {
        Object.entries(globalAttribute.attributes).forEach(([name, attribute]) => {
          extensionAttributes.push({
            type,
            name,
            attribute: {
              ...defaultAttribute,
              ...attribute
            }
          });
        });
      });
    });
  });
  nodeAndMarkExtensions.forEach((extension2) => {
    const context = {
      name: extension2.name,
      options: extension2.options,
      storage: extension2.storage
    };
    const addAttributes = getExtensionField(extension2, "addAttributes", context);
    if (!addAttributes) {
      return;
    }
    const attributes = addAttributes();
    Object.entries(attributes).forEach(([name, attribute]) => {
      const mergedAttr = {
        ...defaultAttribute,
        ...attribute
      };
      if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === "function") {
        mergedAttr.default = mergedAttr.default();
      }
      if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === void 0) {
        delete mergedAttr.default;
      }
      extensionAttributes.push({
        type: extension2.name,
        name,
        attribute: mergedAttr
      });
    });
  });
  return extensionAttributes;
}
function getNodeType(nameOrType, schema) {
  if (typeof nameOrType === "string") {
    if (!schema.nodes[nameOrType]) {
      throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);
    }
    return schema.nodes[nameOrType];
  }
  return nameOrType;
}
function mergeAttributes(...objects) {
  return objects.filter((item) => !!item).reduce((items, item) => {
    const mergedAttributes = { ...items };
    Object.entries(item).forEach(([key2, value]) => {
      const exists = mergedAttributes[key2];
      if (!exists) {
        mergedAttributes[key2] = value;
        return;
      }
      if (key2 === "class") {
        mergedAttributes[key2] = [mergedAttributes[key2], value].join(" ");
      } else if (key2 === "style") {
        mergedAttributes[key2] = [mergedAttributes[key2], value].join("; ");
      } else {
        mergedAttributes[key2] = value;
      }
    });
    return mergedAttributes;
  }, {});
}
function getRenderedAttributes(nodeOrMark, extensionAttributes) {
  return extensionAttributes.filter((item) => item.attribute.rendered).map((item) => {
    if (!item.attribute.renderHTML) {
      return {
        [item.name]: nodeOrMark.attrs[item.name]
      };
    }
    return item.attribute.renderHTML(nodeOrMark.attrs) || {};
  }).reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});
}
function isFunction(value) {
  return typeof value === "function";
}
function callOrReturn(value, context = void 0, ...props) {
  if (isFunction(value)) {
    if (context) {
      return value.bind(context)(...props);
    }
    return value(...props);
  }
  return value;
}
function isEmptyObject(value = {}) {
  return Object.keys(value).length === 0 && value.constructor === Object;
}
function fromString(value) {
  if (typeof value !== "string") {
    return value;
  }
  if (value.match(/^[+-]?(?:\d*\.)?\d+$/)) {
    return Number(value);
  }
  if (value === "true") {
    return true;
  }
  if (value === "false") {
    return false;
  }
  return value;
}
function injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {
  if (parseRule.style) {
    return parseRule;
  }
  return {
    ...parseRule,
    getAttrs: (node4) => {
      const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node4) : parseRule.attrs;
      if (oldAttributes === false) {
        return false;
      }
      const newAttributes = extensionAttributes.reduce((items, item) => {
        const value = item.attribute.parseHTML ? item.attribute.parseHTML(node4) : fromString(node4.getAttribute(item.name));
        if (value === null || value === void 0) {
          return items;
        }
        return {
          ...items,
          [item.name]: value
        };
      }, {});
      return { ...oldAttributes, ...newAttributes };
    }
  };
}
function cleanUpSchemaItem(data) {
  return Object.fromEntries(
    // @ts-ignore
    Object.entries(data).filter(([key2, value]) => {
      if (key2 === "attrs" && isEmptyObject(value)) {
        return false;
      }
      return value !== null && value !== void 0;
    })
  );
}
function getSchemaByResolvedExtensions(extensions2, editor) {
  var _a;
  const allAttributes = getAttributesFromExtensions(extensions2);
  const { nodeExtensions, markExtensions } = splitExtensions(extensions2);
  const topNode = (_a = nodeExtensions.find((extension2) => getExtensionField(extension2, "topNode"))) === null || _a === void 0 ? void 0 : _a.name;
  const nodes = Object.fromEntries(nodeExtensions.map((extension2) => {
    const extensionAttributes = allAttributes.filter((attribute) => attribute.type === extension2.name);
    const context = {
      name: extension2.name,
      options: extension2.options,
      storage: extension2.storage,
      editor
    };
    const extraNodeFields = extensions2.reduce((fields, e) => {
      const extendNodeSchema = getExtensionField(e, "extendNodeSchema", context);
      return {
        ...fields,
        ...extendNodeSchema ? extendNodeSchema(extension2) : {}
      };
    }, {});
    const schema = cleanUpSchemaItem({
      ...extraNodeFields,
      content: callOrReturn(getExtensionField(extension2, "content", context)),
      marks: callOrReturn(getExtensionField(extension2, "marks", context)),
      group: callOrReturn(getExtensionField(extension2, "group", context)),
      inline: callOrReturn(getExtensionField(extension2, "inline", context)),
      atom: callOrReturn(getExtensionField(extension2, "atom", context)),
      selectable: callOrReturn(getExtensionField(extension2, "selectable", context)),
      draggable: callOrReturn(getExtensionField(extension2, "draggable", context)),
      code: callOrReturn(getExtensionField(extension2, "code", context)),
      defining: callOrReturn(getExtensionField(extension2, "defining", context)),
      isolating: callOrReturn(getExtensionField(extension2, "isolating", context)),
      attrs: Object.fromEntries(extensionAttributes.map((extensionAttribute) => {
        var _a2;
        return [extensionAttribute.name, { default: (_a2 = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a2 === void 0 ? void 0 : _a2.default }];
      }))
    });
    const parseHTML = callOrReturn(getExtensionField(extension2, "parseHTML", context));
    if (parseHTML) {
      schema.parseDOM = parseHTML.map((parseRule) => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
    }
    const renderHTML = getExtensionField(extension2, "renderHTML", context);
    if (renderHTML) {
      schema.toDOM = (node4) => renderHTML({
        node: node4,
        HTMLAttributes: getRenderedAttributes(node4, extensionAttributes)
      });
    }
    const renderText = getExtensionField(extension2, "renderText", context);
    if (renderText) {
      schema.toText = renderText;
    }
    return [extension2.name, schema];
  }));
  const marks = Object.fromEntries(markExtensions.map((extension2) => {
    const extensionAttributes = allAttributes.filter((attribute) => attribute.type === extension2.name);
    const context = {
      name: extension2.name,
      options: extension2.options,
      storage: extension2.storage,
      editor
    };
    const extraMarkFields = extensions2.reduce((fields, e) => {
      const extendMarkSchema = getExtensionField(e, "extendMarkSchema", context);
      return {
        ...fields,
        ...extendMarkSchema ? extendMarkSchema(extension2) : {}
      };
    }, {});
    const schema = cleanUpSchemaItem({
      ...extraMarkFields,
      inclusive: callOrReturn(getExtensionField(extension2, "inclusive", context)),
      excludes: callOrReturn(getExtensionField(extension2, "excludes", context)),
      group: callOrReturn(getExtensionField(extension2, "group", context)),
      spanning: callOrReturn(getExtensionField(extension2, "spanning", context)),
      code: callOrReturn(getExtensionField(extension2, "code", context)),
      attrs: Object.fromEntries(extensionAttributes.map((extensionAttribute) => {
        var _a2;
        return [extensionAttribute.name, { default: (_a2 = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a2 === void 0 ? void 0 : _a2.default }];
      }))
    });
    const parseHTML = callOrReturn(getExtensionField(extension2, "parseHTML", context));
    if (parseHTML) {
      schema.parseDOM = parseHTML.map((parseRule) => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
    }
    const renderHTML = getExtensionField(extension2, "renderHTML", context);
    if (renderHTML) {
      schema.toDOM = (mark2) => renderHTML({
        mark: mark2,
        HTMLAttributes: getRenderedAttributes(mark2, extensionAttributes)
      });
    }
    return [extension2.name, schema];
  }));
  return new Schema({
    topNode,
    nodes,
    marks
  });
}
function getSchemaTypeByName(name, schema) {
  return schema.nodes[name] || schema.marks[name] || null;
}
function isExtensionRulesEnabled(extension2, enabled) {
  if (Array.isArray(enabled)) {
    return enabled.some((enabledExtension) => {
      const name = typeof enabledExtension === "string" ? enabledExtension : enabledExtension.name;
      return name === extension2.name;
    });
  }
  return enabled;
}
var getTextContentFromNodes = ($from, maxMatch = 500) => {
  let textBefore = "";
  const sliceEndPos = $from.parentOffset;
  $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node4, pos, parent, index7) => {
    var _a, _b;
    const chunk = ((_b = (_a = node4.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {
      node: node4,
      pos,
      parent,
      index: index7
    })) || node4.textContent || "%leaf%";
    textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));
  });
  return textBefore;
};
function isRegExp(value) {
  return Object.prototype.toString.call(value) === "[object RegExp]";
}
var InputRule = class {
  constructor(config) {
    this.find = config.find;
    this.handler = config.handler;
  }
};
var inputRuleMatcherHandler = (text10, find5) => {
  if (isRegExp(find5)) {
    return find5.exec(text10);
  }
  const inputRuleMatch = find5(text10);
  if (!inputRuleMatch) {
    return null;
  }
  const result = [inputRuleMatch.text];
  result.index = inputRuleMatch.index;
  result.input = text10;
  result.data = inputRuleMatch.data;
  if (inputRuleMatch.replaceWith) {
    if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {
      console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".');
    }
    result.push(inputRuleMatch.replaceWith);
  }
  return result;
};
function run$1(config) {
  var _a;
  const { editor, from: from5, to: to3, text: text10, rules, plugin } = config;
  const { view } = editor;
  if (view.composing) {
    return false;
  }
  const $from = view.state.doc.resolve(from5);
  if (
    // check for code node
    $from.parent.type.spec.code || !!((_a = $from.nodeBefore || $from.nodeAfter) === null || _a === void 0 ? void 0 : _a.marks.find((mark2) => mark2.type.spec.code))
  ) {
    return false;
  }
  let matched = false;
  const textBefore = getTextContentFromNodes($from) + text10;
  rules.forEach((rule) => {
    if (matched) {
      return;
    }
    const match2 = inputRuleMatcherHandler(textBefore, rule.find);
    if (!match2) {
      return;
    }
    const tr4 = view.state.tr;
    const state = createChainableState({
      state: view.state,
      transaction: tr4
    });
    const range2 = {
      from: from5 - (match2[0].length - text10.length),
      to: to3
    };
    const { commands: commands2, chain: chain2, can } = new CommandManager({
      editor,
      state
    });
    const handler = rule.handler({
      state,
      range: range2,
      match: match2,
      commands: commands2,
      chain: chain2,
      can
    });
    if (handler === null || !tr4.steps.length) {
      return;
    }
    tr4.setMeta(plugin, {
      transform: tr4,
      from: from5,
      to: to3,
      text: text10
    });
    view.dispatch(tr4);
    matched = true;
  });
  return matched;
}
function inputRulesPlugin(props) {
  const { editor, rules } = props;
  const plugin = new Plugin({
    state: {
      init() {
        return null;
      },
      apply(tr4, prev2) {
        const stored = tr4.getMeta(plugin);
        if (stored) {
          return stored;
        }
        return tr4.selectionSet || tr4.docChanged ? null : prev2;
      }
    },
    props: {
      handleTextInput(view, from5, to3, text10) {
        return run$1({
          editor,
          from: from5,
          to: to3,
          text: text10,
          rules,
          plugin
        });
      },
      handleDOMEvents: {
        compositionend: (view) => {
          setTimeout(() => {
            const { $cursor } = view.state.selection;
            if ($cursor) {
              run$1({
                editor,
                from: $cursor.pos,
                to: $cursor.pos,
                text: "",
                rules,
                plugin
              });
            }
          });
          return false;
        }
      },
      // add support for input rules to trigger on enter
      // this is useful for example for code blocks
      handleKeyDown(view, event) {
        if (event.key !== "Enter") {
          return false;
        }
        const { $cursor } = view.state.selection;
        if ($cursor) {
          return run$1({
            editor,
            from: $cursor.pos,
            to: $cursor.pos,
            text: "\n",
            rules,
            plugin
          });
        }
        return false;
      }
    },
    // @ts-ignore
    isInputRules: true
  });
  return plugin;
}
function isNumber(value) {
  return typeof value === "number";
}
var PasteRule = class {
  constructor(config) {
    this.find = config.find;
    this.handler = config.handler;
  }
};
var pasteRuleMatcherHandler = (text10, find5) => {
  if (isRegExp(find5)) {
    return [...text10.matchAll(find5)];
  }
  const matches3 = find5(text10);
  if (!matches3) {
    return [];
  }
  return matches3.map((pasteRuleMatch) => {
    const result = [pasteRuleMatch.text];
    result.index = pasteRuleMatch.index;
    result.input = text10;
    result.data = pasteRuleMatch.data;
    if (pasteRuleMatch.replaceWith) {
      if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {
        console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".');
      }
      result.push(pasteRuleMatch.replaceWith);
    }
    return result;
  });
};
function run(config) {
  const { editor, state, from: from5, to: to3, rule } = config;
  const { commands: commands2, chain: chain2, can } = new CommandManager({
    editor,
    state
  });
  const handlers4 = [];
  state.doc.nodesBetween(from5, to3, (node4, pos) => {
    if (!node4.isTextblock || node4.type.spec.code) {
      return;
    }
    const resolvedFrom = Math.max(from5, pos);
    const resolvedTo = Math.min(to3, pos + node4.content.size);
    const textToMatch = node4.textBetween(resolvedFrom - pos, resolvedTo - pos, void 0, "￼");
    const matches3 = pasteRuleMatcherHandler(textToMatch, rule.find);
    matches3.forEach((match2) => {
      if (match2.index === void 0) {
        return;
      }
      const start2 = resolvedFrom + match2.index + 1;
      const end2 = start2 + match2[0].length;
      const range2 = {
        from: state.tr.mapping.map(start2),
        to: state.tr.mapping.map(end2)
      };
      const handler = rule.handler({
        state,
        range: range2,
        match: match2,
        commands: commands2,
        chain: chain2,
        can
      });
      handlers4.push(handler);
    });
  });
  const success = handlers4.every((handler) => handler !== null);
  return success;
}
function pasteRulesPlugin(props) {
  const { editor, rules } = props;
  let dragSourceElement = null;
  let isPastedFromProseMirror = false;
  let isDroppedFromProseMirror = false;
  const plugins = rules.map((rule) => {
    return new Plugin({
      // we register a global drag handler to track the current drag source element
      view(view) {
        const handleDragstart = (event) => {
          var _a;
          dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target)) ? view.dom.parentElement : null;
        };
        window.addEventListener("dragstart", handleDragstart);
        return {
          destroy() {
            window.removeEventListener("dragstart", handleDragstart);
          }
        };
      },
      props: {
        handleDOMEvents: {
          drop: (view) => {
            isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;
            return false;
          },
          paste: (view, event) => {
            var _a;
            const html7 = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData("text/html");
            isPastedFromProseMirror = !!(html7 === null || html7 === void 0 ? void 0 : html7.includes("data-pm-slice"));
            return false;
          }
        }
      },
      appendTransaction: (transactions, oldState, state) => {
        const transaction = transactions[0];
        const isPaste = transaction.getMeta("uiEvent") === "paste" && !isPastedFromProseMirror;
        const isDrop = transaction.getMeta("uiEvent") === "drop" && !isDroppedFromProseMirror;
        if (!isPaste && !isDrop) {
          return;
        }
        const from5 = oldState.doc.content.findDiffStart(state.doc.content);
        const to3 = oldState.doc.content.findDiffEnd(state.doc.content);
        if (!isNumber(from5) || !to3 || from5 === to3.b) {
          return;
        }
        const tr4 = state.tr;
        const chainableState = createChainableState({
          state,
          transaction: tr4
        });
        const handler = run({
          editor,
          state: chainableState,
          from: Math.max(from5 - 1, 0),
          to: to3.b - 1,
          rule
        });
        if (!handler || !tr4.steps.length) {
          return;
        }
        return tr4;
      }
    });
  });
  return plugins;
}
function findDuplicates(items) {
  const filtered = items.filter((el, index7) => items.indexOf(el) !== index7);
  return [...new Set(filtered)];
}
var ExtensionManager = class {
  constructor(extensions2, editor) {
    this.splittableMarks = [];
    this.editor = editor;
    this.extensions = ExtensionManager.resolve(extensions2);
    this.schema = getSchemaByResolvedExtensions(this.extensions, editor);
    this.extensions.forEach((extension2) => {
      var _a;
      this.editor.extensionStorage[extension2.name] = extension2.storage;
      const context = {
        name: extension2.name,
        options: extension2.options,
        storage: extension2.storage,
        editor: this.editor,
        type: getSchemaTypeByName(extension2.name, this.schema)
      };
      if (extension2.type === "mark") {
        const keepOnSplit = (_a = callOrReturn(getExtensionField(extension2, "keepOnSplit", context))) !== null && _a !== void 0 ? _a : true;
        if (keepOnSplit) {
          this.splittableMarks.push(extension2.name);
        }
      }
      const onBeforeCreate = getExtensionField(extension2, "onBeforeCreate", context);
      if (onBeforeCreate) {
        this.editor.on("beforeCreate", onBeforeCreate);
      }
      const onCreate2 = getExtensionField(extension2, "onCreate", context);
      if (onCreate2) {
        this.editor.on("create", onCreate2);
      }
      const onUpdate = getExtensionField(extension2, "onUpdate", context);
      if (onUpdate) {
        this.editor.on("update", onUpdate);
      }
      const onSelectionUpdate = getExtensionField(extension2, "onSelectionUpdate", context);
      if (onSelectionUpdate) {
        this.editor.on("selectionUpdate", onSelectionUpdate);
      }
      const onTransaction = getExtensionField(extension2, "onTransaction", context);
      if (onTransaction) {
        this.editor.on("transaction", onTransaction);
      }
      const onFocus = getExtensionField(extension2, "onFocus", context);
      if (onFocus) {
        this.editor.on("focus", onFocus);
      }
      const onBlur = getExtensionField(extension2, "onBlur", context);
      if (onBlur) {
        this.editor.on("blur", onBlur);
      }
      const onDestroy2 = getExtensionField(extension2, "onDestroy", context);
      if (onDestroy2) {
        this.editor.on("destroy", onDestroy2);
      }
    });
  }
  static resolve(extensions2) {
    const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions2));
    const duplicatedNames = findDuplicates(resolvedExtensions.map((extension2) => extension2.name));
    if (duplicatedNames.length) {
      console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames.map((item) => `'${item}'`).join(", ")}]. This can lead to issues.`);
    }
    return resolvedExtensions;
  }
  static flatten(extensions2) {
    return extensions2.map((extension2) => {
      const context = {
        name: extension2.name,
        options: extension2.options,
        storage: extension2.storage
      };
      const addExtensions = getExtensionField(extension2, "addExtensions", context);
      if (addExtensions) {
        return [extension2, ...this.flatten(addExtensions())];
      }
      return extension2;
    }).flat(10);
  }
  static sort(extensions2) {
    const defaultPriority = 100;
    return extensions2.sort((a2, b2) => {
      const priorityA = getExtensionField(a2, "priority") || defaultPriority;
      const priorityB = getExtensionField(b2, "priority") || defaultPriority;
      if (priorityA > priorityB) {
        return -1;
      }
      if (priorityA < priorityB) {
        return 1;
      }
      return 0;
    });
  }
  get commands() {
    return this.extensions.reduce((commands2, extension2) => {
      const context = {
        name: extension2.name,
        options: extension2.options,
        storage: extension2.storage,
        editor: this.editor,
        type: getSchemaTypeByName(extension2.name, this.schema)
      };
      const addCommands = getExtensionField(extension2, "addCommands", context);
      if (!addCommands) {
        return commands2;
      }
      return {
        ...commands2,
        ...addCommands()
      };
    }, {});
  }
  get plugins() {
    const { editor } = this;
    const extensions2 = ExtensionManager.sort([...this.extensions].reverse());
    const inputRules = [];
    const pasteRules = [];
    const allPlugins = extensions2.map((extension2) => {
      const context = {
        name: extension2.name,
        options: extension2.options,
        storage: extension2.storage,
        editor,
        type: getSchemaTypeByName(extension2.name, this.schema)
      };
      const plugins = [];
      const addKeyboardShortcuts = getExtensionField(extension2, "addKeyboardShortcuts", context);
      let defaultBindings = {};
      if (extension2.type === "mark" && extension2.config.exitable) {
        defaultBindings.ArrowRight = () => Mark2.handleExit({ editor, mark: extension2 });
      }
      if (addKeyboardShortcuts) {
        const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {
          return [shortcut, () => method({ editor })];
        }));
        defaultBindings = { ...defaultBindings, ...bindings };
      }
      const keyMapPlugin = keymap(defaultBindings);
      plugins.push(keyMapPlugin);
      const addInputRules = getExtensionField(extension2, "addInputRules", context);
      if (isExtensionRulesEnabled(extension2, editor.options.enableInputRules) && addInputRules) {
        inputRules.push(...addInputRules());
      }
      const addPasteRules = getExtensionField(extension2, "addPasteRules", context);
      if (isExtensionRulesEnabled(extension2, editor.options.enablePasteRules) && addPasteRules) {
        pasteRules.push(...addPasteRules());
      }
      const addProseMirrorPlugins = getExtensionField(extension2, "addProseMirrorPlugins", context);
      if (addProseMirrorPlugins) {
        const proseMirrorPlugins = addProseMirrorPlugins();
        plugins.push(...proseMirrorPlugins);
      }
      return plugins;
    }).flat();
    return [
      inputRulesPlugin({
        editor,
        rules: inputRules
      }),
      ...pasteRulesPlugin({
        editor,
        rules: pasteRules
      }),
      ...allPlugins
    ];
  }
  get attributes() {
    return getAttributesFromExtensions(this.extensions);
  }
  get nodeViews() {
    const { editor } = this;
    const { nodeExtensions } = splitExtensions(this.extensions);
    return Object.fromEntries(nodeExtensions.filter((extension2) => !!getExtensionField(extension2, "addNodeView")).map((extension2) => {
      const extensionAttributes = this.attributes.filter((attribute) => attribute.type === extension2.name);
      const context = {
        name: extension2.name,
        options: extension2.options,
        storage: extension2.storage,
        editor,
        type: getNodeType(extension2.name, this.schema)
      };
      const addNodeView = getExtensionField(extension2, "addNodeView", context);
      if (!addNodeView) {
        return [];
      }
      const nodeview = (node4, view, getPos, decorations) => {
        const HTMLAttributes = getRenderedAttributes(node4, extensionAttributes);
        return addNodeView()({
          editor,
          node: node4,
          getPos,
          decorations,
          HTMLAttributes,
          extension: extension2
        });
      };
      return [extension2.name, nodeview];
    }));
  }
};
function getType(value) {
  return Object.prototype.toString.call(value).slice(8, -1);
}
function isPlainObject(value) {
  if (getType(value) !== "Object") {
    return false;
  }
  return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;
}
function mergeDeep(target, source2) {
  const output = { ...target };
  if (isPlainObject(target) && isPlainObject(source2)) {
    Object.keys(source2).forEach((key2) => {
      if (isPlainObject(source2[key2])) {
        if (!(key2 in target)) {
          Object.assign(output, { [key2]: source2[key2] });
        } else {
          output[key2] = mergeDeep(target[key2], source2[key2]);
        }
      } else {
        Object.assign(output, { [key2]: source2[key2] });
      }
    });
  }
  return output;
}
var Extension = class {
  constructor(config = {}) {
    this.type = "extension";
    this.name = "extension";
    this.parent = null;
    this.child = null;
    this.config = {
      name: this.name,
      defaultOptions: {}
    };
    this.config = {
      ...this.config,
      ...config
    };
    this.name = this.config.name;
    if (config.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
    }
    this.options = this.config.defaultOptions;
    if (this.config.addOptions) {
      this.options = callOrReturn(getExtensionField(this, "addOptions", {
        name: this.name
      }));
    }
    this.storage = callOrReturn(getExtensionField(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(config = {}) {
    return new Extension(config);
  }
  configure(options2 = {}) {
    const extension2 = this.extend();
    extension2.options = mergeDeep(this.options, options2);
    extension2.storage = callOrReturn(getExtensionField(extension2, "addStorage", {
      name: extension2.name,
      options: extension2.options
    }));
    return extension2;
  }
  extend(extendedConfig = {}) {
    const extension2 = new Extension(extendedConfig);
    extension2.parent = this;
    this.child = extension2;
    extension2.name = extendedConfig.name ? extendedConfig.name : extension2.parent.name;
    if (extendedConfig.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension2.name}".`);
    }
    extension2.options = callOrReturn(getExtensionField(extension2, "addOptions", {
      name: extension2.name
    }));
    extension2.storage = callOrReturn(getExtensionField(extension2, "addStorage", {
      name: extension2.name,
      options: extension2.options
    }));
    return extension2;
  }
};
function getTextBetween(startNode, range2, options2) {
  const { from: from5, to: to3 } = range2;
  const { blockSeparator = "\n\n", textSerializers = {} } = options2 || {};
  let text10 = "";
  let separated = true;
  startNode.nodesBetween(from5, to3, (node4, pos, parent, index7) => {
    var _a;
    const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node4.type.name];
    if (textSerializer) {
      if (node4.isBlock && !separated) {
        text10 += blockSeparator;
        separated = true;
      }
      if (parent) {
        text10 += textSerializer({
          node: node4,
          pos,
          parent,
          index: index7,
          range: range2
        });
      }
    } else if (node4.isText) {
      text10 += (_a = node4 === null || node4 === void 0 ? void 0 : node4.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from5, pos) - pos, to3 - pos);
      separated = false;
    } else if (node4.isBlock && !separated) {
      text10 += blockSeparator;
      separated = true;
    }
  });
  return text10;
}
function getTextSerializersFromSchema(schema) {
  return Object.fromEntries(Object.entries(schema.nodes).filter(([, node4]) => node4.spec.toText).map(([name, node4]) => [name, node4.spec.toText]));
}
var ClipboardTextSerializer = Extension.create({
  name: "clipboardTextSerializer",
  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("clipboardTextSerializer"),
        props: {
          clipboardTextSerializer: () => {
            const { editor } = this;
            const { state, schema } = editor;
            const { doc: doc4, selection } = state;
            const { ranges } = selection;
            const from5 = Math.min(...ranges.map((range3) => range3.$from.pos));
            const to3 = Math.max(...ranges.map((range3) => range3.$to.pos));
            const textSerializers = getTextSerializersFromSchema(schema);
            const range2 = { from: from5, to: to3 };
            return getTextBetween(doc4, range2, {
              textSerializers
            });
          }
        }
      })
    ];
  }
});
var blur = () => ({ editor, view }) => {
  requestAnimationFrame(() => {
    var _a;
    if (!editor.isDestroyed) {
      view.dom.blur();
      (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
    }
  });
  return true;
};
var clearContent = (emitUpdate = false) => ({ commands: commands2 }) => {
  return commands2.setContent("", emitUpdate);
};
var clearNodes = () => ({ state, tr: tr4, dispatch }) => {
  const { selection } = tr4;
  const { ranges } = selection;
  if (!dispatch) {
    return true;
  }
  ranges.forEach(({ $from, $to }) => {
    state.doc.nodesBetween($from.pos, $to.pos, (node4, pos) => {
      if (node4.type.isText) {
        return;
      }
      const { doc: doc4, mapping } = tr4;
      const $mappedFrom = doc4.resolve(mapping.map(pos));
      const $mappedTo = doc4.resolve(mapping.map(pos + node4.nodeSize));
      const nodeRange = $mappedFrom.blockRange($mappedTo);
      if (!nodeRange) {
        return;
      }
      const targetLiftDepth = liftTarget(nodeRange);
      if (node4.type.isTextblock) {
        const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());
        tr4.setNodeMarkup(nodeRange.start, defaultType);
      }
      if (targetLiftDepth || targetLiftDepth === 0) {
        tr4.lift(nodeRange, targetLiftDepth);
      }
    });
  });
  return true;
};
var command = (fn3) => (props) => {
  return fn3(props);
};
var createParagraphNear2 = () => ({ state, dispatch }) => {
  return createParagraphNear(state, dispatch);
};
var deleteCurrentNode = () => ({ tr: tr4, dispatch }) => {
  const { selection } = tr4;
  const currentNode = selection.$anchor.node();
  if (currentNode.content.size > 0) {
    return false;
  }
  const $pos = tr4.selection.$anchor;
  for (let depth = $pos.depth; depth > 0; depth -= 1) {
    const node4 = $pos.node(depth);
    if (node4.type === currentNode.type) {
      if (dispatch) {
        const from5 = $pos.before(depth);
        const to3 = $pos.after(depth);
        tr4.delete(from5, to3).scrollIntoView();
      }
      return true;
    }
  }
  return false;
};
var deleteNode = (typeOrName) => ({ tr: tr4, state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  const $pos = tr4.selection.$anchor;
  for (let depth = $pos.depth; depth > 0; depth -= 1) {
    const node4 = $pos.node(depth);
    if (node4.type === type) {
      if (dispatch) {
        const from5 = $pos.before(depth);
        const to3 = $pos.after(depth);
        tr4.delete(from5, to3).scrollIntoView();
      }
      return true;
    }
  }
  return false;
};
var deleteRange2 = (range2) => ({ tr: tr4, dispatch }) => {
  const { from: from5, to: to3 } = range2;
  if (dispatch) {
    tr4.delete(from5, to3);
  }
  return true;
};
var deleteSelection2 = () => ({ state, dispatch }) => {
  return deleteSelection(state, dispatch);
};
var enter = () => ({ commands: commands2 }) => {
  return commands2.keyboardShortcut("Enter");
};
var exitCode2 = () => ({ state, dispatch }) => {
  return exitCode(state, dispatch);
};
function objectIncludes(object1, object2, options2 = { strict: true }) {
  const keys5 = Object.keys(object2);
  if (!keys5.length) {
    return true;
  }
  return keys5.every((key2) => {
    if (options2.strict) {
      return object2[key2] === object1[key2];
    }
    if (isRegExp(object2[key2])) {
      return object2[key2].test(object1[key2]);
    }
    return object2[key2] === object1[key2];
  });
}
function findMarkInSet(marks, type, attributes = {}) {
  return marks.find((item) => {
    return item.type === type && objectIncludes(item.attrs, attributes);
  });
}
function isMarkInSet(marks, type, attributes = {}) {
  return !!findMarkInSet(marks, type, attributes);
}
function getMarkRange($pos, type, attributes = {}) {
  if (!$pos || !type) {
    return;
  }
  let start2 = $pos.parent.childAfter($pos.parentOffset);
  if ($pos.parentOffset === start2.offset && start2.offset !== 0) {
    start2 = $pos.parent.childBefore($pos.parentOffset);
  }
  if (!start2.node) {
    return;
  }
  const mark2 = findMarkInSet([...start2.node.marks], type, attributes);
  if (!mark2) {
    return;
  }
  let startIndex = start2.index;
  let startPos = $pos.start() + start2.offset;
  let endIndex = startIndex + 1;
  let endPos = startPos + start2.node.nodeSize;
  findMarkInSet([...start2.node.marks], type, attributes);
  while (startIndex > 0 && mark2.isInSet($pos.parent.child(startIndex - 1).marks)) {
    startIndex -= 1;
    startPos -= $pos.parent.child(startIndex).nodeSize;
  }
  while (endIndex < $pos.parent.childCount && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {
    endPos += $pos.parent.child(endIndex).nodeSize;
    endIndex += 1;
  }
  return {
    from: startPos,
    to: endPos
  };
}
function getMarkType(nameOrType, schema) {
  if (typeof nameOrType === "string") {
    if (!schema.marks[nameOrType]) {
      throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);
    }
    return schema.marks[nameOrType];
  }
  return nameOrType;
}
var extendMarkRange = (typeOrName, attributes = {}) => ({ tr: tr4, state, dispatch }) => {
  const type = getMarkType(typeOrName, state.schema);
  const { doc: doc4, selection } = tr4;
  const { $from, from: from5, to: to3 } = selection;
  if (dispatch) {
    const range2 = getMarkRange($from, type, attributes);
    if (range2 && range2.from <= from5 && range2.to >= to3) {
      const newSelection = TextSelection.create(doc4, range2.from, range2.to);
      tr4.setSelection(newSelection);
    }
  }
  return true;
};
var first = (commands2) => (props) => {
  const items = typeof commands2 === "function" ? commands2(props) : commands2;
  for (let i = 0; i < items.length; i += 1) {
    if (items[i](props)) {
      return true;
    }
  }
  return false;
};
function isTextSelection(value) {
  return value instanceof TextSelection;
}
function minMax(value = 0, min5 = 0, max5 = 0) {
  return Math.min(Math.max(value, min5), max5);
}
function resolveFocusPosition(doc4, position5 = null) {
  if (!position5) {
    return null;
  }
  const selectionAtStart = Selection.atStart(doc4);
  const selectionAtEnd = Selection.atEnd(doc4);
  if (position5 === "start" || position5 === true) {
    return selectionAtStart;
  }
  if (position5 === "end") {
    return selectionAtEnd;
  }
  const minPos = selectionAtStart.from;
  const maxPos = selectionAtEnd.to;
  if (position5 === "all") {
    return TextSelection.create(doc4, minMax(0, minPos, maxPos), minMax(doc4.content.size, minPos, maxPos));
  }
  return TextSelection.create(doc4, minMax(position5, minPos, maxPos), minMax(position5, minPos, maxPos));
}
function isiOS() {
  return [
    "iPad Simulator",
    "iPhone Simulator",
    "iPod Simulator",
    "iPad",
    "iPhone",
    "iPod"
  ].includes(navigator.platform) || navigator.userAgent.includes("Mac") && "ontouchend" in document;
}
var focus = (position5 = null, options2 = {}) => ({ editor, view, tr: tr4, dispatch }) => {
  options2 = {
    scrollIntoView: true,
    ...options2
  };
  const delayedFocus = () => {
    if (isiOS()) {
      view.dom.focus();
    }
    requestAnimationFrame(() => {
      if (!editor.isDestroyed) {
        view.focus();
        if (options2 === null || options2 === void 0 ? void 0 : options2.scrollIntoView) {
          editor.commands.scrollIntoView();
        }
      }
    });
  };
  if (view.hasFocus() && position5 === null || position5 === false) {
    return true;
  }
  if (dispatch && position5 === null && !isTextSelection(editor.state.selection)) {
    delayedFocus();
    return true;
  }
  const selection = resolveFocusPosition(tr4.doc, position5) || editor.state.selection;
  const isSameSelection = editor.state.selection.eq(selection);
  if (dispatch) {
    if (!isSameSelection) {
      tr4.setSelection(selection);
    }
    if (isSameSelection && tr4.storedMarks) {
      tr4.setStoredMarks(tr4.storedMarks);
    }
    delayedFocus();
  }
  return true;
};
var forEach = (items, fn3) => (props) => {
  return items.every((item, index7) => fn3(item, { ...props, index: index7 }));
};
var insertContent = (value, options2) => ({ tr: tr4, commands: commands2 }) => {
  return commands2.insertContentAt({ from: tr4.selection.from, to: tr4.selection.to }, value, options2);
};
function elementFromString(value) {
  const wrappedValue = `<body>${value}</body>`;
  return new window.DOMParser().parseFromString(wrappedValue, "text/html").body;
}
function createNodeFromContent(content5, schema, options2) {
  options2 = {
    slice: true,
    parseOptions: {},
    ...options2
  };
  if (typeof content5 === "object" && content5 !== null) {
    try {
      if (Array.isArray(content5) && content5.length > 0) {
        return Fragment.fromArray(content5.map((item) => schema.nodeFromJSON(item)));
      }
      return schema.nodeFromJSON(content5);
    } catch (error) {
      console.warn("[tiptap warn]: Invalid content.", "Passed value:", content5, "Error:", error);
      return createNodeFromContent("", schema, options2);
    }
  }
  if (typeof content5 === "string") {
    const parser = DOMParser2.fromSchema(schema);
    return options2.slice ? parser.parseSlice(elementFromString(content5), options2.parseOptions).content : parser.parse(elementFromString(content5), options2.parseOptions);
  }
  return createNodeFromContent("", schema, options2);
}
function selectionToInsertionEnd2(tr4, startLen, bias) {
  const last2 = tr4.steps.length - 1;
  if (last2 < startLen) {
    return;
  }
  const step = tr4.steps[last2];
  if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {
    return;
  }
  const map6 = tr4.mapping.maps[last2];
  let end2 = 0;
  map6.forEach((_from, _to, _newFrom, newTo) => {
    if (end2 === 0) {
      end2 = newTo;
    }
  });
  tr4.setSelection(Selection.near(tr4.doc.resolve(end2), bias));
}
var isFragment = (nodeOrFragment) => {
  return nodeOrFragment.toString().startsWith("<");
};
var insertContentAt = (position5, value, options2) => ({ tr: tr4, dispatch, editor }) => {
  if (dispatch) {
    options2 = {
      parseOptions: {},
      updateSelection: true,
      ...options2
    };
    const content5 = createNodeFromContent(value, editor.schema, {
      parseOptions: {
        preserveWhitespace: "full",
        ...options2.parseOptions
      }
    });
    if (content5.toString() === "<>") {
      return true;
    }
    let { from: from5, to: to3 } = typeof position5 === "number" ? { from: position5, to: position5 } : position5;
    let isOnlyTextContent = true;
    let isOnlyBlockContent = true;
    const nodes = isFragment(content5) ? content5 : [content5];
    nodes.forEach((node4) => {
      node4.check();
      isOnlyTextContent = isOnlyTextContent ? node4.isText && node4.marks.length === 0 : false;
      isOnlyBlockContent = isOnlyBlockContent ? node4.isBlock : false;
    });
    if (from5 === to3 && isOnlyBlockContent) {
      const { parent } = tr4.doc.resolve(from5);
      const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;
      if (isEmptyTextBlock) {
        from5 -= 1;
        to3 += 1;
      }
    }
    if (isOnlyTextContent) {
      if (Array.isArray(value)) {
        tr4.insertText(value.map((v) => v.text || "").join(""), from5, to3);
      } else if (typeof value === "object" && !!value && !!value.text) {
        tr4.insertText(value.text, from5, to3);
      } else {
        tr4.insertText(value, from5, to3);
      }
    } else {
      tr4.replaceWith(from5, to3, content5);
    }
    if (options2.updateSelection) {
      selectionToInsertionEnd2(tr4, tr4.steps.length - 1, -1);
    }
  }
  return true;
};
var joinUp2 = () => ({ state, dispatch }) => {
  return joinUp(state, dispatch);
};
var joinDown2 = () => ({ state, dispatch }) => {
  return joinDown(state, dispatch);
};
var joinBackward2 = () => ({ state, dispatch }) => {
  return joinBackward(state, dispatch);
};
var joinForward2 = () => ({ state, dispatch }) => {
  return joinForward(state, dispatch);
};
function isMacOS() {
  return typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
}
function normalizeKeyName2(name) {
  const parts = name.split(/-(?!$)/);
  let result = parts[parts.length - 1];
  if (result === "Space") {
    result = " ";
  }
  let alt;
  let ctrl;
  let shift3;
  let meta2;
  for (let i = 0; i < parts.length - 1; i += 1) {
    const mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod)) {
      meta2 = true;
    } else if (/^a(lt)?$/i.test(mod)) {
      alt = true;
    } else if (/^(c|ctrl|control)$/i.test(mod)) {
      ctrl = true;
    } else if (/^s(hift)?$/i.test(mod)) {
      shift3 = true;
    } else if (/^mod$/i.test(mod)) {
      if (isiOS() || isMacOS()) {
        meta2 = true;
      } else {
        ctrl = true;
      }
    } else {
      throw new Error(`Unrecognized modifier name: ${mod}`);
    }
  }
  if (alt) {
    result = `Alt-${result}`;
  }
  if (ctrl) {
    result = `Ctrl-${result}`;
  }
  if (meta2) {
    result = `Meta-${result}`;
  }
  if (shift3) {
    result = `Shift-${result}`;
  }
  return result;
}
var keyboardShortcut = (name) => ({ editor, view, tr: tr4, dispatch }) => {
  const keys5 = normalizeKeyName2(name).split(/-(?!$)/);
  const key2 = keys5.find((item) => !["Alt", "Ctrl", "Meta", "Shift"].includes(item));
  const event = new KeyboardEvent("keydown", {
    key: key2 === "Space" ? " " : key2,
    altKey: keys5.includes("Alt"),
    ctrlKey: keys5.includes("Ctrl"),
    metaKey: keys5.includes("Meta"),
    shiftKey: keys5.includes("Shift"),
    bubbles: true,
    cancelable: true
  });
  const capturedTransaction = editor.captureTransaction(() => {
    view.someProp("handleKeyDown", (f2) => f2(view, event));
  });
  capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach((step) => {
    const newStep = step.map(tr4.mapping);
    if (newStep && dispatch) {
      tr4.maybeStep(newStep);
    }
  });
  return true;
};
function isNodeActive(state, typeOrName, attributes = {}) {
  const { from: from5, to: to3, empty: empty2 } = state.selection;
  const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;
  const nodeRanges = [];
  state.doc.nodesBetween(from5, to3, (node4, pos) => {
    if (node4.isText) {
      return;
    }
    const relativeFrom = Math.max(from5, pos);
    const relativeTo = Math.min(to3, pos + node4.nodeSize);
    nodeRanges.push({
      node: node4,
      from: relativeFrom,
      to: relativeTo
    });
  });
  const selectionRange = to3 - from5;
  const matchedNodeRanges = nodeRanges.filter((nodeRange) => {
    if (!type) {
      return true;
    }
    return type.name === nodeRange.node.type.name;
  }).filter((nodeRange) => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }));
  if (empty2) {
    return !!matchedNodeRanges.length;
  }
  const range2 = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);
  return range2 >= selectionRange;
}
var lift3 = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  const isActive2 = isNodeActive(state, type, attributes);
  if (!isActive2) {
    return false;
  }
  return lift2(state, dispatch);
};
var liftEmptyBlock2 = () => ({ state, dispatch }) => {
  return liftEmptyBlock(state, dispatch);
};
var liftListItem2 = (typeOrName) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  return liftListItem(type)(state, dispatch);
};
var newlineInCode2 = () => ({ state, dispatch }) => {
  return newlineInCode(state, dispatch);
};
function getSchemaTypeNameByName(name, schema) {
  if (schema.nodes[name]) {
    return "node";
  }
  if (schema.marks[name]) {
    return "mark";
  }
  return null;
}
function deleteProps(obj, propOrProps) {
  const props = typeof propOrProps === "string" ? [propOrProps] : propOrProps;
  return Object.keys(obj).reduce((newObj, prop) => {
    if (!props.includes(prop)) {
      newObj[prop] = obj[prop];
    }
    return newObj;
  }, {});
}
var resetAttributes = (typeOrName, attributes) => ({ tr: tr4, state, dispatch }) => {
  let nodeType = null;
  let markType = null;
  const schemaType = getSchemaTypeNameByName(typeof typeOrName === "string" ? typeOrName : typeOrName.name, state.schema);
  if (!schemaType) {
    return false;
  }
  if (schemaType === "node") {
    nodeType = getNodeType(typeOrName, state.schema);
  }
  if (schemaType === "mark") {
    markType = getMarkType(typeOrName, state.schema);
  }
  if (dispatch) {
    tr4.selection.ranges.forEach((range2) => {
      state.doc.nodesBetween(range2.$from.pos, range2.$to.pos, (node4, pos) => {
        if (nodeType && nodeType === node4.type) {
          tr4.setNodeMarkup(pos, void 0, deleteProps(node4.attrs, attributes));
        }
        if (markType && node4.marks.length) {
          node4.marks.forEach((mark2) => {
            if (markType === mark2.type) {
              tr4.addMark(pos, pos + node4.nodeSize, markType.create(deleteProps(mark2.attrs, attributes)));
            }
          });
        }
      });
    });
  }
  return true;
};
var scrollIntoView = () => ({ tr: tr4, dispatch }) => {
  if (dispatch) {
    tr4.scrollIntoView();
  }
  return true;
};
var selectAll2 = () => ({ tr: tr4, commands: commands2 }) => {
  return commands2.setTextSelection({
    from: 0,
    to: tr4.doc.content.size
  });
};
var selectNodeBackward2 = () => ({ state, dispatch }) => {
  return selectNodeBackward(state, dispatch);
};
var selectNodeForward2 = () => ({ state, dispatch }) => {
  return selectNodeForward(state, dispatch);
};
var selectParentNode2 = () => ({ state, dispatch }) => {
  return selectParentNode(state, dispatch);
};
var selectTextblockEnd2 = () => ({ state, dispatch }) => {
  return selectTextblockEnd(state, dispatch);
};
var selectTextblockStart2 = () => ({ state, dispatch }) => {
  return selectTextblockStart(state, dispatch);
};
function createDocument(content5, schema, parseOptions = {}) {
  return createNodeFromContent(content5, schema, { slice: false, parseOptions });
}
var setContent = (content5, emitUpdate = false, parseOptions = {}) => ({ tr: tr4, editor, dispatch }) => {
  const { doc: doc4 } = tr4;
  const document4 = createDocument(content5, editor.schema, parseOptions);
  if (dispatch) {
    tr4.replaceWith(0, doc4.content.size, document4).setMeta("preventUpdate", !emitUpdate);
  }
  return true;
};
function combineTransactionSteps(oldDoc, transactions) {
  const transform2 = new Transform(oldDoc);
  transactions.forEach((transaction) => {
    transaction.steps.forEach((step) => {
      transform2.step(step);
    });
  });
  return transform2;
}
function defaultBlockAt2(match2) {
  for (let i = 0; i < match2.edgeCount; i += 1) {
    const { type } = match2.edge(i);
    if (type.isTextblock && !type.hasRequiredAttrs()) {
      return type;
    }
  }
  return null;
}
function findChildren(node4, predicate) {
  const nodesWithPos = [];
  node4.descendants((child, pos) => {
    if (predicate(child)) {
      nodesWithPos.push({
        node: child,
        pos
      });
    }
  });
  return nodesWithPos;
}
function findChildrenInRange(node4, range2, predicate) {
  const nodesWithPos = [];
  node4.nodesBetween(range2.from, range2.to, (child, pos) => {
    if (predicate(child)) {
      nodesWithPos.push({
        node: child,
        pos
      });
    }
  });
  return nodesWithPos;
}
function findParentNodeClosestToPos($pos, predicate) {
  for (let i = $pos.depth; i > 0; i -= 1) {
    const node4 = $pos.node(i);
    if (predicate(node4)) {
      return {
        pos: i > 0 ? $pos.before(i) : 0,
        start: $pos.start(i),
        depth: i,
        node: node4
      };
    }
  }
}
function findParentNode(predicate) {
  return (selection) => findParentNodeClosestToPos(selection.$from, predicate);
}
function getHTMLFromFragment(fragment, schema) {
  const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment);
  const temporaryDocument = document.implementation.createHTMLDocument();
  const container = temporaryDocument.createElement("div");
  container.appendChild(documentFragment);
  return container.innerHTML;
}
function getText(node4, options2) {
  const range2 = {
    from: 0,
    to: node4.content.size
  };
  return getTextBetween(node4, range2, options2);
}
function getMarkAttributes(state, typeOrName) {
  const type = getMarkType(typeOrName, state.schema);
  const { from: from5, to: to3, empty: empty2 } = state.selection;
  const marks = [];
  if (empty2) {
    if (state.storedMarks) {
      marks.push(...state.storedMarks);
    }
    marks.push(...state.selection.$head.marks());
  } else {
    state.doc.nodesBetween(from5, to3, (node4) => {
      marks.push(...node4.marks);
    });
  }
  const mark2 = marks.find((markItem) => markItem.type.name === type.name);
  if (!mark2) {
    return {};
  }
  return { ...mark2.attrs };
}
function getNodeAttributes(state, typeOrName) {
  const type = getNodeType(typeOrName, state.schema);
  const { from: from5, to: to3 } = state.selection;
  const nodes = [];
  state.doc.nodesBetween(from5, to3, (node5) => {
    nodes.push(node5);
  });
  const node4 = nodes.reverse().find((nodeItem) => nodeItem.type.name === type.name);
  if (!node4) {
    return {};
  }
  return { ...node4.attrs };
}
function getAttributes(state, typeOrName) {
  const schemaType = getSchemaTypeNameByName(typeof typeOrName === "string" ? typeOrName : typeOrName.name, state.schema);
  if (schemaType === "node") {
    return getNodeAttributes(state, typeOrName);
  }
  if (schemaType === "mark") {
    return getMarkAttributes(state, typeOrName);
  }
  return {};
}
function removeDuplicates(array, by = JSON.stringify) {
  const seen = {};
  return array.filter((item) => {
    const key2 = by(item);
    return Object.prototype.hasOwnProperty.call(seen, key2) ? false : seen[key2] = true;
  });
}
function simplifyChangedRanges(changes) {
  const uniqueChanges = removeDuplicates(changes);
  return uniqueChanges.length === 1 ? uniqueChanges : uniqueChanges.filter((change, index7) => {
    const rest = uniqueChanges.filter((_2, i) => i !== index7);
    return !rest.some((otherChange) => {
      return change.oldRange.from >= otherChange.oldRange.from && change.oldRange.to <= otherChange.oldRange.to && change.newRange.from >= otherChange.newRange.from && change.newRange.to <= otherChange.newRange.to;
    });
  });
}
function getChangedRanges(transform2) {
  const { mapping, steps } = transform2;
  const changes = [];
  mapping.maps.forEach((stepMap, index7) => {
    const ranges = [];
    if (!stepMap.ranges.length) {
      const { from: from5, to: to3 } = steps[index7];
      if (from5 === void 0 || to3 === void 0) {
        return;
      }
      ranges.push({ from: from5, to: to3 });
    } else {
      stepMap.forEach((from5, to3) => {
        ranges.push({ from: from5, to: to3 });
      });
    }
    ranges.forEach(({ from: from5, to: to3 }) => {
      const newStart = mapping.slice(index7).map(from5, -1);
      const newEnd = mapping.slice(index7).map(to3);
      const oldStart = mapping.invert().map(newStart, -1);
      const oldEnd = mapping.invert().map(newEnd);
      changes.push({
        oldRange: {
          from: oldStart,
          to: oldEnd
        },
        newRange: {
          from: newStart,
          to: newEnd
        }
      });
    });
  });
  return simplifyChangedRanges(changes);
}
function getMarksBetween(from5, to3, doc4) {
  const marks = [];
  if (from5 === to3) {
    doc4.resolve(from5).marks().forEach((mark2) => {
      const $pos = doc4.resolve(from5 - 1);
      const range2 = getMarkRange($pos, mark2.type);
      if (!range2) {
        return;
      }
      marks.push({
        mark: mark2,
        ...range2
      });
    });
  } else {
    doc4.nodesBetween(from5, to3, (node4, pos) => {
      marks.push(...node4.marks.map((mark2) => ({
        from: pos,
        to: pos + node4.nodeSize,
        mark: mark2
      })));
    });
  }
  return marks;
}
function getSplittedAttributes(extensionAttributes, typeName, attributes) {
  return Object.fromEntries(Object.entries(attributes).filter(([name]) => {
    const extensionAttribute = extensionAttributes.find((item) => {
      return item.type === typeName && item.name === name;
    });
    if (!extensionAttribute) {
      return false;
    }
    return extensionAttribute.attribute.keepOnSplit;
  }));
}
function isMarkActive(state, typeOrName, attributes = {}) {
  const { empty: empty2, ranges } = state.selection;
  const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;
  if (empty2) {
    return !!(state.storedMarks || state.selection.$from.marks()).filter((mark2) => {
      if (!type) {
        return true;
      }
      return type.name === mark2.type.name;
    }).find((mark2) => objectIncludes(mark2.attrs, attributes, { strict: false }));
  }
  let selectionRange = 0;
  const markRanges = [];
  ranges.forEach(({ $from, $to }) => {
    const from5 = $from.pos;
    const to3 = $to.pos;
    state.doc.nodesBetween(from5, to3, (node4, pos) => {
      if (!node4.isText && !node4.marks.length) {
        return;
      }
      const relativeFrom = Math.max(from5, pos);
      const relativeTo = Math.min(to3, pos + node4.nodeSize);
      const range3 = relativeTo - relativeFrom;
      selectionRange += range3;
      markRanges.push(...node4.marks.map((mark2) => ({
        mark: mark2,
        from: relativeFrom,
        to: relativeTo
      })));
    });
  });
  if (selectionRange === 0) {
    return false;
  }
  const matchedRange = markRanges.filter((markRange) => {
    if (!type) {
      return true;
    }
    return type.name === markRange.mark.type.name;
  }).filter((markRange) => objectIncludes(markRange.mark.attrs, attributes, { strict: false })).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
  const excludedRange = markRanges.filter((markRange) => {
    if (!type) {
      return true;
    }
    return markRange.mark.type !== type && markRange.mark.type.excludes(type);
  }).reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
  const range2 = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;
  return range2 >= selectionRange;
}
function isActive(state, name, attributes = {}) {
  if (!name) {
    return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);
  }
  const schemaType = getSchemaTypeNameByName(name, state.schema);
  if (schemaType === "node") {
    return isNodeActive(state, name, attributes);
  }
  if (schemaType === "mark") {
    return isMarkActive(state, name, attributes);
  }
  return false;
}
function isList(name, extensions2) {
  const { nodeExtensions } = splitExtensions(extensions2);
  const extension2 = nodeExtensions.find((item) => item.name === name);
  if (!extension2) {
    return false;
  }
  const context = {
    name: extension2.name,
    options: extension2.options,
    storage: extension2.storage
  };
  const group = callOrReturn(getExtensionField(extension2, "group", context));
  if (typeof group !== "string") {
    return false;
  }
  return group.split(" ").includes("list");
}
function isNodeEmpty(node4) {
  var _a;
  const defaultContent = (_a = node4.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();
  const content5 = node4.toJSON();
  return JSON.stringify(defaultContent) === JSON.stringify(content5);
}
function isNodeSelection(value) {
  return value instanceof NodeSelection;
}
function posToDOMRect(view, from5, to3) {
  const minPos = 0;
  const maxPos = view.state.doc.content.size;
  const resolvedFrom = minMax(from5, minPos, maxPos);
  const resolvedEnd = minMax(to3, minPos, maxPos);
  const start2 = view.coordsAtPos(resolvedFrom);
  const end2 = view.coordsAtPos(resolvedEnd, -1);
  const top2 = Math.min(start2.top, end2.top);
  const bottom2 = Math.max(start2.bottom, end2.bottom);
  const left2 = Math.min(start2.left, end2.left);
  const right2 = Math.max(start2.right, end2.right);
  const width = right2 - left2;
  const height = bottom2 - top2;
  const x3 = left2;
  const y = top2;
  const data = {
    top: top2,
    bottom: bottom2,
    left: left2,
    right: right2,
    width,
    height,
    x: x3,
    y
  };
  return {
    ...data,
    toJSON: () => data
  };
}
function canSetMark(state, tr4, newMarkType) {
  var _a;
  const { selection } = tr4;
  let cursor2 = null;
  if (isTextSelection(selection)) {
    cursor2 = selection.$cursor;
  }
  if (cursor2) {
    const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor2.marks();
    return !!newMarkType.isInSet(currentMarks) || !currentMarks.some((mark2) => mark2.type.excludes(newMarkType));
  }
  const { ranges } = selection;
  return ranges.some(({ $from, $to }) => {
    let someNodeSupportsMark = $from.depth === 0 ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType) : false;
    state.doc.nodesBetween($from.pos, $to.pos, (node4, _pos, parent) => {
      if (someNodeSupportsMark) {
        return false;
      }
      if (node4.isInline) {
        const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);
        const currentMarksAllowMarkType = !!newMarkType.isInSet(node4.marks) || !node4.marks.some((otherMark) => otherMark.type.excludes(newMarkType));
        someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;
      }
      return !someNodeSupportsMark;
    });
    return someNodeSupportsMark;
  });
}
var setMark = (typeOrName, attributes = {}) => ({ tr: tr4, state, dispatch }) => {
  const { selection } = tr4;
  const { empty: empty2, ranges } = selection;
  const type = getMarkType(typeOrName, state.schema);
  if (dispatch) {
    if (empty2) {
      const oldAttributes = getMarkAttributes(state, type);
      tr4.addStoredMark(type.create({
        ...oldAttributes,
        ...attributes
      }));
    } else {
      ranges.forEach((range2) => {
        const from5 = range2.$from.pos;
        const to3 = range2.$to.pos;
        state.doc.nodesBetween(from5, to3, (node4, pos) => {
          const trimmedFrom = Math.max(pos, from5);
          const trimmedTo = Math.min(pos + node4.nodeSize, to3);
          const someHasMark = node4.marks.find((mark2) => mark2.type === type);
          if (someHasMark) {
            node4.marks.forEach((mark2) => {
              if (type === mark2.type) {
                tr4.addMark(trimmedFrom, trimmedTo, type.create({
                  ...mark2.attrs,
                  ...attributes
                }));
              }
            });
          } else {
            tr4.addMark(trimmedFrom, trimmedTo, type.create(attributes));
          }
        });
      });
    }
  }
  return canSetMark(state, tr4, type);
};
var setMeta = (key2, value) => ({ tr: tr4 }) => {
  tr4.setMeta(key2, value);
  return true;
};
var setNode = (typeOrName, attributes = {}) => ({ state, dispatch, chain: chain2 }) => {
  const type = getNodeType(typeOrName, state.schema);
  if (!type.isTextblock) {
    console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.');
    return false;
  }
  return chain2().command(({ commands: commands2 }) => {
    const canSetBlock = setBlockType2(type, attributes)(state);
    if (canSetBlock) {
      return true;
    }
    return commands2.clearNodes();
  }).command(({ state: updatedState }) => {
    return setBlockType2(type, attributes)(updatedState, dispatch);
  }).run();
};
var setNodeSelection = (position5) => ({ tr: tr4, dispatch }) => {
  if (dispatch) {
    const { doc: doc4 } = tr4;
    const from5 = minMax(position5, 0, doc4.content.size);
    const selection = NodeSelection.create(doc4, from5);
    tr4.setSelection(selection);
  }
  return true;
};
var setTextSelection = (position5) => ({ tr: tr4, dispatch }) => {
  if (dispatch) {
    const { doc: doc4 } = tr4;
    const { from: from5, to: to3 } = typeof position5 === "number" ? { from: position5, to: position5 } : position5;
    const minPos = TextSelection.atStart(doc4).from;
    const maxPos = TextSelection.atEnd(doc4).to;
    const resolvedFrom = minMax(from5, minPos, maxPos);
    const resolvedEnd = minMax(to3, minPos, maxPos);
    const selection = TextSelection.create(doc4, resolvedFrom, resolvedEnd);
    tr4.setSelection(selection);
  }
  return true;
};
var sinkListItem2 = (typeOrName) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  return sinkListItem(type)(state, dispatch);
};
function ensureMarks(state, splittableMarks) {
  const marks = state.storedMarks || state.selection.$to.parentOffset && state.selection.$from.marks();
  if (marks) {
    const filteredMarks = marks.filter((mark2) => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark2.type.name));
    state.tr.ensureMarks(filteredMarks);
  }
}
var splitBlock2 = ({ keepMarks = true } = {}) => ({ tr: tr4, state, dispatch, editor }) => {
  const { selection, doc: doc4 } = tr4;
  const { $from, $to } = selection;
  const extensionAttributes = editor.extensionManager.attributes;
  const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
  if (selection instanceof NodeSelection && selection.node.isBlock) {
    if (!$from.parentOffset || !canSplit(doc4, $from.pos)) {
      return false;
    }
    if (dispatch) {
      if (keepMarks) {
        ensureMarks(state, editor.extensionManager.splittableMarks);
      }
      tr4.split($from.pos).scrollIntoView();
    }
    return true;
  }
  if (!$from.parent.isBlock) {
    return false;
  }
  if (dispatch) {
    const atEnd = $to.parentOffset === $to.parent.content.size;
    if (selection instanceof TextSelection) {
      tr4.deleteSelection();
    }
    const deflt = $from.depth === 0 ? void 0 : defaultBlockAt2($from.node(-1).contentMatchAt($from.indexAfter(-1)));
    let types2 = atEnd && deflt ? [
      {
        type: deflt,
        attrs: newAttributes
      }
    ] : void 0;
    let can = canSplit(tr4.doc, tr4.mapping.map($from.pos), 1, types2);
    if (!types2 && !can && canSplit(tr4.doc, tr4.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : void 0)) {
      can = true;
      types2 = deflt ? [
        {
          type: deflt,
          attrs: newAttributes
        }
      ] : void 0;
    }
    if (can) {
      tr4.split(tr4.mapping.map($from.pos), 1, types2);
      if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {
        const first2 = tr4.mapping.map($from.before());
        const $first = tr4.doc.resolve(first2);
        if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {
          tr4.setNodeMarkup(tr4.mapping.map($from.before()), deflt);
        }
      }
    }
    if (keepMarks) {
      ensureMarks(state, editor.extensionManager.splittableMarks);
    }
    tr4.scrollIntoView();
  }
  return true;
};
var splitListItem = (typeOrName) => ({ tr: tr4, state, dispatch, editor }) => {
  var _a;
  const type = getNodeType(typeOrName, state.schema);
  const { $from, $to } = state.selection;
  const node4 = state.selection.node;
  if (node4 && node4.isBlock || $from.depth < 2 || !$from.sameParent($to)) {
    return false;
  }
  const grandParent = $from.node(-1);
  if (grandParent.type !== type) {
    return false;
  }
  const extensionAttributes = editor.extensionManager.attributes;
  if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {
    if ($from.depth === 2 || $from.node(-3).type !== type || $from.index(-2) !== $from.node(-2).childCount - 1) {
      return false;
    }
    if (dispatch) {
      let wrap5 = Fragment.empty;
      const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
      for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {
        wrap5 = Fragment.from($from.node(d).copy(wrap5));
      }
      const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
      const newNextTypeAttributes2 = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
      const nextType2 = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes2)) || void 0;
      wrap5 = wrap5.append(Fragment.from(type.createAndFill(null, nextType2) || void 0));
      const start2 = $from.before($from.depth - (depthBefore - 1));
      tr4.replace(start2, $from.after(-depthAfter), new Slice(wrap5, 4 - depthBefore, 0));
      let sel = -1;
      tr4.doc.nodesBetween(start2, tr4.doc.content.size, (n, pos) => {
        if (sel > -1) {
          return false;
        }
        if (n.isTextblock && n.content.size === 0) {
          sel = pos + 1;
        }
      });
      if (sel > -1) {
        tr4.setSelection(TextSelection.near(tr4.doc.resolve(sel)));
      }
      tr4.scrollIntoView();
    }
    return true;
  }
  const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
  const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);
  const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
  tr4.delete($from.pos, $to.pos);
  const types2 = nextType ? [
    { type, attrs: newTypeAttributes },
    { type: nextType, attrs: newNextTypeAttributes }
  ] : [{ type, attrs: newTypeAttributes }];
  if (!canSplit(tr4.doc, $from.pos, 2)) {
    return false;
  }
  if (dispatch) {
    const { selection, storedMarks } = state;
    const { splittableMarks } = editor.extensionManager;
    const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();
    tr4.split($from.pos, 2, types2).scrollIntoView();
    if (!marks || !dispatch) {
      return true;
    }
    const filteredMarks = marks.filter((mark2) => splittableMarks.includes(mark2.type.name));
    tr4.ensureMarks(filteredMarks);
  }
  return true;
};
var joinListBackwards = (tr4, listType) => {
  const list6 = findParentNode((node4) => node4.type === listType)(tr4.selection);
  if (!list6) {
    return true;
  }
  const before = tr4.doc.resolve(Math.max(0, list6.pos - 1)).before(list6.depth);
  if (before === void 0) {
    return true;
  }
  const nodeBefore = tr4.doc.nodeAt(before);
  const canJoinBackwards = list6.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && canJoin(tr4.doc, list6.pos);
  if (!canJoinBackwards) {
    return true;
  }
  tr4.join(list6.pos);
  return true;
};
var joinListForwards = (tr4, listType) => {
  const list6 = findParentNode((node4) => node4.type === listType)(tr4.selection);
  if (!list6) {
    return true;
  }
  const after = tr4.doc.resolve(list6.start).after(list6.depth);
  if (after === void 0) {
    return true;
  }
  const nodeAfter = tr4.doc.nodeAt(after);
  const canJoinForwards = list6.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && canJoin(tr4.doc, after);
  if (!canJoinForwards) {
    return true;
  }
  tr4.join(after);
  return true;
};
var toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({ editor, tr: tr4, state, dispatch, chain: chain2, commands: commands2, can }) => {
  const { extensions: extensions2, splittableMarks } = editor.extensionManager;
  const listType = getNodeType(listTypeOrName, state.schema);
  const itemType = getNodeType(itemTypeOrName, state.schema);
  const { selection, storedMarks } = state;
  const { $from, $to } = selection;
  const range2 = $from.blockRange($to);
  const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();
  if (!range2) {
    return false;
  }
  const parentList = findParentNode((node4) => isList(node4.type.name, extensions2))(selection);
  if (range2.depth >= 1 && parentList && range2.depth - parentList.depth <= 1) {
    if (parentList.node.type === listType) {
      return commands2.liftListItem(itemType);
    }
    if (isList(parentList.node.type.name, extensions2) && listType.validContent(parentList.node.content) && dispatch) {
      return chain2().command(() => {
        tr4.setNodeMarkup(parentList.pos, listType);
        return true;
      }).command(() => joinListBackwards(tr4, listType)).command(() => joinListForwards(tr4, listType)).run();
    }
  }
  if (!keepMarks || !marks || !dispatch) {
    return chain2().command(() => {
      const canWrapInList = can().wrapInList(listType, attributes);
      if (canWrapInList) {
        return true;
      }
      return commands2.clearNodes();
    }).wrapInList(listType, attributes).command(() => joinListBackwards(tr4, listType)).command(() => joinListForwards(tr4, listType)).run();
  }
  return chain2().command(() => {
    const canWrapInList = can().wrapInList(listType, attributes);
    const filteredMarks = marks.filter((mark2) => splittableMarks.includes(mark2.type.name));
    tr4.ensureMarks(filteredMarks);
    if (canWrapInList) {
      return true;
    }
    return commands2.clearNodes();
  }).wrapInList(listType, attributes).command(() => joinListBackwards(tr4, listType)).command(() => joinListForwards(tr4, listType)).run();
};
var toggleMark = (typeOrName, attributes = {}, options2 = {}) => ({ state, commands: commands2 }) => {
  const { extendEmptyMarkRange = false } = options2;
  const type = getMarkType(typeOrName, state.schema);
  const isActive2 = isMarkActive(state, type, attributes);
  if (isActive2) {
    return commands2.unsetMark(type, { extendEmptyMarkRange });
  }
  return commands2.setMark(type, attributes);
};
var toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands: commands2 }) => {
  const type = getNodeType(typeOrName, state.schema);
  const toggleType = getNodeType(toggleTypeOrName, state.schema);
  const isActive2 = isNodeActive(state, type, attributes);
  if (isActive2) {
    return commands2.setNode(toggleType);
  }
  return commands2.setNode(type, attributes);
};
var toggleWrap = (typeOrName, attributes = {}) => ({ state, commands: commands2 }) => {
  const type = getNodeType(typeOrName, state.schema);
  const isActive2 = isNodeActive(state, type, attributes);
  if (isActive2) {
    return commands2.lift(type);
  }
  return commands2.wrapIn(type, attributes);
};
var undoInputRule = () => ({ state, dispatch }) => {
  const plugins = state.plugins;
  for (let i = 0; i < plugins.length; i += 1) {
    const plugin = plugins[i];
    let undoable;
    if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
      if (dispatch) {
        const tr4 = state.tr;
        const toUndo = undoable.transform;
        for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {
          tr4.step(toUndo.steps[j].invert(toUndo.docs[j]));
        }
        if (undoable.text) {
          const marks = tr4.doc.resolve(undoable.from).marks();
          tr4.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));
        } else {
          tr4.delete(undoable.from, undoable.to);
        }
      }
      return true;
    }
  }
  return false;
};
var unsetAllMarks = () => ({ tr: tr4, dispatch }) => {
  const { selection } = tr4;
  const { empty: empty2, ranges } = selection;
  if (empty2) {
    return true;
  }
  if (dispatch) {
    ranges.forEach((range2) => {
      tr4.removeMark(range2.$from.pos, range2.$to.pos);
    });
  }
  return true;
};
var unsetMark = (typeOrName, options2 = {}) => ({ tr: tr4, state, dispatch }) => {
  var _a;
  const { extendEmptyMarkRange = false } = options2;
  const { selection } = tr4;
  const type = getMarkType(typeOrName, state.schema);
  const { $from, empty: empty2, ranges } = selection;
  if (!dispatch) {
    return true;
  }
  if (empty2 && extendEmptyMarkRange) {
    let { from: from5, to: to3 } = selection;
    const attrs = (_a = $from.marks().find((mark2) => mark2.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;
    const range2 = getMarkRange($from, type, attrs);
    if (range2) {
      from5 = range2.from;
      to3 = range2.to;
    }
    tr4.removeMark(from5, to3, type);
  } else {
    ranges.forEach((range2) => {
      tr4.removeMark(range2.$from.pos, range2.$to.pos, type);
    });
  }
  tr4.removeStoredMark(type);
  return true;
};
var updateAttributes = (typeOrName, attributes = {}) => ({ tr: tr4, state, dispatch }) => {
  let nodeType = null;
  let markType = null;
  const schemaType = getSchemaTypeNameByName(typeof typeOrName === "string" ? typeOrName : typeOrName.name, state.schema);
  if (!schemaType) {
    return false;
  }
  if (schemaType === "node") {
    nodeType = getNodeType(typeOrName, state.schema);
  }
  if (schemaType === "mark") {
    markType = getMarkType(typeOrName, state.schema);
  }
  if (dispatch) {
    tr4.selection.ranges.forEach((range2) => {
      const from5 = range2.$from.pos;
      const to3 = range2.$to.pos;
      state.doc.nodesBetween(from5, to3, (node4, pos) => {
        if (nodeType && nodeType === node4.type) {
          tr4.setNodeMarkup(pos, void 0, {
            ...node4.attrs,
            ...attributes
          });
        }
        if (markType && node4.marks.length) {
          node4.marks.forEach((mark2) => {
            if (markType === mark2.type) {
              const trimmedFrom = Math.max(pos, from5);
              const trimmedTo = Math.min(pos + node4.nodeSize, to3);
              tr4.addMark(trimmedFrom, trimmedTo, markType.create({
                ...mark2.attrs,
                ...attributes
              }));
            }
          });
        }
      });
    });
  }
  return true;
};
var wrapIn2 = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  return wrapIn(type, attributes)(state, dispatch);
};
var wrapInList2 = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
  const type = getNodeType(typeOrName, state.schema);
  return wrapInList(type, attributes)(state, dispatch);
};
var commands = Object.freeze({
  __proto__: null,
  blur,
  clearContent,
  clearNodes,
  command,
  createParagraphNear: createParagraphNear2,
  deleteCurrentNode,
  deleteNode,
  deleteRange: deleteRange2,
  deleteSelection: deleteSelection2,
  enter,
  exitCode: exitCode2,
  extendMarkRange,
  first,
  focus,
  forEach,
  insertContent,
  insertContentAt,
  joinUp: joinUp2,
  joinDown: joinDown2,
  joinBackward: joinBackward2,
  joinForward: joinForward2,
  keyboardShortcut,
  lift: lift3,
  liftEmptyBlock: liftEmptyBlock2,
  liftListItem: liftListItem2,
  newlineInCode: newlineInCode2,
  resetAttributes,
  scrollIntoView,
  selectAll: selectAll2,
  selectNodeBackward: selectNodeBackward2,
  selectNodeForward: selectNodeForward2,
  selectParentNode: selectParentNode2,
  selectTextblockEnd: selectTextblockEnd2,
  selectTextblockStart: selectTextblockStart2,
  setContent,
  setMark,
  setMeta,
  setNode,
  setNodeSelection,
  setTextSelection,
  sinkListItem: sinkListItem2,
  splitBlock: splitBlock2,
  splitListItem,
  toggleList,
  toggleMark,
  toggleNode,
  toggleWrap,
  undoInputRule,
  unsetAllMarks,
  unsetMark,
  updateAttributes,
  wrapIn: wrapIn2,
  wrapInList: wrapInList2
});
var Commands = Extension.create({
  name: "commands",
  addCommands() {
    return {
      ...commands
    };
  }
});
var Editable = Extension.create({
  name: "editable",
  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("editable"),
        props: {
          editable: () => this.editor.options.editable
        }
      })
    ];
  }
});
var FocusEvents = Extension.create({
  name: "focusEvents",
  addProseMirrorPlugins() {
    const { editor } = this;
    return [
      new Plugin({
        key: new PluginKey("focusEvents"),
        props: {
          handleDOMEvents: {
            focus: (view, event) => {
              editor.isFocused = true;
              const transaction = editor.state.tr.setMeta("focus", { event }).setMeta("addToHistory", false);
              view.dispatch(transaction);
              return false;
            },
            blur: (view, event) => {
              editor.isFocused = false;
              const transaction = editor.state.tr.setMeta("blur", { event }).setMeta("addToHistory", false);
              view.dispatch(transaction);
              return false;
            }
          }
        }
      })
    ];
  }
});
var Keymap = Extension.create({
  name: "keymap",
  addKeyboardShortcuts() {
    const handleBackspace = () => this.editor.commands.first(({ commands: commands2 }) => [
      () => commands2.undoInputRule(),
      // maybe convert first text block node to default node
      () => commands2.command(({ tr: tr4 }) => {
        const { selection, doc: doc4 } = tr4;
        const { empty: empty2, $anchor } = selection;
        const { pos, parent } = $anchor;
        const isAtStart = Selection.atStart(doc4).from === pos;
        if (!empty2 || !isAtStart || !parent.type.isTextblock || parent.textContent.length) {
          return false;
        }
        return commands2.clearNodes();
      }),
      () => commands2.deleteSelection(),
      () => commands2.joinBackward(),
      () => commands2.selectNodeBackward()
    ]);
    const handleDelete2 = () => this.editor.commands.first(({ commands: commands2 }) => [
      () => commands2.deleteSelection(),
      () => commands2.deleteCurrentNode(),
      () => commands2.joinForward(),
      () => commands2.selectNodeForward()
    ]);
    const handleEnter = () => this.editor.commands.first(({ commands: commands2 }) => [
      () => commands2.newlineInCode(),
      () => commands2.createParagraphNear(),
      () => commands2.liftEmptyBlock(),
      () => commands2.splitBlock()
    ]);
    const baseKeymap = {
      Enter: handleEnter,
      "Mod-Enter": () => this.editor.commands.exitCode(),
      Backspace: handleBackspace,
      "Mod-Backspace": handleBackspace,
      "Shift-Backspace": handleBackspace,
      Delete: handleDelete2,
      "Mod-Delete": handleDelete2,
      "Mod-a": () => this.editor.commands.selectAll()
    };
    const pcKeymap = {
      ...baseKeymap
    };
    const macKeymap = {
      ...baseKeymap,
      "Ctrl-h": handleBackspace,
      "Alt-Backspace": handleBackspace,
      "Ctrl-d": handleDelete2,
      "Ctrl-Alt-Backspace": handleDelete2,
      "Alt-Delete": handleDelete2,
      "Alt-d": handleDelete2,
      "Ctrl-a": () => this.editor.commands.selectTextblockStart(),
      "Ctrl-e": () => this.editor.commands.selectTextblockEnd()
    };
    if (isiOS() || isMacOS()) {
      return macKeymap;
    }
    return pcKeymap;
  },
  addProseMirrorPlugins() {
    return [
      // With this plugin we check if the whole document was selected and deleted.
      // In this case we will additionally call `clearNodes()` to convert e.g. a heading
      // to a paragraph if necessary.
      // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
      // with many other commands.
      new Plugin({
        key: new PluginKey("clearDocument"),
        appendTransaction: (transactions, oldState, newState) => {
          const docChanges = transactions.some((transaction) => transaction.docChanged) && !oldState.doc.eq(newState.doc);
          if (!docChanges) {
            return;
          }
          const { empty: empty2, from: from5, to: to3 } = oldState.selection;
          const allFrom = Selection.atStart(oldState.doc).from;
          const allEnd = Selection.atEnd(oldState.doc).to;
          const allWasSelected = from5 === allFrom && to3 === allEnd;
          if (empty2 || !allWasSelected) {
            return;
          }
          const isEmpty2 = newState.doc.textBetween(0, newState.doc.content.size, " ", " ").length === 0;
          if (!isEmpty2) {
            return;
          }
          const tr4 = newState.tr;
          const state = createChainableState({
            state: newState,
            transaction: tr4
          });
          const { commands: commands2 } = new CommandManager({
            editor: this.editor,
            state
          });
          commands2.clearNodes();
          if (!tr4.steps.length) {
            return;
          }
          return tr4;
        }
      })
    ];
  }
});
var Tabindex = Extension.create({
  name: "tabindex",
  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: new PluginKey("tabindex"),
        props: {
          attributes: this.editor.isEditable ? { tabindex: "0" } : {}
        }
      })
    ];
  }
});
var extensions = Object.freeze({
  __proto__: null,
  ClipboardTextSerializer,
  Commands,
  Editable,
  FocusEvents,
  Keymap,
  Tabindex
});
var style = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 1px !important;
  height: 1px !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;
function createStyleTag(style3, nonce) {
  const tiptapStyleTag = document.querySelector("style[data-tiptap-style]");
  if (tiptapStyleTag !== null) {
    return tiptapStyleTag;
  }
  const styleNode = document.createElement("style");
  if (nonce) {
    styleNode.setAttribute("nonce", nonce);
  }
  styleNode.setAttribute("data-tiptap-style", "");
  styleNode.innerHTML = style3;
  document.getElementsByTagName("head")[0].appendChild(styleNode);
  return styleNode;
}
var Editor = class extends EventEmitter {
  constructor(options2 = {}) {
    super();
    this.isFocused = false;
    this.extensionStorage = {};
    this.options = {
      element: document.createElement("div"),
      content: "",
      injectCSS: true,
      injectNonce: void 0,
      extensions: [],
      autofocus: false,
      editable: true,
      editorProps: {},
      parseOptions: {},
      enableInputRules: true,
      enablePasteRules: true,
      enableCoreExtensions: true,
      onBeforeCreate: () => null,
      onCreate: () => null,
      onUpdate: () => null,
      onSelectionUpdate: () => null,
      onTransaction: () => null,
      onFocus: () => null,
      onBlur: () => null,
      onDestroy: () => null
    };
    this.isCapturingTransaction = false;
    this.capturedTransaction = null;
    this.setOptions(options2);
    this.createExtensionManager();
    this.createCommandManager();
    this.createSchema();
    this.on("beforeCreate", this.options.onBeforeCreate);
    this.emit("beforeCreate", { editor: this });
    this.createView();
    this.injectCSS();
    this.on("create", this.options.onCreate);
    this.on("update", this.options.onUpdate);
    this.on("selectionUpdate", this.options.onSelectionUpdate);
    this.on("transaction", this.options.onTransaction);
    this.on("focus", this.options.onFocus);
    this.on("blur", this.options.onBlur);
    this.on("destroy", this.options.onDestroy);
    window.setTimeout(() => {
      if (this.isDestroyed) {
        return;
      }
      this.commands.focus(this.options.autofocus);
      this.emit("create", { editor: this });
    }, 0);
  }
  /**
   * Returns the editor storage.
   */
  get storage() {
    return this.extensionStorage;
  }
  /**
   * An object of all registered commands.
   */
  get commands() {
    return this.commandManager.commands;
  }
  /**
   * Create a command chain to call multiple commands at once.
   */
  chain() {
    return this.commandManager.chain();
  }
  /**
   * Check if a command or a command chain can be executed. Without executing it.
   */
  can() {
    return this.commandManager.can();
  }
  /**
   * Inject CSS styles.
   */
  injectCSS() {
    if (this.options.injectCSS && document) {
      this.css = createStyleTag(style, this.options.injectNonce);
    }
  }
  /**
   * Update editor options.
   *
   * @param options A list of options
   */
  setOptions(options2 = {}) {
    this.options = {
      ...this.options,
      ...options2
    };
    if (!this.view || !this.state || this.isDestroyed) {
      return;
    }
    if (this.options.editorProps) {
      this.view.setProps(this.options.editorProps);
    }
    this.view.updateState(this.state);
  }
  /**
   * Update editable state of the editor.
   */
  setEditable(editable, emitUpdate = true) {
    this.setOptions({ editable });
    if (emitUpdate) {
      this.emit("update", { editor: this, transaction: this.state.tr });
    }
  }
  /**
   * Returns whether the editor is editable.
   */
  get isEditable() {
    return this.options.editable && this.view && this.view.editable;
  }
  /**
   * Returns the editor state.
   */
  get state() {
    return this.view.state;
  }
  /**
   * Register a ProseMirror plugin.
   *
   * @param plugin A ProseMirror plugin
   * @param handlePlugins Control how to merge the plugin into the existing plugins.
   */
  registerPlugin(plugin, handlePlugins) {
    const plugins = isFunction(handlePlugins) ? handlePlugins(plugin, [...this.state.plugins]) : [...this.state.plugins, plugin];
    const state = this.state.reconfigure({ plugins });
    this.view.updateState(state);
  }
  /**
   * Unregister a ProseMirror plugin.
   *
   * @param nameOrPluginKey The plugins name
   */
  unregisterPlugin(nameOrPluginKey) {
    if (this.isDestroyed) {
      return;
    }
    const name = typeof nameOrPluginKey === "string" ? `${nameOrPluginKey}$` : nameOrPluginKey.key;
    const state = this.state.reconfigure({
      // @ts-ignore
      plugins: this.state.plugins.filter((plugin) => !plugin.key.startsWith(name))
    });
    this.view.updateState(state);
  }
  /**
   * Creates an extension manager.
   */
  createExtensionManager() {
    const coreExtensions = this.options.enableCoreExtensions ? Object.values(extensions) : [];
    const allExtensions = [...coreExtensions, ...this.options.extensions].filter((extension2) => {
      return ["extension", "node", "mark"].includes(extension2 === null || extension2 === void 0 ? void 0 : extension2.type);
    });
    this.extensionManager = new ExtensionManager(allExtensions, this);
  }
  /**
   * Creates an command manager.
   */
  createCommandManager() {
    this.commandManager = new CommandManager({
      editor: this
    });
  }
  /**
   * Creates a ProseMirror schema.
   */
  createSchema() {
    this.schema = this.extensionManager.schema;
  }
  /**
   * Creates a ProseMirror view.
   */
  createView() {
    const doc4 = createDocument(this.options.content, this.schema, this.options.parseOptions);
    const selection = resolveFocusPosition(doc4, this.options.autofocus);
    this.view = new EditorView(this.options.element, {
      ...this.options.editorProps,
      dispatchTransaction: this.dispatchTransaction.bind(this),
      state: EditorState.create({
        doc: doc4,
        selection: selection || void 0
      })
    });
    const newState = this.state.reconfigure({
      plugins: this.extensionManager.plugins
    });
    this.view.updateState(newState);
    this.createNodeViews();
    const dom = this.view.dom;
    dom.editor = this;
  }
  /**
   * Creates all node views.
   */
  createNodeViews() {
    this.view.setProps({
      nodeViews: this.extensionManager.nodeViews
    });
  }
  captureTransaction(fn3) {
    this.isCapturingTransaction = true;
    fn3();
    this.isCapturingTransaction = false;
    const tr4 = this.capturedTransaction;
    this.capturedTransaction = null;
    return tr4;
  }
  /**
   * The callback over which to send transactions (state updates) produced by the view.
   *
   * @param transaction An editor state transaction
   */
  dispatchTransaction(transaction) {
    if (this.view.isDestroyed) {
      return;
    }
    if (this.isCapturingTransaction) {
      if (!this.capturedTransaction) {
        this.capturedTransaction = transaction;
        return;
      }
      transaction.steps.forEach((step) => {
        var _a;
        return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step);
      });
      return;
    }
    const state = this.state.apply(transaction);
    const selectionHasChanged = !this.state.selection.eq(state.selection);
    this.view.updateState(state);
    this.emit("transaction", {
      editor: this,
      transaction
    });
    if (selectionHasChanged) {
      this.emit("selectionUpdate", {
        editor: this,
        transaction
      });
    }
    const focus2 = transaction.getMeta("focus");
    const blur2 = transaction.getMeta("blur");
    if (focus2) {
      this.emit("focus", {
        editor: this,
        event: focus2.event,
        transaction
      });
    }
    if (blur2) {
      this.emit("blur", {
        editor: this,
        event: blur2.event,
        transaction
      });
    }
    if (!transaction.docChanged || transaction.getMeta("preventUpdate")) {
      return;
    }
    this.emit("update", {
      editor: this,
      transaction
    });
  }
  /**
   * Get attributes of the currently selected node or mark.
   */
  getAttributes(nameOrType) {
    return getAttributes(this.state, nameOrType);
  }
  isActive(nameOrAttributes, attributesOrUndefined) {
    const name = typeof nameOrAttributes === "string" ? nameOrAttributes : null;
    const attributes = typeof nameOrAttributes === "string" ? attributesOrUndefined : nameOrAttributes;
    return isActive(this.state, name, attributes);
  }
  /**
   * Get the document as JSON.
   */
  getJSON() {
    return this.state.doc.toJSON();
  }
  /**
   * Get the document as HTML.
   */
  getHTML() {
    return getHTMLFromFragment(this.state.doc.content, this.schema);
  }
  /**
   * Get the document as text.
   */
  getText(options2) {
    const { blockSeparator = "\n\n", textSerializers = {} } = options2 || {};
    return getText(this.state.doc, {
      blockSeparator,
      textSerializers: {
        ...getTextSerializersFromSchema(this.schema),
        ...textSerializers
      }
    });
  }
  /**
   * Check if there is no content.
   */
  get isEmpty() {
    return isNodeEmpty(this.state.doc);
  }
  /**
   * Get the number of characters for the current document.
   *
   * @deprecated
   */
  getCharacterCount() {
    console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.');
    return this.state.doc.content.size - 2;
  }
  /**
   * Destroy the editor.
   */
  destroy() {
    this.emit("destroy");
    if (this.view) {
      this.view.destroy();
    }
    this.removeAllListeners();
  }
  /**
   * Check if the editor is already destroyed.
   */
  get isDestroyed() {
    var _a;
    return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);
  }
};
function markInputRule(config) {
  return new InputRule({
    find: config.find,
    handler: ({ state, range: range2, match: match2 }) => {
      const attributes = callOrReturn(config.getAttributes, void 0, match2);
      if (attributes === false || attributes === null) {
        return null;
      }
      const { tr: tr4 } = state;
      const captureGroup = match2[match2.length - 1];
      const fullMatch = match2[0];
      let markEnd = range2.to;
      if (captureGroup) {
        const startSpaces = fullMatch.search(/\S/);
        const textStart = range2.from + fullMatch.indexOf(captureGroup);
        const textEnd = textStart + captureGroup.length;
        const excludedMarks = getMarksBetween(range2.from, range2.to, state.doc).filter((item) => {
          const excluded = item.mark.type.excluded;
          return excluded.find((type) => type === config.type && type !== item.mark.type);
        }).filter((item) => item.to > textStart);
        if (excludedMarks.length) {
          return null;
        }
        if (textEnd < range2.to) {
          tr4.delete(textEnd, range2.to);
        }
        if (textStart > range2.from) {
          tr4.delete(range2.from + startSpaces, textStart);
        }
        markEnd = range2.from + startSpaces + captureGroup.length;
        tr4.addMark(range2.from + startSpaces, markEnd, config.type.create(attributes || {}));
        tr4.removeStoredMark(config.type);
      }
    }
  });
}
var Mark2 = class {
  constructor(config = {}) {
    this.type = "mark";
    this.name = "mark";
    this.parent = null;
    this.child = null;
    this.config = {
      name: this.name,
      defaultOptions: {}
    };
    this.config = {
      ...this.config,
      ...config
    };
    this.name = this.config.name;
    if (config.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
    }
    this.options = this.config.defaultOptions;
    if (this.config.addOptions) {
      this.options = callOrReturn(getExtensionField(this, "addOptions", {
        name: this.name
      }));
    }
    this.storage = callOrReturn(getExtensionField(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(config = {}) {
    return new Mark2(config);
  }
  configure(options2 = {}) {
    const extension2 = this.extend();
    extension2.options = mergeDeep(this.options, options2);
    extension2.storage = callOrReturn(getExtensionField(extension2, "addStorage", {
      name: extension2.name,
      options: extension2.options
    }));
    return extension2;
  }
  extend(extendedConfig = {}) {
    const extension2 = new Mark2(extendedConfig);
    extension2.parent = this;
    this.child = extension2;
    extension2.name = extendedConfig.name ? extendedConfig.name : extension2.parent.name;
    if (extendedConfig.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension2.name}".`);
    }
    extension2.options = callOrReturn(getExtensionField(extension2, "addOptions", {
      name: extension2.name
    }));
    extension2.storage = callOrReturn(getExtensionField(extension2, "addStorage", {
      name: extension2.name,
      options: extension2.options
    }));
    return extension2;
  }
  static handleExit({ editor, mark: mark2 }) {
    const { tr: tr4 } = editor.state;
    const currentPos = editor.state.selection.$from;
    const isAtEnd = currentPos.pos === currentPos.end();
    if (isAtEnd) {
      const currentMarks = currentPos.marks();
      const isInMark = !!currentMarks.find((m) => (m === null || m === void 0 ? void 0 : m.type.name) === mark2.name);
      if (!isInMark) {
        return false;
      }
      const removeMark2 = currentMarks.find((m) => (m === null || m === void 0 ? void 0 : m.type.name) === mark2.name);
      if (removeMark2) {
        tr4.removeStoredMark(removeMark2);
      }
      tr4.insertText(" ", currentPos.pos);
      editor.view.dispatch(tr4);
      return true;
    }
    return false;
  }
};
var Node2 = class {
  constructor(config = {}) {
    this.type = "node";
    this.name = "node";
    this.parent = null;
    this.child = null;
    this.config = {
      name: this.name,
      defaultOptions: {}
    };
    this.config = {
      ...this.config,
      ...config
    };
    this.name = this.config.name;
    if (config.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
    }
    this.options = this.config.defaultOptions;
    if (this.config.addOptions) {
      this.options = callOrReturn(getExtensionField(this, "addOptions", {
        name: this.name
      }));
    }
    this.storage = callOrReturn(getExtensionField(this, "addStorage", {
      name: this.name,
      options: this.options
    })) || {};
  }
  static create(config = {}) {
    return new Node2(config);
  }
  configure(options2 = {}) {
    const extension2 = this.extend();
    extension2.options = mergeDeep(this.options, options2);
    extension2.storage = callOrReturn(getExtensionField(extension2, "addStorage", {
      name: extension2.name,
      options: extension2.options
    }));
    return extension2;
  }
  extend(extendedConfig = {}) {
    const extension2 = new Node2(extendedConfig);
    extension2.parent = this;
    this.child = extension2;
    extension2.name = extendedConfig.name ? extendedConfig.name : extension2.parent.name;
    if (extendedConfig.defaultOptions) {
      console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension2.name}".`);
    }
    extension2.options = callOrReturn(getExtensionField(extension2, "addOptions", {
      name: extension2.name
    }));
    extension2.storage = callOrReturn(getExtensionField(extension2, "addStorage", {
      name: extension2.name,
      options: extension2.options
    }));
    return extension2;
  }
};
function markPasteRule(config) {
  return new PasteRule({
    find: config.find,
    handler: ({ state, range: range2, match: match2 }) => {
      const attributes = callOrReturn(config.getAttributes, void 0, match2);
      if (attributes === false || attributes === null) {
        return null;
      }
      const { tr: tr4 } = state;
      const captureGroup = match2[match2.length - 1];
      const fullMatch = match2[0];
      let markEnd = range2.to;
      if (captureGroup) {
        const startSpaces = fullMatch.search(/\S/);
        const textStart = range2.from + fullMatch.indexOf(captureGroup);
        const textEnd = textStart + captureGroup.length;
        const excludedMarks = getMarksBetween(range2.from, range2.to, state.doc).filter((item) => {
          const excluded = item.mark.type.excluded;
          return excluded.find((type) => type === config.type && type !== item.mark.type);
        }).filter((item) => item.to > textStart);
        if (excludedMarks.length) {
          return null;
        }
        if (textEnd < range2.to) {
          tr4.delete(textEnd, range2.to);
        }
        if (textStart > range2.from) {
          tr4.delete(range2.from + startSpaces, textStart);
        }
        markEnd = range2.from + startSpaces + captureGroup.length;
        tr4.addMark(range2.from + startSpaces, markEnd, config.type.create(attributes || {}));
        tr4.removeStoredMark(config.type);
      }
    }
  });
}

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element7) {
  return element7 ? (element7.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node4) {
  if (node4 == null) {
    return window;
  }
  if (node4.toString() !== "[object Window]") {
    var ownerDocument = node4.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node4;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node4) {
  var OwnElement = getWindow(node4).Element;
  return node4 instanceof OwnElement || node4 instanceof Element;
}
function isHTMLElement(node4) {
  var OwnElement = getWindow(node4).HTMLElement;
  return node4 instanceof OwnElement || node4 instanceof HTMLElement;
}
function isShadowRoot(node4) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node4).ShadowRoot;
  return node4 instanceof OwnElement || node4 instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style3 = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element7 = state.elements[name];
    if (!isHTMLElement(element7) || !getNodeName(element7)) {
      return;
    }
    Object.assign(element7.style, style3);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element7.removeAttribute(name2);
      } else {
        element7.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element7 = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style3 = styleProperties.reduce(function(style4, property) {
        style4[property] = "";
        return style4;
      }, {});
      if (!isHTMLElement(element7) || !getNodeName(element7)) {
        return;
      }
      Object.assign(element7.style, style3);
      Object.keys(attributes).forEach(function(attribute) {
        element7.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element7, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect2 = element7.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element7)) {
    scaleX = element7.offsetWidth > 0 ? round(clientRect2.width) / element7.offsetWidth || 1 : 1;
    scaleY = element7.offsetHeight > 0 ? round(clientRect2.height) / element7.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element7) ? getWindow(element7) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x3 = (clientRect2.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect2.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect2.width / scaleX;
  var height = clientRect2.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x3 + width,
    bottom: y + height,
    left: x3,
    x: x3,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element7) {
  var clientRect2 = getBoundingClientRect(element7);
  var width = element7.offsetWidth;
  var height = element7.offsetHeight;
  if (Math.abs(clientRect2.width - width) <= 1) {
    width = clientRect2.width;
  }
  if (Math.abs(clientRect2.height - height) <= 1) {
    height = clientRect2.height;
  }
  return {
    x: element7.offsetLeft,
    y: element7.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next2 = child;
    do {
      if (next2 && parent.isSameNode(next2)) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element7) {
  return getWindow(element7).getComputedStyle(element7);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element7) {
  return ["table", "td", "th"].indexOf(getNodeName(element7)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element7) {
  return ((isElement(element7) ? element7.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element7.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element7) {
  if (getNodeName(element7) === "html") {
    return element7;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element7.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element7.parentNode || // DOM Element detected
    (isShadowRoot(element7) ? element7.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element7)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element7) {
  if (!isHTMLElement(element7) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle2(element7).position === "fixed") {
    return null;
  }
  return element7.offsetParent;
}
function getContainingBlock(element7) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE2 = /Trident/i.test(getUAString());
  if (isIE2 && isHTMLElement(element7)) {
    var elementCss = getComputedStyle2(element7);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element7);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css2 = getComputedStyle2(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element7) {
  var window2 = getWindow(element7);
  var offsetParent = getTrueOffsetParent(element7);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element7) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min5, value, max5) {
  return max(min5, min(value, max5));
}
function withinMaxClamp(min5, value, max5) {
  var v = within(min5, value, max5);
  return v > max5 ? max5 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys5) {
  return keys5.reduce(function(hashMap, key2) {
    hashMap[key2] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding2, state) {
  padding2 = typeof padding2 === "function" ? padding2(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding2;
  return mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options2 = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options2.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min5 = paddingObject[minProp];
  var max5 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset3 = within(min5, center, max5);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset3, _state$modifiersData$.centerOffset = offset3 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options2 = _ref2.options;
  var _options$element = options2.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x3 = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x3 * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position5 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x3 = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x: x3,
    y
  }) : {
    x: x3,
    y
  };
  x3 = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position5 === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x3 -= offsetX - popperRect.width;
      x3 *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position: position5
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x3,
    y
  }, getWindow(popper2)) : {
    x: x3,
    y
  };
  x3 = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x3 + "px, " + y + "px)" : "translate3d(" + x3 + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x3 + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options2 = _ref5.options;
  var _options$gpuAccelerat = options2.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options2.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options2.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options2 = _ref.options;
  var _options$scroll = options2.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options2.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node4) {
  var win = getWindow(node4);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element7) {
  return getBoundingClientRect(getDocumentElement(element7)).left + getWindowScroll(element7).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element7, strategy) {
  var win = getWindow(element7);
  var html7 = getDocumentElement(element7);
  var visualViewport = win.visualViewport;
  var width = html7.clientWidth;
  var height = html7.clientHeight;
  var x3 = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x3 = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x3 + getWindowScrollBarX(element7),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element7) {
  var _element$ownerDocumen;
  var html7 = getDocumentElement(element7);
  var winScroll = getWindowScroll(element7);
  var body3 = (_element$ownerDocumen = element7.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html7.scrollWidth, html7.clientWidth, body3 ? body3.scrollWidth : 0, body3 ? body3.clientWidth : 0);
  var height = max(html7.scrollHeight, html7.clientHeight, body3 ? body3.scrollHeight : 0, body3 ? body3.clientHeight : 0);
  var x3 = -winScroll.scrollLeft + getWindowScrollBarX(element7);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body3 || html7).direction === "rtl") {
    x3 += max(html7.clientWidth, body3 ? body3.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x: x3,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element7) {
  var _getComputedStyle = getComputedStyle2(element7), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node4) {
  if (["html", "body", "#document"].indexOf(getNodeName(node4)) >= 0) {
    return node4.ownerDocument.body;
  }
  if (isHTMLElement(node4) && isScrollParent(node4)) {
    return node4;
  }
  return getScrollParent(getParentNode(node4));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element7, list6) {
  var _element$ownerDocumen;
  if (list6 === void 0) {
    list6 = [];
  }
  var scrollParent = getScrollParent(element7);
  var isBody = scrollParent === ((_element$ownerDocumen = element7.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list6.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element7, strategy) {
  var rect = getBoundingClientRect(element7, false, strategy === "fixed");
  rect.top = rect.top + element7.clientTop;
  rect.left = rect.left + element7.clientLeft;
  rect.bottom = rect.top + element7.clientHeight;
  rect.right = rect.left + element7.clientWidth;
  rect.width = element7.clientWidth;
  rect.height = element7.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element7, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element7, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element7)));
}
function getClippingParents(element7) {
  var clippingParents2 = listScrollParents(getParentNode(element7));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element7).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element7) ? getOffsetParent(element7) : element7;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element7, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element7) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element7, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element7, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element7 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element7.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element7.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element7.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element7.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element7[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element7[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding2 = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding2 !== "number" ? padding2 : expandToHashMap(padding2, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element7 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element7) ? element7 : element7.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset3 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key2) {
      var multiply = [right, bottom].indexOf(key2) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key2) >= 0 ? "y" : "x";
      overflowOffsets[key2] += offset3[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _options = options2, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding2 = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding: padding2
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a2, b2) {
    return overflows[a2] - overflows[b2];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options2.fallbackPlacements, padding2 = options2.padding, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, _options$flipVariatio = options2.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options2.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding: padding2,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding: padding2
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks2 = [];
    if (checkMainAxis) {
      checks2.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks2.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks2.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks2);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks3 = checksMap.get(placement2);
        if (checks3) {
          return checks3.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset3) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset3 === "function" ? offset3(Object.assign({}, rects, {
    placement
  })) : offset3, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options2 = _ref2.options, name = _ref2.name;
  var _options$offset = options2.offset, offset3 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset3);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x3 = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x3;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options2 = _ref.options, name = _ref.name;
  var _options$mainAxis = options2.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options2.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options2.boundary, rootBoundary = options2.rootBoundary, altBoundary = options2.altBoundary, padding2 = options2.padding, _options$tether = options2.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options2.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding: padding2,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset3 = popperOffsets2[mainAxis];
    var min5 = offset3 + overflow[mainSide];
    var max5 = offset3 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset3 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset3 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min5, tetherMin) : min5, offset3, tether ? max(max5, tetherMax) : max5);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset3;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element7) {
  return {
    scrollLeft: element7.scrollLeft,
    scrollTop: element7.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node4) {
  if (node4 === getWindow(node4) || !isHTMLElement(node4)) {
    return getWindowScroll(node4);
  } else {
    return getHTMLElementScroll(node4);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element7) {
  var rect = element7.getBoundingClientRect();
  var scaleX = round(rect.width) / element7.offsetWidth || 1;
  var scaleY = round(rect.height) / element7.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers2) {
  var map6 = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers2.forEach(function(modifier) {
    map6.set(modifier.name, modifier);
  });
  function sort2(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map6.get(dep);
        if (depModifier) {
          sort2(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers2.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort2(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers2) {
  var orderedModifiers = order(modifiers2);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn3) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve2) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve2(fn3());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers2) {
  var merged = modifiers2.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key2) {
    return merged[key2];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
    args2[_key] = arguments[_key];
  }
  return !args2.some(function(element7) {
    return !(element7 && typeof element7.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options2) {
    if (options2 === void 0) {
      options2 = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options3 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options3);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index7 = 0; index7 < state.orderedModifiers.length; index7++) {
          if (state.reset === true) {
            state.reset = false;
            index7 = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index7], fn3 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn3 === "function") {
            state = fn3({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve2) {
          instance.forceUpdate();
          resolve2(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options2).then(function(state2) {
      if (!isDestroyed && options2.onFirstUpdate) {
        options2.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options3 = _ref$options === void 0 ? {} : _ref$options, effect5 = _ref.effect;
        if (typeof effect5 === "function") {
          var cleanupFn = effect5({
            state,
            name,
            instance,
            options: options3
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn3) {
        return fn3();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/tippy.js/dist/tippy.esm.js
var BOX_CLASS = "tippy-box";
var CONTENT_CLASS = "tippy-content";
var BACKDROP_CLASS = "tippy-backdrop";
var ARROW_CLASS = "tippy-arrow";
var SVG_ARROW_CLASS = "tippy-svg-arrow";
var TOUCH_OPTIONS = {
  passive: true,
  capture: true
};
var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO2() {
  return document.body;
};
function hasOwnProperty(obj, key2) {
  return {}.hasOwnProperty.call(obj, key2);
}
function getValueAtIndexOrReturn(value, index7, defaultValue) {
  if (Array.isArray(value)) {
    var v = value[index7];
    return v == null ? Array.isArray(defaultValue) ? defaultValue[index7] : defaultValue : v;
  }
  return value;
}
function isType(value, type) {
  var str = {}.toString.call(value);
  return str.indexOf("[object") === 0 && str.indexOf(type + "]") > -1;
}
function invokeWithArgsOrReturn(value, args2) {
  return typeof value === "function" ? value.apply(void 0, args2) : value;
}
function debounce2(fn3, ms) {
  if (ms === 0) {
    return fn3;
  }
  var timeout2;
  return function(arg) {
    clearTimeout(timeout2);
    timeout2 = setTimeout(function() {
      fn3(arg);
    }, ms);
  };
}
function removeProperties(obj, keys5) {
  var clone = Object.assign({}, obj);
  keys5.forEach(function(key2) {
    delete clone[key2];
  });
  return clone;
}
function splitBySpaces(value) {
  return value.split(/\s+/).filter(Boolean);
}
function normalizeToArray(value) {
  return [].concat(value);
}
function pushIfUnique(arr, value) {
  if (arr.indexOf(value) === -1) {
    arr.push(value);
  }
}
function unique(arr) {
  return arr.filter(function(item, index7) {
    return arr.indexOf(item) === index7;
  });
}
function getBasePlacement2(placement) {
  return placement.split("-")[0];
}
function arrayFrom(value) {
  return [].slice.call(value);
}
function removeUndefinedProps(obj) {
  return Object.keys(obj).reduce(function(acc, key2) {
    if (obj[key2] !== void 0) {
      acc[key2] = obj[key2];
    }
    return acc;
  }, {});
}
function div() {
  return document.createElement("div");
}
function isElement2(value) {
  return ["Element", "Fragment"].some(function(type) {
    return isType(value, type);
  });
}
function isNodeList(value) {
  return isType(value, "NodeList");
}
function isMouseEvent(value) {
  return isType(value, "MouseEvent");
}
function isReferenceElement(value) {
  return !!(value && value._tippy && value._tippy.reference === value);
}
function getArrayOfElements(value) {
  if (isElement2(value)) {
    return [value];
  }
  if (isNodeList(value)) {
    return arrayFrom(value);
  }
  if (Array.isArray(value)) {
    return value;
  }
  return arrayFrom(document.querySelectorAll(value));
}
function setTransitionDuration(els, value) {
  els.forEach(function(el) {
    if (el) {
      el.style.transitionDuration = value + "ms";
    }
  });
}
function setVisibilityState(els, state) {
  els.forEach(function(el) {
    if (el) {
      el.setAttribute("data-state", state);
    }
  });
}
function getOwnerDocument(elementOrElements) {
  var _element$ownerDocumen;
  var _normalizeToArray = normalizeToArray(elementOrElements), element7 = _normalizeToArray[0];
  return element7 != null && (_element$ownerDocumen = element7.ownerDocument) != null && _element$ownerDocumen.body ? element7.ownerDocument : document;
}
function isCursorOutsideInteractiveBorder(popperTreeData, event) {
  var clientX = event.clientX, clientY = event.clientY;
  return popperTreeData.every(function(_ref) {
    var popperRect = _ref.popperRect, popperState = _ref.popperState, props = _ref.props;
    var interactiveBorder = props.interactiveBorder;
    var basePlacement = getBasePlacement2(popperState.placement);
    var offsetData = popperState.modifiersData.offset;
    if (!offsetData) {
      return true;
    }
    var topDistance = basePlacement === "bottom" ? offsetData.top.y : 0;
    var bottomDistance = basePlacement === "top" ? offsetData.bottom.y : 0;
    var leftDistance = basePlacement === "right" ? offsetData.left.x : 0;
    var rightDistance = basePlacement === "left" ? offsetData.right.x : 0;
    var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
    var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
    var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
    var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
    return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
  });
}
function updateTransitionEndListener(box, action, listener) {
  var method = action + "EventListener";
  ["transitionend", "webkitTransitionEnd"].forEach(function(event) {
    box[method](event, listener);
  });
}
function actualContains(parent, child) {
  var target = child;
  while (target) {
    var _target$getRootNode;
    if (parent.contains(target)) {
      return true;
    }
    target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
  }
  return false;
}
var currentInput = {
  isTouch: false
};
var lastMouseMoveTime = 0;
function onDocumentTouchStart() {
  if (currentInput.isTouch) {
    return;
  }
  currentInput.isTouch = true;
  if (window.performance) {
    document.addEventListener("mousemove", onDocumentMouseMove);
  }
}
function onDocumentMouseMove() {
  var now = performance.now();
  if (now - lastMouseMoveTime < 20) {
    currentInput.isTouch = false;
    document.removeEventListener("mousemove", onDocumentMouseMove);
  }
  lastMouseMoveTime = now;
}
function onWindowBlur() {
  var activeElement2 = document.activeElement;
  if (isReferenceElement(activeElement2)) {
    var instance = activeElement2._tippy;
    if (activeElement2.blur && !instance.state.isVisible) {
      activeElement2.blur();
    }
  }
}
function bindGlobalEventListeners() {
  document.addEventListener("touchstart", onDocumentTouchStart, TOUCH_OPTIONS);
  window.addEventListener("blur", onWindowBlur);
}
var isBrowser = typeof window !== "undefined" && typeof document !== "undefined";
var isIE11 = isBrowser ? (
  // @ts-ignore
  !!window.msCrypto
) : false;
function createMemoryLeakWarning(method) {
  var txt = method === "destroy" ? "n already-" : " ";
  return [method + "() was called on a" + txt + "destroyed instance. This is a no-op but", "indicates a potential memory leak."].join(" ");
}
function clean(value) {
  var spacesAndTabs = /[ \t]{2,}/g;
  var lineStartWithSpaces = /^[ \t]*/gm;
  return value.replace(spacesAndTabs, " ").replace(lineStartWithSpaces, "").trim();
}
function getDevMessage(message) {
  return clean("\n  %ctippy.js\n\n  %c" + clean(message) + "\n\n  %c👷‍ This is a development-only message. It will be removed in production.\n  ");
}
function getFormattedMessage(message) {
  return [
    getDevMessage(message),
    // title
    "color: #00C584; font-size: 1.3em; font-weight: bold;",
    // message
    "line-height: 1.5",
    // footer
    "color: #a6a095;"
  ];
}
var visitedMessages;
if (true) {
  resetVisitedMessages();
}
function resetVisitedMessages() {
  visitedMessages = /* @__PURE__ */ new Set();
}
function warnWhen(condition, message) {
  if (condition && !visitedMessages.has(message)) {
    var _console;
    visitedMessages.add(message);
    (_console = console).warn.apply(_console, getFormattedMessage(message));
  }
}
function errorWhen(condition, message) {
  if (condition && !visitedMessages.has(message)) {
    var _console2;
    visitedMessages.add(message);
    (_console2 = console).error.apply(_console2, getFormattedMessage(message));
  }
}
function validateTargets(targets) {
  var didPassFalsyValue = !targets;
  var didPassPlainObject = Object.prototype.toString.call(targets) === "[object Object]" && !targets.addEventListener;
  errorWhen(didPassFalsyValue, ["tippy() was passed", "`" + String(targets) + "`", "as its targets (first) argument. Valid types are: String, Element,", "Element[], or NodeList."].join(" "));
  errorWhen(didPassPlainObject, ["tippy() was passed a plain object which is not supported as an argument", "for virtual positioning. Use props.getReferenceClientRect instead."].join(" "));
}
var pluginProps = {
  animateFill: false,
  followCursor: false,
  inlinePositioning: false,
  sticky: false
};
var renderProps = {
  allowHTML: false,
  animation: "fade",
  arrow: true,
  content: "",
  inertia: false,
  maxWidth: 350,
  role: "tooltip",
  theme: "",
  zIndex: 9999
};
var defaultProps = Object.assign({
  appendTo: TIPPY_DEFAULT_APPEND_TO,
  aria: {
    content: "auto",
    expanded: "auto"
  },
  delay: 0,
  duration: [300, 250],
  getReferenceClientRect: null,
  hideOnClick: true,
  ignoreAttributes: false,
  interactive: false,
  interactiveBorder: 2,
  interactiveDebounce: 0,
  moveTransition: "",
  offset: [0, 10],
  onAfterUpdate: function onAfterUpdate() {
  },
  onBeforeUpdate: function onBeforeUpdate() {
  },
  onCreate: function onCreate() {
  },
  onDestroy: function onDestroy() {
  },
  onHidden: function onHidden() {
  },
  onHide: function onHide() {
  },
  onMount: function onMount() {
  },
  onShow: function onShow() {
  },
  onShown: function onShown() {
  },
  onTrigger: function onTrigger() {
  },
  onUntrigger: function onUntrigger() {
  },
  onClickOutside: function onClickOutside() {
  },
  placement: "top",
  plugins: [],
  popperOptions: {},
  render: null,
  showOnCreate: false,
  touch: true,
  trigger: "mouseenter focus",
  triggerTarget: null
}, pluginProps, renderProps);
var defaultKeys = Object.keys(defaultProps);
var setDefaultProps = function setDefaultProps2(partialProps) {
  if (true) {
    validateProps(partialProps, []);
  }
  var keys5 = Object.keys(partialProps);
  keys5.forEach(function(key2) {
    defaultProps[key2] = partialProps[key2];
  });
};
function getExtendedPassedProps(passedProps) {
  var plugins = passedProps.plugins || [];
  var pluginProps2 = plugins.reduce(function(acc, plugin) {
    var name = plugin.name, defaultValue = plugin.defaultValue;
    if (name) {
      var _name;
      acc[name] = passedProps[name] !== void 0 ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
    }
    return acc;
  }, {});
  return Object.assign({}, passedProps, pluginProps2);
}
function getDataAttributeProps(reference2, plugins) {
  var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
    plugins
  }))) : defaultKeys;
  var props = propKeys.reduce(function(acc, key2) {
    var valueAsString = (reference2.getAttribute("data-tippy-" + key2) || "").trim();
    if (!valueAsString) {
      return acc;
    }
    if (key2 === "content") {
      acc[key2] = valueAsString;
    } else {
      try {
        acc[key2] = JSON.parse(valueAsString);
      } catch (e) {
        acc[key2] = valueAsString;
      }
    }
    return acc;
  }, {});
  return props;
}
function evaluateProps(reference2, props) {
  var out = Object.assign({}, props, {
    content: invokeWithArgsOrReturn(props.content, [reference2])
  }, props.ignoreAttributes ? {} : getDataAttributeProps(reference2, props.plugins));
  out.aria = Object.assign({}, defaultProps.aria, out.aria);
  out.aria = {
    expanded: out.aria.expanded === "auto" ? props.interactive : out.aria.expanded,
    content: out.aria.content === "auto" ? props.interactive ? null : "describedby" : out.aria.content
  };
  return out;
}
function validateProps(partialProps, plugins) {
  if (partialProps === void 0) {
    partialProps = {};
  }
  if (plugins === void 0) {
    plugins = [];
  }
  var keys5 = Object.keys(partialProps);
  keys5.forEach(function(prop) {
    var nonPluginProps = removeProperties(defaultProps, Object.keys(pluginProps));
    var didPassUnknownProp = !hasOwnProperty(nonPluginProps, prop);
    if (didPassUnknownProp) {
      didPassUnknownProp = plugins.filter(function(plugin) {
        return plugin.name === prop;
      }).length === 0;
    }
    warnWhen(didPassUnknownProp, ["`" + prop + "`", "is not a valid prop. You may have spelled it incorrectly, or if it's", "a plugin, forgot to pass it in an array as props.plugins.", "\n\n", "All props: https://atomiks.github.io/tippyjs/v6/all-props/\n", "Plugins: https://atomiks.github.io/tippyjs/v6/plugins/"].join(" "));
  });
}
var innerHTML = function innerHTML2() {
  return "innerHTML";
};
function dangerouslySetInnerHTML(element7, html7) {
  element7[innerHTML()] = html7;
}
function createArrowElement(value) {
  var arrow5 = div();
  if (value === true) {
    arrow5.className = ARROW_CLASS;
  } else {
    arrow5.className = SVG_ARROW_CLASS;
    if (isElement2(value)) {
      arrow5.appendChild(value);
    } else {
      dangerouslySetInnerHTML(arrow5, value);
    }
  }
  return arrow5;
}
function setContent2(content5, props) {
  if (isElement2(props.content)) {
    dangerouslySetInnerHTML(content5, "");
    content5.appendChild(props.content);
  } else if (typeof props.content !== "function") {
    if (props.allowHTML) {
      dangerouslySetInnerHTML(content5, props.content);
    } else {
      content5.textContent = props.content;
    }
  }
}
function getChildren(popper2) {
  var box = popper2.firstElementChild;
  var boxChildren = arrayFrom(box.children);
  return {
    box,
    content: boxChildren.find(function(node4) {
      return node4.classList.contains(CONTENT_CLASS);
    }),
    arrow: boxChildren.find(function(node4) {
      return node4.classList.contains(ARROW_CLASS) || node4.classList.contains(SVG_ARROW_CLASS);
    }),
    backdrop: boxChildren.find(function(node4) {
      return node4.classList.contains(BACKDROP_CLASS);
    })
  };
}
function render(instance) {
  var popper2 = div();
  var box = div();
  box.className = BOX_CLASS;
  box.setAttribute("data-state", "hidden");
  box.setAttribute("tabindex", "-1");
  var content5 = div();
  content5.className = CONTENT_CLASS;
  content5.setAttribute("data-state", "hidden");
  setContent2(content5, instance.props);
  popper2.appendChild(box);
  box.appendChild(content5);
  onUpdate(instance.props, instance.props);
  function onUpdate(prevProps, nextProps) {
    var _getChildren = getChildren(popper2), box2 = _getChildren.box, content6 = _getChildren.content, arrow5 = _getChildren.arrow;
    if (nextProps.theme) {
      box2.setAttribute("data-theme", nextProps.theme);
    } else {
      box2.removeAttribute("data-theme");
    }
    if (typeof nextProps.animation === "string") {
      box2.setAttribute("data-animation", nextProps.animation);
    } else {
      box2.removeAttribute("data-animation");
    }
    if (nextProps.inertia) {
      box2.setAttribute("data-inertia", "");
    } else {
      box2.removeAttribute("data-inertia");
    }
    box2.style.maxWidth = typeof nextProps.maxWidth === "number" ? nextProps.maxWidth + "px" : nextProps.maxWidth;
    if (nextProps.role) {
      box2.setAttribute("role", nextProps.role);
    } else {
      box2.removeAttribute("role");
    }
    if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
      setContent2(content6, instance.props);
    }
    if (nextProps.arrow) {
      if (!arrow5) {
        box2.appendChild(createArrowElement(nextProps.arrow));
      } else if (prevProps.arrow !== nextProps.arrow) {
        box2.removeChild(arrow5);
        box2.appendChild(createArrowElement(nextProps.arrow));
      }
    } else if (arrow5) {
      box2.removeChild(arrow5);
    }
  }
  return {
    popper: popper2,
    onUpdate
  };
}
render.$$tippy = true;
var idCounter = 1;
var mouseMoveListeners = [];
var mountedInstances = [];
function createTippy(reference2, passedProps) {
  var props = evaluateProps(reference2, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps))));
  var showTimeout;
  var hideTimeout;
  var scheduleHideAnimationFrame;
  var isVisibleFromClick = false;
  var didHideDueToDocumentMouseDown = false;
  var didTouchMove = false;
  var ignoreOnFirstUpdate = false;
  var lastTriggerEvent;
  var currentTransitionEndListener;
  var onFirstUpdate;
  var listeners = [];
  var debouncedOnMouseMove = debounce2(onMouseMove, props.interactiveDebounce);
  var currentTarget;
  var id2 = idCounter++;
  var popperInstance = null;
  var plugins = unique(props.plugins);
  var state = {
    // Is the instance currently enabled?
    isEnabled: true,
    // Is the tippy currently showing and not transitioning out?
    isVisible: false,
    // Has the instance been destroyed?
    isDestroyed: false,
    // Is the tippy currently mounted to the DOM?
    isMounted: false,
    // Has the tippy finished transitioning in?
    isShown: false
  };
  var instance = {
    // properties
    id: id2,
    reference: reference2,
    popper: div(),
    popperInstance,
    props,
    state,
    plugins,
    // methods
    clearDelayTimeouts,
    setProps,
    setContent: setContent3,
    show,
    hide: hide3,
    hideWithInteractivity,
    enable,
    disable: disable2,
    unmount,
    destroy
  };
  if (!props.render) {
    if (true) {
      errorWhen(true, "render() function has not been supplied.");
    }
    return instance;
  }
  var _props$render = props.render(instance), popper2 = _props$render.popper, onUpdate = _props$render.onUpdate;
  popper2.setAttribute("data-tippy-root", "");
  popper2.id = "tippy-" + instance.id;
  instance.popper = popper2;
  reference2._tippy = instance;
  popper2._tippy = instance;
  var pluginsHooks = plugins.map(function(plugin) {
    return plugin.fn(instance);
  });
  var hasAriaExpanded = reference2.hasAttribute("aria-expanded");
  addListeners();
  handleAriaExpandedAttribute();
  handleStyles();
  invokeHook("onCreate", [instance]);
  if (props.showOnCreate) {
    scheduleShow();
  }
  popper2.addEventListener("mouseenter", function() {
    if (instance.props.interactive && instance.state.isVisible) {
      instance.clearDelayTimeouts();
    }
  });
  popper2.addEventListener("mouseleave", function() {
    if (instance.props.interactive && instance.props.trigger.indexOf("mouseenter") >= 0) {
      getDocument2().addEventListener("mousemove", debouncedOnMouseMove);
    }
  });
  return instance;
  function getNormalizedTouchSettings() {
    var touch = instance.props.touch;
    return Array.isArray(touch) ? touch : [touch, 0];
  }
  function getIsCustomTouchBehavior() {
    return getNormalizedTouchSettings()[0] === "hold";
  }
  function getIsDefaultRenderFn() {
    var _instance$props$rende;
    return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
  }
  function getCurrentTarget() {
    return currentTarget || reference2;
  }
  function getDocument2() {
    var parent = getCurrentTarget().parentNode;
    return parent ? getOwnerDocument(parent) : document;
  }
  function getDefaultTemplateChildren() {
    return getChildren(popper2);
  }
  function getDelay2(isShow) {
    if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === "focus") {
      return 0;
    }
    return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
  }
  function handleStyles(fromHide) {
    if (fromHide === void 0) {
      fromHide = false;
    }
    popper2.style.pointerEvents = instance.props.interactive && !fromHide ? "" : "none";
    popper2.style.zIndex = "" + instance.props.zIndex;
  }
  function invokeHook(hook, args2, shouldInvokePropsHook) {
    if (shouldInvokePropsHook === void 0) {
      shouldInvokePropsHook = true;
    }
    pluginsHooks.forEach(function(pluginHooks) {
      if (pluginHooks[hook]) {
        pluginHooks[hook].apply(pluginHooks, args2);
      }
    });
    if (shouldInvokePropsHook) {
      var _instance$props;
      (_instance$props = instance.props)[hook].apply(_instance$props, args2);
    }
  }
  function handleAriaContentAttribute() {
    var aria2 = instance.props.aria;
    if (!aria2.content) {
      return;
    }
    var attr = "aria-" + aria2.content;
    var id3 = popper2.id;
    var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
    nodes.forEach(function(node4) {
      var currentValue = node4.getAttribute(attr);
      if (instance.state.isVisible) {
        node4.setAttribute(attr, currentValue ? currentValue + " " + id3 : id3);
      } else {
        var nextValue = currentValue && currentValue.replace(id3, "").trim();
        if (nextValue) {
          node4.setAttribute(attr, nextValue);
        } else {
          node4.removeAttribute(attr);
        }
      }
    });
  }
  function handleAriaExpandedAttribute() {
    if (hasAriaExpanded || !instance.props.aria.expanded) {
      return;
    }
    var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
    nodes.forEach(function(node4) {
      if (instance.props.interactive) {
        node4.setAttribute("aria-expanded", instance.state.isVisible && node4 === getCurrentTarget() ? "true" : "false");
      } else {
        node4.removeAttribute("aria-expanded");
      }
    });
  }
  function cleanupInteractiveMouseListeners() {
    getDocument2().removeEventListener("mousemove", debouncedOnMouseMove);
    mouseMoveListeners = mouseMoveListeners.filter(function(listener) {
      return listener !== debouncedOnMouseMove;
    });
  }
  function onDocumentPress(event) {
    if (currentInput.isTouch) {
      if (didTouchMove || event.type === "mousedown") {
        return;
      }
    }
    var actualTarget = event.composedPath && event.composedPath()[0] || event.target;
    if (instance.props.interactive && actualContains(popper2, actualTarget)) {
      return;
    }
    if (normalizeToArray(instance.props.triggerTarget || reference2).some(function(el) {
      return actualContains(el, actualTarget);
    })) {
      if (currentInput.isTouch) {
        return;
      }
      if (instance.state.isVisible && instance.props.trigger.indexOf("click") >= 0) {
        return;
      }
    } else {
      invokeHook("onClickOutside", [instance, event]);
    }
    if (instance.props.hideOnClick === true) {
      instance.clearDelayTimeouts();
      instance.hide();
      didHideDueToDocumentMouseDown = true;
      setTimeout(function() {
        didHideDueToDocumentMouseDown = false;
      });
      if (!instance.state.isMounted) {
        removeDocumentPress();
      }
    }
  }
  function onTouchMove() {
    didTouchMove = true;
  }
  function onTouchStart() {
    didTouchMove = false;
  }
  function addDocumentPress() {
    var doc4 = getDocument2();
    doc4.addEventListener("mousedown", onDocumentPress, true);
    doc4.addEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
    doc4.addEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
    doc4.addEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
  }
  function removeDocumentPress() {
    var doc4 = getDocument2();
    doc4.removeEventListener("mousedown", onDocumentPress, true);
    doc4.removeEventListener("touchend", onDocumentPress, TOUCH_OPTIONS);
    doc4.removeEventListener("touchstart", onTouchStart, TOUCH_OPTIONS);
    doc4.removeEventListener("touchmove", onTouchMove, TOUCH_OPTIONS);
  }
  function onTransitionedOut(duration, callback) {
    onTransitionEnd(duration, function() {
      if (!instance.state.isVisible && popper2.parentNode && popper2.parentNode.contains(popper2)) {
        callback();
      }
    });
  }
  function onTransitionedIn(duration, callback) {
    onTransitionEnd(duration, callback);
  }
  function onTransitionEnd(duration, callback) {
    var box = getDefaultTemplateChildren().box;
    function listener(event) {
      if (event.target === box) {
        updateTransitionEndListener(box, "remove", listener);
        callback();
      }
    }
    if (duration === 0) {
      return callback();
    }
    updateTransitionEndListener(box, "remove", currentTransitionEndListener);
    updateTransitionEndListener(box, "add", listener);
    currentTransitionEndListener = listener;
  }
  function on(eventType, handler, options2) {
    if (options2 === void 0) {
      options2 = false;
    }
    var nodes = normalizeToArray(instance.props.triggerTarget || reference2);
    nodes.forEach(function(node4) {
      node4.addEventListener(eventType, handler, options2);
      listeners.push({
        node: node4,
        eventType,
        handler,
        options: options2
      });
    });
  }
  function addListeners() {
    if (getIsCustomTouchBehavior()) {
      on("touchstart", onTrigger2, {
        passive: true
      });
      on("touchend", onMouseLeave, {
        passive: true
      });
    }
    splitBySpaces(instance.props.trigger).forEach(function(eventType) {
      if (eventType === "manual") {
        return;
      }
      on(eventType, onTrigger2);
      switch (eventType) {
        case "mouseenter":
          on("mouseleave", onMouseLeave);
          break;
        case "focus":
          on(isIE11 ? "focusout" : "blur", onBlurOrFocusOut);
          break;
        case "focusin":
          on("focusout", onBlurOrFocusOut);
          break;
      }
    });
  }
  function removeListeners() {
    listeners.forEach(function(_ref) {
      var node4 = _ref.node, eventType = _ref.eventType, handler = _ref.handler, options2 = _ref.options;
      node4.removeEventListener(eventType, handler, options2);
    });
    listeners = [];
  }
  function onTrigger2(event) {
    var _lastTriggerEvent;
    var shouldScheduleClickHide = false;
    if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
      return;
    }
    var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === "focus";
    lastTriggerEvent = event;
    currentTarget = event.currentTarget;
    handleAriaExpandedAttribute();
    if (!instance.state.isVisible && isMouseEvent(event)) {
      mouseMoveListeners.forEach(function(listener) {
        return listener(event);
      });
    }
    if (event.type === "click" && (instance.props.trigger.indexOf("mouseenter") < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
      shouldScheduleClickHide = true;
    } else {
      scheduleShow(event);
    }
    if (event.type === "click") {
      isVisibleFromClick = !shouldScheduleClickHide;
    }
    if (shouldScheduleClickHide && !wasFocused) {
      scheduleHide(event);
    }
  }
  function onMouseMove(event) {
    var target = event.target;
    var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper2.contains(target);
    if (event.type === "mousemove" && isCursorOverReferenceOrPopper) {
      return;
    }
    var popperTreeData = getNestedPopperTree().concat(popper2).map(function(popper3) {
      var _instance$popperInsta;
      var instance2 = popper3._tippy;
      var state2 = (_instance$popperInsta = instance2.popperInstance) == null ? void 0 : _instance$popperInsta.state;
      if (state2) {
        return {
          popperRect: popper3.getBoundingClientRect(),
          popperState: state2,
          props
        };
      }
      return null;
    }).filter(Boolean);
    if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
      cleanupInteractiveMouseListeners();
      scheduleHide(event);
    }
  }
  function onMouseLeave(event) {
    var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf("click") >= 0 && isVisibleFromClick;
    if (shouldBail) {
      return;
    }
    if (instance.props.interactive) {
      instance.hideWithInteractivity(event);
      return;
    }
    scheduleHide(event);
  }
  function onBlurOrFocusOut(event) {
    if (instance.props.trigger.indexOf("focusin") < 0 && event.target !== getCurrentTarget()) {
      return;
    }
    if (instance.props.interactive && event.relatedTarget && popper2.contains(event.relatedTarget)) {
      return;
    }
    scheduleHide(event);
  }
  function isEventListenerStopped(event) {
    return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf("touch") >= 0 : false;
  }
  function createPopperInstance() {
    destroyPopperInstance();
    var _instance$props2 = instance.props, popperOptions = _instance$props2.popperOptions, placement = _instance$props2.placement, offset3 = _instance$props2.offset, getReferenceClientRect = _instance$props2.getReferenceClientRect, moveTransition = _instance$props2.moveTransition;
    var arrow5 = getIsDefaultRenderFn() ? getChildren(popper2).arrow : null;
    var computedReference = getReferenceClientRect ? {
      getBoundingClientRect: getReferenceClientRect,
      contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
    } : reference2;
    var tippyModifier = {
      name: "$$tippy",
      enabled: true,
      phase: "beforeWrite",
      requires: ["computeStyles"],
      fn: function fn3(_ref2) {
        var state2 = _ref2.state;
        if (getIsDefaultRenderFn()) {
          var _getDefaultTemplateCh = getDefaultTemplateChildren(), box = _getDefaultTemplateCh.box;
          ["placement", "reference-hidden", "escaped"].forEach(function(attr) {
            if (attr === "placement") {
              box.setAttribute("data-placement", state2.placement);
            } else {
              if (state2.attributes.popper["data-popper-" + attr]) {
                box.setAttribute("data-" + attr, "");
              } else {
                box.removeAttribute("data-" + attr);
              }
            }
          });
          state2.attributes.popper = {};
        }
      }
    };
    var modifiers2 = [{
      name: "offset",
      options: {
        offset: offset3
      }
    }, {
      name: "preventOverflow",
      options: {
        padding: {
          top: 2,
          bottom: 2,
          left: 5,
          right: 5
        }
      }
    }, {
      name: "flip",
      options: {
        padding: 5
      }
    }, {
      name: "computeStyles",
      options: {
        adaptive: !moveTransition
      }
    }, tippyModifier];
    if (getIsDefaultRenderFn() && arrow5) {
      modifiers2.push({
        name: "arrow",
        options: {
          element: arrow5,
          padding: 3
        }
      });
    }
    modifiers2.push.apply(modifiers2, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
    instance.popperInstance = createPopper3(computedReference, popper2, Object.assign({}, popperOptions, {
      placement,
      onFirstUpdate,
      modifiers: modifiers2
    }));
  }
  function destroyPopperInstance() {
    if (instance.popperInstance) {
      instance.popperInstance.destroy();
      instance.popperInstance = null;
    }
  }
  function mount() {
    var appendTo2 = instance.props.appendTo;
    var parentNode2;
    var node4 = getCurrentTarget();
    if (instance.props.interactive && appendTo2 === TIPPY_DEFAULT_APPEND_TO || appendTo2 === "parent") {
      parentNode2 = node4.parentNode;
    } else {
      parentNode2 = invokeWithArgsOrReturn(appendTo2, [node4]);
    }
    if (!parentNode2.contains(popper2)) {
      parentNode2.appendChild(popper2);
    }
    instance.state.isMounted = true;
    createPopperInstance();
    if (true) {
      warnWhen(instance.props.interactive && appendTo2 === defaultProps.appendTo && node4.nextElementSibling !== popper2, ["Interactive tippy element may not be accessible via keyboard", "navigation because it is not directly after the reference element", "in the DOM source order.", "\n\n", "Using a wrapper <div> or <span> tag around the reference element", "solves this by creating a new parentNode context.", "\n\n", "Specifying `appendTo: document.body` silences this warning, but it", "assumes you are using a focus management solution to handle", "keyboard navigation.", "\n\n", "See: https://atomiks.github.io/tippyjs/v6/accessibility/#interactivity"].join(" "));
    }
  }
  function getNestedPopperTree() {
    return arrayFrom(popper2.querySelectorAll("[data-tippy-root]"));
  }
  function scheduleShow(event) {
    instance.clearDelayTimeouts();
    if (event) {
      invokeHook("onTrigger", [instance, event]);
    }
    addDocumentPress();
    var delay = getDelay2(true);
    var _getNormalizedTouchSe = getNormalizedTouchSettings(), touchValue = _getNormalizedTouchSe[0], touchDelay = _getNormalizedTouchSe[1];
    if (currentInput.isTouch && touchValue === "hold" && touchDelay) {
      delay = touchDelay;
    }
    if (delay) {
      showTimeout = setTimeout(function() {
        instance.show();
      }, delay);
    } else {
      instance.show();
    }
  }
  function scheduleHide(event) {
    instance.clearDelayTimeouts();
    invokeHook("onUntrigger", [instance, event]);
    if (!instance.state.isVisible) {
      removeDocumentPress();
      return;
    }
    if (instance.props.trigger.indexOf("mouseenter") >= 0 && instance.props.trigger.indexOf("click") >= 0 && ["mouseleave", "mousemove"].indexOf(event.type) >= 0 && isVisibleFromClick) {
      return;
    }
    var delay = getDelay2(false);
    if (delay) {
      hideTimeout = setTimeout(function() {
        if (instance.state.isVisible) {
          instance.hide();
        }
      }, delay);
    } else {
      scheduleHideAnimationFrame = requestAnimationFrame(function() {
        instance.hide();
      });
    }
  }
  function enable() {
    instance.state.isEnabled = true;
  }
  function disable2() {
    instance.hide();
    instance.state.isEnabled = false;
  }
  function clearDelayTimeouts() {
    clearTimeout(showTimeout);
    clearTimeout(hideTimeout);
    cancelAnimationFrame(scheduleHideAnimationFrame);
  }
  function setProps(partialProps) {
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("setProps"));
    }
    if (instance.state.isDestroyed) {
      return;
    }
    invokeHook("onBeforeUpdate", [instance, partialProps]);
    removeListeners();
    var prevProps = instance.props;
    var nextProps = evaluateProps(reference2, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
      ignoreAttributes: true
    }));
    instance.props = nextProps;
    addListeners();
    if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
      cleanupInteractiveMouseListeners();
      debouncedOnMouseMove = debounce2(onMouseMove, nextProps.interactiveDebounce);
    }
    if (prevProps.triggerTarget && !nextProps.triggerTarget) {
      normalizeToArray(prevProps.triggerTarget).forEach(function(node4) {
        node4.removeAttribute("aria-expanded");
      });
    } else if (nextProps.triggerTarget) {
      reference2.removeAttribute("aria-expanded");
    }
    handleAriaExpandedAttribute();
    handleStyles();
    if (onUpdate) {
      onUpdate(prevProps, nextProps);
    }
    if (instance.popperInstance) {
      createPopperInstance();
      getNestedPopperTree().forEach(function(nestedPopper) {
        requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
      });
    }
    invokeHook("onAfterUpdate", [instance, partialProps]);
  }
  function setContent3(content5) {
    instance.setProps({
      content: content5
    });
  }
  function show() {
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("show"));
    }
    var isAlreadyVisible = instance.state.isVisible;
    var isDestroyed = instance.state.isDestroyed;
    var isDisabled = !instance.state.isEnabled;
    var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
    var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);
    if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
      return;
    }
    if (getCurrentTarget().hasAttribute("disabled")) {
      return;
    }
    invokeHook("onShow", [instance], false);
    if (instance.props.onShow(instance) === false) {
      return;
    }
    instance.state.isVisible = true;
    if (getIsDefaultRenderFn()) {
      popper2.style.visibility = "visible";
    }
    handleStyles();
    addDocumentPress();
    if (!instance.state.isMounted) {
      popper2.style.transition = "none";
    }
    if (getIsDefaultRenderFn()) {
      var _getDefaultTemplateCh2 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh2.box, content5 = _getDefaultTemplateCh2.content;
      setTransitionDuration([box, content5], 0);
    }
    onFirstUpdate = function onFirstUpdate2() {
      var _instance$popperInsta2;
      if (!instance.state.isVisible || ignoreOnFirstUpdate) {
        return;
      }
      ignoreOnFirstUpdate = true;
      void popper2.offsetHeight;
      popper2.style.transition = instance.props.moveTransition;
      if (getIsDefaultRenderFn() && instance.props.animation) {
        var _getDefaultTemplateCh3 = getDefaultTemplateChildren(), _box = _getDefaultTemplateCh3.box, _content = _getDefaultTemplateCh3.content;
        setTransitionDuration([_box, _content], duration);
        setVisibilityState([_box, _content], "visible");
      }
      handleAriaContentAttribute();
      handleAriaExpandedAttribute();
      pushIfUnique(mountedInstances, instance);
      (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
      invokeHook("onMount", [instance]);
      if (instance.props.animation && getIsDefaultRenderFn()) {
        onTransitionedIn(duration, function() {
          instance.state.isShown = true;
          invokeHook("onShown", [instance]);
        });
      }
    };
    mount();
  }
  function hide3() {
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("hide"));
    }
    var isAlreadyHidden = !instance.state.isVisible;
    var isDestroyed = instance.state.isDestroyed;
    var isDisabled = !instance.state.isEnabled;
    var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);
    if (isAlreadyHidden || isDestroyed || isDisabled) {
      return;
    }
    invokeHook("onHide", [instance], false);
    if (instance.props.onHide(instance) === false) {
      return;
    }
    instance.state.isVisible = false;
    instance.state.isShown = false;
    ignoreOnFirstUpdate = false;
    isVisibleFromClick = false;
    if (getIsDefaultRenderFn()) {
      popper2.style.visibility = "hidden";
    }
    cleanupInteractiveMouseListeners();
    removeDocumentPress();
    handleStyles(true);
    if (getIsDefaultRenderFn()) {
      var _getDefaultTemplateCh4 = getDefaultTemplateChildren(), box = _getDefaultTemplateCh4.box, content5 = _getDefaultTemplateCh4.content;
      if (instance.props.animation) {
        setTransitionDuration([box, content5], duration);
        setVisibilityState([box, content5], "hidden");
      }
    }
    handleAriaContentAttribute();
    handleAriaExpandedAttribute();
    if (instance.props.animation) {
      if (getIsDefaultRenderFn()) {
        onTransitionedOut(duration, instance.unmount);
      }
    } else {
      instance.unmount();
    }
  }
  function hideWithInteractivity(event) {
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("hideWithInteractivity"));
    }
    getDocument2().addEventListener("mousemove", debouncedOnMouseMove);
    pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
    debouncedOnMouseMove(event);
  }
  function unmount() {
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("unmount"));
    }
    if (instance.state.isVisible) {
      instance.hide();
    }
    if (!instance.state.isMounted) {
      return;
    }
    destroyPopperInstance();
    getNestedPopperTree().forEach(function(nestedPopper) {
      nestedPopper._tippy.unmount();
    });
    if (popper2.parentNode) {
      popper2.parentNode.removeChild(popper2);
    }
    mountedInstances = mountedInstances.filter(function(i) {
      return i !== instance;
    });
    instance.state.isMounted = false;
    invokeHook("onHidden", [instance]);
  }
  function destroy() {
    if (true) {
      warnWhen(instance.state.isDestroyed, createMemoryLeakWarning("destroy"));
    }
    if (instance.state.isDestroyed) {
      return;
    }
    instance.clearDelayTimeouts();
    instance.unmount();
    removeListeners();
    delete reference2._tippy;
    instance.state.isDestroyed = true;
    invokeHook("onDestroy", [instance]);
  }
}
function tippy(targets, optionalProps) {
  if (optionalProps === void 0) {
    optionalProps = {};
  }
  var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);
  if (true) {
    validateTargets(targets);
    validateProps(optionalProps, plugins);
  }
  bindGlobalEventListeners();
  var passedProps = Object.assign({}, optionalProps, {
    plugins
  });
  var elements = getArrayOfElements(targets);
  if (true) {
    var isSingleContentElement = isElement2(passedProps.content);
    var isMoreThanOneReferenceElement = elements.length > 1;
    warnWhen(isSingleContentElement && isMoreThanOneReferenceElement, ["tippy() was passed an Element as the `content` prop, but more than", "one tippy instance was created by this invocation. This means the", "content element will only be appended to the last tippy instance.", "\n\n", "Instead, pass the .innerHTML of the element, or use a function that", "returns a cloned version of the element instead.", "\n\n", "1) content: element.innerHTML\n", "2) content: () => element.cloneNode(true)"].join(" "));
  }
  var instances = elements.reduce(function(acc, reference2) {
    var instance = reference2 && createTippy(reference2, passedProps);
    if (instance) {
      acc.push(instance);
    }
    return acc;
  }, []);
  return isElement2(targets) ? instances[0] : instances;
}
tippy.defaultProps = defaultProps;
tippy.setDefaultProps = setDefaultProps;
tippy.currentInput = currentInput;
var applyStylesModifier = Object.assign({}, applyStyles_default, {
  effect: function effect4(_ref) {
    var state = _ref.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
  }
});
var createSingleton = function createSingleton2(tippyInstances, optionalProps) {
  var _optionalProps$popper;
  if (optionalProps === void 0) {
    optionalProps = {};
  }
  if (true) {
    errorWhen(!Array.isArray(tippyInstances), ["The first argument passed to createSingleton() must be an array of", "tippy instances. The passed value was", String(tippyInstances)].join(" "));
  }
  var individualInstances = tippyInstances;
  var references = [];
  var triggerTargets = [];
  var currentTarget;
  var overrides = optionalProps.overrides;
  var interceptSetPropsCleanups = [];
  var shownOnCreate = false;
  function setTriggerTargets() {
    triggerTargets = individualInstances.map(function(instance) {
      return normalizeToArray(instance.props.triggerTarget || instance.reference);
    }).reduce(function(acc, item) {
      return acc.concat(item);
    }, []);
  }
  function setReferences() {
    references = individualInstances.map(function(instance) {
      return instance.reference;
    });
  }
  function enableInstances(isEnabled) {
    individualInstances.forEach(function(instance) {
      if (isEnabled) {
        instance.enable();
      } else {
        instance.disable();
      }
    });
  }
  function interceptSetProps(singleton2) {
    return individualInstances.map(function(instance) {
      var originalSetProps2 = instance.setProps;
      instance.setProps = function(props) {
        originalSetProps2(props);
        if (instance.reference === currentTarget) {
          singleton2.setProps(props);
        }
      };
      return function() {
        instance.setProps = originalSetProps2;
      };
    });
  }
  function prepareInstance(singleton2, target) {
    var index7 = triggerTargets.indexOf(target);
    if (target === currentTarget) {
      return;
    }
    currentTarget = target;
    var overrideProps = (overrides || []).concat("content").reduce(function(acc, prop) {
      acc[prop] = individualInstances[index7].props[prop];
      return acc;
    }, {});
    singleton2.setProps(Object.assign({}, overrideProps, {
      getReferenceClientRect: typeof overrideProps.getReferenceClientRect === "function" ? overrideProps.getReferenceClientRect : function() {
        var _references$index;
        return (_references$index = references[index7]) == null ? void 0 : _references$index.getBoundingClientRect();
      }
    }));
  }
  enableInstances(false);
  setReferences();
  setTriggerTargets();
  var plugin = {
    fn: function fn3() {
      return {
        onDestroy: function onDestroy2() {
          enableInstances(true);
        },
        onHidden: function onHidden2() {
          currentTarget = null;
        },
        onClickOutside: function onClickOutside2(instance) {
          if (instance.props.showOnCreate && !shownOnCreate) {
            shownOnCreate = true;
            currentTarget = null;
          }
        },
        onShow: function onShow2(instance) {
          if (instance.props.showOnCreate && !shownOnCreate) {
            shownOnCreate = true;
            prepareInstance(instance, references[0]);
          }
        },
        onTrigger: function onTrigger2(instance, event) {
          prepareInstance(instance, event.currentTarget);
        }
      };
    }
  };
  var singleton = tippy(div(), Object.assign({}, removeProperties(optionalProps, ["overrides"]), {
    plugins: [plugin].concat(optionalProps.plugins || []),
    triggerTarget: triggerTargets,
    popperOptions: Object.assign({}, optionalProps.popperOptions, {
      modifiers: [].concat(((_optionalProps$popper = optionalProps.popperOptions) == null ? void 0 : _optionalProps$popper.modifiers) || [], [applyStylesModifier])
    })
  }));
  var originalShow = singleton.show;
  singleton.show = function(target) {
    originalShow();
    if (!currentTarget && target == null) {
      return prepareInstance(singleton, references[0]);
    }
    if (currentTarget && target == null) {
      return;
    }
    if (typeof target === "number") {
      return references[target] && prepareInstance(singleton, references[target]);
    }
    if (individualInstances.indexOf(target) >= 0) {
      var ref = target.reference;
      return prepareInstance(singleton, ref);
    }
    if (references.indexOf(target) >= 0) {
      return prepareInstance(singleton, target);
    }
  };
  singleton.showNext = function() {
    var first2 = references[0];
    if (!currentTarget) {
      return singleton.show(0);
    }
    var index7 = references.indexOf(currentTarget);
    singleton.show(references[index7 + 1] || first2);
  };
  singleton.showPrevious = function() {
    var last2 = references[references.length - 1];
    if (!currentTarget) {
      return singleton.show(last2);
    }
    var index7 = references.indexOf(currentTarget);
    var target = references[index7 - 1] || last2;
    singleton.show(target);
  };
  var originalSetProps = singleton.setProps;
  singleton.setProps = function(props) {
    overrides = props.overrides || overrides;
    originalSetProps(props);
  };
  singleton.setInstances = function(nextInstances) {
    enableInstances(true);
    interceptSetPropsCleanups.forEach(function(fn3) {
      return fn3();
    });
    individualInstances = nextInstances;
    enableInstances(false);
    setReferences();
    setTriggerTargets();
    interceptSetPropsCleanups = interceptSetProps(singleton);
    singleton.setProps({
      triggerTarget: triggerTargets
    });
  };
  interceptSetPropsCleanups = interceptSetProps(singleton);
  return singleton;
};
tippy.setDefaultProps({
  render
});
var tippy_esm_default = tippy;

// node_modules/@tiptap/extension-bubble-menu/dist/index.js
var BubbleMenuView = class {
  constructor({ editor, element: element7, view, tippyOptions = {}, updateDelay = 250, shouldShow }) {
    this.preventHide = false;
    this.shouldShow = ({ view: view2, state, from: from5, to: to3 }) => {
      const { doc: doc4, selection } = state;
      const { empty: empty2 } = selection;
      const isEmptyTextBlock = !doc4.textBetween(from5, to3).length && isTextSelection(state.selection);
      const isChildOfMenu = this.element.contains(document.activeElement);
      const hasEditorFocus = view2.hasFocus() || isChildOfMenu;
      if (!hasEditorFocus || empty2 || isEmptyTextBlock || !this.editor.isEditable) {
        return false;
      }
      return true;
    };
    this.mousedownHandler = () => {
      this.preventHide = true;
    };
    this.dragstartHandler = () => {
      this.hide();
    };
    this.focusHandler = () => {
      setTimeout(() => this.update(this.editor.view));
    };
    this.blurHandler = ({ event }) => {
      var _a;
      if (this.preventHide) {
        this.preventHide = false;
        return;
      }
      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
        return;
      }
      this.hide();
    };
    this.tippyBlurHandler = (event) => {
      this.blurHandler({ event });
    };
    this.handleDebouncedUpdate = (view2, oldState) => {
      const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view2.state.selection));
      const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view2.state.doc));
      if (!selectionChanged && !docChanged) {
        return;
      }
      if (this.updateDebounceTimer) {
        clearTimeout(this.updateDebounceTimer);
      }
      this.updateDebounceTimer = window.setTimeout(() => {
        this.updateHandler(view2, selectionChanged, docChanged, oldState);
      }, this.updateDelay);
    };
    this.updateHandler = (view2, selectionChanged, docChanged, oldState) => {
      var _a, _b, _c;
      const { state, composing } = view2;
      const { selection } = state;
      const isSame = !selectionChanged && !docChanged;
      if (composing || isSame) {
        return;
      }
      this.createTooltip();
      const { ranges } = selection;
      const from5 = Math.min(...ranges.map((range2) => range2.$from.pos));
      const to3 = Math.max(...ranges.map((range2) => range2.$to.pos));
      const shouldShow2 = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {
        editor: this.editor,
        view: view2,
        state,
        oldState,
        from: from5,
        to: to3
      });
      if (!shouldShow2) {
        this.hide();
        return;
      }
      (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({
        getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (() => {
          if (isNodeSelection(state.selection)) {
            let node4 = view2.nodeDOM(from5);
            const nodeViewWrapper = node4.dataset.nodeViewWrapper ? node4 : node4.querySelector("[data-node-view-wrapper]");
            if (nodeViewWrapper) {
              node4 = nodeViewWrapper.firstChild;
            }
            if (node4) {
              return node4.getBoundingClientRect();
            }
          }
          return posToDOMRect(view2, from5, to3);
        })
      });
      this.show();
    };
    this.editor = editor;
    this.element = element7;
    this.view = view;
    this.updateDelay = updateDelay;
    if (shouldShow) {
      this.shouldShow = shouldShow;
    }
    this.element.addEventListener("mousedown", this.mousedownHandler, { capture: true });
    this.view.dom.addEventListener("dragstart", this.dragstartHandler);
    this.editor.on("focus", this.focusHandler);
    this.editor.on("blur", this.blurHandler);
    this.tippyOptions = tippyOptions;
    this.element.remove();
    this.element.style.visibility = "visible";
  }
  createTooltip() {
    const { element: editorElement } = this.editor.options;
    const editorIsAttached = !!editorElement.parentElement;
    if (this.tippy || !editorIsAttached) {
      return;
    }
    this.tippy = tippy_esm_default(editorElement, {
      duration: 0,
      getReferenceClientRect: null,
      content: this.element,
      interactive: true,
      trigger: "manual",
      placement: "top",
      hideOnClick: "toggle",
      ...this.tippyOptions
    });
    if (this.tippy.popper.firstChild) {
      this.tippy.popper.firstChild.addEventListener("blur", this.tippyBlurHandler);
    }
  }
  update(view, oldState) {
    const { state } = view;
    const hasValidSelection = state.selection.$from.pos !== state.selection.$to.pos;
    if (this.updateDelay > 0 && hasValidSelection) {
      this.handleDebouncedUpdate(view, oldState);
      return;
    }
    const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));
    const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));
    this.updateHandler(view, selectionChanged, docChanged, oldState);
  }
  show() {
    var _a;
    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();
  }
  hide() {
    var _a;
    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();
  }
  destroy() {
    var _a, _b;
    if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {
      this.tippy.popper.firstChild.removeEventListener("blur", this.tippyBlurHandler);
    }
    (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();
    this.element.removeEventListener("mousedown", this.mousedownHandler, { capture: true });
    this.view.dom.removeEventListener("dragstart", this.dragstartHandler);
    this.editor.off("focus", this.focusHandler);
    this.editor.off("blur", this.blurHandler);
  }
};
var BubbleMenuPlugin = (options2) => {
  return new Plugin({
    key: typeof options2.pluginKey === "string" ? new PluginKey(options2.pluginKey) : options2.pluginKey,
    view: (view) => new BubbleMenuView({ view, ...options2 })
  });
};
var BubbleMenu = Extension.create({
  name: "bubbleMenu",
  addOptions() {
    return {
      element: null,
      tippyOptions: {},
      pluginKey: "bubbleMenu",
      updateDelay: void 0,
      shouldShow: null
    };
  },
  addProseMirrorPlugins() {
    if (!this.options.element) {
      return [];
    }
    return [
      BubbleMenuPlugin({
        pluginKey: this.options.pluginKey,
        editor: this.editor,
        element: this.options.element,
        tippyOptions: this.options.tippyOptions,
        updateDelay: this.options.updateDelay,
        shouldShow: this.options.shouldShow
      })
    ];
  }
});

// node_modules/@tiptap/react/dist/index.js
var import_react = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@tiptap/extension-floating-menu/dist/index.js
var FloatingMenuView = class {
  constructor({ editor, element: element7, view, tippyOptions = {}, shouldShow }) {
    this.preventHide = false;
    this.shouldShow = ({ view: view2, state }) => {
      const { selection } = state;
      const { $anchor, empty: empty2 } = selection;
      const isRootDepth = $anchor.depth === 1;
      const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent;
      if (!view2.hasFocus() || !empty2 || !isRootDepth || !isEmptyTextBlock || !this.editor.isEditable) {
        return false;
      }
      return true;
    };
    this.mousedownHandler = () => {
      this.preventHide = true;
    };
    this.focusHandler = () => {
      setTimeout(() => this.update(this.editor.view));
    };
    this.blurHandler = ({ event }) => {
      var _a;
      if (this.preventHide) {
        this.preventHide = false;
        return;
      }
      if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
        return;
      }
      this.hide();
    };
    this.tippyBlurHandler = (event) => {
      this.blurHandler({ event });
    };
    this.editor = editor;
    this.element = element7;
    this.view = view;
    if (shouldShow) {
      this.shouldShow = shouldShow;
    }
    this.element.addEventListener("mousedown", this.mousedownHandler, { capture: true });
    this.editor.on("focus", this.focusHandler);
    this.editor.on("blur", this.blurHandler);
    this.tippyOptions = tippyOptions;
    this.element.remove();
    this.element.style.visibility = "visible";
  }
  createTooltip() {
    const { element: editorElement } = this.editor.options;
    const editorIsAttached = !!editorElement.parentElement;
    if (this.tippy || !editorIsAttached) {
      return;
    }
    this.tippy = tippy_esm_default(editorElement, {
      duration: 0,
      getReferenceClientRect: null,
      content: this.element,
      interactive: true,
      trigger: "manual",
      placement: "right",
      hideOnClick: "toggle",
      ...this.tippyOptions
    });
    if (this.tippy.popper.firstChild) {
      this.tippy.popper.firstChild.addEventListener("blur", this.tippyBlurHandler);
    }
  }
  update(view, oldState) {
    var _a, _b, _c;
    const { state } = view;
    const { doc: doc4, selection } = state;
    const { from: from5, to: to3 } = selection;
    const isSame = oldState && oldState.doc.eq(doc4) && oldState.selection.eq(selection);
    if (isSame) {
      return;
    }
    this.createTooltip();
    const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {
      editor: this.editor,
      view,
      state,
      oldState
    });
    if (!shouldShow) {
      this.hide();
      return;
    }
    (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({
      getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (() => posToDOMRect(view, from5, to3))
    });
    this.show();
  }
  show() {
    var _a;
    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();
  }
  hide() {
    var _a;
    (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();
  }
  destroy() {
    var _a, _b;
    if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {
      this.tippy.popper.firstChild.removeEventListener("blur", this.tippyBlurHandler);
    }
    (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();
    this.element.removeEventListener("mousedown", this.mousedownHandler, { capture: true });
    this.editor.off("focus", this.focusHandler);
    this.editor.off("blur", this.blurHandler);
  }
};
var FloatingMenuPlugin = (options2) => {
  return new Plugin({
    key: typeof options2.pluginKey === "string" ? new PluginKey(options2.pluginKey) : options2.pluginKey,
    view: (view) => new FloatingMenuView({ view, ...options2 })
  });
};
var FloatingMenu = Extension.create({
  name: "floatingMenu",
  addOptions() {
    return {
      element: null,
      tippyOptions: {},
      pluginKey: "floatingMenu",
      shouldShow: null
    };
  },
  addProseMirrorPlugins() {
    if (!this.options.element) {
      return [];
    }
    return [
      FloatingMenuPlugin({
        pluginKey: this.options.pluginKey,
        editor: this.editor,
        element: this.options.element,
        tippyOptions: this.options.tippyOptions,
        shouldShow: this.options.shouldShow
      })
    ];
  }
});

// node_modules/@tiptap/react/dist/index.js
var Portals = ({ renderers }) => {
  return import_react.default.createElement(import_react.default.Fragment, null, Object.entries(renderers).map(([key2, renderer]) => {
    return import_react_dom.default.createPortal(renderer.reactElement, renderer.element, key2);
  }));
};
var PureEditorContent = class extends import_react.default.Component {
  constructor(props) {
    super(props);
    this.editorContentRef = import_react.default.createRef();
    this.initialized = false;
    this.state = {
      renderers: {}
    };
  }
  componentDidMount() {
    this.init();
  }
  componentDidUpdate() {
    this.init();
  }
  init() {
    const { editor } = this.props;
    if (editor && editor.options.element) {
      if (editor.contentComponent) {
        return;
      }
      const element7 = this.editorContentRef.current;
      element7.append(...editor.options.element.childNodes);
      editor.setOptions({
        element: element7
      });
      editor.contentComponent = this;
      editor.createNodeViews();
      this.initialized = true;
    }
  }
  maybeFlushSync(fn3) {
    if (this.initialized) {
      (0, import_react_dom.flushSync)(fn3);
    } else {
      fn3();
    }
  }
  setRenderer(id2, renderer) {
    this.maybeFlushSync(() => {
      this.setState(({ renderers }) => ({
        renderers: {
          ...renderers,
          [id2]: renderer
        }
      }));
    });
  }
  removeRenderer(id2) {
    this.maybeFlushSync(() => {
      this.setState(({ renderers }) => {
        const nextRenderers = { ...renderers };
        delete nextRenderers[id2];
        return { renderers: nextRenderers };
      });
    });
  }
  componentWillUnmount() {
    const { editor } = this.props;
    if (!editor) {
      return;
    }
    this.initialized = false;
    if (!editor.isDestroyed) {
      editor.view.setProps({
        nodeViews: {}
      });
    }
    editor.contentComponent = null;
    if (!editor.options.element.firstChild) {
      return;
    }
    const newElement = document.createElement("div");
    newElement.append(...editor.options.element.childNodes);
    editor.setOptions({
      element: newElement
    });
  }
  render() {
    const { editor, ...rest } = this.props;
    return import_react.default.createElement(
      import_react.default.Fragment,
      null,
      import_react.default.createElement("div", { ref: this.editorContentRef, ...rest }),
      import_react.default.createElement(Portals, { renderers: this.state.renderers })
    );
  }
};
var EditorContent = import_react.default.memo(PureEditorContent);
var ReactNodeViewContext = (0, import_react.createContext)({
  onDragStart: void 0
});
var useReactNodeView = () => (0, import_react.useContext)(ReactNodeViewContext);
var NodeViewWrapper = import_react.default.forwardRef((props, ref) => {
  const { onDragStart } = useReactNodeView();
  const Tag = props.as || "div";
  return import_react.default.createElement(Tag, { ...props, ref, "data-node-view-wrapper": "", onDragStart, style: {
    whiteSpace: "normal",
    ...props.style
  } });
});

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/create-polymorphic-component/create-polymorphic-component.js
function createPolymorphicComponent(component) {
  return component;
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/find-element-ancestor/find-element-ancestor.js
function findElementAncestor(element7, selector) {
  let _element = element7;
  while ((_element = _element.parentElement) && !_element.matches(selector))
    ;
  return _element;
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/create-scoped-keydown-handler/create-scoped-keydown-handler.js
function getPreviousIndex(current, elements, loop) {
  for (let i = current - 1; i >= 0; i -= 1) {
    if (!elements[i].disabled) {
      return i;
    }
  }
  if (loop) {
    for (let i = elements.length - 1; i > -1; i -= 1) {
      if (!elements[i].disabled) {
        return i;
      }
    }
  }
  return current;
}
function getNextIndex(current, elements, loop) {
  for (let i = current + 1; i < elements.length; i += 1) {
    if (!elements[i].disabled) {
      return i;
    }
  }
  if (loop) {
    for (let i = 0; i < elements.length; i += 1) {
      if (!elements[i].disabled) {
        return i;
      }
    }
  }
  return current;
}
function onSameLevel(target, sibling, parentSelector) {
  return findElementAncestor(target, parentSelector) === findElementAncestor(sibling, parentSelector);
}
function createScopedKeydownHandler({
  parentSelector,
  siblingSelector,
  onKeyDown,
  loop = true,
  activateOnFocus = false,
  dir = "rtl",
  orientation
}) {
  return (event) => {
    var _a;
    onKeyDown == null ? void 0 : onKeyDown(event);
    const elements = Array.from(((_a = findElementAncestor(event.currentTarget, parentSelector)) == null ? void 0 : _a.querySelectorAll(siblingSelector)) || []).filter((node4) => onSameLevel(event.currentTarget, node4, parentSelector));
    const current = elements.findIndex((el) => event.currentTarget === el);
    const _nextIndex = getNextIndex(current, elements, loop);
    const _previousIndex = getPreviousIndex(current, elements, loop);
    const nextIndex = dir === "rtl" ? _previousIndex : _nextIndex;
    const previousIndex = dir === "rtl" ? _nextIndex : _previousIndex;
    switch (event.key) {
      case "ArrowRight": {
        if (orientation === "horizontal") {
          event.stopPropagation();
          event.preventDefault();
          elements[nextIndex].focus();
          activateOnFocus && elements[nextIndex].click();
        }
        break;
      }
      case "ArrowLeft": {
        if (orientation === "horizontal") {
          event.stopPropagation();
          event.preventDefault();
          elements[previousIndex].focus();
          activateOnFocus && elements[previousIndex].click();
        }
        break;
      }
      case "ArrowUp": {
        if (orientation === "vertical") {
          event.stopPropagation();
          event.preventDefault();
          elements[_previousIndex].focus();
          activateOnFocus && elements[_previousIndex].click();
        }
        break;
      }
      case "ArrowDown": {
        if (orientation === "vertical") {
          event.stopPropagation();
          event.preventDefault();
          elements[_nextIndex].focus();
          activateOnFocus && elements[_nextIndex].click();
        }
        break;
      }
      case "Home": {
        event.stopPropagation();
        event.preventDefault();
        !elements[0].disabled && elements[0].focus();
        break;
      }
      case "End": {
        event.stopPropagation();
        event.preventDefault();
        const last2 = elements.length - 1;
        !elements[last2].disabled && elements[last2].focus();
        break;
      }
    }
  };
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/get-context-item-index/get-context-item-index.js
function getContextItemIndex(elementSelector, parentSelector, node4) {
  var _a;
  if (!node4) {
    return null;
  }
  return Array.from(((_a = findElementAncestor(node4, parentSelector)) == null ? void 0 : _a.querySelectorAll(elementSelector)) || []).findIndex((element7) => element7 === node4);
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/create-safe-context/create-safe-context.js
var import_react2 = __toESM(require_react());
function createSafeContext(errorMessage) {
  const Context = (0, import_react2.createContext)(null);
  const useSafeContext = () => {
    const ctx = (0, import_react2.useContext)(Context);
    if (ctx === null) {
      throw new Error(errorMessage);
    }
    return ctx;
  };
  const Provider = ({ children, value }) => import_react2.default.createElement(Context.Provider, {
    value
  }, children);
  return [Provider, useSafeContext];
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/pack-sx/pack-sx.js
function packSx(sx) {
  return Array.isArray(sx) ? sx : [sx];
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/get-safe-id/get-safe-id.js
function getSafeId(uid, errorMessage) {
  return (value) => {
    if (typeof value !== "string" || value.trim().length === 0) {
      throw new Error(errorMessage);
    }
    return `${uid}-${value}`;
  };
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/noop/noop.js
var noop = () => {
};

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/close-on-escape/close-on-escape.js
function closeOnEscape(callback, options2 = { active: true }) {
  if (typeof callback !== "function" || !options2.active) {
    return options2.onKeyDown || noop;
  }
  return (event) => {
    var _a;
    if (event.key === "Escape") {
      callback(event);
      (_a = options2.onTrigger) == null ? void 0 : _a.call(options2);
    }
  };
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/create-event-handler/create-event-handler.js
function createEventHandler(parentEventHandler, eventHandler) {
  return (event) => {
    parentEventHandler == null ? void 0 : parentEventHandler(event);
    eventHandler == null ? void 0 : eventHandler(event);
  };
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/keys/keys.js
function keys2(object) {
  return Object.keys(object);
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/use-hovered/use-hovered.js
var import_react3 = __toESM(require_react());
function useHovered() {
  const [hovered, setHovered] = (0, import_react3.useState)(-1);
  const resetHovered = () => setHovered(-1);
  return [hovered, { setHovered, resetHovered }];
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/group-options/group-options.js
function groupOptions({ data }) {
  const sortedData = [];
  const unGroupedData = [];
  const groupedData = data.reduce((acc, item, index7) => {
    if (item.group) {
      if (acc[item.group])
        acc[item.group].push(index7);
      else
        acc[item.group] = [index7];
    } else {
      unGroupedData.push(index7);
    }
    return acc;
  }, {});
  Object.keys(groupedData).forEach((groupName) => {
    sortedData.push(...groupedData[groupName].map((index7) => data[index7]));
  });
  sortedData.push(...unGroupedData.map((itemIndex) => data[itemIndex]));
  return sortedData;
}

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/create-use-external-events/create-use-external-events.js
var import_react4 = __toESM(require_react());

// node_modules/@mantine/core/node_modules/@mantine/utils/esm/is-element/is-element.js
var import_react5 = __toESM(require_react());
function isElement3(value) {
  if (Array.isArray(value) || value === null) {
    return false;
  }
  if (typeof value === "object") {
    if (value.type === import_react5.default.Fragment) {
      return false;
    }
    return true;
  }
  return false;
}

// node_modules/clsx/dist/clsx.m.js
function toVal(mix) {
  var k, y, str = "";
  if (typeof mix === "string" || typeof mix === "number") {
    str += mix;
  } else if (typeof mix === "object") {
    if (Array.isArray(mix)) {
      for (k = 0; k < mix.length; k++) {
        if (mix[k]) {
          if (y = toVal(mix[k])) {
            str && (str += " ");
            str += y;
          }
        }
      }
    } else {
      for (k in mix) {
        if (mix[k]) {
          str && (str += " ");
          str += k;
        }
      }
    }
  }
  return str;
}
function clsx_m_default() {
  var i = 0, tmp, x3, str = "";
  while (i < arguments.length) {
    if (tmp = arguments[i++]) {
      if (x3 = toVal(tmp)) {
        str && (str += " ");
        str += x3;
      }
    }
  }
  return str;
}

// node_modules/@mantine/styles/esm/theme/default-colors.js
var DEFAULT_COLORS = {
  dark: [
    "#C1C2C5",
    "#A6A7AB",
    "#909296",
    "#5c5f66",
    "#373A40",
    "#2C2E33",
    "#25262b",
    "#1A1B1E",
    "#141517",
    "#101113"
  ],
  gray: [
    "#f8f9fa",
    "#f1f3f5",
    "#e9ecef",
    "#dee2e6",
    "#ced4da",
    "#adb5bd",
    "#868e96",
    "#495057",
    "#343a40",
    "#212529"
  ],
  red: [
    "#fff5f5",
    "#ffe3e3",
    "#ffc9c9",
    "#ffa8a8",
    "#ff8787",
    "#ff6b6b",
    "#fa5252",
    "#f03e3e",
    "#e03131",
    "#c92a2a"
  ],
  pink: [
    "#fff0f6",
    "#ffdeeb",
    "#fcc2d7",
    "#faa2c1",
    "#f783ac",
    "#f06595",
    "#e64980",
    "#d6336c",
    "#c2255c",
    "#a61e4d"
  ],
  grape: [
    "#f8f0fc",
    "#f3d9fa",
    "#eebefa",
    "#e599f7",
    "#da77f2",
    "#cc5de8",
    "#be4bdb",
    "#ae3ec9",
    "#9c36b5",
    "#862e9c"
  ],
  violet: [
    "#f3f0ff",
    "#e5dbff",
    "#d0bfff",
    "#b197fc",
    "#9775fa",
    "#845ef7",
    "#7950f2",
    "#7048e8",
    "#6741d9",
    "#5f3dc4"
  ],
  indigo: [
    "#edf2ff",
    "#dbe4ff",
    "#bac8ff",
    "#91a7ff",
    "#748ffc",
    "#5c7cfa",
    "#4c6ef5",
    "#4263eb",
    "#3b5bdb",
    "#364fc7"
  ],
  blue: [
    "#e7f5ff",
    "#d0ebff",
    "#a5d8ff",
    "#74c0fc",
    "#4dabf7",
    "#339af0",
    "#228be6",
    "#1c7ed6",
    "#1971c2",
    "#1864ab"
  ],
  cyan: [
    "#e3fafc",
    "#c5f6fa",
    "#99e9f2",
    "#66d9e8",
    "#3bc9db",
    "#22b8cf",
    "#15aabf",
    "#1098ad",
    "#0c8599",
    "#0b7285"
  ],
  teal: [
    "#e6fcf5",
    "#c3fae8",
    "#96f2d7",
    "#63e6be",
    "#38d9a9",
    "#20c997",
    "#12b886",
    "#0ca678",
    "#099268",
    "#087f5b"
  ],
  green: [
    "#ebfbee",
    "#d3f9d8",
    "#b2f2bb",
    "#8ce99a",
    "#69db7c",
    "#51cf66",
    "#40c057",
    "#37b24d",
    "#2f9e44",
    "#2b8a3e"
  ],
  lime: [
    "#f4fce3",
    "#e9fac8",
    "#d8f5a2",
    "#c0eb75",
    "#a9e34b",
    "#94d82d",
    "#82c91e",
    "#74b816",
    "#66a80f",
    "#5c940d"
  ],
  yellow: [
    "#fff9db",
    "#fff3bf",
    "#ffec99",
    "#ffe066",
    "#ffd43b",
    "#fcc419",
    "#fab005",
    "#f59f00",
    "#f08c00",
    "#e67700"
  ],
  orange: [
    "#fff4e6",
    "#ffe8cc",
    "#ffd8a8",
    "#ffc078",
    "#ffa94d",
    "#ff922b",
    "#fd7e14",
    "#f76707",
    "#e8590c",
    "#d9480f"
  ]
};

// node_modules/@mantine/styles/esm/theme/functions/fns/font-styles/font-styles.js
function fontStyles(theme) {
  return () => ({ fontFamily: theme.fontFamily || "sans-serif" });
}

// node_modules/@mantine/styles/esm/theme/functions/fns/focus-styles/focus-styles.js
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key2, value) => key2 in obj ? __defProp(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp.call(b2, prop))
      __defNormalProp(a2, prop, b2[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b2)) {
      if (__propIsEnum.call(b2, prop))
        __defNormalProp(a2, prop, b2[prop]);
    }
  return a2;
};
function focusStyles(theme) {
  return (selector) => ({
    WebkitTapHighlightColor: "transparent",
    [selector || "&:focus"]: __spreadValues({}, theme.focusRing === "always" || theme.focusRing === "auto" ? theme.focusRingStyles.styles(theme) : theme.focusRingStyles.resetStyles(theme)),
    [selector ? selector.replace(":focus", ":focus:not(:focus-visible)") : "&:focus:not(:focus-visible)"]: __spreadValues({}, theme.focusRing === "auto" || theme.focusRing === "never" ? theme.focusRingStyles.resetStyles(theme) : null)
  });
}

// node_modules/@mantine/styles/esm/theme/functions/fns/primary-shade/primary-shade.js
function primaryShade(theme) {
  return (colorScheme) => {
    if (typeof theme.primaryShade === "number") {
      return theme.primaryShade;
    }
    return theme.primaryShade[colorScheme || theme.colorScheme];
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/theme-color/theme-color.js
function themeColor(theme) {
  const getPrimaryShade = primaryShade(theme);
  return (color2, shade, primaryFallback = true, useSplittedShade = true) => {
    if (typeof color2 === "string" && color2.includes(".")) {
      const [splitterColor, _splittedShade] = color2.split(".");
      const splittedShade = parseInt(_splittedShade, 10);
      if (splitterColor in theme.colors && splittedShade >= 0 && splittedShade < 10) {
        return theme.colors[splitterColor][typeof shade === "number" && !useSplittedShade ? shade : splittedShade];
      }
    }
    const _shade = typeof shade === "number" ? shade : getPrimaryShade();
    return color2 in theme.colors ? theme.colors[color2][_shade] : primaryFallback ? theme.colors[theme.primaryColor][_shade] : color2;
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/gradient/get-gradient-color-stops/get-gradient-color-stops.js
function getGradientColorStops(colors2) {
  let stops = "";
  for (let i = 1; i < colors2.length - 1; i += 1) {
    stops += `${colors2[i]} ${i / (colors2.length - 1) * 100}%, `;
  }
  return `${colors2[0]} 0%, ${stops}${colors2[colors2.length - 1]} 100%`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/gradient/gradient.js
function linearGradient(deg, ...colors2) {
  return `linear-gradient(${deg}deg, ${getGradientColorStops(colors2)})`;
}
function radialGradient(...colors2) {
  return `radial-gradient(circle, ${getGradientColorStops(colors2)})`;
}
function gradient(theme) {
  const getThemeColor = themeColor(theme);
  const getPrimaryShade = primaryShade(theme);
  return (payload) => {
    const merged = {
      from: (payload == null ? void 0 : payload.from) || theme.defaultGradient.from,
      to: (payload == null ? void 0 : payload.to) || theme.defaultGradient.to,
      deg: (payload == null ? void 0 : payload.deg) || theme.defaultGradient.deg
    };
    return `linear-gradient(${merged.deg}deg, ${getThemeColor(merged.from, getPrimaryShade(), false)} 0%, ${getThemeColor(merged.to, getPrimaryShade(), false)} 100%)`;
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/size/size.js
function size(props) {
  if (typeof props.size === "number") {
    return props.size;
  }
  const computedSize = props.sizes[props.size];
  return computedSize !== void 0 ? computedSize : props.size || props.sizes.md;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/breakpoints/breakpoints.js
function largerThan(theme) {
  return (breakpoint) => `@media (min-width: ${size({ size: breakpoint, sizes: theme.breakpoints })}px)`;
}
function smallerThan(theme) {
  return (breakpoint) => `@media (max-width: ${size({ size: breakpoint, sizes: theme.breakpoints }) - 1}px)`;
}

// node_modules/@mantine/styles/esm/theme/utils/to-rgba/to-rgba.js
function isHexColor(hex) {
  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}$/i;
  return HEX_REGEXP.test(hex);
}
function hexToRgba(color2) {
  let hexString = color2.replace("#", "");
  if (hexString.length === 3) {
    const shorthandHex = hexString.split("");
    hexString = [
      shorthandHex[0],
      shorthandHex[0],
      shorthandHex[1],
      shorthandHex[1],
      shorthandHex[2],
      shorthandHex[2]
    ].join("");
  }
  const parsed = parseInt(hexString, 16);
  const r = parsed >> 16 & 255;
  const g2 = parsed >> 8 & 255;
  const b2 = parsed & 255;
  return {
    r,
    g: g2,
    b: b2,
    a: 1
  };
}
function rgbStringToRgba(color2) {
  const [r, g2, b2, a2] = color2.replace(/[^0-9,.]/g, "").split(",").map(Number);
  return { r, g: g2, b: b2, a: a2 || 1 };
}
function toRgba(color2) {
  if (isHexColor(color2)) {
    return hexToRgba(color2);
  }
  if (color2.startsWith("rgb")) {
    return rgbStringToRgba(color2);
  }
  return {
    r: 0,
    g: 0,
    b: 0,
    a: 1
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/rgba/rgba.js
function rgba(color2, alpha2) {
  if (typeof color2 !== "string" || alpha2 > 1 || alpha2 < 0) {
    return "rgba(0, 0, 0, 1)";
  }
  const { r, g: g2, b: b2 } = toRgba(color2);
  return `rgba(${r}, ${g2}, ${b2}, ${alpha2})`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/cover/cover.js
function cover(offset3 = 0) {
  return {
    position: "absolute",
    top: offset3,
    right: offset3,
    left: offset3,
    bottom: offset3
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/darken/darken.js
function darken(color2, alpha2) {
  const { r, g: g2, b: b2, a: a2 } = toRgba(color2);
  const f2 = 1 - alpha2;
  const dark = (input3) => Math.round(input3 * f2);
  return `rgba(${dark(r)}, ${dark(g2)}, ${dark(b2)}, ${a2})`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/lighten/lighten.js
function lighten(color2, alpha2) {
  const { r, g: g2, b: b2, a: a2 } = toRgba(color2);
  const light = (input3) => Math.round(input3 + (255 - input3) * alpha2);
  return `rgba(${light(r)}, ${light(g2)}, ${light(b2)}, ${a2})`;
}

// node_modules/@mantine/styles/esm/theme/functions/fns/radius/radius.js
function radius(theme) {
  return (size3) => {
    if (typeof size3 === "number") {
      return size3;
    }
    const defaultRadius = typeof theme.defaultRadius === "number" ? theme.defaultRadius : theme.radius[theme.defaultRadius] || theme.defaultRadius;
    return theme.radius[size3] || size3 || defaultRadius;
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/variant/variant.js
function getColorIndexInfo(color2, theme) {
  if (typeof color2 === "string" && color2.includes(".")) {
    const [splittedColor, _splittedShade] = color2.split(".");
    const splittedShade = parseInt(_splittedShade, 10);
    if (splittedColor in theme.colors && splittedShade >= 0 && splittedShade < 10) {
      return { isSplittedColor: true, key: splittedColor, shade: splittedShade };
    }
  }
  return { isSplittedColor: false };
}
function variant(theme) {
  const getThemeColor = themeColor(theme);
  const getPrimaryShade = primaryShade(theme);
  const getGradient = gradient(theme);
  return ({ variant: variant2, color: color2, gradient: gradient2, primaryFallback }) => {
    const colorInfo = getColorIndexInfo(color2, theme);
    switch (variant2) {
      case "light": {
        return {
          border: "transparent",
          background: rgba(getThemeColor(color2, theme.colorScheme === "dark" ? 8 : 0, primaryFallback, false), theme.colorScheme === "dark" ? 0.2 : 1),
          color: color2 === "dark" ? theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.dark[9] : getThemeColor(color2, theme.colorScheme === "dark" ? 2 : getPrimaryShade("light")),
          hover: rgba(getThemeColor(color2, theme.colorScheme === "dark" ? 7 : 1, primaryFallback, false), theme.colorScheme === "dark" ? 0.25 : 0.65)
        };
      }
      case "subtle": {
        return {
          border: "transparent",
          background: "transparent",
          color: color2 === "dark" ? theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.dark[9] : getThemeColor(color2, theme.colorScheme === "dark" ? 2 : getPrimaryShade("light")),
          hover: rgba(getThemeColor(color2, theme.colorScheme === "dark" ? 8 : 0, primaryFallback, false), theme.colorScheme === "dark" ? 0.2 : 1)
        };
      }
      case "outline": {
        return {
          border: getThemeColor(color2, theme.colorScheme === "dark" ? 5 : getPrimaryShade("light")),
          background: "transparent",
          color: getThemeColor(color2, theme.colorScheme === "dark" ? 5 : getPrimaryShade("light")),
          hover: theme.colorScheme === "dark" ? rgba(getThemeColor(color2, 5, primaryFallback, false), 0.05) : rgba(getThemeColor(color2, 0, primaryFallback, false), 0.35)
        };
      }
      case "default": {
        return {
          border: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4],
          background: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white,
          color: theme.colorScheme === "dark" ? theme.white : theme.black,
          hover: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[0]
        };
      }
      case "white": {
        return {
          border: "transparent",
          background: theme.white,
          color: getThemeColor(color2, getPrimaryShade()),
          hover: null
        };
      }
      case "transparent": {
        return {
          border: "transparent",
          color: color2 === "dark" ? theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.dark[9] : getThemeColor(color2, theme.colorScheme === "dark" ? 2 : getPrimaryShade("light")),
          background: "transparent",
          hover: null
        };
      }
      case "gradient": {
        return {
          background: getGradient(gradient2),
          color: theme.white,
          border: "transparent",
          hover: null
        };
      }
      default: {
        const _primaryShade = getPrimaryShade();
        const _shade = colorInfo.isSplittedColor ? colorInfo.shade : _primaryShade;
        const _color = colorInfo.isSplittedColor ? colorInfo.key : color2;
        return {
          border: "transparent",
          background: getThemeColor(_color, _shade, primaryFallback),
          color: theme.white,
          hover: getThemeColor(_color, _shade === 9 ? 8 : _shade + 1)
        };
      }
    }
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/primary-color/primary-color.js
function primaryColor(theme) {
  return (colorScheme) => {
    const shade = primaryShade(theme)(colorScheme);
    return theme.colors[theme.primaryColor][shade];
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/hover/hover.js
function hover(hoverStyle) {
  return {
    "@media (hover: hover)": {
      "&:hover": hoverStyle
    },
    "@media (hover: none)": {
      "&:active": hoverStyle
    }
  };
}

// node_modules/@mantine/styles/esm/theme/functions/fns/placeholder-styles/placeholder-styles.js
function placeholderStyles(theme) {
  return () => ({
    userSelect: "none",
    color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
  });
}

// node_modules/@mantine/styles/esm/theme/functions/fns/index.js
var fns = {
  fontStyles,
  themeColor,
  focusStyles,
  linearGradient,
  radialGradient,
  smallerThan,
  largerThan,
  rgba,
  size,
  cover,
  darken,
  lighten,
  radius,
  variant,
  primaryShade,
  hover,
  gradient,
  primaryColor,
  placeholderStyles
};

// node_modules/@mantine/styles/esm/theme/functions/attach-functions.js
var __defProp2 = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols2 = Object.getOwnPropertySymbols;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __propIsEnum2 = Object.prototype.propertyIsEnumerable;
var __defNormalProp2 = (obj, key2, value) => key2 in obj ? __defProp2(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues2 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp2.call(b2, prop))
      __defNormalProp2(a2, prop, b2[prop]);
  if (__getOwnPropSymbols2)
    for (var prop of __getOwnPropSymbols2(b2)) {
      if (__propIsEnum2.call(b2, prop))
        __defNormalProp2(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps = (a2, b2) => __defProps(a2, __getOwnPropDescs(b2));
function attachFunctions(themeBase) {
  return __spreadProps(__spreadValues2({}, themeBase), {
    fn: {
      fontStyles: fns.fontStyles(themeBase),
      themeColor: fns.themeColor(themeBase),
      focusStyles: fns.focusStyles(themeBase),
      largerThan: fns.largerThan(themeBase),
      smallerThan: fns.smallerThan(themeBase),
      radialGradient: fns.radialGradient,
      linearGradient: fns.linearGradient,
      gradient: fns.gradient(themeBase),
      rgba: fns.rgba,
      size: fns.size,
      cover: fns.cover,
      lighten: fns.lighten,
      darken: fns.darken,
      primaryShade: fns.primaryShade(themeBase),
      radius: fns.radius(themeBase),
      variant: fns.variant(themeBase),
      hover: fns.hover,
      primaryColor: fns.primaryColor(themeBase),
      placeholderStyles: fns.placeholderStyles(themeBase)
    }
  });
}

// node_modules/@mantine/styles/esm/theme/default-theme.js
var MANTINE_COLORS = Object.keys(DEFAULT_COLORS);
var MANTINE_SIZES = ["xs", "sm", "md", "lg", "xl"];
var _DEFAULT_THEME = {
  dir: "ltr",
  primaryShade: {
    light: 6,
    dark: 8
  },
  focusRing: "auto",
  loader: "oval",
  dateFormat: "MMMM D, YYYY",
  colorScheme: "light",
  white: "#fff",
  black: "#000",
  defaultRadius: "sm",
  transitionTimingFunction: "ease",
  colors: DEFAULT_COLORS,
  lineHeight: 1.55,
  fontFamily: "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji",
  fontFamilyMonospace: "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace",
  primaryColor: "blue",
  respectReducedMotion: true,
  cursorType: "default",
  defaultGradient: {
    from: "indigo",
    to: "cyan",
    deg: 45
  },
  shadows: {
    xs: "0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1)",
    sm: "0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 10px 15px -5px, rgba(0, 0, 0, 0.04) 0px 7px 7px -5px",
    md: "0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 20px 25px -5px, rgba(0, 0, 0, 0.04) 0px 10px 10px -5px",
    lg: "0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 28px 23px -7px, rgba(0, 0, 0, 0.04) 0px 12px 12px -7px",
    xl: "0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0px 36px 28px -7px, rgba(0, 0, 0, 0.04) 0px 17px 17px -7px"
  },
  fontSizes: {
    xs: 12,
    sm: 14,
    md: 16,
    lg: 18,
    xl: 20
  },
  radius: {
    xs: 2,
    sm: 4,
    md: 8,
    lg: 16,
    xl: 32
  },
  spacing: {
    xs: 10,
    sm: 12,
    md: 16,
    lg: 20,
    xl: 24
  },
  breakpoints: {
    xs: 576,
    sm: 768,
    md: 992,
    lg: 1200,
    xl: 1400
  },
  headings: {
    fontFamily: "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji",
    fontWeight: 700,
    sizes: {
      h1: { fontSize: 34, lineHeight: 1.3, fontWeight: void 0 },
      h2: { fontSize: 26, lineHeight: 1.35, fontWeight: void 0 },
      h3: { fontSize: 22, lineHeight: 1.4, fontWeight: void 0 },
      h4: { fontSize: 18, lineHeight: 1.45, fontWeight: void 0 },
      h5: { fontSize: 16, lineHeight: 1.5, fontWeight: void 0 },
      h6: { fontSize: 14, lineHeight: 1.5, fontWeight: void 0 }
    }
  },
  other: {},
  components: {},
  activeStyles: { transform: "translateY(1px)" },
  datesLocale: "en",
  globalStyles: void 0,
  focusRingStyles: {
    styles: (theme) => ({
      outlineOffset: 2,
      outline: `2px solid ${theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 7 : 5]}`
    }),
    resetStyles: () => ({ outline: "none" }),
    inputStyles: (theme) => ({
      outline: "none",
      borderColor: theme.colors[theme.primaryColor][typeof theme.primaryShade === "object" ? theme.primaryShade[theme.colorScheme] : theme.primaryShade]
    })
  }
};
var DEFAULT_THEME = attachFunctions(_DEFAULT_THEME);

// node_modules/@mantine/styles/esm/theme/MantineProvider.js
var import_react13 = __toESM(require_react());

// node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js
var React5 = __toESM(require_react());
var import_react6 = __toESM(require_react());

// node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
}
function createStyleElement(options2) {
  var tag = document.createElement("style");
  tag.setAttribute("data-emotion", options2.key);
  if (options2.nonce !== void 0) {
    tag.setAttribute("nonce", options2.nonce);
  }
  tag.appendChild(document.createTextNode(""));
  tag.setAttribute("data-s", "");
  return tag;
}
var StyleSheet = function() {
  function StyleSheet2(options2) {
    var _this = this;
    this._insertTag = function(tag) {
      var before;
      if (_this.tags.length === 0) {
        if (_this.insertionPoint) {
          before = _this.insertionPoint.nextSibling;
        } else if (_this.prepend) {
          before = _this.container.firstChild;
        } else {
          before = _this.before;
        }
      } else {
        before = _this.tags[_this.tags.length - 1].nextSibling;
      }
      _this.container.insertBefore(tag, before);
      _this.tags.push(tag);
    };
    this.isSpeedy = options2.speedy === void 0 ? false : options2.speedy;
    this.tags = [];
    this.ctr = 0;
    this.nonce = options2.nonce;
    this.key = options2.key;
    this.container = options2.container;
    this.prepend = options2.prepend;
    this.insertionPoint = options2.insertionPoint;
    this.before = null;
  }
  var _proto = StyleSheet2.prototype;
  _proto.hydrate = function hydrate(nodes) {
    nodes.forEach(this._insertTag);
  };
  _proto.insert = function insert(rule) {
    if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
      this._insertTag(createStyleElement(this));
    }
    var tag = this.tags[this.tags.length - 1];
    if (true) {
      var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
      if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
        console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
      }
      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
    }
    if (this.isSpeedy) {
      var sheet = sheetForTag(tag);
      try {
        sheet.insertRule(rule, sheet.cssRules.length);
      } catch (e) {
        if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
          console.error('There was a problem inserting the following rule: "' + rule + '"', e);
        }
      }
    } else {
      tag.appendChild(document.createTextNode(rule));
    }
    this.ctr++;
  };
  _proto.flush = function flush() {
    this.tags.forEach(function(tag) {
      return tag.parentNode && tag.parentNode.removeChild(tag);
    });
    this.tags = [];
    this.ctr = 0;
    if (true) {
      this._alreadyInsertedOrderInsensitiveRule = false;
    }
  };
  return StyleSheet2;
}();

// node_modules/stylis/src/Enum.js
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";

// node_modules/stylis/src/Utility.js
var abs = Math.abs;
var from = String.fromCharCode;
var assign = Object.assign;
function hash3(value, length4) {
  return charat(value, 0) ^ 45 ? (((length4 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace2(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search3) {
  return value.indexOf(search3);
}
function charat(value, index7) {
  return value.charCodeAt(index7) | 0;
}
function substr(value, begin, end2) {
  return value.slice(begin, end2);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}

// node_modules/stylis/src/Tokenizer.js
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root6, parent, type, props, children, length4) {
  return { value, root: root6, parent, type, props, children, line, column, length: length4, return: "" };
}
function copy2(root6, props) {
  return assign(node("", null, null, "", null, null, 0), root6, { length: -root6.length }, props);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end2) {
  return substr(characters, begin, end2);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index7, count2) {
  while (--count2 && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index7, caret() + (count2 < 6 && peek() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index7) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek() === 47)
      break;
  return "/*" + slice(index7, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index7) {
  while (!token(peek()))
    next();
  return slice(index7, position);
}

// node_modules/stylis/src/Parser.js
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root6, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index7 = 0;
  var offset3 = 0;
  var length4 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous3 = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference2 = rule;
  var characters3 = type;
  while (scanning)
    switch (previous3 = character2, character2 = next()) {
      case 40:
        if (previous3 != 108 && charat(characters3, length4 - 1) == 58) {
          if (indexof(characters3 += replace2(delimit(character2), "&", "&\f"), "&\f") != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters3 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters3 += whitespace(previous3);
        break;
      case 92:
        characters3 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root6, parent), declarations);
            break;
          default:
            characters3 += "/";
        }
        break;
      case 123 * variable:
        points[index7++] = strlen(characters3) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset3:
            if (ampersand == -1)
              characters3 = replace2(characters3, /\f/g, "");
            if (property > 0 && strlen(characters3) - length4)
              append(property > 32 ? declaration(characters3 + ";", rule, parent, length4 - 1) : declaration(replace2(characters3, " ", "") + ";", rule, parent, length4 - 2), declarations);
            break;
          case 59:
            characters3 += ";";
          default:
            append(reference2 = ruleset(characters3, root6, parent, index7, offset3, rules, points, type, props = [], children = [], length4), rulesets);
            if (character2 === 123)
              if (offset3 === 0)
                parse(characters3, root6, reference2, reference2, props, rulesets, length4, points, children);
              else
                switch (atrule === 99 && charat(characters3, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length4), children), rules, children, length4, points, rule ? props : children);
                    break;
                  default:
                    parse(characters3, reference2, reference2, reference2, [""], children, 0, points, children);
                }
        }
        index7 = offset3 = property = 0, variable = ampersand = 1, type = characters3 = "", length4 = pseudo;
        break;
      case 58:
        length4 = 1 + strlen(characters3), property = previous3;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters3 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset3 > 0 ? 1 : (characters3 += "\f", -1);
            break;
          case 44:
            points[index7++] = (strlen(characters3) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek() === 45)
              characters3 += delimit(next());
            atrule = peek(), offset3 = length4 = strlen(type = characters3 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous3 === 45 && strlen(characters3) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root6, parent, index7, offset3, rules, points, type, props, children, length4) {
  var post = offset3 - 1;
  var rule = offset3 === 0 ? rules : [""];
  var size3 = sizeof(rule);
  for (var i = 0, j = 0, k = 0; i < index7; ++i)
    for (var x3 = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x3 < size3; ++x3)
      if (z = trim(j > 0 ? rule[x3] + " " + y : replace2(y, /&\f/g, rule[x3])))
        props[k++] = z;
  return node(value, root6, parent, offset3 === 0 ? RULESET : type, props, children, length4);
}
function comment(value, root6, parent) {
  return node(value, root6, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
}
function declaration(value, root6, parent, length4) {
  return node(value, root6, parent, DECLARATION, substr(value, 0, length4), substr(value, length4 + 1, -1), length4);
}

// node_modules/stylis/src/Serializer.js
function serialize(children, callback) {
  var output = "";
  var length4 = sizeof(children);
  for (var i = 0; i < length4; i++)
    output += callback(children[i], i, children, callback) || "";
  return output;
}
function stringify(element7, index7, children, callback) {
  switch (element7.type) {
    case LAYER:
      if (element7.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element7.return = element7.return || element7.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element7.return = element7.value + "{" + serialize(element7.children, callback) + "}";
    case RULESET:
      element7.value = element7.props.join(",");
  }
  return strlen(children = serialize(element7.children, callback)) ? element7.return = element7.value + "{" + children + "}" : "";
}

// node_modules/stylis/src/Middleware.js
function middleware(collection) {
  var length4 = sizeof(collection);
  return function(element7, index7, children, callback) {
    var output = "";
    for (var i = 0; i < length4; i++)
      output += collection[i](element7, index7, children, callback) || "";
    return output;
  };
}

// node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
var weakMemoize = function weakMemoize2(func) {
  var cache = /* @__PURE__ */ new WeakMap();
  return function(arg) {
    if (cache.has(arg)) {
      return cache.get(arg);
    }
    var ret = func(arg);
    cache.set(arg, ret);
    return ret;
  };
};

// node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
function memoize(fn3) {
  var cache = /* @__PURE__ */ Object.create(null);
  return function(arg) {
    if (cache[arg] === void 0)
      cache[arg] = fn3(arg);
    return cache[arg];
  };
}

// node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
var identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index7) {
  var previous3 = 0;
  var character2 = 0;
  while (true) {
    previous3 = character2;
    character2 = peek();
    if (previous3 === 38 && character2 === 12) {
      points[index7] = 1;
    }
    if (token(character2)) {
      break;
    }
    next();
  }
  return slice(begin, position);
};
var toRules = function toRules2(parsed, points) {
  var index7 = -1;
  var character2 = 44;
  do {
    switch (token(character2)) {
      case 0:
        if (character2 === 38 && peek() === 12) {
          points[index7] = 1;
        }
        parsed[index7] += identifierWithPointTracking(position - 1, points, index7);
        break;
      case 2:
        parsed[index7] += delimit(character2);
        break;
      case 4:
        if (character2 === 44) {
          parsed[++index7] = peek() === 58 ? "&\f" : "";
          points[index7] = parsed[index7].length;
          break;
        }
      default:
        parsed[index7] += from(character2);
    }
  } while (character2 = next());
  return parsed;
};
var getRules = function getRules2(value, points) {
  return dealloc(toRules(alloc(value), points));
};
var fixedElements = /* @__PURE__ */ new WeakMap();
var compat = function compat2(element7) {
  if (element7.type !== "rule" || !element7.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  element7.length < 1) {
    return;
  }
  var value = element7.value, parent = element7.parent;
  var isImplicitRule = element7.column === parent.column && element7.line === parent.line;
  while (parent.type !== "rule") {
    parent = parent.parent;
    if (!parent)
      return;
  }
  if (element7.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
    return;
  }
  if (isImplicitRule) {
    return;
  }
  fixedElements.set(element7, true);
  var points = [];
  var rules = getRules(value, points);
  var parentRules = parent.props;
  for (var i = 0, k = 0; i < rules.length; i++) {
    for (var j = 0; j < parentRules.length; j++, k++) {
      element7.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
    }
  }
};
var removeLabel = function removeLabel2(element7) {
  if (element7.type === "decl") {
    var value = element7.value;
    if (
      // charcode for l
      value.charCodeAt(0) === 108 && // charcode for b
      value.charCodeAt(2) === 98
    ) {
      element7["return"] = "";
      element7.value = "";
    }
  }
};
var ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var isIgnoringComment = function isIgnoringComment2(element7) {
  return element7.type === "comm" && element7.children.indexOf(ignoreFlag) > -1;
};
var createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache) {
  return function(element7, index7, children) {
    if (element7.type !== "rule" || cache.compat)
      return;
    var unsafePseudoClasses = element7.value.match(/(:first|:nth|:nth-last)-child/g);
    if (unsafePseudoClasses) {
      var isNested = !!element7.parent;
      var commentContainer = isNested ? element7.parent.children : (
        // global rule at the root level
        children
      );
      for (var i = commentContainer.length - 1; i >= 0; i--) {
        var node4 = commentContainer[i];
        if (node4.line < element7.line) {
          break;
        }
        if (node4.column < element7.column) {
          if (isIgnoringComment(node4)) {
            return;
          }
          break;
        }
      }
      unsafePseudoClasses.forEach(function(unsafePseudoClass) {
        console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
      });
    }
  };
};
var isImportRule = function isImportRule2(element7) {
  return element7.type.charCodeAt(1) === 105 && element7.type.charCodeAt(0) === 64;
};
var isPrependedWithRegularRules = function isPrependedWithRegularRules2(index7, children) {
  for (var i = index7 - 1; i >= 0; i--) {
    if (!isImportRule(children[i])) {
      return true;
    }
  }
  return false;
};
var nullifyElement = function nullifyElement2(element7) {
  element7.type = "";
  element7.value = "";
  element7["return"] = "";
  element7.children = "";
  element7.props = "";
};
var incorrectImportAlarm = function incorrectImportAlarm2(element7, index7, children) {
  if (!isImportRule(element7)) {
    return;
  }
  if (element7.parent) {
    console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
    nullifyElement(element7);
  } else if (isPrependedWithRegularRules(index7, children)) {
    console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
    nullifyElement(element7);
  }
};
function prefix2(value, length4) {
  switch (hash3(value, length4)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 6828:
    case 4268:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace2(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace2(value, /flex-|-self/, "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace2(value, /align-content|flex-|-self/, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace2(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace2(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace2(value, "-grow", "") + WEBKIT + value + MS + replace2(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace2(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace2(replace2(replace2(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace2(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
    case 4968:
      return replace2(replace2(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace2(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length4 > 6)
        switch (charat(value, length4 + 1)) {
          case 109:
            if (charat(value, length4 + 4) !== 45)
              break;
          case 102:
            return replace2(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length4 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch") ? prefix2(replace2(value, "stretch", "fill-available"), length4) + value : value;
        }
      break;
    case 4949:
      if (charat(value, length4 + 1) !== 115)
        break;
    case 6444:
      switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
        case 107:
          return replace2(value, ":", ":" + WEBKIT) + value;
        case 101:
          return replace2(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
      }
      break;
    case 5936:
      switch (charat(value, length4 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace2(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace2(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace2(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
      return WEBKIT + value + MS + value + value;
  }
  return value;
}
var prefixer = function prefixer2(element7, index7, children, callback) {
  if (element7.length > -1) {
    if (!element7["return"])
      switch (element7.type) {
        case DECLARATION:
          element7["return"] = prefix2(element7.value, element7.length);
          break;
        case KEYFRAMES:
          return serialize([copy2(element7, {
            value: replace2(element7.value, "@", "@" + WEBKIT)
          })], callback);
        case RULESET:
          if (element7.length)
            return combine(element7.props, function(value) {
              switch (match(value, /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  return serialize([copy2(element7, {
                    props: [replace2(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                  })], callback);
                case "::placeholder":
                  return serialize([copy2(element7, {
                    props: [replace2(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                  }), copy2(element7, {
                    props: [replace2(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                  }), copy2(element7, {
                    props: [replace2(value, /:(plac\w+)/, MS + "input-$1")]
                  })], callback);
              }
              return "";
            });
      }
  }
};
var defaultStylisPlugins = [prefixer];
var createCache = function createCache2(options2) {
  var key2 = options2.key;
  if (!key2) {
    throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
  }
  if (key2 === "css") {
    var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(ssrStyles, function(node4) {
      var dataEmotionAttribute = node4.getAttribute("data-emotion");
      if (dataEmotionAttribute.indexOf(" ") === -1) {
        return;
      }
      document.head.appendChild(node4);
      node4.setAttribute("data-s", "");
    });
  }
  var stylisPlugins = options2.stylisPlugins || defaultStylisPlugins;
  if (true) {
    if (/[^a-z-]/.test(key2)) {
      throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key2 + '" was passed');
    }
  }
  var inserted = {};
  var container;
  var nodesToHydrate = [];
  {
    container = options2.container || document.head;
    Array.prototype.forEach.call(
      // this means we will ignore elements which don't have a space in them which
      // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
      document.querySelectorAll('style[data-emotion^="' + key2 + ' "]'),
      function(node4) {
        var attrib = node4.getAttribute("data-emotion").split(" ");
        for (var i = 1; i < attrib.length; i++) {
          inserted[attrib[i]] = true;
        }
        nodesToHydrate.push(node4);
      }
    );
  }
  var _insert;
  var omnipresentPlugins = [compat, removeLabel];
  if (true) {
    omnipresentPlugins.push(createUnsafeSelectorsAlarm({
      get compat() {
        return cache.compat;
      }
    }), incorrectImportAlarm);
  }
  {
    var currentSheet;
    var finalizingPlugins = [stringify, true ? function(element7) {
      if (!element7.root) {
        if (element7["return"]) {
          currentSheet.insert(element7["return"]);
        } else if (element7.value && element7.type !== COMMENT) {
          currentSheet.insert(element7.value + "{}");
        }
      }
    } : rulesheet(function(rule) {
      currentSheet.insert(rule);
    })];
    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
    var stylis = function stylis2(styles2) {
      return serialize(compile(styles2), serializer);
    };
    _insert = function insert(selector, serialized, sheet, shouldCache) {
      currentSheet = sheet;
      if (serialized.map !== void 0) {
        currentSheet = {
          insert: function insert2(rule) {
            sheet.insert(rule + serialized.map);
          }
        };
      }
      stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
      if (shouldCache) {
        cache.inserted[serialized.name] = true;
      }
    };
  }
  var cache = {
    key: key2,
    sheet: new StyleSheet({
      key: key2,
      container,
      nonce: options2.nonce,
      speedy: options2.speedy,
      prepend: options2.prepend,
      insertionPoint: options2.insertionPoint
    }),
    nonce: options2.nonce,
    inserted,
    registered: {},
    insert: _insert
  };
  cache.sheet.hydrate(nodesToHydrate);
  return cache;
};

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = arguments[i];
      for (var key2 in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key2)) {
          target[key2] = source2[key2];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

// node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js
var import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());

// node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
var isBrowser2 = true;
function getRegisteredStyles(registered, registeredStyles, classNames) {
  var rawClassName = "";
  classNames.split(" ").forEach(function(className) {
    if (registered[className] !== void 0) {
      registeredStyles.push(registered[className] + ";");
    } else {
      rawClassName += className + " ";
    }
  });
  return rawClassName;
}
var registerStyles = function registerStyles2(cache, serialized, isStringTag) {
  var className = cache.key + "-" + serialized.name;
  if (
    // we only need to add the styles to the registered cache if the
    // class name could be used further down
    // the tree but if it's a string tag, we know it won't
    // so we don't have to add it to registered cache.
    // this improves memory usage since we can avoid storing the whole style string
    (isStringTag === false || // we need to always store it if we're in compat mode and
    // in node since emotion-server relies on whether a style is in
    // the registered cache to know whether a style is global or not
    // also, note that this check will be dead code eliminated in the browser
    isBrowser2 === false) && cache.registered[className] === void 0
  ) {
    cache.registered[className] = serialized.styles;
  }
};
var insertStyles = function insertStyles2(cache, serialized, isStringTag) {
  registerStyles(cache, serialized, isStringTag);
  var className = cache.key + "-" + serialized.name;
  if (cache.inserted[serialized.name] === void 0) {
    var current = serialized;
    do {
      cache.insert(serialized === current ? "." + className : "", current, cache.sheet, true);
      current = current.next;
    } while (current !== void 0);
  }
};

// node_modules/@emotion/hash/dist/emotion-hash.esm.js
function murmur2(str) {
  var h2 = 0;
  var k, i = 0, len = str.length;
  for (; len >= 4; ++i, len -= 4) {
    k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
    k = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
    k ^= /* k >>> r: */
    k >>> 24;
    h2 = /* Math.imul(k, m): */
    (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  }
  switch (len) {
    case 3:
      h2 ^= (str.charCodeAt(i + 2) & 255) << 16;
    case 2:
      h2 ^= (str.charCodeAt(i + 1) & 255) << 8;
    case 1:
      h2 ^= str.charCodeAt(i) & 255;
      h2 = /* Math.imul(h, m): */
      (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  }
  h2 ^= h2 >>> 13;
  h2 = /* Math.imul(h, m): */
  (h2 & 65535) * 1540483477 + ((h2 >>> 16) * 59797 << 16);
  return ((h2 ^ h2 >>> 15) >>> 0).toString(36);
}

// node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

// node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
var ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var hyphenateRegex = /[A-Z]|^ms/g;
var animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var isCustomProperty = function isCustomProperty2(property) {
  return property.charCodeAt(1) === 45;
};
var isProcessableValue = function isProcessableValue2(value) {
  return value != null && typeof value !== "boolean";
};
var processStyleName = memoize(function(styleName) {
  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
});
var processStyleValue = function processStyleValue2(key2, value) {
  switch (key2) {
    case "animation":
    case "animationName": {
      if (typeof value === "string") {
        return value.replace(animationRegex, function(match2, p1, p22) {
          cursor = {
            name: p1,
            styles: p22,
            next: cursor
          };
          return p1;
        });
      }
    }
  }
  if (unitlessKeys[key2] !== 1 && !isCustomProperty(key2) && typeof value === "number" && value !== 0) {
    return value + "px";
  }
  return value;
};
if (true) {
  contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
  contentValues = ["normal", "none", "initial", "inherit", "unset"];
  oldProcessStyleValue = processStyleValue;
  msPattern = /^-ms-/;
  hyphenPattern = /-(.)/g;
  hyphenatedCache = {};
  processStyleValue = function processStyleValue3(key2, value) {
    if (key2 === "content") {
      if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
        throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
      }
    }
    var processed = oldProcessStyleValue(key2, value);
    if (processed !== "" && !isCustomProperty(key2) && key2.indexOf("-") !== -1 && hyphenatedCache[key2] === void 0) {
      hyphenatedCache[key2] = true;
      console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key2.replace(msPattern, "ms-").replace(hyphenPattern, function(str, _char) {
        return _char.toUpperCase();
      }) + "?");
    }
    return processed;
  };
}
var contentValuePattern;
var contentValues;
var oldProcessStyleValue;
var msPattern;
var hyphenPattern;
var hyphenatedCache;
var noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function handleInterpolation(mergedProps, registered, interpolation) {
  if (interpolation == null) {
    return "";
  }
  if (interpolation.__emotion_styles !== void 0) {
    if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
      throw new Error(noComponentSelectorMessage);
    }
    return interpolation;
  }
  switch (typeof interpolation) {
    case "boolean": {
      return "";
    }
    case "object": {
      if (interpolation.anim === 1) {
        cursor = {
          name: interpolation.name,
          styles: interpolation.styles,
          next: cursor
        };
        return interpolation.name;
      }
      if (interpolation.styles !== void 0) {
        var next2 = interpolation.next;
        if (next2 !== void 0) {
          while (next2 !== void 0) {
            cursor = {
              name: next2.name,
              styles: next2.styles,
              next: cursor
            };
            next2 = next2.next;
          }
        }
        var styles2 = interpolation.styles + ";";
        if (interpolation.map !== void 0) {
          styles2 += interpolation.map;
        }
        return styles2;
      }
      return createStringFromObject(mergedProps, registered, interpolation);
    }
    case "function": {
      if (mergedProps !== void 0) {
        var previousCursor = cursor;
        var result = interpolation(mergedProps);
        cursor = previousCursor;
        return handleInterpolation(mergedProps, registered, result);
      } else if (true) {
        console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      }
      break;
    }
    case "string":
      if (true) {
        var matched = [];
        var replaced = interpolation.replace(animationRegex, function(match2, p1, p22) {
          var fakeVarName = "animation" + matched.length;
          matched.push("const " + fakeVarName + " = keyframes`" + p22.replace(/^@keyframes animation-\w+/, "") + "`");
          return "${" + fakeVarName + "}";
        });
        if (matched.length) {
          console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
        }
      }
      break;
  }
  if (registered == null) {
    return interpolation;
  }
  var cached = registered[interpolation];
  return cached !== void 0 ? cached : interpolation;
}
function createStringFromObject(mergedProps, registered, obj) {
  var string3 = "";
  if (Array.isArray(obj)) {
    for (var i = 0; i < obj.length; i++) {
      string3 += handleInterpolation(mergedProps, registered, obj[i]) + ";";
    }
  } else {
    for (var _key in obj) {
      var value = obj[_key];
      if (typeof value !== "object") {
        if (registered != null && registered[value] !== void 0) {
          string3 += _key + "{" + registered[value] + "}";
        } else if (isProcessableValue(value)) {
          string3 += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
        }
      } else {
        if (_key === "NO_COMPONENT_SELECTOR" && true) {
          throw new Error(noComponentSelectorMessage);
        }
        if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
          for (var _i = 0; _i < value.length; _i++) {
            if (isProcessableValue(value[_i])) {
              string3 += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
            }
          }
        } else {
          var interpolated = handleInterpolation(mergedProps, registered, value);
          switch (_key) {
            case "animation":
            case "animationName": {
              string3 += processStyleName(_key) + ":" + interpolated + ";";
              break;
            }
            default: {
              if (_key === "undefined") {
                console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
              }
              string3 += _key + "{" + interpolated + "}";
            }
          }
        }
      }
    }
  }
  return string3;
}
var labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var sourceMapPattern;
if (true) {
  sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
}
var cursor;
var serializeStyles = function serializeStyles2(args2, registered, mergedProps) {
  if (args2.length === 1 && typeof args2[0] === "object" && args2[0] !== null && args2[0].styles !== void 0) {
    return args2[0];
  }
  var stringMode = true;
  var styles2 = "";
  cursor = void 0;
  var strings = args2[0];
  if (strings == null || strings.raw === void 0) {
    stringMode = false;
    styles2 += handleInterpolation(mergedProps, registered, strings);
  } else {
    if (strings[0] === void 0) {
      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
    }
    styles2 += strings[0];
  }
  for (var i = 1; i < args2.length; i++) {
    styles2 += handleInterpolation(mergedProps, registered, args2[i]);
    if (stringMode) {
      if (strings[i] === void 0) {
        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
      }
      styles2 += strings[i];
    }
  }
  var sourceMap;
  if (true) {
    styles2 = styles2.replace(sourceMapPattern, function(match3) {
      sourceMap = match3;
      return "";
    });
  }
  labelPattern.lastIndex = 0;
  var identifierName = "";
  var match2;
  while ((match2 = labelPattern.exec(styles2)) !== null) {
    identifierName += "-" + // $FlowFixMe we know it's not null
    match2[1];
  }
  var name = murmur2(styles2) + identifierName;
  if (true) {
    return {
      name,
      styles: styles2,
      map: sourceMap,
      next: cursor,
      toString: function toString2() {
        return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
      }
    };
  }
  return {
    name,
    styles: styles2,
    next: cursor
  };
};

// node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
var React4 = __toESM(require_react());
var syncFallback = function syncFallback2(create8) {
  return create8();
};
var useInsertionEffect2 = React4["useInsertionEffect"] ? React4["useInsertionEffect"] : false;
var useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
var useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React4.useLayoutEffect;

// node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js
var isBrowser3 = true;
var hasOwnProperty2 = {}.hasOwnProperty;
var EmotionCacheContext = React5.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement !== "undefined" ? createCache({
    key: "css"
  }) : null
);
if (true) {
  EmotionCacheContext.displayName = "EmotionCacheContext";
}
var CacheProvider = EmotionCacheContext.Provider;
var withEmotionCache = function withEmotionCache2(func) {
  return (0, import_react6.forwardRef)(function(props, ref) {
    var cache = (0, import_react6.useContext)(EmotionCacheContext);
    return func(props, cache, ref);
  });
};
if (!isBrowser3) {
  withEmotionCache = function withEmotionCache3(func) {
    return function(props) {
      var cache = (0, import_react6.useContext)(EmotionCacheContext);
      if (cache === null) {
        cache = createCache({
          key: "css"
        });
        return React5.createElement(EmotionCacheContext.Provider, {
          value: cache
        }, func(props, cache));
      } else {
        return func(props, cache);
      }
    };
  };
}
var ThemeContext = React5.createContext({});
if (true) {
  ThemeContext.displayName = "EmotionThemeContext";
}
var getTheme = function getTheme2(outerTheme, theme) {
  if (typeof theme === "function") {
    var mergedTheme = theme(outerTheme);
    if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
      throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
    }
    return mergedTheme;
  }
  if (theme == null || typeof theme !== "object" || Array.isArray(theme)) {
    throw new Error("[ThemeProvider] Please make your theme prop a plain object");
  }
  return _extends({}, outerTheme, theme);
};
var createCacheWithTheme = weakMemoize(function(outerTheme) {
  return weakMemoize(function(theme) {
    return getTheme(outerTheme, theme);
  });
});
var ThemeProvider = function ThemeProvider2(props) {
  var theme = React5.useContext(ThemeContext);
  if (props.theme !== theme) {
    theme = createCacheWithTheme(theme)(props.theme);
  }
  return React5.createElement(ThemeContext.Provider, {
    value: theme
  }, props.children);
};
var typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var Insertion = function Insertion2(_ref) {
  var cache = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
  registerStyles(cache, serialized, isStringTag);
  useInsertionEffectAlwaysWithSyncFallback(function() {
    return insertStyles(cache, serialized, isStringTag);
  });
  return null;
};
var Emotion = withEmotionCache(function(props, cache, ref) {
  var cssProp = props.css;
  if (typeof cssProp === "string" && cache.registered[cssProp] !== void 0) {
    cssProp = cache.registered[cssProp];
  }
  var WrappedComponent = props[typePropName];
  var registeredStyles = [cssProp];
  var className = "";
  if (typeof props.className === "string") {
    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);
  } else if (props.className != null) {
    className = props.className + " ";
  }
  var serialized = serializeStyles(registeredStyles, void 0, React5.useContext(ThemeContext));
  if (serialized.name.indexOf("-") === -1) {
    var labelFromStack = props[labelPropName];
    if (labelFromStack) {
      serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
    }
  }
  className += cache.key + "-" + serialized.name;
  var newProps = {};
  for (var key2 in props) {
    if (hasOwnProperty2.call(props, key2) && key2 !== "css" && key2 !== typePropName && key2 !== labelPropName) {
      newProps[key2] = props[key2];
    }
  }
  newProps.ref = ref;
  newProps.className = className;
  return React5.createElement(React5.Fragment, null, React5.createElement(Insertion, {
    cache,
    serialized,
    isStringTag: typeof WrappedComponent === "string"
  }), React5.createElement(WrappedComponent, newProps));
});
if (true) {
  Emotion.displayName = "EmotionCssPropInternal";
}

// node_modules/@emotion/react/dist/emotion-react.browser.esm.js
var React6 = __toESM(require_react());
var import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
var pkg = {
  name: "@emotion/react",
  version: "11.11.0",
  main: "dist/emotion-react.cjs.js",
  module: "dist/emotion-react.esm.js",
  browser: {
    "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  },
  exports: {
    ".": {
      module: {
        worker: "./dist/emotion-react.worker.esm.js",
        browser: "./dist/emotion-react.browser.esm.js",
        "default": "./dist/emotion-react.esm.js"
      },
      "import": "./dist/emotion-react.cjs.mjs",
      "default": "./dist/emotion-react.cjs.js"
    },
    "./jsx-runtime": {
      module: {
        worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
        browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
        "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
      },
      "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
      "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
    },
    "./_isolated-hnrs": {
      module: {
        worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
        browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
        "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
      },
      "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
      "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
    },
    "./jsx-dev-runtime": {
      module: {
        worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
        browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
        "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
      },
      "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
      "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
    },
    "./package.json": "./package.json",
    "./types/css-prop": "./types/css-prop.d.ts",
    "./macro": {
      types: {
        "import": "./macro.d.mts",
        "default": "./macro.d.ts"
      },
      "default": "./macro.js"
    }
  },
  types: "types/index.d.ts",
  files: [
    "src",
    "dist",
    "jsx-runtime",
    "jsx-dev-runtime",
    "_isolated-hnrs",
    "types/*.d.ts",
    "macro.*"
  ],
  sideEffects: false,
  author: "Emotion Contributors",
  license: "MIT",
  scripts: {
    "test:typescript": "dtslint types"
  },
  dependencies: {
    "@babel/runtime": "^7.18.3",
    "@emotion/babel-plugin": "^11.11.0",
    "@emotion/cache": "^11.11.0",
    "@emotion/serialize": "^1.1.2",
    "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
    "@emotion/utils": "^1.2.1",
    "@emotion/weak-memoize": "^0.3.1",
    "hoist-non-react-statics": "^3.3.1"
  },
  peerDependencies: {
    react: ">=16.8.0"
  },
  peerDependenciesMeta: {
    "@types/react": {
      optional: true
    }
  },
  devDependencies: {
    "@definitelytyped/dtslint": "0.0.112",
    "@emotion/css": "11.11.0",
    "@emotion/css-prettifier": "1.1.3",
    "@emotion/server": "11.11.0",
    "@emotion/styled": "11.11.0",
    "html-tag-names": "^1.1.2",
    react: "16.14.0",
    "svg-tag-names": "^1.1.1",
    typescript: "^4.5.5"
  },
  repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  publishConfig: {
    access: "public"
  },
  "umd:main": "dist/emotion-react.umd.min.js",
  preconstruct: {
    entrypoints: [
      "./index.js",
      "./jsx-runtime.js",
      "./jsx-dev-runtime.js",
      "./_isolated-hnrs.js"
    ],
    umdName: "emotionReact",
    exports: {
      envConditions: [
        "browser",
        "worker"
      ],
      extra: {
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
          types: {
            "import": "./macro.d.mts",
            "default": "./macro.d.ts"
          },
          "default": "./macro.js"
        }
      }
    }
  }
};
var warnedAboutCssPropForGlobal = false;
var Global = withEmotionCache(function(props, cache) {
  if (!warnedAboutCssPropForGlobal && // check for className as well since the user is
  // probably using the custom createElement which
  // means it will be turned into a className prop
  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
  (props.className || props.css)) {
    console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
    warnedAboutCssPropForGlobal = true;
  }
  var styles2 = props.styles;
  var serialized = serializeStyles([styles2], void 0, React6.useContext(ThemeContext));
  if (!isBrowser3) {
    var _ref;
    var serializedNames = serialized.name;
    var serializedStyles = serialized.styles;
    var next2 = serialized.next;
    while (next2 !== void 0) {
      serializedNames += " " + next2.name;
      serializedStyles += next2.styles;
      next2 = next2.next;
    }
    var shouldCache = cache.compat === true;
    var rules = cache.insert("", {
      name: serializedNames,
      styles: serializedStyles
    }, cache.sheet, shouldCache);
    if (shouldCache) {
      return null;
    }
    return React6.createElement("style", (_ref = {}, _ref["data-emotion"] = cache.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
      __html: rules
    }, _ref.nonce = cache.sheet.nonce, _ref));
  }
  var sheetRef = React6.useRef();
  useInsertionEffectWithLayoutFallback(function() {
    var key2 = cache.key + "-global";
    var sheet = new cache.sheet.constructor({
      key: key2,
      nonce: cache.sheet.nonce,
      container: cache.sheet.container,
      speedy: cache.sheet.isSpeedy
    });
    var rehydrating = false;
    var node4 = document.querySelector('style[data-emotion="' + key2 + " " + serialized.name + '"]');
    if (cache.sheet.tags.length) {
      sheet.before = cache.sheet.tags[0];
    }
    if (node4 !== null) {
      rehydrating = true;
      node4.setAttribute("data-emotion", key2);
      sheet.hydrate([node4]);
    }
    sheetRef.current = [sheet, rehydrating];
    return function() {
      sheet.flush();
    };
  }, [cache]);
  useInsertionEffectWithLayoutFallback(function() {
    var sheetRefCurrent = sheetRef.current;
    var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
    if (rehydrating) {
      sheetRefCurrent[1] = false;
      return;
    }
    if (serialized.next !== void 0) {
      insertStyles(cache, serialized.next, true);
    }
    if (sheet.tags.length) {
      var element7 = sheet.tags[sheet.tags.length - 1].nextElementSibling;
      sheet.before = element7;
      sheet.flush();
    }
    cache.insert("", serialized, sheet, false);
  }, [cache, serialized.name]);
  return null;
});
if (true) {
  Global.displayName = "EmotionGlobal";
}
function css() {
  for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
    args2[_key] = arguments[_key];
  }
  return serializeStyles(args2);
}
var keyframes = function keyframes2() {
  var insertable = css.apply(void 0, arguments);
  var name = "animation-" + insertable.name;
  return {
    name,
    styles: "@keyframes " + name + "{" + insertable.styles + "}",
    anim: 1,
    toString: function toString2() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }
  };
};
var classnames = function classnames2(args2) {
  var len = args2.length;
  var i = 0;
  var cls = "";
  for (; i < len; i++) {
    var arg = args2[i];
    if (arg == null)
      continue;
    var toAdd = void 0;
    switch (typeof arg) {
      case "boolean":
        break;
      case "object": {
        if (Array.isArray(arg)) {
          toAdd = classnames2(arg);
        } else {
          if (arg.styles !== void 0 && arg.name !== void 0) {
            console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
          }
          toAdd = "";
          for (var k in arg) {
            if (arg[k] && k) {
              toAdd && (toAdd += " ");
              toAdd += k;
            }
          }
        }
        break;
      }
      default: {
        toAdd = arg;
      }
    }
    if (toAdd) {
      cls && (cls += " ");
      cls += toAdd;
    }
  }
  return cls;
};
function merge(registered, css2, className) {
  var registeredStyles = [];
  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
  if (registeredStyles.length < 2) {
    return className;
  }
  return rawClassName + css2(registeredStyles);
}
var Insertion3 = function Insertion4(_ref) {
  var cache = _ref.cache, serializedArr = _ref.serializedArr;
  useInsertionEffectAlwaysWithSyncFallback(function() {
    for (var i = 0; i < serializedArr.length; i++) {
      insertStyles(cache, serializedArr[i], false);
    }
  });
  return null;
};
var ClassNames = withEmotionCache(function(props, cache) {
  var hasRendered = false;
  var serializedArr = [];
  var css2 = function css3() {
    if (hasRendered && true) {
      throw new Error("css can only be used during render");
    }
    for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
      args2[_key] = arguments[_key];
    }
    var serialized = serializeStyles(args2, cache.registered);
    serializedArr.push(serialized);
    registerStyles(cache, serialized, false);
    return cache.key + "-" + serialized.name;
  };
  var cx = function cx2() {
    if (hasRendered && true) {
      throw new Error("cx can only be used during render");
    }
    for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args2[_key2] = arguments[_key2];
    }
    return merge(cache.registered, css2, classnames(args2));
  };
  var content5 = {
    css: css2,
    cx,
    theme: React6.useContext(ThemeContext)
  };
  var ele = props.children(content5);
  hasRendered = true;
  return React6.createElement(React6.Fragment, null, React6.createElement(Insertion3, {
    cache,
    serializedArr
  }), ele);
});
if (true) {
  ClassNames.displayName = "EmotionClassNames";
}
if (true) {
  isBrowser6 = true;
  isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
  if (isBrowser6 && !isTestEnv) {
    globalContext = // $FlowIgnore
    typeof globalThis !== "undefined" ? globalThis : isBrowser6 ? window : global;
    globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
    if (globalContext[globalKey]) {
      console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
    }
    globalContext[globalKey] = true;
  }
}
var isBrowser6;
var isTestEnv;
var globalContext;
var globalKey;

// node_modules/@mantine/styles/esm/theme/GlobalStyles.js
var import_react7 = __toESM(require_react());
var __defProp3 = Object.defineProperty;
var __defProps2 = Object.defineProperties;
var __getOwnPropDescs2 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols3 = Object.getOwnPropertySymbols;
var __hasOwnProp3 = Object.prototype.hasOwnProperty;
var __propIsEnum3 = Object.prototype.propertyIsEnumerable;
var __defNormalProp3 = (obj, key2, value) => key2 in obj ? __defProp3(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues3 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp3.call(b2, prop))
      __defNormalProp3(a2, prop, b2[prop]);
  if (__getOwnPropSymbols3)
    for (var prop of __getOwnPropSymbols3(b2)) {
      if (__propIsEnum3.call(b2, prop))
        __defNormalProp3(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps2 = (a2, b2) => __defProps2(a2, __getOwnPropDescs2(b2));
function GlobalStyles({ theme }) {
  return import_react7.default.createElement(Global, {
    styles: {
      "*, *::before, *::after": {
        boxSizing: "border-box"
      },
      html: {
        colorScheme: theme.colorScheme === "dark" ? "dark" : "light"
      },
      body: __spreadProps2(__spreadValues3({}, theme.fn.fontStyles()), {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
        lineHeight: theme.lineHeight,
        fontSize: theme.fontSizes.md,
        WebkitFontSmoothing: "antialiased",
        MozOsxFontSmoothing: "grayscale"
      })
    }
  });
}

// node_modules/@mantine/styles/esm/theme/MantineCssVariables.js
var import_react9 = __toESM(require_react());
function assignSizeVariables(variables, sizes24, name) {
  Object.keys(sizes24).forEach((size3) => {
    variables[`--mantine-${name}-${size3}`] = typeof sizes24[size3] === "number" ? `${sizes24[size3]}px` : sizes24[size3];
  });
}
function MantineCssVariables({ theme }) {
  const variables = {
    "--mantine-color-white": theme.white,
    "--mantine-color-black": theme.black,
    "--mantine-transition-timing-function": theme.transitionTimingFunction,
    "--mantine-line-height": `${theme.lineHeight}`,
    "--mantine-font-family": theme.fontFamily,
    "--mantine-font-family-monospace": theme.fontFamilyMonospace,
    "--mantine-font-family-headings": theme.headings.fontFamily,
    "--mantine-heading-font-weight": `${theme.headings.fontWeight}`
  };
  assignSizeVariables(variables, theme.shadows, "shadow");
  assignSizeVariables(variables, theme.fontSizes, "font-size");
  assignSizeVariables(variables, theme.radius, "radius");
  assignSizeVariables(variables, theme.spacing, "spacing");
  Object.keys(theme.colors).forEach((color2) => {
    theme.colors[color2].forEach((shade, index7) => {
      variables[`--mantine-color-${color2}-${index7}`] = shade;
    });
  });
  const headings = theme.headings.sizes;
  Object.keys(headings).forEach((heading4) => {
    variables[`--mantine-${heading4}-font-size`] = `${headings[heading4].fontSize}px`;
    variables[`--mantine-${heading4}-line-height`] = `${headings[heading4].lineHeight}`;
  });
  return import_react9.default.createElement(Global, {
    styles: {
      ":root": variables
    }
  });
}

// node_modules/@mantine/styles/esm/theme/utils/merge-theme/merge-theme.js
var __defProp4 = Object.defineProperty;
var __defProps3 = Object.defineProperties;
var __getOwnPropDescs3 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols4 = Object.getOwnPropertySymbols;
var __hasOwnProp4 = Object.prototype.hasOwnProperty;
var __propIsEnum4 = Object.prototype.propertyIsEnumerable;
var __defNormalProp4 = (obj, key2, value) => key2 in obj ? __defProp4(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues4 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp4.call(b2, prop))
      __defNormalProp4(a2, prop, b2[prop]);
  if (__getOwnPropSymbols4)
    for (var prop of __getOwnPropSymbols4(b2)) {
      if (__propIsEnum4.call(b2, prop))
        __defNormalProp4(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps3 = (a2, b2) => __defProps3(a2, __getOwnPropDescs3(b2));
function mergeTheme(currentTheme, themeOverride) {
  if (!themeOverride) {
    return currentTheme;
  }
  const result = Object.keys(currentTheme).reduce((acc, key2) => {
    if (key2 === "headings" && themeOverride.headings) {
      const sizes24 = themeOverride.headings.sizes ? Object.keys(currentTheme.headings.sizes).reduce((headingsAcc, h2) => {
        headingsAcc[h2] = __spreadValues4(__spreadValues4({}, currentTheme.headings.sizes[h2]), themeOverride.headings.sizes[h2]);
        return headingsAcc;
      }, {}) : currentTheme.headings.sizes;
      return __spreadProps3(__spreadValues4({}, acc), {
        headings: __spreadProps3(__spreadValues4(__spreadValues4({}, currentTheme.headings), themeOverride.headings), {
          sizes: sizes24
        })
      });
    }
    acc[key2] = typeof themeOverride[key2] === "object" ? __spreadValues4(__spreadValues4({}, currentTheme[key2]), themeOverride[key2]) : typeof themeOverride[key2] === "number" || typeof themeOverride[key2] === "boolean" || typeof themeOverride[key2] === "function" ? themeOverride[key2] : themeOverride[key2] || currentTheme[key2];
    return acc;
  }, {});
  if (!(result.primaryColor in result.colors)) {
    throw new Error("MantineProvider: Invalid theme.primaryColor, it accepts only key of theme.colors, learn more – https://mantine.dev/theming/colors/#primary-color");
  }
  return result;
}
function mergeThemeWithFunctions(currentTheme, themeOverride) {
  return attachFunctions(mergeTheme(currentTheme, themeOverride));
}

// node_modules/@mantine/styles/esm/theme/utils/filter-props/filter-props.js
function filterProps(props) {
  return Object.keys(props).reduce((acc, key2) => {
    if (props[key2] !== void 0) {
      acc[key2] = props[key2];
    }
    return acc;
  }, {});
}

// node_modules/@mantine/styles/esm/theme/NormalizeCSS.js
var import_react11 = __toESM(require_react());
var styles = {
  html: {
    fontFamily: "sans-serif",
    lineHeight: "1.15",
    textSizeAdjust: "100%"
  },
  body: {
    margin: 0
  },
  "article, aside, footer, header, nav, section, figcaption, figure, main": {
    display: "block"
  },
  h1: {
    fontSize: "2em"
  },
  hr: {
    boxSizing: "content-box",
    height: 0,
    overflow: "visible"
  },
  pre: {
    fontFamily: "monospace, monospace",
    fontSize: "1em"
  },
  a: {
    background: "transparent",
    textDecorationSkip: "objects"
  },
  "a:active, a:hover": {
    outlineWidth: 0
  },
  "abbr[title]": {
    borderBottom: "none",
    textDecoration: "underline"
  },
  "b, strong": {
    fontWeight: "bolder"
  },
  "code, kbp, samp": {
    fontFamily: "monospace, monospace",
    fontSize: "1em"
  },
  dfn: {
    fontStyle: "italic"
  },
  mark: {
    backgroundColor: "#ff0",
    color: "#000"
  },
  small: {
    fontSize: "80%"
  },
  "sub, sup": {
    fontSize: "75%",
    lineHeight: 0,
    position: "relative",
    verticalAlign: "baseline"
  },
  sup: {
    top: "-0.5em"
  },
  sub: {
    bottom: "-0.25em"
  },
  "audio, video": {
    display: "inline-block"
  },
  "audio:not([controls])": {
    display: "none",
    height: 0
  },
  img: {
    borderStyle: "none",
    verticalAlign: "middle"
  },
  "svg:not(:root)": {
    overflow: "hidden"
  },
  "button, input, optgroup, select, textarea": {
    fontFamily: "sans-serif",
    fontSize: "100%",
    lineHeight: "1.15",
    margin: 0
  },
  "button, input": {
    overflow: "visible"
  },
  "button, select": {
    textTransform: "none"
  },
  "button, [type=reset], [type=submit]": {
    WebkitAppearance: "button"
  },
  "button::-moz-focus-inner, [type=button]::-moz-focus-inner, [type=reset]::-moz-focus-inner, [type=submit]::-moz-focus-inner": {
    borderStyle: "none",
    padding: 0
  },
  "button:-moz-focusring, [type=button]:-moz-focusring, [type=reset]:-moz-focusring, [type=submit]:-moz-focusring": {
    outline: "1px dotted ButtonText"
  },
  legend: {
    boxSizing: "border-box",
    color: "inherit",
    display: "table",
    maxWidth: "100%",
    padding: 0,
    whiteSpace: "normal"
  },
  progress: {
    display: "inline-block",
    verticalAlign: "baseline"
  },
  textarea: {
    overflow: "auto"
  },
  "[type=checkbox], [type=radio]": {
    boxSizing: "border-box",
    padding: 0
  },
  "[type=number]::-webkit-inner-spin-button, [type=number]::-webkit-outer-spin-button": {
    height: "auto"
  },
  "[type=search]": {
    appearance: "none"
  },
  "[type=search]::-webkit-search-cancel-button, [type=search]::-webkit-search-decoration": {
    appearance: "none"
  },
  "::-webkit-file-upload-button": {
    appearance: "button",
    font: "inherit"
  },
  "details, menu": {
    display: "block"
  },
  summary: {
    display: "list-item"
  },
  canvas: {
    display: "inline-block"
  },
  template: {
    display: "none"
  },
  "[hidden]": {
    display: "none"
  }
};
function NormalizeCSS() {
  return import_react11.default.createElement(Global, {
    styles
  });
}

// node_modules/@mantine/styles/esm/theme/MantineProvider.js
var __defProp5 = Object.defineProperty;
var __getOwnPropSymbols5 = Object.getOwnPropertySymbols;
var __hasOwnProp5 = Object.prototype.hasOwnProperty;
var __propIsEnum5 = Object.prototype.propertyIsEnumerable;
var __defNormalProp5 = (obj, key2, value) => key2 in obj ? __defProp5(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues5 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp5.call(b2, prop))
      __defNormalProp5(a2, prop, b2[prop]);
  if (__getOwnPropSymbols5)
    for (var prop of __getOwnPropSymbols5(b2)) {
      if (__propIsEnum5.call(b2, prop))
        __defNormalProp5(a2, prop, b2[prop]);
    }
  return a2;
};
var MantineProviderContext = (0, import_react13.createContext)({
  theme: DEFAULT_THEME
});
function useMantineTheme() {
  var _a;
  return ((_a = (0, import_react13.useContext)(MantineProviderContext)) == null ? void 0 : _a.theme) || DEFAULT_THEME;
}
function useMantineProviderStyles(component) {
  const theme = useMantineTheme();
  const getStyles2 = (name) => {
    var _a, _b;
    return {
      styles: ((_a = theme.components[name]) == null ? void 0 : _a.styles) || {},
      classNames: ((_b = theme.components[name]) == null ? void 0 : _b.classNames) || {}
    };
  };
  if (Array.isArray(component)) {
    return component.map(getStyles2);
  }
  return [getStyles2(component)];
}
function useMantineEmotionCache() {
  var _a;
  return (_a = (0, import_react13.useContext)(MantineProviderContext)) == null ? void 0 : _a.emotionCache;
}
function useComponentDefaultProps(component, defaultProps118, props) {
  var _a;
  const theme = useMantineTheme();
  const contextPropsPayload = (_a = theme.components[component]) == null ? void 0 : _a.defaultProps;
  const contextProps = typeof contextPropsPayload === "function" ? contextPropsPayload(theme) : contextPropsPayload;
  return __spreadValues5(__spreadValues5(__spreadValues5({}, defaultProps118), contextProps), filterProps(props));
}
function MantineProvider({
  theme,
  emotionCache,
  withNormalizeCSS = false,
  withGlobalStyles = false,
  withCSSVariables = false,
  inherit = false,
  children
}) {
  const ctx = (0, import_react13.useContext)(MantineProviderContext);
  const mergedTheme = mergeThemeWithFunctions(DEFAULT_THEME, inherit ? __spreadValues5(__spreadValues5({}, ctx.theme), theme) : theme);
  return import_react13.default.createElement(ThemeProvider, {
    theme: mergedTheme
  }, import_react13.default.createElement(MantineProviderContext.Provider, {
    value: { theme: mergedTheme, emotionCache }
  }, withNormalizeCSS && import_react13.default.createElement(NormalizeCSS, null), withGlobalStyles && import_react13.default.createElement(GlobalStyles, {
    theme: mergedTheme
  }), withCSSVariables && import_react13.default.createElement(MantineCssVariables, {
    theme: mergedTheme
  }), typeof mergedTheme.globalStyles === "function" && import_react13.default.createElement(Global, {
    styles: mergedTheme.globalStyles(mergedTheme)
  }), children));
}
MantineProvider.displayName = "@mantine/core/MantineProvider";

// node_modules/@mantine/styles/esm/theme/ColorSchemeProvider.js
var import_react15 = __toESM(require_react());
var ColorSchemeContext = (0, import_react15.createContext)(null);
function ColorSchemeProvider({
  colorScheme,
  toggleColorScheme,
  children
}) {
  return import_react15.default.createElement(ColorSchemeContext.Provider, {
    value: { colorScheme, toggleColorScheme }
  }, children);
}
ColorSchemeProvider.displayName = "@mantine/core/ColorSchemeProvider";

// node_modules/@mantine/styles/esm/theme/utils/get-default-z-index/get-default-z-index.js
var elevations = {
  app: 100,
  modal: 200,
  popover: 300,
  overlay: 400,
  max: 9999
};
function getDefaultZIndex(level) {
  return elevations[level];
}

// node_modules/@mantine/styles/esm/tss/utils/use-guaranteed-memo/use-guaranteed-memo.js
var import_react16 = __toESM(require_react());
function useGuaranteedMemo(fn3, deps) {
  const ref = (0, import_react16.useRef)();
  if (!ref.current || deps.length !== ref.current.prevDeps.length || ref.current.prevDeps.map((v, i) => v === deps[i]).indexOf(false) >= 0) {
    ref.current = {
      v: fn3(),
      prevDeps: [...deps]
    };
  }
  return ref.current.v;
}

// node_modules/@mantine/styles/esm/tss/default-emotion-cache.js
var defaultMantineEmotionCache = createCache({ key: "mantine", prepend: true });

// node_modules/@mantine/styles/esm/tss/use-emotion-cache.js
function useEmotionCache() {
  const cache = useMantineEmotionCache();
  return cache || defaultMantineEmotionCache;
}

// node_modules/@mantine/styles/esm/tss/use-css.js
var __defProp6 = Object.defineProperty;
var __getOwnPropSymbols6 = Object.getOwnPropertySymbols;
var __hasOwnProp6 = Object.prototype.hasOwnProperty;
var __propIsEnum6 = Object.prototype.propertyIsEnumerable;
var __defNormalProp6 = (obj, key2, value) => key2 in obj ? __defProp6(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues6 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp6.call(b2, prop))
      __defNormalProp6(a2, prop, b2[prop]);
  if (__getOwnPropSymbols6)
    for (var prop of __getOwnPropSymbols6(b2)) {
      if (__propIsEnum6.call(b2, prop))
        __defNormalProp6(a2, prop, b2[prop]);
    }
  return a2;
};
var refPropertyName = "ref";
function getRef(args2) {
  let ref;
  if (args2.length !== 1) {
    return { args: args2, ref };
  }
  const [arg] = args2;
  if (!(arg instanceof Object)) {
    return { args: args2, ref };
  }
  if (!(refPropertyName in arg)) {
    return { args: args2, ref };
  }
  ref = arg[refPropertyName];
  const argCopy = __spreadValues6({}, arg);
  delete argCopy[refPropertyName];
  return { args: [argCopy], ref };
}
var { cssFactory } = (() => {
  function merge3(registered, css2, className) {
    const registeredStyles = [];
    const rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css2(registeredStyles);
  }
  function _cssFactory(params2) {
    const { cache } = params2;
    const css2 = (...styles2) => {
      const { ref, args: args2 } = getRef(styles2);
      const serialized = serializeStyles(args2, cache.registered);
      insertStyles(cache, serialized, false);
      return `${cache.key}-${serialized.name}${ref === void 0 ? "" : ` ${ref}`}`;
    };
    const cx = (...args2) => merge3(cache.registered, css2, clsx_m_default(args2));
    return { css: css2, cx };
  }
  return { cssFactory: _cssFactory };
})();
function useCss() {
  const cache = useEmotionCache();
  return useGuaranteedMemo(() => cssFactory({ cache }), [cache]);
}

// node_modules/@mantine/styles/esm/tss/utils/merge-class-names/merge-class-names.js
function mergeClassNames({
  cx,
  classes,
  context,
  classNames,
  name,
  cache
}) {
  const contextClassNames = context.reduce((acc, item) => {
    Object.keys(item.classNames).forEach((key2) => {
      if (typeof acc[key2] !== "string") {
        acc[key2] = `${item.classNames[key2]}`;
      } else {
        acc[key2] = `${acc[key2]} ${item.classNames[key2]}`;
      }
    });
    return acc;
  }, {});
  return Object.keys(classes).reduce((acc, className) => {
    acc[className] = cx(classes[className], contextClassNames[className], classNames != null && classNames[className], Array.isArray(name) ? name.filter(Boolean).map((part) => `${(cache == null ? void 0 : cache.key) || "mantine"}-${part}-${className}`).join(" ") : name ? `${(cache == null ? void 0 : cache.key) || "mantine"}-${name}-${className}` : null);
    return acc;
  }, {});
}

// node_modules/@mantine/styles/esm/tss/create-styles.js
var __defProp7 = Object.defineProperty;
var __getOwnPropSymbols7 = Object.getOwnPropertySymbols;
var __hasOwnProp7 = Object.prototype.hasOwnProperty;
var __propIsEnum7 = Object.prototype.propertyIsEnumerable;
var __defNormalProp7 = (obj, key2, value) => key2 in obj ? __defProp7(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues7 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp7.call(b2, prop))
      __defNormalProp7(a2, prop, b2[prop]);
  if (__getOwnPropSymbols7)
    for (var prop of __getOwnPropSymbols7(b2)) {
      if (__propIsEnum7.call(b2, prop))
        __defNormalProp7(a2, prop, b2[prop]);
    }
  return a2;
};
function createRef(refName) {
  return `__mantine-ref-${refName || ""}`;
}
function getStyles(styles2, theme, params2) {
  const extractStyles = (stylesPartial) => typeof stylesPartial === "function" ? stylesPartial(theme, params2 || {}) : stylesPartial || {};
  if (Array.isArray(styles2)) {
    return styles2.map((item) => extractStyles(item.styles)).reduce((acc, item) => {
      Object.keys(item).forEach((key2) => {
        if (!acc[key2]) {
          acc[key2] = __spreadValues7({}, item[key2]);
        } else {
          acc[key2] = __spreadValues7(__spreadValues7({}, acc[key2]), item[key2]);
        }
      });
      return acc;
    }, {});
  }
  return extractStyles(styles2);
}
function createStyles(input3) {
  const getCssObject = typeof input3 === "function" ? input3 : () => input3;
  function useStyles107(params2, options2) {
    const theme = useMantineTheme();
    const context = useMantineProviderStyles(options2 == null ? void 0 : options2.name);
    const cache = useMantineEmotionCache();
    const { css: css2, cx } = useCss();
    const cssObject = getCssObject(theme, params2, createRef);
    const componentStyles = getStyles(options2 == null ? void 0 : options2.styles, theme, params2);
    const providerStyles = getStyles(context, theme, params2);
    const classes = Object.fromEntries(Object.keys(cssObject).map((key2) => {
      const mergedStyles = cx({ [css2(cssObject[key2])]: !(options2 == null ? void 0 : options2.unstyled) }, css2(providerStyles[key2]), css2(componentStyles[key2]));
      return [key2, mergedStyles];
    }));
    return {
      classes: mergeClassNames({
        cx,
        classes,
        context,
        classNames: options2 == null ? void 0 : options2.classNames,
        name: options2 == null ? void 0 : options2.name,
        cache
      }),
      cx,
      theme
    };
  }
  return useStyles107;
}

// node_modules/@mantine/styles/esm/tss/Global.js
var import_react17 = __toESM(require_react());
function Global2({ styles: styles2 }) {
  const theme = useMantineTheme();
  return import_react17.default.createElement(Global, {
    styles: css(typeof styles2 === "function" ? styles2(theme) : styles2)
  });
}

// node_modules/@mantine/core/esm/Transition/transitions.js
var __defProp8 = Object.defineProperty;
var __defProps4 = Object.defineProperties;
var __getOwnPropDescs4 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols8 = Object.getOwnPropertySymbols;
var __hasOwnProp8 = Object.prototype.hasOwnProperty;
var __propIsEnum8 = Object.prototype.propertyIsEnumerable;
var __defNormalProp8 = (obj, key2, value) => key2 in obj ? __defProp8(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues8 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp8.call(b2, prop))
      __defNormalProp8(a2, prop, b2[prop]);
  if (__getOwnPropSymbols8)
    for (var prop of __getOwnPropSymbols8(b2)) {
      if (__propIsEnum8.call(b2, prop))
        __defNormalProp8(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps4 = (a2, b2) => __defProps4(a2, __getOwnPropDescs4(b2));
var popIn = {
  in: { opacity: 1, transform: "scale(1)" },
  out: { opacity: 0, transform: "scale(.9) translateY(10px)" },
  transitionProperty: "transform, opacity"
};
var transitions = {
  fade: {
    in: { opacity: 1 },
    out: { opacity: 0 },
    transitionProperty: "opacity"
  },
  scale: {
    in: { opacity: 1, transform: "scale(1)" },
    out: { opacity: 0, transform: "scale(0)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "scale-y": {
    in: { opacity: 1, transform: "scaleY(1)" },
    out: { opacity: 0, transform: "scaleY(0)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "scale-x": {
    in: { opacity: 1, transform: "scaleX(1)" },
    out: { opacity: 0, transform: "scaleX(0)" },
    common: { transformOrigin: "left" },
    transitionProperty: "transform, opacity"
  },
  "skew-up": {
    in: { opacity: 1, transform: "translateY(0) skew(0deg, 0deg)" },
    out: { opacity: 0, transform: "translateY(-20px) skew(-10deg, -5deg)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "skew-down": {
    in: { opacity: 1, transform: "translateY(0) skew(0deg, 0deg)" },
    out: { opacity: 0, transform: "translateY(20px) skew(-10deg, -5deg)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "rotate-left": {
    in: { opacity: 1, transform: "translateY(0) rotate(0deg)" },
    out: { opacity: 0, transform: "translateY(20px) rotate(-5deg)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "rotate-right": {
    in: { opacity: 1, transform: "translateY(0) rotate(0deg)" },
    out: { opacity: 0, transform: "translateY(20px) rotate(5deg)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "slide-down": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(-100%)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "slide-up": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(100%)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "slide-left": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(100%)" },
    common: { transformOrigin: "left" },
    transitionProperty: "transform, opacity"
  },
  "slide-right": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(-100%)" },
    common: { transformOrigin: "right" },
    transitionProperty: "transform, opacity"
  },
  pop: __spreadProps4(__spreadValues8({}, popIn), {
    common: { transformOrigin: "center center" }
  }),
  "pop-bottom-left": __spreadProps4(__spreadValues8({}, popIn), {
    common: { transformOrigin: "bottom left" }
  }),
  "pop-bottom-right": __spreadProps4(__spreadValues8({}, popIn), {
    common: { transformOrigin: "bottom right" }
  }),
  "pop-top-left": __spreadProps4(__spreadValues8({}, popIn), {
    common: { transformOrigin: "top left" }
  }),
  "pop-top-right": __spreadProps4(__spreadValues8({}, popIn), {
    common: { transformOrigin: "top right" }
  })
};

// node_modules/@mantine/core/esm/Transition/index.js
var AVAILABLE_TRANSITIONS = Object.keys(transitions);

// node_modules/@mantine/core/esm/Accordion/Accordion.js
var import_react79 = __toESM(require_react());

// node_modules/@mantine/core/esm/Accordion/AccordionProvider.js
var import_react70 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-click-outside/use-click-outside.js
var import_react20 = __toESM(require_react());
var DEFAULT_EVENTS = ["mousedown", "touchstart"];
function useClickOutside(handler, events, nodes) {
  const ref = (0, import_react20.useRef)();
  (0, import_react20.useEffect)(() => {
    const listener = (event) => {
      const { target } = event != null ? event : {};
      if (Array.isArray(nodes)) {
        const shouldIgnore = (target == null ? void 0 : target.hasAttribute("data-ignore-outside-clicks")) || !document.body.contains(target) && target.tagName !== "HTML";
        const shouldTrigger = nodes.every((node4) => !!node4 && !event.composedPath().includes(node4));
        shouldTrigger && !shouldIgnore && handler();
      } else if (ref.current && !ref.current.contains(target)) {
        handler();
      }
    };
    (events || DEFAULT_EVENTS).forEach((fn3) => document.addEventListener(fn3, listener));
    return () => {
      (events || DEFAULT_EVENTS).forEach((fn3) => document.removeEventListener(fn3, listener));
    };
  }, [ref, handler, nodes]);
  return ref;
}

// node_modules/@mantine/hooks/esm/use-clipboard/use-clipboard.js
var import_react21 = __toESM(require_react());
function useClipboard({ timeout: timeout2 = 2e3 } = {}) {
  const [error, setError] = (0, import_react21.useState)(null);
  const [copied, setCopied] = (0, import_react21.useState)(false);
  const [copyTimeout, setCopyTimeout] = (0, import_react21.useState)(null);
  const handleCopyResult = (value) => {
    clearTimeout(copyTimeout);
    setCopyTimeout(setTimeout(() => setCopied(false), timeout2));
    setCopied(value);
  };
  const copy4 = (valueToCopy) => {
    if ("clipboard" in navigator) {
      navigator.clipboard.writeText(valueToCopy).then(() => handleCopyResult(true)).catch((err) => setError(err));
    } else {
      setError(new Error("useClipboard: navigator.clipboard is not supported"));
    }
  };
  const reset2 = () => {
    setCopied(false);
    setError(null);
    clearTimeout(copyTimeout);
  };
  return { copy: copy4, reset: reset2, error, copied };
}

// node_modules/@mantine/hooks/esm/use-media-query/use-media-query.js
var import_react22 = __toESM(require_react());
function attachMediaListener(query, callback) {
  try {
    query.addEventListener("change", callback);
    return () => query.removeEventListener("change", callback);
  } catch (e) {
    query.addListener(callback);
    return () => query.removeListener(callback);
  }
}
function getInitialValue(query, initialValue) {
  if (typeof initialValue === "boolean") {
    return initialValue;
  }
  if (typeof window !== "undefined" && "matchMedia" in window) {
    return window.matchMedia(query).matches;
  }
  return false;
}
function useMediaQuery(query, initialValue, { getInitialValueInEffect } = {
  getInitialValueInEffect: true
}) {
  const [matches3, setMatches] = (0, import_react22.useState)(getInitialValueInEffect ? initialValue : getInitialValue(query, initialValue));
  const queryRef = (0, import_react22.useRef)();
  (0, import_react22.useEffect)(() => {
    if ("matchMedia" in window) {
      queryRef.current = window.matchMedia(query);
      setMatches(queryRef.current.matches);
      return attachMediaListener(queryRef.current, (event) => setMatches(event.matches));
    }
    return void 0;
  }, [query]);
  return matches3;
}

// node_modules/@mantine/hooks/esm/use-counter/use-counter.js
var import_react23 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/utils/clamp/clamp.js
function clamp(value, min5, max5) {
  return Math.min(Math.max(value, min5), max5);
}

// node_modules/@mantine/hooks/esm/use-debounced-state/use-debounced-state.js
var import_react24 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-debounced-value/use-debounced-value.js
var import_react25 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-isomorphic-effect/use-isomorphic-effect.js
var import_react26 = __toESM(require_react());
var useIsomorphicEffect = typeof document !== "undefined" ? import_react26.useLayoutEffect : import_react26.useEffect;

// node_modules/@mantine/hooks/esm/use-document-visibility/use-document-visibility.js
var import_react27 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-focus-return/use-focus-return.js
var import_react29 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-did-update/use-did-update.js
var import_react28 = __toESM(require_react());
function useDidUpdate(fn3, dependencies) {
  const mounted = (0, import_react28.useRef)(false);
  (0, import_react28.useEffect)(() => () => {
    mounted.current = false;
  }, []);
  (0, import_react28.useEffect)(() => {
    if (mounted.current) {
      return fn3();
    }
    mounted.current = true;
    return void 0;
  }, dependencies);
}

// node_modules/@mantine/hooks/esm/use-focus-return/use-focus-return.js
function useFocusReturn({ opened, shouldReturnFocus = true }) {
  const lastActiveElement = (0, import_react29.useRef)();
  const returnFocus = () => {
    var _a;
    if (lastActiveElement.current && "focus" in lastActiveElement.current && typeof lastActiveElement.current.focus === "function") {
      (_a = lastActiveElement.current) == null ? void 0 : _a.focus({ preventScroll: true });
    }
  };
  useDidUpdate(() => {
    let timeout2 = -1;
    const clearFocusTimeout = (event) => {
      if (event.key === "Tab") {
        window.clearTimeout(timeout2);
      }
    };
    document.addEventListener("keydown", clearFocusTimeout);
    if (opened) {
      lastActiveElement.current = document.activeElement;
    } else if (shouldReturnFocus) {
      timeout2 = window.setTimeout(returnFocus, 10);
    }
    return () => {
      window.clearTimeout(timeout2);
      document.removeEventListener("keydown", clearFocusTimeout);
    };
  }, [opened, shouldReturnFocus]);
  return returnFocus;
}

// node_modules/@mantine/hooks/esm/use-focus-trap/use-focus-trap.js
var import_react30 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-focus-trap/tabbable.js
var TABBABLE_NODES = /input|select|textarea|button|object/;
var FOCUS_SELECTOR = "a, input, select, textarea, button, object, [tabindex]";
function hidden(element7) {
  if (false) {
    return false;
  }
  return element7.style.display === "none";
}
function visible(element7) {
  const isHidden = element7.getAttribute("aria-hidden") || element7.getAttribute("hidden") || element7.getAttribute("type") === "hidden";
  if (isHidden) {
    return false;
  }
  let parentElement = element7;
  while (parentElement) {
    if (parentElement === document.body || parentElement.nodeType === 11) {
      break;
    }
    if (hidden(parentElement)) {
      return false;
    }
    parentElement = parentElement.parentNode;
  }
  return true;
}
function getElementTabIndex(element7) {
  let tabIndex = element7.getAttribute("tabindex");
  if (tabIndex === null) {
    tabIndex = void 0;
  }
  return parseInt(tabIndex, 10);
}
function focusable(element7) {
  const nodeName = element7.nodeName.toLowerCase();
  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element7));
  const res = TABBABLE_NODES.test(nodeName) && !element7.disabled || (element7 instanceof HTMLAnchorElement ? element7.href || isTabIndexNotNaN : isTabIndexNotNaN);
  return res && visible(element7);
}
function tabbable(element7) {
  const tabIndex = getElementTabIndex(element7);
  const isTabIndexNaN = Number.isNaN(tabIndex);
  return (isTabIndexNaN || tabIndex >= 0) && focusable(element7);
}
function findTabbableDescendants(element7) {
  return Array.from(element7.querySelectorAll(FOCUS_SELECTOR)).filter(tabbable);
}

// node_modules/@mantine/hooks/esm/use-focus-trap/scope-tab.js
function scopeTab(node4, event) {
  const tabbable3 = findTabbableDescendants(node4);
  if (!tabbable3.length) {
    event.preventDefault();
    return;
  }
  const finalTabbable = tabbable3[event.shiftKey ? 0 : tabbable3.length - 1];
  const root6 = node4.getRootNode();
  const leavingFinalTabbable = finalTabbable === root6.activeElement || node4 === root6.activeElement;
  if (!leavingFinalTabbable) {
    return;
  }
  event.preventDefault();
  const target = tabbable3[event.shiftKey ? tabbable3.length - 1 : 0];
  if (target) {
    target.focus();
  }
}

// node_modules/@mantine/hooks/esm/use-focus-trap/create-aria-hider.js
function createAriaHider(containerNode, selector = "body > :not(script)") {
  const rootNodes = Array.from(document.querySelectorAll(selector)).map((node4) => {
    var _a;
    if (((_a = node4 == null ? void 0 : node4.shadowRoot) == null ? void 0 : _a.contains(containerNode)) || node4.contains(containerNode)) {
      return void 0;
    }
    const ariaHidden = node4.getAttribute("aria-hidden");
    if (ariaHidden === null || ariaHidden === "false") {
      node4.setAttribute("aria-hidden", "true");
    }
    return { node: node4, ariaHidden };
  });
  return () => {
    rootNodes.forEach((item) => {
      if (!item) {
        return;
      }
      if (item.ariaHidden === null) {
        item.node.removeAttribute("aria-hidden");
      } else {
        item.node.setAttribute("aria-hidden", item.ariaHidden);
      }
    });
  };
}

// node_modules/@mantine/hooks/esm/use-focus-trap/use-focus-trap.js
function useFocusTrap(active = true) {
  const ref = (0, import_react30.useRef)();
  const restoreAria = (0, import_react30.useRef)(null);
  const setRef = (0, import_react30.useCallback)((node4) => {
    if (!active) {
      return;
    }
    if (node4 === null) {
      if (restoreAria.current) {
        restoreAria.current();
        restoreAria.current = null;
      }
      return;
    }
    restoreAria.current = createAriaHider(node4);
    if (ref.current === node4) {
      return;
    }
    if (node4) {
      const processNode = () => {
        let focusElement = node4.querySelector("[data-autofocus]");
        if (!focusElement) {
          const children = Array.from(node4.querySelectorAll(FOCUS_SELECTOR));
          focusElement = children.find(tabbable) || children.find(focusable) || null;
          if (!focusElement && focusable(node4))
            focusElement = node4;
        }
        if (focusElement) {
          focusElement.focus({ preventScroll: true });
        } else if (true) {
          console.warn("[@mantine/hooks/use-focus-trap] Failed to find focusable element within provided node", node4);
        }
      };
      setTimeout(() => {
        if (node4.getRootNode()) {
          processNode();
        } else if (true) {
          console.warn("[@mantine/hooks/use-focus-trap] Ref node is not part of the dom", node4);
        }
      });
      ref.current = node4;
    } else {
      ref.current = null;
    }
  }, [active]);
  (0, import_react30.useEffect)(() => {
    if (!active) {
      return void 0;
    }
    const handleKeyDown2 = (event) => {
      if (event.key === "Tab" && ref.current) {
        scopeTab(ref.current, event);
      }
    };
    document.addEventListener("keydown", handleKeyDown2);
    return () => {
      document.removeEventListener("keydown", handleKeyDown2);
      if (restoreAria.current) {
        restoreAria.current();
      }
    };
  }, [active]);
  return setRef;
}

// node_modules/@mantine/hooks/esm/use-force-update/use-force-update.js
var import_react31 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-id/use-id.js
var import_react32 = __toESM(require_react());
var randomId = () => `mantine-${Math.random().toString(36).slice(2, 11)}`;
var useReactId = import_react32.default["useId".toString()] || (() => void 0);
function useClientId() {
  const [uuid, setUuid] = (0, import_react32.useState)("");
  useIsomorphicEffect(() => {
    setUuid(randomId());
  }, []);
  return uuid;
}
function getReactId() {
  const id2 = useReactId();
  return id2 ? `mantine-${id2.replace(/:/g, "")}` : "";
}
function useId(staticId) {
  return typeof staticId === "string" ? staticId : getReactId() || useClientId();
}

// node_modules/@mantine/hooks/esm/use-idle/use-idle.js
var import_react33 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-interval/use-interval.js
var import_react34 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-list-state/use-list-state.js
var import_react35 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-local-storage/create-storage.js
var import_react37 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-window-event/use-window-event.js
var import_react36 = __toESM(require_react());
function useWindowEvent(type, listener, options2) {
  (0, import_react36.useEffect)(() => {
    window.addEventListener(type, listener, options2);
    return () => window.removeEventListener(type, listener, options2);
  }, [type, listener]);
}

// node_modules/@mantine/hooks/esm/use-merged-ref/use-merged-ref.js
var import_react38 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/utils/assign-ref/assign-ref.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (typeof ref === "object" && ref !== null && "current" in ref) {
    ref.current = value;
  }
}

// node_modules/@mantine/hooks/esm/use-merged-ref/use-merged-ref.js
function mergeRefs(...refs) {
  return (node4) => {
    refs.forEach((ref) => assignRef(ref, node4));
  };
}
function useMergedRef(...refs) {
  return (0, import_react38.useCallback)(mergeRefs(...refs), refs);
}

// node_modules/@mantine/hooks/esm/use-mouse/use-mouse.js
var import_react39 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-move/use-move.js
var import_react40 = __toESM(require_react());
var clampUseMovePosition = (position5) => ({
  x: clamp(position5.x, 0, 1),
  y: clamp(position5.y, 0, 1)
});
function useMove(onChange, handlers4, dir = "ltr") {
  const ref = (0, import_react40.useRef)();
  const mounted = (0, import_react40.useRef)(false);
  const isSliding = (0, import_react40.useRef)(false);
  const frame = (0, import_react40.useRef)(0);
  const [active, setActive] = (0, import_react40.useState)(false);
  (0, import_react40.useEffect)(() => {
    mounted.current = true;
  }, []);
  (0, import_react40.useEffect)(() => {
    const onScrub = ({ x: x3, y }) => {
      cancelAnimationFrame(frame.current);
      frame.current = requestAnimationFrame(() => {
        if (mounted.current && ref.current) {
          ref.current.style.userSelect = "none";
          const rect = ref.current.getBoundingClientRect();
          if (rect.width && rect.height) {
            const _x = clamp((x3 - rect.left) / rect.width, 0, 1);
            onChange({
              x: dir === "ltr" ? _x : 1 - _x,
              y: clamp((y - rect.top) / rect.height, 0, 1)
            });
          }
        }
      });
    };
    const bindEvents = () => {
      document.addEventListener("mousemove", onMouseMove);
      document.addEventListener("mouseup", stopScrubbing);
      document.addEventListener("touchmove", onTouchMove);
      document.addEventListener("touchend", stopScrubbing);
    };
    const unbindEvents = () => {
      document.removeEventListener("mousemove", onMouseMove);
      document.removeEventListener("mouseup", stopScrubbing);
      document.removeEventListener("touchmove", onTouchMove);
      document.removeEventListener("touchend", stopScrubbing);
    };
    const startScrubbing = () => {
      if (!isSliding.current && mounted.current) {
        isSliding.current = true;
        typeof (handlers4 == null ? void 0 : handlers4.onScrubStart) === "function" && handlers4.onScrubStart();
        setActive(true);
        bindEvents();
      }
    };
    const stopScrubbing = () => {
      if (isSliding.current && mounted.current) {
        isSliding.current = false;
        setActive(false);
        unbindEvents();
        setTimeout(() => {
          typeof (handlers4 == null ? void 0 : handlers4.onScrubEnd) === "function" && handlers4.onScrubEnd();
        }, 0);
      }
    };
    const onMouseDown = (event) => {
      startScrubbing();
      event.preventDefault();
      onMouseMove(event);
    };
    const onMouseMove = (event) => onScrub({ x: event.clientX, y: event.clientY });
    const onTouchStart = (event) => {
      if (event.cancelable) {
        event.preventDefault();
      }
      startScrubbing();
      onTouchMove(event);
    };
    const onTouchMove = (event) => {
      if (event.cancelable) {
        event.preventDefault();
      }
      onScrub({ x: event.changedTouches[0].clientX, y: event.changedTouches[0].clientY });
    };
    ref.current.addEventListener("mousedown", onMouseDown);
    ref.current.addEventListener("touchstart", onTouchStart, { passive: false });
    return () => {
      if (ref.current) {
        ref.current.removeEventListener("mousedown", onMouseDown);
        ref.current.removeEventListener("touchstart", onTouchStart);
      }
    };
  }, [dir, onChange]);
  return { ref, active };
}

// node_modules/@mantine/hooks/esm/use-pagination/use-pagination.js
var import_react42 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-uncontrolled/use-uncontrolled.js
var import_react41 = __toESM(require_react());
function useUncontrolled({
  value,
  defaultValue,
  finalValue,
  onChange = () => {
  }
}) {
  const [uncontrolledValue, setUncontrolledValue] = (0, import_react41.useState)(defaultValue !== void 0 ? defaultValue : finalValue);
  const handleUncontrolledChange = (val) => {
    setUncontrolledValue(val);
    onChange == null ? void 0 : onChange(val);
  };
  if (value !== void 0) {
    return [value, onChange, true];
  }
  return [uncontrolledValue, handleUncontrolledChange, false];
}

// node_modules/@mantine/hooks/esm/utils/range/range.js
function range(start2, end2) {
  const length4 = end2 - start2 + 1;
  return Array.from({ length: length4 }, (_2, index7) => index7 + start2);
}

// node_modules/@mantine/hooks/esm/use-pagination/use-pagination.js
var DOTS = "dots";
function usePagination({
  total,
  siblings: siblings2 = 1,
  boundaries = 1,
  page,
  initialPage = 1,
  onChange
}) {
  const _total = Math.max(Math.trunc(total), 0);
  const [activePage, setActivePage] = useUncontrolled({
    value: page,
    onChange,
    defaultValue: initialPage,
    finalValue: initialPage
  });
  const setPage = (pageNumber) => {
    if (pageNumber <= 0) {
      setActivePage(1);
    } else if (pageNumber > _total) {
      setActivePage(_total);
    } else {
      setActivePage(pageNumber);
    }
  };
  const next2 = () => setPage(activePage + 1);
  const previous3 = () => setPage(activePage - 1);
  const first2 = () => setPage(1);
  const last2 = () => setPage(_total);
  const paginationRange = (0, import_react42.useMemo)(() => {
    const totalPageNumbers = siblings2 * 2 + 3 + boundaries * 2;
    if (totalPageNumbers >= _total) {
      return range(1, _total);
    }
    const leftSiblingIndex = Math.max(activePage - siblings2, boundaries);
    const rightSiblingIndex = Math.min(activePage + siblings2, _total - boundaries);
    const shouldShowLeftDots = leftSiblingIndex > boundaries + 2;
    const shouldShowRightDots = rightSiblingIndex < _total - (boundaries + 1);
    if (!shouldShowLeftDots && shouldShowRightDots) {
      const leftItemCount = siblings2 * 2 + boundaries + 2;
      return [...range(1, leftItemCount), DOTS, ...range(_total - (boundaries - 1), _total)];
    }
    if (shouldShowLeftDots && !shouldShowRightDots) {
      const rightItemCount = boundaries + 1 + 2 * siblings2;
      return [...range(1, boundaries), DOTS, ...range(_total - rightItemCount, _total)];
    }
    return [
      ...range(1, boundaries),
      DOTS,
      ...range(leftSiblingIndex, rightSiblingIndex),
      DOTS,
      ...range(_total - boundaries + 1, _total)
    ];
  }, [_total, siblings2, activePage]);
  return {
    range: paginationRange,
    active: activePage,
    setPage,
    next: next2,
    previous: previous3,
    first: first2,
    last: last2
  };
}

// node_modules/@mantine/hooks/esm/use-queue/use-queue.js
var import_react43 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-page-leave/use-page-leave.js
var import_react44 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-reduced-motion/use-reduced-motion.js
function useReducedMotion(initialValue, options2) {
  return useMediaQuery("(prefers-reduced-motion: reduce)", initialValue, options2);
}

// node_modules/@mantine/hooks/esm/use-scroll-into-view/use-scroll-into-view.js
var import_react45 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-scroll-into-view/utils/ease-in-out-quad.js
var easeInOutQuad = (t) => t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t;

// node_modules/@mantine/hooks/esm/use-scroll-into-view/utils/get-relative-position.js
var getRelativePosition = ({
  axis,
  target,
  parent,
  alignment,
  offset: offset3,
  isList: isList2
}) => {
  if (!target || !parent && typeof document === "undefined") {
    return 0;
  }
  const isCustomParent = !!parent;
  const parentElement = parent || document.body;
  const parentPosition = parentElement.getBoundingClientRect();
  const targetPosition = target.getBoundingClientRect();
  const getDiff = (property) => targetPosition[property] - parentPosition[property];
  if (axis === "y") {
    const diff2 = getDiff("top");
    if (diff2 === 0)
      return 0;
    if (alignment === "start") {
      const distance = diff2 - offset3;
      const shouldScroll = distance <= targetPosition.height * (isList2 ? 0 : 1) || !isList2;
      return shouldScroll ? distance : 0;
    }
    const parentHeight = isCustomParent ? parentPosition.height : window.innerHeight;
    if (alignment === "end") {
      const distance = diff2 + offset3 - parentHeight + targetPosition.height;
      const shouldScroll = distance >= -targetPosition.height * (isList2 ? 0 : 1) || !isList2;
      return shouldScroll ? distance : 0;
    }
    if (alignment === "center") {
      return diff2 - parentHeight / 2 + targetPosition.height / 2;
    }
    return 0;
  }
  if (axis === "x") {
    const diff2 = getDiff("left");
    if (diff2 === 0)
      return 0;
    if (alignment === "start") {
      const distance = diff2 - offset3;
      const shouldScroll = distance <= targetPosition.width || !isList2;
      return shouldScroll ? distance : 0;
    }
    const parentWidth = isCustomParent ? parentPosition.width : window.innerWidth;
    if (alignment === "end") {
      const distance = diff2 + offset3 - parentWidth + targetPosition.width;
      const shouldScroll = distance >= -targetPosition.width || !isList2;
      return shouldScroll ? distance : 0;
    }
    if (alignment === "center") {
      return diff2 - parentWidth / 2 + targetPosition.width / 2;
    }
    return 0;
  }
  return 0;
};

// node_modules/@mantine/hooks/esm/use-scroll-into-view/utils/get-scroll-start.js
var getScrollStart = ({ axis, parent }) => {
  if (!parent && typeof document === "undefined") {
    return 0;
  }
  const method = axis === "y" ? "scrollTop" : "scrollLeft";
  if (parent) {
    return parent[method];
  }
  const { body: body3, documentElement } = document;
  return body3[method] + documentElement[method];
};

// node_modules/@mantine/hooks/esm/use-scroll-into-view/utils/set-scroll-param.js
var setScrollParam = ({ axis, parent, distance }) => {
  if (!parent && typeof document === "undefined") {
    return;
  }
  const method = axis === "y" ? "scrollTop" : "scrollLeft";
  if (parent) {
    parent[method] = distance;
  } else {
    const { body: body3, documentElement } = document;
    body3[method] = distance;
    documentElement[method] = distance;
  }
};

// node_modules/@mantine/hooks/esm/use-scroll-into-view/use-scroll-into-view.js
function useScrollIntoView({
  duration = 1250,
  axis = "y",
  onScrollFinish,
  easing = easeInOutQuad,
  offset: offset3 = 0,
  cancelable = true,
  isList: isList2 = false
} = {}) {
  const frameID = (0, import_react45.useRef)(0);
  const startTime = (0, import_react45.useRef)(0);
  const shouldStop = (0, import_react45.useRef)(false);
  const scrollableRef = (0, import_react45.useRef)(null);
  const targetRef = (0, import_react45.useRef)(null);
  const reducedMotion = useReducedMotion();
  const cancel = () => {
    if (frameID.current) {
      cancelAnimationFrame(frameID.current);
    }
  };
  const scrollIntoView2 = (0, import_react45.useCallback)(({ alignment = "start" } = {}) => {
    var _a;
    shouldStop.current = false;
    if (frameID.current) {
      cancel();
    }
    const start2 = (_a = getScrollStart({ parent: scrollableRef.current, axis })) != null ? _a : 0;
    const change = getRelativePosition({
      parent: scrollableRef.current,
      target: targetRef.current,
      axis,
      alignment,
      offset: offset3,
      isList: isList2
    }) - (scrollableRef.current ? 0 : start2);
    function animateScroll() {
      if (startTime.current === 0) {
        startTime.current = performance.now();
      }
      const now = performance.now();
      const elapsed = now - startTime.current;
      const t = reducedMotion || duration === 0 ? 1 : elapsed / duration;
      const distance = start2 + change * easing(t);
      setScrollParam({
        parent: scrollableRef.current,
        axis,
        distance
      });
      if (!shouldStop.current && t < 1) {
        frameID.current = requestAnimationFrame(animateScroll);
      } else {
        typeof onScrollFinish === "function" && onScrollFinish();
        startTime.current = 0;
        frameID.current = 0;
        cancel();
      }
    }
    animateScroll();
  }, [axis, duration, easing, isList2, offset3, onScrollFinish, reducedMotion]);
  const handleStop = () => {
    if (cancelable) {
      shouldStop.current = true;
    }
  };
  useWindowEvent("wheel", handleStop, {
    passive: true
  });
  useWindowEvent("touchmove", handleStop, {
    passive: true
  });
  (0, import_react45.useEffect)(() => cancel, []);
  return {
    scrollableRef,
    targetRef,
    scrollIntoView: scrollIntoView2,
    cancel
  };
}

// node_modules/@mantine/hooks/esm/use-resize-observer/use-resize-observer.js
var import_react46 = __toESM(require_react());
var defaultState = {
  x: 0,
  y: 0,
  width: 0,
  height: 0,
  top: 0,
  left: 0,
  bottom: 0,
  right: 0
};
function useResizeObserver() {
  const frameID = (0, import_react46.useRef)(0);
  const ref = (0, import_react46.useRef)(null);
  const [rect, setRect] = (0, import_react46.useState)(defaultState);
  const observer = (0, import_react46.useMemo)(() => typeof window !== "undefined" ? new ResizeObserver((entries) => {
    const entry = entries[0];
    if (entry) {
      cancelAnimationFrame(frameID.current);
      frameID.current = requestAnimationFrame(() => {
        if (ref.current) {
          setRect(entry.contentRect);
        }
      });
    }
  }) : null, []);
  (0, import_react46.useEffect)(() => {
    if (ref.current) {
      observer.observe(ref.current);
    }
    return () => {
      observer.disconnect();
      if (frameID.current) {
        cancelAnimationFrame(frameID.current);
      }
    };
  }, [ref.current]);
  return [ref, rect];
}
function useElementSize() {
  const [ref, { width, height }] = useResizeObserver();
  return { ref, width, height };
}

// node_modules/@mantine/hooks/esm/use-scroll-lock/use-scroll-lock.js
var import_react47 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-scroll-lock/utils/get-scroll-width.js
function getScrollWidth() {
  if (typeof window === "undefined" || typeof document === "undefined")
    return 0;
  const paddingRight = parseInt(window.getComputedStyle(document.body).paddingRight, 10);
  const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
  return paddingRight + scrollbarWidth;
}

// node_modules/@mantine/hooks/esm/use-scroll-lock/utils/get-lock-styles.js
var getLockStyles = ({ disableBodyPadding }) => {
  const scrollWidth = disableBodyPadding ? null : getScrollWidth();
  const styles2 = `body {
        --removed-scroll-width: ${scrollWidth}px;
        touch-action: none;
        overflow: hidden !important;
        position: relative !important;
        ${scrollWidth ? "padding-right: var(--removed-scroll-width) !important;" : ""}
        `;
  return styles2;
};

// node_modules/@mantine/hooks/esm/use-scroll-lock/utils/inject-style-tag.js
function injectStyles(tag, css2) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css2;
  } else {
    tag.appendChild(document.createTextNode(css2));
  }
}

// node_modules/@mantine/hooks/esm/use-scroll-lock/utils/insert-style-tag.js
function insertStyleTag(tag) {
  const head2 = document.head || document.getElementsByTagName("head")[0];
  head2.appendChild(tag);
}

// node_modules/@mantine/hooks/esm/use-scroll-lock/utils/make-style-tag.js
function makeStyleTag() {
  const tag = document.createElement("style");
  tag.type = "text/css";
  tag.setAttribute("mantine-scroll-lock", "");
  return tag;
}

// node_modules/@mantine/hooks/esm/use-scroll-lock/use-scroll-lock.js
function useScrollLock(lock, options2 = {
  disableBodyPadding: false
}) {
  const [scrollLocked, setScrollLocked] = (0, import_react47.useState)(lock || false);
  const scrollTop = (0, import_react47.useRef)(0);
  const { disableBodyPadding } = options2;
  const stylesheet = (0, import_react47.useRef)(null);
  const lockScroll = () => {
    scrollTop.current = window.scrollY;
    const styles2 = getLockStyles({ disableBodyPadding });
    const sheet = makeStyleTag();
    injectStyles(sheet, styles2);
    insertStyleTag(sheet);
    stylesheet.current = sheet;
  };
  const unlockScroll = () => {
    if (!(stylesheet == null ? void 0 : stylesheet.current))
      return;
    stylesheet.current.parentNode.removeChild(stylesheet.current);
    stylesheet.current = null;
  };
  (0, import_react47.useEffect)(() => {
    if (scrollLocked) {
      lockScroll();
    } else {
      unlockScroll();
    }
    return unlockScroll;
  }, [scrollLocked]);
  (0, import_react47.useEffect)(() => {
    if (lock !== void 0) {
      setScrollLocked(lock);
    }
  }, [lock]);
  (0, import_react47.useEffect)(() => {
    if (lock === void 0 && typeof window !== "undefined") {
      window.document.body.style.overflow === "hidden" && setScrollLocked(true);
    }
  }, [setScrollLocked]);
  return [scrollLocked, setScrollLocked];
}

// node_modules/@mantine/hooks/esm/use-shallow-effect/use-shallow-effect.js
var import_react48 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-toggle/use-toggle.js
var import_react49 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-viewport-size/use-viewport-size.js
var import_react50 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-window-scroll/use-window-scroll.js
var import_react51 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-intersection/use-intersection.js
var import_react52 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-hash/use-hash.js
var import_react53 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-hotkeys/use-hotkeys.js
var import_react54 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-fullscreen/use-fullscreen.js
var import_react55 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-logger/use-logger.js
var import_react56 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-hover/use-hover.js
var import_react57 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-validated-state/use-validated-state.js
var import_react58 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-os/use-os.js
function getOS() {
  const { userAgent } = window.navigator;
  const macosPlatforms = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;
  const windowsPlatforms = /(Win32)|(Win64)|(Windows)|(WinCE)/i;
  const iosPlatforms = /(iPhone)|(iPad)|(iPod)/i;
  if (macosPlatforms.test(userAgent)) {
    return "macos";
  }
  if (iosPlatforms.test(userAgent)) {
    return "ios";
  }
  if (windowsPlatforms.test(userAgent)) {
    return "windows";
  }
  if (/Android/i.test(userAgent)) {
    return "android";
  }
  if (/Linux/i.test(userAgent)) {
    return "linux";
  }
  return "undetermined";
}
function useOs() {
  if (typeof window !== "undefined") {
    return getOS();
  }
  return "undetermined";
}

// node_modules/@mantine/hooks/esm/use-set-state/use-set-state.js
var import_react59 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-input-state/use-input-state.js
var import_react60 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-event-listener/use-event-listener.js
var import_react61 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-disclosure/use-disclosure.js
var import_react62 = __toESM(require_react());
function useDisclosure(initialState = false, callbacks) {
  const { onOpen, onClose } = callbacks || {};
  const [opened, setOpened] = (0, import_react62.useState)(initialState);
  const open = (0, import_react62.useCallback)(() => {
    setOpened((isOpened) => {
      if (!isOpened) {
        onOpen == null ? void 0 : onOpen();
        return true;
      }
      return isOpened;
    });
  }, [onOpen]);
  const close2 = (0, import_react62.useCallback)(() => {
    setOpened((isOpened) => {
      if (isOpened) {
        onClose == null ? void 0 : onClose();
        return false;
      }
      return isOpened;
    });
  }, [onClose]);
  const toggle = (0, import_react62.useCallback)(() => {
    opened ? close2() : open();
  }, [close2, open, opened]);
  return [opened, { open, close: close2, toggle }];
}

// node_modules/@mantine/hooks/esm/use-focus-within/use-focus-within.js
var import_react63 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-network/use-network.js
var import_react64 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-timeout/use-timeout.js
var import_react65 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-text-selection/use-text-selection.js
var import_react66 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-previous/use-previous.js
var import_react67 = __toESM(require_react());
function usePrevious(value) {
  const ref = (0, import_react67.useRef)();
  (0, import_react67.useEffect)(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

// node_modules/@mantine/hooks/esm/use-favicon/use-favicon.js
var import_react68 = __toESM(require_react());

// node_modules/@mantine/hooks/esm/use-eye-dropper/use-eye-dropper.js
var import_react69 = __toESM(require_react());
function useEyeDropper() {
  const [supported, setSupported] = (0, import_react69.useState)(false);
  useIsomorphicEffect(() => {
    setSupported(typeof window !== "undefined" && "EyeDropper" in window);
  }, []);
  const open = (0, import_react69.useCallback)((options2 = {}) => {
    if (supported) {
      const eyeDropper = new window.EyeDropper();
      return eyeDropper.open(options2);
    }
    return void 0;
  }, [supported]);
  return { supported, open };
}

// node_modules/@mantine/hooks/esm/utils/random-id/random-id.js
function randomId2() {
  return `mantine-${Math.random().toString(36).slice(2, 11)}`;
}

// node_modules/@mantine/core/esm/Accordion/Accordion.errors.js
var ACCORDION_ERRORS = {
  context: "Accordion component was not found in the tree",
  itemContext: "Accordion.Item component was not found in the tree",
  value: "Accordion.Item component was rendered with invalid value or without value"
};

// node_modules/@mantine/core/esm/Accordion/Accordion.context.js
var [AccordionContextProvider, useAccordionContext] = createSafeContext(ACCORDION_ERRORS.context);

// node_modules/@mantine/core/esm/Accordion/AccordionProvider.js
function AccordionProvider({
  children,
  multiple,
  value,
  defaultValue,
  onChange,
  id: id2,
  loop,
  transitionDuration,
  disableChevronRotation,
  chevronPosition,
  chevronSize,
  order: order3,
  chevron,
  variant: variant2,
  radius: radius2,
  classNames,
  styles: styles2,
  unstyled
}) {
  const uid = useId(id2);
  const [_value, handleChange] = useUncontrolled({
    value,
    defaultValue,
    finalValue: multiple ? [] : null,
    onChange
  });
  const isItemActive = (itemValue) => Array.isArray(_value) ? _value.includes(itemValue) : itemValue === _value;
  const handleItemChange = (itemValue) => {
    const nextValue = Array.isArray(_value) ? _value.includes(itemValue) ? _value.filter((selectedValue) => selectedValue !== itemValue) : [..._value, itemValue] : itemValue === _value ? null : itemValue;
    handleChange(nextValue);
  };
  return import_react70.default.createElement(AccordionContextProvider, {
    value: {
      isItemActive,
      onChange: handleItemChange,
      getControlId: getSafeId(`${uid}-control`, ACCORDION_ERRORS.value),
      getRegionId: getSafeId(`${uid}-panel`, ACCORDION_ERRORS.value),
      transitionDuration,
      disableChevronRotation,
      chevronPosition,
      chevronSize,
      order: order3,
      chevron,
      loop,
      variant: variant2,
      radius: radius2,
      classNames,
      styles: styles2,
      unstyled
    }
  }, children);
}

// node_modules/@mantine/core/esm/Accordion/AccordionItem/AccordionItem.js
var import_react72 = __toESM(require_react());

// node_modules/@mantine/core/esm/Accordion/AccordionItem.context.js
var [AccordionItemContextProvider, useAccordionItemContext] = createSafeContext(ACCORDION_ERRORS.itemContext);

// node_modules/@mantine/core/esm/Accordion/AccordionItem/AccordionItem.styles.js
function getVariantStyles(theme, { variant: variant2, radius: radius2 }) {
  const borderColor = theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3];
  const filledColor = theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0];
  const borderRadius = theme.fn.radius(radius2);
  if (variant2 === "default") {
    return {
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      borderBottom: `1px solid ${borderColor}`
    };
  }
  if (variant2 === "contained") {
    return {
      border: `1px solid ${borderColor}`,
      transition: "background-color 150ms ease",
      "&[data-active]": {
        backgroundColor: filledColor
      },
      "&:first-of-type": {
        borderTopRightRadius: borderRadius,
        borderTopLeftRadius: borderRadius,
        "& > [data-accordion-control]": {
          borderTopRightRadius: borderRadius,
          borderTopLeftRadius: borderRadius
        }
      },
      "&:last-of-type": {
        borderBottomRightRadius: borderRadius,
        borderBottomLeftRadius: borderRadius,
        "& > [data-accordion-control]": {
          borderBottomRightRadius: borderRadius,
          borderBottomLeftRadius: borderRadius
        }
      },
      "& + &": {
        borderTop: 0
      }
    };
  }
  if (variant2 === "filled") {
    return {
      borderRadius,
      "&[data-active]": {
        backgroundColor: filledColor
      }
    };
  }
  if (variant2 === "separated") {
    return {
      borderRadius,
      backgroundColor: filledColor,
      border: "1px solid transparent",
      transition: "background-color 150ms ease",
      "& + &": {
        marginTop: theme.spacing.md
      },
      "&[data-active]": {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
        borderColor
      }
    };
  }
  return {};
}
var useStyles = createStyles((theme, params2) => ({
  item: getVariantStyles(theme, params2)
}));
var AccordionItem_styles_default = useStyles;

// node_modules/@mantine/core/esm/Box/Box.js
var import_react71 = __toESM(require_react());

// node_modules/@mantine/core/esm/Box/style-system-props/extract-system-styles/extract-system-styles.js
var __getOwnPropSymbols9 = Object.getOwnPropertySymbols;
var __hasOwnProp9 = Object.prototype.hasOwnProperty;
var __propIsEnum9 = Object.prototype.propertyIsEnumerable;
var __objRest = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp9.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols9)
    for (var prop of __getOwnPropSymbols9(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum9.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function extractSystemStyles(others) {
  const _a = others, {
    m,
    mx,
    my,
    mt: mt2,
    mb,
    ml,
    mr,
    p: p5,
    px,
    py,
    pt: pt2,
    pb,
    pl,
    pr: pr2,
    bg,
    c,
    opacity,
    ff,
    fz,
    fw,
    lts,
    ta: ta2,
    lh,
    fs,
    tt: tt3,
    td,
    w,
    miw,
    maw,
    h: h2,
    mih,
    mah,
    bgsz,
    bgp,
    bgr,
    bga,
    pos,
    top: top2,
    left: left2,
    bottom: bottom2,
    right: right2,
    inset,
    display
  } = _a, rest = __objRest(_a, [
    "m",
    "mx",
    "my",
    "mt",
    "mb",
    "ml",
    "mr",
    "p",
    "px",
    "py",
    "pt",
    "pb",
    "pl",
    "pr",
    "bg",
    "c",
    "opacity",
    "ff",
    "fz",
    "fw",
    "lts",
    "ta",
    "lh",
    "fs",
    "tt",
    "td",
    "w",
    "miw",
    "maw",
    "h",
    "mih",
    "mah",
    "bgsz",
    "bgp",
    "bgr",
    "bga",
    "pos",
    "top",
    "left",
    "bottom",
    "right",
    "inset",
    "display"
  ]);
  const systemStyles = filterProps({
    m,
    mx,
    my,
    mt: mt2,
    mb,
    ml,
    mr,
    p: p5,
    px,
    py,
    pt: pt2,
    pb,
    pl,
    pr: pr2,
    bg,
    c,
    opacity,
    ff,
    fz,
    fw,
    lts,
    ta: ta2,
    lh,
    fs,
    tt: tt3,
    td,
    w,
    miw,
    maw,
    h: h2,
    mih,
    mah,
    bgsz,
    bgp,
    bgr,
    bga,
    pos,
    top: top2,
    left: left2,
    bottom: bottom2,
    right: right2,
    inset,
    display
  });
  return { systemStyles, rest };
}

// node_modules/@mantine/core/esm/Box/style-system-props/get-responsive-value/get-responsive-value.js
function getSortedKeys(value, theme) {
  const sorted = Object.keys(value).filter((breakpoint) => breakpoint !== "base").sort((a2, b2) => theme.fn.size({ size: a2, sizes: theme.breakpoints }) - theme.fn.size({ size: b2, sizes: theme.breakpoints }));
  return "base" in value ? ["base", ...sorted] : sorted;
}
function getResponsiveValue({ value, theme, getValue, property }) {
  if (value == null) {
    return void 0;
  }
  if (typeof value === "object") {
    const result = getSortedKeys(value, theme).reduce((acc, breakpointKey) => {
      if (breakpointKey === "base" && value.base !== void 0) {
        const baseValue = getValue(value.base, theme);
        if (Array.isArray(property)) {
          property.forEach((prop) => {
            acc[prop] = baseValue;
          });
          return acc;
        }
        acc[property] = baseValue;
        return acc;
      }
      const breakpointValue = getValue(value[breakpointKey], theme);
      if (Array.isArray(property)) {
        acc[theme.fn.largerThan(breakpointKey)] = {};
        property.forEach((prop) => {
          acc[theme.fn.largerThan(breakpointKey)][prop] = breakpointValue;
        });
        return acc;
      }
      acc[theme.fn.largerThan(breakpointKey)] = {
        [property]: breakpointValue
      };
      return acc;
    }, {});
    return result;
  }
  const cssValue = getValue(value, theme);
  if (Array.isArray(property)) {
    return property.reduce((acc, prop) => {
      acc[prop] = cssValue;
      return acc;
    }, {});
  }
  return { [property]: cssValue };
}

// node_modules/@mantine/core/esm/Box/style-system-props/value-getters/get-color-value.js
function getColorValue(color2, theme) {
  if (color2 === "dimmed") {
    return theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6];
  }
  return theme.fn.variant({ variant: "filled", color: color2, primaryFallback: false }).background;
}

// node_modules/@mantine/core/esm/Box/style-system-props/value-getters/get-default-value.js
function getDefaultValue(value) {
  return value;
}

// node_modules/@mantine/core/esm/Box/style-system-props/value-getters/get-font-size-value.js
function getFontSizeValue(size3, theme) {
  return theme.fn.size({ size: size3, sizes: theme.fontSizes });
}

// node_modules/@mantine/core/esm/Box/style-system-props/value-getters/get-spacing-value.js
var NEGATIVE_VALUES = ["-xs", "-sm", "-md", "-lg", "-xl"];
function getSpacingValue(size3, theme) {
  if (NEGATIVE_VALUES.includes(size3)) {
    return theme.fn.size({ size: size3.replace("-", ""), sizes: theme.spacing }) * -1;
  }
  return theme.fn.size({ size: size3, sizes: theme.spacing });
}

// node_modules/@mantine/core/esm/Box/style-system-props/value-getters/value-getters.js
var valueGetters = {
  color: getColorValue,
  default: getDefaultValue,
  fontSize: getFontSizeValue,
  spacing: getSpacingValue
};

// node_modules/@mantine/core/esm/Box/style-system-props/system-props/system-props.js
var SYSTEM_PROPS = {
  m: { type: "spacing", property: "margin" },
  mt: { type: "spacing", property: "marginTop" },
  mb: { type: "spacing", property: "marginBottom" },
  ml: { type: "spacing", property: "marginLeft" },
  mr: { type: "spacing", property: "marginRight" },
  mx: { type: "spacing", property: ["marginRight", "marginLeft"] },
  my: { type: "spacing", property: ["marginTop", "marginBottom"] },
  p: { type: "spacing", property: "padding" },
  pt: { type: "spacing", property: "paddingTop" },
  pb: { type: "spacing", property: "paddingBottom" },
  pl: { type: "spacing", property: "paddingLeft" },
  pr: { type: "spacing", property: "paddingRight" },
  px: { type: "spacing", property: ["paddingRight", "paddingLeft"] },
  py: { type: "spacing", property: ["paddingTop", "paddingBottom"] },
  bg: { type: "color", property: "background" },
  c: { type: "color", property: "color" },
  opacity: { type: "default", property: "opacity" },
  ff: { type: "default", property: "fontFamily" },
  fz: { type: "fontSize", property: "fontSize" },
  fw: { type: "default", property: "fontWeight" },
  lts: { type: "default", property: "letterSpacing" },
  ta: { type: "default", property: "textAlign" },
  lh: { type: "default", property: "lineHeight" },
  fs: { type: "default", property: "fontStyle" },
  tt: { type: "default", property: "textTransform" },
  td: { type: "default", property: "textDecoration" },
  w: { type: "spacing", property: "width" },
  miw: { type: "spacing", property: "minWidth" },
  maw: { type: "spacing", property: "maxWidth" },
  h: { type: "spacing", property: "height" },
  mih: { type: "spacing", property: "minHeight" },
  mah: { type: "spacing", property: "maxHeight" },
  bgsz: { type: "default", property: "background-size" },
  bgp: { type: "default", property: "background-position" },
  bgr: { type: "default", property: "background-repeat" },
  bga: { type: "default", property: "background-attachment" },
  pos: { type: "default", property: "position" },
  top: { type: "default", property: "top" },
  left: { type: "default", property: "left" },
  bottom: { type: "default", property: "bottom" },
  right: { type: "default", property: "right" },
  inset: { type: "default", property: "inset" },
  display: { type: "default", property: "display" }
};

// node_modules/@mantine/core/esm/Box/style-system-props/get-system-styles/get-system-styles.js
var __defProp9 = Object.defineProperty;
var __getOwnPropSymbols10 = Object.getOwnPropertySymbols;
var __hasOwnProp10 = Object.prototype.hasOwnProperty;
var __propIsEnum10 = Object.prototype.propertyIsEnumerable;
var __defNormalProp9 = (obj, key2, value) => key2 in obj ? __defProp9(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues9 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp10.call(b2, prop))
      __defNormalProp9(a2, prop, b2[prop]);
  if (__getOwnPropSymbols10)
    for (var prop of __getOwnPropSymbols10(b2)) {
      if (__propIsEnum10.call(b2, prop))
        __defNormalProp9(a2, prop, b2[prop]);
    }
  return a2;
};
function getSystemStyles(systemStyles, theme, systemProps = SYSTEM_PROPS) {
  const styles2 = Object.keys(systemProps).reduce((acc, systemProp) => {
    if (systemProp in systemStyles && systemStyles[systemProp] !== void 0) {
      acc.push(getResponsiveValue({
        value: systemStyles[systemProp],
        getValue: valueGetters[systemProps[systemProp].type],
        property: systemProps[systemProp].property,
        theme
      }));
    }
    return acc;
  }, []);
  return styles2.reduce((acc, stylesPartial) => {
    Object.keys(stylesPartial).forEach((property) => {
      if (typeof stylesPartial[property] === "object" && stylesPartial[property] !== null) {
        if (!(property in acc)) {
          acc[property] = stylesPartial[property];
        } else {
          acc[property] = __spreadValues9(__spreadValues9({}, acc[property]), stylesPartial[property]);
        }
      } else {
        acc[property] = stylesPartial[property];
      }
    });
    return acc;
  }, {});
}

// node_modules/@mantine/core/esm/Box/use-sx/use-sx.js
function extractSx(sx, theme) {
  return typeof sx === "function" ? sx(theme) : sx;
}
function useSx(sx, systemProps, className) {
  const theme = useMantineTheme();
  const { css: css2, cx } = useCss();
  if (Array.isArray(sx)) {
    return cx(className, css2(getSystemStyles(systemProps, theme)), sx.map((partial) => css2(extractSx(partial, theme))));
  }
  return cx(className, css2(extractSx(sx, theme)), css2(getSystemStyles(systemProps, theme)));
}

// node_modules/@mantine/core/esm/Box/Box.js
var __defProp10 = Object.defineProperty;
var __getOwnPropSymbols11 = Object.getOwnPropertySymbols;
var __hasOwnProp11 = Object.prototype.hasOwnProperty;
var __propIsEnum11 = Object.prototype.propertyIsEnumerable;
var __defNormalProp10 = (obj, key2, value) => key2 in obj ? __defProp10(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues10 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp11.call(b2, prop))
      __defNormalProp10(a2, prop, b2[prop]);
  if (__getOwnPropSymbols11)
    for (var prop of __getOwnPropSymbols11(b2)) {
      if (__propIsEnum11.call(b2, prop))
        __defNormalProp10(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest2 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp11.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols11)
    for (var prop of __getOwnPropSymbols11(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum11.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var _Box = (0, import_react71.forwardRef)((_a, ref) => {
  var _b = _a, { className, component, style: style3, sx } = _b, others = __objRest2(_b, ["className", "component", "style", "sx"]);
  const { systemStyles, rest } = extractSystemStyles(others);
  const Element2 = component || "div";
  return import_react71.default.createElement(Element2, __spreadValues10({
    ref,
    className: useSx(sx, systemStyles, className),
    style: style3
  }, rest));
});
_Box.displayName = "@mantine/core/Box";
var Box = createPolymorphicComponent(_Box);

// node_modules/@mantine/core/esm/Accordion/AccordionItem/AccordionItem.js
var __defProp11 = Object.defineProperty;
var __getOwnPropSymbols12 = Object.getOwnPropertySymbols;
var __hasOwnProp12 = Object.prototype.hasOwnProperty;
var __propIsEnum12 = Object.prototype.propertyIsEnumerable;
var __defNormalProp11 = (obj, key2, value) => key2 in obj ? __defProp11(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues11 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp12.call(b2, prop))
      __defNormalProp11(a2, prop, b2[prop]);
  if (__getOwnPropSymbols12)
    for (var prop of __getOwnPropSymbols12(b2)) {
      if (__propIsEnum12.call(b2, prop))
        __defNormalProp11(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest3 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp12.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols12)
    for (var prop of __getOwnPropSymbols12(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum12.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps2 = {};
var AccordionItem = (0, import_react72.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("AccordionItem", defaultProps2, props), { children, className, value } = _a, others = __objRest3(_a, ["children", "className", "value"]);
  const ctx = useAccordionContext();
  const { classes, cx } = AccordionItem_styles_default({ variant: ctx.variant, radius: ctx.radius }, { name: "Accordion", classNames: ctx.classNames, styles: ctx.styles, unstyled: ctx.unstyled });
  return import_react72.default.createElement(AccordionItemContextProvider, {
    value: { value }
  }, import_react72.default.createElement(Box, __spreadValues11({
    ref,
    className: cx(classes.item, className),
    "data-active": ctx.isItemActive(value) || void 0
  }, others), children));
});
AccordionItem.displayName = "@mantine/core/AccordionItem";

// node_modules/@mantine/core/esm/Accordion/AccordionControl/AccordionControl.js
var import_react74 = __toESM(require_react());

// node_modules/@mantine/core/esm/Accordion/AccordionControl/AccordionControl.styles.js
var __defProp12 = Object.defineProperty;
var __defProps5 = Object.defineProperties;
var __getOwnPropDescs5 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols13 = Object.getOwnPropertySymbols;
var __hasOwnProp13 = Object.prototype.hasOwnProperty;
var __propIsEnum13 = Object.prototype.propertyIsEnumerable;
var __defNormalProp12 = (obj, key2, value) => key2 in obj ? __defProp12(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues12 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp13.call(b2, prop))
      __defNormalProp12(a2, prop, b2[prop]);
  if (__getOwnPropSymbols13)
    for (var prop of __getOwnPropSymbols13(b2)) {
      if (__propIsEnum13.call(b2, prop))
        __defNormalProp12(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps5 = (a2, b2) => __defProps5(a2, __getOwnPropDescs5(b2));
var __objRest4 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp13.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols13)
    for (var prop of __getOwnPropSymbols13(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum13.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function getVariantStyles2(theme, { variant: variant2 }) {
  if (variant2 === "default" || variant2 === "contained") {
    return theme.fn.hover({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0]
    });
  }
  return {};
}
var useStyles2 = createStyles((theme, _a) => {
  var _b = _a, { transitionDuration, chevronPosition, chevronSize } = _b, params2 = __objRest4(_b, ["transitionDuration", "chevronPosition", "chevronSize"]);
  return {
    icon: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      marginRight: chevronPosition === "left" ? 0 : theme.spacing.sm,
      marginLeft: chevronPosition === "left" ? theme.spacing.lg : 0
    },
    chevron: {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      transition: `transform ${transitionDuration}ms ease`,
      marginRight: chevronPosition === "right" ? 0 : theme.spacing.sm,
      marginLeft: chevronPosition === "right" ? theme.spacing.lg : 0,
      width: chevronSize,
      minWidth: chevronSize,
      "&[data-rotate]": {
        transform: "rotate(180deg)"
      }
    },
    label: {
      color: "inherit",
      fontWeight: 400,
      flex: 1,
      overflow: "hidden",
      textOverflow: "ellipsis"
    },
    itemTitle: {
      margin: 0,
      padding: 0
    },
    control: __spreadProps5(__spreadValues12(__spreadValues12(__spreadValues12({}, theme.fn.focusStyles()), theme.fn.fontStyles()), getVariantStyles2(theme, params2)), {
      width: "100%",
      display: "flex",
      alignItems: "center",
      flexDirection: chevronPosition === "right" ? "row-reverse" : "row",
      padding: `${theme.spacing.md}px ${theme.spacing.md / 2}px`,
      paddingLeft: chevronPosition === "right" ? `calc(${theme.spacing.sm}px + 4px)` : null,
      textAlign: "left",
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      "&:disabled": __spreadValues12({
        opacity: 0.4,
        cursor: "not-allowed"
      }, theme.fn.hover({ backgroundColor: "transparent" }))
    })
  };
});
var AccordionControl_styles_default = useStyles2;

// node_modules/@mantine/core/esm/UnstyledButton/UnstyledButton.js
var import_react73 = __toESM(require_react());

// node_modules/@mantine/core/esm/UnstyledButton/UnstyledButton.styles.js
var __defProp13 = Object.defineProperty;
var __defProps6 = Object.defineProperties;
var __getOwnPropDescs6 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols14 = Object.getOwnPropertySymbols;
var __hasOwnProp14 = Object.prototype.hasOwnProperty;
var __propIsEnum14 = Object.prototype.propertyIsEnumerable;
var __defNormalProp13 = (obj, key2, value) => key2 in obj ? __defProp13(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues13 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp14.call(b2, prop))
      __defNormalProp13(a2, prop, b2[prop]);
  if (__getOwnPropSymbols14)
    for (var prop of __getOwnPropSymbols14(b2)) {
      if (__propIsEnum14.call(b2, prop))
        __defNormalProp13(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps6 = (a2, b2) => __defProps6(a2, __getOwnPropDescs6(b2));
var useStyles3 = createStyles((theme) => ({
  root: __spreadProps6(__spreadValues13(__spreadValues13({}, theme.fn.focusStyles()), theme.fn.fontStyles()), {
    cursor: "pointer",
    border: 0,
    padding: 0,
    appearance: "none",
    fontSize: theme.fontSizes.md,
    backgroundColor: "transparent",
    textAlign: "left",
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    textDecoration: "none",
    boxSizing: "border-box"
  })
}));
var UnstyledButton_styles_default = useStyles3;

// node_modules/@mantine/core/esm/UnstyledButton/UnstyledButton.js
var __defProp14 = Object.defineProperty;
var __getOwnPropSymbols15 = Object.getOwnPropertySymbols;
var __hasOwnProp15 = Object.prototype.hasOwnProperty;
var __propIsEnum15 = Object.prototype.propertyIsEnumerable;
var __defNormalProp14 = (obj, key2, value) => key2 in obj ? __defProp14(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues14 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp15.call(b2, prop))
      __defNormalProp14(a2, prop, b2[prop]);
  if (__getOwnPropSymbols15)
    for (var prop of __getOwnPropSymbols15(b2)) {
      if (__propIsEnum15.call(b2, prop))
        __defNormalProp14(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest5 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp15.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols15)
    for (var prop of __getOwnPropSymbols15(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum15.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var _UnstyledButton = (0, import_react73.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("UnstyledButton", {}, props), {
    className,
    component = "button",
    unstyled
  } = _a, others = __objRest5(_a, [
    "className",
    "component",
    "unstyled"
  ]);
  const { classes, cx } = UnstyledButton_styles_default(null, { name: "UnstyledButton", unstyled });
  return import_react73.default.createElement(Box, __spreadValues14({
    component,
    ref,
    className: cx(classes.root, className),
    type: component === "button" ? "button" : void 0
  }, others));
});
_UnstyledButton.displayName = "@mantine/core/UnstyledButton";
var UnstyledButton = createPolymorphicComponent(_UnstyledButton);

// node_modules/@mantine/core/esm/Accordion/AccordionControl/AccordionControl.js
var __defProp15 = Object.defineProperty;
var __defProps7 = Object.defineProperties;
var __getOwnPropDescs7 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols16 = Object.getOwnPropertySymbols;
var __hasOwnProp16 = Object.prototype.hasOwnProperty;
var __propIsEnum16 = Object.prototype.propertyIsEnumerable;
var __defNormalProp15 = (obj, key2, value) => key2 in obj ? __defProp15(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues15 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp16.call(b2, prop))
      __defNormalProp15(a2, prop, b2[prop]);
  if (__getOwnPropSymbols16)
    for (var prop of __getOwnPropSymbols16(b2)) {
      if (__propIsEnum16.call(b2, prop))
        __defNormalProp15(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps7 = (a2, b2) => __defProps7(a2, __getOwnPropDescs7(b2));
var __objRest6 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp16.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols16)
    for (var prop of __getOwnPropSymbols16(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum16.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps3 = {};
var AccordionControl = (0, import_react74.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("AccordionControl", defaultProps3, props), { disabled, onKeyDown, onClick, chevron, children, className, icon } = _a, others = __objRest6(_a, ["disabled", "onKeyDown", "onClick", "chevron", "children", "className", "icon"]);
  const ctx = useAccordionContext();
  const { value } = useAccordionItemContext();
  const { classes, cx } = AccordionControl_styles_default({
    transitionDuration: ctx.transitionDuration,
    chevronPosition: ctx.chevronPosition,
    chevronSize: ctx.chevronSize,
    variant: ctx.variant,
    radius: ctx.radius
  }, { name: "Accordion", classNames: ctx.classNames, styles: ctx.styles, unstyled: ctx.unstyled });
  const isActive2 = ctx.isItemActive(value);
  const shouldWrapWithHeading = typeof ctx.order === "number";
  const Heading = `h${ctx.order}`;
  const content5 = import_react74.default.createElement(UnstyledButton, __spreadProps7(__spreadValues15({}, others), {
    ref,
    "data-accordion-control": true,
    disabled,
    className: cx(classes.control, className),
    onClick: (event) => {
      onClick == null ? void 0 : onClick(event);
      ctx.onChange(value);
    },
    type: "button",
    "data-active": isActive2 || void 0,
    "aria-expanded": isActive2,
    "aria-controls": ctx.getRegionId(value),
    id: ctx.getControlId(value),
    unstyled: ctx.unstyled,
    onKeyDown: createScopedKeydownHandler({
      siblingSelector: "[data-accordion-control]",
      parentSelector: "[data-accordion]",
      activateOnFocus: false,
      loop: ctx.loop,
      orientation: "vertical",
      onKeyDown
    })
  }), import_react74.default.createElement("div", {
    className: classes.chevron,
    "data-rotate": !ctx.disableChevronRotation && isActive2 || void 0
  }, chevron || ctx.chevron), import_react74.default.createElement("div", {
    className: classes.label
  }, children), icon && import_react74.default.createElement("div", {
    className: classes.icon
  }, icon));
  return shouldWrapWithHeading ? import_react74.default.createElement(Heading, {
    className: classes.itemTitle
  }, content5) : content5;
});
AccordionControl.displayName = "@mantine/core/AccordionControl";

// node_modules/@mantine/core/esm/Accordion/AccordionPanel/AccordionPanel.js
var import_react77 = __toESM(require_react());

// node_modules/@mantine/core/esm/Accordion/AccordionPanel/AccordionPanel.styles.js
var __defProp16 = Object.defineProperty;
var __defProps8 = Object.defineProperties;
var __getOwnPropDescs8 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols17 = Object.getOwnPropertySymbols;
var __hasOwnProp17 = Object.prototype.hasOwnProperty;
var __propIsEnum17 = Object.prototype.propertyIsEnumerable;
var __defNormalProp16 = (obj, key2, value) => key2 in obj ? __defProp16(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues16 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp17.call(b2, prop))
      __defNormalProp16(a2, prop, b2[prop]);
  if (__getOwnPropSymbols17)
    for (var prop of __getOwnPropSymbols17(b2)) {
      if (__propIsEnum17.call(b2, prop))
        __defNormalProp16(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps8 = (a2, b2) => __defProps8(a2, __getOwnPropDescs8(b2));
var useStyles4 = createStyles((theme, _params) => ({
  panel: __spreadProps8(__spreadValues16({}, theme.fn.fontStyles()), {
    wordBreak: "break-word",
    lineHeight: theme.lineHeight
  }),
  content: {
    padding: theme.spacing.md,
    paddingTop: `calc(${theme.spacing.xs}px / 2)`
  }
}));
var AccordionPanel_styles_default = useStyles4;

// node_modules/@mantine/core/esm/Collapse/Collapse.js
var import_react76 = __toESM(require_react());

// node_modules/@mantine/core/esm/Collapse/use-collapse.js
var import_react75 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
var __defProp17 = Object.defineProperty;
var __defProps9 = Object.defineProperties;
var __getOwnPropDescs9 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols18 = Object.getOwnPropertySymbols;
var __hasOwnProp18 = Object.prototype.hasOwnProperty;
var __propIsEnum18 = Object.prototype.propertyIsEnumerable;
var __defNormalProp17 = (obj, key2, value) => key2 in obj ? __defProp17(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues17 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp18.call(b2, prop))
      __defNormalProp17(a2, prop, b2[prop]);
  if (__getOwnPropSymbols18)
    for (var prop of __getOwnPropSymbols18(b2)) {
      if (__propIsEnum18.call(b2, prop))
        __defNormalProp17(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps9 = (a2, b2) => __defProps9(a2, __getOwnPropDescs9(b2));
var __objRest7 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp18.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols18)
    for (var prop of __getOwnPropSymbols18(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum18.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function getAutoHeightDuration(height) {
  if (!height || typeof height === "string") {
    return 0;
  }
  const constant = height / 36;
  return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
}
function getElementHeight(el) {
  return (el == null ? void 0 : el.current) ? el.current.scrollHeight : "auto";
}
var raf = typeof window !== "undefined" && window.requestAnimationFrame;
function useCollapse({
  transitionDuration,
  transitionTimingFunction = "ease",
  onTransitionEnd = () => {
  },
  opened
}) {
  const el = (0, import_react75.useRef)(null);
  const collapsedHeight = "0px";
  const collapsedStyles = {
    display: "none",
    height: "0px",
    overflow: "hidden"
  };
  const [styles2, setStylesRaw] = (0, import_react75.useState)(opened ? {} : collapsedStyles);
  const setStyles = (newStyles) => {
    (0, import_react_dom2.flushSync)(() => setStylesRaw(newStyles));
  };
  const mergeStyles = (newStyles) => {
    setStyles((oldStyles) => __spreadValues17(__spreadValues17({}, oldStyles), newStyles));
  };
  function getTransitionStyles2(height) {
    const _duration = transitionDuration || getAutoHeightDuration(height);
    return {
      transition: `height ${_duration}ms ${transitionTimingFunction}`
    };
  }
  useDidUpdate(() => {
    if (opened) {
      raf(() => {
        mergeStyles({ willChange: "height", display: "block", overflow: "hidden" });
        raf(() => {
          const height = getElementHeight(el);
          mergeStyles(__spreadProps9(__spreadValues17({}, getTransitionStyles2(height)), { height }));
        });
      });
    } else {
      raf(() => {
        const height = getElementHeight(el);
        mergeStyles(__spreadProps9(__spreadValues17({}, getTransitionStyles2(height)), { willChange: "height", height }));
        raf(() => mergeStyles({ height: collapsedHeight, overflow: "hidden" }));
      });
    }
  }, [opened]);
  const handleTransitionEnd = (e) => {
    if (e.target !== el.current || e.propertyName !== "height") {
      return;
    }
    if (opened) {
      const height = getElementHeight(el);
      if (height === styles2.height) {
        setStyles({});
      } else {
        mergeStyles({ height });
      }
      onTransitionEnd();
    } else if (styles2.height === collapsedHeight) {
      setStyles(collapsedStyles);
      onTransitionEnd();
    }
  };
  function getCollapseProps(_a = {}) {
    var _b = _a, { style: style3 = {}, refKey = "ref" } = _b, rest = __objRest7(_b, ["style", "refKey"]);
    const theirRef = rest[refKey];
    return __spreadProps9(__spreadValues17({
      "aria-hidden": !opened
    }, rest), {
      [refKey]: mergeRefs(el, theirRef),
      onTransitionEnd: handleTransitionEnd,
      style: __spreadValues17(__spreadValues17({ boxSizing: "border-box" }, style3), styles2)
    });
  }
  return getCollapseProps;
}

// node_modules/@mantine/core/esm/Collapse/Collapse.js
var __defProp18 = Object.defineProperty;
var __getOwnPropSymbols19 = Object.getOwnPropertySymbols;
var __hasOwnProp19 = Object.prototype.hasOwnProperty;
var __propIsEnum19 = Object.prototype.propertyIsEnumerable;
var __defNormalProp18 = (obj, key2, value) => key2 in obj ? __defProp18(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues18 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp19.call(b2, prop))
      __defNormalProp18(a2, prop, b2[prop]);
  if (__getOwnPropSymbols19)
    for (var prop of __getOwnPropSymbols19(b2)) {
      if (__propIsEnum19.call(b2, prop))
        __defNormalProp18(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest8 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp19.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols19)
    for (var prop of __getOwnPropSymbols19(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum19.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps4 = {
  transitionDuration: 200,
  transitionTimingFunction: "ease",
  animateOpacity: true
};
var Collapse = (0, import_react76.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Collapse", defaultProps4, props), {
    children,
    in: opened,
    transitionDuration,
    transitionTimingFunction,
    style: style3,
    onTransitionEnd,
    animateOpacity
  } = _a, others = __objRest8(_a, [
    "children",
    "in",
    "transitionDuration",
    "transitionTimingFunction",
    "style",
    "onTransitionEnd",
    "animateOpacity"
  ]);
  const theme = useMantineTheme();
  const shouldReduceMotion = useReducedMotion();
  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;
  const duration = reduceMotion ? 0 : transitionDuration;
  const { systemStyles, rest } = extractSystemStyles(others);
  const getCollapseProps = useCollapse({
    opened,
    transitionDuration: duration,
    transitionTimingFunction,
    onTransitionEnd
  });
  if (duration === 0) {
    return opened ? import_react76.default.createElement(Box, __spreadValues18({}, rest), children) : null;
  }
  return import_react76.default.createElement(Box, __spreadValues18({}, getCollapseProps(__spreadValues18(__spreadValues18({ style: style3, ref }, rest), systemStyles))), import_react76.default.createElement("div", {
    style: {
      opacity: opened || !animateOpacity ? 1 : 0,
      transition: animateOpacity ? `opacity ${duration}ms ${transitionTimingFunction}` : "none"
    }
  }, children));
});
Collapse.displayName = "@mantine/core/Collapse";

// node_modules/@mantine/core/esm/Accordion/AccordionPanel/AccordionPanel.js
var __defProp19 = Object.defineProperty;
var __defProps10 = Object.defineProperties;
var __getOwnPropDescs10 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols20 = Object.getOwnPropertySymbols;
var __hasOwnProp20 = Object.prototype.hasOwnProperty;
var __propIsEnum20 = Object.prototype.propertyIsEnumerable;
var __defNormalProp19 = (obj, key2, value) => key2 in obj ? __defProp19(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues19 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp20.call(b2, prop))
      __defNormalProp19(a2, prop, b2[prop]);
  if (__getOwnPropSymbols20)
    for (var prop of __getOwnPropSymbols20(b2)) {
      if (__propIsEnum20.call(b2, prop))
        __defNormalProp19(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps10 = (a2, b2) => __defProps10(a2, __getOwnPropDescs10(b2));
var __objRest9 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp20.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols20)
    for (var prop of __getOwnPropSymbols20(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum20.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps5 = {};
function AccordionPanel(props) {
  const _a = useComponentDefaultProps("AccordionPanel", defaultProps5, props), { children, className } = _a, others = __objRest9(_a, ["children", "className"]);
  const ctx = useAccordionContext();
  const { value } = useAccordionItemContext();
  const { classNames, styles: styles2, unstyled } = useAccordionContext();
  const { classes, cx } = AccordionPanel_styles_default({ variant: ctx.variant, radius: ctx.radius }, { name: "Accordion", classNames, styles: styles2, unstyled });
  return import_react77.default.createElement(Collapse, __spreadProps10(__spreadValues19({}, others), {
    className: cx(classes.panel, className),
    in: ctx.isItemActive(value),
    transitionDuration: ctx.transitionDuration,
    role: "region",
    id: ctx.getRegionId(value),
    "aria-labelledby": ctx.getControlId(value)
  }), import_react77.default.createElement("div", {
    className: classes.content
  }, children));
}
AccordionPanel.displayName = "@mantine/core/AccordionPanel";

// node_modules/@mantine/core/esm/Accordion/ChevronIcon.js
var import_react78 = __toESM(require_react());
var __defProp20 = Object.defineProperty;
var __getOwnPropSymbols21 = Object.getOwnPropertySymbols;
var __hasOwnProp21 = Object.prototype.hasOwnProperty;
var __propIsEnum21 = Object.prototype.propertyIsEnumerable;
var __defNormalProp20 = (obj, key2, value) => key2 in obj ? __defProp20(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues20 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp21.call(b2, prop))
      __defNormalProp20(a2, prop, b2[prop]);
  if (__getOwnPropSymbols21)
    for (var prop of __getOwnPropSymbols21(b2)) {
      if (__propIsEnum21.call(b2, prop))
        __defNormalProp20(a2, prop, b2[prop]);
    }
  return a2;
};
function ChevronIcon(props) {
  return import_react78.default.createElement("svg", __spreadValues20({
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    width: 16,
    height: 16
  }, props), import_react78.default.createElement("path", {
    d: "M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
}

// node_modules/@mantine/core/esm/Accordion/Accordion.js
var __defProp21 = Object.defineProperty;
var __defProps11 = Object.defineProperties;
var __getOwnPropDescs11 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols22 = Object.getOwnPropertySymbols;
var __hasOwnProp22 = Object.prototype.hasOwnProperty;
var __propIsEnum22 = Object.prototype.propertyIsEnumerable;
var __defNormalProp21 = (obj, key2, value) => key2 in obj ? __defProp21(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues21 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp22.call(b2, prop))
      __defNormalProp21(a2, prop, b2[prop]);
  if (__getOwnPropSymbols22)
    for (var prop of __getOwnPropSymbols22(b2)) {
      if (__propIsEnum22.call(b2, prop))
        __defNormalProp21(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps11 = (a2, b2) => __defProps11(a2, __getOwnPropDescs11(b2));
var __objRest10 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp22.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols22)
    for (var prop of __getOwnPropSymbols22(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum22.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps6 = {
  multiple: false,
  disableChevronRotation: false,
  transitionDuration: 200,
  chevronPosition: "right",
  variant: "default",
  chevronSize: 24,
  chevron: import_react79.default.createElement(ChevronIcon, null)
};
function Accordion(props) {
  const _a = useComponentDefaultProps("Accordion", defaultProps6, props), {
    id: id2,
    loop,
    children,
    multiple,
    value,
    defaultValue,
    onChange,
    transitionDuration,
    disableChevronRotation,
    chevronPosition,
    chevronSize,
    order: order3,
    chevron,
    classNames,
    styles: styles2,
    unstyled,
    variant: variant2,
    radius: radius2
  } = _a, others = __objRest10(_a, [
    "id",
    "loop",
    "children",
    "multiple",
    "value",
    "defaultValue",
    "onChange",
    "transitionDuration",
    "disableChevronRotation",
    "chevronPosition",
    "chevronSize",
    "order",
    "chevron",
    "classNames",
    "styles",
    "unstyled",
    "variant",
    "radius"
  ]);
  return import_react79.default.createElement(AccordionProvider, {
    id: id2,
    multiple,
    value,
    defaultValue,
    onChange,
    loop,
    transitionDuration,
    disableChevronRotation,
    chevronPosition,
    chevronSize,
    order: order3,
    chevron,
    variant: variant2,
    radius: radius2,
    classNames,
    styles: styles2,
    unstyled
  }, import_react79.default.createElement(Box, __spreadProps11(__spreadValues21({}, others), {
    "data-accordion": true
  }), children));
}
Accordion.Item = AccordionItem;
Accordion.Control = AccordionControl;
Accordion.Panel = AccordionPanel;
Accordion.displayName = "@mantine/core/Accordion";

// node_modules/@mantine/core/esm/ActionIcon/ActionIcon.js
var import_react84 = __toESM(require_react());

// node_modules/@mantine/core/esm/ActionIcon/ActionIcon.styles.js
var __defProp22 = Object.defineProperty;
var __defProps12 = Object.defineProperties;
var __getOwnPropDescs12 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols23 = Object.getOwnPropertySymbols;
var __hasOwnProp23 = Object.prototype.hasOwnProperty;
var __propIsEnum23 = Object.prototype.propertyIsEnumerable;
var __defNormalProp22 = (obj, key2, value) => key2 in obj ? __defProp22(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues22 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp23.call(b2, prop))
      __defNormalProp22(a2, prop, b2[prop]);
  if (__getOwnPropSymbols23)
    for (var prop of __getOwnPropSymbols23(b2)) {
      if (__propIsEnum23.call(b2, prop))
        __defNormalProp22(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps12 = (a2, b2) => __defProps12(a2, __getOwnPropDescs12(b2));
var sizes = {
  xs: 18,
  sm: 22,
  md: 28,
  lg: 34,
  xl: 44
};
function getVariantStyles3({ variant: variant2, theme, color: color2, gradient: gradient2 }) {
  const colors2 = theme.fn.variant({ color: color2, variant: variant2, gradient: gradient2 });
  if (variant2 === "gradient") {
    return {
      border: 0,
      backgroundImage: colors2.background,
      color: colors2.color,
      "&:hover": theme.fn.hover({
        backgroundSize: "200%"
      })
    };
  }
  return __spreadValues22({
    border: `1px solid ${colors2.border}`,
    backgroundColor: colors2.background,
    color: colors2.color
  }, theme.fn.hover({
    backgroundColor: colors2.hover
  }));
}
var useStyles5 = createStyles((theme, { color: color2, size: size3, radius: radius2, variant: variant2, gradient: gradient2 }) => ({
  root: __spreadProps12(__spreadValues22({}, getVariantStyles3({ variant: variant2, theme, color: color2, gradient: gradient2 })), {
    position: "relative",
    height: theme.fn.size({ size: size3, sizes }),
    minHeight: theme.fn.size({ size: size3, sizes }),
    width: theme.fn.size({ size: size3, sizes }),
    minWidth: theme.fn.size({ size: size3, sizes }),
    borderRadius: theme.fn.radius(radius2),
    padding: 0,
    lineHeight: 1,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    "&:active": theme.activeStyles,
    "&:disabled, &[data-disabled]": {
      color: theme.colors.gray[theme.colorScheme === "dark" ? 6 : 4],
      cursor: "not-allowed",
      backgroundColor: variant2 === "transparent" ? void 0 : theme.fn.themeColor("gray", theme.colorScheme === "dark" ? 8 : 1),
      borderColor: variant2 === "transparent" ? void 0 : theme.fn.themeColor("gray", theme.colorScheme === "dark" ? 8 : 1),
      backgroundImage: "none",
      pointerEvents: "none",
      "&:active": {
        transform: "none"
      }
    },
    "&[data-loading]": {
      pointerEvents: "none",
      "&::before": {
        content: '""',
        position: "absolute",
        top: -1,
        left: -1,
        right: -1,
        bottom: -1,
        backgroundColor: theme.colorScheme === "dark" ? theme.fn.rgba(theme.colors.dark[7], 0.5) : "rgba(255, 255, 255, .5)",
        borderRadius: theme.fn.radius(radius2),
        cursor: "not-allowed"
      }
    }
  })
}));
var ActionIcon_styles_default = useStyles5;

// node_modules/@mantine/core/esm/Loader/Loader.js
var import_react83 = __toESM(require_react());

// node_modules/@mantine/core/esm/Loader/loaders/Bars.js
var import_react80 = __toESM(require_react());
var __defProp23 = Object.defineProperty;
var __getOwnPropSymbols24 = Object.getOwnPropertySymbols;
var __hasOwnProp24 = Object.prototype.hasOwnProperty;
var __propIsEnum24 = Object.prototype.propertyIsEnumerable;
var __defNormalProp23 = (obj, key2, value) => key2 in obj ? __defProp23(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues23 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp24.call(b2, prop))
      __defNormalProp23(a2, prop, b2[prop]);
  if (__getOwnPropSymbols24)
    for (var prop of __getOwnPropSymbols24(b2)) {
      if (__propIsEnum24.call(b2, prop))
        __defNormalProp23(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest11 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp24.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols24)
    for (var prop of __getOwnPropSymbols24(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum24.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function Bars(_a) {
  var _b = _a, { size: size3, color: color2 } = _b, others = __objRest11(_b, ["size", "color"]);
  return import_react80.default.createElement("svg", __spreadValues23({
    viewBox: "0 0 135 140",
    xmlns: "http://www.w3.org/2000/svg",
    fill: color2,
    width: `${size3}px`
  }, others), import_react80.default.createElement("rect", {
    y: "10",
    width: "15",
    height: "120",
    rx: "6"
  }, import_react80.default.createElement("animate", {
    attributeName: "height",
    begin: "0.5s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), import_react80.default.createElement("animate", {
    attributeName: "y",
    begin: "0.5s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), import_react80.default.createElement("rect", {
    x: "30",
    y: "10",
    width: "15",
    height: "120",
    rx: "6"
  }, import_react80.default.createElement("animate", {
    attributeName: "height",
    begin: "0.25s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), import_react80.default.createElement("animate", {
    attributeName: "y",
    begin: "0.25s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), import_react80.default.createElement("rect", {
    x: "60",
    width: "15",
    height: "140",
    rx: "6"
  }, import_react80.default.createElement("animate", {
    attributeName: "height",
    begin: "0s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), import_react80.default.createElement("animate", {
    attributeName: "y",
    begin: "0s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), import_react80.default.createElement("rect", {
    x: "90",
    y: "10",
    width: "15",
    height: "120",
    rx: "6"
  }, import_react80.default.createElement("animate", {
    attributeName: "height",
    begin: "0.25s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), import_react80.default.createElement("animate", {
    attributeName: "y",
    begin: "0.25s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), import_react80.default.createElement("rect", {
    x: "120",
    y: "10",
    width: "15",
    height: "120",
    rx: "6"
  }, import_react80.default.createElement("animate", {
    attributeName: "height",
    begin: "0.5s",
    dur: "1s",
    values: "120;110;100;90;80;70;60;50;40;140;120",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), import_react80.default.createElement("animate", {
    attributeName: "y",
    begin: "0.5s",
    dur: "1s",
    values: "10;15;20;25;30;35;40;45;50;0;10",
    calcMode: "linear",
    repeatCount: "indefinite"
  })));
}

// node_modules/@mantine/core/esm/Loader/loaders/Oval.js
var import_react81 = __toESM(require_react());
var __defProp24 = Object.defineProperty;
var __getOwnPropSymbols25 = Object.getOwnPropertySymbols;
var __hasOwnProp25 = Object.prototype.hasOwnProperty;
var __propIsEnum25 = Object.prototype.propertyIsEnumerable;
var __defNormalProp24 = (obj, key2, value) => key2 in obj ? __defProp24(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues24 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp25.call(b2, prop))
      __defNormalProp24(a2, prop, b2[prop]);
  if (__getOwnPropSymbols25)
    for (var prop of __getOwnPropSymbols25(b2)) {
      if (__propIsEnum25.call(b2, prop))
        __defNormalProp24(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest12 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp25.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols25)
    for (var prop of __getOwnPropSymbols25(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum25.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function Oval(_a) {
  var _b = _a, { size: size3, color: color2 } = _b, others = __objRest12(_b, ["size", "color"]);
  return import_react81.default.createElement("svg", __spreadValues24({
    width: `${size3}px`,
    height: `${size3}px`,
    viewBox: "0 0 38 38",
    xmlns: "http://www.w3.org/2000/svg",
    stroke: color2
  }, others), import_react81.default.createElement("g", {
    fill: "none",
    fillRule: "evenodd"
  }, import_react81.default.createElement("g", {
    transform: "translate(2.5 2.5)",
    strokeWidth: "5"
  }, import_react81.default.createElement("circle", {
    strokeOpacity: ".5",
    cx: "16",
    cy: "16",
    r: "16"
  }), import_react81.default.createElement("path", {
    d: "M32 16c0-9.94-8.06-16-16-16"
  }, import_react81.default.createElement("animateTransform", {
    attributeName: "transform",
    type: "rotate",
    from: "0 16 16",
    to: "360 16 16",
    dur: "1s",
    repeatCount: "indefinite"
  })))));
}

// node_modules/@mantine/core/esm/Loader/loaders/Dots.js
var import_react82 = __toESM(require_react());
var __defProp25 = Object.defineProperty;
var __getOwnPropSymbols26 = Object.getOwnPropertySymbols;
var __hasOwnProp26 = Object.prototype.hasOwnProperty;
var __propIsEnum26 = Object.prototype.propertyIsEnumerable;
var __defNormalProp25 = (obj, key2, value) => key2 in obj ? __defProp25(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues25 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp26.call(b2, prop))
      __defNormalProp25(a2, prop, b2[prop]);
  if (__getOwnPropSymbols26)
    for (var prop of __getOwnPropSymbols26(b2)) {
      if (__propIsEnum26.call(b2, prop))
        __defNormalProp25(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest13 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp26.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols26)
    for (var prop of __getOwnPropSymbols26(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum26.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function Dots(_a) {
  var _b = _a, { size: size3, color: color2 } = _b, others = __objRest13(_b, ["size", "color"]);
  return import_react82.default.createElement("svg", __spreadValues25({
    width: `${size3}px`,
    height: `${size3 / 4}px`,
    viewBox: "0 0 120 30",
    xmlns: "http://www.w3.org/2000/svg",
    fill: color2
  }, others), import_react82.default.createElement("circle", {
    cx: "15",
    cy: "15",
    r: "15"
  }, import_react82.default.createElement("animate", {
    attributeName: "r",
    from: "15",
    to: "15",
    begin: "0s",
    dur: "0.8s",
    values: "15;9;15",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), import_react82.default.createElement("animate", {
    attributeName: "fill-opacity",
    from: "1",
    to: "1",
    begin: "0s",
    dur: "0.8s",
    values: "1;.5;1",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), import_react82.default.createElement("circle", {
    cx: "60",
    cy: "15",
    r: "9",
    fillOpacity: "0.3"
  }, import_react82.default.createElement("animate", {
    attributeName: "r",
    from: "9",
    to: "9",
    begin: "0s",
    dur: "0.8s",
    values: "9;15;9",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), import_react82.default.createElement("animate", {
    attributeName: "fill-opacity",
    from: "0.5",
    to: "0.5",
    begin: "0s",
    dur: "0.8s",
    values: ".5;1;.5",
    calcMode: "linear",
    repeatCount: "indefinite"
  })), import_react82.default.createElement("circle", {
    cx: "105",
    cy: "15",
    r: "15"
  }, import_react82.default.createElement("animate", {
    attributeName: "r",
    from: "15",
    to: "15",
    begin: "0s",
    dur: "0.8s",
    values: "15;9;15",
    calcMode: "linear",
    repeatCount: "indefinite"
  }), import_react82.default.createElement("animate", {
    attributeName: "fill-opacity",
    from: "1",
    to: "1",
    begin: "0s",
    dur: "0.8s",
    values: "1;.5;1",
    calcMode: "linear",
    repeatCount: "indefinite"
  })));
}

// node_modules/@mantine/core/esm/Loader/Loader.js
var __defProp26 = Object.defineProperty;
var __getOwnPropSymbols27 = Object.getOwnPropertySymbols;
var __hasOwnProp27 = Object.prototype.hasOwnProperty;
var __propIsEnum27 = Object.prototype.propertyIsEnumerable;
var __defNormalProp26 = (obj, key2, value) => key2 in obj ? __defProp26(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues26 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp27.call(b2, prop))
      __defNormalProp26(a2, prop, b2[prop]);
  if (__getOwnPropSymbols27)
    for (var prop of __getOwnPropSymbols27(b2)) {
      if (__propIsEnum27.call(b2, prop))
        __defNormalProp26(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest14 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp27.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols27)
    for (var prop of __getOwnPropSymbols27(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum27.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var LOADERS = {
  bars: Bars,
  oval: Oval,
  dots: Dots
};
var sizes2 = {
  xs: 18,
  sm: 22,
  md: 36,
  lg: 44,
  xl: 58
};
var defaultProps7 = {
  size: "md"
};
function Loader(props) {
  const _a = useComponentDefaultProps("Loader", defaultProps7, props), { size: size3, color: color2, variant: variant2 } = _a, others = __objRest14(_a, ["size", "color", "variant"]);
  const theme = useMantineTheme();
  const defaultLoader = variant2 in LOADERS ? variant2 : theme.loader;
  return import_react83.default.createElement(Box, __spreadValues26({
    role: "presentation",
    component: LOADERS[defaultLoader] || LOADERS.bars,
    size: theme.fn.size({ size: size3, sizes: sizes2 }),
    color: theme.fn.variant({
      variant: "filled",
      primaryFallback: false,
      color: color2 || theme.primaryColor
    }).background
  }, others));
}
Loader.displayName = "@mantine/core/Loader";

// node_modules/@mantine/core/esm/ActionIcon/ActionIcon.js
var __defProp27 = Object.defineProperty;
var __getOwnPropSymbols28 = Object.getOwnPropertySymbols;
var __hasOwnProp28 = Object.prototype.hasOwnProperty;
var __propIsEnum28 = Object.prototype.propertyIsEnumerable;
var __defNormalProp27 = (obj, key2, value) => key2 in obj ? __defProp27(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues27 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp28.call(b2, prop))
      __defNormalProp27(a2, prop, b2[prop]);
  if (__getOwnPropSymbols28)
    for (var prop of __getOwnPropSymbols28(b2)) {
      if (__propIsEnum28.call(b2, prop))
        __defNormalProp27(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest15 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp28.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols28)
    for (var prop of __getOwnPropSymbols28(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum28.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps8 = {
  color: "gray",
  size: "md",
  variant: "subtle",
  loading: false
};
var _ActionIcon = (0, import_react84.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("ActionIcon", defaultProps8, props), {
    className,
    color: color2,
    children,
    radius: radius2,
    size: size3,
    variant: variant2,
    gradient: gradient2,
    disabled,
    loaderProps,
    loading,
    unstyled
  } = _a, others = __objRest15(_a, [
    "className",
    "color",
    "children",
    "radius",
    "size",
    "variant",
    "gradient",
    "disabled",
    "loaderProps",
    "loading",
    "unstyled"
  ]);
  const { classes, cx, theme } = ActionIcon_styles_default({ size: size3, radius: radius2, color: color2, variant: variant2, gradient: gradient2 }, { name: "ActionIcon", unstyled });
  const colors2 = theme.fn.variant({ color: color2, variant: variant2 });
  const loader = import_react84.default.createElement(Loader, __spreadValues27({
    color: colors2.color,
    size: theme.fn.size({ size: size3, sizes }) - 12
  }, loaderProps));
  return import_react84.default.createElement(UnstyledButton, __spreadValues27({
    className: cx(classes.root, className),
    ref,
    disabled,
    "data-disabled": disabled || void 0,
    "data-loading": loading || void 0,
    unstyled
  }, others), loading ? loader : children);
});
_ActionIcon.displayName = "@mantine/core/ActionIcon";
var ActionIcon = createPolymorphicComponent(_ActionIcon);

// node_modules/@mantine/core/esm/Affix/Affix.js
var import_react87 = __toESM(require_react());

// node_modules/@mantine/core/esm/Portal/OptionalPortal.js
var import_react86 = __toESM(require_react());

// node_modules/@mantine/core/esm/Portal/Portal.js
var import_react85 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
function Portal(props) {
  const { children, target, className } = useComponentDefaultProps("Portal", {}, props);
  const theme = useMantineTheme();
  const [mounted, setMounted] = (0, import_react85.useState)(false);
  const ref = (0, import_react85.useRef)();
  useIsomorphicEffect(() => {
    setMounted(true);
    ref.current = !target ? document.createElement("div") : typeof target === "string" ? document.querySelector(target) : target;
    if (!target) {
      document.body.appendChild(ref.current);
    }
    return () => {
      !target && document.body.removeChild(ref.current);
    };
  }, [target]);
  if (!mounted) {
    return null;
  }
  return (0, import_react_dom3.createPortal)(import_react85.default.createElement("div", {
    className,
    dir: theme.dir
  }, children), ref.current);
}
Portal.displayName = "@mantine/core/Portal";

// node_modules/@mantine/core/esm/Portal/OptionalPortal.js
var __defProp28 = Object.defineProperty;
var __getOwnPropSymbols29 = Object.getOwnPropertySymbols;
var __hasOwnProp29 = Object.prototype.hasOwnProperty;
var __propIsEnum29 = Object.prototype.propertyIsEnumerable;
var __defNormalProp28 = (obj, key2, value) => key2 in obj ? __defProp28(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues28 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp29.call(b2, prop))
      __defNormalProp28(a2, prop, b2[prop]);
  if (__getOwnPropSymbols29)
    for (var prop of __getOwnPropSymbols29(b2)) {
      if (__propIsEnum29.call(b2, prop))
        __defNormalProp28(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest16 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp29.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols29)
    for (var prop of __getOwnPropSymbols29(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum29.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function OptionalPortal(_a) {
  var _b = _a, { withinPortal = true, children } = _b, others = __objRest16(_b, ["withinPortal", "children"]);
  if (withinPortal) {
    return import_react86.default.createElement(Portal, __spreadValues28({}, others), children);
  }
  return import_react86.default.createElement(import_react86.default.Fragment, null, children);
}
OptionalPortal.displayName = "@mantine/core/OptionalPortal";

// node_modules/@mantine/core/esm/Affix/Affix.js
var __defProp29 = Object.defineProperty;
var __getOwnPropSymbols30 = Object.getOwnPropertySymbols;
var __hasOwnProp30 = Object.prototype.hasOwnProperty;
var __propIsEnum30 = Object.prototype.propertyIsEnumerable;
var __defNormalProp29 = (obj, key2, value) => key2 in obj ? __defProp29(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues29 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp30.call(b2, prop))
      __defNormalProp29(a2, prop, b2[prop]);
  if (__getOwnPropSymbols30)
    for (var prop of __getOwnPropSymbols30(b2)) {
      if (__propIsEnum30.call(b2, prop))
        __defNormalProp29(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest17 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp30.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols30)
    for (var prop of __getOwnPropSymbols30(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum30.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps9 = {
  position: { bottom: 0, right: 0 },
  zIndex: getDefaultZIndex("modal"),
  withinPortal: true
};
var Affix = (0, import_react87.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Affix", defaultProps9, props), { target, position: position5, zIndex, sx, withinPortal } = _a, others = __objRest17(_a, ["target", "position", "zIndex", "sx", "withinPortal"]);
  return import_react87.default.createElement(OptionalPortal, {
    withinPortal,
    target
  }, import_react87.default.createElement(Box, __spreadValues29({
    sx: [__spreadValues29({ position: "fixed", zIndex }, position5), ...packSx(sx)],
    ref
  }, others)));
});
Affix.displayName = "@mantine/core/Affix";

// node_modules/@mantine/core/esm/Alert/Alert.js
var import_react90 = __toESM(require_react());

// node_modules/@mantine/core/esm/Alert/Alert.styles.js
var __defProp30 = Object.defineProperty;
var __defProps13 = Object.defineProperties;
var __getOwnPropDescs13 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols31 = Object.getOwnPropertySymbols;
var __hasOwnProp31 = Object.prototype.hasOwnProperty;
var __propIsEnum31 = Object.prototype.propertyIsEnumerable;
var __defNormalProp30 = (obj, key2, value) => key2 in obj ? __defProp30(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues30 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp31.call(b2, prop))
      __defNormalProp30(a2, prop, b2[prop]);
  if (__getOwnPropSymbols31)
    for (var prop of __getOwnPropSymbols31(b2)) {
      if (__propIsEnum31.call(b2, prop))
        __defNormalProp30(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps13 = (a2, b2) => __defProps13(a2, __getOwnPropDescs13(b2));
function getVariantStyles4({ variant: variant2, color: color2, theme }) {
  if (variant2 === "filled") {
    const colors22 = theme.fn.variant({ variant: "filled", color: color2 });
    return {
      backgroundColor: colors22.background,
      color: theme.white
    };
  }
  if (variant2 === "outline") {
    const colors22 = theme.fn.variant({ variant: "outline", color: color2 });
    return {
      color: colors22.color,
      borderColor: colors22.border,
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white
    };
  }
  const colors2 = theme.fn.variant({ variant: "light", color: color2 });
  return {
    backgroundColor: colors2.background,
    color: colors2.color
  };
}
var useStyles6 = createStyles((theme, { color: color2, radius: radius2, variant: variant2 }) => ({
  root: __spreadValues30(__spreadProps13(__spreadValues30({}, theme.fn.fontStyles()), {
    position: "relative",
    overflow: "hidden",
    padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,
    borderRadius: theme.fn.radius(radius2),
    border: "1px solid transparent"
  }), getVariantStyles4({ variant: variant2, color: color2, theme })),
  wrapper: {
    display: "flex"
  },
  body: {
    flex: 1
  },
  title: {
    boxSizing: "border-box",
    margin: 0,
    marginBottom: 7,
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    lineHeight: theme.lineHeight,
    fontSize: theme.fontSizes.sm,
    fontWeight: 700,
    "&[data-with-close-button]": {
      paddingRight: theme.spacing.md
    }
  },
  label: {
    display: "block",
    overflow: "hidden",
    textOverflow: "ellipsis"
  },
  icon: {
    lineHeight: 1,
    width: 20,
    height: 20,
    display: "flex",
    alignItems: "center",
    justifyContent: "flex-start",
    marginRight: theme.spacing.md,
    marginTop: 1
  },
  message: __spreadProps13(__spreadValues30({}, theme.fn.fontStyles()), {
    lineHeight: theme.lineHeight,
    textOverflow: "ellipsis",
    overflow: "hidden",
    fontSize: theme.fontSizes.sm,
    color: variant2 === "filled" ? theme.white : theme.colorScheme === "dark" ? variant2 === "light" ? theme.white : theme.colors.dark[0] : theme.black
  }),
  closeButton: {
    position: "absolute",
    top: theme.spacing.sm,
    right: theme.spacing.sm,
    color: "inherit"
  }
}));
var Alert_styles_default = useStyles6;

// node_modules/@mantine/core/esm/CloseButton/CloseButton.js
var import_react89 = __toESM(require_react());

// node_modules/@mantine/core/esm/CloseButton/CloseIcon.js
var import_react88 = __toESM(require_react());
var __defProp31 = Object.defineProperty;
var __getOwnPropSymbols32 = Object.getOwnPropertySymbols;
var __hasOwnProp32 = Object.prototype.hasOwnProperty;
var __propIsEnum32 = Object.prototype.propertyIsEnumerable;
var __defNormalProp31 = (obj, key2, value) => key2 in obj ? __defProp31(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues31 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp32.call(b2, prop))
      __defNormalProp31(a2, prop, b2[prop]);
  if (__getOwnPropSymbols32)
    for (var prop of __getOwnPropSymbols32(b2)) {
      if (__propIsEnum32.call(b2, prop))
        __defNormalProp31(a2, prop, b2[prop]);
    }
  return a2;
};
function CloseIcon(props) {
  return import_react88.default.createElement("svg", __spreadValues31({
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react88.default.createElement("path", {
    d: "M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
}
CloseIcon.displayName = "@mantine/core/CloseIcon";

// node_modules/@mantine/core/esm/CloseButton/CloseButton.js
var __defProp32 = Object.defineProperty;
var __getOwnPropSymbols33 = Object.getOwnPropertySymbols;
var __hasOwnProp33 = Object.prototype.hasOwnProperty;
var __propIsEnum33 = Object.prototype.propertyIsEnumerable;
var __defNormalProp32 = (obj, key2, value) => key2 in obj ? __defProp32(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues32 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp33.call(b2, prop))
      __defNormalProp32(a2, prop, b2[prop]);
  if (__getOwnPropSymbols33)
    for (var prop of __getOwnPropSymbols33(b2)) {
      if (__propIsEnum33.call(b2, prop))
        __defNormalProp32(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest18 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp33.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols33)
    for (var prop of __getOwnPropSymbols33(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum33.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var iconSizes = {
  xs: 12,
  sm: 14,
  md: 16,
  lg: 20,
  xl: 24
};
var defaultProps10 = {
  size: "md"
};
var _CloseButton = (0, import_react89.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("CloseButton", defaultProps10, props), {
    iconSize,
    size: size3 = "md"
  } = _a, others = __objRest18(_a, [
    "iconSize",
    "size"
  ]);
  const theme = useMantineTheme();
  const _iconSize = iconSize || theme.fn.size({ size: size3, sizes: iconSizes });
  return import_react89.default.createElement(ActionIcon, __spreadValues32({
    size: size3,
    ref
  }, others), import_react89.default.createElement(CloseIcon, {
    width: _iconSize,
    height: _iconSize
  }));
});
_CloseButton.displayName = "@mantine/core/CloseButton";
var CloseButton = createPolymorphicComponent(_CloseButton);

// node_modules/@mantine/core/esm/Alert/Alert.js
var __defProp33 = Object.defineProperty;
var __getOwnPropSymbols34 = Object.getOwnPropertySymbols;
var __hasOwnProp34 = Object.prototype.hasOwnProperty;
var __propIsEnum34 = Object.prototype.propertyIsEnumerable;
var __defNormalProp33 = (obj, key2, value) => key2 in obj ? __defProp33(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues33 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp34.call(b2, prop))
      __defNormalProp33(a2, prop, b2[prop]);
  if (__getOwnPropSymbols34)
    for (var prop of __getOwnPropSymbols34(b2)) {
      if (__propIsEnum34.call(b2, prop))
        __defNormalProp33(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest19 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp34.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols34)
    for (var prop of __getOwnPropSymbols34(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum34.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps11 = {
  variant: "light"
};
var Alert = (0, import_react90.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Alert", defaultProps11, props), {
    id: id2,
    className,
    title,
    variant: variant2,
    children,
    color: color2,
    classNames,
    icon,
    styles: styles2,
    onClose,
    radius: radius2,
    withCloseButton,
    closeButtonLabel,
    unstyled
  } = _a, others = __objRest19(_a, [
    "id",
    "className",
    "title",
    "variant",
    "children",
    "color",
    "classNames",
    "icon",
    "styles",
    "onClose",
    "radius",
    "withCloseButton",
    "closeButtonLabel",
    "unstyled"
  ]);
  const { classes, cx } = Alert_styles_default({ color: color2, radius: radius2, variant: variant2 }, { classNames, styles: styles2, unstyled, name: "Alert" });
  const rootId = useId(id2);
  const titleId = title && `${rootId}-title`;
  const bodyId = `${rootId}-body`;
  return import_react90.default.createElement(Box, __spreadValues33({
    id: rootId,
    role: "alert",
    "aria-labelledby": titleId,
    "aria-describedby": bodyId,
    className: cx(classes.root, classes[variant2], className),
    ref
  }, others), import_react90.default.createElement("div", {
    className: classes.wrapper
  }, icon && import_react90.default.createElement("div", {
    className: classes.icon
  }, icon), import_react90.default.createElement("div", {
    className: classes.body
  }, title && import_react90.default.createElement("div", {
    className: classes.title,
    "data-with-close-button": withCloseButton || void 0
  }, import_react90.default.createElement("span", {
    id: titleId,
    className: classes.label
  }, title)), withCloseButton && import_react90.default.createElement(CloseButton, {
    className: classes.closeButton,
    onClick: onClose,
    variant: "transparent",
    size: 16,
    iconSize: 16,
    "aria-label": closeButtonLabel
  }), import_react90.default.createElement("div", {
    id: bodyId,
    className: classes.message
  }, children))));
});
Alert.displayName = "@mantine/core/Alert";

// node_modules/@mantine/core/esm/Anchor/Anchor.js
var import_react92 = __toESM(require_react());

// node_modules/@mantine/core/esm/Text/Text.js
var import_react91 = __toESM(require_react());

// node_modules/@mantine/core/esm/Text/Text.styles.js
var __defProp34 = Object.defineProperty;
var __defProps14 = Object.defineProperties;
var __getOwnPropDescs14 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols35 = Object.getOwnPropertySymbols;
var __hasOwnProp35 = Object.prototype.hasOwnProperty;
var __propIsEnum35 = Object.prototype.propertyIsEnumerable;
var __defNormalProp34 = (obj, key2, value) => key2 in obj ? __defProp34(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues34 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp35.call(b2, prop))
      __defNormalProp34(a2, prop, b2[prop]);
  if (__getOwnPropSymbols35)
    for (var prop of __getOwnPropSymbols35(b2)) {
      if (__propIsEnum35.call(b2, prop))
        __defNormalProp34(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps14 = (a2, b2) => __defProps14(a2, __getOwnPropDescs14(b2));
function getTextDecoration({
  underline,
  strikethrough: strikethrough2
}) {
  const styles2 = [];
  if (underline) {
    styles2.push("underline");
  }
  if (strikethrough2) {
    styles2.push("line-through");
  }
  return styles2.length > 0 ? styles2.join(" ") : "none";
}
function getTextColor({ theme, color: color2, variant: variant2 }) {
  if (color2 === "dimmed") {
    return theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6];
  }
  return typeof color2 === "string" && (color2 in theme.colors || color2.split(".")[0] in theme.colors) ? theme.fn.variant({ variant: "filled", color: color2 }).background : variant2 === "link" ? theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 4 : 7] : color2 || "inherit";
}
function getLineClamp(lineClamp) {
  if (typeof lineClamp === "number") {
    return {
      overflow: "hidden",
      textOverflow: "ellipsis",
      display: "-webkit-box",
      WebkitLineClamp: lineClamp,
      WebkitBoxOrient: "vertical"
    };
  }
  return null;
}
function getTruncate({ theme, truncate }) {
  if (truncate === "start") {
    return {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      direction: theme.dir === "ltr" ? "rtl" : "ltr",
      textAlign: theme.dir === "ltr" ? "right" : "left"
    };
  }
  if (truncate) {
    return {
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    };
  }
  return null;
}
var useStyles7 = createStyles((theme, {
  color: color2,
  variant: variant2,
  size: size3,
  lineClamp,
  truncate,
  inline: inline2,
  inherit,
  underline,
  gradient: gradient2,
  weight,
  transform: transform2,
  align,
  strikethrough: strikethrough2,
  italic
}) => {
  const colors2 = theme.fn.variant({ variant: "gradient", gradient: gradient2 });
  return {
    root: __spreadValues34(__spreadProps14(__spreadValues34(__spreadValues34(__spreadValues34(__spreadValues34({}, theme.fn.fontStyles()), theme.fn.focusStyles()), getLineClamp(lineClamp)), getTruncate({ theme, truncate })), {
      color: getTextColor({ color: color2, theme, variant: variant2 }),
      fontFamily: inherit ? "inherit" : theme.fontFamily,
      fontSize: inherit || size3 === void 0 ? "inherit" : theme.fn.size({ size: size3, sizes: theme.fontSizes }),
      lineHeight: inherit ? "inherit" : inline2 ? 1 : theme.lineHeight,
      textDecoration: getTextDecoration({ underline, strikethrough: strikethrough2 }),
      WebkitTapHighlightColor: "transparent",
      fontWeight: inherit ? "inherit" : weight,
      textTransform: transform2,
      textAlign: align,
      fontStyle: italic ? "italic" : void 0
    }), theme.fn.hover(variant2 === "link" && underline === void 0 ? {
      textDecoration: "underline"
    } : void 0)),
    gradient: {
      backgroundImage: colors2.background,
      WebkitBackgroundClip: "text",
      WebkitTextFillColor: "transparent"
    }
  };
});
var Text_styles_default = useStyles7;

// node_modules/@mantine/core/esm/Text/Text.js
var __defProp35 = Object.defineProperty;
var __getOwnPropSymbols36 = Object.getOwnPropertySymbols;
var __hasOwnProp36 = Object.prototype.hasOwnProperty;
var __propIsEnum36 = Object.prototype.propertyIsEnumerable;
var __defNormalProp35 = (obj, key2, value) => key2 in obj ? __defProp35(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues35 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp36.call(b2, prop))
      __defNormalProp35(a2, prop, b2[prop]);
  if (__getOwnPropSymbols36)
    for (var prop of __getOwnPropSymbols36(b2)) {
      if (__propIsEnum36.call(b2, prop))
        __defNormalProp35(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest20 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp36.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols36)
    for (var prop of __getOwnPropSymbols36(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum36.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps12 = {
  variant: "text"
};
var _Text = (0, import_react91.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Text", defaultProps12, props), {
    className,
    size: size3,
    weight,
    transform: transform2,
    color: color2,
    align,
    variant: variant2,
    lineClamp,
    truncate,
    gradient: gradient2,
    inline: inline2,
    inherit,
    underline,
    strikethrough: strikethrough2,
    italic,
    classNames,
    styles: styles2,
    unstyled,
    span
  } = _a, others = __objRest20(_a, [
    "className",
    "size",
    "weight",
    "transform",
    "color",
    "align",
    "variant",
    "lineClamp",
    "truncate",
    "gradient",
    "inline",
    "inherit",
    "underline",
    "strikethrough",
    "italic",
    "classNames",
    "styles",
    "unstyled",
    "span"
  ]);
  const { classes, cx } = Text_styles_default({
    variant: variant2,
    color: color2,
    size: size3,
    lineClamp,
    truncate,
    inline: inline2,
    inherit,
    underline,
    strikethrough: strikethrough2,
    italic,
    weight,
    transform: transform2,
    align,
    gradient: gradient2
  }, { unstyled, name: "Text" });
  return import_react91.default.createElement(Box, __spreadValues35({
    ref,
    className: cx(classes.root, { [classes.gradient]: variant2 === "gradient" }, className),
    component: span ? "span" : "div"
  }, others));
});
_Text.displayName = "@mantine/core/Text";
var Text = createPolymorphicComponent(_Text);

// node_modules/@mantine/core/esm/Anchor/Anchor.styles.js
var useStyles8 = createStyles(() => ({
  root: {
    backgroundColor: "transparent",
    cursor: "pointer",
    padding: 0,
    border: 0
  }
}));
var Anchor_styles_default = useStyles8;

// node_modules/@mantine/core/esm/Anchor/Anchor.js
var __defProp36 = Object.defineProperty;
var __getOwnPropSymbols37 = Object.getOwnPropertySymbols;
var __hasOwnProp37 = Object.prototype.hasOwnProperty;
var __propIsEnum37 = Object.prototype.propertyIsEnumerable;
var __defNormalProp36 = (obj, key2, value) => key2 in obj ? __defProp36(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues36 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp37.call(b2, prop))
      __defNormalProp36(a2, prop, b2[prop]);
  if (__getOwnPropSymbols37)
    for (var prop of __getOwnPropSymbols37(b2)) {
      if (__propIsEnum37.call(b2, prop))
        __defNormalProp36(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest21 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp37.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols37)
    for (var prop of __getOwnPropSymbols37(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum37.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps13 = {};
var _Anchor = (0, import_react92.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Anchor", defaultProps13, props), { component, className, unstyled } = _a, others = __objRest21(_a, ["component", "className", "unstyled"]);
  const { classes, cx } = Anchor_styles_default(null, { name: "Anchor", unstyled });
  const buttonProps = component === "button" ? { type: "button" } : null;
  return import_react92.default.createElement(Text, __spreadValues36(__spreadValues36({
    component: component || "a",
    variant: "link",
    ref,
    className: cx(classes.root, className)
  }, buttonProps), others));
});
_Anchor.displayName = "@mantine/core/Anchor";
var Anchor = createPolymorphicComponent(_Anchor);

// node_modules/@mantine/core/esm/AppShell/Navbar/Navbar.js
var import_react96 = __toESM(require_react());

// node_modules/@mantine/core/esm/AppShell/HorizontalSection/HorizontalSection.js
var import_react94 = __toESM(require_react());

// node_modules/@mantine/core/esm/AppShell/AppShell.context.js
var import_react93 = __toESM(require_react());
var AppShellContext = (0, import_react93.createContext)({
  zIndex: 1e3,
  fixed: false,
  layout: "default"
});
var AppShellProvider = AppShellContext.Provider;
function useAppShellContext() {
  return (0, import_react93.useContext)(AppShellContext);
}

// node_modules/@mantine/core/esm/AppShell/HorizontalSection/get-sorted-breakpoints/get-sorted-breakpoints.js
function getSortedBreakpoints(breakpoints, theme) {
  if (!breakpoints) {
    return [];
  }
  const values2 = Object.keys(breakpoints).filter((breakpoint) => breakpoint !== "base").map((breakpoint) => [
    theme.fn.size({ size: breakpoint, sizes: theme.breakpoints }),
    breakpoints[breakpoint]
  ]);
  values2.sort((a2, b2) => a2[0] - b2[0]);
  return values2;
}

// node_modules/@mantine/core/esm/AppShell/HorizontalSection/HorizontalSection.styles.js
var __defProp37 = Object.defineProperty;
var __defProps15 = Object.defineProperties;
var __getOwnPropDescs15 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols38 = Object.getOwnPropertySymbols;
var __hasOwnProp38 = Object.prototype.hasOwnProperty;
var __propIsEnum38 = Object.prototype.propertyIsEnumerable;
var __defNormalProp37 = (obj, key2, value) => key2 in obj ? __defProp37(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues37 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp38.call(b2, prop))
      __defNormalProp37(a2, prop, b2[prop]);
  if (__getOwnPropSymbols38)
    for (var prop of __getOwnPropSymbols38(b2)) {
      if (__propIsEnum38.call(b2, prop))
        __defNormalProp37(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps15 = (a2, b2) => __defProps15(a2, __getOwnPropDescs15(b2));
var useStyles9 = createStyles((theme, {
  height,
  width,
  fixed,
  position: position5,
  hiddenBreakpoint,
  zIndex,
  section,
  withBorder,
  layout
}) => {
  const breakpoints = typeof width === "object" && width !== null ? getSortedBreakpoints(width, theme).reduce((acc, [breakpoint, breakpointSize]) => {
    acc[`@media (min-width: ${breakpoint}px)`] = {
      width: breakpointSize,
      minWidth: breakpointSize
    };
    return acc;
  }, {}) : null;
  const borderStyles = withBorder ? {
    [section === "navbar" ? "borderRight" : "borderLeft"]: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[2]}`
  } : {};
  return {
    root: __spreadProps15(__spreadValues37(__spreadValues37(__spreadProps15(__spreadValues37(__spreadValues37({}, theme.fn.fontStyles()), position5), {
      top: layout === "alt" ? 0 : (position5 == null ? void 0 : position5.top) || "var(--mantine-header-height)",
      bottom: 0,
      zIndex,
      height: height || (layout === "alt" ? "auto" : "calc(100vh - var(--mantine-header-height, 0px) - var(--mantine-footer-height, 0px))"),
      width: (width == null ? void 0 : width.base) || "100%",
      position: fixed ? "fixed" : "static",
      boxSizing: "border-box",
      display: "flex",
      flexDirection: "column",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white
    }), borderStyles), breakpoints), {
      "&[data-hidden]": {
        [`@media (max-width: ${theme.fn.size({
          size: hiddenBreakpoint,
          sizes: theme.breakpoints
        }) - 1}px)`]: {
          display: "none"
        }
      }
    })
  };
});
var HorizontalSection_styles_default = useStyles9;

// node_modules/@mantine/core/esm/AppShell/HorizontalSection/HorizontalSection.js
var __defProp38 = Object.defineProperty;
var __getOwnPropSymbols39 = Object.getOwnPropertySymbols;
var __hasOwnProp39 = Object.prototype.hasOwnProperty;
var __propIsEnum39 = Object.prototype.propertyIsEnumerable;
var __defNormalProp38 = (obj, key2, value) => key2 in obj ? __defProp38(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues38 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp39.call(b2, prop))
      __defNormalProp38(a2, prop, b2[prop]);
  if (__getOwnPropSymbols39)
    for (var prop of __getOwnPropSymbols39(b2)) {
      if (__propIsEnum39.call(b2, prop))
        __defNormalProp38(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest22 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp39.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols39)
    for (var prop of __getOwnPropSymbols39(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum39.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var HorizontalSection = (0, import_react94.forwardRef)((_a, ref) => {
  var _b = _a, {
    width,
    height,
    fixed = false,
    position: position5,
    zIndex,
    hiddenBreakpoint = "md",
    hidden: hidden3 = false,
    withBorder = true,
    className,
    classNames,
    styles: styles2,
    children,
    section,
    __staticSelector,
    unstyled
  } = _b, others = __objRest22(_b, [
    "width",
    "height",
    "fixed",
    "position",
    "zIndex",
    "hiddenBreakpoint",
    "hidden",
    "withBorder",
    "className",
    "classNames",
    "styles",
    "children",
    "section",
    "__staticSelector",
    "unstyled"
  ]);
  const ctx = useAppShellContext();
  const { classes, cx, theme } = HorizontalSection_styles_default({
    width,
    height,
    fixed: ctx.fixed || fixed,
    position: position5,
    hiddenBreakpoint,
    zIndex: zIndex || ctx.zIndex || getDefaultZIndex("app"),
    section,
    withBorder,
    layout: ctx.layout
  }, { classNames, styles: styles2, name: __staticSelector, unstyled });
  const breakpoints = getSortedBreakpoints(width, theme).reduce((acc, [breakpoint, breakpointSize]) => {
    acc[`@media (min-width: ${breakpoint}px)`] = {
      [`--mantine-${section}-width`]: `${breakpointSize}px`
    };
    return acc;
  }, {});
  return import_react94.default.createElement(Box, __spreadValues38({
    component: section === "navbar" ? "nav" : "aside",
    ref,
    "data-hidden": hidden3 || void 0,
    className: cx(classes.root, className)
  }, others), children, import_react94.default.createElement(Global2, {
    styles: () => ({
      ":root": __spreadValues38({
        [`--mantine-${section}-width`]: (width == null ? void 0 : width.base) ? `${width.base}px` : "0px"
      }, breakpoints)
    })
  }));
});
HorizontalSection.displayName = "@mantine/core/HorizontalSection";

// node_modules/@mantine/core/esm/AppShell/HorizontalSection/Section/Section.js
var import_react95 = __toESM(require_react());
var __defProp39 = Object.defineProperty;
var __getOwnPropSymbols40 = Object.getOwnPropertySymbols;
var __hasOwnProp40 = Object.prototype.hasOwnProperty;
var __propIsEnum40 = Object.prototype.propertyIsEnumerable;
var __defNormalProp39 = (obj, key2, value) => key2 in obj ? __defProp39(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues39 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp40.call(b2, prop))
      __defNormalProp39(a2, prop, b2[prop]);
  if (__getOwnPropSymbols40)
    for (var prop of __getOwnPropSymbols40(b2)) {
      if (__propIsEnum40.call(b2, prop))
        __defNormalProp39(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest23 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp40.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols40)
    for (var prop of __getOwnPropSymbols40(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum40.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var _Section = (0, import_react95.forwardRef)((_a, ref) => {
  var _b = _a, { children, grow = false, sx } = _b, others = __objRest23(_b, ["children", "grow", "sx"]);
  return import_react95.default.createElement(Box, __spreadValues39({
    ref,
    sx: [{ flex: grow ? 1 : 0, boxSizing: "border-box" }, ...packSx(sx)]
  }, others), children);
});
_Section.displayName = "@mantine/core/Section";
var Section = createPolymorphicComponent(_Section);

// node_modules/@mantine/core/esm/AppShell/Navbar/Navbar.js
var __defProp40 = Object.defineProperty;
var __getOwnPropSymbols41 = Object.getOwnPropertySymbols;
var __hasOwnProp41 = Object.prototype.hasOwnProperty;
var __propIsEnum41 = Object.prototype.propertyIsEnumerable;
var __defNormalProp40 = (obj, key2, value) => key2 in obj ? __defProp40(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues40 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp41.call(b2, prop))
      __defNormalProp40(a2, prop, b2[prop]);
  if (__getOwnPropSymbols41)
    for (var prop of __getOwnPropSymbols41(b2)) {
      if (__propIsEnum41.call(b2, prop))
        __defNormalProp40(a2, prop, b2[prop]);
    }
  return a2;
};
var defaultProps14 = {
  fixed: false,
  position: { top: 0, left: 0 },
  hiddenBreakpoint: "md",
  hidden: false
};
var Navbar = (0, import_react96.forwardRef)((props, ref) => {
  const _props = useComponentDefaultProps("Navbar", defaultProps14, props);
  return import_react96.default.createElement(HorizontalSection, __spreadValues40({
    section: "navbar",
    __staticSelector: "Navbar",
    ref
  }, _props));
});
Navbar.Section = Section;
Navbar.displayName = "@mantine/core/Navbar";

// node_modules/@mantine/core/esm/AppShell/Header/Header.js
var import_react98 = __toESM(require_react());

// node_modules/@mantine/core/esm/AppShell/VerticalSection/VerticalSection.js
var import_react97 = __toESM(require_react());

// node_modules/@mantine/core/esm/AppShell/VerticalSection/VerticalSection.styles.js
var __defProp41 = Object.defineProperty;
var __defProps16 = Object.defineProperties;
var __getOwnPropDescs16 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols42 = Object.getOwnPropertySymbols;
var __hasOwnProp42 = Object.prototype.hasOwnProperty;
var __propIsEnum42 = Object.prototype.propertyIsEnumerable;
var __defNormalProp41 = (obj, key2, value) => key2 in obj ? __defProp41(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues41 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp42.call(b2, prop))
      __defNormalProp41(a2, prop, b2[prop]);
  if (__getOwnPropSymbols42)
    for (var prop of __getOwnPropSymbols42(b2)) {
      if (__propIsEnum42.call(b2, prop))
        __defNormalProp41(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps16 = (a2, b2) => __defProps16(a2, __getOwnPropDescs16(b2));
var useStyles10 = createStyles((theme, { height, fixed, position: position5, zIndex, borderPosition, layout }) => {
  const breakpoints = typeof height === "object" && height !== null ? getSortedBreakpoints(height, theme).reduce((acc, [breakpoint, breakpointSize]) => {
    acc[`@media (min-width: ${breakpoint}px)`] = {
      height: breakpointSize,
      minHeight: breakpointSize
    };
    return acc;
  }, {}) : null;
  return {
    root: __spreadProps16(__spreadValues41(__spreadProps16(__spreadValues41(__spreadValues41({}, theme.fn.fontStyles()), position5), {
      zIndex,
      left: layout === "alt" ? "var(--mantine-navbar-width, 0)" : 0,
      right: layout === "alt" ? "var(--mantine-aside-width, 0)" : 0,
      height: typeof height === "object" ? (height == null ? void 0 : height.base) || "100%" : height,
      maxHeight: typeof height === "object" ? (height == null ? void 0 : height.base) || "100%" : height,
      position: fixed ? "fixed" : "static",
      boxSizing: "border-box",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white
    }), breakpoints), {
      borderBottom: borderPosition === "bottom" ? `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[2]}` : void 0,
      borderTop: borderPosition === "top" ? `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[2]}` : void 0
    })
  };
});
var VerticalSection_styles_default = useStyles10;

// node_modules/@mantine/core/esm/AppShell/VerticalSection/VerticalSection.js
var __defProp42 = Object.defineProperty;
var __getOwnPropSymbols43 = Object.getOwnPropertySymbols;
var __hasOwnProp43 = Object.prototype.hasOwnProperty;
var __propIsEnum43 = Object.prototype.propertyIsEnumerable;
var __defNormalProp42 = (obj, key2, value) => key2 in obj ? __defProp42(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues42 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp43.call(b2, prop))
      __defNormalProp42(a2, prop, b2[prop]);
  if (__getOwnPropSymbols43)
    for (var prop of __getOwnPropSymbols43(b2)) {
      if (__propIsEnum43.call(b2, prop))
        __defNormalProp42(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest24 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp43.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols43)
    for (var prop of __getOwnPropSymbols43(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum43.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var VerticalSection = (0, import_react97.forwardRef)((_a, ref) => {
  var _b = _a, {
    children,
    className,
    classNames,
    styles: styles2,
    height,
    fixed = false,
    withBorder = true,
    position: position5,
    zIndex,
    section,
    unstyled,
    __staticSelector
  } = _b, others = __objRest24(_b, [
    "children",
    "className",
    "classNames",
    "styles",
    "height",
    "fixed",
    "withBorder",
    "position",
    "zIndex",
    "section",
    "unstyled",
    "__staticSelector"
  ]);
  const ctx = useAppShellContext();
  const _zIndex = zIndex || ctx.zIndex || getDefaultZIndex("app");
  const { classes, cx, theme } = VerticalSection_styles_default({
    height,
    fixed: ctx.fixed || fixed,
    position: position5,
    zIndex: typeof _zIndex === "number" && ctx.layout === "default" ? _zIndex + 1 : _zIndex,
    layout: ctx.layout,
    borderPosition: withBorder ? section === "header" ? "bottom" : "top" : "none"
  }, { name: __staticSelector, classNames, styles: styles2, unstyled });
  const breakpoints = typeof height === "object" && height !== null ? getSortedBreakpoints(height, theme).reduce((acc, [breakpoint, breakpointSize]) => {
    acc[`@media (min-width: ${breakpoint}px)`] = {
      [`--mantine-${section}-height`]: `${breakpointSize}px`
    };
    return acc;
  }, {}) : null;
  return import_react97.default.createElement(Box, __spreadValues42({
    component: section === "header" ? "header" : "footer",
    className: cx(classes.root, className),
    ref
  }, others), children, import_react97.default.createElement(Global2, {
    styles: () => ({
      ":root": __spreadValues42({
        [`--mantine-${section}-height`]: typeof height === "object" ? `${height == null ? void 0 : height.base}px` || "100%" : `${height}px`
      }, breakpoints)
    })
  }));
});
VerticalSection.displayName = "@mantine/core/VerticalSection";

// node_modules/@mantine/core/esm/AppShell/Header/Header.js
var __defProp43 = Object.defineProperty;
var __defProps17 = Object.defineProperties;
var __getOwnPropDescs17 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols44 = Object.getOwnPropertySymbols;
var __hasOwnProp44 = Object.prototype.hasOwnProperty;
var __propIsEnum44 = Object.prototype.propertyIsEnumerable;
var __defNormalProp43 = (obj, key2, value) => key2 in obj ? __defProp43(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues43 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp44.call(b2, prop))
      __defNormalProp43(a2, prop, b2[prop]);
  if (__getOwnPropSymbols44)
    for (var prop of __getOwnPropSymbols44(b2)) {
      if (__propIsEnum44.call(b2, prop))
        __defNormalProp43(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps17 = (a2, b2) => __defProps17(a2, __getOwnPropDescs17(b2));
var defaultProps15 = {
  fixed: false,
  position: { top: 0, left: 0, right: 0 }
};
var Header = (0, import_react98.forwardRef)((props, ref) => {
  const _props = useComponentDefaultProps("Header", defaultProps15, props);
  return import_react98.default.createElement(VerticalSection, __spreadProps17(__spreadValues43({
    section: "header",
    __staticSelector: "Header"
  }, _props), {
    ref
  }));
});
Header.displayName = "@mantine/core/Header";

// node_modules/@mantine/core/esm/AppShell/Aside/Aside.js
var import_react99 = __toESM(require_react());
var __defProp44 = Object.defineProperty;
var __getOwnPropSymbols45 = Object.getOwnPropertySymbols;
var __hasOwnProp45 = Object.prototype.hasOwnProperty;
var __propIsEnum45 = Object.prototype.propertyIsEnumerable;
var __defNormalProp44 = (obj, key2, value) => key2 in obj ? __defProp44(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues44 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp45.call(b2, prop))
      __defNormalProp44(a2, prop, b2[prop]);
  if (__getOwnPropSymbols45)
    for (var prop of __getOwnPropSymbols45(b2)) {
      if (__propIsEnum45.call(b2, prop))
        __defNormalProp44(a2, prop, b2[prop]);
    }
  return a2;
};
var defaultProps16 = {
  fixed: false,
  position: { top: 0, right: 0 },
  hiddenBreakpoint: "md",
  hidden: false
};
var Aside = (0, import_react99.forwardRef)((props, ref) => {
  const _props = useComponentDefaultProps("Aside", defaultProps16, props);
  return import_react99.default.createElement(HorizontalSection, __spreadValues44({
    section: "aside",
    __staticSelector: "Aside",
    ref
  }, _props));
});
Aside.Section = Section;
Aside.displayName = "@mantine/core/Aside";

// node_modules/@mantine/core/esm/AppShell/Footer/Footer.js
var import_react100 = __toESM(require_react());
var __defProp45 = Object.defineProperty;
var __defProps18 = Object.defineProperties;
var __getOwnPropDescs18 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols46 = Object.getOwnPropertySymbols;
var __hasOwnProp46 = Object.prototype.hasOwnProperty;
var __propIsEnum46 = Object.prototype.propertyIsEnumerable;
var __defNormalProp45 = (obj, key2, value) => key2 in obj ? __defProp45(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues45 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp46.call(b2, prop))
      __defNormalProp45(a2, prop, b2[prop]);
  if (__getOwnPropSymbols46)
    for (var prop of __getOwnPropSymbols46(b2)) {
      if (__propIsEnum46.call(b2, prop))
        __defNormalProp45(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps18 = (a2, b2) => __defProps18(a2, __getOwnPropDescs18(b2));
var defaultProps17 = {
  fixed: false,
  position: { bottom: 0, left: 0, right: 0 }
};
var Footer = (0, import_react100.forwardRef)((props, ref) => {
  const _props = useComponentDefaultProps("Footer", defaultProps17, props);
  return import_react100.default.createElement(VerticalSection, __spreadProps18(__spreadValues45({
    section: "footer",
    __staticSelector: "Footer"
  }, _props), {
    ref
  }));
});
Footer.displayName = "@mantine/core/Footer";

// node_modules/@mantine/core/esm/AppShell/AppShell.js
var import_react101 = __toESM(require_react());

// node_modules/@mantine/core/esm/AppShell/AppShell.styles.js
var __defProp46 = Object.defineProperty;
var __getOwnPropSymbols47 = Object.getOwnPropertySymbols;
var __hasOwnProp47 = Object.prototype.hasOwnProperty;
var __propIsEnum47 = Object.prototype.propertyIsEnumerable;
var __defNormalProp46 = (obj, key2, value) => key2 in obj ? __defProp46(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues46 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp47.call(b2, prop))
      __defNormalProp46(a2, prop, b2[prop]);
  if (__getOwnPropSymbols47)
    for (var prop of __getOwnPropSymbols47(b2)) {
      if (__propIsEnum47.call(b2, prop))
        __defNormalProp46(a2, prop, b2[prop]);
    }
  return a2;
};
function getPositionStyles(props, theme) {
  const padding2 = theme.fn.size({ size: props.padding, sizes: theme.spacing });
  const navbarOffset = props.navbarOffsetBreakpoint ? theme.fn.size({ size: props.navbarOffsetBreakpoint, sizes: theme.breakpoints }) : null;
  const asideOffset = props.asideOffsetBreakpoint ? theme.fn.size({ size: props.asideOffsetBreakpoint, sizes: theme.breakpoints }) : null;
  if (!props.fixed) {
    return { padding: padding2 };
  }
  return {
    minHeight: "100vh",
    paddingTop: `calc(var(--mantine-header-height, 0px) + ${padding2}px)`,
    paddingBottom: `calc(var(--mantine-footer-height, 0px) + ${padding2}px)`,
    paddingLeft: `calc(var(--mantine-navbar-width, 0px) + ${padding2}px)`,
    paddingRight: `calc(var(--mantine-aside-width, 0px) + ${padding2}px)`,
    [`@media (max-width: ${navbarOffset - 1}px)`]: {
      paddingLeft: padding2
    },
    [`@media (max-width: ${asideOffset - 1}px)`]: {
      paddingRight: padding2
    }
  };
}
var useStyles11 = createStyles((theme, props) => ({
  root: {
    boxSizing: "border-box"
  },
  body: {
    display: "flex",
    boxSizing: "border-box"
  },
  main: __spreadValues46({
    flex: 1,
    width: "100vw",
    boxSizing: "border-box"
  }, getPositionStyles(props, theme))
}));
var AppShell_styles_default = useStyles11;

// node_modules/@mantine/core/esm/AppShell/AppShell.js
var __defProp47 = Object.defineProperty;
var __getOwnPropSymbols48 = Object.getOwnPropertySymbols;
var __hasOwnProp48 = Object.prototype.hasOwnProperty;
var __propIsEnum48 = Object.prototype.propertyIsEnumerable;
var __defNormalProp47 = (obj, key2, value) => key2 in obj ? __defProp47(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues47 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp48.call(b2, prop))
      __defNormalProp47(a2, prop, b2[prop]);
  if (__getOwnPropSymbols48)
    for (var prop of __getOwnPropSymbols48(b2)) {
      if (__propIsEnum48.call(b2, prop))
        __defNormalProp47(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest25 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp48.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols48)
    for (var prop of __getOwnPropSymbols48(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum48.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps18 = {
  fixed: true,
  padding: "md"
};
var AppShell = (0, import_react101.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("AppShell", defaultProps18, props), {
    children,
    navbar,
    header,
    footer: footer2,
    aside,
    fixed,
    zIndex,
    padding: padding2,
    navbarOffsetBreakpoint,
    asideOffsetBreakpoint,
    className,
    styles: styles2,
    classNames,
    unstyled,
    hidden: hidden3,
    layout
  } = _a, others = __objRest25(_a, [
    "children",
    "navbar",
    "header",
    "footer",
    "aside",
    "fixed",
    "zIndex",
    "padding",
    "navbarOffsetBreakpoint",
    "asideOffsetBreakpoint",
    "className",
    "styles",
    "classNames",
    "unstyled",
    "hidden",
    "layout"
  ]);
  const { classes, cx } = AppShell_styles_default({ padding: padding2, fixed, navbarOffsetBreakpoint, asideOffsetBreakpoint }, { styles: styles2, classNames, unstyled, name: "AppShell" });
  if (hidden3) {
    return import_react101.default.createElement(import_react101.default.Fragment, null, children);
  }
  return import_react101.default.createElement(AppShellProvider, {
    value: { fixed, zIndex, layout }
  }, import_react101.default.createElement(Box, __spreadValues47({
    className: cx(classes.root, className),
    ref
  }, others), header, import_react101.default.createElement("div", {
    className: classes.body
  }, navbar, import_react101.default.createElement("main", {
    className: classes.main
  }, children), aside), footer2));
});
AppShell.displayName = "@mantine/core/AppShell";

// node_modules/@mantine/core/esm/AspectRatio/AspectRatio.js
var import_react102 = __toESM(require_react());

// node_modules/@mantine/core/esm/AspectRatio/AspectRatio.styles.js
var useStyles12 = createStyles((_theme, { ratio }) => ({
  root: {
    position: "relative",
    maxWidth: "100%",
    "&::before": {
      content: '""',
      height: 0,
      display: "block",
      paddingBottom: `${1 / ratio * 100}%`
    },
    "&::after": {
      content: '""',
      display: "table",
      clear: "both"
    },
    "& > *:not(style)": {
      overflow: "hidden",
      position: "absolute",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      width: "100%",
      height: "100%"
    },
    "& > img, & > video": {
      objectFit: "cover"
    }
  }
}));
var AspectRatio_styles_default = useStyles12;

// node_modules/@mantine/core/esm/AspectRatio/AspectRatio.js
var __defProp48 = Object.defineProperty;
var __getOwnPropSymbols49 = Object.getOwnPropertySymbols;
var __hasOwnProp49 = Object.prototype.hasOwnProperty;
var __propIsEnum49 = Object.prototype.propertyIsEnumerable;
var __defNormalProp48 = (obj, key2, value) => key2 in obj ? __defProp48(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues48 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp49.call(b2, prop))
      __defNormalProp48(a2, prop, b2[prop]);
  if (__getOwnPropSymbols49)
    for (var prop of __getOwnPropSymbols49(b2)) {
      if (__propIsEnum49.call(b2, prop))
        __defNormalProp48(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest26 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp49.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols49)
    for (var prop of __getOwnPropSymbols49(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum49.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var AspectRatio = (0, import_react102.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("AspectRatio", {}, props), { className, ratio, children, unstyled } = _a, others = __objRest26(_a, ["className", "ratio", "children", "unstyled"]);
  const { classes, cx } = AspectRatio_styles_default({ ratio }, { name: "AspectRatio", unstyled });
  return import_react102.default.createElement(Box, __spreadValues48({
    ref,
    className: cx(classes.root, className)
  }, others), children);
});
AspectRatio.displayName = "@mantine/core/AspectRatio";

// node_modules/@mantine/core/esm/Autocomplete/Autocomplete.js
var import_react137 = __toESM(require_react());

// node_modules/@mantine/core/esm/Select/SelectItems/SelectItems.js
var import_react104 = __toESM(require_react());

// node_modules/@mantine/core/esm/Divider/Divider.js
var import_react103 = __toESM(require_react());

// node_modules/@mantine/core/esm/Divider/Divider.styles.js
var sizes3 = {
  xs: 1,
  sm: 2,
  md: 3,
  lg: 4,
  xl: 5
};
function getColor(theme, color2) {
  const themeColor2 = theme.fn.variant({ variant: "outline", color: color2 }).border;
  return typeof color2 === "string" && (color2 in theme.colors || color2.split(".")[0] in theme.colors) ? themeColor2 : color2 === void 0 ? theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4] : color2;
}
var useStyles13 = createStyles((theme, { size: size3, variant: variant2, color: color2 }) => ({
  root: {},
  withLabel: {
    borderTop: "0 !important"
  },
  left: {
    "&::before": {
      display: "none"
    }
  },
  right: {
    "&::after": {
      display: "none"
    }
  },
  label: {
    display: "flex",
    alignItems: "center",
    "&::before": {
      content: '""',
      flex: 1,
      height: 1,
      borderTop: `${theme.fn.size({ size: size3, sizes: sizes3 })}px ${variant2} ${getColor(theme, color2)}`,
      marginRight: theme.spacing.xs
    },
    "&::after": {
      content: '""',
      flex: 1,
      borderTop: `${theme.fn.size({ size: size3, sizes: sizes3 })}px ${variant2} ${getColor(theme, color2)}`,
      marginLeft: theme.spacing.xs
    }
  },
  labelDefaultStyles: {
    color: color2 === "dark" ? theme.colors.dark[1] : theme.fn.themeColor(color2, theme.colorScheme === "dark" ? 5 : theme.fn.primaryShade(), false)
  },
  horizontal: {
    border: 0,
    borderTopWidth: theme.fn.size({ size: size3, sizes: sizes3 }),
    borderTopColor: getColor(theme, color2),
    borderTopStyle: variant2,
    margin: 0
  },
  vertical: {
    border: 0,
    alignSelf: "stretch",
    height: "auto",
    borderLeftWidth: theme.fn.size({ size: size3, sizes: sizes3 }),
    borderLeftColor: getColor(theme, color2),
    borderLeftStyle: variant2
  }
}));
var Divider_styles_default = useStyles13;

// node_modules/@mantine/core/esm/Divider/Divider.js
var __defProp49 = Object.defineProperty;
var __defProps19 = Object.defineProperties;
var __getOwnPropDescs19 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols50 = Object.getOwnPropertySymbols;
var __hasOwnProp50 = Object.prototype.hasOwnProperty;
var __propIsEnum50 = Object.prototype.propertyIsEnumerable;
var __defNormalProp49 = (obj, key2, value) => key2 in obj ? __defProp49(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues49 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp50.call(b2, prop))
      __defNormalProp49(a2, prop, b2[prop]);
  if (__getOwnPropSymbols50)
    for (var prop of __getOwnPropSymbols50(b2)) {
      if (__propIsEnum50.call(b2, prop))
        __defNormalProp49(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps19 = (a2, b2) => __defProps19(a2, __getOwnPropDescs19(b2));
var __objRest27 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp50.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols50)
    for (var prop of __getOwnPropSymbols50(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum50.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps19 = {
  orientation: "horizontal",
  size: "xs",
  labelPosition: "left",
  variant: "solid"
};
var Divider = (0, import_react103.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Divider", defaultProps19, props), {
    className,
    color: color2,
    orientation,
    size: size3,
    label,
    labelPosition,
    labelProps,
    variant: variant2,
    styles: styles2,
    classNames,
    unstyled
  } = _a, others = __objRest27(_a, [
    "className",
    "color",
    "orientation",
    "size",
    "label",
    "labelPosition",
    "labelProps",
    "variant",
    "styles",
    "classNames",
    "unstyled"
  ]);
  const { classes, cx } = Divider_styles_default({ color: color2, size: size3, variant: variant2 }, { classNames, styles: styles2, unstyled, name: "Divider" });
  const vertical = orientation === "vertical";
  const horizontal = orientation === "horizontal";
  const withLabel = !!label && horizontal;
  const useLabelDefaultStyles = !(labelProps == null ? void 0 : labelProps.color);
  return import_react103.default.createElement(Box, __spreadValues49({
    ref,
    className: cx(classes.root, {
      [classes.vertical]: vertical,
      [classes.horizontal]: horizontal,
      [classes.withLabel]: withLabel
    }, className),
    role: "separator"
  }, others), withLabel && import_react103.default.createElement(Text, __spreadProps19(__spreadValues49({}, labelProps), {
    size: (labelProps == null ? void 0 : labelProps.size) || "xs",
    sx: { marginTop: 2 },
    className: cx(classes.label, classes[labelPosition], {
      [classes.labelDefaultStyles]: useLabelDefaultStyles
    })
  }), label));
});
Divider.displayName = "@mantine/core/Divider";

// node_modules/@mantine/core/esm/Select/SelectItems/SelectItems.styles.js
var __defProp50 = Object.defineProperty;
var __defProps20 = Object.defineProperties;
var __getOwnPropDescs20 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols51 = Object.getOwnPropertySymbols;
var __hasOwnProp51 = Object.prototype.hasOwnProperty;
var __propIsEnum51 = Object.prototype.propertyIsEnumerable;
var __defNormalProp50 = (obj, key2, value) => key2 in obj ? __defProp50(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues50 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp51.call(b2, prop))
      __defNormalProp50(a2, prop, b2[prop]);
  if (__getOwnPropSymbols51)
    for (var prop of __getOwnPropSymbols51(b2)) {
      if (__propIsEnum51.call(b2, prop))
        __defNormalProp50(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps20 = (a2, b2) => __defProps20(a2, __getOwnPropDescs20(b2));
var useStyles14 = createStyles((theme, { size: size3 }) => ({
  item: __spreadProps20(__spreadValues50({}, theme.fn.fontStyles()), {
    boxSizing: "border-box",
    textAlign: "left",
    width: "100%",
    padding: `${theme.fn.size({ size: size3, sizes: theme.spacing }) / 1.5}px ${theme.fn.size({
      size: size3,
      sizes: theme.spacing
    })}px`,
    cursor: "pointer",
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    borderRadius: theme.fn.radius(),
    "&[data-hovered]": {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[1]
    },
    "&[data-selected]": __spreadValues50({
      backgroundColor: theme.fn.variant({ variant: "filled" }).background,
      color: theme.fn.variant({ variant: "filled" }).color
    }, theme.fn.hover({ backgroundColor: theme.fn.variant({ variant: "filled" }).hover })),
    "&[data-disabled]": {
      cursor: "default",
      color: theme.colors.dark[2]
    }
  }),
  nothingFound: {
    boxSizing: "border-box",
    color: theme.colors.gray[6],
    paddingTop: theme.fn.size({ size: size3, sizes: theme.spacing }) / 2,
    paddingBottom: theme.fn.size({ size: size3, sizes: theme.spacing }) / 2,
    textAlign: "center"
  },
  separator: {
    boxSizing: "border-box",
    textAlign: "left",
    width: "100%",
    padding: `${theme.fn.size({ size: size3, sizes: theme.spacing }) / 1.5}px ${theme.fn.size({
      size: size3,
      sizes: theme.spacing
    })}px`
  },
  separatorLabel: {
    color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
  }
}));
var SelectItems_styles_default = useStyles14;

// node_modules/@mantine/core/esm/Select/SelectItems/SelectItems.js
var __defProp51 = Object.defineProperty;
var __getOwnPropSymbols52 = Object.getOwnPropertySymbols;
var __hasOwnProp52 = Object.prototype.hasOwnProperty;
var __propIsEnum52 = Object.prototype.propertyIsEnumerable;
var __defNormalProp51 = (obj, key2, value) => key2 in obj ? __defProp51(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues51 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp52.call(b2, prop))
      __defNormalProp51(a2, prop, b2[prop]);
  if (__getOwnPropSymbols52)
    for (var prop of __getOwnPropSymbols52(b2)) {
      if (__propIsEnum52.call(b2, prop))
        __defNormalProp51(a2, prop, b2[prop]);
    }
  return a2;
};
function SelectItems({
  data,
  hovered,
  classNames,
  styles: styles2,
  isItemSelected,
  uuid,
  __staticSelector,
  onItemHover,
  onItemSelect,
  itemsRefs,
  itemComponent: Item3,
  size: size3,
  nothingFound,
  creatable,
  createLabel,
  unstyled
}) {
  const { classes } = SelectItems_styles_default({ size: size3 }, { classNames, styles: styles2, unstyled, name: __staticSelector });
  const unGroupedItems = [];
  const groupedItems = [];
  let creatableDataIndex = null;
  const constructItemComponent = (item, index7) => {
    const selected = typeof isItemSelected === "function" ? isItemSelected(item.value) : false;
    return import_react104.default.createElement(Item3, __spreadValues51({
      key: item.value,
      className: classes.item,
      "data-disabled": item.disabled || void 0,
      "data-hovered": !item.disabled && hovered === index7 || void 0,
      "data-selected": !item.disabled && selected || void 0,
      selected,
      onMouseEnter: () => onItemHover(index7),
      id: `${uuid}-${index7}`,
      role: "option",
      tabIndex: -1,
      "aria-selected": hovered === index7,
      ref: (node4) => {
        if (itemsRefs && itemsRefs.current) {
          itemsRefs.current[item.value] = node4;
        }
      },
      onMouseDown: !item.disabled ? (event) => {
        event.preventDefault();
        onItemSelect(item);
      } : null,
      disabled: item.disabled
    }, item));
  };
  let groupName = null;
  data.forEach((item, index7) => {
    if (item.creatable) {
      creatableDataIndex = index7;
    } else if (!item.group) {
      unGroupedItems.push(constructItemComponent(item, index7));
    } else {
      if (groupName !== item.group) {
        groupName = item.group;
        groupedItems.push(import_react104.default.createElement("div", {
          className: classes.separator,
          key: `__mantine-divider-${index7}`
        }, import_react104.default.createElement(Divider, {
          classNames: { label: classes.separatorLabel },
          label: item.group
        })));
      }
      groupedItems.push(constructItemComponent(item, index7));
    }
  });
  if (creatable) {
    const creatableDataItem = data[creatableDataIndex];
    unGroupedItems.push(import_react104.default.createElement("div", {
      key: randomId2(),
      className: classes.item,
      "data-hovered": hovered === creatableDataIndex || void 0,
      onMouseEnter: () => onItemHover(creatableDataIndex),
      onMouseDown: (event) => {
        event.preventDefault();
        onItemSelect(creatableDataItem);
      },
      tabIndex: -1,
      ref: (node4) => {
        if (itemsRefs && itemsRefs.current) {
          itemsRefs.current[creatableDataItem.value] = node4;
        }
      }
    }, createLabel));
  }
  if (groupedItems.length > 0 && unGroupedItems.length > 0) {
    unGroupedItems.unshift(import_react104.default.createElement("div", {
      className: classes.separator,
      key: "empty-group-separator"
    }, import_react104.default.createElement(Divider, null)));
  }
  return groupedItems.length > 0 || unGroupedItems.length > 0 ? import_react104.default.createElement(import_react104.default.Fragment, null, groupedItems, unGroupedItems) : import_react104.default.createElement(Text, {
    size: size3,
    unstyled,
    className: classes.nothingFound
  }, nothingFound);
}
SelectItems.displayName = "@mantine/core/SelectItems";

// node_modules/@mantine/core/esm/Select/DefaultItem/DefaultItem.js
var import_react105 = __toESM(require_react());
var __defProp52 = Object.defineProperty;
var __getOwnPropSymbols53 = Object.getOwnPropertySymbols;
var __hasOwnProp53 = Object.prototype.hasOwnProperty;
var __propIsEnum53 = Object.prototype.propertyIsEnumerable;
var __defNormalProp52 = (obj, key2, value) => key2 in obj ? __defProp52(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues52 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp53.call(b2, prop))
      __defNormalProp52(a2, prop, b2[prop]);
  if (__getOwnPropSymbols53)
    for (var prop of __getOwnPropSymbols53(b2)) {
      if (__propIsEnum53.call(b2, prop))
        __defNormalProp52(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest28 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp53.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols53)
    for (var prop of __getOwnPropSymbols53(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum53.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var DefaultItem = (0, import_react105.forwardRef)((_a, ref) => {
  var _b = _a, { label, value } = _b, others = __objRest28(_b, ["label", "value"]);
  return import_react105.default.createElement("div", __spreadValues52({
    ref
  }, others), label || value);
});
DefaultItem.displayName = "@mantine/core/DefaultItem";

// node_modules/@mantine/core/esm/Select/SelectPopover/SelectPopover.js
var import_react129 = __toESM(require_react());

// node_modules/@mantine/core/esm/Select/SelectScrollArea/SelectScrollArea.js
var import_react116 = __toESM(require_react());

// node_modules/@mantine/core/esm/ScrollArea/ScrollArea.js
var import_react115 = __toESM(require_react());

// node_modules/@radix-ui/react-scroll-area/dist/index.module.js
var import_react114 = __toESM(require_react());

// node_modules/@radix-ui/react-primitive/dist/index.module.js
var import_react108 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());

// node_modules/@radix-ui/react-slot/dist/index.module.js
var import_react107 = __toESM(require_react());

// node_modules/@radix-ui/react-compose-refs/dist/index.module.js
var import_react106 = __toESM(require_react());
function $6ed0406888f73fc4$var$setRef(ref, value) {
  if (typeof ref === "function")
    ref(value);
  else if (ref !== null && ref !== void 0)
    ref.current = value;
}
function $6ed0406888f73fc4$export$43e446d32b3d21af(...refs) {
  return (node4) => refs.forEach(
    (ref) => $6ed0406888f73fc4$var$setRef(ref, node4)
  );
}
function $6ed0406888f73fc4$export$c7b2cbe3552a0d05(...refs) {
  return (0, import_react106.useCallback)($6ed0406888f73fc4$export$43e446d32b3d21af(...refs), refs);
}

// node_modules/@radix-ui/react-slot/dist/index.module.js
var $5e63c961fc1ce211$export$8c6ed5c666ac1360 = (0, import_react107.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  const childrenArray = import_react107.Children.toArray(children);
  const slottable = childrenArray.find($5e63c961fc1ce211$var$isSlottable);
  if (slottable) {
    const newElement = slottable.props.children;
    const newChildren = childrenArray.map((child) => {
      if (child === slottable) {
        if (import_react107.Children.count(newElement) > 1)
          return import_react107.Children.only(null);
        return (0, import_react107.isValidElement)(newElement) ? newElement.props.children : null;
      } else
        return child;
    });
    return (0, import_react107.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
      ref: forwardedRef
    }), (0, import_react107.isValidElement)(newElement) ? (0, import_react107.cloneElement)(newElement, void 0, newChildren) : null);
  }
  return (0, import_react107.createElement)($5e63c961fc1ce211$var$SlotClone, _extends({}, slotProps, {
    ref: forwardedRef
  }), children);
});
$5e63c961fc1ce211$export$8c6ed5c666ac1360.displayName = "Slot";
var $5e63c961fc1ce211$var$SlotClone = (0, import_react107.forwardRef)((props, forwardedRef) => {
  const { children, ...slotProps } = props;
  if ((0, import_react107.isValidElement)(children))
    return (0, import_react107.cloneElement)(children, {
      ...$5e63c961fc1ce211$var$mergeProps(slotProps, children.props),
      ref: $6ed0406888f73fc4$export$43e446d32b3d21af(forwardedRef, children.ref)
    });
  return import_react107.Children.count(children) > 1 ? import_react107.Children.only(null) : null;
});
$5e63c961fc1ce211$var$SlotClone.displayName = "SlotClone";
var $5e63c961fc1ce211$export$d9f1ccf0bdb05d45 = ({ children }) => {
  return (0, import_react107.createElement)(import_react107.Fragment, null, children);
};
function $5e63c961fc1ce211$var$isSlottable(child) {
  return (0, import_react107.isValidElement)(child) && child.type === $5e63c961fc1ce211$export$d9f1ccf0bdb05d45;
}
function $5e63c961fc1ce211$var$mergeProps(slotProps, childProps) {
  const overrideProps = {
    ...childProps
  };
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue)
        overrideProps[propName] = (...args2) => {
          childPropValue(...args2);
          slotPropValue(...args2);
        };
      else if (slotPropValue)
        overrideProps[propName] = slotPropValue;
    } else if (propName === "style")
      overrideProps[propName] = {
        ...slotPropValue,
        ...childPropValue
      };
    else if (propName === "className")
      overrideProps[propName] = [
        slotPropValue,
        childPropValue
      ].filter(Boolean).join(" ");
  }
  return {
    ...slotProps,
    ...overrideProps
  };
}

// node_modules/@radix-ui/react-primitive/dist/index.module.js
var $8927f6f2acc4f386$var$NODES = [
  "a",
  "button",
  "div",
  "h2",
  "h3",
  "img",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var $8927f6f2acc4f386$export$250ffa63cdc0d034 = $8927f6f2acc4f386$var$NODES.reduce((primitive, node4) => {
  const Node3 = (0, import_react108.forwardRef)((props, forwardedRef) => {
    const { asChild, ...primitiveProps } = props;
    const Comp = asChild ? $5e63c961fc1ce211$export$8c6ed5c666ac1360 : node4;
    (0, import_react108.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []);
    return (0, import_react108.createElement)(Comp, _extends({}, primitiveProps, {
      ref: forwardedRef
    }));
  });
  Node3.displayName = `Primitive.${node4}`;
  return {
    ...primitive,
    [node4]: Node3
  };
}, {});

// node_modules/@radix-ui/react-presence/dist/index.module.js
var import_react110 = __toESM(require_react());
var import_react_dom5 = __toESM(require_react_dom());

// node_modules/@radix-ui/react-use-layout-effect/dist/index.module.js
var import_react109 = __toESM(require_react());
var $9f79659886946c16$export$e5c5a5f917a5871c = Boolean(globalThis === null || globalThis === void 0 ? void 0 : globalThis.document) ? import_react109.useLayoutEffect : () => {
};

// node_modules/@radix-ui/react-presence/dist/index.module.js
function $fe963b355347cc68$export$3e6543de14f8614f(initialState, machine) {
  return (0, import_react110.useReducer)((state, event) => {
    const nextState = machine[state][event];
    return nextState !== null && nextState !== void 0 ? nextState : state;
  }, initialState);
}
var $921a889cee6df7e8$export$99c2b779aa4e8b8b = (props) => {
  const { present, children } = props;
  const presence = $921a889cee6df7e8$var$usePresence(present);
  const child = typeof children === "function" ? children({
    present: presence.isPresent
  }) : import_react110.Children.only(children);
  const ref = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(presence.ref, child.ref);
  const forceMount = typeof children === "function";
  return forceMount || presence.isPresent ? (0, import_react110.cloneElement)(child, {
    ref
  }) : null;
};
$921a889cee6df7e8$export$99c2b779aa4e8b8b.displayName = "Presence";
function $921a889cee6df7e8$var$usePresence(present) {
  const [node1, setNode2] = (0, import_react110.useState)();
  const stylesRef = (0, import_react110.useRef)({});
  const prevPresentRef = (0, import_react110.useRef)(present);
  const prevAnimationNameRef = (0, import_react110.useRef)("none");
  const initialState = present ? "mounted" : "unmounted";
  const [state, send] = $fe963b355347cc68$export$3e6543de14f8614f(initialState, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  (0, import_react110.useEffect)(() => {
    const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
    prevAnimationNameRef.current = state === "mounted" ? currentAnimationName : "none";
  }, [
    state
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    const styles2 = stylesRef.current;
    const wasPresent = prevPresentRef.current;
    const hasPresentChanged = wasPresent !== present;
    if (hasPresentChanged) {
      const prevAnimationName = prevAnimationNameRef.current;
      const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(styles2);
      if (present)
        send("MOUNT");
      else if (currentAnimationName === "none" || (styles2 === null || styles2 === void 0 ? void 0 : styles2.display) === "none")
        send("UNMOUNT");
      else {
        const isAnimating = prevAnimationName !== currentAnimationName;
        if (wasPresent && isAnimating)
          send("ANIMATION_OUT");
        else
          send("UNMOUNT");
      }
      prevPresentRef.current = present;
    }
  }, [
    present,
    send
  ]);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    if (node1) {
      const handleAnimationEnd = (event) => {
        const currentAnimationName = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
        const isCurrentAnimation = currentAnimationName.includes(event.animationName);
        if (event.target === node1 && isCurrentAnimation)
          (0, import_react_dom5.flushSync)(
            () => send("ANIMATION_END")
          );
      };
      const handleAnimationStart = (event) => {
        if (event.target === node1)
          prevAnimationNameRef.current = $921a889cee6df7e8$var$getAnimationName(stylesRef.current);
      };
      node1.addEventListener("animationstart", handleAnimationStart);
      node1.addEventListener("animationcancel", handleAnimationEnd);
      node1.addEventListener("animationend", handleAnimationEnd);
      return () => {
        node1.removeEventListener("animationstart", handleAnimationStart);
        node1.removeEventListener("animationcancel", handleAnimationEnd);
        node1.removeEventListener("animationend", handleAnimationEnd);
      };
    } else
      send("ANIMATION_END");
  }, [
    node1,
    send
  ]);
  return {
    isPresent: [
      "mounted",
      "unmountSuspended"
    ].includes(state),
    ref: (0, import_react110.useCallback)((node4) => {
      if (node4)
        stylesRef.current = getComputedStyle(node4);
      setNode2(node4);
    }, [])
  };
}
function $921a889cee6df7e8$var$getAnimationName(styles2) {
  return (styles2 === null || styles2 === void 0 ? void 0 : styles2.animationName) || "none";
}

// node_modules/@radix-ui/react-context/dist/index.module.js
var import_react111 = __toESM(require_react());
function $c512c27ab02ef895$export$50c7b4e9d9f19c1(scopeName, createContextScopeDeps = []) {
  let defaultContexts = [];
  function $c512c27ab02ef895$export$fd42f52fd3ae1109(rootComponentName, defaultContext) {
    const BaseContext = (0, import_react111.createContext)(defaultContext);
    const index7 = defaultContexts.length;
    defaultContexts = [
      ...defaultContexts,
      defaultContext
    ];
    function Provider(props) {
      const { scope, children, ...context } = props;
      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index7]) || BaseContext;
      const value = (0, import_react111.useMemo)(
        () => context,
        Object.values(context)
      );
      return (0, import_react111.createElement)(Context.Provider, {
        value
      }, children);
    }
    function useContext18(consumerName, scope) {
      const Context = (scope === null || scope === void 0 ? void 0 : scope[scopeName][index7]) || BaseContext;
      const context = (0, import_react111.useContext)(Context);
      if (context)
        return context;
      if (defaultContext !== void 0)
        return defaultContext;
      throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
    }
    Provider.displayName = rootComponentName + "Provider";
    return [
      Provider,
      useContext18
    ];
  }
  const createScope = () => {
    const scopeContexts = defaultContexts.map((defaultContext) => {
      return (0, import_react111.createContext)(defaultContext);
    });
    return function useScope(scope) {
      const contexts = (scope === null || scope === void 0 ? void 0 : scope[scopeName]) || scopeContexts;
      return (0, import_react111.useMemo)(
        () => ({
          [`__scope${scopeName}`]: {
            ...scope,
            [scopeName]: contexts
          }
        }),
        [
          scope,
          contexts
        ]
      );
    };
  };
  createScope.scopeName = scopeName;
  return [
    $c512c27ab02ef895$export$fd42f52fd3ae1109,
    $c512c27ab02ef895$var$composeContextScopes(createScope, ...createContextScopeDeps)
  ];
}
function $c512c27ab02ef895$var$composeContextScopes(...scopes) {
  const baseScope = scopes[0];
  if (scopes.length === 1)
    return baseScope;
  const createScope1 = () => {
    const scopeHooks = scopes.map(
      (createScope) => ({
        useScope: createScope(),
        scopeName: createScope.scopeName
      })
    );
    return function useComposedScopes(overrideScopes) {
      const nextScopes1 = scopeHooks.reduce((nextScopes, { useScope, scopeName }) => {
        const scopeProps = useScope(overrideScopes);
        const currentScope = scopeProps[`__scope${scopeName}`];
        return {
          ...nextScopes,
          ...currentScope
        };
      }, {});
      return (0, import_react111.useMemo)(
        () => ({
          [`__scope${baseScope.scopeName}`]: nextScopes1
        }),
        [
          nextScopes1
        ]
      );
    };
  };
  createScope1.scopeName = baseScope.scopeName;
  return createScope1;
}

// node_modules/@radix-ui/react-use-callback-ref/dist/index.module.js
var import_react112 = __toESM(require_react());
function $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback) {
  const callbackRef = (0, import_react112.useRef)(callback);
  (0, import_react112.useEffect)(() => {
    callbackRef.current = callback;
  });
  return (0, import_react112.useMemo)(
    () => (...args2) => {
      var _callbackRef$current;
      return (_callbackRef$current = callbackRef.current) === null || _callbackRef$current === void 0 ? void 0 : _callbackRef$current.call(callbackRef, ...args2);
    },
    []
  );
}

// node_modules/@radix-ui/react-direction/dist/index.module.js
var import_react113 = __toESM(require_react());
var $f631663db3294ace$var$DirectionContext = (0, import_react113.createContext)(void 0);
function $f631663db3294ace$export$b39126d51d94e6f3(localDir) {
  const globalDir = (0, import_react113.useContext)($f631663db3294ace$var$DirectionContext);
  return localDir || globalDir || "ltr";
}

// node_modules/@radix-ui/number/dist/index.module.js
function $ae6933e535247d3d$export$7d15b64cf5a3a4c4(value, [min5, max5]) {
  return Math.min(max5, Math.max(min5, value));
}

// node_modules/@radix-ui/primitive/dist/index.module.js
function $e42e1063c40fb3ef$export$b9ecd428b558ff10(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return function handleEvent(event) {
    originalEventHandler === null || originalEventHandler === void 0 || originalEventHandler(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented)
      return ourEventHandler === null || ourEventHandler === void 0 ? void 0 : ourEventHandler(event);
  };
}

// node_modules/@radix-ui/react-scroll-area/dist/index.module.js
function $6c2e24571c90391f$export$3e6543de14f8614f(initialState, machine) {
  return (0, import_react114.useReducer)((state, event) => {
    const nextState = machine[state][event];
    return nextState !== null && nextState !== void 0 ? nextState : state;
  }, initialState);
}
var $57acba87d6e25586$var$SCROLL_AREA_NAME = "ScrollArea";
var [$57acba87d6e25586$var$createScrollAreaContext, $57acba87d6e25586$export$488468afe3a6f2b1] = $c512c27ab02ef895$export$50c7b4e9d9f19c1($57acba87d6e25586$var$SCROLL_AREA_NAME);
var [$57acba87d6e25586$var$ScrollAreaProvider, $57acba87d6e25586$var$useScrollAreaContext] = $57acba87d6e25586$var$createScrollAreaContext($57acba87d6e25586$var$SCROLL_AREA_NAME);
var $57acba87d6e25586$export$ccf8d8d7bbf3c2cc = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { __scopeScrollArea, type = "hover", dir, scrollHideDelay = 600, ...scrollAreaProps } = props;
  const [scrollArea, setScrollArea] = (0, import_react114.useState)(null);
  const [viewport2, setViewport] = (0, import_react114.useState)(null);
  const [content5, setContent3] = (0, import_react114.useState)(null);
  const [scrollbarX, setScrollbarX] = (0, import_react114.useState)(null);
  const [scrollbarY, setScrollbarY] = (0, import_react114.useState)(null);
  const [cornerWidth, setCornerWidth] = (0, import_react114.useState)(0);
  const [cornerHeight, setCornerHeight] = (0, import_react114.useState)(0);
  const [scrollbarXEnabled, setScrollbarXEnabled] = (0, import_react114.useState)(false);
  const [scrollbarYEnabled, setScrollbarYEnabled] = (0, import_react114.useState)(false);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node4) => setScrollArea(node4)
  );
  const direction = $f631663db3294ace$export$b39126d51d94e6f3(dir);
  return (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaProvider, {
    scope: __scopeScrollArea,
    type,
    dir: direction,
    scrollHideDelay,
    scrollArea,
    viewport: viewport2,
    onViewportChange: setViewport,
    content: content5,
    onContentChange: setContent3,
    scrollbarX,
    onScrollbarXChange: setScrollbarX,
    scrollbarXEnabled,
    onScrollbarXEnabledChange: setScrollbarXEnabled,
    scrollbarY,
    onScrollbarYChange: setScrollbarY,
    scrollbarYEnabled,
    onScrollbarYEnabledChange: setScrollbarYEnabled,
    onCornerWidthChange: setCornerWidth,
    onCornerHeightChange: setCornerHeight
  }, (0, import_react114.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    dir: direction
  }, scrollAreaProps, {
    ref: composedRefs,
    style: {
      position: "relative",
      // Pass corner sizes as CSS vars to reduce re-renders of context consumers
      ["--radix-scroll-area-corner-width"]: cornerWidth + "px",
      ["--radix-scroll-area-corner-height"]: cornerHeight + "px",
      ...props.style
    }
  })));
});
Object.assign($57acba87d6e25586$export$ccf8d8d7bbf3c2cc, {
  displayName: $57acba87d6e25586$var$SCROLL_AREA_NAME
});
var $57acba87d6e25586$var$VIEWPORT_NAME = "ScrollAreaViewport";
var $57acba87d6e25586$export$a21cbf9f11fca853 = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { __scopeScrollArea, children, ...viewportProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$VIEWPORT_NAME, __scopeScrollArea);
  const ref = (0, import_react114.useRef)(null);
  const composedRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref, context.onViewportChange);
  return (0, import_react114.createElement)(import_react114.Fragment, null, (0, import_react114.createElement)("style", {
    dangerouslySetInnerHTML: {
      __html: `[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}`
    }
  }), (0, import_react114.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    "data-radix-scroll-area-viewport": ""
  }, viewportProps, {
    ref: composedRefs,
    style: {
      /**
      * We don't support `visible` because the intention is to have at least one scrollbar
      * if this component is used and `visible` will behave like `auto` in that case
      * https://developer.mozilla.org/en-US/docs/Web/CSS/overflowed#description
      *
      * We don't handle `auto` because the intention is for the native implementation
      * to be hidden if using this component. We just want to ensure the node is scrollable
      * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent
      * the browser from having to work out whether to render native scrollbars or not,
      * we tell it to with the intention of hiding them in CSS.
      */
      overflowX: context.scrollbarXEnabled ? "scroll" : "hidden",
      overflowY: context.scrollbarYEnabled ? "scroll" : "hidden",
      ...props.style
    }
  }), (0, import_react114.createElement)("div", {
    ref: context.onContentChange,
    style: {
      minWidth: "100%",
      display: "table"
    }
  }, children)));
});
Object.assign($57acba87d6e25586$export$a21cbf9f11fca853, {
  displayName: $57acba87d6e25586$var$VIEWPORT_NAME
});
var $57acba87d6e25586$var$SCROLLBAR_NAME = "ScrollAreaScrollbar";
var $57acba87d6e25586$export$2fabd85d0eba3c57 = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);
  const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;
  const isHorizontal = props.orientation === "horizontal";
  (0, import_react114.useEffect)(() => {
    isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);
    return () => {
      isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);
    };
  }, [
    isHorizontal,
    onScrollbarXEnabledChange,
    onScrollbarYEnabledChange
  ]);
  return context.type === "hover" ? (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarHover, _extends({}, scrollbarProps, {
    ref: forwardedRef,
    forceMount
  })) : context.type === "scroll" ? (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarScroll, _extends({}, scrollbarProps, {
    ref: forwardedRef,
    forceMount
  })) : context.type === "auto" ? (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarAuto, _extends({}, scrollbarProps, {
    ref: forwardedRef,
    forceMount
  })) : context.type === "always" ? (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarVisible, _extends({}, scrollbarProps, {
    ref: forwardedRef
  })) : null;
});
Object.assign($57acba87d6e25586$export$2fabd85d0eba3c57, {
  displayName: $57acba87d6e25586$var$SCROLLBAR_NAME
});
var $57acba87d6e25586$var$ScrollAreaScrollbarHover = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);
  const [visible2, setVisible] = (0, import_react114.useState)(false);
  (0, import_react114.useEffect)(() => {
    const scrollArea = context.scrollArea;
    let hideTimer = 0;
    if (scrollArea) {
      const handlePointerEnter = () => {
        window.clearTimeout(hideTimer);
        setVisible(true);
      };
      const handlePointerLeave = () => {
        hideTimer = window.setTimeout(
          () => setVisible(false),
          context.scrollHideDelay
        );
      };
      scrollArea.addEventListener("pointerenter", handlePointerEnter);
      scrollArea.addEventListener("pointerleave", handlePointerLeave);
      return () => {
        window.clearTimeout(hideTimer);
        scrollArea.removeEventListener("pointerenter", handlePointerEnter);
        scrollArea.removeEventListener("pointerleave", handlePointerLeave);
      };
    }
  }, [
    context.scrollArea,
    context.scrollHideDelay
  ]);
  return (0, import_react114.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || visible2
  }, (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarAuto, _extends({
    "data-state": visible2 ? "visible" : "hidden"
  }, scrollbarProps, {
    ref: forwardedRef
  })));
});
var $57acba87d6e25586$var$ScrollAreaScrollbarScroll = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);
  const isHorizontal = props.orientation === "horizontal";
  const debounceScrollEnd = $57acba87d6e25586$var$useDebounceCallback(
    () => send("SCROLL_END"),
    100
  );
  const [state, send] = $6c2e24571c90391f$export$3e6543de14f8614f("hidden", {
    hidden: {
      SCROLL: "scrolling"
    },
    scrolling: {
      SCROLL_END: "idle",
      POINTER_ENTER: "interacting"
    },
    interacting: {
      SCROLL: "interacting",
      POINTER_LEAVE: "idle"
    },
    idle: {
      HIDE: "hidden",
      SCROLL: "scrolling",
      POINTER_ENTER: "interacting"
    }
  });
  (0, import_react114.useEffect)(() => {
    if (state === "idle") {
      const hideTimer = window.setTimeout(
        () => send("HIDE"),
        context.scrollHideDelay
      );
      return () => window.clearTimeout(hideTimer);
    }
  }, [
    state,
    context.scrollHideDelay,
    send
  ]);
  (0, import_react114.useEffect)(() => {
    const viewport2 = context.viewport;
    const scrollDirection = isHorizontal ? "scrollLeft" : "scrollTop";
    if (viewport2) {
      let prevScrollPos = viewport2[scrollDirection];
      const handleScroll = () => {
        const scrollPos = viewport2[scrollDirection];
        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;
        if (hasScrollInDirectionChanged) {
          send("SCROLL");
          debounceScrollEnd();
        }
        prevScrollPos = scrollPos;
      };
      viewport2.addEventListener("scroll", handleScroll);
      return () => viewport2.removeEventListener("scroll", handleScroll);
    }
  }, [
    context.viewport,
    isHorizontal,
    send,
    debounceScrollEnd
  ]);
  return (0, import_react114.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || state !== "hidden"
  }, (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarVisible, _extends({
    "data-state": state === "hidden" ? "hidden" : "visible"
  }, scrollbarProps, {
    ref: forwardedRef,
    onPointerEnter: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onPointerEnter,
      () => send("POINTER_ENTER")
    ),
    onPointerLeave: $e42e1063c40fb3ef$export$b9ecd428b558ff10(
      props.onPointerLeave,
      () => send("POINTER_LEAVE")
    )
  })));
});
var $57acba87d6e25586$var$ScrollAreaScrollbarAuto = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);
  const { forceMount, ...scrollbarProps } = props;
  const [visible2, setVisible] = (0, import_react114.useState)(false);
  const isHorizontal = props.orientation === "horizontal";
  const handleResize = $57acba87d6e25586$var$useDebounceCallback(() => {
    if (context.viewport) {
      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;
      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;
      setVisible(isHorizontal ? isOverflowX : isOverflowY);
    }
  }, 10);
  $57acba87d6e25586$var$useResizeObserver(context.viewport, handleResize);
  $57acba87d6e25586$var$useResizeObserver(context.content, handleResize);
  return (0, import_react114.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || visible2
  }, (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarVisible, _extends({
    "data-state": visible2 ? "visible" : "hidden"
  }, scrollbarProps, {
    ref: forwardedRef
  })));
});
var $57acba87d6e25586$var$ScrollAreaScrollbarVisible = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { orientation = "vertical", ...scrollbarProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);
  const thumbRef = (0, import_react114.useRef)(null);
  const pointerOffsetRef = (0, import_react114.useRef)(0);
  const [sizes24, setSizes] = (0, import_react114.useState)({
    content: 0,
    viewport: 0,
    scrollbar: {
      size: 0,
      paddingStart: 0,
      paddingEnd: 0
    }
  });
  const thumbRatio = $57acba87d6e25586$var$getThumbRatio(sizes24.viewport, sizes24.content);
  const commonProps = {
    ...scrollbarProps,
    sizes: sizes24,
    onSizesChange: setSizes,
    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),
    onThumbChange: (thumb) => thumbRef.current = thumb,
    onThumbPointerUp: () => pointerOffsetRef.current = 0,
    onThumbPointerDown: (pointerPos) => pointerOffsetRef.current = pointerPos
  };
  function getScrollPosition(pointerPos, dir) {
    return $57acba87d6e25586$var$getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes24, dir);
  }
  if (orientation === "horizontal")
    return (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarX, _extends({}, commonProps, {
      ref: forwardedRef,
      onThumbPositionChange: () => {
        if (context.viewport && thumbRef.current) {
          const scrollPos = context.viewport.scrollLeft;
          const offset3 = $57acba87d6e25586$var$getThumbOffsetFromScroll(scrollPos, sizes24, context.dir);
          thumbRef.current.style.transform = `translate3d(${offset3}px, 0, 0)`;
        }
      },
      onWheelScroll: (scrollPos) => {
        if (context.viewport)
          context.viewport.scrollLeft = scrollPos;
      },
      onDragScroll: (pointerPos) => {
        if (context.viewport)
          context.viewport.scrollLeft = getScrollPosition(pointerPos, context.dir);
      }
    }));
  if (orientation === "vertical")
    return (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarY, _extends({}, commonProps, {
      ref: forwardedRef,
      onThumbPositionChange: () => {
        if (context.viewport && thumbRef.current) {
          const scrollPos = context.viewport.scrollTop;
          const offset3 = $57acba87d6e25586$var$getThumbOffsetFromScroll(scrollPos, sizes24);
          thumbRef.current.style.transform = `translate3d(0, ${offset3}px, 0)`;
        }
      },
      onWheelScroll: (scrollPos) => {
        if (context.viewport)
          context.viewport.scrollTop = scrollPos;
      },
      onDragScroll: (pointerPos) => {
        if (context.viewport)
          context.viewport.scrollTop = getScrollPosition(pointerPos);
      }
    }));
  return null;
});
var $57acba87d6e25586$var$ScrollAreaScrollbarX = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { sizes: sizes24, onSizesChange, ...scrollbarProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);
  const [computedStyle, setComputedStyle] = (0, import_react114.useState)();
  const ref = (0, import_react114.useRef)(null);
  const composeRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref, context.onScrollbarXChange);
  (0, import_react114.useEffect)(() => {
    if (ref.current)
      setComputedStyle(getComputedStyle(ref.current));
  }, [
    ref
  ]);
  return (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarImpl, _extends({
    "data-orientation": "horizontal"
  }, scrollbarProps, {
    ref: composeRefs,
    sizes: sizes24,
    style: {
      bottom: 0,
      left: context.dir === "rtl" ? "var(--radix-scroll-area-corner-width)" : 0,
      right: context.dir === "ltr" ? "var(--radix-scroll-area-corner-width)" : 0,
      ["--radix-scroll-area-thumb-width"]: $57acba87d6e25586$var$getThumbSize(sizes24) + "px",
      ...props.style
    },
    onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.x),
    onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.x),
    onWheelScroll: (event, maxScrollPos) => {
      if (context.viewport) {
        const scrollPos = context.viewport.scrollLeft + event.deltaX;
        props.onWheelScroll(scrollPos);
        if ($57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos))
          event.preventDefault();
      }
    },
    onResize: () => {
      if (ref.current && context.viewport && computedStyle)
        onSizesChange({
          content: context.viewport.scrollWidth,
          viewport: context.viewport.offsetWidth,
          scrollbar: {
            size: ref.current.clientWidth,
            paddingStart: $57acba87d6e25586$var$toInt(computedStyle.paddingLeft),
            paddingEnd: $57acba87d6e25586$var$toInt(computedStyle.paddingRight)
          }
        });
    }
  }));
});
var $57acba87d6e25586$var$ScrollAreaScrollbarY = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { sizes: sizes24, onSizesChange, ...scrollbarProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, props.__scopeScrollArea);
  const [computedStyle, setComputedStyle] = (0, import_react114.useState)();
  const ref = (0, import_react114.useRef)(null);
  const composeRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(forwardedRef, ref, context.onScrollbarYChange);
  (0, import_react114.useEffect)(() => {
    if (ref.current)
      setComputedStyle(getComputedStyle(ref.current));
  }, [
    ref
  ]);
  return (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaScrollbarImpl, _extends({
    "data-orientation": "vertical"
  }, scrollbarProps, {
    ref: composeRefs,
    sizes: sizes24,
    style: {
      top: 0,
      right: context.dir === "ltr" ? 0 : void 0,
      left: context.dir === "rtl" ? 0 : void 0,
      bottom: "var(--radix-scroll-area-corner-height)",
      ["--radix-scroll-area-thumb-height"]: $57acba87d6e25586$var$getThumbSize(sizes24) + "px",
      ...props.style
    },
    onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.y),
    onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.y),
    onWheelScroll: (event, maxScrollPos) => {
      if (context.viewport) {
        const scrollPos = context.viewport.scrollTop + event.deltaY;
        props.onWheelScroll(scrollPos);
        if ($57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos))
          event.preventDefault();
      }
    },
    onResize: () => {
      if (ref.current && context.viewport && computedStyle)
        onSizesChange({
          content: context.viewport.scrollHeight,
          viewport: context.viewport.offsetHeight,
          scrollbar: {
            size: ref.current.clientHeight,
            paddingStart: $57acba87d6e25586$var$toInt(computedStyle.paddingTop),
            paddingEnd: $57acba87d6e25586$var$toInt(computedStyle.paddingBottom)
          }
        });
    }
  }));
});
var [$57acba87d6e25586$var$ScrollbarProvider, $57acba87d6e25586$var$useScrollbarContext] = $57acba87d6e25586$var$createScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME);
var $57acba87d6e25586$var$ScrollAreaScrollbarImpl = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { __scopeScrollArea, sizes: sizes24, hasThumb, onThumbChange, onThumbPointerUp, onThumbPointerDown, onThumbPositionChange, onDragScroll, onWheelScroll, onResize, ...scrollbarProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$SCROLLBAR_NAME, __scopeScrollArea);
  const [scrollbar, setScrollbar] = (0, import_react114.useState)(null);
  const composeRefs = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node4) => setScrollbar(node4)
  );
  const rectRef = (0, import_react114.useRef)(null);
  const prevWebkitUserSelectRef = (0, import_react114.useRef)("");
  const viewport2 = context.viewport;
  const maxScrollPos = sizes24.content - sizes24.viewport;
  const handleWheelScroll = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onWheelScroll);
  const handleThumbPositionChange = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onThumbPositionChange);
  const handleResize = $57acba87d6e25586$var$useDebounceCallback(onResize, 10);
  function handleDragScroll(event) {
    if (rectRef.current) {
      const x3 = event.clientX - rectRef.current.left;
      const y = event.clientY - rectRef.current.top;
      onDragScroll({
        x: x3,
        y
      });
    }
  }
  (0, import_react114.useEffect)(() => {
    const handleWheel = (event) => {
      const element7 = event.target;
      const isScrollbarWheel = scrollbar === null || scrollbar === void 0 ? void 0 : scrollbar.contains(element7);
      if (isScrollbarWheel)
        handleWheelScroll(event, maxScrollPos);
    };
    document.addEventListener("wheel", handleWheel, {
      passive: false
    });
    return () => document.removeEventListener("wheel", handleWheel, {
      passive: false
    });
  }, [
    viewport2,
    scrollbar,
    maxScrollPos,
    handleWheelScroll
  ]);
  (0, import_react114.useEffect)(handleThumbPositionChange, [
    sizes24,
    handleThumbPositionChange
  ]);
  $57acba87d6e25586$var$useResizeObserver(scrollbar, handleResize);
  $57acba87d6e25586$var$useResizeObserver(context.content, handleResize);
  return (0, import_react114.createElement)($57acba87d6e25586$var$ScrollbarProvider, {
    scope: __scopeScrollArea,
    scrollbar,
    hasThumb,
    onThumbChange: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onThumbChange),
    onThumbPointerUp: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onThumbPointerUp),
    onThumbPositionChange: handleThumbPositionChange,
    onThumbPointerDown: $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onThumbPointerDown)
  }, (0, import_react114.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, scrollbarProps, {
    ref: composeRefs,
    style: {
      position: "absolute",
      ...scrollbarProps.style
    },
    onPointerDown: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDown, (event) => {
      const mainPointer = 0;
      if (event.button === mainPointer) {
        const element7 = event.target;
        element7.setPointerCapture(event.pointerId);
        rectRef.current = scrollbar.getBoundingClientRect();
        prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;
        document.body.style.webkitUserSelect = "none";
        handleDragScroll(event);
      }
    }),
    onPointerMove: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerMove, handleDragScroll),
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, (event) => {
      const element7 = event.target;
      if (element7.hasPointerCapture(event.pointerId))
        element7.releasePointerCapture(event.pointerId);
      document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;
      rectRef.current = null;
    })
  })));
});
var $57acba87d6e25586$var$THUMB_NAME = "ScrollAreaThumb";
var $57acba87d6e25586$export$9fba1154677d7cd2 = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { forceMount, ...thumbProps } = props;
  const scrollbarContext = $57acba87d6e25586$var$useScrollbarContext($57acba87d6e25586$var$THUMB_NAME, props.__scopeScrollArea);
  return (0, import_react114.createElement)($921a889cee6df7e8$export$99c2b779aa4e8b8b, {
    present: forceMount || scrollbarContext.hasThumb
  }, (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaThumbImpl, _extends({
    ref: forwardedRef
  }, thumbProps)));
});
var $57acba87d6e25586$var$ScrollAreaThumbImpl = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { __scopeScrollArea, style: style3, ...thumbProps } = props;
  const scrollAreaContext = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$THUMB_NAME, __scopeScrollArea);
  const scrollbarContext = $57acba87d6e25586$var$useScrollbarContext($57acba87d6e25586$var$THUMB_NAME, __scopeScrollArea);
  const { onThumbPositionChange } = scrollbarContext;
  const composedRef = $6ed0406888f73fc4$export$c7b2cbe3552a0d05(
    forwardedRef,
    (node4) => scrollbarContext.onThumbChange(node4)
  );
  const removeUnlinkedScrollListenerRef = (0, import_react114.useRef)();
  const debounceScrollEnd = $57acba87d6e25586$var$useDebounceCallback(() => {
    if (removeUnlinkedScrollListenerRef.current) {
      removeUnlinkedScrollListenerRef.current();
      removeUnlinkedScrollListenerRef.current = void 0;
    }
  }, 100);
  (0, import_react114.useEffect)(() => {
    const viewport2 = scrollAreaContext.viewport;
    if (viewport2) {
      const handleScroll = () => {
        debounceScrollEnd();
        if (!removeUnlinkedScrollListenerRef.current) {
          const listener = $57acba87d6e25586$var$addUnlinkedScrollListener(viewport2, onThumbPositionChange);
          removeUnlinkedScrollListenerRef.current = listener;
          onThumbPositionChange();
        }
      };
      onThumbPositionChange();
      viewport2.addEventListener("scroll", handleScroll);
      return () => viewport2.removeEventListener("scroll", handleScroll);
    }
  }, [
    scrollAreaContext.viewport,
    debounceScrollEnd,
    onThumbPositionChange
  ]);
  return (0, import_react114.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({
    "data-state": scrollbarContext.hasThumb ? "visible" : "hidden"
  }, thumbProps, {
    ref: composedRef,
    style: {
      width: "var(--radix-scroll-area-thumb-width)",
      height: "var(--radix-scroll-area-thumb-height)",
      ...style3
    },
    onPointerDownCapture: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerDownCapture, (event) => {
      const thumb = event.target;
      const thumbRect = thumb.getBoundingClientRect();
      const x3 = event.clientX - thumbRect.left;
      const y = event.clientY - thumbRect.top;
      scrollbarContext.onThumbPointerDown({
        x: x3,
        y
      });
    }),
    onPointerUp: $e42e1063c40fb3ef$export$b9ecd428b558ff10(props.onPointerUp, scrollbarContext.onThumbPointerUp)
  }));
});
Object.assign($57acba87d6e25586$export$9fba1154677d7cd2, {
  displayName: $57acba87d6e25586$var$THUMB_NAME
});
var $57acba87d6e25586$var$CORNER_NAME = "ScrollAreaCorner";
var $57acba87d6e25586$export$56969d565df7cc4b = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$CORNER_NAME, props.__scopeScrollArea);
  const hasBothScrollbarsVisible = Boolean(context.scrollbarX && context.scrollbarY);
  const hasCorner = context.type !== "scroll" && hasBothScrollbarsVisible;
  return hasCorner ? (0, import_react114.createElement)($57acba87d6e25586$var$ScrollAreaCornerImpl, _extends({}, props, {
    ref: forwardedRef
  })) : null;
});
Object.assign($57acba87d6e25586$export$56969d565df7cc4b, {
  displayName: $57acba87d6e25586$var$CORNER_NAME
});
var $57acba87d6e25586$var$ScrollAreaCornerImpl = (0, import_react114.forwardRef)((props, forwardedRef) => {
  const { __scopeScrollArea, ...cornerProps } = props;
  const context = $57acba87d6e25586$var$useScrollAreaContext($57acba87d6e25586$var$CORNER_NAME, __scopeScrollArea);
  const [width1, setWidth] = (0, import_react114.useState)(0);
  const [height1, setHeight] = (0, import_react114.useState)(0);
  const hasSize = Boolean(width1 && height1);
  $57acba87d6e25586$var$useResizeObserver(context.scrollbarX, () => {
    var _context$scrollbarX;
    const height = ((_context$scrollbarX = context.scrollbarX) === null || _context$scrollbarX === void 0 ? void 0 : _context$scrollbarX.offsetHeight) || 0;
    context.onCornerHeightChange(height);
    setHeight(height);
  });
  $57acba87d6e25586$var$useResizeObserver(context.scrollbarY, () => {
    var _context$scrollbarY;
    const width = ((_context$scrollbarY = context.scrollbarY) === null || _context$scrollbarY === void 0 ? void 0 : _context$scrollbarY.offsetWidth) || 0;
    context.onCornerWidthChange(width);
    setWidth(width);
  });
  return hasSize ? (0, import_react114.createElement)($8927f6f2acc4f386$export$250ffa63cdc0d034.div, _extends({}, cornerProps, {
    ref: forwardedRef,
    style: {
      width: width1,
      height: height1,
      position: "absolute",
      right: context.dir === "ltr" ? 0 : void 0,
      left: context.dir === "rtl" ? 0 : void 0,
      bottom: 0,
      ...props.style
    }
  })) : null;
});
function $57acba87d6e25586$var$toInt(value) {
  return value ? parseInt(value, 10) : 0;
}
function $57acba87d6e25586$var$getThumbRatio(viewportSize, contentSize) {
  const ratio = viewportSize / contentSize;
  return isNaN(ratio) ? 0 : ratio;
}
function $57acba87d6e25586$var$getThumbSize(sizes24) {
  const ratio = $57acba87d6e25586$var$getThumbRatio(sizes24.viewport, sizes24.content);
  const scrollbarPadding = sizes24.scrollbar.paddingStart + sizes24.scrollbar.paddingEnd;
  const thumbSize = (sizes24.scrollbar.size - scrollbarPadding) * ratio;
  return Math.max(thumbSize, 18);
}
function $57acba87d6e25586$var$getScrollPositionFromPointer(pointerPos, pointerOffset, sizes24, dir = "ltr") {
  const thumbSizePx = $57acba87d6e25586$var$getThumbSize(sizes24);
  const thumbCenter = thumbSizePx / 2;
  const offset3 = pointerOffset || thumbCenter;
  const thumbOffsetFromEnd = thumbSizePx - offset3;
  const minPointerPos = sizes24.scrollbar.paddingStart + offset3;
  const maxPointerPos = sizes24.scrollbar.size - sizes24.scrollbar.paddingEnd - thumbOffsetFromEnd;
  const maxScrollPos = sizes24.content - sizes24.viewport;
  const scrollRange = dir === "ltr" ? [
    0,
    maxScrollPos
  ] : [
    maxScrollPos * -1,
    0
  ];
  const interpolate = $57acba87d6e25586$var$linearScale([
    minPointerPos,
    maxPointerPos
  ], scrollRange);
  return interpolate(pointerPos);
}
function $57acba87d6e25586$var$getThumbOffsetFromScroll(scrollPos, sizes24, dir = "ltr") {
  const thumbSizePx = $57acba87d6e25586$var$getThumbSize(sizes24);
  const scrollbarPadding = sizes24.scrollbar.paddingStart + sizes24.scrollbar.paddingEnd;
  const scrollbar = sizes24.scrollbar.size - scrollbarPadding;
  const maxScrollPos = sizes24.content - sizes24.viewport;
  const maxThumbPos = scrollbar - thumbSizePx;
  const scrollClampRange = dir === "ltr" ? [
    0,
    maxScrollPos
  ] : [
    maxScrollPos * -1,
    0
  ];
  const scrollWithoutMomentum = $ae6933e535247d3d$export$7d15b64cf5a3a4c4(scrollPos, scrollClampRange);
  const interpolate = $57acba87d6e25586$var$linearScale([
    0,
    maxScrollPos
  ], [
    0,
    maxThumbPos
  ]);
  return interpolate(scrollWithoutMomentum);
}
function $57acba87d6e25586$var$linearScale(input3, output) {
  return (value) => {
    if (input3[0] === input3[1] || output[0] === output[1])
      return output[0];
    const ratio = (output[1] - output[0]) / (input3[1] - input3[0]);
    return output[0] + ratio * (value - input3[0]);
  };
}
function $57acba87d6e25586$var$isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {
  return scrollPos > 0 && scrollPos < maxScrollPos;
}
var $57acba87d6e25586$var$addUnlinkedScrollListener = (node4, handler = () => {
}) => {
  let prevPosition = {
    left: node4.scrollLeft,
    top: node4.scrollTop
  };
  let rAF = 0;
  (function loop() {
    const position5 = {
      left: node4.scrollLeft,
      top: node4.scrollTop
    };
    const isHorizontalScroll = prevPosition.left !== position5.left;
    const isVerticalScroll = prevPosition.top !== position5.top;
    if (isHorizontalScroll || isVerticalScroll)
      handler();
    prevPosition = position5;
    rAF = window.requestAnimationFrame(loop);
  })();
  return () => window.cancelAnimationFrame(rAF);
};
function $57acba87d6e25586$var$useDebounceCallback(callback, delay) {
  const handleCallback = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(callback);
  const debounceTimerRef = (0, import_react114.useRef)(0);
  (0, import_react114.useEffect)(
    () => () => window.clearTimeout(debounceTimerRef.current),
    []
  );
  return (0, import_react114.useCallback)(() => {
    window.clearTimeout(debounceTimerRef.current);
    debounceTimerRef.current = window.setTimeout(handleCallback, delay);
  }, [
    handleCallback,
    delay
  ]);
}
function $57acba87d6e25586$var$useResizeObserver(element7, onResize) {
  const handleResize = $b1b2314f5f9a1d84$export$25bec8c6f54ee79a(onResize);
  $9f79659886946c16$export$e5c5a5f917a5871c(() => {
    let rAF = 0;
    if (element7) {
      const resizeObserver = new ResizeObserver(() => {
        cancelAnimationFrame(rAF);
        rAF = window.requestAnimationFrame(handleResize);
      });
      resizeObserver.observe(element7);
      return () => {
        window.cancelAnimationFrame(rAF);
        resizeObserver.unobserve(element7);
      };
    }
  }, [
    element7,
    handleResize
  ]);
}
var $57acba87d6e25586$export$be92b6f5f03c0fe9 = $57acba87d6e25586$export$ccf8d8d7bbf3c2cc;
var $57acba87d6e25586$export$d5c6c08dc2d3ca7 = $57acba87d6e25586$export$a21cbf9f11fca853;
var $57acba87d6e25586$export$9a4e88b92edfce6b = $57acba87d6e25586$export$2fabd85d0eba3c57;
var $57acba87d6e25586$export$6521433ed15a34db = $57acba87d6e25586$export$9fba1154677d7cd2;
var $57acba87d6e25586$export$ac61190d9fc311a9 = $57acba87d6e25586$export$56969d565df7cc4b;

// node_modules/@mantine/core/esm/ScrollArea/ScrollArea.styles.js
var useStyles15 = createStyles((theme, { scrollbarSize, offsetScrollbars, scrollbarHovered, hidden: hidden3 }, getRef2) => ({
  root: {
    overflow: "hidden"
  },
  viewport: {
    width: "100%",
    height: "100%",
    paddingRight: offsetScrollbars ? scrollbarSize : void 0,
    paddingBottom: offsetScrollbars ? scrollbarSize : void 0
  },
  scrollbar: {
    display: hidden3 ? "none" : "flex",
    userSelect: "none",
    touchAction: "none",
    boxSizing: "border-box",
    padding: scrollbarSize / 5,
    transition: "background-color 150ms ease, opacity 150ms ease",
    "&:hover": {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : theme.colors.gray[0],
      [`& .${getRef2("thumb")}`]: {
        backgroundColor: theme.colorScheme === "dark" ? theme.fn.rgba(theme.white, 0.5) : theme.fn.rgba(theme.black, 0.5)
      }
    },
    '&[data-orientation="vertical"]': {
      width: scrollbarSize
    },
    '&[data-orientation="horizontal"]': {
      flexDirection: "column",
      height: scrollbarSize
    },
    '&[data-state="hidden"]': {
      display: "none",
      opacity: 0
    }
  },
  thumb: {
    ref: getRef2("thumb"),
    flex: 1,
    backgroundColor: theme.colorScheme === "dark" ? theme.fn.rgba(theme.white, 0.4) : theme.fn.rgba(theme.black, 0.4),
    borderRadius: scrollbarSize,
    position: "relative",
    transition: "background-color 150ms ease",
    display: hidden3 ? "none" : void 0,
    overflow: "hidden",
    "&::before": {
      content: '""',
      position: "absolute",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)",
      width: "100%",
      height: "100%",
      minWidth: 44,
      minHeight: 44
    }
  },
  corner: {
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0],
    transition: "opacity 150ms ease",
    opacity: scrollbarHovered ? 1 : 0,
    display: hidden3 ? "none" : void 0
  }
}));
var ScrollArea_styles_default = useStyles15;

// node_modules/@mantine/core/esm/ScrollArea/ScrollArea.js
var __defProp53 = Object.defineProperty;
var __defProps21 = Object.defineProperties;
var __getOwnPropDescs21 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols54 = Object.getOwnPropertySymbols;
var __hasOwnProp54 = Object.prototype.hasOwnProperty;
var __propIsEnum54 = Object.prototype.propertyIsEnumerable;
var __defNormalProp53 = (obj, key2, value) => key2 in obj ? __defProp53(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues53 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp54.call(b2, prop))
      __defNormalProp53(a2, prop, b2[prop]);
  if (__getOwnPropSymbols54)
    for (var prop of __getOwnPropSymbols54(b2)) {
      if (__propIsEnum54.call(b2, prop))
        __defNormalProp53(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps21 = (a2, b2) => __defProps21(a2, __getOwnPropDescs21(b2));
var __objRest29 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp54.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols54)
    for (var prop of __getOwnPropSymbols54(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum54.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps20 = {
  scrollbarSize: 12,
  scrollHideDelay: 1e3,
  type: "hover",
  offsetScrollbars: false
};
var _ScrollArea = (0, import_react115.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("ScrollArea", defaultProps20, props), {
    children,
    className,
    classNames,
    styles: styles2,
    scrollbarSize,
    scrollHideDelay,
    type,
    dir,
    offsetScrollbars,
    viewportRef,
    onScrollPositionChange,
    unstyled,
    viewportProps
  } = _a, others = __objRest29(_a, [
    "children",
    "className",
    "classNames",
    "styles",
    "scrollbarSize",
    "scrollHideDelay",
    "type",
    "dir",
    "offsetScrollbars",
    "viewportRef",
    "onScrollPositionChange",
    "unstyled",
    "viewportProps"
  ]);
  const [scrollbarHovered, setScrollbarHovered] = (0, import_react115.useState)(false);
  const theme = useMantineTheme();
  const { classes, cx } = ScrollArea_styles_default({ scrollbarSize, offsetScrollbars, scrollbarHovered, hidden: type === "never" }, { name: "ScrollArea", classNames, styles: styles2, unstyled });
  return import_react115.default.createElement($57acba87d6e25586$export$be92b6f5f03c0fe9, {
    type: type === "never" ? "always" : type,
    scrollHideDelay,
    dir: dir || theme.dir,
    ref,
    asChild: true
  }, import_react115.default.createElement(Box, __spreadValues53({
    className: cx(classes.root, className)
  }, others), import_react115.default.createElement($57acba87d6e25586$export$d5c6c08dc2d3ca7, __spreadProps21(__spreadValues53({}, viewportProps), {
    className: classes.viewport,
    ref: viewportRef,
    onScroll: typeof onScrollPositionChange === "function" ? ({ currentTarget }) => onScrollPositionChange({
      x: currentTarget.scrollLeft,
      y: currentTarget.scrollTop
    }) : void 0
  }), children), import_react115.default.createElement($57acba87d6e25586$export$9a4e88b92edfce6b, {
    orientation: "horizontal",
    className: classes.scrollbar,
    forceMount: true,
    onMouseEnter: () => setScrollbarHovered(true),
    onMouseLeave: () => setScrollbarHovered(false)
  }, import_react115.default.createElement($57acba87d6e25586$export$6521433ed15a34db, {
    className: classes.thumb
  })), import_react115.default.createElement($57acba87d6e25586$export$9a4e88b92edfce6b, {
    orientation: "vertical",
    className: classes.scrollbar,
    forceMount: true,
    onMouseEnter: () => setScrollbarHovered(true),
    onMouseLeave: () => setScrollbarHovered(false)
  }, import_react115.default.createElement($57acba87d6e25586$export$6521433ed15a34db, {
    className: classes.thumb
  })), import_react115.default.createElement($57acba87d6e25586$export$ac61190d9fc311a9, {
    className: classes.corner
  })));
});
var ScrollAreaAutosize = (0, import_react115.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("ScrollAreaAutosize", defaultProps20, props), {
    maxHeight,
    children,
    classNames,
    styles: styles2,
    scrollbarSize,
    scrollHideDelay,
    type,
    dir,
    offsetScrollbars,
    viewportRef,
    onScrollPositionChange,
    unstyled,
    sx
  } = _a, others = __objRest29(_a, [
    "maxHeight",
    "children",
    "classNames",
    "styles",
    "scrollbarSize",
    "scrollHideDelay",
    "type",
    "dir",
    "offsetScrollbars",
    "viewportRef",
    "onScrollPositionChange",
    "unstyled",
    "sx"
  ]);
  return import_react115.default.createElement(Box, __spreadProps21(__spreadValues53({}, others), {
    ref,
    sx: [{ display: "flex", maxHeight }, ...packSx(sx)]
  }), import_react115.default.createElement(Box, {
    sx: { display: "flex", flexDirection: "column", flex: 1 }
  }, import_react115.default.createElement(_ScrollArea, {
    classNames,
    styles: styles2,
    scrollHideDelay,
    scrollbarSize,
    type,
    dir,
    offsetScrollbars,
    viewportRef,
    onScrollPositionChange,
    unstyled
  }, children)));
});
ScrollAreaAutosize.displayName = "@mantine/core/ScrollAreaAutosize";
_ScrollArea.displayName = "@mantine/core/ScrollArea";
_ScrollArea.Autosize = ScrollAreaAutosize;
var ScrollArea = _ScrollArea;

// node_modules/@mantine/core/esm/Select/SelectScrollArea/SelectScrollArea.js
var __defProp54 = Object.defineProperty;
var __defProps22 = Object.defineProperties;
var __getOwnPropDescs22 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols55 = Object.getOwnPropertySymbols;
var __hasOwnProp55 = Object.prototype.hasOwnProperty;
var __propIsEnum55 = Object.prototype.propertyIsEnumerable;
var __defNormalProp54 = (obj, key2, value) => key2 in obj ? __defProp54(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues54 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp55.call(b2, prop))
      __defNormalProp54(a2, prop, b2[prop]);
  if (__getOwnPropSymbols55)
    for (var prop of __getOwnPropSymbols55(b2)) {
      if (__propIsEnum55.call(b2, prop))
        __defNormalProp54(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps22 = (a2, b2) => __defProps22(a2, __getOwnPropDescs22(b2));
var __objRest30 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp55.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols55)
    for (var prop of __getOwnPropSymbols55(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum55.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var SelectScrollArea = (0, import_react116.forwardRef)((_a, ref) => {
  var _b = _a, { style: style3 } = _b, others = __objRest30(_b, ["style"]);
  return import_react116.default.createElement(ScrollArea, __spreadProps22(__spreadValues54({}, others), {
    style: __spreadValues54({ width: "100%" }, style3),
    viewportRef: ref
  }), others.children);
});
SelectScrollArea.displayName = "@mantine/core/SelectScrollArea";

// node_modules/@mantine/core/esm/Select/SelectPopover/SelectPopover.styles.js
var useStyles16 = createStyles(() => ({
  dropdown: {},
  itemsWrapper: {
    padding: 4,
    display: "flex",
    width: "100%",
    boxSizing: "border-box"
  }
}));
var SelectPopover_styles_default = useStyles16;

// node_modules/@mantine/core/esm/Popover/Popover.js
var import_react128 = __toESM(require_react());

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var React51 = __toESM(require_react());
var import_react118 = __toESM(require_react());

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches2 = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element7) {
  var _element$getRootNode;
  return element7 === null || element7 === void 0 ? void 0 : (_element$getRootNode = element7.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element7);
} : function(element7) {
  return element7 === null || element7 === void 0 ? void 0 : element7.ownerDocument;
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var import_react_dom6 = __toESM(require_react_dom());

// node_modules/@floating-ui/core/dist/floating-ui.core.browser.mjs
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getLengthFromAxis(axis) {
  return axis === "y" ? "height" : "width";
}
function getSide2(placement) {
  return placement.split("-")[0];
}
function getMainAxisFromPlacement2(placement) {
  return ["top", "bottom"].includes(getSide2(placement)) ? "x" : "y";
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference: reference2,
    floating
  } = _ref;
  const commonX = reference2.x + reference2.width / 2 - floating.width / 2;
  const commonY = reference2.y + reference2.height / 2 - floating.height / 2;
  const mainAxis = getMainAxisFromPlacement2(placement);
  const length4 = getLengthFromAxis(mainAxis);
  const commonAlign = reference2[length4] / 2 - floating[length4] / 2;
  const side = getSide2(placement);
  const isVertical = mainAxis === "x";
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference2.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case "right":
      coords = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference2.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference2.x,
        y: reference2.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference2, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware2.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference: reference2,
    floating,
    strategy
  });
  let {
    x: x3,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < validMiddleware.length; i++) {
    const {
      name,
      fn: fn3
    } = validMiddleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset: reset2
    } = await fn3({
      x: x3,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference: reference2,
        floating
      }
    });
    x3 = nextX != null ? nextX : x3;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset2 && resetCount <= 50) {
      resetCount++;
      if (typeof reset2 === "object") {
        if (reset2.placement) {
          statefulPlacement = reset2.placement;
        }
        if (reset2.rects) {
          rects = reset2.rects === true ? await platform2.getElementRects({
            reference: reference2,
            floating,
            strategy
          }) : reset2.rects;
        }
        ({
          x: x3,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
      continue;
    }
  }
  return {
    x: x3,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
function expandPaddingObject(padding2) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding2
  };
}
function getSideObjectFromPadding(padding2) {
  return typeof padding2 !== "number" ? expandPaddingObject(padding2) : {
    top: padding2,
    right: padding2,
    bottom: padding2,
    left: padding2
  };
}
function rectToClientRect2(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
async function detectOverflow2(state, options2) {
  var _await$platform$isEle;
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    x: x3,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding: padding2 = 0
  } = options2;
  const paddingObject = getSideObjectFromPadding(padding2);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element7 = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect2(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element7))) != null ? _await$platform$isEle : true) ? element7 : element7.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    ...rects.floating,
    x: x3,
    y
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect2(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var min2 = Math.min;
var max2 = Math.max;
function within2(min$1, value, max$1) {
  return max2(min$1, min2(value, max$1));
}
var arrow2 = (options2) => ({
  name: "arrow",
  options: options2,
  async fn(state) {
    const {
      element: element7,
      padding: padding2 = 0
    } = options2 || {};
    const {
      x: x3,
      y,
      placement,
      rects,
      platform: platform2,
      elements
    } = state;
    if (element7 == null) {
      return {};
    }
    const paddingObject = getSideObjectFromPadding(padding2);
    const coords = {
      x: x3,
      y
    };
    const axis = getMainAxisFromPlacement2(placement);
    const length4 = getLengthFromAxis(axis);
    const arrowDimensions = await platform2.getDimensions(element7);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length4] + rects.reference[axis] - coords[axis] - rects.floating[length4];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element7));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length4];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const min5 = paddingObject[minProp];
    const max5 = clientSize - arrowDimensions[length4] - paddingObject[maxProp];
    const center = clientSize / 2 - arrowDimensions[length4] / 2 + centerToReference;
    const offset3 = within2(min5, center, max5);
    const shouldAddOffset = getAlignment(placement) != null && center != offset3 && rects.reference[length4] / 2 - (center < min5 ? paddingObject[minProp] : paddingObject[maxProp]) - arrowDimensions[length4] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min5 ? min5 - center : max5 - center : 0;
    return {
      [axis]: coords[axis] - alignmentOffset,
      data: {
        [axis]: offset3,
        centerOffset: center - offset3
      }
    };
  }
});
var sides = ["top", "right", "bottom", "left"];
var allPlacements = sides.reduce((acc, side) => acc.concat(side, side + "-start", side + "-end"), []);
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement2(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const mainAxis = getMainAxisFromPlacement2(placement);
  const length4 = getLengthFromAxis(mainAxis);
  let mainAlignmentSide = mainAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length4] > rects.floating[length4]) {
    mainAlignmentSide = getOppositePlacement2(mainAlignmentSide);
  }
  return {
    main: mainAlignmentSide,
    cross: getOppositePlacement2(mainAlignmentSide)
  };
}
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement2(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt2 = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt2;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list6 = getSideList(getSide2(placement), direction === "start", rtl);
  if (alignment) {
    list6 = list6.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list6 = list6.concat(list6.map(getOppositeAlignmentPlacement));
    }
  }
  return list6;
}
var flip2 = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "flip",
    options: options2,
    async fn(state) {
      var _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = options2;
      const side = getSide2(placement);
      const isBasePlacement = getSide2(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement2(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow2(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const {
          main: main2,
          cross
        } = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[main2], overflow[cross]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a2, b2) => a2.overflows[1] - b2.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b2) => a2[1] - b2[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getBoundingRect(rects) {
  const minX = min2(...rects.map((rect) => rect.left));
  const minY = min2(...rects.map((rect) => rect.top));
  const maxX = max2(...rects.map((rect) => rect.right));
  const maxY = max2(...rects.map((rect) => rect.bottom));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
}
function getRectsByLine(rects) {
  const sortedRects = rects.slice().sort((a2, b2) => a2.y - b2.y);
  const groups = [];
  let prevRect = null;
  for (let i = 0; i < sortedRects.length; i++) {
    const rect = sortedRects[i];
    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
      groups.push([rect]);
    } else {
      groups[groups.length - 1].push(rect);
    }
    prevRect = rect;
  }
  return groups.map((rect) => rectToClientRect2(getBoundingRect(rect)));
}
var inline = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "inline",
    options: options2,
    async fn(state) {
      const {
        placement,
        elements,
        rects,
        platform: platform2,
        strategy
      } = state;
      const {
        padding: padding2 = 2,
        x: x3,
        y
      } = options2;
      const nativeClientRects = Array.from(await (platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) || []);
      const clientRects = getRectsByLine(nativeClientRects);
      const fallback = rectToClientRect2(getBoundingRect(nativeClientRects));
      const paddingObject = getSideObjectFromPadding(padding2);
      function getBoundingClientRect3() {
        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x3 != null && y != null) {
          return clientRects.find((rect) => x3 > rect.left - paddingObject.left && x3 < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;
        }
        if (clientRects.length >= 2) {
          if (getMainAxisFromPlacement2(placement) === "x") {
            const firstRect = clientRects[0];
            const lastRect = clientRects[clientRects.length - 1];
            const isTop = getSide2(placement) === "top";
            const top3 = firstRect.top;
            const bottom3 = lastRect.bottom;
            const left3 = isTop ? firstRect.left : lastRect.left;
            const right3 = isTop ? firstRect.right : lastRect.right;
            const width2 = right3 - left3;
            const height2 = bottom3 - top3;
            return {
              top: top3,
              bottom: bottom3,
              left: left3,
              right: right3,
              width: width2,
              height: height2,
              x: left3,
              y: top3
            };
          }
          const isLeftSide = getSide2(placement) === "left";
          const maxRight = max2(...clientRects.map((rect) => rect.right));
          const minLeft = min2(...clientRects.map((rect) => rect.left));
          const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
          const top2 = measureRects[0].top;
          const bottom2 = measureRects[measureRects.length - 1].bottom;
          const left2 = minLeft;
          const right2 = maxRight;
          const width = right2 - left2;
          const height = bottom2 - top2;
          return {
            top: top2,
            bottom: bottom2,
            left: left2,
            right: right2,
            width,
            height,
            x: left2,
            y: top2
          };
        }
        return fallback;
      }
      const resetRects = await platform2.getElementRects({
        reference: {
          getBoundingClientRect: getBoundingClientRect3
        },
        floating: elements.floating,
        strategy
      });
      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
        return {
          reset: {
            rects: resetRects
          }
        };
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, value) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide2(placement);
  const alignment = getAlignment(placement);
  const isVertical = getMainAxisFromPlacement2(placement) === "x";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = typeof value === "function" ? value(state) : value;
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset2 = function(value) {
  if (value === void 0) {
    value = 0;
  }
  return {
    name: "offset",
    options: value,
    async fn(state) {
      const {
        x: x3,
        y
      } = state;
      const diffCoords = await convertValueToCoords(state, value);
      return {
        x: x3 + diffCoords.x,
        y: y + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
function getCrossAxis(axis) {
  return axis === "x" ? "y" : "x";
}
var shift2 = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "shift",
    options: options2,
    async fn(state) {
      const {
        x: x3,
        y,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x4,
              y: y2
            } = _ref;
            return {
              x: x4,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = options2;
      const coords = {
        x: x3,
        y
      };
      const overflow = await detectOverflow2(state, detectOverflowOptions);
      const mainAxis = getMainAxisFromPlacement2(getSide2(placement));
      const crossAxis = getCrossAxis(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min5 = mainAxisCoord + overflow[minSide];
        const max5 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = within2(min5, mainAxisCoord, max5);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min5 = crossAxisCoord + overflow[minSide];
        const max5 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = within2(min5, crossAxisCoord, max5);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x3,
          y: limitedCoords.y - y
        }
      };
    }
  };
};
var limitShift = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    options: options2,
    fn(state) {
      const {
        x: x3,
        y,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset3 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = options2;
      const coords = {
        x: x3,
        y
      };
      const mainAxis = getMainAxisFromPlacement2(placement);
      const crossAxis = getCrossAxis(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = typeof offset3 === "function" ? offset3(state) : offset3;
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide2(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
var size2 = function(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  return {
    name: "size",
    options: options2,
    async fn(state) {
      const {
        placement,
        rects,
        platform: platform2,
        elements
      } = state;
      const {
        apply: apply2 = () => {
        },
        ...detectOverflowOptions
      } = options2;
      const overflow = await detectOverflow2(state, detectOverflowOptions);
      const side = getSide2(placement);
      const alignment = getAlignment(placement);
      const axis = getMainAxisFromPlacement2(placement);
      const isXAxis = axis === "x";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const overflowAvailableHeight = height - overflow[heightSide];
      const overflowAvailableWidth = width - overflow[widthSide];
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if (isXAxis) {
        const maximumClippingWidth = width - overflow.left - overflow.right;
        availableWidth = alignment || noShift ? min2(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
      } else {
        const maximumClippingHeight = height - overflow.top - overflow.bottom;
        availableHeight = alignment || noShift ? min2(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max2(overflow.left, 0);
        const xMax = max2(overflow.right, 0);
        const yMin = max2(overflow.top, 0);
        const yMax = max2(overflow.bottom, 0);
        if (isXAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max2(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max2(overflow.top, overflow.bottom));
        }
      }
      await apply2({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform2.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/dom/dist/floating-ui.dom.browser.mjs
function getWindow2(node4) {
  var _node$ownerDocument;
  return ((_node$ownerDocument = node4.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getComputedStyle$1(element7) {
  return getWindow2(element7).getComputedStyle(element7);
}
function isNode(value) {
  return value instanceof getWindow2(value).Node;
}
function getNodeName2(node4) {
  return isNode(node4) ? (node4.nodeName || "").toLowerCase() : "";
}
var uaString;
function getUAString2() {
  if (uaString) {
    return uaString;
  }
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    uaString = uaData.brands.map((item) => item.brand + "/" + item.version).join(" ");
    return uaString;
  }
  return navigator.userAgent;
}
function isHTMLElement2(value) {
  return value instanceof getWindow2(value).HTMLElement;
}
function isElement4(value) {
  return value instanceof getWindow2(value).Element;
}
function isShadowRoot2(node4) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow2(node4).ShadowRoot;
  return node4 instanceof OwnElement || node4 instanceof ShadowRoot;
}
function isOverflowElement(element7) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle$1(element7);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement2(element7) {
  return ["table", "td", "th"].includes(getNodeName2(element7));
}
function isContainingBlock(element7) {
  const isFirefox = /firefox/i.test(getUAString2());
  const css2 = getComputedStyle$1(element7);
  const backdropFilter = css2.backdropFilter || css2.WebkitBackdropFilter;
  return css2.transform !== "none" || css2.perspective !== "none" || (backdropFilter ? backdropFilter !== "none" : false) || isFirefox && css2.willChange === "filter" || isFirefox && (css2.filter ? css2.filter !== "none" : false) || ["transform", "perspective"].some((value) => css2.willChange.includes(value)) || ["paint", "layout", "strict", "content"].some((value) => {
    const contain = css2.contain;
    return contain != null ? contain.includes(value) : false;
  });
}
function isClientRectVisualViewportBased() {
  return /^((?!chrome|android).)*safari/i.test(getUAString2());
}
function isLastTraversableNode(node4) {
  return ["html", "body", "#document"].includes(getNodeName2(node4));
}
var min3 = Math.min;
var max3 = Math.max;
var round2 = Math.round;
function getCssDimensions(element7) {
  const css2 = getComputedStyle$1(element7);
  let width = parseFloat(css2.width) || 0;
  let height = parseFloat(css2.height) || 0;
  const hasOffset = isHTMLElement2(element7);
  const offsetWidth = hasOffset ? element7.offsetWidth : width;
  const offsetHeight = hasOffset ? element7.offsetHeight : height;
  const shouldFallback = round2(width) !== offsetWidth || round2(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    fallback: shouldFallback
  };
}
function unwrapElement(element7) {
  return !isElement4(element7) ? element7.contextElement : element7;
}
var FALLBACK_SCALE = {
  x: 1,
  y: 1
};
function getScale(element7) {
  const domElement = unwrapElement(element7);
  if (!isHTMLElement2(domElement)) {
    return FALLBACK_SCALE;
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    fallback
  } = getCssDimensions(domElement);
  let x3 = (fallback ? round2(rect.width) : rect.width) / width;
  let y = (fallback ? round2(rect.height) : rect.height) / height;
  if (!x3 || !Number.isFinite(x3)) {
    x3 = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x: x3,
    y
  };
}
function getBoundingClientRect2(element7, includeScale, isFixedStrategy, offsetParent) {
  var _win$visualViewport, _win$visualViewport2;
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect2 = element7.getBoundingClientRect();
  const domElement = unwrapElement(element7);
  let scale = FALLBACK_SCALE;
  if (includeScale) {
    if (offsetParent) {
      if (isElement4(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element7);
    }
  }
  const win = domElement ? getWindow2(domElement) : window;
  const addVisualOffsets = isClientRectVisualViewportBased() && isFixedStrategy;
  let x3 = (clientRect2.left + (addVisualOffsets ? ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0 : 0)) / scale.x;
  let y = (clientRect2.top + (addVisualOffsets ? ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0 : 0)) / scale.y;
  let width = clientRect2.width / scale.x;
  let height = clientRect2.height / scale.y;
  if (domElement) {
    const win2 = getWindow2(domElement);
    const offsetWin = offsetParent && isElement4(offsetParent) ? getWindow2(offsetParent) : offsetParent;
    let currentIFrame = win2.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== win2) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css2 = getComputedStyle(currentIFrame);
      iframeRect.x += (currentIFrame.clientLeft + parseFloat(css2.paddingLeft)) * iframeScale.x;
      iframeRect.y += (currentIFrame.clientTop + parseFloat(css2.paddingTop)) * iframeScale.y;
      x3 *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x3 += iframeRect.x;
      y += iframeRect.y;
      currentIFrame = getWindow2(currentIFrame).frameElement;
    }
  }
  return rectToClientRect2({
    width,
    height,
    x: x3,
    y
  });
}
function getDocumentElement2(node4) {
  return ((isNode(node4) ? node4.ownerDocument : node4.document) || window.document).documentElement;
}
function getNodeScroll2(element7) {
  if (isElement4(element7)) {
    return {
      scrollLeft: element7.scrollLeft,
      scrollTop: element7.scrollTop
    };
  }
  return {
    scrollLeft: element7.pageXOffset,
    scrollTop: element7.pageYOffset
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement2(offsetParent);
  const documentElement = getDocumentElement2(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = {
    x: 1,
    y: 1
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName2(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll2(offsetParent);
    }
    if (isHTMLElement2(offsetParent)) {
      const offsetRect = getBoundingClientRect2(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getWindowScrollBarX2(element7) {
  return getBoundingClientRect2(getDocumentElement2(element7)).left + getNodeScroll2(element7).scrollLeft;
}
function getDocumentRect2(element7) {
  const html7 = getDocumentElement2(element7);
  const scroll = getNodeScroll2(element7);
  const body3 = element7.ownerDocument.body;
  const width = max3(html7.scrollWidth, html7.clientWidth, body3.scrollWidth, body3.clientWidth);
  const height = max3(html7.scrollHeight, html7.clientHeight, body3.scrollHeight, body3.clientHeight);
  let x3 = -scroll.scrollLeft + getWindowScrollBarX2(element7);
  const y = -scroll.scrollTop;
  if (getComputedStyle$1(body3).direction === "rtl") {
    x3 += max3(html7.clientWidth, body3.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x3,
    y
  };
}
function getParentNode2(node4) {
  if (getNodeName2(node4) === "html") {
    return node4;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node4.assignedSlot || // DOM Element detected.
    node4.parentNode || // ShadowRoot detected.
    isShadowRoot2(node4) && node4.host || // Fallback.
    getDocumentElement2(node4)
  );
  return isShadowRoot2(result) ? result.host : result;
}
function getNearestOverflowAncestor(node4) {
  const parentNode2 = getParentNode2(node4);
  if (isLastTraversableNode(parentNode2)) {
    return parentNode2.ownerDocument.body;
  }
  if (isHTMLElement2(parentNode2) && isOverflowElement(parentNode2)) {
    return parentNode2;
  }
  return getNearestOverflowAncestor(parentNode2);
}
function getOverflowAncestors(node4, list6) {
  var _node$ownerDocument;
  if (list6 === void 0) {
    list6 = [];
  }
  const scrollableAncestor = getNearestOverflowAncestor(node4);
  const isBody = scrollableAncestor === ((_node$ownerDocument = node4.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  const win = getWindow2(scrollableAncestor);
  if (isBody) {
    return list6.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []);
  }
  return list6.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor));
}
function getViewportRect2(element7, strategy) {
  const win = getWindow2(element7);
  const html7 = getDocumentElement2(element7);
  const visualViewport = win.visualViewport;
  let width = html7.clientWidth;
  let height = html7.clientHeight;
  let x3 = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isClientRectVisualViewportBased();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x3 = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x3,
    y
  };
}
function getInnerBoundingClientRect2(element7, strategy) {
  const clientRect2 = getBoundingClientRect2(element7, true, strategy === "fixed");
  const top2 = clientRect2.top + element7.clientTop;
  const left2 = clientRect2.left + element7.clientLeft;
  const scale = isHTMLElement2(element7) ? getScale(element7) : {
    x: 1,
    y: 1
  };
  const width = element7.clientWidth * scale.x;
  const height = element7.clientHeight * scale.y;
  const x3 = left2 * scale.x;
  const y = top2 * scale.y;
  return {
    width,
    height,
    x: x3,
    y
  };
}
function getClientRectFromClippingAncestor(element7, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect2(element7, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect2(getDocumentElement2(element7));
  } else if (isElement4(clippingAncestor)) {
    rect = getInnerBoundingClientRect2(clippingAncestor, strategy);
  } else {
    const mutableRect = {
      ...clippingAncestor
    };
    if (isClientRectVisualViewportBased()) {
      var _win$visualViewport, _win$visualViewport2;
      const win = getWindow2(element7);
      mutableRect.x -= ((_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) || 0;
      mutableRect.y -= ((_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) || 0;
    }
    rect = mutableRect;
  }
  return rectToClientRect2(rect);
}
function hasFixedPositionAncestor(element7, stopNode) {
  const parentNode2 = getParentNode2(element7);
  if (parentNode2 === stopNode || !isElement4(parentNode2) || isLastTraversableNode(parentNode2)) {
    return false;
  }
  return getComputedStyle$1(parentNode2).position === "fixed" || hasFixedPositionAncestor(parentNode2, stopNode);
}
function getClippingElementAncestors(element7, cache) {
  const cachedResult2 = cache.get(element7);
  if (cachedResult2) {
    return cachedResult2;
  }
  let result = getOverflowAncestors(element7).filter((el) => isElement4(el) && getNodeName2(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle$1(element7).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode2(element7) : element7;
  while (isElement4(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle$1(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element7, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode2(currentNode);
  }
  cache.set(element7, result);
  return result;
}
function getClippingRect2(_ref) {
  let {
    element: element7,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element7, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element7, clippingAncestor, strategy);
    accRect.top = max3(rect.top, accRect.top);
    accRect.right = min3(rect.right, accRect.right);
    accRect.bottom = min3(rect.bottom, accRect.bottom);
    accRect.left = max3(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element7, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element7) {
  return getCssDimensions(element7);
}
function getTrueOffsetParent2(element7, polyfill) {
  if (!isHTMLElement2(element7) || getComputedStyle$1(element7).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element7);
  }
  return element7.offsetParent;
}
function getContainingBlock2(element7) {
  let currentNode = getParentNode2(element7);
  while (isHTMLElement2(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      currentNode = getParentNode2(currentNode);
    }
  }
  return null;
}
function getOffsetParent2(element7, polyfill) {
  const window2 = getWindow2(element7);
  if (!isHTMLElement2(element7)) {
    return window2;
  }
  let offsetParent = getTrueOffsetParent2(element7, polyfill);
  while (offsetParent && isTableElement2(offsetParent) && getComputedStyle$1(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent2(offsetParent, polyfill);
  }
  if (offsetParent && (getNodeName2(offsetParent) === "html" || getNodeName2(offsetParent) === "body" && getComputedStyle$1(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock2(element7) || window2;
}
function getRectRelativeToOffsetParent(element7, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement2(offsetParent);
  const documentElement = getDocumentElement2(offsetParent);
  const rect = getBoundingClientRect2(element7, true, strategy === "fixed", offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName2(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll2(offsetParent);
    }
    if (isHTMLElement2(offsetParent)) {
      const offsetRect = getBoundingClientRect2(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX2(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
var platform = {
  getClippingRect: getClippingRect2,
  convertOffsetParentRelativeRectToViewportRelativeRect,
  isElement: isElement4,
  getDimensions,
  getOffsetParent: getOffsetParent2,
  getDocumentElement: getDocumentElement2,
  getScale,
  async getElementRects(_ref) {
    let {
      reference: reference2,
      floating,
      strategy
    } = _ref;
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent2;
    const getDimensionsFn = this.getDimensions;
    return {
      reference: getRectRelativeToOffsetParent(reference2, await getOffsetParentFn(floating), strategy),
      floating: {
        x: 0,
        y: 0,
        ...await getDimensionsFn(floating)
      }
    };
  },
  getClientRects: (element7) => Array.from(element7.getClientRects()),
  isRTL: (element7) => getComputedStyle$1(element7).direction === "rtl"
};
function autoUpdate(reference2, floating, update, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = true,
    animationFrame = false
  } = options2;
  const ancestors = ancestorScroll || ancestorResize ? [...isElement4(reference2) ? getOverflowAncestors(reference2) : reference2.contextElement ? getOverflowAncestors(reference2.contextElement) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    const isVisualViewport = !isElement4(ancestor) && ancestor.toString().includes("V");
    if (ancestorScroll && (animationFrame ? isVisualViewport : true)) {
      ancestor.addEventListener("scroll", update, {
        passive: true
      });
    }
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  let observer = null;
  if (elementResize) {
    observer = new ResizeObserver(() => {
      update();
    });
    isElement4(reference2) && !animationFrame && observer.observe(reference2);
    if (!isElement4(reference2) && reference2.contextElement && !animationFrame) {
      observer.observe(reference2.contextElement);
    }
    observer.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect2(reference2) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect2(reference2);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _observer;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    (_observer = observer) == null ? void 0 : _observer.disconnect();
    observer = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var computePosition2 = (reference2, floating, options2) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options2
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference2, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js
var React50 = __toESM(require_react());
var import_react117 = __toESM(require_react());
var ReactDOM2 = __toESM(require_react_dom());
var arrow3 = (options2) => {
  const {
    element: element7,
    padding: padding2
  } = options2;
  function isRef(value) {
    return Object.prototype.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options: options2,
    fn(args2) {
      if (isRef(element7)) {
        if (element7.current != null) {
          return arrow2({
            element: element7.current,
            padding: padding2
          }).fn(args2);
        }
        return {};
      } else if (element7) {
        return arrow2({
          element: element7,
          padding: padding2
        }).fn(args2);
      }
      return {};
    }
  };
};
var index = typeof document !== "undefined" ? import_react117.useLayoutEffect : import_react117.useEffect;
function deepEqual(a2, b2) {
  if (a2 === b2) {
    return true;
  }
  if (typeof a2 !== typeof b2) {
    return false;
  }
  if (typeof a2 === "function" && a2.toString() === b2.toString()) {
    return true;
  }
  let length4, i, keys5;
  if (a2 && b2 && typeof a2 == "object") {
    if (Array.isArray(a2)) {
      length4 = a2.length;
      if (length4 != b2.length)
        return false;
      for (i = length4; i-- !== 0; ) {
        if (!deepEqual(a2[i], b2[i])) {
          return false;
        }
      }
      return true;
    }
    keys5 = Object.keys(a2);
    length4 = keys5.length;
    if (length4 !== Object.keys(b2).length) {
      return false;
    }
    for (i = length4; i-- !== 0; ) {
      if (!Object.prototype.hasOwnProperty.call(b2, keys5[i])) {
        return false;
      }
    }
    for (i = length4; i-- !== 0; ) {
      const key2 = keys5[i];
      if (key2 === "_owner" && a2.$$typeof) {
        continue;
      }
      if (!deepEqual(a2[key2], b2[key2])) {
        return false;
      }
    }
    return true;
  }
  return a2 !== a2 && b2 !== b2;
}
function useLatestRef(value) {
  const ref = React50.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2,
    whileElementsMounted,
    open
  } = options2;
  const [data, setData] = React50.useState({
    x: null,
    y: null,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React50.useState(middleware2);
  if (!deepEqual(latestMiddleware, middleware2)) {
    setLatestMiddleware(middleware2);
  }
  const referenceRef = React50.useRef(null);
  const floatingRef = React50.useRef(null);
  const dataRef = React50.useRef(data);
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const [reference2, _setReference] = React50.useState(null);
  const [floating, _setFloating] = React50.useState(null);
  const setReference = React50.useCallback((node4) => {
    if (referenceRef.current !== node4) {
      referenceRef.current = node4;
      _setReference(node4);
    }
  }, []);
  const setFloating = React50.useCallback((node4) => {
    if (floatingRef.current !== node4) {
      floatingRef.current = node4;
      _setFloating(node4);
    }
  }, []);
  const update = React50.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM2.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React50.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (reference2 && floating) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(reference2, floating, update);
      } else {
        update();
      }
    }
  }, [reference2, floating, update, whileElementsMountedRef]);
  const refs = React50.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React50.useMemo(() => ({
    reference: reference2,
    floating
  }), [reference2, floating]);
  return React50.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    reference: setReference,
    floating: setFloating
  }), [data, update, refs, elements, setReference, setFloating]);
}

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var index2 = typeof document !== "undefined" ? import_react118.useLayoutEffect : import_react118.useEffect;
var serverHandoffComplete = false;
var count = 0;
var genId = () => "floating-ui-" + count++;
function useFloatingId() {
  const [id2, setId] = React51.useState(() => serverHandoffComplete ? genId() : void 0);
  index2(() => {
    if (id2 == null) {
      setId(genId());
    }
  }, []);
  React51.useEffect(() => {
    if (!serverHandoffComplete) {
      serverHandoffComplete = true;
    }
  }, []);
  return id2;
}
var useReactId2 = React51["useId".toString()];
var useId2 = useReactId2 || useFloatingId;
function createPubSub() {
  const map6 = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map6.get(event)) == null ? void 0 : _map$get.forEach((handler) => handler(data));
    },
    on(event, listener) {
      map6.set(event, [...map6.get(event) || [], listener]);
    },
    off(event, listener) {
      map6.set(event, (map6.get(event) || []).filter((l) => l !== listener));
    }
  };
}
var FloatingNodeContext = React51.createContext(null);
var FloatingTreeContext = React51.createContext(null);
var useFloatingParentNodeId = () => {
  var _React$useContext;
  return ((_React$useContext = React51.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
var useFloatingTree = () => React51.useContext(FloatingTreeContext);
function getDocument(node4) {
  return (node4 == null ? void 0 : node4.ownerDocument) || document;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version
      } = _ref;
      return brand + "/" + version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function getWindow3(value) {
  return getDocument(value).defaultView || window;
}
function isElement5(value) {
  return value ? value instanceof getWindow3(value).Element : false;
}
function isHTMLElement3(value) {
  return value ? value instanceof getWindow3(value).HTMLElement : false;
}
function isShadowRoot3(node4) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow3(node4).ShadowRoot;
  return node4 instanceof OwnElement || node4 instanceof ShadowRoot;
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }
  const androidRe = /Android/i;
  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {
    return event.type === "click" && event.buttons === 1;
  }
  return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isMac() {
  return getPlatform().toLowerCase().startsWith("mac") && !navigator.maxTouchPoints;
}
function isMouseLikePointerType(pointerType, strict) {
  const values2 = ["mouse", "pen"];
  if (!strict) {
    values2.push("", void 0);
  }
  return values2.includes(pointerType);
}
function useLatestRef2(value) {
  const ref = (0, import_react118.useRef)(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
var safePolygonIdentifier = "data-floating-ui-safe-polygon";
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
var useHover2 = function(context, _temp) {
  let {
    enabled = true,
    delay = 0,
    handleClose = null,
    mouseOnly = false,
    restMs = 0,
    move = true
  } = _temp === void 0 ? {} : _temp;
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    elements: {
      domReference,
      floating
    },
    refs
  } = context;
  const tree = useFloatingTree();
  const parentId = useFloatingParentNodeId();
  const handleCloseRef = useLatestRef2(handleClose);
  const delayRef = useLatestRef2(delay);
  const pointerTypeRef = React51.useRef();
  const timeoutRef = React51.useRef();
  const handlerRef = React51.useRef();
  const restTimeoutRef = React51.useRef();
  const blockMouseMoveRef = React51.useRef(true);
  const performedPointerEventsMutationRef = React51.useRef(false);
  const unbindMouseMoveRef = React51.useRef(() => {
  });
  const isHoverOpen = React51.useCallback(() => {
    var _dataRef$current$open;
    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
    return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
  }, [dataRef]);
  React51.useEffect(() => {
    if (!enabled) {
      return;
    }
    function onDismiss() {
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      blockMouseMoveRef.current = true;
    }
    events.on("dismiss", onDismiss);
    return () => {
      events.off("dismiss", onDismiss);
    };
  }, [enabled, events]);
  React51.useEffect(() => {
    if (!enabled || !handleCloseRef.current || !open) {
      return;
    }
    function onLeave() {
      if (isHoverOpen()) {
        onOpenChange(false);
      }
    }
    const html7 = getDocument(floating).documentElement;
    html7.addEventListener("mouseleave", onLeave);
    return () => {
      html7.removeEventListener("mouseleave", onLeave);
    };
  }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);
  const closeWithDelay = React51.useCallback(function(runElseBranch) {
    if (runElseBranch === void 0) {
      runElseBranch = true;
    }
    const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
    if (closeDelay && !handlerRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = setTimeout(() => onOpenChange(false), closeDelay);
    } else if (runElseBranch) {
      clearTimeout(timeoutRef.current);
      onOpenChange(false);
    }
  }, [delayRef, onOpenChange]);
  const cleanupMouseMoveHandler = React51.useCallback(() => {
    unbindMouseMoveRef.current();
    handlerRef.current = void 0;
  }, []);
  const clearPointerEvents = React51.useCallback(() => {
    if (performedPointerEventsMutationRef.current) {
      const body3 = getDocument(refs.floating.current).body;
      body3.style.pointerEvents = "";
      body3.removeAttribute(safePolygonIdentifier);
      performedPointerEventsMutationRef.current = false;
    }
  }, [refs]);
  React51.useEffect(() => {
    if (!enabled) {
      return;
    }
    function isClickLikeOpenEvent() {
      return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
    }
    function onMouseEnter(event) {
      clearTimeout(timeoutRef.current);
      blockMouseMoveRef.current = false;
      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, "open") === 0) {
        return;
      }
      dataRef.current.openEvent = event;
      const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
      if (openDelay) {
        timeoutRef.current = setTimeout(() => {
          onOpenChange(true);
        }, openDelay);
      } else {
        onOpenChange(true);
      }
    }
    function onMouseLeave(event) {
      if (isClickLikeOpenEvent()) {
        return;
      }
      unbindMouseMoveRef.current();
      const doc4 = getDocument(floating);
      clearTimeout(restTimeoutRef.current);
      if (handleCloseRef.current) {
        if (!open) {
          clearTimeout(timeoutRef.current);
        }
        handlerRef.current = handleCloseRef.current({
          ...context,
          tree,
          x: event.clientX,
          y: event.clientY,
          onClose() {
            clearPointerEvents();
            cleanupMouseMoveHandler();
            closeWithDelay();
          }
        });
        const handler = handlerRef.current;
        doc4.addEventListener("mousemove", handler);
        unbindMouseMoveRef.current = () => {
          doc4.removeEventListener("mousemove", handler);
        };
        return;
      }
      closeWithDelay();
    }
    function onScrollMouseLeave(event) {
      if (isClickLikeOpenEvent()) {
        return;
      }
      handleCloseRef.current == null ? void 0 : handleCloseRef.current({
        ...context,
        tree,
        x: event.clientX,
        y: event.clientY,
        onClose() {
          clearPointerEvents();
          cleanupMouseMoveHandler();
          closeWithDelay();
        }
      })(event);
    }
    if (isElement5(domReference)) {
      const ref = domReference;
      open && ref.addEventListener("mouseleave", onScrollMouseLeave);
      floating == null ? void 0 : floating.addEventListener("mouseleave", onScrollMouseLeave);
      move && ref.addEventListener("mousemove", onMouseEnter, {
        once: true
      });
      ref.addEventListener("mouseenter", onMouseEnter);
      ref.addEventListener("mouseleave", onMouseLeave);
      return () => {
        open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
        floating == null ? void 0 : floating.removeEventListener("mouseleave", onScrollMouseLeave);
        move && ref.removeEventListener("mousemove", onMouseEnter);
        ref.removeEventListener("mouseenter", onMouseEnter);
        ref.removeEventListener("mouseleave", onMouseLeave);
      };
    }
  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);
  index2(() => {
    var _handleCloseRef$curre;
    if (!enabled) {
      return;
    }
    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
      const body3 = getDocument(floating).body;
      body3.setAttribute(safePolygonIdentifier, "");
      body3.style.pointerEvents = "none";
      performedPointerEventsMutationRef.current = true;
      if (isElement5(domReference) && floating) {
        var _tree$nodesRef$curren, _tree$nodesRef$curren2;
        const ref = domReference;
        const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node4) => node4.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
        if (parentFloating) {
          parentFloating.style.pointerEvents = "";
        }
        ref.style.pointerEvents = "auto";
        floating.style.pointerEvents = "auto";
        return () => {
          ref.style.pointerEvents = "";
          floating.style.pointerEvents = "";
        };
      }
    }
  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);
  index2(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
      cleanupMouseMoveHandler();
      clearPointerEvents();
    }
  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
  React51.useEffect(() => {
    return () => {
      cleanupMouseMoveHandler();
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      clearPointerEvents();
    };
  }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);
  return React51.useMemo(() => {
    if (!enabled) {
      return {};
    }
    function setPointerRef(event) {
      pointerTypeRef.current = event.pointerType;
    }
    return {
      reference: {
        onPointerDown: setPointerRef,
        onPointerEnter: setPointerRef,
        onMouseMove() {
          if (open || restMs === 0) {
            return;
          }
          clearTimeout(restTimeoutRef.current);
          restTimeoutRef.current = setTimeout(() => {
            if (!blockMouseMoveRef.current) {
              onOpenChange(true);
            }
          }, restMs);
        }
      },
      floating: {
        onMouseEnter() {
          clearTimeout(timeoutRef.current);
        },
        onMouseLeave() {
          events.emit("dismiss", {
            type: "mouseLeave",
            data: {
              returnFocus: false
            }
          });
          closeWithDelay(false);
        }
      }
    };
  }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);
};
var FloatingDelayGroupContext = React51.createContext({
  delay: 0,
  initialDelay: 0,
  timeoutMs: 0,
  currentId: null,
  setCurrentId: () => {
  },
  setState: () => {
  },
  isInstantPhase: false
});
var useDelayGroupContext = () => React51.useContext(FloatingDelayGroupContext);
var FloatingDelayGroup = (_ref) => {
  let {
    children,
    delay,
    timeoutMs = 0
  } = _ref;
  const [state, setState] = React51.useReducer((prev2, next2) => ({
    ...prev2,
    ...next2
  }), {
    delay,
    timeoutMs,
    initialDelay: delay,
    currentId: null,
    isInstantPhase: false
  });
  const initialCurrentIdRef = React51.useRef(null);
  const setCurrentId = React51.useCallback((currentId) => {
    setState({
      currentId
    });
  }, []);
  index2(() => {
    if (state.currentId) {
      if (initialCurrentIdRef.current === null) {
        initialCurrentIdRef.current = state.currentId;
      } else {
        setState({
          isInstantPhase: true
        });
      }
    } else {
      setState({
        isInstantPhase: false
      });
      initialCurrentIdRef.current = null;
    }
  }, [state.currentId]);
  return React51.createElement(FloatingDelayGroupContext.Provider, {
    value: React51.useMemo(() => ({
      ...state,
      setState,
      setCurrentId
    }), [state, setState, setCurrentId])
  }, children);
};
var useDelayGroup = (_ref2, _ref3) => {
  let {
    open,
    onOpenChange
  } = _ref2;
  let {
    id: id2
  } = _ref3;
  const {
    currentId,
    setCurrentId,
    initialDelay,
    setState,
    timeoutMs
  } = useDelayGroupContext();
  React51.useEffect(() => {
    if (currentId) {
      setState({
        delay: {
          open: 1,
          close: getDelay(initialDelay, "close")
        }
      });
      if (currentId !== id2) {
        onOpenChange(false);
      }
    }
  }, [id2, onOpenChange, setState, currentId, initialDelay]);
  React51.useEffect(() => {
    function unset() {
      onOpenChange(false);
      setState({
        delay: initialDelay,
        currentId: null
      });
    }
    if (!open && currentId === id2) {
      if (timeoutMs) {
        const timeout2 = window.setTimeout(unset, timeoutMs);
        return () => {
          clearTimeout(timeout2);
        };
      } else {
        unset();
      }
    }
  }, [open, setState, currentId, id2, onOpenChange, initialDelay, timeoutMs]);
  React51.useEffect(() => {
    if (open) {
      setCurrentId(id2);
    }
  }, [open, setCurrentId, id2]);
};
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source2 = arguments[i];
      for (var key2 in source2) {
        if (Object.prototype.hasOwnProperty.call(source2, key2)) {
          target[key2] = source2[key2];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function activeElement$1(doc4) {
  let activeElement2 = doc4.activeElement;
  while (((_activeElement = activeElement2) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {
    var _activeElement, _activeElement$shadow;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function contains2(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot3(rootNode)) {
    let next2 = child;
    do {
      if (next2 && parent === next2) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}
function getChildren2(nodes, id2) {
  let allChildren = nodes.filter((node4) => {
    var _node$context;
    return node4.parentId === id2 && ((_node$context = node4.context) == null ? void 0 : _node$context.open);
  }) || [];
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node4) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n) => {
        var _node$context2;
        return node4.parentId === n.id && ((_node$context2 = node4.context) == null ? void 0 : _node$context2.open);
      });
    }) || [];
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
var useInsertionEffect3 = React51["useInsertionEffect".toString()];
var useSafeInsertionEffect = useInsertionEffect3 || ((fn3) => fn3());
function useEvent(callback) {
  const ref = React51.useRef(() => {
    if (true) {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React51.useCallback(function() {
    for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
      args2[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args2);
  }, []);
}
var HIDDEN_STYLES = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "fixed",
  whiteSpace: "nowrap",
  width: "1px",
  top: 0,
  left: 0
};
var activeElement;
var timeoutId;
function setActiveElementOnTab(event) {
  if (event.key === "Tab") {
    activeElement = event.target;
    clearTimeout(timeoutId);
  }
}
function isTabFocus(event) {
  const result = activeElement === event.relatedTarget;
  activeElement = event.relatedTarget;
  clearTimeout(timeoutId);
  return result;
}
var FocusGuard = React51.forwardRef(function FocusGuard2(props, ref) {
  const onFocus = useEvent(props.onFocus);
  const [role, setRole] = React51.useState();
  index2(() => {
    if (isSafari()) {
      setRole("button");
    }
    document.addEventListener("keydown", setActiveElementOnTab);
    return () => {
      document.removeEventListener("keydown", setActiveElementOnTab);
    };
  }, []);
  return React51.createElement("span", _extends2({}, props, {
    ref,
    tabIndex: 0,
    role,
    "aria-hidden": role ? void 0 : true,
    "data-floating-ui-focus-guard": "",
    style: HIDDEN_STYLES,
    onFocus: (event) => {
      if (isSafari() && isMac() && !isTabFocus(event)) {
        event.persist();
        timeoutId = window.setTimeout(() => {
          onFocus(event);
        }, 50);
      } else {
        onFocus(event);
      }
    }
  }));
});
var PortalContext = React51.createContext(null);
var VisuallyHiddenDismiss = React51.forwardRef(function VisuallyHiddenDismiss2(props, ref) {
  return React51.createElement("button", _extends2({}, props, {
    type: "button",
    ref,
    tabIndex: -1,
    style: HIDDEN_STYLES
  }));
});
var identifier2 = "data-floating-ui-scroll-lock";
var FloatingOverlay = React51.forwardRef(function FloatingOverlay2(_ref, ref) {
  let {
    lockScroll = false,
    ...rest
  } = _ref;
  index2(() => {
    var _window$visualViewpor, _window$visualViewpor2;
    if (!lockScroll) {
      return;
    }
    const alreadyLocked = document.body.hasAttribute(identifier2);
    if (alreadyLocked) {
      return;
    }
    document.body.setAttribute(identifier2, "");
    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
    const paddingProp = scrollbarX ? "paddingLeft" : "paddingRight";
    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
    if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {
      Object.assign(document.body.style, {
        overflow: "hidden",
        [paddingProp]: scrollbarWidth + "px"
      });
      return () => {
        document.body.removeAttribute(identifier2);
        Object.assign(document.body.style, {
          overflow: "",
          [paddingProp]: ""
        });
      };
    }
    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
    const scrollX = window.pageXOffset;
    const scrollY = window.pageYOffset;
    Object.assign(document.body.style, {
      position: "fixed",
      overflow: "hidden",
      top: -(scrollY - Math.floor(offsetTop)) + "px",
      left: -(scrollX - Math.floor(offsetLeft)) + "px",
      right: "0",
      [paddingProp]: scrollbarWidth + "px"
    });
    return () => {
      Object.assign(document.body.style, {
        position: "",
        overflow: "",
        top: "",
        left: "",
        right: "",
        [paddingProp]: ""
      });
      document.body.removeAttribute(identifier2);
      window.scrollTo(scrollX, scrollY);
    };
  }, [lockScroll]);
  return React51.createElement("div", _extends2({
    ref
  }, rest, {
    style: {
      position: "fixed",
      overflow: "auto",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...rest.style
    }
  }));
});
function isEventTargetWithin(event, node4) {
  if (node4 == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node4);
  }
  const e = event;
  return e.target != null && node4.contains(e.target);
}
var bubbleHandlerKeys = {
  pointerdown: "onPointerDown",
  mousedown: "onMouseDown",
  click: "onClick"
};
var captureHandlerKeys = {
  pointerdown: "onPointerDownCapture",
  mousedown: "onMouseDownCapture",
  click: "onClickCapture"
};
var normalizeBubblesProp = function(bubbles) {
  var _bubbles$escapeKey, _bubbles$outsidePress;
  if (bubbles === void 0) {
    bubbles = true;
  }
  return {
    escapeKeyBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$escapeKey = bubbles.escapeKey) != null ? _bubbles$escapeKey : true,
    outsidePressBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$outsidePress = bubbles.outsidePress) != null ? _bubbles$outsidePress : true
  };
};
var useDismiss = function(_ref, _temp) {
  let {
    open,
    onOpenChange,
    events,
    nodeId,
    elements: {
      reference: reference2,
      domReference,
      floating
    },
    dataRef
  } = _ref;
  let {
    enabled = true,
    escapeKey = true,
    outsidePress: unstable_outsidePress = true,
    outsidePressEvent = "pointerdown",
    referencePress = false,
    referencePressEvent = "pointerdown",
    ancestorScroll = false,
    bubbles = true
  } = _temp === void 0 ? {} : _temp;
  const tree = useFloatingTree();
  const nested = useFloatingParentNodeId() != null;
  const outsidePressFn = useEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
  const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
  const insideReactTreeRef = React51.useRef(false);
  const {
    escapeKeyBubbles,
    outsidePressBubbles
  } = normalizeBubblesProp(bubbles);
  React51.useEffect(() => {
    if (!open || !enabled) {
      return;
    }
    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
    dataRef.current.__outsidePressBubbles = outsidePressBubbles;
    function onKeyDown(event) {
      if (event.key === "Escape") {
        const children = tree ? getChildren2(tree.nodesRef.current, nodeId) : [];
        if (children.length > 0) {
          let shouldDismiss = true;
          children.forEach((child) => {
            var _child$context;
            if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
              shouldDismiss = false;
              return;
            }
          });
          if (!shouldDismiss) {
            return;
          }
        }
        events.emit("dismiss", {
          type: "escapeKey",
          data: {
            returnFocus: {
              preventScroll: false
            }
          }
        });
        onOpenChange(false);
      }
    }
    function onOutsidePress(event) {
      const insideReactTree = insideReactTreeRef.current;
      insideReactTreeRef.current = false;
      if (insideReactTree) {
        return;
      }
      if (typeof outsidePress === "function" && !outsidePress(event)) {
        return;
      }
      const target = getTarget(event);
      if (isHTMLElement3(target) && floating) {
        const win = floating.ownerDocument.defaultView || window;
        const canScrollX = target.scrollWidth > target.clientWidth;
        const canScrollY = target.scrollHeight > target.clientHeight;
        let xCond = canScrollY && event.offsetX > target.clientWidth;
        if (canScrollY) {
          const isRTL = win.getComputedStyle(target).direction === "rtl";
          if (isRTL) {
            xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
          }
        }
        if (xCond || canScrollX && event.offsetY > target.clientHeight) {
          return;
        }
      }
      const targetIsInsideChildren = tree && getChildren2(tree.nodesRef.current, nodeId).some((node4) => {
        var _node$context;
        return isEventTargetWithin(event, (_node$context = node4.context) == null ? void 0 : _node$context.elements.floating);
      });
      if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {
        return;
      }
      const children = tree ? getChildren2(tree.nodesRef.current, nodeId) : [];
      if (children.length > 0) {
        let shouldDismiss = true;
        children.forEach((child) => {
          var _child$context2;
          if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
            shouldDismiss = false;
            return;
          }
        });
        if (!shouldDismiss) {
          return;
        }
      }
      events.emit("dismiss", {
        type: "outsidePress",
        data: {
          returnFocus: nested ? {
            preventScroll: true
          } : isVirtualClick(event) || isVirtualPointerEvent(event)
        }
      });
      onOpenChange(false);
    }
    function onScroll() {
      onOpenChange(false);
    }
    const doc4 = getDocument(floating);
    escapeKey && doc4.addEventListener("keydown", onKeyDown);
    outsidePress && doc4.addEventListener(outsidePressEvent, onOutsidePress);
    let ancestors = [];
    if (ancestorScroll) {
      if (isElement5(domReference)) {
        ancestors = getOverflowAncestors(domReference);
      }
      if (isElement5(floating)) {
        ancestors = ancestors.concat(getOverflowAncestors(floating));
      }
      if (!isElement5(reference2) && reference2 && reference2.contextElement) {
        ancestors = ancestors.concat(getOverflowAncestors(reference2.contextElement));
      }
    }
    ancestors = ancestors.filter((ancestor) => {
      var _doc$defaultView;
      return ancestor !== ((_doc$defaultView = doc4.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
    });
    ancestors.forEach((ancestor) => {
      ancestor.addEventListener("scroll", onScroll, {
        passive: true
      });
    });
    return () => {
      escapeKey && doc4.removeEventListener("keydown", onKeyDown);
      outsidePress && doc4.removeEventListener(outsidePressEvent, onOutsidePress);
      ancestors.forEach((ancestor) => {
        ancestor.removeEventListener("scroll", onScroll);
      });
    };
  }, [dataRef, floating, domReference, reference2, escapeKey, outsidePress, outsidePressEvent, events, tree, nodeId, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, nested]);
  React51.useEffect(() => {
    insideReactTreeRef.current = false;
  }, [outsidePress, outsidePressEvent]);
  return React51.useMemo(() => {
    if (!enabled) {
      return {};
    }
    return {
      reference: {
        [bubbleHandlerKeys[referencePressEvent]]: () => {
          if (referencePress) {
            events.emit("dismiss", {
              type: "referencePress",
              data: {
                returnFocus: false
              }
            });
            onOpenChange(false);
          }
        }
      },
      floating: {
        [captureHandlerKeys[outsidePressEvent]]: () => {
          insideReactTreeRef.current = true;
        }
      }
    };
  }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange]);
};
var useFocus = function(_ref, _temp) {
  let {
    open,
    onOpenChange,
    dataRef,
    events,
    refs,
    elements: {
      floating,
      domReference
    }
  } = _ref;
  let {
    enabled = true,
    keyboardOnly = true
  } = _temp === void 0 ? {} : _temp;
  const pointerTypeRef = React51.useRef("");
  const blockFocusRef = React51.useRef(false);
  const timeoutRef = React51.useRef();
  React51.useEffect(() => {
    if (!enabled) {
      return;
    }
    const doc4 = getDocument(floating);
    const win = doc4.defaultView || window;
    function onBlur() {
      if (!open && isHTMLElement3(domReference) && domReference === activeElement$1(getDocument(domReference))) {
        blockFocusRef.current = true;
      }
    }
    win.addEventListener("blur", onBlur);
    return () => {
      win.removeEventListener("blur", onBlur);
    };
  }, [floating, domReference, open, enabled]);
  React51.useEffect(() => {
    if (!enabled) {
      return;
    }
    function onDismiss(payload) {
      if (payload.type === "referencePress" || payload.type === "escapeKey") {
        blockFocusRef.current = true;
      }
    }
    events.on("dismiss", onDismiss);
    return () => {
      events.off("dismiss", onDismiss);
    };
  }, [events, enabled]);
  React51.useEffect(() => {
    return () => {
      clearTimeout(timeoutRef.current);
    };
  }, []);
  return React51.useMemo(() => {
    if (!enabled) {
      return {};
    }
    return {
      reference: {
        onPointerDown(_ref2) {
          let {
            pointerType
          } = _ref2;
          pointerTypeRef.current = pointerType;
          blockFocusRef.current = !!(pointerType && keyboardOnly);
        },
        onMouseLeave() {
          blockFocusRef.current = false;
        },
        onFocus(event) {
          var _dataRef$current$open;
          if (blockFocusRef.current) {
            return;
          }
          if (event.type === "focus" && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === "mousedown" && dataRef.current.openEvent && isEventTargetWithin(dataRef.current.openEvent, domReference)) {
            return;
          }
          dataRef.current.openEvent = event.nativeEvent;
          onOpenChange(true);
        },
        onBlur(event) {
          blockFocusRef.current = false;
          const relatedTarget = event.relatedTarget;
          const movedToFocusGuard = isElement5(relatedTarget) && relatedTarget.hasAttribute("data-floating-ui-focus-guard") && relatedTarget.getAttribute("data-type") === "outside";
          timeoutRef.current = setTimeout(() => {
            if (contains2(refs.floating.current, relatedTarget) || contains2(domReference, relatedTarget) || movedToFocusGuard) {
              return;
            }
            onOpenChange(false);
          });
        }
      }
    };
  }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);
};
var useRole = function(_ref, _temp) {
  let {
    open
  } = _ref;
  let {
    enabled = true,
    role = "dialog"
  } = _temp === void 0 ? {} : _temp;
  const rootId = useId2();
  const referenceId = useId2();
  return React51.useMemo(() => {
    const floatingProps = {
      id: rootId,
      role
    };
    if (!enabled) {
      return {};
    }
    if (role === "tooltip") {
      return {
        reference: {
          "aria-describedby": open ? rootId : void 0
        },
        floating: floatingProps
      };
    }
    return {
      reference: {
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": role === "alertdialog" ? "dialog" : role,
        "aria-controls": open ? rootId : void 0,
        ...role === "listbox" && {
          role: "combobox"
        },
        ...role === "menu" && {
          id: referenceId
        }
      },
      floating: {
        ...floatingProps,
        ...role === "menu" && {
          "aria-labelledby": referenceId
        }
      }
    };
  }, [enabled, role, open, rootId, referenceId]);
};
function useFloating2(options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  const {
    open = false,
    onOpenChange: unstable_onOpenChange,
    nodeId
  } = options2;
  const position5 = useFloating(options2);
  const tree = useFloatingTree();
  const domReferenceRef = React51.useRef(null);
  const dataRef = React51.useRef({});
  const events = React51.useState(() => createPubSub())[0];
  const [domReference, setDomReference] = React51.useState(null);
  const setPositionReference = React51.useCallback((node4) => {
    const positionReference = isElement5(node4) ? {
      getBoundingClientRect: () => node4.getBoundingClientRect(),
      contextElement: node4
    } : node4;
    position5.refs.setReference(positionReference);
  }, [position5.refs]);
  const setReference = React51.useCallback((node4) => {
    if (isElement5(node4) || node4 === null) {
      domReferenceRef.current = node4;
      setDomReference(node4);
    }
    if (isElement5(position5.refs.reference.current) || position5.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node4 !== null && !isElement5(node4)) {
      position5.refs.setReference(node4);
    }
  }, [position5.refs]);
  const refs = React51.useMemo(() => ({
    ...position5.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position5.refs, setReference, setPositionReference]);
  const elements = React51.useMemo(() => ({
    ...position5.elements,
    domReference
  }), [position5.elements, domReference]);
  const onOpenChange = useEvent(unstable_onOpenChange);
  const context = React51.useMemo(() => ({
    ...position5,
    refs,
    elements,
    dataRef,
    nodeId,
    events,
    open,
    onOpenChange
  }), [position5, nodeId, events, open, onOpenChange, refs, elements]);
  index2(() => {
    const node4 = tree == null ? void 0 : tree.nodesRef.current.find((node5) => node5.id === nodeId);
    if (node4) {
      node4.context = context;
    }
  });
  return React51.useMemo(() => ({
    ...position5,
    context,
    refs,
    reference: setReference,
    positionReference: setPositionReference
  }), [position5, refs, context, setReference, setPositionReference]);
}
function mergeProps(userProps, propsList, elementKey) {
  const map6 = /* @__PURE__ */ new Map();
  return {
    ...elementKey === "floating" && {
      tabIndex: -1
    },
    ...userProps,
    ...propsList.map((value) => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key2, value] = _ref;
        if (key2.indexOf("on") === 0) {
          if (!map6.has(key2)) {
            map6.set(key2, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map6.get(key2)) == null ? void 0 : _map$get.push(value);
            acc[key2] = function() {
              var _map$get2;
              for (var _len = arguments.length, args2 = new Array(_len), _key = 0; _key < _len; _key++) {
                args2[_key] = arguments[_key];
              }
              (_map$get2 = map6.get(key2)) == null ? void 0 : _map$get2.forEach((fn3) => fn3(...args2));
            };
          }
        } else {
          acc[key2] = value;
        }
      });
      return acc;
    }, {})
  };
}
var useInteractions = function(propsList) {
  if (propsList === void 0) {
    propsList = [];
  }
  const deps = propsList;
  const getReferenceProps = React51.useCallback(
    (userProps) => mergeProps(userProps, propsList, "reference"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  const getFloatingProps = React51.useCallback(
    (userProps) => mergeProps(userProps, propsList, "floating"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  const getItemProps = React51.useCallback(
    (userProps) => mergeProps(userProps, propsList, "item"),
    // Granularly check for `item` changes, because the `getItemProps` getter
    // should be as referentially stable as possible since it may be passed as
    // a prop to many components. All `item` key values must therefore be
    // memoized.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    propsList.map((key2) => key2 == null ? void 0 : key2.item)
  );
  return React51.useMemo(() => ({
    getReferenceProps,
    getFloatingProps,
    getItemProps
  }), [getReferenceProps, getFloatingProps, getItemProps]);
};

// node_modules/@mantine/core/esm/Floating/use-floating-auto-update.js
var import_react119 = __toESM(require_react());
function useFloatingAutoUpdate({ opened, floating, positionDependencies }) {
  const [delayedUpdate, setDelayedUpdate] = (0, import_react119.useState)(0);
  (0, import_react119.useEffect)(() => {
    if (floating.refs.reference.current && floating.refs.floating.current) {
      return autoUpdate(floating.refs.reference.current, floating.refs.floating.current, floating.update);
    }
    return void 0;
  }, [floating.refs.reference.current, floating.refs.floating.current, opened, delayedUpdate]);
  useDidUpdate(() => {
    floating.update();
  }, positionDependencies);
  useDidUpdate(() => {
    setDelayedUpdate((c) => c + 1);
  }, [opened]);
}

// node_modules/@mantine/core/esm/Popover/use-popover.js
function getPopoverMiddlewares(options2) {
  const middlewares = [offset2(options2.offset)];
  if (options2.middlewares.shift) {
    middlewares.push(shift2({ limiter: limitShift() }));
  }
  if (options2.middlewares.flip) {
    middlewares.push(flip2());
  }
  if (options2.middlewares.inline) {
    middlewares.push(inline());
  }
  middlewares.push(arrow3({ element: options2.arrowRef, padding: options2.arrowOffset }));
  return middlewares;
}
function usePopover(options2) {
  const [_opened, setOpened] = useUncontrolled({
    value: options2.opened,
    defaultValue: options2.defaultOpened,
    finalValue: false,
    onChange: options2.onChange
  });
  const onClose = () => {
    var _a;
    (_a = options2.onClose) == null ? void 0 : _a.call(options2);
    setOpened(false);
  };
  const onToggle = () => {
    var _a, _b;
    if (_opened) {
      (_a = options2.onClose) == null ? void 0 : _a.call(options2);
      setOpened(false);
    } else {
      (_b = options2.onOpen) == null ? void 0 : _b.call(options2);
      setOpened(true);
    }
  };
  const floating = useFloating2({
    placement: options2.position,
    middleware: [
      ...getPopoverMiddlewares(options2),
      ...options2.width === "target" ? [
        size2({
          apply({ rects }) {
            var _a, _b;
            Object.assign((_b = (_a = floating.refs.floating.current) == null ? void 0 : _a.style) != null ? _b : {}, {
              width: `${rects.reference.width}px`
            });
          }
        })
      ] : []
    ]
  });
  useFloatingAutoUpdate({
    opened: options2.opened,
    positionDependencies: options2.positionDependencies,
    floating
  });
  useDidUpdate(() => {
    var _a;
    (_a = options2.onPositionChange) == null ? void 0 : _a.call(options2, floating.placement);
  }, [floating.placement]);
  return {
    floating,
    controlled: typeof options2.opened === "boolean",
    opened: _opened,
    onClose,
    onToggle
  };
}

// node_modules/@mantine/core/esm/Popover/Popover.errors.js
var POPOVER_ERRORS = {
  context: "Popover component was not found in the tree",
  children: "Popover.Target component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported"
};

// node_modules/@mantine/core/esm/Popover/Popover.context.js
var [PopoverContextProvider, usePopoverContext] = createSafeContext(POPOVER_ERRORS.context);

// node_modules/@mantine/core/esm/Popover/PopoverTarget/PopoverTarget.js
var import_react122 = __toESM(require_react());
var __defProp55 = Object.defineProperty;
var __defProps23 = Object.defineProperties;
var __getOwnPropDescs23 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols56 = Object.getOwnPropertySymbols;
var __hasOwnProp56 = Object.prototype.hasOwnProperty;
var __propIsEnum56 = Object.prototype.propertyIsEnumerable;
var __defNormalProp55 = (obj, key2, value) => key2 in obj ? __defProp55(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues55 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp56.call(b2, prop))
      __defNormalProp55(a2, prop, b2[prop]);
  if (__getOwnPropSymbols56)
    for (var prop of __getOwnPropSymbols56(b2)) {
      if (__propIsEnum56.call(b2, prop))
        __defNormalProp55(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps23 = (a2, b2) => __defProps23(a2, __getOwnPropDescs23(b2));
var __objRest31 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp56.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols56)
    for (var prop of __getOwnPropSymbols56(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum56.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps21 = {
  refProp: "ref",
  popupType: "dialog"
};
var PopoverTarget = (0, import_react122.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("PopoverTarget", defaultProps21, props), { children, refProp, popupType } = _a, others = __objRest31(_a, ["children", "refProp", "popupType"]);
  if (!isElement3(children)) {
    throw new Error(POPOVER_ERRORS.children);
  }
  const forwardedProps = others;
  const ctx = usePopoverContext();
  const targetRef = useMergedRef(ctx.reference, children.ref, ref);
  const accessibleProps = ctx.withRoles ? {
    "aria-haspopup": popupType,
    "aria-expanded": ctx.opened,
    "aria-controls": ctx.getDropdownId(),
    id: ctx.getTargetId()
  } : {};
  return (0, import_react122.cloneElement)(children, __spreadValues55(__spreadProps23(__spreadValues55(__spreadValues55(__spreadValues55({}, forwardedProps), accessibleProps), ctx.targetProps), {
    className: clsx_m_default(ctx.targetProps.className, forwardedProps.className, children.props.className),
    [refProp]: targetRef
  }), !ctx.controlled ? { onClick: ctx.onToggle } : null));
});
PopoverTarget.displayName = "@mantine/core/PopoverTarget";

// node_modules/@mantine/core/esm/Popover/PopoverDropdown/PopoverDropdown.js
var import_react127 = __toESM(require_react());

// node_modules/@mantine/core/esm/Popover/PopoverDropdown/PopoverDropdown.styles.js
var useStyles17 = createStyles((theme, { radius: radius2, shadow }) => ({
  dropdown: {
    position: "absolute",
    backgroundColor: theme.white,
    background: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white,
    border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2]}`,
    padding: `${theme.spacing.sm}px ${theme.spacing.md}px`,
    boxShadow: theme.shadows[shadow] || shadow || "none",
    borderRadius: theme.fn.radius(radius2),
    "&:focus": {
      outline: 0
    }
  },
  arrow: {
    backgroundColor: "inherit",
    border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2]}`,
    zIndex: 1
  }
}));
var PopoverDropdown_styles_default = useStyles17;

// node_modules/@mantine/core/esm/Transition/Transition.js
var import_react124 = __toESM(require_react());

// node_modules/@mantine/core/esm/Transition/get-transition-styles/get-transition-styles.js
var __defProp56 = Object.defineProperty;
var __getOwnPropSymbols57 = Object.getOwnPropertySymbols;
var __hasOwnProp57 = Object.prototype.hasOwnProperty;
var __propIsEnum57 = Object.prototype.propertyIsEnumerable;
var __defNormalProp56 = (obj, key2, value) => key2 in obj ? __defProp56(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues56 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp57.call(b2, prop))
      __defNormalProp56(a2, prop, b2[prop]);
  if (__getOwnPropSymbols57)
    for (var prop of __getOwnPropSymbols57(b2)) {
      if (__propIsEnum57.call(b2, prop))
        __defNormalProp56(a2, prop, b2[prop]);
    }
  return a2;
};
var transitionStatuses = {
  entering: "in",
  entered: "in",
  exiting: "out",
  exited: "out",
  "pre-exiting": "out",
  "pre-entering": "out"
};
function getTransitionStyles({
  transition,
  state,
  duration,
  timingFunction
}) {
  const shared = {
    transitionDuration: `${duration}ms`,
    transitionTimingFunction: timingFunction
  };
  if (typeof transition === "string") {
    if (!(transition in transitions)) {
      return null;
    }
    return __spreadValues56(__spreadValues56(__spreadValues56({
      transitionProperty: transitions[transition].transitionProperty
    }, shared), transitions[transition].common), transitions[transition][transitionStatuses[state]]);
  }
  return __spreadValues56(__spreadValues56(__spreadValues56({
    transitionProperty: transition.transitionProperty
  }, shared), transition.common), transition[transitionStatuses[state]]);
}

// node_modules/@mantine/core/esm/Transition/use-transition.js
var import_react123 = __toESM(require_react());
function useTransition({
  duration,
  exitDuration,
  timingFunction,
  mounted,
  onEnter,
  onExit,
  onEntered,
  onExited
}) {
  const theme = useMantineTheme();
  const shouldReduceMotion = useReducedMotion();
  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;
  const [transitionStatus, setStatus] = (0, import_react123.useState)(mounted ? "entered" : "exited");
  let transitionDuration = reduceMotion ? 0 : duration;
  const timeoutRef = (0, import_react123.useRef)(-1);
  const handleStateChange = (shouldMount) => {
    const preHandler = shouldMount ? onEnter : onExit;
    const handler = shouldMount ? onEntered : onExited;
    setStatus(shouldMount ? "pre-entering" : "pre-exiting");
    window.clearTimeout(timeoutRef.current);
    transitionDuration = reduceMotion ? 0 : shouldMount ? duration : exitDuration;
    if (transitionDuration === 0) {
      typeof preHandler === "function" && preHandler();
      typeof handler === "function" && handler();
      setStatus(shouldMount ? "entered" : "exited");
    } else {
      const preStateTimeout = window.setTimeout(() => {
        typeof preHandler === "function" && preHandler();
        setStatus(shouldMount ? "entering" : "exiting");
      }, 10);
      timeoutRef.current = window.setTimeout(() => {
        window.clearTimeout(preStateTimeout);
        typeof handler === "function" && handler();
        setStatus(shouldMount ? "entered" : "exited");
      }, transitionDuration);
    }
  };
  useDidUpdate(() => {
    handleStateChange(mounted);
  }, [mounted]);
  (0, import_react123.useEffect)(() => () => window.clearTimeout(timeoutRef.current), []);
  return {
    transitionDuration,
    transitionStatus,
    transitionTimingFunction: timingFunction || theme.transitionTimingFunction
  };
}

// node_modules/@mantine/core/esm/Transition/Transition.js
function Transition({
  transition,
  duration = 250,
  exitDuration = duration,
  mounted,
  children,
  timingFunction,
  onExit,
  onEntered,
  onEnter,
  onExited
}) {
  const { transitionDuration, transitionStatus, transitionTimingFunction } = useTransition({
    mounted,
    exitDuration,
    duration,
    timingFunction,
    onExit,
    onEntered,
    onEnter,
    onExited
  });
  if (transitionDuration === 0) {
    return mounted ? import_react124.default.createElement(import_react124.default.Fragment, null, children({})) : null;
  }
  return transitionStatus === "exited" ? null : import_react124.default.createElement(import_react124.default.Fragment, null, children(getTransitionStyles({
    transition,
    duration: transitionDuration,
    state: transitionStatus,
    timingFunction: transitionTimingFunction
  })));
}
Transition.displayName = "@mantine/core/Transition";

// node_modules/@mantine/core/esm/FocusTrap/FocusTrap.js
var import_react125 = __toESM(require_react());
function FocusTrap({
  children,
  active = true,
  refProp = "ref"
}) {
  const focusTrapRef = useFocusTrap(active);
  const ref = useMergedRef(focusTrapRef, children == null ? void 0 : children.ref);
  if (!isElement3(children)) {
    return children;
  }
  return (0, import_react125.cloneElement)(children, { [refProp]: ref });
}
FocusTrap.displayName = "@mantine/core/FocusTrap";

// node_modules/@mantine/core/esm/Floating/FloatingArrow/FloatingArrow.js
var import_react126 = __toESM(require_react());

// node_modules/@mantine/core/esm/Floating/FloatingArrow/get-arrow-position-styles.js
var __defProp57 = Object.defineProperty;
var __defProps24 = Object.defineProperties;
var __getOwnPropDescs24 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols58 = Object.getOwnPropertySymbols;
var __hasOwnProp58 = Object.prototype.hasOwnProperty;
var __propIsEnum58 = Object.prototype.propertyIsEnumerable;
var __defNormalProp57 = (obj, key2, value) => key2 in obj ? __defProp57(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues57 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp58.call(b2, prop))
      __defNormalProp57(a2, prop, b2[prop]);
  if (__getOwnPropSymbols58)
    for (var prop of __getOwnPropSymbols58(b2)) {
      if (__propIsEnum58.call(b2, prop))
        __defNormalProp57(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps24 = (a2, b2) => __defProps24(a2, __getOwnPropDescs24(b2));
function horizontalSide(placement, arrowY, arrowOffset, arrowPosition) {
  if (placement === "center" || arrowPosition === "center") {
    return { top: arrowY };
  }
  if (placement === "end") {
    return { bottom: arrowOffset };
  }
  if (placement === "start") {
    return { top: arrowOffset };
  }
  return {};
}
function verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir) {
  if (placement === "center" || arrowPosition === "center") {
    return { left: arrowX };
  }
  if (placement === "end") {
    return { [dir === "ltr" ? "right" : "left"]: arrowOffset };
  }
  if (placement === "start") {
    return { [dir === "ltr" ? "left" : "right"]: arrowOffset };
  }
  return {};
}
var radiusByFloatingSide = {
  bottom: "borderTopLeftRadius",
  left: "borderTopRightRadius",
  right: "borderBottomLeftRadius",
  top: "borderBottomRightRadius"
};
function getArrowPositionStyles({
  position: position5,
  withBorder,
  arrowSize,
  arrowOffset,
  arrowRadius,
  arrowPosition,
  arrowX,
  arrowY,
  dir
}) {
  const [side, placement = "center"] = position5.split("-");
  const baseStyles = {
    width: arrowSize,
    height: arrowSize,
    transform: "rotate(45deg)",
    position: "absolute",
    [radiusByFloatingSide[side]]: arrowRadius
  };
  const arrowPlacement = withBorder ? -arrowSize / 2 - 1 : -arrowSize / 2;
  if (side === "left") {
    return __spreadProps24(__spreadValues57(__spreadValues57({}, baseStyles), horizontalSide(placement, arrowY, arrowOffset, arrowPosition)), {
      right: arrowPlacement,
      borderLeft: 0,
      borderBottom: 0
    });
  }
  if (side === "right") {
    return __spreadProps24(__spreadValues57(__spreadValues57({}, baseStyles), horizontalSide(placement, arrowY, arrowOffset, arrowPosition)), {
      left: arrowPlacement,
      borderRight: 0,
      borderTop: 0
    });
  }
  if (side === "top") {
    return __spreadProps24(__spreadValues57(__spreadValues57({}, baseStyles), verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir)), {
      bottom: arrowPlacement,
      borderTop: 0,
      borderLeft: 0
    });
  }
  if (side === "bottom") {
    return __spreadProps24(__spreadValues57(__spreadValues57({}, baseStyles), verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir)), {
      top: arrowPlacement,
      borderBottom: 0,
      borderRight: 0
    });
  }
  return {};
}

// node_modules/@mantine/core/esm/Floating/FloatingArrow/FloatingArrow.js
var __defProp58 = Object.defineProperty;
var __defProps25 = Object.defineProperties;
var __getOwnPropDescs25 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols59 = Object.getOwnPropertySymbols;
var __hasOwnProp59 = Object.prototype.hasOwnProperty;
var __propIsEnum59 = Object.prototype.propertyIsEnumerable;
var __defNormalProp58 = (obj, key2, value) => key2 in obj ? __defProp58(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues58 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp59.call(b2, prop))
      __defNormalProp58(a2, prop, b2[prop]);
  if (__getOwnPropSymbols59)
    for (var prop of __getOwnPropSymbols59(b2)) {
      if (__propIsEnum59.call(b2, prop))
        __defNormalProp58(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps25 = (a2, b2) => __defProps25(a2, __getOwnPropDescs25(b2));
var __objRest32 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp59.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols59)
    for (var prop of __getOwnPropSymbols59(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum59.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var FloatingArrow = (0, import_react126.forwardRef)((_a, ref) => {
  var _b = _a, {
    withBorder,
    position: position5,
    arrowSize,
    arrowOffset,
    arrowRadius,
    arrowPosition,
    visible: visible2,
    arrowX,
    arrowY
  } = _b, others = __objRest32(_b, [
    "withBorder",
    "position",
    "arrowSize",
    "arrowOffset",
    "arrowRadius",
    "arrowPosition",
    "visible",
    "arrowX",
    "arrowY"
  ]);
  const theme = useMantineTheme();
  if (!visible2) {
    return null;
  }
  return import_react126.default.createElement("div", __spreadProps25(__spreadValues58({}, others), {
    ref,
    style: getArrowPositionStyles({
      withBorder,
      position: position5,
      arrowSize,
      arrowOffset,
      arrowRadius,
      arrowPosition,
      dir: theme.dir,
      arrowX,
      arrowY
    })
  }));
});
FloatingArrow.displayName = "@mantine/core/FloatingArrow";

// node_modules/@mantine/core/esm/Popover/PopoverDropdown/PopoverDropdown.js
var __defProp59 = Object.defineProperty;
var __defProps26 = Object.defineProperties;
var __getOwnPropDescs26 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols60 = Object.getOwnPropertySymbols;
var __hasOwnProp60 = Object.prototype.hasOwnProperty;
var __propIsEnum60 = Object.prototype.propertyIsEnumerable;
var __defNormalProp59 = (obj, key2, value) => key2 in obj ? __defProp59(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues59 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp60.call(b2, prop))
      __defNormalProp59(a2, prop, b2[prop]);
  if (__getOwnPropSymbols60)
    for (var prop of __getOwnPropSymbols60(b2)) {
      if (__propIsEnum60.call(b2, prop))
        __defNormalProp59(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps26 = (a2, b2) => __defProps26(a2, __getOwnPropDescs26(b2));
var __objRest33 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp60.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols60)
    for (var prop of __getOwnPropSymbols60(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum60.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps22 = {};
function PopoverDropdown(props) {
  const _a = useComponentDefaultProps("PopoverDropdown", defaultProps22, props), { style: style3, className, children, onKeyDownCapture } = _a, others = __objRest33(_a, ["style", "className", "children", "onKeyDownCapture"]);
  const ctx = usePopoverContext();
  const { classes, cx } = PopoverDropdown_styles_default({ radius: ctx.radius, shadow: ctx.shadow }, {
    name: ctx.__staticSelector,
    classNames: ctx.classNames,
    styles: ctx.styles,
    unstyled: ctx.unstyled
  });
  const returnFocus = useFocusReturn({
    opened: ctx.opened,
    shouldReturnFocus: ctx.returnFocus
  });
  const accessibleProps = ctx.withRoles ? {
    "aria-labelledby": ctx.getTargetId(),
    id: ctx.getDropdownId(),
    role: "dialog"
  } : {};
  if (ctx.disabled) {
    return null;
  }
  return import_react127.default.createElement(OptionalPortal, {
    withinPortal: ctx.withinPortal
  }, import_react127.default.createElement(Transition, {
    mounted: ctx.opened,
    transition: ctx.transition,
    duration: ctx.transitionDuration,
    exitDuration: typeof ctx.exitTransitionDuration === "number" ? ctx.exitTransitionDuration : ctx.transitionDuration
  }, (transitionStyles) => {
    var _a2, _b;
    return import_react127.default.createElement(FocusTrap, {
      active: ctx.trapFocus
    }, import_react127.default.createElement(Box, __spreadValues59(__spreadProps26(__spreadValues59({}, accessibleProps), {
      tabIndex: -1,
      key: ctx.placement,
      ref: ctx.floating,
      style: __spreadProps26(__spreadValues59(__spreadValues59({}, style3), transitionStyles), {
        zIndex: ctx.zIndex,
        top: (_a2 = ctx.y) != null ? _a2 : 0,
        left: (_b = ctx.x) != null ? _b : 0,
        width: ctx.width === "target" ? void 0 : ctx.width
      }),
      className: cx(classes.dropdown, className),
      onKeyDownCapture: closeOnEscape(ctx.onClose, {
        active: ctx.closeOnEscape,
        onTrigger: returnFocus,
        onKeyDown: onKeyDownCapture
      }),
      "data-position": ctx.placement
    }), others), children, import_react127.default.createElement(FloatingArrow, {
      ref: ctx.arrowRef,
      arrowX: ctx.arrowX,
      arrowY: ctx.arrowY,
      visible: ctx.withArrow,
      withBorder: true,
      position: ctx.placement,
      arrowSize: ctx.arrowSize,
      arrowRadius: ctx.arrowRadius,
      arrowOffset: ctx.arrowOffset,
      arrowPosition: ctx.arrowPosition,
      className: classes.arrow
    })));
  }));
}
PopoverDropdown.displayName = "@mantine/core/PopoverDropdown";

// node_modules/@mantine/core/esm/Floating/get-floating-position/get-floating-position.js
function getFloatingPosition(dir, position5) {
  if (dir === "rtl" && (position5.includes("right") || position5.includes("left"))) {
    const [side, placement] = position5.split("-");
    const flippedPosition = side === "right" ? "left" : "right";
    return placement === void 0 ? flippedPosition : `${flippedPosition}-${placement}`;
  }
  return position5;
}

// node_modules/@mantine/core/esm/Popover/Popover.js
var __getOwnPropSymbols61 = Object.getOwnPropertySymbols;
var __hasOwnProp61 = Object.prototype.hasOwnProperty;
var __propIsEnum61 = Object.prototype.propertyIsEnumerable;
var __objRest34 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp61.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols61)
    for (var prop of __getOwnPropSymbols61(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum61.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps23 = {
  position: "bottom",
  offset: 8,
  positionDependencies: [],
  transition: "fade",
  transitionDuration: 150,
  middlewares: { flip: true, shift: true, inline: false },
  arrowSize: 7,
  arrowOffset: 5,
  arrowRadius: 0,
  arrowPosition: "side",
  closeOnClickOutside: true,
  withinPortal: false,
  closeOnEscape: true,
  trapFocus: false,
  withRoles: true,
  returnFocus: false,
  clickOutsideEvents: ["mousedown", "touchstart"],
  zIndex: getDefaultZIndex("popover"),
  __staticSelector: "Popover",
  width: "max-content"
};
function Popover(props) {
  var _b, _c, _d, _e2, _f, _g;
  const arrowRef = (0, import_react128.useRef)(null);
  const _a = useComponentDefaultProps("Popover", defaultProps23, props), {
    children,
    position: position5,
    offset: offset3,
    onPositionChange,
    positionDependencies,
    opened,
    transition,
    transitionDuration,
    width,
    middlewares,
    withArrow,
    arrowSize,
    arrowOffset,
    arrowRadius,
    arrowPosition,
    unstyled,
    classNames,
    styles: styles2,
    closeOnClickOutside,
    withinPortal,
    closeOnEscape: closeOnEscape2,
    clickOutsideEvents,
    trapFocus,
    onClose,
    onOpen,
    onChange,
    zIndex,
    radius: radius2,
    shadow,
    id: id2,
    defaultOpened,
    exitTransitionDuration,
    __staticSelector,
    withRoles,
    disabled,
    returnFocus
  } = _a, others = __objRest34(_a, [
    "children",
    "position",
    "offset",
    "onPositionChange",
    "positionDependencies",
    "opened",
    "transition",
    "transitionDuration",
    "width",
    "middlewares",
    "withArrow",
    "arrowSize",
    "arrowOffset",
    "arrowRadius",
    "arrowPosition",
    "unstyled",
    "classNames",
    "styles",
    "closeOnClickOutside",
    "withinPortal",
    "closeOnEscape",
    "clickOutsideEvents",
    "trapFocus",
    "onClose",
    "onOpen",
    "onChange",
    "zIndex",
    "radius",
    "shadow",
    "id",
    "defaultOpened",
    "exitTransitionDuration",
    "__staticSelector",
    "withRoles",
    "disabled",
    "returnFocus"
  ]);
  const [targetNode, setTargetNode] = (0, import_react128.useState)(null);
  const [dropdownNode, setDropdownNode] = (0, import_react128.useState)(null);
  const uid = useId(id2);
  const theme = useMantineTheme();
  const popover = usePopover({
    middlewares,
    width,
    position: getFloatingPosition(theme.dir, position5),
    offset: offset3 + (withArrow ? arrowSize / 2 : 0),
    arrowRef,
    arrowOffset,
    onPositionChange,
    positionDependencies,
    opened,
    defaultOpened,
    onChange,
    onOpen,
    onClose
  });
  useClickOutside(() => closeOnClickOutside && popover.onClose(), clickOutsideEvents, [
    targetNode,
    dropdownNode
  ]);
  const reference2 = (0, import_react128.useCallback)((node4) => {
    setTargetNode(node4);
    popover.floating.reference(node4);
  }, [popover.floating.reference]);
  const floating = (0, import_react128.useCallback)((node4) => {
    setDropdownNode(node4);
    popover.floating.floating(node4);
  }, [popover.floating.floating]);
  return import_react128.default.createElement(PopoverContextProvider, {
    value: {
      returnFocus,
      disabled,
      controlled: popover.controlled,
      reference: reference2,
      floating,
      x: popover.floating.x,
      y: popover.floating.y,
      arrowX: (_d = (_c = (_b = popover.floating) == null ? void 0 : _b.middlewareData) == null ? void 0 : _c.arrow) == null ? void 0 : _d.x,
      arrowY: (_g = (_f = (_e2 = popover.floating) == null ? void 0 : _e2.middlewareData) == null ? void 0 : _f.arrow) == null ? void 0 : _g.y,
      opened: popover.opened,
      arrowRef,
      transition,
      transitionDuration,
      exitTransitionDuration,
      width,
      withArrow,
      arrowSize,
      arrowOffset,
      arrowRadius,
      arrowPosition,
      placement: popover.floating.placement,
      trapFocus,
      withinPortal,
      zIndex,
      radius: radius2,
      shadow,
      closeOnEscape: closeOnEscape2,
      onClose: popover.onClose,
      onToggle: popover.onToggle,
      getTargetId: () => `${uid}-target`,
      getDropdownId: () => `${uid}-dropdown`,
      withRoles,
      targetProps: others,
      __staticSelector,
      classNames,
      styles: styles2,
      unstyled
    }
  }, children);
}
Popover.Target = PopoverTarget;
Popover.Dropdown = PopoverDropdown;
Popover.displayName = "@mantine/core/Popover";

// node_modules/@mantine/core/esm/Select/SelectPopover/SelectPopover.js
var __defProp60 = Object.defineProperty;
var __getOwnPropSymbols62 = Object.getOwnPropertySymbols;
var __hasOwnProp62 = Object.prototype.hasOwnProperty;
var __propIsEnum62 = Object.prototype.propertyIsEnumerable;
var __defNormalProp60 = (obj, key2, value) => key2 in obj ? __defProp60(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues60 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp62.call(b2, prop))
      __defNormalProp60(a2, prop, b2[prop]);
  if (__getOwnPropSymbols62)
    for (var prop of __getOwnPropSymbols62(b2)) {
      if (__propIsEnum62.call(b2, prop))
        __defNormalProp60(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest35 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp62.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols62)
    for (var prop of __getOwnPropSymbols62(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum62.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function SelectPopoverDropdown(_a) {
  var _b = _a, {
    children,
    component = "div",
    maxHeight = 220,
    direction = "column",
    id: id2,
    innerRef,
    __staticSelector,
    styles: styles2,
    classNames,
    unstyled
  } = _b, others = __objRest35(_b, [
    "children",
    "component",
    "maxHeight",
    "direction",
    "id",
    "innerRef",
    "__staticSelector",
    "styles",
    "classNames",
    "unstyled"
  ]);
  const { classes } = SelectPopover_styles_default(null, { name: __staticSelector, styles: styles2, classNames, unstyled });
  return import_react129.default.createElement(Popover.Dropdown, __spreadValues60({
    p: 0,
    onMouseDown: (event) => event.preventDefault()
  }, others), import_react129.default.createElement("div", {
    style: { maxHeight, display: "flex" }
  }, import_react129.default.createElement(Box, {
    component: component || "div",
    id: `${id2}-items`,
    "aria-labelledby": `${id2}-label`,
    role: "listbox",
    onMouseDown: (event) => event.preventDefault(),
    style: { flex: 1, overflowY: component !== SelectScrollArea ? "auto" : void 0 },
    "data-combobox-popover": true,
    ref: innerRef
  }, import_react129.default.createElement("div", {
    className: classes.itemsWrapper,
    style: { flexDirection: direction }
  }, children))));
}
function SelectPopover({
  opened,
  transition = "fade",
  transitionDuration = 0,
  shadow,
  withinPortal,
  children,
  __staticSelector,
  onDirectionChange,
  switchDirectionOnFlip,
  zIndex,
  dropdownPosition,
  positionDependencies = [],
  classNames,
  styles: styles2,
  unstyled,
  readOnly
}) {
  return import_react129.default.createElement(Popover, {
    unstyled,
    classNames,
    styles: styles2,
    width: "target",
    withRoles: false,
    opened,
    middlewares: { flip: dropdownPosition === "flip", shift: false },
    position: dropdownPosition === "flip" ? "bottom" : dropdownPosition,
    positionDependencies,
    zIndex,
    __staticSelector,
    withinPortal,
    transition,
    transitionDuration,
    shadow,
    disabled: readOnly,
    onPositionChange: (nextPosition) => switchDirectionOnFlip && (onDirectionChange == null ? void 0 : onDirectionChange(nextPosition === "top" ? "column-reverse" : "column"))
  }, children);
}
SelectPopover.Target = Popover.Target;
SelectPopover.Dropdown = SelectPopoverDropdown;

// node_modules/@mantine/core/esm/Autocomplete/filter-data/filter-data.js
function filterData({ data, limit, value, filter }) {
  const result = [];
  for (let i = 0; i < data.length; i += 1) {
    if (filter(value, data[i])) {
      result.push(data[i]);
    }
    if (result.length >= limit) {
      break;
    }
  }
  return result;
}

// node_modules/@mantine/core/esm/Autocomplete/Autocomplete.styles.js
var useStyles18 = createStyles(() => ({
  wrapper: {
    position: "relative"
  }
}));
var Autocomplete_styles_default = useStyles18;

// node_modules/@mantine/core/esm/Input/use-input-props.js
var __defProp61 = Object.defineProperty;
var __defProps27 = Object.defineProperties;
var __getOwnPropDescs27 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols63 = Object.getOwnPropertySymbols;
var __hasOwnProp63 = Object.prototype.hasOwnProperty;
var __propIsEnum63 = Object.prototype.propertyIsEnumerable;
var __defNormalProp61 = (obj, key2, value) => key2 in obj ? __defProp61(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues61 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp63.call(b2, prop))
      __defNormalProp61(a2, prop, b2[prop]);
  if (__getOwnPropSymbols63)
    for (var prop of __getOwnPropSymbols63(b2)) {
      if (__propIsEnum63.call(b2, prop))
        __defNormalProp61(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps27 = (a2, b2) => __defProps27(a2, __getOwnPropDescs27(b2));
var __objRest36 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp63.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols63)
    for (var prop of __getOwnPropSymbols63(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum63.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function useInputProps(component, defaultProps118, props) {
  const _a = useComponentDefaultProps(component, defaultProps118, props), {
    label,
    description,
    error,
    required,
    classNames,
    styles: styles2,
    className,
    unstyled,
    __staticSelector,
    sx,
    errorProps,
    labelProps,
    descriptionProps,
    wrapperProps: _wrapperProps,
    id: id2,
    size: size3,
    style: style3,
    inputContainer,
    inputWrapperOrder,
    withAsterisk
  } = _a, others = __objRest36(_a, [
    "label",
    "description",
    "error",
    "required",
    "classNames",
    "styles",
    "className",
    "unstyled",
    "__staticSelector",
    "sx",
    "errorProps",
    "labelProps",
    "descriptionProps",
    "wrapperProps",
    "id",
    "size",
    "style",
    "inputContainer",
    "inputWrapperOrder",
    "withAsterisk"
  ]);
  const uid = useId(id2);
  const { systemStyles, rest } = extractSystemStyles(others);
  const wrapperProps = __spreadValues61({
    label,
    description,
    error,
    required,
    classNames,
    className,
    __staticSelector,
    sx,
    errorProps,
    labelProps,
    descriptionProps,
    unstyled,
    styles: styles2,
    id: uid,
    size: size3,
    style: style3,
    inputContainer,
    inputWrapperOrder,
    withAsterisk
  }, _wrapperProps);
  return __spreadProps27(__spreadValues61({}, rest), {
    classNames,
    styles: styles2,
    unstyled,
    wrapperProps: __spreadValues61(__spreadValues61({}, wrapperProps), systemStyles),
    inputProps: {
      required,
      classNames,
      styles: styles2,
      unstyled,
      id: uid,
      size: size3,
      __staticSelector,
      invalid: !!error
    }
  });
}

// node_modules/@mantine/core/esm/Input/Input.js
var import_react136 = __toESM(require_react());

// node_modules/@mantine/core/esm/Input/InputWrapper/InputWrapper.js
var import_react134 = __toESM(require_react());

// node_modules/@mantine/core/esm/Input/InputLabel/InputLabel.js
var import_react130 = __toESM(require_react());

// node_modules/@mantine/core/esm/Input/InputLabel/InputLabel.styles.js
var useStyles19 = createStyles((theme, { size: size3 }) => ({
  label: {
    display: "inline-block",
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
    fontWeight: 500,
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.gray[9],
    wordBreak: "break-word",
    cursor: "default",
    WebkitTapHighlightColor: "transparent"
  },
  required: {
    color: theme.fn.variant({ variant: "filled", color: "red" }).background
  }
}));
var InputLabel_styles_default = useStyles19;

// node_modules/@mantine/core/esm/Input/InputLabel/InputLabel.js
var __defProp62 = Object.defineProperty;
var __getOwnPropSymbols64 = Object.getOwnPropertySymbols;
var __hasOwnProp64 = Object.prototype.hasOwnProperty;
var __propIsEnum64 = Object.prototype.propertyIsEnumerable;
var __defNormalProp62 = (obj, key2, value) => key2 in obj ? __defProp62(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues62 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp64.call(b2, prop))
      __defNormalProp62(a2, prop, b2[prop]);
  if (__getOwnPropSymbols64)
    for (var prop of __getOwnPropSymbols64(b2)) {
      if (__propIsEnum64.call(b2, prop))
        __defNormalProp62(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest37 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp64.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols64)
    for (var prop of __getOwnPropSymbols64(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum64.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps24 = {
  labelElement: "label",
  size: "sm"
};
var InputLabel = (0, import_react130.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("InputLabel", defaultProps24, props), {
    labelElement,
    children,
    required,
    size: size3,
    classNames,
    styles: styles2,
    unstyled,
    className,
    htmlFor,
    __staticSelector
  } = _a, others = __objRest37(_a, [
    "labelElement",
    "children",
    "required",
    "size",
    "classNames",
    "styles",
    "unstyled",
    "className",
    "htmlFor",
    "__staticSelector"
  ]);
  const { classes, cx } = InputLabel_styles_default({ size: size3 }, { name: ["InputWrapper", __staticSelector], classNames, styles: styles2, unstyled });
  return import_react130.default.createElement(Box, __spreadValues62({
    component: labelElement,
    ref,
    className: cx(classes.label, className),
    htmlFor: labelElement === "label" ? htmlFor : void 0
  }, others), children, required && import_react130.default.createElement("span", {
    className: classes.required,
    "aria-hidden": true
  }, " *"));
});
InputLabel.displayName = "@mantine/core/InputLabel";

// node_modules/@mantine/core/esm/Input/InputError/InputError.js
var import_react131 = __toESM(require_react());

// node_modules/@mantine/core/esm/Input/InputError/InputError.styles.js
var useStyles20 = createStyles((theme, { size: size3 }) => ({
  error: {
    wordBreak: "break-word",
    color: theme.fn.variant({ variant: "filled", color: "red" }).background,
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }) - 2,
    lineHeight: 1.2,
    display: "block"
  }
}));
var InputError_styles_default = useStyles20;

// node_modules/@mantine/core/esm/Input/InputError/InputError.js
var __defProp63 = Object.defineProperty;
var __getOwnPropSymbols65 = Object.getOwnPropertySymbols;
var __hasOwnProp65 = Object.prototype.hasOwnProperty;
var __propIsEnum65 = Object.prototype.propertyIsEnumerable;
var __defNormalProp63 = (obj, key2, value) => key2 in obj ? __defProp63(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues63 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp65.call(b2, prop))
      __defNormalProp63(a2, prop, b2[prop]);
  if (__getOwnPropSymbols65)
    for (var prop of __getOwnPropSymbols65(b2)) {
      if (__propIsEnum65.call(b2, prop))
        __defNormalProp63(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest38 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp65.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols65)
    for (var prop of __getOwnPropSymbols65(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum65.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps25 = {
  size: "sm"
};
var InputError = (0, import_react131.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("InputError", defaultProps25, props), { children, className, classNames, styles: styles2, unstyled, size: size3, __staticSelector } = _a, others = __objRest38(_a, ["children", "className", "classNames", "styles", "unstyled", "size", "__staticSelector"]);
  const { classes, cx } = InputError_styles_default({ size: size3 }, { name: ["InputWrapper", __staticSelector], classNames, styles: styles2, unstyled });
  return import_react131.default.createElement(Text, __spreadValues63({
    className: cx(classes.error, className),
    ref
  }, others), children);
});
InputError.displayName = "@mantine/core/InputError";

// node_modules/@mantine/core/esm/Input/InputDescription/InputDescription.js
var import_react132 = __toESM(require_react());

// node_modules/@mantine/core/esm/Input/InputDescription/InputDescription.styles.js
var useStyles21 = createStyles((theme, { size: size3 }) => ({
  description: {
    wordBreak: "break-word",
    color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6],
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }) - 2,
    lineHeight: 1.2,
    display: "block"
  }
}));
var InputDescription_styles_default = useStyles21;

// node_modules/@mantine/core/esm/Input/InputDescription/InputDescription.js
var __defProp64 = Object.defineProperty;
var __getOwnPropSymbols66 = Object.getOwnPropertySymbols;
var __hasOwnProp66 = Object.prototype.hasOwnProperty;
var __propIsEnum66 = Object.prototype.propertyIsEnumerable;
var __defNormalProp64 = (obj, key2, value) => key2 in obj ? __defProp64(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues64 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp66.call(b2, prop))
      __defNormalProp64(a2, prop, b2[prop]);
  if (__getOwnPropSymbols66)
    for (var prop of __getOwnPropSymbols66(b2)) {
      if (__propIsEnum66.call(b2, prop))
        __defNormalProp64(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest39 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp66.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols66)
    for (var prop of __getOwnPropSymbols66(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum66.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps26 = {
  size: "sm"
};
var InputDescription = (0, import_react132.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("InputDescription", defaultProps26, props), { children, className, classNames, styles: styles2, unstyled, size: size3, __staticSelector } = _a, others = __objRest39(_a, ["children", "className", "classNames", "styles", "unstyled", "size", "__staticSelector"]);
  const { classes, cx } = InputDescription_styles_default({ size: size3 }, { name: ["InputWrapper", __staticSelector], classNames, styles: styles2, unstyled });
  return import_react132.default.createElement(Text, __spreadValues64({
    color: "dimmed",
    className: cx(classes.description, className),
    ref,
    unstyled
  }, others), children);
});
InputDescription.displayName = "@mantine/core/InputDescription";

// node_modules/@mantine/core/esm/Input/InputWrapper.context.js
var import_react133 = __toESM(require_react());
var InputWrapperContext = (0, import_react133.createContext)({
  offsetBottom: false,
  offsetTop: false,
  describedBy: void 0
});
var InputWrapperProvider = InputWrapperContext.Provider;
var useInputWrapperContext = () => (0, import_react133.useContext)(InputWrapperContext);

// node_modules/@mantine/core/esm/Input/InputWrapper/get-input-offsets.js
function getInputOffsets(inputWrapperOrder, { hasDescription, hasError }) {
  const inputIndex = inputWrapperOrder.findIndex((part) => part === "input");
  const aboveInput = inputWrapperOrder[inputIndex - 1];
  const belowInput = inputWrapperOrder[inputIndex + 1];
  const offsetTop = hasDescription && aboveInput === "description" || hasError && aboveInput === "error";
  const offsetBottom = hasDescription && belowInput === "description" || hasError && belowInput === "error";
  return { offsetBottom, offsetTop };
}

// node_modules/@mantine/core/esm/Input/InputWrapper/InputWrapper.styles.js
var __defProp65 = Object.defineProperty;
var __defProps28 = Object.defineProperties;
var __getOwnPropDescs28 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols67 = Object.getOwnPropertySymbols;
var __hasOwnProp67 = Object.prototype.hasOwnProperty;
var __propIsEnum67 = Object.prototype.propertyIsEnumerable;
var __defNormalProp65 = (obj, key2, value) => key2 in obj ? __defProp65(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues65 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp67.call(b2, prop))
      __defNormalProp65(a2, prop, b2[prop]);
  if (__getOwnPropSymbols67)
    for (var prop of __getOwnPropSymbols67(b2)) {
      if (__propIsEnum67.call(b2, prop))
        __defNormalProp65(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps28 = (a2, b2) => __defProps28(a2, __getOwnPropDescs28(b2));
var useStyles22 = createStyles((theme) => ({
  root: __spreadProps28(__spreadValues65({}, theme.fn.fontStyles()), {
    lineHeight: theme.lineHeight
  })
}));
var InputWrapper_styles_default = useStyles22;

// node_modules/@mantine/core/esm/Input/InputWrapper/InputWrapper.js
var __defProp66 = Object.defineProperty;
var __defProps29 = Object.defineProperties;
var __getOwnPropDescs29 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols68 = Object.getOwnPropertySymbols;
var __hasOwnProp68 = Object.prototype.hasOwnProperty;
var __propIsEnum68 = Object.prototype.propertyIsEnumerable;
var __defNormalProp66 = (obj, key2, value) => key2 in obj ? __defProp66(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues66 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp68.call(b2, prop))
      __defNormalProp66(a2, prop, b2[prop]);
  if (__getOwnPropSymbols68)
    for (var prop of __getOwnPropSymbols68(b2)) {
      if (__propIsEnum68.call(b2, prop))
        __defNormalProp66(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps29 = (a2, b2) => __defProps29(a2, __getOwnPropDescs29(b2));
var __objRest40 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp68.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols68)
    for (var prop of __getOwnPropSymbols68(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum68.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps27 = {
  labelElement: "label",
  size: "sm",
  inputContainer: (children) => children,
  inputWrapperOrder: ["label", "description", "input", "error"]
};
var InputWrapper = (0, import_react134.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("InputWrapper", defaultProps27, props), {
    className,
    label,
    children,
    required,
    id: id2,
    error,
    description,
    labelElement,
    labelProps,
    descriptionProps,
    errorProps,
    classNames,
    styles: styles2,
    size: size3,
    inputContainer,
    __staticSelector,
    unstyled,
    inputWrapperOrder,
    withAsterisk
  } = _a, others = __objRest40(_a, [
    "className",
    "label",
    "children",
    "required",
    "id",
    "error",
    "description",
    "labelElement",
    "labelProps",
    "descriptionProps",
    "errorProps",
    "classNames",
    "styles",
    "size",
    "inputContainer",
    "__staticSelector",
    "unstyled",
    "inputWrapperOrder",
    "withAsterisk"
  ]);
  const { classes, cx } = InputWrapper_styles_default(null, {
    classNames,
    styles: styles2,
    name: ["InputWrapper", __staticSelector],
    unstyled
  });
  const sharedProps = {
    classNames,
    styles: styles2,
    unstyled,
    size: size3,
    __staticSelector
  };
  const isRequired = typeof withAsterisk === "boolean" ? withAsterisk : required;
  const errorId = id2 ? `${id2}-error` : errorProps == null ? void 0 : errorProps.id;
  const descriptionId = id2 ? `${id2}-description` : descriptionProps == null ? void 0 : descriptionProps.id;
  const hasError = !!error && typeof error !== "boolean";
  const _describedBy = `${hasError ? errorId : ""} ${description ? descriptionId : ""}`;
  const describedBy = _describedBy.trim().length > 0 ? _describedBy.trim() : void 0;
  const _label = label && import_react134.default.createElement(InputLabel, __spreadValues66(__spreadValues66({
    key: "label",
    labelElement,
    id: id2 ? `${id2}-label` : void 0,
    htmlFor: id2,
    required: isRequired
  }, sharedProps), labelProps), label);
  const _description = description && import_react134.default.createElement(InputDescription, __spreadProps29(__spreadValues66(__spreadValues66({
    key: "description"
  }, descriptionProps), sharedProps), {
    size: (descriptionProps == null ? void 0 : descriptionProps.size) || sharedProps.size,
    id: (descriptionProps == null ? void 0 : descriptionProps.id) || descriptionId
  }), description);
  const _input = import_react134.default.createElement(import_react134.Fragment, {
    key: "input"
  }, inputContainer(children));
  const _error = typeof error !== "boolean" && error && import_react134.default.createElement(InputError, __spreadProps29(__spreadValues66(__spreadValues66({}, errorProps), sharedProps), {
    size: (errorProps == null ? void 0 : errorProps.size) || sharedProps.size,
    key: "error",
    id: (errorProps == null ? void 0 : errorProps.id) || errorId
  }), error);
  const content5 = inputWrapperOrder.map((part) => {
    switch (part) {
      case "label":
        return _label;
      case "input":
        return _input;
      case "description":
        return _description;
      case "error":
        return _error;
      default:
        return null;
    }
  });
  return import_react134.default.createElement(InputWrapperProvider, {
    value: __spreadValues66({
      describedBy
    }, getInputOffsets(inputWrapperOrder, {
      hasDescription: !!_description,
      hasError: !!_error
    }))
  }, import_react134.default.createElement(Box, __spreadValues66({
    className: cx(classes.root, className),
    ref
  }, others), content5));
});
InputWrapper.displayName = "@mantine/core/InputWrapper";

// node_modules/@mantine/core/esm/Input/InputPlaceholder/InputPlaceholder.js
var import_react135 = __toESM(require_react());
var __defProp67 = Object.defineProperty;
var __getOwnPropSymbols69 = Object.getOwnPropertySymbols;
var __hasOwnProp69 = Object.prototype.hasOwnProperty;
var __propIsEnum69 = Object.prototype.propertyIsEnumerable;
var __defNormalProp67 = (obj, key2, value) => key2 in obj ? __defProp67(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues67 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp69.call(b2, prop))
      __defNormalProp67(a2, prop, b2[prop]);
  if (__getOwnPropSymbols69)
    for (var prop of __getOwnPropSymbols69(b2)) {
      if (__propIsEnum69.call(b2, prop))
        __defNormalProp67(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest41 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp69.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols69)
    for (var prop of __getOwnPropSymbols69(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum69.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps28 = {};
var InputPlaceholder = (0, import_react135.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("InputPlaceholder", defaultProps28, props), { sx } = _a, others = __objRest41(_a, ["sx"]);
  return import_react135.default.createElement(Box, __spreadValues67({
    component: "span",
    sx: [(theme) => theme.fn.placeholderStyles(), ...packSx(sx)],
    ref
  }, others));
});
InputPlaceholder.displayName = "@mantine/core/InputPlaceholder";

// node_modules/@mantine/core/esm/Input/Input.styles.js
var __defProp68 = Object.defineProperty;
var __defProps30 = Object.defineProperties;
var __getOwnPropDescs30 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols70 = Object.getOwnPropertySymbols;
var __hasOwnProp70 = Object.prototype.hasOwnProperty;
var __propIsEnum70 = Object.prototype.propertyIsEnumerable;
var __defNormalProp68 = (obj, key2, value) => key2 in obj ? __defProp68(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues68 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp70.call(b2, prop))
      __defNormalProp68(a2, prop, b2[prop]);
  if (__getOwnPropSymbols70)
    for (var prop of __getOwnPropSymbols70(b2)) {
      if (__propIsEnum70.call(b2, prop))
        __defNormalProp68(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps30 = (a2, b2) => __defProps30(a2, __getOwnPropDescs30(b2));
var sizes4 = {
  xs: 30,
  sm: 36,
  md: 42,
  lg: 50,
  xl: 60
};
function getVariantStyles5({ theme, variant: variant2 }) {
  if (variant2 === "default") {
    return {
      border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]}`,
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white,
      transition: "border-color 100ms ease",
      "&:focus, &:focus-within": theme.focusRingStyles.inputStyles(theme)
    };
  }
  if (variant2 === "filled") {
    return {
      border: "1px solid transparent",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1],
      "&:focus, &:focus-within": theme.focusRingStyles.inputStyles(theme)
    };
  }
  return {
    borderWidth: 0,
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    backgroundColor: "transparent",
    minHeight: 28,
    outline: 0,
    "&:focus, &:focus-within": {
      outline: "none",
      borderColor: "transparent"
    },
    "&:disabled": {
      backgroundColor: "transparent",
      "&:focus, &:focus-within": {
        outline: "none",
        borderColor: "transparent"
      }
    }
  };
}
var useStyles23 = createStyles((theme, {
  size: size3,
  multiline,
  radius: radius2,
  variant: variant2,
  invalid: invalid3,
  rightSectionWidth,
  withRightSection,
  iconWidth,
  offsetBottom,
  offsetTop,
  pointer
}) => {
  const invalidColor = theme.fn.variant({ variant: "filled", color: "red" }).background;
  const sizeStyles = variant2 === "default" || variant2 === "filled" ? {
    minHeight: theme.fn.size({ size: size3, sizes: sizes4 }),
    paddingLeft: theme.fn.size({ size: size3, sizes: sizes4 }) / 3,
    paddingRight: withRightSection ? rightSectionWidth : theme.fn.size({ size: size3, sizes: sizes4 }) / 3,
    borderRadius: theme.fn.radius(radius2)
  } : null;
  return {
    wrapper: {
      position: "relative",
      marginTop: offsetTop ? `calc(${theme.spacing.xs}px / 2)` : void 0,
      marginBottom: offsetBottom ? `calc(${theme.spacing.xs}px / 2)` : void 0
    },
    input: __spreadValues68(__spreadProps30(__spreadValues68(__spreadProps30(__spreadValues68({}, theme.fn.fontStyles()), {
      height: multiline ? variant2 === "unstyled" ? void 0 : "auto" : theme.fn.size({ size: size3, sizes: sizes4 }),
      WebkitTapHighlightColor: "transparent",
      lineHeight: multiline ? theme.lineHeight : `${theme.fn.size({ size: size3, sizes: sizes4 }) - 2}px`,
      appearance: "none",
      resize: "none",
      boxSizing: "border-box",
      fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
      width: "100%",
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      display: "block",
      textAlign: "left",
      cursor: pointer ? "pointer" : void 0
    }), sizeStyles), {
      "&:disabled": {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[1],
        color: theme.colors.dark[2],
        opacity: 0.6,
        cursor: "not-allowed",
        "&::placeholder": {
          color: theme.colors.dark[2]
        }
      },
      "&::placeholder": __spreadProps30(__spreadValues68({}, theme.fn.placeholderStyles()), {
        opacity: 1
      }),
      "&::-webkit-inner-spin-button, &::-webkit-outer-spin-button, &::-webkit-search-decoration, &::-webkit-search-cancel-button, &::-webkit-search-results-button, &::-webkit-search-results-decoration": {
        appearance: "none"
      },
      "&[type=number]": {
        MozAppearance: "textfield"
      }
    }), getVariantStyles5({ theme, variant: variant2 })),
    withIcon: {
      paddingLeft: typeof iconWidth === "number" ? iconWidth : theme.fn.size({ size: size3, sizes: sizes4 })
    },
    invalid: {
      color: invalidColor,
      borderColor: invalidColor,
      "&::placeholder": {
        opacity: 1,
        color: invalidColor
      }
    },
    disabled: {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[1],
      color: theme.colors.dark[2],
      opacity: 0.6,
      cursor: "not-allowed",
      "&::placeholder": {
        color: theme.colors.dark[2]
      }
    },
    icon: {
      pointerEvents: "none",
      position: "absolute",
      zIndex: 1,
      left: 0,
      top: 0,
      bottom: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: typeof iconWidth === "number" ? iconWidth : theme.fn.size({ size: size3, sizes: sizes4 }),
      color: invalid3 ? theme.colors.red[theme.colorScheme === "dark" ? 6 : 7] : theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[5]
    },
    rightSection: {
      position: "absolute",
      top: 0,
      bottom: 0,
      right: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: rightSectionWidth
    }
  };
});
var Input_styles_default = useStyles23;

// node_modules/@mantine/core/esm/Input/Input.js
var __defProp69 = Object.defineProperty;
var __defProps31 = Object.defineProperties;
var __getOwnPropDescs31 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols71 = Object.getOwnPropertySymbols;
var __hasOwnProp71 = Object.prototype.hasOwnProperty;
var __propIsEnum71 = Object.prototype.propertyIsEnumerable;
var __defNormalProp69 = (obj, key2, value) => key2 in obj ? __defProp69(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues69 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp71.call(b2, prop))
      __defNormalProp69(a2, prop, b2[prop]);
  if (__getOwnPropSymbols71)
    for (var prop of __getOwnPropSymbols71(b2)) {
      if (__propIsEnum71.call(b2, prop))
        __defNormalProp69(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps31 = (a2, b2) => __defProps31(a2, __getOwnPropDescs31(b2));
var __objRest42 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp71.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols71)
    for (var prop of __getOwnPropSymbols71(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum71.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps29 = {
  rightSectionWidth: 36,
  size: "sm",
  variant: "default"
};
var _Input = (0, import_react136.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Input", defaultProps29, props), {
    className,
    invalid: invalid3,
    required,
    disabled,
    variant: variant2,
    icon,
    style: style3,
    rightSectionWidth,
    iconWidth,
    rightSection,
    rightSectionProps,
    radius: radius2,
    size: size3,
    wrapperProps,
    classNames,
    styles: styles2,
    __staticSelector,
    multiline,
    sx,
    unstyled,
    pointer
  } = _a, others = __objRest42(_a, [
    "className",
    "invalid",
    "required",
    "disabled",
    "variant",
    "icon",
    "style",
    "rightSectionWidth",
    "iconWidth",
    "rightSection",
    "rightSectionProps",
    "radius",
    "size",
    "wrapperProps",
    "classNames",
    "styles",
    "__staticSelector",
    "multiline",
    "sx",
    "unstyled",
    "pointer"
  ]);
  const { offsetBottom, offsetTop, describedBy } = useInputWrapperContext();
  const { classes, cx } = Input_styles_default({
    radius: radius2,
    size: size3,
    multiline,
    variant: variant2,
    invalid: invalid3,
    rightSectionWidth,
    iconWidth,
    withRightSection: !!rightSection,
    offsetBottom,
    offsetTop,
    pointer
  }, { classNames, styles: styles2, name: ["Input", __staticSelector], unstyled });
  const { systemStyles, rest } = extractSystemStyles(others);
  return import_react136.default.createElement(Box, __spreadValues69(__spreadValues69({
    className: cx(classes.wrapper, className),
    sx,
    style: style3
  }, systemStyles), wrapperProps), icon && import_react136.default.createElement("div", {
    className: classes.icon
  }, icon), import_react136.default.createElement(Box, __spreadProps31(__spreadValues69({
    component: "input"
  }, rest), {
    ref,
    required,
    "aria-invalid": invalid3,
    "aria-describedby": describedBy,
    disabled,
    className: cx(classes[`${variant2}Variant`], classes.input, {
      [classes.withIcon]: icon,
      [classes.invalid]: invalid3,
      [classes.disabled]: disabled
    })
  })), rightSection && import_react136.default.createElement("div", __spreadProps31(__spreadValues69({}, rightSectionProps), {
    className: classes.rightSection
  }), rightSection));
});
_Input.displayName = "@mantine/core/Input";
_Input.Wrapper = InputWrapper;
_Input.Label = InputLabel;
_Input.Description = InputDescription;
_Input.Error = InputError;
_Input.Placeholder = InputPlaceholder;
var Input = createPolymorphicComponent(_Input);

// node_modules/@mantine/core/esm/Autocomplete/Autocomplete.js
var __defProp70 = Object.defineProperty;
var __defProps32 = Object.defineProperties;
var __getOwnPropDescs32 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols72 = Object.getOwnPropertySymbols;
var __hasOwnProp72 = Object.prototype.hasOwnProperty;
var __propIsEnum72 = Object.prototype.propertyIsEnumerable;
var __defNormalProp70 = (obj, key2, value) => key2 in obj ? __defProp70(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues70 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp72.call(b2, prop))
      __defNormalProp70(a2, prop, b2[prop]);
  if (__getOwnPropSymbols72)
    for (var prop of __getOwnPropSymbols72(b2)) {
      if (__propIsEnum72.call(b2, prop))
        __defNormalProp70(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps32 = (a2, b2) => __defProps32(a2, __getOwnPropDescs32(b2));
var __objRest43 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp72.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols72)
    for (var prop of __getOwnPropSymbols72(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum72.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function defaultFilter(value, item) {
  return item.value.toLowerCase().trim().includes(value.toLowerCase().trim());
}
var defaultProps30 = {
  required: false,
  size: "sm",
  shadow: "sm",
  limit: 5,
  itemComponent: DefaultItem,
  transition: "pop",
  transitionDuration: 0,
  initiallyOpened: false,
  filter: defaultFilter,
  switchDirectionOnFlip: false,
  zIndex: getDefaultZIndex("popover"),
  dropdownPosition: "flip",
  maxDropdownHeight: "auto",
  positionDependencies: []
};
var Autocomplete = (0, import_react137.forwardRef)((props, ref) => {
  const _a = useInputProps("Autocomplete", defaultProps30, props), {
    inputProps,
    wrapperProps,
    shadow,
    data,
    limit,
    value,
    defaultValue,
    onChange,
    unstyled,
    itemComponent,
    onItemSubmit,
    onKeyDown,
    onFocus,
    onBlur,
    onClick,
    transition,
    transitionDuration,
    initiallyOpened,
    transitionTimingFunction,
    classNames,
    styles: styles2,
    filter,
    nothingFound,
    onDropdownClose,
    onDropdownOpen,
    withinPortal,
    switchDirectionOnFlip,
    zIndex,
    dropdownPosition,
    maxDropdownHeight,
    dropdownComponent,
    positionDependencies,
    readOnly,
    hoverOnSearchChange
  } = _a, others = __objRest43(_a, [
    "inputProps",
    "wrapperProps",
    "shadow",
    "data",
    "limit",
    "value",
    "defaultValue",
    "onChange",
    "unstyled",
    "itemComponent",
    "onItemSubmit",
    "onKeyDown",
    "onFocus",
    "onBlur",
    "onClick",
    "transition",
    "transitionDuration",
    "initiallyOpened",
    "transitionTimingFunction",
    "classNames",
    "styles",
    "filter",
    "nothingFound",
    "onDropdownClose",
    "onDropdownOpen",
    "withinPortal",
    "switchDirectionOnFlip",
    "zIndex",
    "dropdownPosition",
    "maxDropdownHeight",
    "dropdownComponent",
    "positionDependencies",
    "readOnly",
    "hoverOnSearchChange"
  ]);
  const { classes } = Autocomplete_styles_default(null, { classNames, styles: styles2, name: "Autocomplete", unstyled });
  const [dropdownOpened, _setDropdownOpened] = (0, import_react137.useState)(initiallyOpened);
  const [hovered, setHovered] = (0, import_react137.useState)(-1);
  const [direction, setDirection] = (0, import_react137.useState)("column");
  const inputRef = (0, import_react137.useRef)(null);
  const [IMEOpen, setIMEOpen] = (0, import_react137.useState)(false);
  const [_value, handleChange] = useUncontrolled({
    value,
    defaultValue,
    finalValue: "",
    onChange
  });
  const setDropdownOpened = (opened) => {
    _setDropdownOpened(opened);
    const handler = opened ? onDropdownOpen : onDropdownClose;
    typeof handler === "function" && handler();
  };
  useDidUpdate(() => {
    if (hoverOnSearchChange && _value) {
      setHovered(0);
    } else {
      setHovered(-1);
    }
  }, [_value, hoverOnSearchChange]);
  const handleItemClick = (item) => {
    handleChange(item.value);
    typeof onItemSubmit === "function" && onItemSubmit(item);
    setDropdownOpened(false);
  };
  const formattedData = data.map((item) => typeof item === "string" ? { value: item } : item);
  const filteredData = groupOptions({
    data: filterData({ data: formattedData, value: _value, limit, filter })
  });
  const handleInputKeydown = (event) => {
    if (IMEOpen) {
      return;
    }
    typeof onKeyDown === "function" && onKeyDown(event);
    const isColumn = direction === "column";
    const handleNext = () => {
      setHovered((current) => current < filteredData.length - 1 ? current + 1 : current);
    };
    const handlePrevious = () => {
      setHovered((current) => current > 0 ? current - 1 : current);
    };
    switch (event.key) {
      case "ArrowUp": {
        event.preventDefault();
        isColumn ? handlePrevious() : handleNext();
        break;
      }
      case "ArrowDown": {
        event.preventDefault();
        isColumn ? handleNext() : handlePrevious();
        break;
      }
      case "Enter": {
        if (filteredData[hovered] && dropdownOpened) {
          event.preventDefault();
          handleChange(filteredData[hovered].value);
          typeof onItemSubmit === "function" && onItemSubmit(filteredData[hovered]);
          setDropdownOpened(false);
        }
        break;
      }
      case "Escape": {
        if (dropdownOpened) {
          event.preventDefault();
          setDropdownOpened(false);
        }
      }
    }
  };
  const handleInputFocus = (event) => {
    typeof onFocus === "function" && onFocus(event);
    setDropdownOpened(true);
  };
  const handleInputBlur = (event) => {
    typeof onBlur === "function" && onBlur(event);
    setDropdownOpened(false);
  };
  const handleInputClick = (event) => {
    typeof onClick === "function" && onClick(event);
    setDropdownOpened(true);
  };
  const shouldRenderDropdown = dropdownOpened && (filteredData.length > 0 || filteredData.length === 0 && !!nothingFound);
  return import_react137.default.createElement(Input.Wrapper, __spreadProps32(__spreadValues70({}, wrapperProps), {
    __staticSelector: "Autocomplete"
  }), import_react137.default.createElement(SelectPopover, {
    opened: shouldRenderDropdown,
    transition,
    transitionDuration,
    shadow: "sm",
    withinPortal,
    __staticSelector: "Autocomplete",
    onDirectionChange: setDirection,
    switchDirectionOnFlip,
    zIndex,
    dropdownPosition,
    positionDependencies,
    classNames,
    styles: styles2,
    unstyled,
    readOnly
  }, import_react137.default.createElement(SelectPopover.Target, null, import_react137.default.createElement("div", {
    className: classes.wrapper,
    role: "combobox",
    "aria-haspopup": "listbox",
    "aria-owns": shouldRenderDropdown ? `${inputProps.id}-items` : null,
    "aria-controls": inputProps.id,
    "aria-expanded": shouldRenderDropdown,
    onMouseLeave: () => setHovered(-1),
    tabIndex: -1
  }, import_react137.default.createElement(Input, __spreadProps32(__spreadValues70(__spreadValues70({
    type: "search",
    autoComplete: "off"
  }, inputProps), others), {
    readOnly,
    "data-mantine-stop-propagation": dropdownOpened,
    ref: useMergedRef(ref, inputRef),
    onKeyDown: handleInputKeydown,
    classNames,
    styles: styles2,
    __staticSelector: "Autocomplete",
    value: _value,
    onChange: (event) => {
      handleChange(event.currentTarget.value);
      setDropdownOpened(true);
    },
    onFocus: handleInputFocus,
    onBlur: handleInputBlur,
    onClick: handleInputClick,
    onCompositionStart: () => setIMEOpen(true),
    onCompositionEnd: () => setIMEOpen(false),
    "aria-autocomplete": "list",
    "aria-controls": shouldRenderDropdown ? `${inputProps.id}-items` : null,
    "aria-activedescendant": hovered >= 0 ? `${inputProps.id}-${hovered}` : null
  })))), import_react137.default.createElement(SelectPopover.Dropdown, {
    component: dropdownComponent || SelectScrollArea,
    maxHeight: maxDropdownHeight,
    direction,
    id: inputProps.id,
    __staticSelector: "Autocomplete",
    classNames,
    styles: styles2
  }, import_react137.default.createElement(SelectItems, {
    data: filteredData,
    hovered,
    classNames,
    styles: styles2,
    uuid: inputProps.id,
    __staticSelector: "Autocomplete",
    onItemHover: setHovered,
    onItemSelect: handleItemClick,
    itemComponent,
    size: inputProps.size,
    nothingFound
  }))));
});
Autocomplete.displayName = "@mantine/core/Autocomplete";

// node_modules/@mantine/core/esm/Avatar/Avatar.js
var import_react141 = __toESM(require_react());

// node_modules/@mantine/core/esm/Avatar/AvatarPlaceholderIcon.js
var import_react138 = __toESM(require_react());
var __defProp71 = Object.defineProperty;
var __defProps33 = Object.defineProperties;
var __getOwnPropDescs33 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols73 = Object.getOwnPropertySymbols;
var __hasOwnProp73 = Object.prototype.hasOwnProperty;
var __propIsEnum73 = Object.prototype.propertyIsEnumerable;
var __defNormalProp71 = (obj, key2, value) => key2 in obj ? __defProp71(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues71 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp73.call(b2, prop))
      __defNormalProp71(a2, prop, b2[prop]);
  if (__getOwnPropSymbols73)
    for (var prop of __getOwnPropSymbols73(b2)) {
      if (__propIsEnum73.call(b2, prop))
        __defNormalProp71(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps33 = (a2, b2) => __defProps33(a2, __getOwnPropDescs33(b2));
function AvatarPlaceholderIcon(props) {
  return import_react138.default.createElement("svg", __spreadProps33(__spreadValues71({}, props), {
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }), import_react138.default.createElement("path", {
    d: "M0.877014 7.49988C0.877014 3.84219 3.84216 0.877045 7.49985 0.877045C11.1575 0.877045 14.1227 3.84219 14.1227 7.49988C14.1227 11.1575 11.1575 14.1227 7.49985 14.1227C3.84216 14.1227 0.877014 11.1575 0.877014 7.49988ZM7.49985 1.82704C4.36683 1.82704 1.82701 4.36686 1.82701 7.49988C1.82701 8.97196 2.38774 10.3131 3.30727 11.3213C4.19074 9.94119 5.73818 9.02499 7.50023 9.02499C9.26206 9.02499 10.8093 9.94097 11.6929 11.3208C12.6121 10.3127 13.1727 8.97172 13.1727 7.49988C13.1727 4.36686 10.6328 1.82704 7.49985 1.82704ZM10.9818 11.9787C10.2839 10.7795 8.9857 9.97499 7.50023 9.97499C6.01458 9.97499 4.71624 10.7797 4.01845 11.9791C4.97952 12.7272 6.18765 13.1727 7.49985 13.1727C8.81227 13.1727 10.0206 12.727 10.9818 11.9787ZM5.14999 6.50487C5.14999 5.207 6.20212 4.15487 7.49999 4.15487C8.79786 4.15487 9.84999 5.207 9.84999 6.50487C9.84999 7.80274 8.79786 8.85487 7.49999 8.85487C6.20212 8.85487 5.14999 7.80274 5.14999 6.50487ZM7.49999 5.10487C6.72679 5.10487 6.09999 5.73167 6.09999 6.50487C6.09999 7.27807 6.72679 7.90487 7.49999 7.90487C8.27319 7.90487 8.89999 7.27807 8.89999 6.50487C8.89999 5.73167 8.27319 5.10487 7.49999 5.10487Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
}

// node_modules/@mantine/core/esm/Avatar/AvatarGroup/AvatarGroup.js
var import_react140 = __toESM(require_react());

// node_modules/@mantine/core/esm/Avatar/AvatarGroup/AvatarGroup.context.js
var import_react139 = __toESM(require_react());
var __defProp72 = Object.defineProperty;
var __defProps34 = Object.defineProperties;
var __getOwnPropDescs34 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols74 = Object.getOwnPropertySymbols;
var __hasOwnProp74 = Object.prototype.hasOwnProperty;
var __propIsEnum74 = Object.prototype.propertyIsEnumerable;
var __defNormalProp72 = (obj, key2, value) => key2 in obj ? __defProp72(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues72 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp74.call(b2, prop))
      __defNormalProp72(a2, prop, b2[prop]);
  if (__getOwnPropSymbols74)
    for (var prop of __getOwnPropSymbols74(b2)) {
      if (__propIsEnum74.call(b2, prop))
        __defNormalProp72(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps34 = (a2, b2) => __defProps34(a2, __getOwnPropDescs34(b2));
var AvatarGroupContext = (0, import_react139.createContext)(null);
function AvatarGroupProvider({ spacing, children }) {
  return import_react139.default.createElement(AvatarGroupContext.Provider, {
    value: { spacing }
  }, children);
}
function useAvatarGroupContext() {
  const ctx = (0, import_react139.useContext)(AvatarGroupContext);
  if (ctx) {
    return __spreadProps34(__spreadValues72({}, ctx), { withinGroup: true });
  }
  return { spacing: null, withinGroup: false };
}

// node_modules/@mantine/core/esm/Avatar/AvatarGroup/AvatarGroup.styles.js
var useStyles24 = createStyles((theme, { spacing }) => ({
  root: {
    display: "flex",
    paddingLeft: theme.fn.size({ size: spacing, sizes: theme.spacing })
  }
}));
var AvatarGroup_styles_default = useStyles24;

// node_modules/@mantine/core/esm/Avatar/AvatarGroup/AvatarGroup.js
var __defProp73 = Object.defineProperty;
var __getOwnPropSymbols75 = Object.getOwnPropertySymbols;
var __hasOwnProp75 = Object.prototype.hasOwnProperty;
var __propIsEnum75 = Object.prototype.propertyIsEnumerable;
var __defNormalProp73 = (obj, key2, value) => key2 in obj ? __defProp73(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues73 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp75.call(b2, prop))
      __defNormalProp73(a2, prop, b2[prop]);
  if (__getOwnPropSymbols75)
    for (var prop of __getOwnPropSymbols75(b2)) {
      if (__propIsEnum75.call(b2, prop))
        __defNormalProp73(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest44 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp75.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols75)
    for (var prop of __getOwnPropSymbols75(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum75.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps31 = {};
var AvatarGroup = (0, import_react140.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("AvatarGroup", defaultProps31, props), {
    children,
    spacing = "sm",
    unstyled,
    className
  } = _a, others = __objRest44(_a, [
    "children",
    "spacing",
    "unstyled",
    "className"
  ]);
  const { classes, cx } = AvatarGroup_styles_default({ spacing }, { name: "AvatarGroup", unstyled });
  return import_react140.default.createElement(AvatarGroupProvider, {
    spacing
  }, import_react140.default.createElement(Box, __spreadValues73({
    ref,
    className: cx(classes.root, className)
  }, others), children));
});
AvatarGroup.displayName = "@mantine/core/AvatarGroup";

// node_modules/@mantine/core/esm/Avatar/Avatar.styles.js
var __defProp74 = Object.defineProperty;
var __defProps35 = Object.defineProperties;
var __getOwnPropDescs35 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols76 = Object.getOwnPropertySymbols;
var __hasOwnProp76 = Object.prototype.hasOwnProperty;
var __propIsEnum76 = Object.prototype.propertyIsEnumerable;
var __defNormalProp74 = (obj, key2, value) => key2 in obj ? __defProp74(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues74 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp76.call(b2, prop))
      __defNormalProp74(a2, prop, b2[prop]);
  if (__getOwnPropSymbols76)
    for (var prop of __getOwnPropSymbols76(b2)) {
      if (__propIsEnum76.call(b2, prop))
        __defNormalProp74(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps35 = (a2, b2) => __defProps35(a2, __getOwnPropDescs35(b2));
var sizes5 = {
  xs: 16,
  sm: 26,
  md: 38,
  lg: 56,
  xl: 84
};
function getGroupStyles({ withinGroup, spacing, theme }) {
  if (!withinGroup) {
    return null;
  }
  return {
    marginLeft: -theme.fn.size({ size: spacing, sizes: theme.spacing }),
    backgroundColor: `${theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white}`,
    border: `2px solid ${theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white}`
  };
}
var useStyles25 = createStyles((theme, { size: size3, radius: radius2, color: color2, withinGroup, spacing, variant: variant2, gradient: gradient2 }) => {
  const colors2 = theme.fn.variant({ variant: variant2, color: color2, gradient: gradient2 });
  return {
    root: __spreadValues74(__spreadProps35(__spreadValues74({}, theme.fn.focusStyles()), {
      WebkitTapHighlightColor: "transparent",
      boxSizing: "border-box",
      position: "relative",
      display: "block",
      userSelect: "none",
      overflow: "hidden",
      width: theme.fn.size({ size: size3, sizes: sizes5 }),
      minWidth: theme.fn.size({ size: size3, sizes: sizes5 }),
      height: theme.fn.size({ size: size3, sizes: sizes5 }),
      borderRadius: theme.fn.radius(radius2),
      textDecoration: "none",
      border: 0,
      backgroundColor: "transparent",
      padding: 0
    }), getGroupStyles({ withinGroup, spacing, theme })),
    image: {
      objectFit: "cover",
      width: "100%",
      height: "100%",
      display: "block"
    },
    placeholder: __spreadProps35(__spreadValues74({}, theme.fn.fontStyles()), {
      fontSize: theme.fn.size({ size: size3, sizes: sizes5 }) / 2.5,
      color: colors2.color,
      fontWeight: 700,
      backgroundColor: colors2.background,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      width: "100%",
      height: "100%",
      userSelect: "none",
      backgroundImage: variant2 === "gradient" ? colors2.background : void 0,
      border: `${variant2 === "gradient" ? 0 : 1}px solid ${colors2.border}`,
      borderRadius: theme.fn.radius(radius2)
    }),
    placeholderIcon: {
      width: "70%",
      height: "70%",
      color: colors2.color
    }
  };
});
var Avatar_styles_default = useStyles25;

// node_modules/@mantine/core/esm/Avatar/Avatar.js
var __defProp75 = Object.defineProperty;
var __defProps36 = Object.defineProperties;
var __getOwnPropDescs36 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols77 = Object.getOwnPropertySymbols;
var __hasOwnProp77 = Object.prototype.hasOwnProperty;
var __propIsEnum77 = Object.prototype.propertyIsEnumerable;
var __defNormalProp75 = (obj, key2, value) => key2 in obj ? __defProp75(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues75 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp77.call(b2, prop))
      __defNormalProp75(a2, prop, b2[prop]);
  if (__getOwnPropSymbols77)
    for (var prop of __getOwnPropSymbols77(b2)) {
      if (__propIsEnum77.call(b2, prop))
        __defNormalProp75(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps36 = (a2, b2) => __defProps36(a2, __getOwnPropDescs36(b2));
var __objRest45 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp77.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols77)
    for (var prop of __getOwnPropSymbols77(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum77.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps32 = {
  size: "md",
  color: "gray",
  variant: "light"
};
var _Avatar = (0, import_react141.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Avatar", defaultProps32, props), {
    className,
    size: size3,
    src,
    alt,
    radius: radius2,
    children,
    color: color2,
    variant: variant2,
    gradient: gradient2,
    classNames,
    styles: styles2,
    imageProps,
    unstyled
  } = _a, others = __objRest45(_a, [
    "className",
    "size",
    "src",
    "alt",
    "radius",
    "children",
    "color",
    "variant",
    "gradient",
    "classNames",
    "styles",
    "imageProps",
    "unstyled"
  ]);
  const ctx = useAvatarGroupContext();
  const [error, setError] = (0, import_react141.useState)(!src);
  const { classes, cx } = Avatar_styles_default({ color: color2, radius: radius2, size: size3, withinGroup: ctx.withinGroup, spacing: ctx.spacing, variant: variant2, gradient: gradient2 }, { classNames, styles: styles2, unstyled, name: "Avatar" });
  (0, import_react141.useEffect)(() => {
    !src ? setError(true) : setError(false);
  }, [src]);
  return import_react141.default.createElement(Box, __spreadValues75({
    component: "div",
    className: cx(classes.root, className),
    ref
  }, others), error ? import_react141.default.createElement("div", {
    className: classes.placeholder,
    title: alt
  }, children || import_react141.default.createElement(AvatarPlaceholderIcon, {
    className: classes.placeholderIcon
  })) : import_react141.default.createElement("img", __spreadProps36(__spreadValues75({}, imageProps), {
    className: classes.image,
    src,
    alt,
    onError: () => setError(true)
  })));
});
_Avatar.displayName = "@mantine/core/Avatar";
_Avatar.Group = AvatarGroup;
var Avatar = createPolymorphicComponent(_Avatar);

// node_modules/@mantine/core/esm/BackgroundImage/BackgroundImage.js
var import_react142 = __toESM(require_react());
var __defProp76 = Object.defineProperty;
var __defProps37 = Object.defineProperties;
var __getOwnPropDescs37 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols78 = Object.getOwnPropertySymbols;
var __hasOwnProp78 = Object.prototype.hasOwnProperty;
var __propIsEnum78 = Object.prototype.propertyIsEnumerable;
var __defNormalProp76 = (obj, key2, value) => key2 in obj ? __defProp76(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues76 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp78.call(b2, prop))
      __defNormalProp76(a2, prop, b2[prop]);
  if (__getOwnPropSymbols78)
    for (var prop of __getOwnPropSymbols78(b2)) {
      if (__propIsEnum78.call(b2, prop))
        __defNormalProp76(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps37 = (a2, b2) => __defProps37(a2, __getOwnPropDescs37(b2));
var __objRest46 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp78.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols78)
    for (var prop of __getOwnPropSymbols78(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum78.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps33 = {
  radius: 0
};
var _BackgroundImage = (0, import_react142.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("BackgroundImage", defaultProps33, props), { src, radius: radius2, sx } = _a, others = __objRest46(_a, ["src", "radius", "sx"]);
  return import_react142.default.createElement(Box, __spreadProps37(__spreadValues76({}, others), {
    ref,
    sx: [
      (theme) => __spreadProps37(__spreadValues76({}, theme.fn.focusStyles()), {
        backgroundSize: "cover",
        backgroundPosition: "center",
        display: "block",
        width: "100%",
        border: 0,
        textDecoration: "none",
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
        backgroundImage: `url(${src})`,
        borderRadius: theme.fn.radius(radius2)
      }),
      ...packSx(sx)
    ]
  }));
});
_BackgroundImage.displayName = "@mantine/core/BackgroundImage";
var BackgroundImage = createPolymorphicComponent(_BackgroundImage);

// node_modules/@mantine/core/esm/Badge/Badge.js
var import_react143 = __toESM(require_react());

// node_modules/@mantine/core/esm/Badge/Badge.styles.js
var __defProp77 = Object.defineProperty;
var __defProps38 = Object.defineProperties;
var __getOwnPropDescs38 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols79 = Object.getOwnPropertySymbols;
var __hasOwnProp79 = Object.prototype.hasOwnProperty;
var __propIsEnum79 = Object.prototype.propertyIsEnumerable;
var __defNormalProp77 = (obj, key2, value) => key2 in obj ? __defProp77(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues77 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp79.call(b2, prop))
      __defNormalProp77(a2, prop, b2[prop]);
  if (__getOwnPropSymbols79)
    for (var prop of __getOwnPropSymbols79(b2)) {
      if (__propIsEnum79.call(b2, prop))
        __defNormalProp77(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps38 = (a2, b2) => __defProps38(a2, __getOwnPropDescs38(b2));
var sizes6 = {
  xs: { fontSize: 9, height: 16 },
  sm: { fontSize: 10, height: 18 },
  md: { fontSize: 11, height: 20 },
  lg: { fontSize: 13, height: 26 },
  xl: { fontSize: 16, height: 32 }
};
var dotSizes = {
  xs: 4,
  sm: 4,
  md: 6,
  lg: 8,
  xl: 10
};
function getVariantStyles6({ theme, variant: variant2, color: color2, size: size3, gradient: gradient2 }) {
  if (variant2 === "dot") {
    const dotSize = theme.fn.size({ size: size3, sizes: dotSizes });
    return {
      backgroundColor: "transparent",
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.gray[7],
      border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[3]}`,
      paddingLeft: theme.fn.size({ size: size3, sizes: theme.spacing }) / 1.5 - dotSize / 2,
      "&::before": {
        content: '""',
        display: "block",
        width: dotSize,
        height: dotSize,
        borderRadius: dotSize,
        backgroundColor: theme.fn.themeColor(color2, theme.colorScheme === "dark" ? 4 : theme.fn.primaryShade("light"), true),
        marginRight: dotSize
      }
    };
  }
  const colors2 = theme.fn.variant({ color: color2, variant: variant2, gradient: gradient2 });
  return {
    background: colors2.background,
    color: colors2.color,
    border: `${variant2 === "gradient" ? 0 : 1}px solid ${colors2.border}`
  };
}
var useStyles26 = createStyles((theme, { color: color2, size: size3, radius: radius2, gradient: gradient2, fullWidth, variant: variant2 }) => {
  const { fontSize, height } = size3 in sizes6 ? sizes6[size3] : sizes6.md;
  return {
    leftSection: {
      marginRight: `calc(${theme.spacing.xs}px / 2)`
    },
    rightSection: {
      marginLeft: `calc(${theme.spacing.xs}px / 2)`
    },
    inner: {
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis"
    },
    root: __spreadValues77(__spreadProps38(__spreadValues77(__spreadValues77({}, theme.fn.focusStyles()), theme.fn.fontStyles()), {
      fontSize,
      height,
      WebkitTapHighlightColor: "transparent",
      lineHeight: `${height - 2}px`,
      textDecoration: "none",
      padding: `0 ${theme.fn.size({ size: size3, sizes: theme.spacing }) / 1.5}px`,
      boxSizing: "border-box",
      display: fullWidth ? "flex" : "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      width: fullWidth ? "100%" : "auto",
      textTransform: "uppercase",
      borderRadius: theme.fn.radius(radius2),
      fontWeight: 700,
      letterSpacing: 0.25,
      cursor: "inherit",
      textOverflow: "ellipsis",
      overflow: "hidden"
    }), getVariantStyles6({ theme, variant: variant2, color: color2, size: size3, gradient: gradient2 }))
  };
});
var Badge_styles_default = useStyles26;

// node_modules/@mantine/core/esm/Badge/Badge.js
var __defProp78 = Object.defineProperty;
var __getOwnPropSymbols80 = Object.getOwnPropertySymbols;
var __hasOwnProp80 = Object.prototype.hasOwnProperty;
var __propIsEnum80 = Object.prototype.propertyIsEnumerable;
var __defNormalProp78 = (obj, key2, value) => key2 in obj ? __defProp78(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues78 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp80.call(b2, prop))
      __defNormalProp78(a2, prop, b2[prop]);
  if (__getOwnPropSymbols80)
    for (var prop of __getOwnPropSymbols80(b2)) {
      if (__propIsEnum80.call(b2, prop))
        __defNormalProp78(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest47 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp80.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols80)
    for (var prop of __getOwnPropSymbols80(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum80.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps34 = {
  variant: "light",
  size: "md",
  radius: "xl"
};
var _Badge = (0, import_react143.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Badge", defaultProps34, props), {
    className,
    color: color2,
    variant: variant2,
    fullWidth,
    children,
    size: size3,
    leftSection,
    rightSection,
    radius: radius2,
    gradient: gradient2,
    classNames,
    styles: styles2,
    unstyled
  } = _a, others = __objRest47(_a, [
    "className",
    "color",
    "variant",
    "fullWidth",
    "children",
    "size",
    "leftSection",
    "rightSection",
    "radius",
    "gradient",
    "classNames",
    "styles",
    "unstyled"
  ]);
  const { classes, cx } = Badge_styles_default({
    size: size3,
    fullWidth,
    color: color2,
    radius: radius2,
    variant: variant2,
    gradient: gradient2
  }, { classNames, styles: styles2, name: "Badge", unstyled });
  return import_react143.default.createElement(Box, __spreadValues78({
    className: cx(classes.root, className),
    ref
  }, others), leftSection && import_react143.default.createElement("span", {
    className: classes.leftSection
  }, leftSection), import_react143.default.createElement("span", {
    className: classes.inner
  }, children), rightSection && import_react143.default.createElement("span", {
    className: classes.rightSection
  }, rightSection));
});
_Badge.displayName = "@mantine/core/Badge";
var Badge = createPolymorphicComponent(_Badge);

// node_modules/@mantine/core/esm/Blockquote/Blockquote.js
var import_react145 = __toESM(require_react());

// node_modules/@mantine/core/esm/Blockquote/QuoteIcon.js
var import_react144 = __toESM(require_react());
var __defProp79 = Object.defineProperty;
var __getOwnPropSymbols81 = Object.getOwnPropertySymbols;
var __hasOwnProp81 = Object.prototype.hasOwnProperty;
var __propIsEnum81 = Object.prototype.propertyIsEnumerable;
var __defNormalProp79 = (obj, key2, value) => key2 in obj ? __defProp79(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues79 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp81.call(b2, prop))
      __defNormalProp79(a2, prop, b2[prop]);
  if (__getOwnPropSymbols81)
    for (var prop of __getOwnPropSymbols81(b2)) {
      if (__propIsEnum81.call(b2, prop))
        __defNormalProp79(a2, prop, b2[prop]);
    }
  return a2;
};
function QuoteIcon(props) {
  return import_react144.default.createElement("svg", __spreadValues79({
    width: "20",
    height: "20",
    viewBox: "0 0 409.294 409.294",
    fill: "currentColor",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react144.default.createElement("path", {
    d: "M0 204.647v175.412h175.412V204.647H58.471c0-64.48 52.461-116.941 116.941-116.941V29.235C78.684 29.235 0 107.919 0 204.647zM409.294 87.706V29.235c-96.728 0-175.412 78.684-175.412 175.412v175.412h175.412V204.647H292.353c0-64.48 52.461-116.941 116.941-116.941z"
  }));
}

// node_modules/@mantine/core/esm/Blockquote/Blockquote.styles.js
var __defProp80 = Object.defineProperty;
var __defProps39 = Object.defineProperties;
var __getOwnPropDescs39 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols82 = Object.getOwnPropertySymbols;
var __hasOwnProp82 = Object.prototype.hasOwnProperty;
var __propIsEnum82 = Object.prototype.propertyIsEnumerable;
var __defNormalProp80 = (obj, key2, value) => key2 in obj ? __defProp80(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues80 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp82.call(b2, prop))
      __defNormalProp80(a2, prop, b2[prop]);
  if (__getOwnPropSymbols82)
    for (var prop of __getOwnPropSymbols82(b2)) {
      if (__propIsEnum82.call(b2, prop))
        __defNormalProp80(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps39 = (a2, b2) => __defProps39(a2, __getOwnPropDescs39(b2));
var useStyles27 = createStyles((theme, { color: color2 }) => ({
  root: __spreadProps39(__spreadValues80({}, theme.fn.fontStyles()), {
    fontSize: theme.fontSizes.lg,
    lineHeight: theme.lineHeight,
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    margin: 0,
    borderTopRightRadius: theme.radius.sm,
    borderBottomRightRadius: theme.radius.sm,
    padding: `${theme.spacing.md}px ${theme.spacing.lg}px`
  }),
  inner: {
    display: "flex"
  },
  body: {
    flex: 1,
    overflow: "hidden",
    textOverflow: "ellipsis"
  },
  icon: {
    color: theme.fn.variant({ variant: "filled", color: color2 }).background,
    marginRight: theme.spacing.lg,
    marginTop: 2,
    width: 22
  },
  cite: {
    display: "block",
    fontSize: theme.fontSizes.sm,
    marginTop: theme.spacing.xs,
    color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6],
    overflow: "hidden",
    textOverflow: "ellipsis"
  }
}));
var Blockquote_styles_default = useStyles27;

// node_modules/@mantine/core/esm/Blockquote/Blockquote.js
var __defProp81 = Object.defineProperty;
var __getOwnPropSymbols83 = Object.getOwnPropertySymbols;
var __hasOwnProp83 = Object.prototype.hasOwnProperty;
var __propIsEnum83 = Object.prototype.propertyIsEnumerable;
var __defNormalProp81 = (obj, key2, value) => key2 in obj ? __defProp81(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues81 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp83.call(b2, prop))
      __defNormalProp81(a2, prop, b2[prop]);
  if (__getOwnPropSymbols83)
    for (var prop of __getOwnPropSymbols83(b2)) {
      if (__propIsEnum83.call(b2, prop))
        __defNormalProp81(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest48 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp83.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols83)
    for (var prop of __getOwnPropSymbols83(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum83.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps35 = {
  color: "gray",
  icon: import_react145.default.createElement(QuoteIcon, null)
};
var Blockquote = (0, import_react145.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Blockquote", defaultProps35, props), { className, color: color2, icon, cite, children, classNames, styles: styles2, unstyled } = _a, others = __objRest48(_a, ["className", "color", "icon", "cite", "children", "classNames", "styles", "unstyled"]);
  const { classes, cx } = Blockquote_styles_default({ color: color2 }, { classNames, styles: styles2, unstyled, name: "Blockquote" });
  return import_react145.default.createElement(Box, __spreadValues81({
    component: "blockquote",
    className: cx(classes.root, className),
    ref
  }, others), import_react145.default.createElement("div", {
    className: classes.inner
  }, icon && import_react145.default.createElement("div", {
    className: classes.icon
  }, icon), import_react145.default.createElement("div", {
    className: classes.body
  }, children, cite && import_react145.default.createElement("cite", {
    className: classes.cite
  }, cite))));
});
Blockquote.displayName = "@mantine/core/Blockquote";

// node_modules/@mantine/core/esm/Breadcrumbs/Breadcrumbs.js
var import_react146 = __toESM(require_react());

// node_modules/@mantine/core/esm/Breadcrumbs/Breadcrumbs.styles.js
var useStyles28 = createStyles((theme) => ({
  root: {
    display: "flex",
    alignItems: "center"
  },
  breadcrumb: {
    lineHeight: 1,
    whiteSpace: "nowrap",
    WebkitTapHighlightColor: "transparent"
  },
  separator: {
    marginLeft: theme.spacing.xs,
    marginRight: theme.spacing.xs,
    color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[7],
    lineHeight: 1,
    display: "flex",
    alignItems: "center",
    justifyContent: "center"
  }
}));
var Breadcrumbs_styles_default = useStyles28;

// node_modules/@mantine/core/esm/Breadcrumbs/Breadcrumbs.js
var __defProp82 = Object.defineProperty;
var __getOwnPropSymbols84 = Object.getOwnPropertySymbols;
var __hasOwnProp84 = Object.prototype.hasOwnProperty;
var __propIsEnum84 = Object.prototype.propertyIsEnumerable;
var __defNormalProp82 = (obj, key2, value) => key2 in obj ? __defProp82(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues82 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp84.call(b2, prop))
      __defNormalProp82(a2, prop, b2[prop]);
  if (__getOwnPropSymbols84)
    for (var prop of __getOwnPropSymbols84(b2)) {
      if (__propIsEnum84.call(b2, prop))
        __defNormalProp82(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest49 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp84.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols84)
    for (var prop of __getOwnPropSymbols84(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum84.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps36 = {
  separator: "/"
};
var Breadcrumbs = (0, import_react146.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Breadcrumbs", defaultProps36, props), { className, children, separator, classNames, styles: styles2, unstyled } = _a, others = __objRest49(_a, ["className", "children", "separator", "classNames", "styles", "unstyled"]);
  const { classes, cx } = Breadcrumbs_styles_default(null, { classNames, styles: styles2, unstyled, name: "Breadcrumbs" });
  const items = import_react146.default.Children.toArray(children).reduce((acc, child, index7, array) => {
    var _a2;
    const item = isElement3(child) ? import_react146.default.cloneElement(child, {
      className: cx(classes.breadcrumb, (_a2 = child.props) == null ? void 0 : _a2.className),
      key: index7
    }) : import_react146.default.createElement("div", {
      className: classes.breadcrumb,
      key: index7
    }, child);
    acc.push(item);
    if (index7 !== array.length - 1) {
      acc.push(import_react146.default.createElement(Text, {
        size: "sm",
        className: classes.separator,
        key: `separator-${index7}`
      }, separator));
    }
    return acc;
  }, []);
  return import_react146.default.createElement(Box, __spreadValues82({
    className: cx(classes.root, className),
    ref
  }, others), items);
});
Breadcrumbs.displayName = "@mantine/core/Breadcrumbs";

// node_modules/@mantine/core/esm/Burger/Burger.js
var import_react147 = __toESM(require_react());

// node_modules/@mantine/core/esm/Burger/Burger.styles.js
var sizes7 = {
  xs: 12,
  sm: 18,
  md: 24,
  lg: 34,
  xl: 42
};
var useStyles29 = createStyles((theme, { size: size3, color: color2, transitionDuration }) => {
  const sizeValue = theme.fn.size({ size: size3, sizes: sizes7 });
  const _color = color2 || (theme.colorScheme === "dark" ? theme.white : theme.black);
  return {
    root: {
      borderRadius: theme.radius.sm,
      width: `calc(${sizeValue}px + ${theme.spacing.xs}px)`,
      height: `calc(${sizeValue}px + ${theme.spacing.xs}px)`,
      padding: `calc(${theme.spacing.xs}px / 2)`,
      cursor: "pointer"
    },
    burger: {
      position: "relative",
      userSelect: "none",
      boxSizing: "border-box",
      "&, &::before, &::after": {
        display: "block",
        width: sizeValue,
        height: Math.ceil(sizeValue / 12),
        backgroundColor: _color,
        outline: "1px solid transparent",
        transitionProperty: "background-color, transform",
        transitionDuration: `${transitionDuration}ms`,
        "@media (prefers-reduced-motion)": {
          transitionDuration: theme.respectReducedMotion ? "0ms" : void 0
        }
      },
      "&::before, &::after": {
        position: "absolute",
        content: '""',
        left: 0
      },
      "&::before": {
        top: sizeValue / 3 * -1
      },
      "&::after": {
        top: sizeValue / 3
      },
      "&[data-opened]": {
        backgroundColor: "transparent",
        "&::before": {
          transform: `translateY(${sizeValue / 3}px) rotate(45deg)`
        },
        "&::after": {
          transform: `translateY(-${sizeValue / 3}px) rotate(-45deg)`
        }
      }
    }
  };
});
var Burger_styles_default = useStyles29;

// node_modules/@mantine/core/esm/Burger/Burger.js
var __defProp83 = Object.defineProperty;
var __getOwnPropSymbols85 = Object.getOwnPropertySymbols;
var __hasOwnProp85 = Object.prototype.hasOwnProperty;
var __propIsEnum85 = Object.prototype.propertyIsEnumerable;
var __defNormalProp83 = (obj, key2, value) => key2 in obj ? __defProp83(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues83 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp85.call(b2, prop))
      __defNormalProp83(a2, prop, b2[prop]);
  if (__getOwnPropSymbols85)
    for (var prop of __getOwnPropSymbols85(b2)) {
      if (__propIsEnum85.call(b2, prop))
        __defNormalProp83(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest50 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp85.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols85)
    for (var prop of __getOwnPropSymbols85(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum85.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps37 = {
  size: "md",
  transitionDuration: 300
};
var Burger = (0, import_react147.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Burger", defaultProps37, props), { className, opened, color: color2, size: size3, classNames, styles: styles2, transitionDuration } = _a, others = __objRest50(_a, ["className", "opened", "color", "size", "classNames", "styles", "transitionDuration"]);
  const { classes, cx } = Burger_styles_default({ color: color2, size: size3, transitionDuration }, { classNames, styles: styles2, name: "Burger" });
  return import_react147.default.createElement(UnstyledButton, __spreadValues83({
    className: cx(classes.root, className),
    ref
  }, others), import_react147.default.createElement("div", {
    "data-opened": opened || void 0,
    className: classes.burger
  }));
});
Burger.displayName = "@mantine/core/Burger";

// node_modules/@mantine/core/esm/Button/Button.js
var import_react149 = __toESM(require_react());

// node_modules/@mantine/core/esm/Button/ButtonGroup/ButtonGroup.js
var import_react148 = __toESM(require_react());

// node_modules/@mantine/core/esm/Button/ButtonGroup/ButtonGroup.styles.js
var useStyles30 = createStyles((_theme, { orientation, buttonBorderWidth }) => ({
  root: {
    display: "flex",
    flexDirection: orientation === "vertical" ? "column" : "row",
    "& [data-button]": {
      "&:first-of-type": {
        borderBottomRightRadius: 0,
        [orientation === "vertical" ? "borderBottomLeftRadius" : "borderTopRightRadius"]: 0,
        [orientation === "vertical" ? "borderBottomWidth" : "borderRightWidth"]: buttonBorderWidth / 2
      },
      "&:last-of-type": {
        borderTopLeftRadius: 0,
        [orientation === "vertical" ? "borderTopRightRadius" : "borderBottomLeftRadius"]: 0,
        [orientation === "vertical" ? "borderTopWidth" : "borderLeftWidth"]: buttonBorderWidth / 2
      },
      "&:not(:first-of-type):not(:last-of-type)": {
        borderRadius: 0,
        [orientation === "vertical" ? "borderTopWidth" : "borderLeftWidth"]: buttonBorderWidth / 2,
        [orientation === "vertical" ? "borderBottomWidth" : "borderRightWidth"]: buttonBorderWidth / 2
      },
      "& + [data-button]": {
        [orientation === "vertical" ? "marginTop" : "marginLeft"]: -buttonBorderWidth,
        "@media (min-resolution: 192dpi)": {
          [orientation === "vertical" ? "marginTop" : "marginLeft"]: 0
        }
      }
    }
  }
}));
var ButtonGroup_styles_default = useStyles30;

// node_modules/@mantine/core/esm/Button/ButtonGroup/ButtonGroup.js
var __defProp84 = Object.defineProperty;
var __getOwnPropSymbols86 = Object.getOwnPropertySymbols;
var __hasOwnProp86 = Object.prototype.hasOwnProperty;
var __propIsEnum86 = Object.prototype.propertyIsEnumerable;
var __defNormalProp84 = (obj, key2, value) => key2 in obj ? __defProp84(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues84 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp86.call(b2, prop))
      __defNormalProp84(a2, prop, b2[prop]);
  if (__getOwnPropSymbols86)
    for (var prop of __getOwnPropSymbols86(b2)) {
      if (__propIsEnum86.call(b2, prop))
        __defNormalProp84(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest51 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp86.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols86)
    for (var prop of __getOwnPropSymbols86(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum86.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps38 = {
  orientation: "horizontal",
  buttonBorderWidth: 1
};
var ButtonGroup = (0, import_react148.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("ButtonGroup", defaultProps38, props), { className, orientation, buttonBorderWidth, unstyled } = _a, others = __objRest51(_a, ["className", "orientation", "buttonBorderWidth", "unstyled"]);
  const { classes, cx } = ButtonGroup_styles_default({ orientation, buttonBorderWidth }, { name: "ButtonGroup", unstyled });
  return import_react148.default.createElement(Box, __spreadValues84({
    className: cx(classes.root, className),
    ref
  }, others));
});
ButtonGroup.displayName = "@mantine/core/ButtonGroup";

// node_modules/@mantine/core/esm/Button/Button.styles.js
var __defProp85 = Object.defineProperty;
var __defProps40 = Object.defineProperties;
var __getOwnPropDescs40 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols87 = Object.getOwnPropertySymbols;
var __hasOwnProp87 = Object.prototype.hasOwnProperty;
var __propIsEnum87 = Object.prototype.propertyIsEnumerable;
var __defNormalProp85 = (obj, key2, value) => key2 in obj ? __defProp85(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues85 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp87.call(b2, prop))
      __defNormalProp85(a2, prop, b2[prop]);
  if (__getOwnPropSymbols87)
    for (var prop of __getOwnPropSymbols87(b2)) {
      if (__propIsEnum87.call(b2, prop))
        __defNormalProp85(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps40 = (a2, b2) => __defProps40(a2, __getOwnPropDescs40(b2));
var sizes8 = {
  xs: { height: sizes4.xs, paddingLeft: 14, paddingRight: 14 },
  sm: { height: sizes4.sm, paddingLeft: 18, paddingRight: 18 },
  md: { height: sizes4.md, paddingLeft: 22, paddingRight: 22 },
  lg: { height: sizes4.lg, paddingLeft: 26, paddingRight: 26 },
  xl: { height: sizes4.xl, paddingLeft: 32, paddingRight: 32 },
  "compact-xs": { height: 22, paddingLeft: 7, paddingRight: 7 },
  "compact-sm": { height: 26, paddingLeft: 8, paddingRight: 8 },
  "compact-md": { height: 30, paddingLeft: 10, paddingRight: 10 },
  "compact-lg": { height: 34, paddingLeft: 12, paddingRight: 12 },
  "compact-xl": { height: 40, paddingLeft: 14, paddingRight: 14 }
};
function getSizeStyles({ compact, size: size3, withLeftIcon, withRightIcon }) {
  if (compact) {
    return sizes8[`compact-${size3}`];
  }
  const _sizes = sizes8[size3];
  return __spreadProps40(__spreadValues85({}, _sizes), {
    paddingLeft: withLeftIcon ? _sizes.paddingLeft / 1.5 : _sizes.paddingLeft,
    paddingRight: withRightIcon ? _sizes.paddingRight / 1.5 : _sizes.paddingRight
  });
}
var getWidthStyles = (fullWidth) => ({
  display: fullWidth ? "block" : "inline-block",
  width: fullWidth ? "100%" : "auto"
});
function getVariantStyles7({ variant: variant2, theme, color: color2, gradient: gradient2 }) {
  const colors2 = theme.fn.variant({ color: color2, variant: variant2, gradient: gradient2 });
  if (variant2 === "gradient") {
    return {
      border: 0,
      backgroundImage: colors2.background,
      color: colors2.color,
      "&:hover": theme.fn.hover({
        backgroundSize: "200%"
      })
    };
  }
  return __spreadValues85({
    border: `1px solid ${colors2.border}`,
    backgroundColor: colors2.background,
    color: colors2.color
  }, theme.fn.hover({
    backgroundColor: colors2.hover
  }));
}
var useStyles31 = createStyles((theme, {
  color: color2,
  size: size3,
  radius: radius2,
  fullWidth,
  compact,
  gradient: gradient2,
  variant: variant2,
  withLeftIcon,
  withRightIcon
}) => ({
  root: __spreadProps40(__spreadValues85(__spreadProps40(__spreadValues85(__spreadValues85(__spreadValues85(__spreadValues85({}, getSizeStyles({ compact, size: size3, withLeftIcon, withRightIcon })), theme.fn.fontStyles()), theme.fn.focusStyles()), getWidthStyles(fullWidth)), {
    borderRadius: theme.fn.radius(radius2),
    fontWeight: 600,
    position: "relative",
    lineHeight: 1,
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
    userSelect: "none",
    cursor: "pointer"
  }), getVariantStyles7({ variant: variant2, theme, color: color2, gradient: gradient2 })), {
    "&:active": theme.activeStyles,
    "&:disabled, &[data-disabled]": {
      borderColor: "transparent",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
      color: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[5],
      cursor: "not-allowed",
      backgroundImage: "none",
      pointerEvents: "none",
      "&:active": {
        transform: "none"
      }
    },
    "&[data-loading]": {
      pointerEvents: "none",
      "&::before": {
        content: '""',
        position: "absolute",
        top: -1,
        left: -1,
        right: -1,
        bottom: -1,
        backgroundColor: theme.colorScheme === "dark" ? theme.fn.rgba(theme.colors.dark[7], 0.5) : "rgba(255, 255, 255, .5)",
        borderRadius: theme.fn.radius(radius2),
        cursor: "not-allowed"
      }
    }
  }),
  icon: {
    display: "flex",
    alignItems: "center"
  },
  leftIcon: {
    marginRight: 10
  },
  rightIcon: {
    marginLeft: 10
  },
  centerLoader: {
    position: "absolute",
    left: "50%",
    transform: "translateX(-50%)",
    opacity: 0.5
  },
  inner: {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    height: "100%",
    overflow: "visible"
  },
  label: {
    whiteSpace: "nowrap",
    height: "100%",
    overflow: "hidden",
    display: "flex",
    alignItems: "center"
  }
}));
var Button_styles_default = useStyles31;

// node_modules/@mantine/core/esm/Button/Button.js
var __defProp86 = Object.defineProperty;
var __getOwnPropSymbols88 = Object.getOwnPropertySymbols;
var __hasOwnProp88 = Object.prototype.hasOwnProperty;
var __propIsEnum88 = Object.prototype.propertyIsEnumerable;
var __defNormalProp86 = (obj, key2, value) => key2 in obj ? __defProp86(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues86 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp88.call(b2, prop))
      __defNormalProp86(a2, prop, b2[prop]);
  if (__getOwnPropSymbols88)
    for (var prop of __getOwnPropSymbols88(b2)) {
      if (__propIsEnum88.call(b2, prop))
        __defNormalProp86(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest52 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp88.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols88)
    for (var prop of __getOwnPropSymbols88(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum88.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps39 = {
  size: "sm",
  type: "button",
  variant: "filled",
  loaderPosition: "left"
};
var _Button = (0, import_react149.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Button", defaultProps39, props), {
    className,
    size: size3,
    color: color2,
    type,
    disabled,
    children,
    leftIcon,
    rightIcon,
    fullWidth,
    variant: variant2,
    radius: radius2,
    uppercase,
    compact,
    loading,
    loaderPosition,
    loaderProps,
    gradient: gradient2,
    classNames,
    styles: styles2,
    unstyled
  } = _a, others = __objRest52(_a, [
    "className",
    "size",
    "color",
    "type",
    "disabled",
    "children",
    "leftIcon",
    "rightIcon",
    "fullWidth",
    "variant",
    "radius",
    "uppercase",
    "compact",
    "loading",
    "loaderPosition",
    "loaderProps",
    "gradient",
    "classNames",
    "styles",
    "unstyled"
  ]);
  const { classes, cx, theme } = Button_styles_default({
    radius: radius2,
    color: color2,
    size: size3,
    fullWidth,
    compact,
    gradient: gradient2,
    variant: variant2,
    withLeftIcon: !!leftIcon,
    withRightIcon: !!rightIcon
  }, { name: "Button", unstyled, classNames, styles: styles2 });
  const colors2 = theme.fn.variant({ color: color2, variant: variant2 });
  const loader = import_react149.default.createElement(Loader, __spreadValues86({
    color: colors2.color,
    size: theme.fn.size({ size: size3, sizes: sizes8 }).height / 2
  }, loaderProps));
  return import_react149.default.createElement(UnstyledButton, __spreadValues86({
    className: cx(classes.root, className),
    type,
    disabled,
    "data-button": true,
    "data-disabled": disabled || void 0,
    "data-loading": loading || void 0,
    ref,
    unstyled
  }, others), import_react149.default.createElement("div", {
    className: classes.inner
  }, (leftIcon || loading && loaderPosition === "left") && import_react149.default.createElement("span", {
    className: cx(classes.icon, classes.leftIcon)
  }, loading && loaderPosition === "left" ? loader : leftIcon), loading && loaderPosition === "center" && import_react149.default.createElement("span", {
    className: classes.centerLoader
  }, loader), import_react149.default.createElement("span", {
    className: classes.label,
    style: { textTransform: uppercase ? "uppercase" : void 0 }
  }, children), (rightIcon || loading && loaderPosition === "right") && import_react149.default.createElement("span", {
    className: cx(classes.icon, classes.rightIcon)
  }, loading && loaderPosition === "right" ? loader : rightIcon)));
});
_Button.displayName = "@mantine/core/Button";
_Button.Group = ButtonGroup;
var Button = createPolymorphicComponent(_Button);

// node_modules/@mantine/core/esm/Card/Card.js
var import_react153 = __toESM(require_react());

// node_modules/@mantine/core/esm/Paper/Paper.js
var import_react150 = __toESM(require_react());

// node_modules/@mantine/core/esm/Paper/Paper.styles.js
var useStyles32 = createStyles((theme, { radius: radius2, shadow, withBorder }) => ({
  root: {
    outline: 0,
    WebkitTapHighlightColor: "transparent",
    display: "block",
    textDecoration: "none",
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
    boxSizing: "border-box",
    borderRadius: theme.fn.radius(radius2),
    boxShadow: theme.shadows[shadow] || shadow || "none",
    border: withBorder ? `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}` : void 0
  }
}));
var Paper_styles_default = useStyles32;

// node_modules/@mantine/core/esm/Paper/Paper.js
var __defProp87 = Object.defineProperty;
var __getOwnPropSymbols89 = Object.getOwnPropertySymbols;
var __hasOwnProp89 = Object.prototype.hasOwnProperty;
var __propIsEnum89 = Object.prototype.propertyIsEnumerable;
var __defNormalProp87 = (obj, key2, value) => key2 in obj ? __defProp87(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues87 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp89.call(b2, prop))
      __defNormalProp87(a2, prop, b2[prop]);
  if (__getOwnPropSymbols89)
    for (var prop of __getOwnPropSymbols89(b2)) {
      if (__propIsEnum89.call(b2, prop))
        __defNormalProp87(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest53 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp89.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols89)
    for (var prop of __getOwnPropSymbols89(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum89.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps40 = {};
var _Paper = (0, import_react150.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Paper", defaultProps40, props), { className, children, radius: radius2, withBorder, shadow, unstyled } = _a, others = __objRest53(_a, ["className", "children", "radius", "withBorder", "shadow", "unstyled"]);
  const { classes, cx } = Paper_styles_default({ radius: radius2, shadow, withBorder }, { name: "Paper", unstyled });
  return import_react150.default.createElement(Box, __spreadValues87({
    className: cx(classes.root, className),
    ref
  }, others), children);
});
_Paper.displayName = "@mantine/core/Paper";
var Paper = createPolymorphicComponent(_Paper);

// node_modules/@mantine/core/esm/Card/CardSection/CardSection.js
var import_react152 = __toESM(require_react());

// node_modules/@mantine/core/esm/Card/Card.context.js
var import_react151 = __toESM(require_react());
var CardContext = (0, import_react151.createContext)({ padding: 0 });
var CardProvider = CardContext.Provider;
var useCardPadding = () => (0, import_react151.useContext)(CardContext).padding;

// node_modules/@mantine/core/esm/Card/CardSection/CardSection.styles.js
var useStyles33 = createStyles((theme, { padding: padding2, withBorder, inheritPadding }) => {
  const spacing = theme.fn.size({ size: padding2, sizes: theme.spacing });
  const offset3 = -1 * spacing;
  const borderColor = theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3];
  return {
    cardSection: {
      display: "block",
      marginLeft: offset3,
      marginRight: offset3,
      paddingLeft: inheritPadding ? spacing : void 0,
      paddingRight: inheritPadding ? spacing : void 0,
      borderTop: withBorder && `1px solid ${borderColor}`,
      borderBottom: withBorder && `1px solid ${borderColor}`,
      "& + &": {
        borderTop: 0
      },
      "&[data-first]": {
        marginTop: offset3,
        borderTop: 0,
        borderBottom: withBorder && `1px solid ${borderColor}`
      },
      "&[data-last]": {
        marginBottom: offset3,
        borderBottom: 0
      }
    }
  };
});
var CardSection_styles_default = useStyles33;

// node_modules/@mantine/core/esm/Card/CardSection/CardSection.js
var __defProp88 = Object.defineProperty;
var __getOwnPropSymbols90 = Object.getOwnPropertySymbols;
var __hasOwnProp90 = Object.prototype.hasOwnProperty;
var __propIsEnum90 = Object.prototype.propertyIsEnumerable;
var __defNormalProp88 = (obj, key2, value) => key2 in obj ? __defProp88(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues88 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp90.call(b2, prop))
      __defNormalProp88(a2, prop, b2[prop]);
  if (__getOwnPropSymbols90)
    for (var prop of __getOwnPropSymbols90(b2)) {
      if (__propIsEnum90.call(b2, prop))
        __defNormalProp88(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest54 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp90.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols90)
    for (var prop of __getOwnPropSymbols90(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum90.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps41 = {
  withBorder: false,
  inheritPadding: false
};
var _CardSection = (0, import_react152.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("CardSection", defaultProps41, props), { className, withBorder, inheritPadding, unstyled } = _a, others = __objRest54(_a, ["className", "withBorder", "inheritPadding", "unstyled"]);
  const { classes, cx } = CardSection_styles_default({ padding: useCardPadding(), withBorder, inheritPadding }, { name: "Card", unstyled });
  return import_react152.default.createElement(Box, __spreadValues88({
    className: cx(classes.cardSection, className),
    ref
  }, others));
});
_CardSection.displayName = "@mantine/core/CardSection";
var CardSection = createPolymorphicComponent(_CardSection);

// node_modules/@mantine/core/esm/Card/Card.styles.js
var useStyles34 = createStyles((theme) => ({
  root: {
    position: "relative",
    overflow: "hidden",
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white
  }
}));
var Card_styles_default = useStyles34;

// node_modules/@mantine/core/esm/Card/Card.js
var __defProp89 = Object.defineProperty;
var __getOwnPropSymbols91 = Object.getOwnPropertySymbols;
var __hasOwnProp91 = Object.prototype.hasOwnProperty;
var __propIsEnum91 = Object.prototype.propertyIsEnumerable;
var __defNormalProp89 = (obj, key2, value) => key2 in obj ? __defProp89(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues89 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp91.call(b2, prop))
      __defNormalProp89(a2, prop, b2[prop]);
  if (__getOwnPropSymbols91)
    for (var prop of __getOwnPropSymbols91(b2)) {
      if (__propIsEnum91.call(b2, prop))
        __defNormalProp89(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest55 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp91.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols91)
    for (var prop of __getOwnPropSymbols91(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum91.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps42 = {
  p: "md"
};
var _Card = (0, import_react153.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Card", defaultProps42, props), { className, p: p5, radius: radius2, children, unstyled } = _a, others = __objRest55(_a, ["className", "p", "radius", "children", "unstyled"]);
  const { classes, cx } = Card_styles_default(null, { name: "Card", unstyled });
  const _children = import_react153.Children.toArray(children);
  const content5 = _children.map((child, index7) => {
    if (typeof child === "object" && child && "type" in child && child.type === CardSection) {
      return (0, import_react153.cloneElement)(child, {
        padding: p5,
        "data-first": index7 === 0 || void 0,
        "data-last": index7 === _children.length - 1 || void 0
      });
    }
    return child;
  });
  return import_react153.default.createElement(CardProvider, {
    value: { padding: p5 }
  }, import_react153.default.createElement(Paper, __spreadValues89({
    className: cx(classes.root, className),
    radius: radius2,
    p: p5,
    ref
  }, others), content5));
});
_Card.Section = CardSection;
_Card.displayName = "@mantine/core/Card";
var Card = createPolymorphicComponent(_Card);

// node_modules/@mantine/core/esm/Center/Center.js
var import_react154 = __toESM(require_react());
var __defProp90 = Object.defineProperty;
var __getOwnPropSymbols92 = Object.getOwnPropertySymbols;
var __hasOwnProp92 = Object.prototype.hasOwnProperty;
var __propIsEnum92 = Object.prototype.propertyIsEnumerable;
var __defNormalProp90 = (obj, key2, value) => key2 in obj ? __defProp90(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues90 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp92.call(b2, prop))
      __defNormalProp90(a2, prop, b2[prop]);
  if (__getOwnPropSymbols92)
    for (var prop of __getOwnPropSymbols92(b2)) {
      if (__propIsEnum92.call(b2, prop))
        __defNormalProp90(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest56 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp92.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols92)
    for (var prop of __getOwnPropSymbols92(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum92.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var _Center = (0, import_react154.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Center", {}, props), { inline: inline2, sx } = _a, others = __objRest56(_a, ["inline", "sx"]);
  return import_react154.default.createElement(Box, __spreadValues90({
    ref,
    sx: [
      {
        display: inline2 ? "inline-flex" : "flex",
        alignItems: "center",
        justifyContent: "center"
      },
      ...packSx(sx)
    ]
  }, others));
});
_Center.displayName = "@mantine/core/Center";
var Center = createPolymorphicComponent(_Center);

// node_modules/@mantine/core/esm/Checkbox/Checkbox.js
var import_react163 = __toESM(require_react());

// node_modules/@mantine/core/esm/Checkbox/CheckboxGroup.context.js
var import_react155 = __toESM(require_react());
var CheckboxGroupContext = (0, import_react155.createContext)(null);
var CheckboxGroupProvider = CheckboxGroupContext.Provider;
var useCheckboxGroupContext = () => (0, import_react155.useContext)(CheckboxGroupContext);

// node_modules/@mantine/core/esm/Checkbox/CheckboxGroup/CheckboxGroup.js
var import_react160 = __toESM(require_react());

// node_modules/@mantine/core/esm/Checkbox/CheckboxGroup/InputsGroup.js
var import_react159 = __toESM(require_react());

// node_modules/@mantine/core/esm/Group/Group.js
var import_react157 = __toESM(require_react());

// node_modules/@mantine/core/esm/Group/filter-falsy-children/filter-falsy-children.js
var import_react156 = __toESM(require_react());
function filterFalsyChildren(children) {
  return import_react156.Children.toArray(children).filter(Boolean);
}

// node_modules/@mantine/core/esm/Group/Group.styles.js
var GROUP_POSITIONS = {
  left: "flex-start",
  center: "center",
  right: "flex-end",
  apart: "space-between"
};
var useStyles35 = createStyles((theme, { spacing, position: position5, noWrap, grow, align, count: count2 }) => ({
  root: {
    boxSizing: "border-box",
    display: "flex",
    flexDirection: "row",
    alignItems: align || "center",
    flexWrap: noWrap ? "nowrap" : "wrap",
    justifyContent: GROUP_POSITIONS[position5],
    gap: theme.fn.size({ size: spacing, sizes: theme.spacing }),
    "& > *": {
      boxSizing: "border-box",
      maxWidth: grow ? `calc(${100 / count2}% - ${theme.fn.size({ size: spacing, sizes: theme.spacing }) - theme.fn.size({ size: spacing, sizes: theme.spacing }) / count2}px)` : void 0,
      flexGrow: grow ? 1 : 0
    }
  }
}));
var Group_styles_default = useStyles35;

// node_modules/@mantine/core/esm/Group/Group.js
var __defProp91 = Object.defineProperty;
var __getOwnPropSymbols93 = Object.getOwnPropertySymbols;
var __hasOwnProp93 = Object.prototype.hasOwnProperty;
var __propIsEnum93 = Object.prototype.propertyIsEnumerable;
var __defNormalProp91 = (obj, key2, value) => key2 in obj ? __defProp91(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues91 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp93.call(b2, prop))
      __defNormalProp91(a2, prop, b2[prop]);
  if (__getOwnPropSymbols93)
    for (var prop of __getOwnPropSymbols93(b2)) {
      if (__propIsEnum93.call(b2, prop))
        __defNormalProp91(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest57 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp93.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols93)
    for (var prop of __getOwnPropSymbols93(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum93.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps43 = {
  position: "left",
  spacing: "md"
};
var Group = (0, import_react157.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Group", defaultProps43, props), { className, position: position5, align, children, noWrap, grow, spacing, unstyled } = _a, others = __objRest57(_a, ["className", "position", "align", "children", "noWrap", "grow", "spacing", "unstyled"]);
  const filteredChildren = filterFalsyChildren(children);
  const { classes, cx } = Group_styles_default({
    align,
    grow,
    noWrap,
    spacing,
    position: position5,
    count: filteredChildren.length
  }, { unstyled, name: "Group" });
  return import_react157.default.createElement(Box, __spreadValues91({
    className: cx(classes.root, className),
    ref
  }, others), filteredChildren);
});
Group.displayName = "@mantine/core/Group";

// node_modules/@mantine/core/esm/Stack/Stack.js
var import_react158 = __toESM(require_react());

// node_modules/@mantine/core/esm/Stack/Stack.styles.js
var useStyles36 = createStyles((theme, { spacing, align, justify }) => ({
  root: {
    display: "flex",
    flexDirection: "column",
    alignItems: align,
    justifyContent: justify,
    gap: theme.fn.size({ size: spacing, sizes: theme.spacing })
  }
}));
var Stack_styles_default = useStyles36;

// node_modules/@mantine/core/esm/Stack/Stack.js
var __defProp92 = Object.defineProperty;
var __getOwnPropSymbols94 = Object.getOwnPropertySymbols;
var __hasOwnProp94 = Object.prototype.hasOwnProperty;
var __propIsEnum94 = Object.prototype.propertyIsEnumerable;
var __defNormalProp92 = (obj, key2, value) => key2 in obj ? __defProp92(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues92 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp94.call(b2, prop))
      __defNormalProp92(a2, prop, b2[prop]);
  if (__getOwnPropSymbols94)
    for (var prop of __getOwnPropSymbols94(b2)) {
      if (__propIsEnum94.call(b2, prop))
        __defNormalProp92(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest58 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp94.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols94)
    for (var prop of __getOwnPropSymbols94(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum94.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps44 = {
  spacing: "md",
  align: "stretch",
  justify: "flex-start"
};
var Stack = (0, import_react158.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Stack", defaultProps44, props), { spacing, className, align, justify, unstyled } = _a, others = __objRest58(_a, ["spacing", "className", "align", "justify", "unstyled"]);
  const { classes, cx } = Stack_styles_default({ spacing, align, justify }, { name: "Stack", unstyled });
  return import_react158.default.createElement(Box, __spreadValues92({
    className: cx(classes.root, className),
    ref
  }, others));
});
Stack.displayName = "@mantine/core/Stack";

// node_modules/@mantine/core/esm/Checkbox/CheckboxGroup/InputsGroup.js
function InputsGroup({
  spacing,
  offset: offset3,
  orientation,
  children,
  role,
  unstyled
}) {
  if (orientation === "horizontal") {
    return import_react159.default.createElement(Group, {
      pt: offset3,
      spacing,
      role,
      unstyled
    }, children);
  }
  return import_react159.default.createElement(Stack, {
    pt: offset3,
    spacing,
    role,
    unstyled
  }, children);
}

// node_modules/@mantine/core/esm/Checkbox/CheckboxGroup/CheckboxGroup.js
var __defProp93 = Object.defineProperty;
var __getOwnPropSymbols95 = Object.getOwnPropertySymbols;
var __hasOwnProp95 = Object.prototype.hasOwnProperty;
var __propIsEnum95 = Object.prototype.propertyIsEnumerable;
var __defNormalProp93 = (obj, key2, value) => key2 in obj ? __defProp93(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues93 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp95.call(b2, prop))
      __defNormalProp93(a2, prop, b2[prop]);
  if (__getOwnPropSymbols95)
    for (var prop of __getOwnPropSymbols95(b2)) {
      if (__propIsEnum95.call(b2, prop))
        __defNormalProp93(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest59 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp95.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols95)
    for (var prop of __getOwnPropSymbols95(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum95.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps45 = {
  orientation: "horizontal",
  spacing: "lg",
  size: "sm",
  offset: "xs"
};
var CheckboxGroup = (0, import_react160.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("CheckboxGroup", defaultProps45, props), {
    children,
    value,
    defaultValue,
    onChange,
    orientation,
    spacing,
    size: size3,
    wrapperProps,
    offset: offset3
  } = _a, others = __objRest59(_a, [
    "children",
    "value",
    "defaultValue",
    "onChange",
    "orientation",
    "spacing",
    "size",
    "wrapperProps",
    "offset"
  ]);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: [],
    onChange
  });
  const handleChange = (event) => {
    const itemValue = event.currentTarget.value;
    setValue(_value.includes(itemValue) ? _value.filter((item) => item !== itemValue) : [..._value, itemValue]);
  };
  return import_react160.default.createElement(CheckboxGroupProvider, {
    value: { value: _value, onChange: handleChange, size: size3 }
  }, import_react160.default.createElement(Input.Wrapper, __spreadValues93(__spreadValues93({
    labelElement: "div",
    size: size3,
    __staticSelector: "CheckboxGroup",
    ref
  }, wrapperProps), others), import_react160.default.createElement(InputsGroup, {
    spacing,
    orientation,
    offset: offset3
  }, children)));
});
CheckboxGroup.displayName = "@mantine/core/CheckboxGroup";

// node_modules/@mantine/core/esm/Checkbox/CheckboxIcon.js
var import_react161 = __toESM(require_react());
var __defProp94 = Object.defineProperty;
var __getOwnPropSymbols96 = Object.getOwnPropertySymbols;
var __hasOwnProp96 = Object.prototype.hasOwnProperty;
var __propIsEnum96 = Object.prototype.propertyIsEnumerable;
var __defNormalProp94 = (obj, key2, value) => key2 in obj ? __defProp94(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues94 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp96.call(b2, prop))
      __defNormalProp94(a2, prop, b2[prop]);
  if (__getOwnPropSymbols96)
    for (var prop of __getOwnPropSymbols96(b2)) {
      if (__propIsEnum96.call(b2, prop))
        __defNormalProp94(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest60 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp96.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols96)
    for (var prop of __getOwnPropSymbols96(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum96.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function CheckIcon(props) {
  return import_react161.default.createElement("svg", __spreadValues94({
    viewBox: "0 0 10 7",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react161.default.createElement("path", {
    d: "M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
}
function CheckboxIcon(_a) {
  var _b = _a, { indeterminate } = _b, others = __objRest60(_b, ["indeterminate"]);
  if (indeterminate) {
    return import_react161.default.createElement("svg", __spreadValues94({
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 32 6"
    }, others), import_react161.default.createElement("rect", {
      width: "32",
      height: "6",
      fill: "currentColor",
      rx: "3"
    }));
  }
  return import_react161.default.createElement(CheckIcon, __spreadValues94({}, others));
}

// node_modules/@mantine/core/esm/Checkbox/Checkbox.styles.js
var __defProp95 = Object.defineProperty;
var __defProps41 = Object.defineProperties;
var __getOwnPropDescs41 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols97 = Object.getOwnPropertySymbols;
var __hasOwnProp97 = Object.prototype.hasOwnProperty;
var __propIsEnum97 = Object.prototype.propertyIsEnumerable;
var __defNormalProp95 = (obj, key2, value) => key2 in obj ? __defProp95(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues95 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp97.call(b2, prop))
      __defNormalProp95(a2, prop, b2[prop]);
  if (__getOwnPropSymbols97)
    for (var prop of __getOwnPropSymbols97(b2)) {
      if (__propIsEnum97.call(b2, prop))
        __defNormalProp95(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps41 = (a2, b2) => __defProps41(a2, __getOwnPropDescs41(b2));
var sizes9 = {
  xs: 16,
  sm: 20,
  md: 24,
  lg: 30,
  xl: 36
};
var iconSizes2 = {
  xs: 8,
  sm: 10,
  md: 14,
  lg: 16,
  xl: 20
};
var useStyles37 = createStyles((theme, {
  size: size3,
  radius: radius2,
  color: color2,
  transitionDuration,
  labelPosition,
  error,
  indeterminate
}, getRef2) => {
  const _size = theme.fn.size({ size: size3, sizes: sizes9 });
  const colors2 = theme.fn.variant({ variant: "filled", color: color2 });
  const errorColor = theme.fn.variant({ variant: "filled", color: "red" }).background;
  return {
    icon: {
      ref: getRef2("icon"),
      color: indeterminate ? "inherit" : theme.white,
      transform: indeterminate ? "none" : "translateY(5px) scale(0.5)",
      opacity: indeterminate ? 1 : 0,
      transitionProperty: "opacity, transform",
      transitionTimingFunction: "ease",
      transitionDuration: `${transitionDuration}ms`,
      pointerEvents: "none",
      width: theme.fn.size({ size: size3, sizes: iconSizes2 }),
      position: "absolute",
      zIndex: 1,
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      margin: "auto",
      "@media (prefers-reduced-motion)": {
        transitionDuration: theme.respectReducedMotion ? "0ms" : void 0
      }
    },
    inner: {
      position: "relative",
      width: _size,
      height: _size,
      order: labelPosition === "left" ? 2 : 1
    },
    input: __spreadProps41(__spreadValues95({}, theme.fn.focusStyles()), {
      appearance: "none",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white,
      border: `1px solid ${error ? errorColor : theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]}`,
      width: _size,
      height: _size,
      borderRadius: theme.fn.radius(radius2),
      padding: 0,
      display: "block",
      margin: 0,
      transition: `border-color ${transitionDuration}ms ease, background-color ${transitionDuration}ms ease`,
      cursor: theme.cursorType,
      "&:checked": {
        backgroundColor: colors2.background,
        borderColor: colors2.background,
        [`& + .${getRef2("icon")}`]: {
          opacity: 1,
          color: theme.white,
          transform: "translateY(0) scale(1)"
        }
      },
      "&:disabled": {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        borderColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[3],
        cursor: "not-allowed",
        [`& + .${getRef2("icon")}`]: {
          color: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[5]
        }
      }
    })
  };
});
var Checkbox_styles_default = useStyles37;

// node_modules/@mantine/core/esm/InlineInput/InlineInput.js
var import_react162 = __toESM(require_react());

// node_modules/@mantine/core/esm/InlineInput/InlineInput.styles.js
var __defProp96 = Object.defineProperty;
var __defProps42 = Object.defineProperties;
var __getOwnPropDescs42 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols98 = Object.getOwnPropertySymbols;
var __hasOwnProp98 = Object.prototype.hasOwnProperty;
var __propIsEnum98 = Object.prototype.propertyIsEnumerable;
var __defNormalProp96 = (obj, key2, value) => key2 in obj ? __defProp96(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues96 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp98.call(b2, prop))
      __defNormalProp96(a2, prop, b2[prop]);
  if (__getOwnPropSymbols98)
    for (var prop of __getOwnPropSymbols98(b2)) {
      if (__propIsEnum98.call(b2, prop))
        __defNormalProp96(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps42 = (a2, b2) => __defProps42(a2, __getOwnPropDescs42(b2));
var sizes10 = {
  xs: 16,
  sm: 20,
  md: 24,
  lg: 30,
  xl: 36
};
var useStyles38 = createStyles((theme, { labelPosition, size: size3 }) => ({
  root: {},
  body: {
    display: "flex"
  },
  labelWrapper: __spreadProps42(__spreadValues96({}, theme.fn.fontStyles()), {
    display: "inline-flex",
    flexDirection: "column",
    WebkitTapHighlightColor: "transparent",
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
    lineHeight: `${theme.fn.size({ size: size3, sizes: sizes10 })}px`,
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    cursor: theme.cursorType,
    order: labelPosition === "left" ? 1 : 2
  }),
  description: {
    marginTop: `calc(${theme.spacing.xs}px / 2)`,
    [labelPosition === "left" ? "paddingRight" : "paddingLeft"]: theme.spacing.sm
  },
  error: {
    marginTop: `calc(${theme.spacing.xs}px / 2)`,
    [labelPosition === "left" ? "paddingRight" : "paddingLeft"]: theme.spacing.sm
  },
  label: {
    cursor: theme.cursorType,
    [labelPosition === "left" ? "paddingRight" : "paddingLeft"]: theme.spacing.sm,
    "&[data-disabled]": {
      color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
    }
  }
}));
var InlineInput_styles_default = useStyles38;

// node_modules/@mantine/core/esm/InlineInput/InlineInput.js
var __defProp97 = Object.defineProperty;
var __getOwnPropSymbols99 = Object.getOwnPropertySymbols;
var __hasOwnProp99 = Object.prototype.hasOwnProperty;
var __propIsEnum99 = Object.prototype.propertyIsEnumerable;
var __defNormalProp97 = (obj, key2, value) => key2 in obj ? __defProp97(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues97 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp99.call(b2, prop))
      __defNormalProp97(a2, prop, b2[prop]);
  if (__getOwnPropSymbols99)
    for (var prop of __getOwnPropSymbols99(b2)) {
      if (__propIsEnum99.call(b2, prop))
        __defNormalProp97(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest61 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp99.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols99)
    for (var prop of __getOwnPropSymbols99(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum99.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function InlineInput(_a) {
  var _b = _a, {
    __staticSelector,
    className,
    classNames,
    styles: styles2,
    unstyled,
    children,
    label,
    description,
    id: id2,
    disabled,
    error,
    size: size3,
    labelPosition
  } = _b, others = __objRest61(_b, [
    "__staticSelector",
    "className",
    "classNames",
    "styles",
    "unstyled",
    "children",
    "label",
    "description",
    "id",
    "disabled",
    "error",
    "size",
    "labelPosition"
  ]);
  const { classes, cx } = InlineInput_styles_default({ size: size3, labelPosition }, { name: __staticSelector, styles: styles2, classNames, unstyled });
  return import_react162.default.createElement(Box, __spreadValues97({
    className: cx(classes.root, className)
  }, others), import_react162.default.createElement("div", {
    className: cx(classes.body)
  }, children, import_react162.default.createElement("div", {
    className: classes.labelWrapper
  }, label && import_react162.default.createElement("label", {
    className: classes.label,
    "data-disabled": disabled || void 0,
    htmlFor: id2
  }, label), description && import_react162.default.createElement(Input.Description, {
    className: classes.description
  }, description), error && error !== "boolean" && import_react162.default.createElement(Input.Error, {
    className: classes.error
  }, error))));
}
InlineInput.displayName = "@mantine/core/InlineInput";

// node_modules/@mantine/core/esm/Checkbox/Checkbox.js
var __defProp98 = Object.defineProperty;
var __getOwnPropSymbols100 = Object.getOwnPropertySymbols;
var __hasOwnProp100 = Object.prototype.hasOwnProperty;
var __propIsEnum100 = Object.prototype.propertyIsEnumerable;
var __defNormalProp98 = (obj, key2, value) => key2 in obj ? __defProp98(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues98 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp100.call(b2, prop))
      __defNormalProp98(a2, prop, b2[prop]);
  if (__getOwnPropSymbols100)
    for (var prop of __getOwnPropSymbols100(b2)) {
      if (__propIsEnum100.call(b2, prop))
        __defNormalProp98(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest62 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp100.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols100)
    for (var prop of __getOwnPropSymbols100(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum100.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps46 = {
  size: "sm",
  transitionDuration: 100,
  icon: CheckboxIcon,
  labelPosition: "right"
};
var Checkbox = (0, import_react163.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Checkbox", defaultProps46, props), {
    className,
    style: style3,
    sx,
    checked,
    disabled,
    color: color2,
    label,
    indeterminate,
    id: id2,
    size: size3,
    radius: radius2,
    wrapperProps,
    children,
    classNames,
    styles: styles2,
    transitionDuration,
    icon: Icon,
    unstyled,
    labelPosition,
    description,
    error
  } = _a, others = __objRest62(_a, [
    "className",
    "style",
    "sx",
    "checked",
    "disabled",
    "color",
    "label",
    "indeterminate",
    "id",
    "size",
    "radius",
    "wrapperProps",
    "children",
    "classNames",
    "styles",
    "transitionDuration",
    "icon",
    "unstyled",
    "labelPosition",
    "description",
    "error"
  ]);
  const ctx = useCheckboxGroupContext();
  const uuid = useId(id2);
  const { systemStyles, rest } = extractSystemStyles(others);
  const { classes } = Checkbox_styles_default({
    size: (ctx == null ? void 0 : ctx.size) || size3,
    radius: radius2,
    color: color2,
    transitionDuration,
    labelPosition,
    error: !!error,
    indeterminate
  }, { name: "Checkbox", classNames, styles: styles2, unstyled });
  const contextProps = ctx ? {
    checked: ctx.value.includes(rest.value),
    onChange: ctx.onChange
  } : {};
  return import_react163.default.createElement(InlineInput, __spreadValues98(__spreadValues98({
    className,
    sx,
    style: style3,
    id: uuid,
    size: (ctx == null ? void 0 : ctx.size) || size3,
    labelPosition,
    label,
    description,
    error,
    disabled,
    __staticSelector: "Checkbox",
    classNames,
    styles: styles2,
    unstyled,
    "data-checked": contextProps.checked || void 0
  }, systemStyles), wrapperProps), import_react163.default.createElement("div", {
    className: classes.inner
  }, import_react163.default.createElement("input", __spreadValues98(__spreadValues98({
    id: uuid,
    ref,
    type: "checkbox",
    className: classes.input,
    checked,
    disabled
  }, rest), contextProps)), import_react163.default.createElement(Icon, {
    indeterminate,
    className: classes.icon
  })));
});
Checkbox.displayName = "@mantine/core/Checkbox";
Checkbox.Group = CheckboxGroup;

// node_modules/@mantine/core/esm/Chip/Chip.js
var import_react166 = __toESM(require_react());

// node_modules/@mantine/core/esm/Chip/ChipGroup/ChipGroup.js
var import_react165 = __toESM(require_react());

// node_modules/@mantine/core/esm/Chip/ChipGroup.context.js
var import_react164 = __toESM(require_react());
var ChipGroupContext = (0, import_react164.createContext)(null);
var ChipGroupProvider = ChipGroupContext.Provider;
var useChipGroup = () => (0, import_react164.useContext)(ChipGroupContext);

// node_modules/@mantine/core/esm/Chip/ChipGroup/ChipGroup.js
var __defProp99 = Object.defineProperty;
var __getOwnPropSymbols101 = Object.getOwnPropertySymbols;
var __hasOwnProp101 = Object.prototype.hasOwnProperty;
var __propIsEnum101 = Object.prototype.propertyIsEnumerable;
var __defNormalProp99 = (obj, key2, value) => key2 in obj ? __defProp99(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues99 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp101.call(b2, prop))
      __defNormalProp99(a2, prop, b2[prop]);
  if (__getOwnPropSymbols101)
    for (var prop of __getOwnPropSymbols101(b2)) {
      if (__propIsEnum101.call(b2, prop))
        __defNormalProp99(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest63 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp101.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols101)
    for (var prop of __getOwnPropSymbols101(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum101.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps47 = {
  spacing: "xs"
};
function ChipGroup(props) {
  const _a = useComponentDefaultProps("ChipGroup", defaultProps47, props), { value, defaultValue, onChange, spacing, multiple, children, unstyled } = _a, others = __objRest63(_a, ["value", "defaultValue", "onChange", "spacing", "multiple", "children", "unstyled"]);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: multiple ? [] : null,
    onChange
  });
  const isChipSelected = (val) => Array.isArray(_value) ? _value.includes(val) : val === _value;
  const handleChange = (event) => {
    const val = event.currentTarget.value;
    if (Array.isArray(_value)) {
      setValue(_value.includes(val) ? _value.filter((v) => v !== val) : [..._value, val]);
    } else {
      setValue(val);
    }
  };
  return import_react165.default.createElement(ChipGroupProvider, {
    value: { isChipSelected, onChange: handleChange, multiple }
  }, import_react165.default.createElement(Group, __spreadValues99({
    spacing,
    unstyled
  }, others), children));
}
ChipGroup.displayName = "@mantine/core/ChipGroup";

// node_modules/@mantine/core/esm/Chip/Chip.styles.js
var __defProp100 = Object.defineProperty;
var __defProps43 = Object.defineProperties;
var __getOwnPropDescs43 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols102 = Object.getOwnPropertySymbols;
var __hasOwnProp102 = Object.prototype.hasOwnProperty;
var __propIsEnum102 = Object.prototype.propertyIsEnumerable;
var __defNormalProp100 = (obj, key2, value) => key2 in obj ? __defProp100(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues100 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp102.call(b2, prop))
      __defNormalProp100(a2, prop, b2[prop]);
  if (__getOwnPropSymbols102)
    for (var prop of __getOwnPropSymbols102(b2)) {
      if (__propIsEnum102.call(b2, prop))
        __defNormalProp100(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps43 = (a2, b2) => __defProps43(a2, __getOwnPropDescs43(b2));
var sizes11 = {
  xs: 24,
  sm: 28,
  md: 32,
  lg: 36,
  xl: 40
};
var iconSizes3 = {
  xs: 10,
  sm: 12,
  md: 14,
  lg: 16,
  xl: 18
};
var padding = {
  xs: 16,
  sm: 20,
  md: 24,
  lg: 28,
  xl: 32
};
var checkedPadding = {
  xs: 7.5,
  sm: 10,
  md: 11.5,
  lg: 13,
  xl: 15
};
var useStyles39 = createStyles((theme, { radius: radius2, size: size3, color: color2 }, getRef2) => ({
  root: {},
  label: __spreadProps43(__spreadValues100({
    ref: getRef2("label")
  }, theme.fn.fontStyles()), {
    boxSizing: "border-box",
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    display: "inline-block",
    alignItems: "center",
    userSelect: "none",
    border: "1px solid transparent",
    borderRadius: theme.fn.radius(radius2),
    height: theme.fn.size({ size: size3, sizes: sizes11 }),
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
    lineHeight: `${theme.fn.size({ size: size3, sizes: sizes11 }) - 2}px`,
    paddingLeft: theme.fn.size({ size: size3, sizes: padding }),
    paddingRight: theme.fn.size({ size: size3, sizes: padding }),
    cursor: "pointer",
    whiteSpace: "nowrap",
    transition: "background-color 100ms ease",
    WebkitTapHighlightColor: "transparent",
    '&[data-variant="filled"]': __spreadValues100({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[1]
    }, theme.fn.hover({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[0]
    })),
    '&[data-variant="outline"]': __spreadValues100({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white,
      borderColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]
    }, theme.fn.hover({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[0]
    })),
    "&[data-disabled]": __spreadProps43(__spreadValues100({
      backgroundColor: `${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1]} !important`,
      borderColor: `${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1]} !important`,
      color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5],
      cursor: "not-allowed"
    }, theme.fn.hover({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1]
    })), {
      [`& .${getRef2("iconWrapper")}`]: {
        color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
      }
    }),
    "&[data-checked]": {
      paddingLeft: theme.fn.size({ size: size3, sizes: checkedPadding }),
      paddingRight: theme.fn.size({ size: size3, sizes: checkedPadding }),
      '&[data-variant="outline"]': {
        border: `1px solid ${theme.fn.variant({ variant: "filled", color: color2 }).background}`
      },
      '&[data-variant="filled"]': {
        "&, &:hover": {
          backgroundColor: theme.fn.variant({ variant: "light", color: color2 }).background
        }
      }
    }
  }),
  iconWrapper: {
    ref: getRef2("iconWrapper"),
    color: theme.fn.variant({ variant: "filled", color: color2 }).background,
    width: theme.fn.size({ size: size3, sizes: iconSizes3 }) + theme.fn.size({ size: size3, sizes: theme.spacing }) / 1.5,
    maxWidth: theme.fn.size({ size: size3, sizes: iconSizes3 }) + theme.fn.size({ size: size3, sizes: theme.spacing }) / 1.5,
    height: theme.fn.size({ size: size3, sizes: iconSizes3 }),
    display: "inline-block",
    verticalAlign: "middle",
    overflow: "hidden"
  },
  checkIcon: {
    width: theme.fn.size({ size: size3, sizes: iconSizes3 }),
    height: theme.fn.size({ size: size3, sizes: iconSizes3 }) / 1.1,
    display: "block"
  },
  input: {
    width: 0,
    height: 0,
    padding: 0,
    opacity: 0,
    margin: 0,
    "&:focus": {
      outline: "none",
      [`& + .${getRef2("label")}`]: __spreadValues100({}, theme.focusRing === "always" || theme.focusRing === "auto" ? theme.focusRingStyles.styles(theme) : theme.focusRingStyles.resetStyles(theme)),
      "&:focus:not(:focus-visible)": {
        [`& + .${getRef2("label")}`]: __spreadValues100({}, theme.focusRing === "auto" || theme.focusRing === "never" ? theme.focusRingStyles.resetStyles(theme) : null)
      }
    }
  }
}));
var Chip_styles_default = useStyles39;

// node_modules/@mantine/core/esm/Chip/Chip.js
var __defProp101 = Object.defineProperty;
var __getOwnPropSymbols103 = Object.getOwnPropertySymbols;
var __hasOwnProp103 = Object.prototype.hasOwnProperty;
var __propIsEnum103 = Object.prototype.propertyIsEnumerable;
var __defNormalProp101 = (obj, key2, value) => key2 in obj ? __defProp101(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues101 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp103.call(b2, prop))
      __defNormalProp101(a2, prop, b2[prop]);
  if (__getOwnPropSymbols103)
    for (var prop of __getOwnPropSymbols103(b2)) {
      if (__propIsEnum103.call(b2, prop))
        __defNormalProp101(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest64 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp103.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols103)
    for (var prop of __getOwnPropSymbols103(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum103.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps48 = {
  type: "checkbox",
  size: "sm",
  radius: "xl",
  variant: "outline"
};
var Chip = (0, import_react166.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Chip", defaultProps48, props), {
    radius: radius2,
    type,
    size: size3,
    variant: variant2,
    disabled,
    id: id2,
    color: color2,
    children,
    className,
    classNames,
    style: style3,
    styles: styles2,
    checked,
    defaultChecked,
    onChange,
    sx,
    wrapperProps,
    value,
    unstyled
  } = _a, others = __objRest64(_a, [
    "radius",
    "type",
    "size",
    "variant",
    "disabled",
    "id",
    "color",
    "children",
    "className",
    "classNames",
    "style",
    "styles",
    "checked",
    "defaultChecked",
    "onChange",
    "sx",
    "wrapperProps",
    "value",
    "unstyled"
  ]);
  const ctx = useChipGroup();
  const uuid = useId(id2);
  const { systemStyles, rest } = extractSystemStyles(others);
  const { classes, cx } = Chip_styles_default({ radius: radius2, size: size3, color: color2 }, { classNames, styles: styles2, unstyled, name: "Chip" });
  const [_value, setValue] = useUncontrolled({
    value: checked,
    defaultValue: defaultChecked,
    finalValue: false,
    onChange
  });
  const contextProps = ctx ? {
    checked: ctx.isChipSelected(value),
    onChange: ctx.onChange,
    type: ctx.multiple ? "checkbox" : "radio"
  } : {};
  const _checked = contextProps.checked || _value;
  return import_react166.default.createElement(Box, __spreadValues101(__spreadValues101({
    className: cx(classes.root, className),
    style: style3,
    sx
  }, systemStyles), wrapperProps), import_react166.default.createElement("input", __spreadValues101(__spreadValues101({
    type,
    className: classes.input,
    checked: _checked,
    onChange: (event) => setValue(event.currentTarget.checked),
    id: uuid,
    disabled,
    ref,
    value
  }, contextProps), rest)), import_react166.default.createElement("label", {
    htmlFor: uuid,
    "data-checked": _checked || void 0,
    "data-disabled": disabled || void 0,
    "data-variant": variant2,
    className: classes.label
  }, _checked && import_react166.default.createElement("span", {
    className: classes.iconWrapper
  }, import_react166.default.createElement(CheckIcon, {
    className: classes.checkIcon
  })), children));
});
Chip.displayName = "@mantine/core/Chip";
Chip.Group = ChipGroup;

// node_modules/@mantine/core/esm/Code/Code.js
var import_react167 = __toESM(require_react());

// node_modules/@mantine/core/esm/Code/Code.styles.js
var __defProp102 = Object.defineProperty;
var __defProps44 = Object.defineProperties;
var __getOwnPropDescs44 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols104 = Object.getOwnPropertySymbols;
var __hasOwnProp104 = Object.prototype.hasOwnProperty;
var __propIsEnum104 = Object.prototype.propertyIsEnumerable;
var __defNormalProp102 = (obj, key2, value) => key2 in obj ? __defProp102(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues102 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp104.call(b2, prop))
      __defNormalProp102(a2, prop, b2[prop]);
  if (__getOwnPropSymbols104)
    for (var prop of __getOwnPropSymbols104(b2)) {
      if (__propIsEnum104.call(b2, prop))
        __defNormalProp102(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps44 = (a2, b2) => __defProps44(a2, __getOwnPropDescs44(b2));
var useStyles40 = createStyles((theme, { color: _color }) => {
  const color2 = _color || (theme.colorScheme === "dark" ? "dark" : "gray");
  const colors2 = theme.fn.variant({ color: color2, variant: "light" });
  return {
    root: __spreadProps44(__spreadValues102({}, theme.fn.fontStyles()), {
      lineHeight: theme.lineHeight,
      padding: `2px calc(${theme.spacing.xs}px / 2)`,
      borderRadius: theme.radius.sm,
      color: theme.colorScheme === "dark" ? color2 === "dark" ? theme.colors.dark[0] : theme.white : theme.colors.dark[7],
      backgroundColor: theme.colorScheme === "dark" && color2 === "dark" ? theme.colors.dark[5] : colors2.background,
      fontFamily: theme.fontFamilyMonospace,
      fontSize: theme.fontSizes.xs
    }),
    block: {
      padding: theme.spacing.xs,
      margin: 0,
      overflowX: "auto"
    }
  };
});
var Code_styles_default = useStyles40;

// node_modules/@mantine/core/esm/Code/Code.js
var __defProp103 = Object.defineProperty;
var __getOwnPropSymbols105 = Object.getOwnPropertySymbols;
var __hasOwnProp105 = Object.prototype.hasOwnProperty;
var __propIsEnum105 = Object.prototype.propertyIsEnumerable;
var __defNormalProp103 = (obj, key2, value) => key2 in obj ? __defProp103(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues103 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp105.call(b2, prop))
      __defNormalProp103(a2, prop, b2[prop]);
  if (__getOwnPropSymbols105)
    for (var prop of __getOwnPropSymbols105(b2)) {
      if (__propIsEnum105.call(b2, prop))
        __defNormalProp103(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest65 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp105.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols105)
    for (var prop of __getOwnPropSymbols105(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum105.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var Code = (0, import_react167.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Code", {}, props), { className, children, block: block2, color: color2, unstyled } = _a, others = __objRest65(_a, ["className", "children", "block", "color", "unstyled"]);
  const { classes, cx } = Code_styles_default({ color: color2 }, { name: "Code", unstyled });
  if (block2) {
    return import_react167.default.createElement(Box, __spreadValues103({
      component: "pre",
      dir: "ltr",
      className: cx(classes.root, classes.block, className),
      ref
    }, others), children);
  }
  return import_react167.default.createElement(Box, __spreadValues103({
    component: "code",
    className: cx(classes.root, className),
    ref,
    dir: "ltr"
  }, others), children);
});
Code.displayName = "@mantine/core/Code";

// node_modules/@mantine/core/esm/ColorInput/ColorInput.js
var import_react177 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorPicker/ColorPicker.js
var import_react175 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorSwatch/ColorSwatch.js
var import_react168 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorSwatch/ColorSwatch.styles.js
var __defProp104 = Object.defineProperty;
var __defProps45 = Object.defineProperties;
var __getOwnPropDescs45 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols106 = Object.getOwnPropertySymbols;
var __hasOwnProp106 = Object.prototype.hasOwnProperty;
var __propIsEnum106 = Object.prototype.propertyIsEnumerable;
var __defNormalProp104 = (obj, key2, value) => key2 in obj ? __defProp104(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues104 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp106.call(b2, prop))
      __defNormalProp104(a2, prop, b2[prop]);
  if (__getOwnPropSymbols106)
    for (var prop of __getOwnPropSymbols106(b2)) {
      if (__propIsEnum106.call(b2, prop))
        __defNormalProp104(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps45 = (a2, b2) => __defProps45(a2, __getOwnPropDescs45(b2));
var useStyles41 = createStyles((theme, { size: size3, radius: radius2 }) => {
  const overlayColor = theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3];
  return {
    root: __spreadProps45(__spreadValues104({}, theme.fn.focusStyles()), {
      width: size3,
      height: size3,
      WebkitTapHighlightColor: "transparent",
      border: 0,
      borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
      appearance: "none",
      WebkitAppearance: "none",
      padding: 0,
      position: "relative",
      overflow: "hidden"
    }),
    overlay: {
      position: "absolute",
      borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    },
    children: {
      display: "inline-flex",
      justifyContent: "center",
      alignItems: "center"
    },
    shadowOverlay: {
      boxShadow: "rgba(0, 0, 0, .1) 0px 0px 0px 1px inset, rgb(0, 0, 0, .15) 0px 0px 4px inset",
      zIndex: 1
    },
    alphaOverlay: {
      backgroundImage: `linear-gradient(45deg, ${overlayColor} 25%, transparent 25%), linear-gradient(-45deg, ${overlayColor} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${overlayColor} 75%), linear-gradient(-45deg, ${theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white} 75%, ${overlayColor} 75%)`,
      backgroundSize: "8px 8px",
      backgroundPosition: "0 0, 0 4px, 4px -4px, -4px 0px"
    }
  };
});
var ColorSwatch_styles_default = useStyles41;

// node_modules/@mantine/core/esm/ColorSwatch/ColorSwatch.js
var __defProp105 = Object.defineProperty;
var __getOwnPropSymbols107 = Object.getOwnPropertySymbols;
var __hasOwnProp107 = Object.prototype.hasOwnProperty;
var __propIsEnum107 = Object.prototype.propertyIsEnumerable;
var __defNormalProp105 = (obj, key2, value) => key2 in obj ? __defProp105(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues105 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp107.call(b2, prop))
      __defNormalProp105(a2, prop, b2[prop]);
  if (__getOwnPropSymbols107)
    for (var prop of __getOwnPropSymbols107(b2)) {
      if (__propIsEnum107.call(b2, prop))
        __defNormalProp105(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest66 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp107.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols107)
    for (var prop of __getOwnPropSymbols107(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum107.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps49 = {
  size: 25,
  radius: 25,
  withShadow: true
};
var _ColorSwatch = (0, import_react168.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("ColorSwatch", defaultProps49, props), {
    color: color2,
    size: size3,
    radius: radius2,
    className,
    children,
    classNames,
    styles: styles2,
    unstyled,
    withShadow
  } = _a, others = __objRest66(_a, [
    "color",
    "size",
    "radius",
    "className",
    "children",
    "classNames",
    "styles",
    "unstyled",
    "withShadow"
  ]);
  const { classes, cx } = ColorSwatch_styles_default({ radius: radius2, size: size3 }, { classNames, styles: styles2, unstyled, name: "ColorSwatch" });
  return import_react168.default.createElement(Box, __spreadValues105({
    className: cx(classes.root, className),
    ref
  }, others), import_react168.default.createElement("div", {
    className: cx(classes.alphaOverlay, classes.overlay)
  }), withShadow && import_react168.default.createElement("div", {
    className: cx(classes.shadowOverlay, classes.overlay)
  }), import_react168.default.createElement("div", {
    className: classes.overlay,
    style: { backgroundColor: color2 }
  }), import_react168.default.createElement("div", {
    className: cx(classes.children, classes.overlay)
  }, children));
});
_ColorSwatch.displayName = "@mantine/core/ColorSwatch";
var ColorSwatch = createPolymorphicComponent(_ColorSwatch);

// node_modules/@mantine/core/esm/ColorPicker/HueSlider/HueSlider.js
var import_react171 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorPicker/ColorSlider/ColorSlider.js
var import_react170 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorPicker/Thumb/Thumb.js
var import_react169 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorPicker/Thumb/Thumb.styles.js
var THUMB_SIZES = {
  xs: 8,
  sm: 12,
  md: 16,
  lg: 20,
  xl: 22
};
var useStyles42 = createStyles((theme, { size: size3 }) => {
  const _size = theme.fn.size({ size: size3, sizes: THUMB_SIZES });
  return {
    thumb: {
      overflow: "hidden",
      boxSizing: "border-box",
      position: "absolute",
      boxShadow: "0 0 1px rgba(0, 0, 0, .6)",
      border: `2px solid ${theme.white}`,
      backgroundColor: "transparent",
      width: _size,
      height: _size,
      borderRadius: _size
    }
  };
});
var Thumb_styles_default = useStyles42;

// node_modules/@mantine/core/esm/ColorPicker/Thumb/Thumb.js
var __defProp106 = Object.defineProperty;
var __getOwnPropSymbols108 = Object.getOwnPropertySymbols;
var __hasOwnProp108 = Object.prototype.hasOwnProperty;
var __propIsEnum108 = Object.prototype.propertyIsEnumerable;
var __defNormalProp106 = (obj, key2, value) => key2 in obj ? __defProp106(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues106 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp108.call(b2, prop))
      __defNormalProp106(a2, prop, b2[prop]);
  if (__getOwnPropSymbols108)
    for (var prop of __getOwnPropSymbols108(b2)) {
      if (__propIsEnum108.call(b2, prop))
        __defNormalProp106(a2, prop, b2[prop]);
    }
  return a2;
};
function Thumb({
  position: position5,
  className,
  styles: styles2,
  classNames,
  style: style3,
  size: size3,
  __staticSelector,
  unstyled
}) {
  const { classes, cx } = Thumb_styles_default({ size: size3 }, { classNames, styles: styles2, name: __staticSelector, unstyled });
  return import_react169.default.createElement("div", {
    className: cx(classes.thumb, className),
    style: __spreadValues106({
      left: `calc(${position5.x * 100}% - ${THUMB_SIZES[size3] / 2}px)`,
      top: `calc(${position5.y * 100}% - ${THUMB_SIZES[size3] / 2}px)`
    }, style3)
  });
}
Thumb.displayName = "@mantine/core/Thumb";

// node_modules/@mantine/core/esm/ColorPicker/ColorSlider/ColorSlider.styles.js
var __defProp107 = Object.defineProperty;
var __getOwnPropSymbols109 = Object.getOwnPropertySymbols;
var __hasOwnProp109 = Object.prototype.hasOwnProperty;
var __propIsEnum109 = Object.prototype.propertyIsEnumerable;
var __defNormalProp107 = (obj, key2, value) => key2 in obj ? __defProp107(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues107 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp109.call(b2, prop))
      __defNormalProp107(a2, prop, b2[prop]);
  if (__getOwnPropSymbols109)
    for (var prop of __getOwnPropSymbols109(b2)) {
      if (__propIsEnum109.call(b2, prop))
        __defNormalProp107(a2, prop, b2[prop]);
    }
  return a2;
};
var useStyles43 = createStyles((theme, { size: size3 }, getRef2) => ({
  sliderThumb: {
    ref: getRef2("sliderThumb")
  },
  slider: {
    position: "relative",
    height: theme.fn.size({ size: size3, sizes: THUMB_SIZES }) + 2,
    boxSizing: "border-box",
    marginLeft: theme.fn.size({ size: size3, sizes: THUMB_SIZES }) / 2,
    marginRight: theme.fn.size({ size: size3, sizes: THUMB_SIZES }) / 2,
    outline: 0,
    [`&:focus .${getRef2("sliderThumb")}`]: __spreadValues107({}, theme.focusRing === "always" || theme.focusRing === "auto" ? theme.focusRingStyles.styles(theme) : theme.focusRingStyles.resetStyles(theme)),
    [`&:focus:not(:focus-visible) .${getRef2("sliderThumb")}`]: __spreadValues107({}, theme.focusRing === "auto" || theme.focusRing === "never" ? theme.focusRingStyles.resetStyles(theme) : null)
  },
  sliderOverlay: {
    position: "absolute",
    boxSizing: "border-box",
    top: 0,
    bottom: 0,
    left: -theme.fn.size({ size: size3, sizes: THUMB_SIZES }) / 2 - 1,
    right: -theme.fn.size({ size: size3, sizes: THUMB_SIZES }) / 2 - 1,
    borderRadius: 1e3
  }
}));
var ColorSlider_styles_default = useStyles43;

// node_modules/@mantine/core/esm/ColorPicker/ColorSlider/ColorSlider.js
var __defProp108 = Object.defineProperty;
var __defProps46 = Object.defineProperties;
var __getOwnPropDescs46 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols110 = Object.getOwnPropertySymbols;
var __hasOwnProp110 = Object.prototype.hasOwnProperty;
var __propIsEnum110 = Object.prototype.propertyIsEnumerable;
var __defNormalProp108 = (obj, key2, value) => key2 in obj ? __defProp108(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues108 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp110.call(b2, prop))
      __defNormalProp108(a2, prop, b2[prop]);
  if (__getOwnPropSymbols110)
    for (var prop of __getOwnPropSymbols110(b2)) {
      if (__propIsEnum110.call(b2, prop))
        __defNormalProp108(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps46 = (a2, b2) => __defProps46(a2, __getOwnPropDescs46(b2));
var __objRest67 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp110.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols110)
    for (var prop of __getOwnPropSymbols110(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum110.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var ColorSlider = (0, import_react170.forwardRef)((_a, ref) => {
  var _b = _a, {
    value,
    onChange,
    onChangeEnd,
    maxValue,
    round: round5,
    size: size3 = "md",
    thumbColor = "transparent",
    __staticSelector = "ColorSlider",
    focusable: focusable2 = true,
    overlays,
    classNames,
    styles: styles2,
    className,
    unstyled
  } = _b, others = __objRest67(_b, [
    "value",
    "onChange",
    "onChangeEnd",
    "maxValue",
    "round",
    "size",
    "thumbColor",
    "__staticSelector",
    "focusable",
    "overlays",
    "classNames",
    "styles",
    "className",
    "unstyled"
  ]);
  const { classes, cx } = ColorSlider_styles_default({ size: size3 }, { classNames, styles: styles2, name: __staticSelector, unstyled });
  const [position5, setPosition] = (0, import_react170.useState)({ y: 0, x: value / maxValue });
  const positionRef = (0, import_react170.useRef)(position5);
  const getChangeValue2 = (val) => round5 ? Math.round(val * maxValue) : val * maxValue;
  const { ref: sliderRef } = useMove(({ x: x3, y }) => {
    positionRef.current = { x: x3, y };
    onChange(getChangeValue2(x3));
  }, {
    onScrubEnd: () => {
      const { x: x3 } = positionRef.current;
      onChangeEnd(getChangeValue2(x3));
    }
  });
  useDidUpdate(() => {
    setPosition({ y: 0, x: value / maxValue });
  }, [value]);
  const handleArrow = (event, pos) => {
    event.preventDefault();
    const _position = clampUseMovePosition(pos);
    onChange(getChangeValue2(_position.x));
    onChangeEnd(getChangeValue2(_position.x));
  };
  const handleKeyDown2 = (event) => {
    switch (event.key) {
      case "ArrowRight": {
        handleArrow(event, { x: position5.x + 0.05, y: position5.y });
        break;
      }
      case "ArrowLeft": {
        handleArrow(event, { x: position5.x - 0.05, y: position5.y });
        break;
      }
    }
  };
  const layers = overlays.map((overlay, index7) => import_react170.default.createElement("div", {
    className: classes.sliderOverlay,
    style: overlay,
    key: index7
  }));
  return import_react170.default.createElement(Box, __spreadProps46(__spreadValues108({}, others), {
    ref: useMergedRef(sliderRef, ref),
    className: cx(classes.slider, className),
    role: "slider",
    "aria-valuenow": value,
    "aria-valuemax": maxValue,
    "aria-valuemin": 0,
    tabIndex: focusable2 ? 0 : -1,
    onKeyDown: handleKeyDown2
  }), layers, import_react170.default.createElement(Thumb, {
    __staticSelector,
    classNames,
    styles: styles2,
    position: position5,
    style: { top: 1, backgroundColor: thumbColor },
    className: classes.sliderThumb,
    size: size3
  }));
});
ColorSlider.displayName = "@mantine/core/ColorSlider";

// node_modules/@mantine/core/esm/ColorPicker/HueSlider/HueSlider.js
var __defProp109 = Object.defineProperty;
var __defProps47 = Object.defineProperties;
var __getOwnPropDescs47 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols111 = Object.getOwnPropertySymbols;
var __hasOwnProp111 = Object.prototype.hasOwnProperty;
var __propIsEnum111 = Object.prototype.propertyIsEnumerable;
var __defNormalProp109 = (obj, key2, value) => key2 in obj ? __defProp109(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues109 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp111.call(b2, prop))
      __defNormalProp109(a2, prop, b2[prop]);
  if (__getOwnPropSymbols111)
    for (var prop of __getOwnPropSymbols111(b2)) {
      if (__propIsEnum111.call(b2, prop))
        __defNormalProp109(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps47 = (a2, b2) => __defProps47(a2, __getOwnPropDescs47(b2));
var __objRest68 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp111.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols111)
    for (var prop of __getOwnPropSymbols111(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum111.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var HueSlider = (0, import_react171.forwardRef)((_a, ref) => {
  var _b = _a, { value, onChange, onChangeEnd } = _b, others = __objRest68(_b, ["value", "onChange", "onChangeEnd"]);
  return import_react171.default.createElement(ColorSlider, __spreadProps47(__spreadValues109({}, others), {
    ref,
    value,
    onChange,
    onChangeEnd,
    maxValue: 360,
    thumbColor: `hsl(${value}, 100%, 50%)`,
    round: true,
    overlays: [
      {
        backgroundImage: "linear-gradient(to right,hsl(0,100%,50%),hsl(60,100%,50%),hsl(120,100%,50%),hsl(170,100%,50%),hsl(240,100%,50%),hsl(300,100%,50%),hsl(360,100%,50%))"
      },
      {
        boxShadow: "rgba(0, 0, 0, .1) 0px 0px 0px 1px inset, rgb(0, 0, 0, .15) 0px 0px 4px inset"
      }
    ]
  }));
});
HueSlider.displayName = "@mantine/core/HueSlider";

// node_modules/@mantine/core/esm/ColorPicker/AlphaSlider/AlphaSlider.js
var import_react172 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorPicker/converters/parsers.js
var __defProp110 = Object.defineProperty;
var __defProps48 = Object.defineProperties;
var __getOwnPropDescs48 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols112 = Object.getOwnPropertySymbols;
var __hasOwnProp112 = Object.prototype.hasOwnProperty;
var __propIsEnum112 = Object.prototype.propertyIsEnumerable;
var __defNormalProp110 = (obj, key2, value) => key2 in obj ? __defProp110(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues110 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp112.call(b2, prop))
      __defNormalProp110(a2, prop, b2[prop]);
  if (__getOwnPropSymbols112)
    for (var prop of __getOwnPropSymbols112(b2)) {
      if (__propIsEnum112.call(b2, prop))
        __defNormalProp110(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps48 = (a2, b2) => __defProps48(a2, __getOwnPropDescs48(b2));
function round3(number2, digits = 0, base5 = 10 ** digits) {
  return Math.round(base5 * number2) / base5;
}
function hslaToHsva({ h: h2, s: s2, l, a: a2 }) {
  const ss = s2 * ((l < 50 ? l : 100 - l) / 100);
  return {
    h: h2,
    s: ss > 0 ? 2 * ss / (l + ss) * 100 : 0,
    v: l + ss,
    a: a2
  };
}
var angleUnits = {
  grad: 360 / 400,
  turn: 360,
  rad: 360 / (Math.PI * 2)
};
function parseHue(value, unit = "deg") {
  return Number(value) * (angleUnits[unit] || 1);
}
var HSL_REGEXP = /hsla?\(?\s*(-?\d*\.?\d+)(deg|rad|grad|turn)?[,\s]+(-?\d*\.?\d+)%?[,\s]+(-?\d*\.?\d+)%?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
function parseHsla(color2) {
  const match2 = HSL_REGEXP.exec(color2);
  if (!match2) {
    return { h: 0, s: 0, v: 0, a: 1 };
  }
  return hslaToHsva({
    h: parseHue(match2[1], match2[2]),
    s: Number(match2[3]),
    l: Number(match2[4]),
    a: match2[5] === void 0 ? 1 : Number(match2[5]) / (match2[6] ? 100 : 1)
  });
}
function rgbaToHsva({ r, g: g2, b: b2, a: a2 }) {
  const max5 = Math.max(r, g2, b2);
  const delta = max5 - Math.min(r, g2, b2);
  const hh = delta ? max5 === r ? (g2 - b2) / delta : max5 === g2 ? 2 + (b2 - r) / delta : 4 + (r - g2) / delta : 0;
  return {
    h: round3(60 * (hh < 0 ? hh + 6 : hh)),
    s: round3(max5 ? delta / max5 * 100 : 0),
    v: round3(max5 / 255 * 100),
    a: a2
  };
}
function parseHex(color2) {
  const hex = color2[0] === "#" ? color2.slice(1) : color2;
  if (hex.length === 3) {
    return rgbaToHsva({
      r: parseInt(hex[0] + hex[0], 16),
      g: parseInt(hex[1] + hex[1], 16),
      b: parseInt(hex[2] + hex[2], 16),
      a: 1
    });
  }
  return rgbaToHsva({
    r: parseInt(hex.slice(0, 2), 16),
    g: parseInt(hex.slice(2, 4), 16),
    b: parseInt(hex.slice(4, 6), 16),
    a: 1
  });
}
function parseHexa(color2) {
  const hex = color2[0] === "#" ? color2.slice(1) : color2;
  const roundA = (a22) => Math.round(parseInt(a22, 16) / 255 * 100) / 100;
  if (hex.length === 4) {
    const withoutOpacity2 = hex.slice(0, 3);
    const a22 = roundA(hex[3] + hex[3]);
    const hsvaColor2 = __spreadProps48(__spreadValues110({}, parseHex(withoutOpacity2)), { a: a22 });
    return hsvaColor2;
  }
  const withoutOpacity = hex.slice(0, 6);
  const a2 = roundA(hex.slice(6, 8));
  const hsvaColor = __spreadProps48(__spreadValues110({}, parseHex(withoutOpacity)), { a: a2 });
  return hsvaColor;
}
var RGB_REGEXP = /rgba?\(?\s*(-?\d*\.?\d+)(%)?[,\s]+(-?\d*\.?\d+)(%)?[,\s]+(-?\d*\.?\d+)(%)?,?\s*[/\s]*(-?\d*\.?\d+)?(%)?\s*\)?/i;
function parseRgba(color2) {
  const match2 = RGB_REGEXP.exec(color2);
  if (!match2) {
    return { h: 0, s: 0, v: 0, a: 1 };
  }
  return rgbaToHsva({
    r: Number(match2[1]) / (match2[2] ? 100 / 255 : 1),
    g: Number(match2[3]) / (match2[4] ? 100 / 255 : 1),
    b: Number(match2[5]) / (match2[6] ? 100 / 255 : 1),
    a: match2[7] === void 0 ? 1 : Number(match2[7]) / (match2[8] ? 100 : 1)
  });
}
var VALIDATION_REGEXP = {
  hex: /^#?([0-9A-F]{3}){1,2}$/i,
  hexa: /^#?([0-9A-F]{4}){1,2}$/i,
  rgb: /^rgb\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/i,
  rgba: /^rgba\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/i,
  hsl: /hsl\(\s*(\d+)\s*,\s*(\d+(?:\.\d+)?%)\s*,\s*(\d+(?:\.\d+)?%)\)/i,
  hsla: /^hsla\((\d+),\s*([\d.]+)%,\s*([\d.]+)%,\s*(\d*(?:\.\d+)?)\)$/i
};
var CONVERTERS = {
  hex: parseHex,
  hexa: parseHexa,
  rgb: parseRgba,
  rgba: parseRgba,
  hsl: parseHsla,
  hsla: parseHsla
};
function isColorValid(color2) {
  for (const [, regexp2] of Object.entries(VALIDATION_REGEXP)) {
    if (regexp2.test(color2)) {
      return true;
    }
  }
  return false;
}
function parseColor(color2) {
  if (typeof color2 !== "string") {
    return { h: 0, s: 0, v: 0, a: 1 };
  }
  if (color2 === "transparent") {
    return { h: 0, s: 0, v: 0, a: 0 };
  }
  const trimmed = color2.trim();
  for (const [rule, regexp2] of Object.entries(VALIDATION_REGEXP)) {
    if (regexp2.test(trimmed)) {
      return CONVERTERS[rule](trimmed);
    }
  }
  return { h: 0, s: 0, v: 0, a: 1 };
}

// node_modules/@mantine/core/esm/ColorPicker/AlphaSlider/AlphaSlider.js
var __defProp111 = Object.defineProperty;
var __defProps49 = Object.defineProperties;
var __getOwnPropDescs49 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols113 = Object.getOwnPropertySymbols;
var __hasOwnProp113 = Object.prototype.hasOwnProperty;
var __propIsEnum113 = Object.prototype.propertyIsEnumerable;
var __defNormalProp111 = (obj, key2, value) => key2 in obj ? __defProp111(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues111 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp113.call(b2, prop))
      __defNormalProp111(a2, prop, b2[prop]);
  if (__getOwnPropSymbols113)
    for (var prop of __getOwnPropSymbols113(b2)) {
      if (__propIsEnum113.call(b2, prop))
        __defNormalProp111(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps49 = (a2, b2) => __defProps49(a2, __getOwnPropDescs49(b2));
var __objRest69 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp113.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols113)
    for (var prop of __getOwnPropSymbols113(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum113.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var AlphaSlider = (0, import_react172.forwardRef)((_a, ref) => {
  var _b = _a, { value, onChange, onChangeEnd, color: color2 } = _b, others = __objRest69(_b, ["value", "onChange", "onChangeEnd", "color"]);
  const theme = useMantineTheme();
  const _color = theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3];
  return import_react172.default.createElement(ColorSlider, __spreadProps49(__spreadValues111({}, others), {
    ref,
    value,
    onChange: (val) => onChange(round3(val, 2)),
    onChangeEnd: (val) => onChangeEnd(round3(val, 2)),
    maxValue: 1,
    round: false,
    overlays: [
      {
        backgroundImage: `linear-gradient(45deg, ${_color} 25%, transparent 25%), linear-gradient(-45deg, ${_color} 25%, transparent 25%), linear-gradient(45deg, transparent 75%, ${_color} 75%), linear-gradient(-45deg, ${theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white} 75%, ${_color} 75%)`,
        backgroundSize: "8px 8px",
        backgroundPosition: "0 0, 0 4px, 4px -4px, -4px 0px"
      },
      {
        backgroundImage: `linear-gradient(90deg, transparent, ${color2})`
      },
      {
        boxShadow: "rgba(0, 0, 0, .1) 0px 0px 0px 1px inset, rgb(0, 0, 0, .15) 0px 0px 4px inset"
      }
    ]
  }));
});
AlphaSlider.displayName = "@mantine/core/AlphaSlider";

// node_modules/@mantine/core/esm/ColorPicker/Saturation/Saturation.js
var import_react173 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorPicker/Saturation/Saturation.styles.js
var __defProp112 = Object.defineProperty;
var __getOwnPropSymbols114 = Object.getOwnPropertySymbols;
var __hasOwnProp114 = Object.prototype.hasOwnProperty;
var __propIsEnum114 = Object.prototype.propertyIsEnumerable;
var __defNormalProp112 = (obj, key2, value) => key2 in obj ? __defProp112(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues112 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp114.call(b2, prop))
      __defNormalProp112(a2, prop, b2[prop]);
  if (__getOwnPropSymbols114)
    for (var prop of __getOwnPropSymbols114(b2)) {
      if (__propIsEnum114.call(b2, prop))
        __defNormalProp112(a2, prop, b2[prop]);
    }
  return a2;
};
var SATURATION_HEIGHTS = {
  xs: 100,
  sm: 110,
  md: 120,
  lg: 140,
  xl: 160
};
var useStyles44 = createStyles((theme, { size: size3 }, getRef2) => ({
  saturationThumb: {
    ref: getRef2("saturationThumb")
  },
  saturation: {
    boxSizing: "border-box",
    position: "relative",
    height: theme.fn.size({ size: size3, sizes: SATURATION_HEIGHTS }),
    borderRadius: theme.radius.sm,
    margin: theme.fn.size({ size: size3, sizes: THUMB_SIZES }) / 2,
    WebkitTapHighlightColor: "transparent",
    [`&:focus .${getRef2("saturationThumb")}`]: __spreadValues112({}, theme.focusRing === "always" || theme.focusRing === "auto" ? theme.focusRingStyles.styles(theme) : theme.focusRingStyles.resetStyles(theme)),
    [`&:focus:not(:focus-visible) .${getRef2("saturationThumb")}`]: __spreadValues112({}, theme.focusRing === "auto" || theme.focusRing === "never" ? theme.focusRingStyles.resetStyles(theme) : null)
  },
  saturationOverlay: __spreadValues112({
    boxSizing: "border-box",
    borderRadius: theme.radius.sm
  }, theme.fn.cover(-theme.fn.size({ size: size3, sizes: THUMB_SIZES }) / 2 - 1))
}));
var Saturation_styles_default = useStyles44;

// node_modules/@mantine/core/esm/ColorPicker/converters/converters.js
function hsvaToRgbaObject({ h: h2, s: s2, v, a: a2 }) {
  const _h = h2 / 360 * 6;
  const _s = s2 / 100;
  const _v = v / 100;
  const hh = Math.floor(_h);
  const l = _v * (1 - _s);
  const c = _v * (1 - (_h - hh) * _s);
  const d = _v * (1 - (1 - _h + hh) * _s);
  const module = hh % 6;
  return {
    r: round3([_v, c, l, l, d, _v][module] * 255),
    g: round3([d, _v, _v, c, l, l][module] * 255),
    b: round3([l, l, d, _v, _v, c][module] * 255),
    a: round3(a2, 2)
  };
}
function hsvaToRgba(color2, includeAlpha) {
  const { r, g: g2, b: b2, a: a2 } = hsvaToRgbaObject(color2);
  if (!includeAlpha) {
    return `rgb(${r}, ${g2}, ${b2})`;
  }
  return `rgba(${r}, ${g2}, ${b2}, ${round3(a2, 2)})`;
}
function hsvaToHsl({ h: h2, s: s2, v, a: a2 }, includeAlpha) {
  const hh = (200 - s2) * v / 100;
  const result = {
    h: Math.round(h2),
    s: Math.round(hh > 0 && hh < 200 ? s2 * v / 100 / (hh <= 100 ? hh : 200 - hh) * 100 : 0),
    l: Math.round(hh / 2)
  };
  if (!includeAlpha) {
    return `hsl(${result.h}, ${result.s}%, ${result.l}%)`;
  }
  return `hsla(${result.h}, ${result.s}%, ${result.l}%, ${round3(a2, 2)})`;
}
function formatHexPart(number2) {
  const hex = number2.toString(16);
  return hex.length < 2 ? `0${hex}` : hex;
}
function hsvaToHex(color2) {
  const { r, g: g2, b: b2 } = hsvaToRgbaObject(color2);
  return `#${formatHexPart(r)}${formatHexPart(g2)}${formatHexPart(b2)}`;
}
function hsvaToHexa(color2) {
  const a2 = Math.round(color2.a * 255);
  return `${hsvaToHex(color2)}${formatHexPart(a2)}`;
}
var CONVERTERS2 = {
  hex: hsvaToHex,
  hexa: (color2) => hsvaToHexa(color2),
  rgb: (color2) => hsvaToRgba(color2, false),
  rgba: (color2) => hsvaToRgba(color2, true),
  hsl: (color2) => hsvaToHsl(color2, false),
  hsla: (color2) => hsvaToHsl(color2, true)
};
function convertHsvaTo(format, color2) {
  if (!color2) {
    return "#000000";
  }
  if (!(format in CONVERTERS2)) {
    return CONVERTERS2.hex(color2);
  }
  return CONVERTERS2[format](color2);
}

// node_modules/@mantine/core/esm/ColorPicker/Saturation/Saturation.js
function Saturation({
  value,
  onChange,
  onChangeEnd,
  focusable: focusable2 = true,
  __staticSelector = "saturation",
  size: size3,
  color: color2,
  saturationLabel,
  classNames,
  styles: styles2,
  unstyled
}) {
  const { classes } = Saturation_styles_default({ size: size3 }, { classNames, styles: styles2, name: __staticSelector, unstyled });
  const [position5, setPosition] = (0, import_react173.useState)({ x: value.s / 100, y: 1 - value.v / 100 });
  const positionRef = (0, import_react173.useRef)(position5);
  const { ref } = useMove(({ x: x3, y }) => {
    positionRef.current = { x: x3, y };
    onChange({ s: Math.round(x3 * 100), v: Math.round((1 - y) * 100) });
  }, {
    onScrubEnd: () => {
      const { x: x3, y } = positionRef.current;
      onChangeEnd({ s: Math.round(x3 * 100), v: Math.round((1 - y) * 100) });
    }
  });
  (0, import_react173.useEffect)(() => {
    setPosition({ x: value.s / 100, y: 1 - value.v / 100 });
  }, [value.s, value.v]);
  const handleArrow = (event, pos) => {
    event.preventDefault();
    const _position = clampUseMovePosition(pos);
    onChange({ s: Math.round(_position.x * 100), v: Math.round((1 - _position.y) * 100) });
    onChangeEnd({ s: Math.round(_position.x * 100), v: Math.round((1 - _position.y) * 100) });
  };
  const handleKeyDown2 = (event) => {
    switch (event.key) {
      case "ArrowUp": {
        handleArrow(event, { y: position5.y - 0.05, x: position5.x });
        break;
      }
      case "ArrowDown": {
        handleArrow(event, { y: position5.y + 0.05, x: position5.x });
        break;
      }
      case "ArrowRight": {
        handleArrow(event, { x: position5.x + 0.05, y: position5.y });
        break;
      }
      case "ArrowLeft": {
        handleArrow(event, { x: position5.x - 0.05, y: position5.y });
        break;
      }
    }
  };
  return import_react173.default.createElement("div", {
    className: classes.saturation,
    ref,
    role: "slider",
    "aria-label": saturationLabel,
    "aria-valuenow": position5.x,
    "aria-valuetext": convertHsvaTo("rgba", value),
    tabIndex: focusable2 ? 0 : -1,
    onKeyDown: handleKeyDown2
  }, import_react173.default.createElement("div", {
    className: classes.saturationOverlay,
    style: { backgroundColor: `hsl(${value.h}, 100%, 50%)` }
  }), import_react173.default.createElement("div", {
    className: classes.saturationOverlay,
    style: { backgroundImage: "linear-gradient(90deg, #fff, transparent)" }
  }), import_react173.default.createElement("div", {
    className: classes.saturationOverlay,
    style: { backgroundImage: "linear-gradient(0deg, #000, transparent)" }
  }), import_react173.default.createElement(Thumb, {
    __staticSelector,
    classNames,
    styles: styles2,
    position: position5,
    className: classes.saturationThumb,
    style: { backgroundColor: color2 },
    size: size3
  }));
}
Saturation.displayName = "@mantine/core/Saturation";

// node_modules/@mantine/core/esm/ColorPicker/Swatches/Swatches.js
var import_react174 = __toESM(require_react());

// node_modules/@mantine/core/esm/ColorPicker/Swatches/Swatches.styles.js
var useStyles45 = createStyles((_theme, { swatchesPerRow }) => ({
  swatch: {
    width: `calc(${100 / swatchesPerRow}% - 4px)`,
    height: 0,
    paddingBottom: `calc(${100 / swatchesPerRow}% - 4px)`,
    margin: 2,
    boxSizing: "content-box"
  },
  swatches: {
    boxSizing: "border-box",
    marginLeft: -2,
    marginRight: -2,
    display: "flex",
    flexWrap: "wrap"
  }
}));
var Swatches_styles_default = useStyles45;

// node_modules/@mantine/core/esm/ColorPicker/Swatches/Swatches.js
var __defProp113 = Object.defineProperty;
var __getOwnPropSymbols115 = Object.getOwnPropertySymbols;
var __hasOwnProp115 = Object.prototype.hasOwnProperty;
var __propIsEnum115 = Object.prototype.propertyIsEnumerable;
var __defNormalProp113 = (obj, key2, value) => key2 in obj ? __defProp113(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues113 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp115.call(b2, prop))
      __defNormalProp113(a2, prop, b2[prop]);
  if (__getOwnPropSymbols115)
    for (var prop of __getOwnPropSymbols115(b2)) {
      if (__propIsEnum115.call(b2, prop))
        __defNormalProp113(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest70 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp115.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols115)
    for (var prop of __getOwnPropSymbols115(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum115.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function Swatches(_a) {
  var _b = _a, {
    data,
    swatchesPerRow = 10,
    focusable: focusable2 = true,
    classNames,
    styles: styles2,
    __staticSelector = "color-picker",
    unstyled,
    setValue,
    onChangeEnd
  } = _b, others = __objRest70(_b, [
    "data",
    "swatchesPerRow",
    "focusable",
    "classNames",
    "styles",
    "__staticSelector",
    "unstyled",
    "setValue",
    "onChangeEnd"
  ]);
  const { classes } = Swatches_styles_default({ swatchesPerRow }, { classNames, styles: styles2, name: __staticSelector, unstyled });
  const colors2 = data.map((color2, index7) => import_react174.default.createElement(ColorSwatch, {
    className: classes.swatch,
    component: "button",
    type: "button",
    color: color2,
    key: index7,
    radius: "sm",
    onClick: () => {
      setValue(color2);
      onChangeEnd == null ? void 0 : onChangeEnd(color2);
    },
    style: { cursor: "pointer" },
    "aria-label": color2,
    tabIndex: focusable2 ? 0 : -1
  }));
  return import_react174.default.createElement("div", __spreadValues113({
    className: classes.swatches
  }, others), colors2);
}
Swatches.displayName = "@mantine/core/Swatches";

// node_modules/@mantine/core/esm/ColorPicker/ColorPicker.styles.js
var sizes12 = {
  xs: 180,
  sm: 200,
  md: 240,
  lg: 280,
  xl: 320
};
var useStyles46 = createStyles((theme, { size: size3, fullWidth }) => ({
  preview: {},
  wrapper: {
    boxSizing: "border-box",
    width: fullWidth ? "100%" : theme.fn.size({ size: size3, sizes: sizes12 }),
    padding: 1
  },
  body: {
    display: "flex",
    boxSizing: "border-box",
    paddingTop: theme.fn.size({ size: size3, sizes: theme.spacing }) / 2
  },
  sliders: {
    flex: 1,
    boxSizing: "border-box",
    "&:not(:only-child)": {
      marginRight: theme.spacing.xs
    }
  },
  slider: {
    boxSizing: "border-box",
    "& + &": {
      marginTop: 5
    }
  },
  swatch: {
    cursor: "pointer"
  }
}));
var ColorPicker_styles_default = useStyles46;

// node_modules/@mantine/core/esm/ColorPicker/ColorPicker.js
var __defProp114 = Object.defineProperty;
var __defProps50 = Object.defineProperties;
var __getOwnPropDescs50 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols116 = Object.getOwnPropertySymbols;
var __hasOwnProp116 = Object.prototype.hasOwnProperty;
var __propIsEnum116 = Object.prototype.propertyIsEnumerable;
var __defNormalProp114 = (obj, key2, value) => key2 in obj ? __defProp114(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues114 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp116.call(b2, prop))
      __defNormalProp114(a2, prop, b2[prop]);
  if (__getOwnPropSymbols116)
    for (var prop of __getOwnPropSymbols116(b2)) {
      if (__propIsEnum116.call(b2, prop))
        __defNormalProp114(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps50 = (a2, b2) => __defProps50(a2, __getOwnPropDescs50(b2));
var __objRest71 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp116.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols116)
    for (var prop of __getOwnPropSymbols116(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum116.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var SWATCH_SIZES = {
  xs: 26,
  sm: 34,
  md: 42,
  lg: 50,
  xl: 54
};
var defaultProps50 = {
  swatchesPerRow: 10,
  size: "sm",
  withPicker: true,
  focusable: true,
  __staticSelector: "ColorPicker"
};
var ColorPicker = (0, import_react175.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("ColorPicker", defaultProps50, props), {
    value,
    defaultValue,
    onChange,
    onChangeEnd,
    format,
    swatches,
    swatchesPerRow,
    size: size3,
    withPicker,
    fullWidth,
    focusable: focusable2,
    __staticSelector,
    saturationLabel,
    hueLabel,
    alphaLabel,
    className,
    styles: styles2,
    classNames,
    unstyled,
    onColorSwatchClick
  } = _a, others = __objRest71(_a, [
    "value",
    "defaultValue",
    "onChange",
    "onChangeEnd",
    "format",
    "swatches",
    "swatchesPerRow",
    "size",
    "withPicker",
    "fullWidth",
    "focusable",
    "__staticSelector",
    "saturationLabel",
    "hueLabel",
    "alphaLabel",
    "className",
    "styles",
    "classNames",
    "unstyled",
    "onColorSwatchClick"
  ]);
  const { classes, cx, theme } = ColorPicker_styles_default({ size: size3, fullWidth }, { classNames, styles: styles2, name: __staticSelector, unstyled });
  const formatRef = (0, import_react175.useRef)(format);
  const valueRef = (0, import_react175.useRef)(null);
  const updateRef3 = (0, import_react175.useRef)(true);
  const withAlpha = format === "hexa" || format === "rgba" || format === "hsla";
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: "#FFFFFF",
    onChange
  });
  const [parsed, setParsed] = (0, import_react175.useState)(parseColor(_value));
  const handleChange = (color2) => {
    updateRef3.current = false;
    setParsed((current) => {
      const next2 = __spreadValues114(__spreadValues114({}, current), color2);
      valueRef.current = convertHsvaTo(formatRef.current, next2);
      return next2;
    });
    setValue(valueRef.current);
    setTimeout(() => {
      updateRef3.current = true;
    }, 0);
  };
  useDidUpdate(() => {
    if (isColorValid(value) && updateRef3.current) {
      setParsed(parseColor(value));
      updateRef3.current = true;
    }
  }, [value]);
  useDidUpdate(() => {
    formatRef.current = format;
    setValue(convertHsvaTo(format, parsed));
  }, [format]);
  return import_react175.default.createElement(Box, __spreadValues114({
    className: cx(classes.wrapper, className),
    ref
  }, others), withPicker && import_react175.default.createElement(import_react175.default.Fragment, null, import_react175.default.createElement(Saturation, {
    value: parsed,
    onChange: handleChange,
    onChangeEnd: ({ s: s2, v }) => onChangeEnd == null ? void 0 : onChangeEnd(convertHsvaTo(formatRef.current, __spreadProps50(__spreadValues114({}, parsed), { s: s2, v }))),
    color: _value,
    styles: styles2,
    classNames,
    size: size3,
    focusable: focusable2,
    saturationLabel,
    __staticSelector
  }), import_react175.default.createElement("div", {
    className: classes.body
  }, import_react175.default.createElement("div", {
    className: classes.sliders
  }, import_react175.default.createElement(HueSlider, {
    value: parsed.h,
    onChange: (h2) => handleChange({ h: h2 }),
    onChangeEnd: (h2) => onChangeEnd == null ? void 0 : onChangeEnd(convertHsvaTo(formatRef.current, __spreadProps50(__spreadValues114({}, parsed), { h: h2 }))),
    size: size3,
    styles: styles2,
    classNames,
    focusable: focusable2,
    "aria-label": hueLabel,
    __staticSelector
  }), withAlpha && import_react175.default.createElement(AlphaSlider, {
    value: parsed.a,
    onChange: (a2) => handleChange({ a: a2 }),
    onChangeEnd: (a2) => {
      onChangeEnd == null ? void 0 : onChangeEnd(convertHsvaTo(formatRef.current, __spreadProps50(__spreadValues114({}, parsed), { a: a2 })));
    },
    size: size3,
    color: convertHsvaTo("hex", parsed),
    style: { marginTop: 6 },
    styles: styles2,
    classNames,
    focusable: focusable2,
    "aria-label": alphaLabel,
    __staticSelector
  })), withAlpha && import_react175.default.createElement(ColorSwatch, {
    color: _value,
    radius: "sm",
    size: theme.fn.size({ size: size3, sizes: SWATCH_SIZES }),
    className: classes.preview
  }))), Array.isArray(swatches) && import_react175.default.createElement(Swatches, {
    data: swatches,
    style: { marginTop: 5 },
    swatchesPerRow,
    focusable: focusable2,
    classNames,
    styles: styles2,
    __staticSelector,
    setValue,
    onChangeEnd: (color2) => {
      const convertedColor = convertHsvaTo(format, parseColor(color2));
      onColorSwatchClick == null ? void 0 : onColorSwatchClick(convertedColor);
      onChangeEnd == null ? void 0 : onChangeEnd(convertedColor);
    }
  }));
});
ColorPicker.displayName = "@mantine/core/ColorPicker";

// node_modules/@mantine/core/esm/ColorInput/EyeDropperIcon.js
var import_react176 = __toESM(require_react());
var __defProp115 = Object.defineProperty;
var __getOwnPropSymbols117 = Object.getOwnPropertySymbols;
var __hasOwnProp117 = Object.prototype.hasOwnProperty;
var __propIsEnum117 = Object.prototype.propertyIsEnumerable;
var __defNormalProp115 = (obj, key2, value) => key2 in obj ? __defProp115(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues115 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp117.call(b2, prop))
      __defNormalProp115(a2, prop, b2[prop]);
  if (__getOwnPropSymbols117)
    for (var prop of __getOwnPropSymbols117(b2)) {
      if (__propIsEnum117.call(b2, prop))
        __defNormalProp115(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest72 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp117.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols117)
    for (var prop of __getOwnPropSymbols117(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum117.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function EyeDropperIcon(_a) {
  var _b = _a, {
    size: size3
  } = _b, others = __objRest72(_b, [
    "size"
  ]);
  return import_react176.default.createElement("svg", __spreadValues115({
    xmlns: "http://www.w3.org/2000/svg",
    className: "icon icon-tabler icon-tabler-color-picker",
    width: size3,
    height: size3,
    viewBox: "0 0 24 24",
    strokeWidth: "1.5",
    stroke: "currentColor",
    fill: "none",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }, others), import_react176.default.createElement("path", {
    stroke: "none",
    d: "M0 0h24v24H0z",
    fill: "none"
  }), import_react176.default.createElement("path", {
    d: "M11 7l6 6"
  }), import_react176.default.createElement("path", {
    d: "M4 16l11.7 -11.7a1 1 0 0 1 1.4 0l2.6 2.6a1 1 0 0 1 0 1.4l-11.7 11.7h-4v-4z"
  }));
}

// node_modules/@mantine/core/esm/ColorInput/ColorInput.js
var __defProp116 = Object.defineProperty;
var __defProps51 = Object.defineProperties;
var __getOwnPropDescs51 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols118 = Object.getOwnPropertySymbols;
var __hasOwnProp118 = Object.prototype.hasOwnProperty;
var __propIsEnum118 = Object.prototype.propertyIsEnumerable;
var __defNormalProp116 = (obj, key2, value) => key2 in obj ? __defProp116(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues116 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp118.call(b2, prop))
      __defNormalProp116(a2, prop, b2[prop]);
  if (__getOwnPropSymbols118)
    for (var prop of __getOwnPropSymbols118(b2)) {
      if (__propIsEnum118.call(b2, prop))
        __defNormalProp116(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps51 = (a2, b2) => __defProps51(a2, __getOwnPropDescs51(b2));
var __objRest73 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp118.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols118)
    for (var prop of __getOwnPropSymbols118(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum118.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var SWATCH_SIZES2 = {
  xs: 16,
  sm: 18,
  md: 22,
  lg: 28,
  xl: 36
};
var EYE_DROPPER_SIZES = {
  xs: 14,
  sm: 16,
  md: 18,
  lg: 20,
  xl: 22
};
var RIGHT_SECTION_WIDTH = {
  xs: 28,
  sm: 32,
  md: 38,
  lg: 44,
  xl: 58
};
var defaultProps51 = {
  size: "sm",
  format: "hex",
  fixOnBlur: true,
  withPreview: true,
  swatchesPerRow: 10,
  withPicker: true,
  transition: "pop-top-left",
  dropdownZIndex: getDefaultZIndex("popover"),
  transitionDuration: 0,
  withinPortal: true,
  shadow: "md",
  withEyeDropper: true
};
var ColorInput = (0, import_react177.forwardRef)((props, ref) => {
  const _a = useInputProps("ColorInput", defaultProps51, props), {
    wrapperProps,
    inputProps,
    format,
    onChange,
    onChangeEnd,
    onFocus,
    onBlur,
    onClick,
    value,
    defaultValue,
    disallowInput,
    fixOnBlur,
    withPreview,
    swatchesPerRow,
    withPicker,
    icon,
    transition,
    dropdownZIndex,
    transitionDuration,
    transitionTimingFunction,
    withinPortal,
    swatches,
    shadow,
    classNames,
    styles: styles2,
    unstyled,
    readOnly,
    withEyeDropper,
    eyeDropperIcon,
    rightSection,
    rightSectionWidth,
    closeOnColorSwatchClick,
    disabled
  } = _a, others = __objRest73(_a, [
    "wrapperProps",
    "inputProps",
    "format",
    "onChange",
    "onChangeEnd",
    "onFocus",
    "onBlur",
    "onClick",
    "value",
    "defaultValue",
    "disallowInput",
    "fixOnBlur",
    "withPreview",
    "swatchesPerRow",
    "withPicker",
    "icon",
    "transition",
    "dropdownZIndex",
    "transitionDuration",
    "transitionTimingFunction",
    "withinPortal",
    "swatches",
    "shadow",
    "classNames",
    "styles",
    "unstyled",
    "readOnly",
    "withEyeDropper",
    "eyeDropperIcon",
    "rightSection",
    "rightSectionWidth",
    "closeOnColorSwatchClick",
    "disabled"
  ]);
  const theme = useMantineTheme();
  const [dropdownOpened, setDropdownOpened] = (0, import_react177.useState)(false);
  const [lastValidValue, setLastValidValue] = (0, import_react177.useState)("");
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: "",
    onChange
  });
  const { supported: eyeDropperSupported, open: openEyeDropper } = useEyeDropper();
  const eyeDropper = import_react177.default.createElement(ActionIcon, {
    sx: { color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black },
    size: inputProps.size,
    onClick: () => openEyeDropper().then(({ sRGBHex }) => setValue(convertHsvaTo(format, parseColor(sRGBHex)))).catch(noop)
  }, eyeDropperIcon || import_react177.default.createElement(EyeDropperIcon, {
    size: theme.fn.size({ size: inputProps.size, sizes: EYE_DROPPER_SIZES })
  }));
  const handleInputFocus = (event) => {
    onFocus == null ? void 0 : onFocus(event);
    setDropdownOpened(true);
  };
  const handleInputBlur = (event) => {
    onBlur == null ? void 0 : onBlur(event);
    setDropdownOpened(false);
    fixOnBlur && setValue(lastValidValue);
  };
  const handleInputClick = (event) => {
    onClick == null ? void 0 : onClick(event);
    setDropdownOpened(true);
  };
  (0, import_react177.useEffect)(() => {
    if (isColorValid(_value) || _value.trim() === "") {
      setLastValidValue(_value);
    }
  }, [_value]);
  useDidUpdate(() => {
    if (isColorValid(_value)) {
      setValue(convertHsvaTo(format, parseColor(_value)));
    }
  }, [format]);
  return import_react177.default.createElement(Input.Wrapper, __spreadProps51(__spreadValues116({}, wrapperProps), {
    __staticSelector: "ColorInput"
  }), import_react177.default.createElement(Popover, {
    __staticSelector: "ColorInput",
    position: "bottom-start",
    offset: 5,
    zIndex: dropdownZIndex,
    withinPortal,
    transitionDuration,
    transition,
    opened: dropdownOpened,
    shadow,
    classNames,
    styles: styles2,
    unstyled,
    disabled: readOnly || withPicker === false && (!Array.isArray(swatches) || swatches.length === 0)
  }, import_react177.default.createElement(Popover.Target, null, import_react177.default.createElement("div", null, import_react177.default.createElement(Input, __spreadProps51(__spreadValues116(__spreadValues116({
    autoComplete: "nope"
  }, others), inputProps), {
    disabled,
    ref,
    __staticSelector: "ColorInput",
    onFocus: handleInputFocus,
    onBlur: handleInputBlur,
    onClick: handleInputClick,
    spellCheck: false,
    value: _value,
    onChange: (event) => {
      const inputValue = event.currentTarget.value;
      setValue(inputValue);
      if (isColorValid(inputValue)) {
        onChangeEnd == null ? void 0 : onChangeEnd(convertHsvaTo(format, parseColor(inputValue)));
      }
    },
    icon: icon || (withPreview ? import_react177.default.createElement(ColorSwatch, {
      color: isColorValid(_value) ? _value : "#fff",
      size: theme.fn.size({ size: inputProps.size, sizes: SWATCH_SIZES2 })
    }) : null),
    readOnly: disallowInput || readOnly,
    sx: { cursor: disallowInput ? "pointer" : void 0 },
    unstyled,
    classNames,
    styles: styles2,
    rightSection: rightSection || (withEyeDropper && !disabled && !readOnly && eyeDropperSupported ? eyeDropper : null),
    rightSectionWidth: rightSectionWidth != null ? rightSectionWidth : theme.fn.size({ size: inputProps.size, sizes: RIGHT_SECTION_WIDTH })
  })))), import_react177.default.createElement(Popover.Dropdown, {
    onMouseDown: (event) => event.preventDefault(),
    p: inputProps.size
  }, import_react177.default.createElement(ColorPicker, {
    __staticSelector: "ColorInput",
    value: _value,
    onChange: setValue,
    onChangeEnd,
    format,
    swatches,
    swatchesPerRow,
    withPicker,
    size: inputProps.size,
    focusable: false,
    unstyled,
    styles: styles2,
    classNames,
    onColorSwatchClick: () => closeOnColorSwatchClick && setDropdownOpened(false)
  }))));
});
ColorInput.displayName = "@mantine/core/ColorInput";

// node_modules/@mantine/core/esm/Container/Container.js
var import_react178 = __toESM(require_react());

// node_modules/@mantine/core/esm/Container/Container.styles.js
var useStyles47 = createStyles((theme, { fluid, size: size3, sizes: sizes24 }) => ({
  root: {
    paddingLeft: theme.spacing.md,
    paddingRight: theme.spacing.md,
    maxWidth: fluid ? "100%" : theme.fn.size({ size: size3, sizes: sizes24 }),
    marginLeft: "auto",
    marginRight: "auto"
  }
}));
var Container_styles_default = useStyles47;

// node_modules/@mantine/core/esm/Container/Container.js
var __defProp117 = Object.defineProperty;
var __getOwnPropSymbols119 = Object.getOwnPropertySymbols;
var __hasOwnProp119 = Object.prototype.hasOwnProperty;
var __propIsEnum119 = Object.prototype.propertyIsEnumerable;
var __defNormalProp117 = (obj, key2, value) => key2 in obj ? __defProp117(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues117 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp119.call(b2, prop))
      __defNormalProp117(a2, prop, b2[prop]);
  if (__getOwnPropSymbols119)
    for (var prop of __getOwnPropSymbols119(b2)) {
      if (__propIsEnum119.call(b2, prop))
        __defNormalProp117(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest74 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp119.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols119)
    for (var prop of __getOwnPropSymbols119(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum119.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps52 = {
  sizes: {
    xs: 540,
    sm: 720,
    md: 960,
    lg: 1140,
    xl: 1320
  }
};
var Container = (0, import_react178.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Container", defaultProps52, props), { className, fluid, size: size3, unstyled, sizes: sizes24 } = _a, others = __objRest74(_a, ["className", "fluid", "size", "unstyled", "sizes"]);
  const { classes, cx } = Container_styles_default({ fluid, size: size3, sizes: sizes24 }, { unstyled, name: "Container" });
  return import_react178.default.createElement(Box, __spreadValues117({
    className: cx(classes.root, className),
    ref
  }, others));
});
Container.displayName = "@mantine/core/Container";

// node_modules/@mantine/core/esm/CopyButton/CopyButton.js
var import_react179 = __toESM(require_react());
var __defProp118 = Object.defineProperty;
var __getOwnPropSymbols120 = Object.getOwnPropertySymbols;
var __hasOwnProp120 = Object.prototype.hasOwnProperty;
var __propIsEnum120 = Object.prototype.propertyIsEnumerable;
var __defNormalProp118 = (obj, key2, value) => key2 in obj ? __defProp118(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues118 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp120.call(b2, prop))
      __defNormalProp118(a2, prop, b2[prop]);
  if (__getOwnPropSymbols120)
    for (var prop of __getOwnPropSymbols120(b2)) {
      if (__propIsEnum120.call(b2, prop))
        __defNormalProp118(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest75 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp120.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols120)
    for (var prop of __getOwnPropSymbols120(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum120.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps53 = {
  timeout: 1e3
};
function CopyButton(props) {
  const _a = useComponentDefaultProps("CopyButton", defaultProps53, props), { children, timeout: timeout2, value } = _a, others = __objRest75(_a, ["children", "timeout", "value"]);
  const clipboard = useClipboard({ timeout: timeout2 });
  const copy4 = () => clipboard.copy(value);
  return import_react179.default.createElement(import_react179.default.Fragment, null, children(__spreadValues118({ copy: copy4, copied: clipboard.copied }, others)));
}
CopyButton.displayName = "@mantine/core/CopyButton";

// node_modules/@mantine/core/esm/Dialog/Dialog.js
var import_react180 = __toESM(require_react());

// node_modules/@mantine/core/esm/Dialog/Dialog.styles.js
var __defProp119 = Object.defineProperty;
var __defProps52 = Object.defineProperties;
var __getOwnPropDescs52 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols121 = Object.getOwnPropertySymbols;
var __hasOwnProp121 = Object.prototype.hasOwnProperty;
var __propIsEnum121 = Object.prototype.propertyIsEnumerable;
var __defNormalProp119 = (obj, key2, value) => key2 in obj ? __defProp119(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues119 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp121.call(b2, prop))
      __defNormalProp119(a2, prop, b2[prop]);
  if (__getOwnPropSymbols121)
    for (var prop of __getOwnPropSymbols121(b2)) {
      if (__propIsEnum121.call(b2, prop))
        __defNormalProp119(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps52 = (a2, b2) => __defProps52(a2, __getOwnPropDescs52(b2));
var sizes13 = {
  xs: 160,
  sm: 200,
  md: 340,
  lg: 400,
  xl: 500
};
var useStyles48 = createStyles((theme, { size: size3 }) => ({
  root: __spreadProps52(__spreadValues119({}, theme.fn.fontStyles()), {
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    position: "relative",
    width: theme.fn.size({ size: size3, sizes: sizes13 }),
    maxWidth: "100%",
    minHeight: 50
  }),
  closeButton: {
    position: "absolute",
    top: `calc(${theme.spacing.md}px / 2)`,
    right: `calc(${theme.spacing.md}px / 2)`
  }
}));
var Dialog_styles_default = useStyles48;

// node_modules/@mantine/core/esm/Dialog/Dialog.js
var __defProp120 = Object.defineProperty;
var __getOwnPropSymbols122 = Object.getOwnPropertySymbols;
var __hasOwnProp122 = Object.prototype.hasOwnProperty;
var __propIsEnum122 = Object.prototype.propertyIsEnumerable;
var __defNormalProp120 = (obj, key2, value) => key2 in obj ? __defProp120(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues120 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp122.call(b2, prop))
      __defNormalProp120(a2, prop, b2[prop]);
  if (__getOwnPropSymbols122)
    for (var prop of __getOwnPropSymbols122(b2)) {
      if (__propIsEnum122.call(b2, prop))
        __defNormalProp120(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest76 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp122.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols122)
    for (var prop of __getOwnPropSymbols122(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum122.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps54 = {
  shadow: "md",
  p: "md",
  withBorder: true,
  size: "md",
  transition: "pop-top-right",
  transitionDuration: 200
};
function DialogBody(props) {
  const _a = useComponentDefaultProps("Dialog", defaultProps54, props), {
    withCloseButton,
    onClose,
    position: position5,
    shadow,
    children,
    className,
    style: style3,
    classNames,
    styles: styles2,
    opened,
    withBorder,
    size: size3,
    transition,
    transitionDuration,
    transitionTimingFunction,
    unstyled
  } = _a, others = __objRest76(_a, [
    "withCloseButton",
    "onClose",
    "position",
    "shadow",
    "children",
    "className",
    "style",
    "classNames",
    "styles",
    "opened",
    "withBorder",
    "size",
    "transition",
    "transitionDuration",
    "transitionTimingFunction",
    "unstyled"
  ]);
  const { classes, cx } = Dialog_styles_default({ size: size3 }, { classNames, styles: styles2, unstyled, name: "Dialog" });
  return import_react180.default.createElement(Transition, {
    mounted: opened,
    transition,
    duration: transitionDuration,
    timingFunction: transitionTimingFunction
  }, (transitionStyles) => import_react180.default.createElement(Paper, __spreadValues120({
    className: cx(classes.root, className),
    style: __spreadValues120(__spreadValues120({}, style3), transitionStyles),
    shadow,
    withBorder,
    unstyled
  }, others), withCloseButton && import_react180.default.createElement(CloseButton, {
    onClick: onClose,
    className: classes.closeButton
  }), children));
}
var Dialog = (0, import_react180.forwardRef)((_a, ref) => {
  var _b = _a, { zIndex = getDefaultZIndex("modal") } = _b, props = __objRest76(_b, ["zIndex"]);
  const theme = useMantineTheme();
  return import_react180.default.createElement(Affix, {
    zIndex,
    position: props.position || { bottom: theme.spacing.xl, right: theme.spacing.xl },
    ref
  }, import_react180.default.createElement(DialogBody, __spreadValues120({}, props)));
});
Dialog.displayName = "@mantine/core/Dialog";

// node_modules/@mantine/core/esm/Drawer/Drawer.js
var import_react183 = __toESM(require_react());

// node_modules/@mantine/core/esm/Drawer/Drawer.styles.js
var __defProp121 = Object.defineProperty;
var __defProps53 = Object.defineProperties;
var __getOwnPropDescs53 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols123 = Object.getOwnPropertySymbols;
var __hasOwnProp123 = Object.prototype.hasOwnProperty;
var __propIsEnum123 = Object.prototype.propertyIsEnumerable;
var __defNormalProp121 = (obj, key2, value) => key2 in obj ? __defProp121(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues121 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp123.call(b2, prop))
      __defNormalProp121(a2, prop, b2[prop]);
  if (__getOwnPropSymbols123)
    for (var prop of __getOwnPropSymbols123(b2)) {
      if (__propIsEnum123.call(b2, prop))
        __defNormalProp121(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps53 = (a2, b2) => __defProps53(a2, __getOwnPropDescs53(b2));
var sizes14 = {
  xs: 180,
  sm: 240,
  md: 320,
  lg: 360,
  xl: 500,
  full: "100%"
};
function getPositionStyles2({
  position: position5,
  size: size3,
  theme
}) {
  switch (position5) {
    case "top":
      return { top: 0, left: 0, right: 0, height: theme.fn.size({ size: size3, sizes: sizes14 }) };
    case "bottom":
      return { bottom: 0, left: 0, right: 0, height: theme.fn.size({ size: size3, sizes: sizes14 }) };
    case "right":
      return { bottom: 0, top: 0, right: 0, width: theme.fn.size({ size: size3, sizes: sizes14 }) };
    case "left":
      return { bottom: 0, top: 0, left: 0, width: theme.fn.size({ size: size3, sizes: sizes14 }) };
    default:
      return null;
  }
}
var useStyles49 = createStyles((theme, { position: position5, size: size3, zIndex, withOverlay }) => ({
  closeButton: {},
  overlay: {},
  body: {},
  root: {
    position: "fixed",
    zIndex,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    pointerEvents: withOverlay === false ? "none" : void 0
  },
  drawer: __spreadProps53(__spreadValues121({}, getPositionStyles2({ position: position5, size: size3, theme })), {
    maxWidth: "100%",
    maxHeight: "100vh",
    position: "fixed",
    outline: 0,
    zIndex: 1,
    pointerEvents: withOverlay === false ? "auto" : void 0
  }),
  title: {
    marginRight: theme.spacing.md,
    textOverflow: "ellipsis",
    display: "block",
    wordBreak: "break-word"
  },
  header: {
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: theme.spacing.md
  }
}));
var Drawer_styles_default = useStyles49;

// node_modules/@mantine/core/esm/Transition/GroupedTransition.js
var import_react181 = __toESM(require_react());
function GroupedTransition({
  transitions: transitions3,
  duration = 250,
  exitDuration = duration,
  mounted,
  children,
  timingFunction,
  onExit,
  onEntered,
  onEnter,
  onExited
}) {
  const { transitionDuration, transitionStatus, transitionTimingFunction } = useTransition({
    mounted,
    duration,
    exitDuration,
    timingFunction,
    onExit,
    onEntered,
    onEnter,
    onExited
  });
  if (transitionDuration === 0) {
    return mounted ? import_react181.default.createElement(import_react181.default.Fragment, null, children({})) : null;
  }
  if (transitionStatus === "exited") {
    return null;
  }
  const transitionsStyles = Object.keys(transitions3).reduce((acc, transition) => {
    acc[transition] = getTransitionStyles({
      duration: transitions3[transition].duration,
      transition: transitions3[transition].transition,
      timingFunction: transitions3[transition].timingFunction || transitionTimingFunction,
      state: transitionStatus
    });
    return acc;
  }, {});
  return import_react181.default.createElement(import_react181.default.Fragment, null, children(transitionsStyles));
}
GroupedTransition.displayName = "@mantine/core/GroupedTransition";

// node_modules/@mantine/core/esm/Overlay/Overlay.js
var import_react182 = __toESM(require_react());

// node_modules/@mantine/core/esm/Overlay/Overlay.styles.js
var useStyles50 = createStyles((theme, { zIndex }) => ({
  root: {
    position: "absolute",
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    zIndex
  }
}));
var Overlay_styles_default = useStyles50;

// node_modules/@mantine/core/esm/Overlay/Overlay.js
var __defProp122 = Object.defineProperty;
var __defProps54 = Object.defineProperties;
var __getOwnPropDescs54 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols124 = Object.getOwnPropertySymbols;
var __hasOwnProp124 = Object.prototype.hasOwnProperty;
var __propIsEnum124 = Object.prototype.propertyIsEnumerable;
var __defNormalProp122 = (obj, key2, value) => key2 in obj ? __defProp122(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues122 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp124.call(b2, prop))
      __defNormalProp122(a2, prop, b2[prop]);
  if (__getOwnPropSymbols124)
    for (var prop of __getOwnPropSymbols124(b2)) {
      if (__propIsEnum124.call(b2, prop))
        __defNormalProp122(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps54 = (a2, b2) => __defProps54(a2, __getOwnPropDescs54(b2));
var __objRest77 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp124.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols124)
    for (var prop of __getOwnPropSymbols124(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum124.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps55 = {
  opacity: 0.6,
  color: "#fff",
  zIndex: getDefaultZIndex("modal"),
  radius: 0,
  blur: 0
};
var _Overlay = (0, import_react182.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Overlay", defaultProps55, props), { opacity, blur: blur2, color: color2, gradient: gradient2, zIndex, radius: radius2, sx, unstyled, className } = _a, others = __objRest77(_a, ["opacity", "blur", "color", "gradient", "zIndex", "radius", "sx", "unstyled", "className"]);
  const { classes, cx } = Overlay_styles_default({ zIndex }, { name: "Overlay", unstyled });
  const background = gradient2 ? { backgroundImage: gradient2 } : { backgroundColor: color2 };
  const innerOverlay = (otherProps) => import_react182.default.createElement(Box, __spreadValues122({
    ref,
    className: cx(classes.root, className),
    sx: [
      (theme) => __spreadProps54(__spreadValues122({}, background), {
        opacity,
        borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius })
      }),
      ...packSx(sx)
    ]
  }, otherProps));
  if (blur2) {
    return import_react182.default.createElement(Box, __spreadValues122({
      className: cx(classes.root, className),
      sx: [{ backdropFilter: `blur(${blur2}px)` }, ...packSx(sx)]
    }, others), innerOverlay());
  }
  return innerOverlay(others);
});
_Overlay.displayName = "@mantine/core/Overlay";
var Overlay = createPolymorphicComponent(_Overlay);

// node_modules/@mantine/core/esm/Drawer/Drawer.js
var __defProp123 = Object.defineProperty;
var __getOwnPropSymbols125 = Object.getOwnPropertySymbols;
var __hasOwnProp125 = Object.prototype.hasOwnProperty;
var __propIsEnum125 = Object.prototype.propertyIsEnumerable;
var __defNormalProp123 = (obj, key2, value) => key2 in obj ? __defProp123(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues123 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp125.call(b2, prop))
      __defNormalProp123(a2, prop, b2[prop]);
  if (__getOwnPropSymbols125)
    for (var prop of __getOwnPropSymbols125(b2)) {
      if (__propIsEnum125.call(b2, prop))
        __defNormalProp123(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest78 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp125.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols125)
    for (var prop of __getOwnPropSymbols125(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum125.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var transitions2 = {
  top: "slide-down",
  bottom: "slide-up",
  left: "slide-right",
  right: "slide-left"
};
var rtlTransitions = {
  top: "slide-down",
  bottom: "slide-up",
  right: "slide-right",
  left: "slide-left"
};
var defaultProps56 = {
  position: "left",
  size: "md",
  transitionDuration: 250,
  transitionTimingFunction: "ease",
  zIndex: getDefaultZIndex("modal"),
  shadow: "md",
  padding: 0,
  lockScroll: true,
  closeOnClickOutside: true,
  closeOnEscape: true,
  trapFocus: true,
  withOverlay: true,
  withCloseButton: true,
  withinPortal: true,
  withFocusReturn: true,
  overlayBlur: 0
};
function Drawer(props) {
  const _a = useComponentDefaultProps("Drawer", defaultProps56, props), {
    className,
    opened,
    onClose,
    position: position5,
    size: size3,
    trapFocus,
    lockScroll,
    closeOnClickOutside,
    closeOnEscape: closeOnEscape2,
    transition,
    transitionDuration,
    transitionTimingFunction,
    zIndex,
    overlayColor,
    overlayOpacity,
    children,
    withOverlay,
    shadow,
    id: id2,
    padding: padding2,
    title,
    withCloseButton,
    closeButtonLabel,
    classNames,
    styles: styles2,
    target,
    withinPortal,
    overlayBlur,
    unstyled,
    withFocusReturn
  } = _a, others = __objRest78(_a, [
    "className",
    "opened",
    "onClose",
    "position",
    "size",
    "trapFocus",
    "lockScroll",
    "closeOnClickOutside",
    "closeOnEscape",
    "transition",
    "transitionDuration",
    "transitionTimingFunction",
    "zIndex",
    "overlayColor",
    "overlayOpacity",
    "children",
    "withOverlay",
    "shadow",
    "id",
    "padding",
    "title",
    "withCloseButton",
    "closeButtonLabel",
    "classNames",
    "styles",
    "target",
    "withinPortal",
    "overlayBlur",
    "unstyled",
    "withFocusReturn"
  ]);
  const baseId = useId(id2);
  const titleId = `${baseId}-title`;
  const bodyId = `${baseId}-body`;
  const { classes, cx, theme } = Drawer_styles_default({ size: size3, position: position5, zIndex, withOverlay }, { classNames, styles: styles2, unstyled, name: "Drawer" });
  const focusTrapRef = useFocusTrap(trapFocus && opened);
  const [, _lockScroll] = useScrollLock();
  const drawerTransition = transition || (theme.dir === "rtl" ? rtlTransitions : transitions2)[position5];
  const _overlayOpacity = typeof overlayOpacity === "number" ? overlayOpacity : theme.colorScheme === "dark" ? 0.85 : 0.75;
  const _closeOnEscape = (event) => {
    if (event.key === "Escape" && closeOnEscape2) {
      onClose();
    }
  };
  (0, import_react183.useEffect)(() => {
    if (!trapFocus) {
      window.addEventListener("keydown", _closeOnEscape);
      return () => window.removeEventListener("keydown", _closeOnEscape);
    }
    return void 0;
  }, [trapFocus]);
  useFocusReturn({ opened, shouldReturnFocus: trapFocus && withFocusReturn });
  return import_react183.default.createElement(OptionalPortal, {
    withinPortal,
    target
  }, import_react183.default.createElement(GroupedTransition, {
    onExited: () => _lockScroll(false),
    onEntered: () => _lockScroll(lockScroll && true),
    mounted: opened,
    duration: transitionDuration,
    timingFunction: transitionTimingFunction,
    transitions: {
      overlay: { duration: transitionDuration / 2, transition: "fade", timingFunction: "ease" },
      drawer: {
        duration: transitionDuration,
        transition: drawerTransition,
        timingFunction: transitionTimingFunction
      }
    }
  }, (transitionStyles) => import_react183.default.createElement(Box, __spreadValues123({
    className: cx(classes.root, className),
    role: "dialog",
    "aria-modal": true,
    "aria-labelledby": titleId,
    "aria-describedby": bodyId
  }, others), import_react183.default.createElement(Paper, {
    className: cx(classes.drawer, className),
    ref: focusTrapRef,
    style: transitionStyles.drawer,
    radius: 0,
    tabIndex: -1,
    onKeyDownCapture: (event) => {
      var _a2;
      const shouldTrigger = ((_a2 = event.target) == null ? void 0 : _a2.getAttribute("data-mantine-stop-propagation")) !== "true";
      shouldTrigger && event.key === "Escape" && closeOnEscape2 && onClose();
    },
    shadow,
    p: padding2,
    unstyled
  }, (title || withCloseButton) && import_react183.default.createElement("div", {
    className: classes.header
  }, import_react183.default.createElement(Text, {
    id: titleId,
    className: classes.title,
    unstyled
  }, title), withCloseButton && import_react183.default.createElement(CloseButton, {
    iconSize: 16,
    onClick: onClose,
    "aria-label": closeButtonLabel,
    className: classes.closeButton,
    unstyled
  })), import_react183.default.createElement("div", {
    id: bodyId,
    className: classes.body
  }, children)), withOverlay && import_react183.default.createElement("div", {
    style: transitionStyles.overlay
  }, import_react183.default.createElement(Overlay, {
    unstyled,
    blur: overlayBlur,
    onMouseDown: () => closeOnClickOutside && onClose(),
    className: classes.overlay,
    opacity: _overlayOpacity,
    zIndex: 0,
    color: overlayColor || (theme.colorScheme === "dark" ? theme.colors.dark[9] : theme.black)
  })))));
}
Drawer.displayName = "@mantine/core/Drawer";

// node_modules/@mantine/core/esm/FileButton/FileButton.js
var import_react184 = __toESM(require_react());
var __defProp124 = Object.defineProperty;
var __getOwnPropSymbols126 = Object.getOwnPropertySymbols;
var __hasOwnProp126 = Object.prototype.hasOwnProperty;
var __propIsEnum126 = Object.prototype.propertyIsEnumerable;
var __defNormalProp124 = (obj, key2, value) => key2 in obj ? __defProp124(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues124 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp126.call(b2, prop))
      __defNormalProp124(a2, prop, b2[prop]);
  if (__getOwnPropSymbols126)
    for (var prop of __getOwnPropSymbols126(b2)) {
      if (__propIsEnum126.call(b2, prop))
        __defNormalProp124(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest79 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp126.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols126)
    for (var prop of __getOwnPropSymbols126(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum126.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps57 = {
  multiple: false
};
var FileButton = (0, import_react184.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("FileButton", defaultProps57, props), {
    onChange,
    children,
    multiple,
    accept,
    name,
    form,
    resetRef,
    disabled,
    capture,
    inputProps
  } = _a, others = __objRest79(_a, [
    "onChange",
    "children",
    "multiple",
    "accept",
    "name",
    "form",
    "resetRef",
    "disabled",
    "capture",
    "inputProps"
  ]);
  const inputRef = (0, import_react184.useRef)();
  const onClick = () => {
    !disabled && inputRef.current.click();
  };
  const handleChange = (event) => {
    if (multiple) {
      onChange(Array.from(event.currentTarget.files));
    } else {
      onChange(event.currentTarget.files[0] || null);
    }
  };
  const reset2 = () => {
    inputRef.current.value = "";
  };
  assignRef(resetRef, reset2);
  return import_react184.default.createElement(import_react184.default.Fragment, null, children(__spreadValues124({ onClick }, others)), import_react184.default.createElement("input", __spreadValues124({
    style: { display: "none" },
    type: "file",
    accept,
    multiple,
    onChange: handleChange,
    ref: useMergedRef(ref, inputRef),
    name,
    form,
    capture
  }, inputProps)));
});
FileButton.displayName = "@mantine/core/FileButton";

// node_modules/@mantine/core/esm/FileInput/FileInput.js
var import_react185 = __toESM(require_react());

// node_modules/@mantine/core/esm/FileInput/FileInput.styles.js
var useStyles51 = createStyles(() => ({
  placeholder: {},
  input: {
    cursor: "pointer"
  }
}));
var FileInput_styles_default = useStyles51;

// node_modules/@mantine/core/esm/FileInput/FileInput.js
var __defProp125 = Object.defineProperty;
var __defProps55 = Object.defineProperties;
var __getOwnPropDescs55 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols127 = Object.getOwnPropertySymbols;
var __hasOwnProp127 = Object.prototype.hasOwnProperty;
var __propIsEnum127 = Object.prototype.propertyIsEnumerable;
var __defNormalProp125 = (obj, key2, value) => key2 in obj ? __defProp125(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues125 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp127.call(b2, prop))
      __defNormalProp125(a2, prop, b2[prop]);
  if (__getOwnPropSymbols127)
    for (var prop of __getOwnPropSymbols127(b2)) {
      if (__propIsEnum127.call(b2, prop))
        __defNormalProp125(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps55 = (a2, b2) => __defProps55(a2, __getOwnPropDescs55(b2));
var __objRest80 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp127.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols127)
    for (var prop of __getOwnPropSymbols127(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum127.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var DefaultValue = ({ value }) => import_react185.default.createElement(Text, {
  sx: { overflow: "hidden", textOverflow: "ellipsis", whiteSpace: "nowrap" }
}, Array.isArray(value) ? value.map((file) => file.name).join(", ") : value == null ? void 0 : value.name);
var defaultProps58 = {
  size: "sm",
  valueComponent: DefaultValue,
  clearButtonTabIndex: 0
};
var RIGHT_SECTION_WIDTH2 = {
  xs: 24,
  sm: 30,
  md: 34,
  lg: 40,
  xl: 44
};
var _FileInput = (0, import_react185.forwardRef)((props, ref) => {
  const _a = useInputProps("FileInput", defaultProps58, props), {
    inputProps,
    wrapperProps,
    placeholder,
    value,
    defaultValue,
    onChange,
    multiple,
    accept,
    name,
    form,
    classNames,
    styles: styles2,
    unstyled,
    valueComponent: ValueComponent,
    rightSection,
    rightSectionWidth,
    clearable,
    clearButtonLabel,
    clearButtonTabIndex,
    readOnly,
    capture,
    fileInputProps
  } = _a, others = __objRest80(_a, [
    "inputProps",
    "wrapperProps",
    "placeholder",
    "value",
    "defaultValue",
    "onChange",
    "multiple",
    "accept",
    "name",
    "form",
    "classNames",
    "styles",
    "unstyled",
    "valueComponent",
    "rightSection",
    "rightSectionWidth",
    "clearable",
    "clearButtonLabel",
    "clearButtonTabIndex",
    "readOnly",
    "capture",
    "fileInputProps"
  ]);
  const resetRef = (0, import_react185.useRef)();
  const { classes, theme, cx } = FileInput_styles_default(null, {
    name: "FileInput",
    classNames,
    styles: styles2,
    unstyled
  });
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    onChange,
    finalValue: multiple ? [] : null
  });
  const hasValue = Array.isArray(_value) ? _value.length !== 0 : _value !== null;
  const _rightSection = rightSection || (clearable && hasValue && !readOnly ? import_react185.default.createElement(CloseButton, {
    variant: "transparent",
    "aria-label": clearButtonLabel,
    onClick: () => setValue(multiple ? [] : null),
    size: inputProps.size,
    tabIndex: clearButtonTabIndex,
    unstyled
  }) : null);
  (0, import_react185.useEffect)(() => {
    if (Array.isArray(_value) && _value.length === 0 || _value === null) {
      resetRef.current();
    }
  }, [_value]);
  return import_react185.default.createElement(Input.Wrapper, __spreadProps55(__spreadValues125({}, wrapperProps), {
    __staticSelector: "FileInput"
  }), import_react185.default.createElement(FileButton, {
    onChange: setValue,
    multiple,
    accept,
    name,
    form,
    resetRef,
    disabled: readOnly,
    capture,
    inputProps: fileInputProps
  }, (fileButtonProps) => import_react185.default.createElement(Input, __spreadProps55(__spreadValues125(__spreadValues125(__spreadValues125({
    multiline: true
  }, fileButtonProps), inputProps), others), {
    component: "button",
    type: "button",
    ref,
    __staticSelector: "FileInput",
    rightSection: _rightSection,
    rightSectionWidth: rightSectionWidth || theme.fn.size({ size: inputProps.size, sizes: RIGHT_SECTION_WIDTH2 }),
    classNames: __spreadProps55(__spreadValues125({}, classNames), { input: cx(classes.input, classNames == null ? void 0 : classNames.input) })
  }), !hasValue ? import_react185.default.createElement(Input.Placeholder, {
    className: classes.placeholder
  }, placeholder) : import_react185.default.createElement(ValueComponent, {
    value: _value
  }))));
});
_FileInput.displayName = "@mantine/core/FileInput";

// node_modules/@mantine/core/esm/Flex/Flex.js
var import_react186 = __toESM(require_react());

// node_modules/@mantine/core/esm/Flex/flex-props.js
var FLEX_SYSTEM_PROPS = {
  gap: { type: "spacing", property: "gap" },
  rowGap: { type: "spacing", property: "rowGap" },
  columnGap: { type: "spacing", property: "columnGap" },
  align: { type: "default", property: "alignItems" },
  justify: { type: "default", property: "justifyContent" },
  wrap: { type: "default", property: "flexWrap" },
  direction: { type: "default", property: "flexDirection" }
};

// node_modules/@mantine/core/esm/Flex/Flex.js
var __defProp126 = Object.defineProperty;
var __defProps56 = Object.defineProperties;
var __getOwnPropDescs56 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols128 = Object.getOwnPropertySymbols;
var __hasOwnProp128 = Object.prototype.hasOwnProperty;
var __propIsEnum128 = Object.prototype.propertyIsEnumerable;
var __defNormalProp126 = (obj, key2, value) => key2 in obj ? __defProp126(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues126 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp128.call(b2, prop))
      __defNormalProp126(a2, prop, b2[prop]);
  if (__getOwnPropSymbols128)
    for (var prop of __getOwnPropSymbols128(b2)) {
      if (__propIsEnum128.call(b2, prop))
        __defNormalProp126(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps56 = (a2, b2) => __defProps56(a2, __getOwnPropDescs56(b2));
var __objRest81 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp128.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols128)
    for (var prop of __getOwnPropSymbols128(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum128.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps59 = {};
var Flex = (0, import_react186.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Flex", defaultProps59, props), { gap, rowGap, columnGap, align, justify, wrap: wrap5, direction, sx } = _a, others = __objRest81(_a, ["gap", "rowGap", "columnGap", "align", "justify", "wrap", "direction", "sx"]);
  return import_react186.default.createElement(Box, __spreadProps56(__spreadValues126({}, others), {
    sx: [
      { display: "flex" },
      (theme) => getSystemStyles({ gap, rowGap, columnGap, align, justify, wrap: wrap5, direction }, theme, FLEX_SYSTEM_PROPS),
      ...packSx(sx)
    ],
    ref
  }));
});
Flex.displayName = "@mantine/core/Flex";

// node_modules/@mantine/core/esm/Grid/Grid.js
var import_react188 = __toESM(require_react());

// node_modules/@mantine/core/esm/Grid/Col/Col.js
var import_react187 = __toESM(require_react());

// node_modules/@mantine/core/esm/Grid/Grid.context.js
var [GridProvider, useGridContext] = createSafeContext("Grid component was not found in tree");

// node_modules/@mantine/core/esm/Grid/Col/Col.styles.js
var __defProp127 = Object.defineProperty;
var __getOwnPropSymbols129 = Object.getOwnPropertySymbols;
var __hasOwnProp129 = Object.prototype.hasOwnProperty;
var __propIsEnum129 = Object.prototype.propertyIsEnumerable;
var __defNormalProp127 = (obj, key2, value) => key2 in obj ? __defProp127(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues127 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp129.call(b2, prop))
      __defNormalProp127(a2, prop, b2[prop]);
  if (__getOwnPropSymbols129)
    for (var prop of __getOwnPropSymbols129(b2)) {
      if (__propIsEnum129.call(b2, prop))
        __defNormalProp127(a2, prop, b2[prop]);
    }
  return a2;
};
var getColumnFlexBasis = (colSpan, columns) => {
  if (colSpan === "content") {
    return "auto";
  }
  if (colSpan === "auto") {
    return "0px";
  }
  return colSpan ? `${100 / (columns / colSpan)}%` : void 0;
};
var getColumnMaxWidth = (colSpan, columns, grow) => {
  if (grow || colSpan === "auto" || colSpan === "content") {
    return "unset";
  }
  return getColumnFlexBasis(colSpan, columns);
};
var getColumnFlexGrow = (colSpan, grow) => {
  if (!colSpan) {
    return void 0;
  }
  return colSpan === "auto" || grow ? 1 : 0;
};
var getColumnOffset = (offset3, columns) => offset3 === 0 ? 0 : offset3 ? `${100 / (columns / offset3)}%` : void 0;
var getGutterSize = (gutter, theme) => typeof gutter !== "undefined" ? theme.fn.size({ size: gutter, sizes: theme.spacing }) / 2 : void 0;
function getBreakpointsStyles({
  sizes: sizes24,
  offsets,
  orders,
  theme,
  columns,
  gutters,
  grow
}) {
  return MANTINE_SIZES.reduce((acc, size3) => {
    acc[`@media (min-width: ${theme.breakpoints[size3]}px)`] = {
      order: orders[size3],
      flexBasis: getColumnFlexBasis(sizes24[size3], columns),
      padding: getGutterSize(gutters[size3], theme),
      flexShrink: 0,
      width: sizes24[size3] === "content" ? "auto" : void 0,
      maxWidth: getColumnMaxWidth(sizes24[size3], columns, grow),
      marginLeft: getColumnOffset(offsets[size3], columns),
      flexGrow: getColumnFlexGrow(sizes24[size3], grow)
    };
    return acc;
  }, {});
}
var useStyles52 = createStyles((theme, {
  gutter,
  gutterXs,
  gutterSm,
  gutterMd,
  gutterLg,
  gutterXl,
  grow,
  offset: offset3,
  offsetXs,
  offsetSm,
  offsetMd,
  offsetLg,
  offsetXl,
  columns,
  span,
  xs,
  sm,
  md,
  lg,
  xl,
  order: order3,
  orderXs,
  orderSm,
  orderMd,
  orderLg,
  orderXl
}) => ({
  col: __spreadValues127({
    boxSizing: "border-box",
    flexGrow: getColumnFlexGrow(span, grow),
    order: order3,
    padding: getGutterSize(gutter, theme),
    marginLeft: getColumnOffset(offset3, columns),
    flexBasis: getColumnFlexBasis(span, columns),
    flexShrink: 0,
    width: span === "content" ? "auto" : void 0,
    maxWidth: getColumnMaxWidth(span, columns, grow)
  }, getBreakpointsStyles({
    sizes: { xs, sm, md, lg, xl },
    offsets: { xs: offsetXs, sm: offsetSm, md: offsetMd, lg: offsetLg, xl: offsetXl },
    orders: { xs: orderXs, sm: orderSm, md: orderMd, lg: orderLg, xl: orderXl },
    gutters: { xs: gutterXs, sm: gutterSm, md: gutterMd, lg: gutterLg, xl: gutterXl },
    theme,
    columns,
    grow
  }))
}));
var Col_styles_default = useStyles52;

// node_modules/@mantine/core/esm/Grid/Col/Col.js
var __defProp128 = Object.defineProperty;
var __getOwnPropSymbols130 = Object.getOwnPropertySymbols;
var __hasOwnProp130 = Object.prototype.hasOwnProperty;
var __propIsEnum130 = Object.prototype.propertyIsEnumerable;
var __defNormalProp128 = (obj, key2, value) => key2 in obj ? __defProp128(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues128 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp130.call(b2, prop))
      __defNormalProp128(a2, prop, b2[prop]);
  if (__getOwnPropSymbols130)
    for (var prop of __getOwnPropSymbols130(b2)) {
      if (__propIsEnum130.call(b2, prop))
        __defNormalProp128(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest82 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp130.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols130)
    for (var prop of __getOwnPropSymbols130(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum130.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps60 = {};
function isValidSpan(span) {
  if (span === "auto" || span === "content") {
    return true;
  }
  return typeof span === "number" && span > 0 && span % 1 === 0;
}
var Col = (0, import_react187.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("GridCol", defaultProps60, props), {
    children,
    span,
    offset: offset3,
    offsetXs,
    offsetSm,
    offsetMd,
    offsetLg,
    offsetXl,
    xs,
    sm,
    md,
    lg,
    xl,
    order: order3,
    orderXs,
    orderSm,
    orderMd,
    orderLg,
    orderXl,
    className,
    id: id2,
    unstyled
  } = _a, others = __objRest82(_a, [
    "children",
    "span",
    "offset",
    "offsetXs",
    "offsetSm",
    "offsetMd",
    "offsetLg",
    "offsetXl",
    "xs",
    "sm",
    "md",
    "lg",
    "xl",
    "order",
    "orderXs",
    "orderSm",
    "orderMd",
    "orderLg",
    "orderXl",
    "className",
    "id",
    "unstyled"
  ]);
  const ctx = useGridContext();
  const colSpan = span || ctx.columns;
  const { classes, cx } = Col_styles_default({
    gutter: ctx.gutter,
    gutterXs: ctx.gutterXs,
    gutterSm: ctx.gutterSm,
    gutterMd: ctx.gutterMd,
    gutterLg: ctx.gutterLg,
    gutterXl: ctx.gutterXl,
    offset: offset3,
    offsetXs,
    offsetSm,
    offsetMd,
    offsetLg,
    offsetXl,
    xs,
    sm,
    md,
    lg,
    xl,
    order: order3,
    orderXs,
    orderSm,
    orderMd,
    orderLg,
    orderXl,
    grow: ctx.grow,
    columns: ctx.columns,
    span: colSpan
  }, { unstyled, name: "Grid" });
  if (!isValidSpan(colSpan) || colSpan > ctx.columns) {
    return null;
  }
  return import_react187.default.createElement(Box, __spreadValues128({
    className: cx(classes.col, className),
    ref
  }, others), children);
});
Col.displayName = "@mantine/core/Col";

// node_modules/@mantine/core/esm/Grid/Grid.styles.js
var __defProp129 = Object.defineProperty;
var __getOwnPropSymbols131 = Object.getOwnPropertySymbols;
var __hasOwnProp131 = Object.prototype.hasOwnProperty;
var __propIsEnum131 = Object.prototype.propertyIsEnumerable;
var __defNormalProp129 = (obj, key2, value) => key2 in obj ? __defProp129(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues129 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp131.call(b2, prop))
      __defNormalProp129(a2, prop, b2[prop]);
  if (__getOwnPropSymbols131)
    for (var prop of __getOwnPropSymbols131(b2)) {
      if (__propIsEnum131.call(b2, prop))
        __defNormalProp129(a2, prop, b2[prop]);
    }
  return a2;
};
function getGutterStyles(gutters, theme) {
  return MANTINE_SIZES.reduce((acc, size3) => {
    if (typeof gutters[size3] !== "undefined") {
      acc[`@media (min-width: ${theme.breakpoints[size3]}px)`] = {
        margin: -theme.fn.size({ size: gutters[size3], sizes: theme.spacing }) / 2
      };
    }
    return acc;
  }, {});
}
var useStyles53 = createStyles((theme, { justify, align, gutter, gutterXs, gutterSm, gutterMd, gutterLg, gutterXl }) => ({
  root: __spreadValues129({
    margin: -theme.fn.size({ size: gutter, sizes: theme.spacing }) / 2,
    display: "flex",
    flexWrap: "wrap",
    justifyContent: justify,
    alignItems: align
  }, getGutterStyles({ xs: gutterXs, sm: gutterSm, md: gutterMd, lg: gutterLg, xl: gutterXl }, theme))
}));
var Grid_styles_default = useStyles53;

// node_modules/@mantine/core/esm/Grid/Grid.js
var __defProp130 = Object.defineProperty;
var __getOwnPropSymbols132 = Object.getOwnPropertySymbols;
var __hasOwnProp132 = Object.prototype.hasOwnProperty;
var __propIsEnum132 = Object.prototype.propertyIsEnumerable;
var __defNormalProp130 = (obj, key2, value) => key2 in obj ? __defProp130(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues130 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp132.call(b2, prop))
      __defNormalProp130(a2, prop, b2[prop]);
  if (__getOwnPropSymbols132)
    for (var prop of __getOwnPropSymbols132(b2)) {
      if (__propIsEnum132.call(b2, prop))
        __defNormalProp130(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest83 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp132.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols132)
    for (var prop of __getOwnPropSymbols132(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum132.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps61 = {
  gutter: "md",
  justify: "flex-start",
  align: "stretch",
  columns: 12
};
var Grid = (0, import_react188.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Grid", defaultProps61, props), {
    gutter,
    gutterXs,
    gutterSm,
    gutterMd,
    gutterLg,
    gutterXl,
    children,
    grow,
    justify,
    align,
    columns,
    className,
    id: id2,
    unstyled
  } = _a, others = __objRest83(_a, [
    "gutter",
    "gutterXs",
    "gutterSm",
    "gutterMd",
    "gutterLg",
    "gutterXl",
    "children",
    "grow",
    "justify",
    "align",
    "columns",
    "className",
    "id",
    "unstyled"
  ]);
  const { classes, cx } = Grid_styles_default({ gutter, justify, align, gutterXs, gutterSm, gutterMd, gutterLg, gutterXl }, { unstyled, name: "Grid" });
  return import_react188.default.createElement(GridProvider, {
    value: { gutter, gutterXs, gutterSm, gutterMd, gutterLg, gutterXl, grow, columns }
  }, import_react188.default.createElement(Box, __spreadValues130({
    className: cx(classes.root, className),
    ref
  }, others), children));
});
Grid.Col = Col;
Grid.displayName = "@mantine/core/Grid";

// node_modules/@mantine/core/esm/Highlight/Highlight.js
var import_react190 = __toESM(require_react());

// node_modules/@mantine/core/esm/Mark/Mark.js
var import_react189 = __toESM(require_react());

// node_modules/@mantine/core/esm/Mark/Mark.styles.js
var useStyles54 = createStyles((theme, { color: color2 }) => ({
  root: {
    backgroundColor: theme.fn.themeColor(color2, theme.colorScheme === "dark" ? 5 : 2),
    color: theme.colorScheme === "dark" ? theme.colors.dark[9] : "inherit"
  }
}));
var Mark_styles_default = useStyles54;

// node_modules/@mantine/core/esm/Mark/Mark.js
var __defProp131 = Object.defineProperty;
var __getOwnPropSymbols133 = Object.getOwnPropertySymbols;
var __hasOwnProp133 = Object.prototype.hasOwnProperty;
var __propIsEnum133 = Object.prototype.propertyIsEnumerable;
var __defNormalProp131 = (obj, key2, value) => key2 in obj ? __defProp131(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues131 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp133.call(b2, prop))
      __defNormalProp131(a2, prop, b2[prop]);
  if (__getOwnPropSymbols133)
    for (var prop of __getOwnPropSymbols133(b2)) {
      if (__propIsEnum133.call(b2, prop))
        __defNormalProp131(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest84 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp133.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols133)
    for (var prop of __getOwnPropSymbols133(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum133.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps62 = {
  color: "yellow"
};
var Mark3 = (0, import_react189.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Mark", defaultProps62, props), { color: color2, className, unstyled } = _a, others = __objRest84(_a, ["color", "className", "unstyled"]);
  const { classes, cx } = Mark_styles_default({ color: color2 }, { unstyled, name: "Mark" });
  return import_react189.default.createElement(Box, __spreadValues131({
    component: "mark",
    ref,
    className: cx(classes.root, className)
  }, others));
});
Mark3.displayName = "@mantine/core/Mark";

// node_modules/@mantine/core/esm/Highlight/highlighter/highlighter.js
function escapeRegex(value) {
  return value.replace(/[-[\]{}()*+?.,\\^$|#]/g, "\\$&");
}
function highlighter(value, _highlight) {
  if (_highlight == null) {
    return [{ chunk: value, highlighted: false }];
  }
  const highlight = Array.isArray(_highlight) ? _highlight.map(escapeRegex) : escapeRegex(_highlight);
  const shouldHighlight = Array.isArray(highlight) ? highlight.filter((part) => part.trim().length > 0).length > 0 : highlight.trim() !== "";
  if (!shouldHighlight) {
    return [{ chunk: value, highlighted: false }];
  }
  const matcher = typeof highlight === "string" ? highlight.trim() : highlight.filter((part) => part.trim().length !== 0).map((part) => part.trim()).join("|");
  const re2 = new RegExp(`(${matcher})`, "gi");
  const chunks = value.split(re2).map((part) => ({ chunk: part, highlighted: re2.test(part) })).filter(({ chunk }) => chunk);
  return chunks;
}

// node_modules/@mantine/core/esm/Highlight/Highlight.js
var __defProp132 = Object.defineProperty;
var __getOwnPropSymbols134 = Object.getOwnPropertySymbols;
var __hasOwnProp134 = Object.prototype.hasOwnProperty;
var __propIsEnum134 = Object.prototype.propertyIsEnumerable;
var __defNormalProp132 = (obj, key2, value) => key2 in obj ? __defProp132(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues132 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp134.call(b2, prop))
      __defNormalProp132(a2, prop, b2[prop]);
  if (__getOwnPropSymbols134)
    for (var prop of __getOwnPropSymbols134(b2)) {
      if (__propIsEnum134.call(b2, prop))
        __defNormalProp132(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest85 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp134.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols134)
    for (var prop of __getOwnPropSymbols134(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum134.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps63 = {
  highlightColor: "yellow"
};
var _Highlight = (0, import_react190.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Highlight", defaultProps63, props), { children, highlight, highlightColor, highlightStyles, unstyled } = _a, others = __objRest85(_a, ["children", "highlight", "highlightColor", "highlightStyles", "unstyled"]);
  const highlightChunks = highlighter(children, highlight);
  return import_react190.default.createElement(Text, __spreadValues132({
    unstyled,
    ref
  }, others), highlightChunks.map(({ chunk, highlighted }, i) => highlighted ? import_react190.default.createElement(Mark3, {
    unstyled,
    key: i,
    color: highlightColor,
    sx: highlightStyles
  }, chunk) : import_react190.default.createElement("span", {
    key: i
  }, chunk)));
});
_Highlight.displayName = "@mantine/core/Highlight";
var Highlight = createPolymorphicComponent(_Highlight);

// node_modules/@mantine/core/esm/HoverCard/HoverCard.js
var import_react194 = __toESM(require_react());

// node_modules/@mantine/core/esm/HoverCard/HoverCard.errors.js
var HOVER_CARD_ERRORS = {
  context: "HoverCard component was not found in the tree",
  children: "HoverCard.Target component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported"
};

// node_modules/@mantine/core/esm/HoverCard/HoverCard.context.js
var [HoverCardContextProvider, useHoverCardContext] = createSafeContext(HOVER_CARD_ERRORS.context);

// node_modules/@mantine/core/esm/HoverCard/HoverCardDropdown/HoverCardDropdown.js
var import_react191 = __toESM(require_react());
var __defProp133 = Object.defineProperty;
var __getOwnPropSymbols135 = Object.getOwnPropertySymbols;
var __hasOwnProp135 = Object.prototype.hasOwnProperty;
var __propIsEnum135 = Object.prototype.propertyIsEnumerable;
var __defNormalProp133 = (obj, key2, value) => key2 in obj ? __defProp133(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues133 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp135.call(b2, prop))
      __defNormalProp133(a2, prop, b2[prop]);
  if (__getOwnPropSymbols135)
    for (var prop of __getOwnPropSymbols135(b2)) {
      if (__propIsEnum135.call(b2, prop))
        __defNormalProp133(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest86 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp135.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols135)
    for (var prop of __getOwnPropSymbols135(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum135.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps64 = {};
function HoverCardDropdown(props) {
  const _a = useComponentDefaultProps("HoverCardDropdown", defaultProps64, props), { children, onMouseEnter, onMouseLeave } = _a, others = __objRest86(_a, ["children", "onMouseEnter", "onMouseLeave"]);
  const ctx = useHoverCardContext();
  const handleMouseEnter = createEventHandler(onMouseEnter, ctx.openDropdown);
  const handleMouseLeave = createEventHandler(onMouseLeave, ctx.closeDropdown);
  return import_react191.default.createElement(Popover.Dropdown, __spreadValues133({
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, others), children);
}
HoverCardDropdown.displayName = "@mantine/core/HoverCardDropdown";

// node_modules/@mantine/core/esm/HoverCard/HoverCardTarget/HoverCardTarget.js
var import_react192 = __toESM(require_react());
var __defProp134 = Object.defineProperty;
var __getOwnPropSymbols136 = Object.getOwnPropertySymbols;
var __hasOwnProp136 = Object.prototype.hasOwnProperty;
var __propIsEnum136 = Object.prototype.propertyIsEnumerable;
var __defNormalProp134 = (obj, key2, value) => key2 in obj ? __defProp134(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues134 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp136.call(b2, prop))
      __defNormalProp134(a2, prop, b2[prop]);
  if (__getOwnPropSymbols136)
    for (var prop of __getOwnPropSymbols136(b2)) {
      if (__propIsEnum136.call(b2, prop))
        __defNormalProp134(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest87 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp136.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols136)
    for (var prop of __getOwnPropSymbols136(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum136.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps65 = {
  refProp: "ref"
};
var HoverCardTarget = (0, import_react192.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("HoverCardTarget", defaultProps65, props), { children, refProp } = _a, others = __objRest87(_a, ["children", "refProp"]);
  if (!isElement3(children)) {
    throw new Error(HOVER_CARD_ERRORS.children);
  }
  const ctx = useHoverCardContext();
  const onMouseEnter = createEventHandler(children.props.onMouseEnter, ctx.openDropdown);
  const onMouseLeave = createEventHandler(children.props.onMouseLeave, ctx.closeDropdown);
  return import_react192.default.createElement(Popover.Target, __spreadValues134({
    refProp,
    ref
  }, others), (0, import_react192.cloneElement)(children, { onMouseEnter, onMouseLeave }));
});
HoverCardTarget.displayName = "@mantine/core/HoverCardTarget";

// node_modules/@mantine/core/esm/Floating/use-delayed-hover.js
var import_react193 = __toESM(require_react());
function useDelayedHover({ open, close: close2, openDelay, closeDelay }) {
  const openTimeout = (0, import_react193.useRef)(-1);
  const closeTimeout = (0, import_react193.useRef)(-1);
  const clearTimeouts = () => {
    window.clearTimeout(openTimeout.current);
    window.clearTimeout(closeTimeout.current);
  };
  const openDropdown = () => {
    clearTimeouts();
    if (openDelay === 0) {
      open();
    } else {
      openTimeout.current = window.setTimeout(open, openDelay);
    }
  };
  const closeDropdown = () => {
    clearTimeouts();
    if (closeDelay === 0) {
      close2();
    } else {
      closeTimeout.current = window.setTimeout(close2, closeDelay);
    }
  };
  (0, import_react193.useEffect)(() => clearTimeouts, []);
  return { openDropdown, closeDropdown };
}

// node_modules/@mantine/core/esm/HoverCard/HoverCard.js
var __defProp135 = Object.defineProperty;
var __getOwnPropSymbols137 = Object.getOwnPropertySymbols;
var __hasOwnProp137 = Object.prototype.hasOwnProperty;
var __propIsEnum137 = Object.prototype.propertyIsEnumerable;
var __defNormalProp135 = (obj, key2, value) => key2 in obj ? __defProp135(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues135 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp137.call(b2, prop))
      __defNormalProp135(a2, prop, b2[prop]);
  if (__getOwnPropSymbols137)
    for (var prop of __getOwnPropSymbols137(b2)) {
      if (__propIsEnum137.call(b2, prop))
        __defNormalProp135(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest88 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp137.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols137)
    for (var prop of __getOwnPropSymbols137(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum137.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps66 = {
  openDelay: 0,
  closeDelay: 150,
  initiallyOpened: false
};
function HoverCard(props) {
  const _a = useComponentDefaultProps("HoverCard", defaultProps66, props), { children, onOpen, onClose, openDelay, closeDelay, initiallyOpened } = _a, others = __objRest88(_a, ["children", "onOpen", "onClose", "openDelay", "closeDelay", "initiallyOpened"]);
  const [opened, { open, close: close2 }] = useDisclosure(initiallyOpened, { onClose, onOpen });
  const { openDropdown, closeDropdown } = useDelayedHover({ open, close: close2, openDelay, closeDelay });
  return import_react194.default.createElement(HoverCardContextProvider, {
    value: { openDropdown, closeDropdown }
  }, import_react194.default.createElement(Popover, __spreadValues135({
    opened,
    __staticSelector: "HoverCard"
  }, others), children));
}
HoverCard.displayName = "@mantine/core/HoverCard";
HoverCard.Target = HoverCardTarget;
HoverCard.Dropdown = HoverCardDropdown;

// node_modules/@mantine/core/esm/Image/Image.js
var import_react196 = __toESM(require_react());

// node_modules/@mantine/core/esm/Image/ImageIcon.js
var import_react195 = __toESM(require_react());
var __defProp136 = Object.defineProperty;
var __getOwnPropSymbols138 = Object.getOwnPropertySymbols;
var __hasOwnProp138 = Object.prototype.hasOwnProperty;
var __propIsEnum138 = Object.prototype.propertyIsEnumerable;
var __defNormalProp136 = (obj, key2, value) => key2 in obj ? __defProp136(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues136 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp138.call(b2, prop))
      __defNormalProp136(a2, prop, b2[prop]);
  if (__getOwnPropSymbols138)
    for (var prop of __getOwnPropSymbols138(b2)) {
      if (__propIsEnum138.call(b2, prop))
        __defNormalProp136(a2, prop, b2[prop]);
    }
  return a2;
};
function ImageIcon(props) {
  return import_react195.default.createElement("svg", __spreadValues136({
    width: "15",
    height: "15",
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react195.default.createElement("path", {
    d: "M2.5 1H12.5C13.3284 1 14 1.67157 14 2.5V12.5C14 13.3284 13.3284 14 12.5 14H2.5C1.67157 14 1 13.3284 1 12.5V2.5C1 1.67157 1.67157 1 2.5 1ZM2.5 2C2.22386 2 2 2.22386 2 2.5V8.3636L3.6818 6.6818C3.76809 6.59551 3.88572 6.54797 4.00774 6.55007C4.12975 6.55216 4.24568 6.60372 4.32895 6.69293L7.87355 10.4901L10.6818 7.6818C10.8575 7.50607 11.1425 7.50607 11.3182 7.6818L13 9.3636V2.5C13 2.22386 12.7761 2 12.5 2H2.5ZM2 12.5V9.6364L3.98887 7.64753L7.5311 11.4421L8.94113 13H2.5C2.22386 13 2 12.7761 2 12.5ZM12.5 13H10.155L8.48336 11.153L11 8.6364L13 10.6364V12.5C13 12.7761 12.7761 13 12.5 13ZM6.64922 5.5C6.64922 5.03013 7.03013 4.64922 7.5 4.64922C7.96987 4.64922 8.35078 5.03013 8.35078 5.5C8.35078 5.96987 7.96987 6.35078 7.5 6.35078C7.03013 6.35078 6.64922 5.96987 6.64922 5.5ZM7.5 3.74922C6.53307 3.74922 5.74922 4.53307 5.74922 5.5C5.74922 6.46693 6.53307 7.25078 7.5 7.25078C8.46693 7.25078 9.25078 6.46693 9.25078 5.5C9.25078 4.53307 8.46693 3.74922 7.5 3.74922Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
}

// node_modules/@mantine/core/esm/Image/Image.styles.js
var __defProp137 = Object.defineProperty;
var __defProps57 = Object.defineProperties;
var __getOwnPropDescs57 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols139 = Object.getOwnPropertySymbols;
var __hasOwnProp139 = Object.prototype.hasOwnProperty;
var __propIsEnum139 = Object.prototype.propertyIsEnumerable;
var __defNormalProp137 = (obj, key2, value) => key2 in obj ? __defProp137(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues137 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp139.call(b2, prop))
      __defNormalProp137(a2, prop, b2[prop]);
  if (__getOwnPropSymbols139)
    for (var prop of __getOwnPropSymbols139(b2)) {
      if (__propIsEnum139.call(b2, prop))
        __defNormalProp137(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps57 = (a2, b2) => __defProps57(a2, __getOwnPropDescs57(b2));
var useStyles55 = createStyles((theme, { radius: radius2 }) => ({
  root: {},
  imageWrapper: {
    position: "relative"
  },
  figure: {
    margin: 0
  },
  image: __spreadProps57(__spreadValues137({}, theme.fn.fontStyles()), {
    display: "block",
    width: "100%",
    height: "100%",
    border: 0,
    borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius })
  }),
  caption: {
    color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[7],
    marginTop: theme.spacing.xs
  },
  placeholder: __spreadProps57(__spreadValues137({}, theme.fn.cover()), {
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6],
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : theme.colors.gray[0],
    borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius })
  })
}));
var Image_styles_default = useStyles55;

// node_modules/@mantine/core/esm/Image/Image.js
var __defProp138 = Object.defineProperty;
var __getOwnPropSymbols140 = Object.getOwnPropertySymbols;
var __hasOwnProp140 = Object.prototype.hasOwnProperty;
var __propIsEnum140 = Object.prototype.propertyIsEnumerable;
var __defNormalProp138 = (obj, key2, value) => key2 in obj ? __defProp138(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues138 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp140.call(b2, prop))
      __defNormalProp138(a2, prop, b2[prop]);
  if (__getOwnPropSymbols140)
    for (var prop of __getOwnPropSymbols140(b2)) {
      if (__propIsEnum140.call(b2, prop))
        __defNormalProp138(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest89 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp140.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols140)
    for (var prop of __getOwnPropSymbols140(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum140.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps67 = {
  fit: "cover",
  width: "100%",
  height: "auto",
  radius: 0
};
var Image = (0, import_react196.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Image", defaultProps67, props), {
    className,
    alt,
    src,
    fit,
    width,
    height,
    radius: radius2,
    imageProps,
    withPlaceholder,
    placeholder,
    imageRef,
    classNames,
    styles: styles2,
    caption,
    unstyled,
    style: style3
  } = _a, others = __objRest89(_a, [
    "className",
    "alt",
    "src",
    "fit",
    "width",
    "height",
    "radius",
    "imageProps",
    "withPlaceholder",
    "placeholder",
    "imageRef",
    "classNames",
    "styles",
    "caption",
    "unstyled",
    "style"
  ]);
  const { classes, cx } = Image_styles_default({ radius: radius2 }, { classNames, styles: styles2, unstyled, name: "Image" });
  const [error, setError] = (0, import_react196.useState)(!src);
  const isPlaceholder = withPlaceholder && error;
  useDidUpdate(() => {
    setError(!src);
  }, [src]);
  return import_react196.default.createElement(Box, __spreadValues138({
    className: cx(classes.root, className),
    ref,
    style: __spreadValues138({ width }, style3)
  }, others), import_react196.default.createElement("figure", {
    className: classes.figure
  }, import_react196.default.createElement("div", {
    className: classes.imageWrapper
  }, import_react196.default.createElement("img", __spreadValues138({
    className: classes.image,
    src,
    alt,
    style: { objectFit: fit, width, height },
    ref: imageRef,
    onError: (event) => {
      setError(true);
      typeof (imageProps == null ? void 0 : imageProps.onError) === "function" && imageProps.onError(event);
    }
  }, imageProps)), isPlaceholder && import_react196.default.createElement("div", {
    className: classes.placeholder,
    title: alt
  }, placeholder || import_react196.default.createElement("div", null, import_react196.default.createElement(ImageIcon, {
    style: { width: 40, height: 40 }
  })))), !!caption && import_react196.default.createElement(Text, {
    component: "figcaption",
    size: "sm",
    align: "center",
    className: classes.caption
  }, caption)));
});
Image.displayName = "@mantine/core/Image";

// node_modules/@mantine/core/esm/Indicator/Indicator.js
var import_react199 = __toESM(require_react());

// node_modules/@mantine/core/esm/Indicator/Indicator.styles.js
var __defProp139 = Object.defineProperty;
var __defProps58 = Object.defineProperties;
var __getOwnPropDescs58 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols141 = Object.getOwnPropertySymbols;
var __hasOwnProp141 = Object.prototype.hasOwnProperty;
var __propIsEnum141 = Object.prototype.propertyIsEnumerable;
var __defNormalProp139 = (obj, key2, value) => key2 in obj ? __defProp139(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues139 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp141.call(b2, prop))
      __defNormalProp139(a2, prop, b2[prop]);
  if (__getOwnPropSymbols141)
    for (var prop of __getOwnPropSymbols141(b2)) {
      if (__propIsEnum141.call(b2, prop))
        __defNormalProp139(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps58 = (a2, b2) => __defProps58(a2, __getOwnPropDescs58(b2));
var processingAnimation = (color2) => keyframes({
  from: {
    boxShadow: `0 0 0.5px 0 ${color2}`,
    opacity: 0.6
  },
  to: {
    boxShadow: `0 0 0.5px 4.4px ${color2}`,
    opacity: 0
  }
});
function getPositionStyles3(_position, offset3 = 0) {
  const styles2 = {};
  const [position5, placement] = _position.split("-");
  let translateX = "";
  let translateY = "";
  if (position5 === "top") {
    styles2.top = offset3;
    translateY = "-50%";
  }
  if (position5 === "middle") {
    styles2.top = "50%";
    translateY = "-50%";
  }
  if (position5 === "bottom") {
    styles2.bottom = offset3;
    translateY = "50%";
  }
  if (placement === "start") {
    styles2.left = offset3;
    translateX = "-50%";
  }
  if (placement === "center") {
    styles2.left = "50%";
    translateX = "-50%";
  }
  if (placement === "end") {
    styles2.right = offset3;
    translateX = "50%";
  }
  styles2.transform = `translate(${translateX}, ${translateY})`;
  return styles2;
}
var useStyles56 = createStyles((theme, {
  radius: radius2,
  size: size3,
  color: color2,
  position: position5,
  offset: offset3,
  inline: inline2,
  withBorder,
  withLabel,
  zIndex
}) => {
  const { background } = theme.fn.variant({
    variant: "filled",
    primaryFallback: false,
    color: color2 || theme.primaryColor
  });
  return {
    root: {
      position: "relative",
      display: inline2 ? "inline-block" : "block"
    },
    indicator: __spreadProps58(__spreadValues139({}, getPositionStyles3(position5, offset3)), {
      zIndex,
      position: "absolute",
      [withLabel ? "minWidth" : "width"]: size3,
      height: size3,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      fontSize: theme.fontSizes.xs,
      paddingLeft: withLabel ? `calc(${theme.spacing.xs}px / 2)` : 0,
      paddingRight: withLabel ? `calc(${theme.spacing.xs}px / 2)` : 0,
      borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
      backgroundColor: theme.fn.variant({
        variant: "filled",
        primaryFallback: false,
        color: color2 || theme.primaryColor
      }).background,
      border: withBorder ? `2px solid ${theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white}` : void 0,
      color: theme.white,
      whiteSpace: "nowrap"
    }),
    processing: {
      animation: `${processingAnimation(background)} 1000ms linear infinite`
    },
    common: __spreadProps58(__spreadValues139({}, getPositionStyles3(position5, offset3)), {
      position: "absolute",
      [withLabel ? "minWidth" : "width"]: size3,
      height: size3,
      borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius })
    })
  };
});
var Indicator_styles_default = useStyles56;

// node_modules/@mantine/core/esm/Indicator/Machine/Machine.js
var import_react198 = __toESM(require_react());

// node_modules/@mantine/core/esm/Indicator/Machine/MachineNumber.js
var import_react197 = __toESM(require_react());

// node_modules/@mantine/core/esm/Indicator/Machine/MachineNumber.styles.js
var currentScrollDownKeyframes = keyframes({
  from: {
    transform: "translateY(-60%)",
    opacity: 0
  },
  to: {
    transform: "translateY(0%)",
    opacity: 1
  }
});
var currentScrollUpKeyframes = keyframes({
  from: {
    transform: "translateY(60%)",
    opacity: 0
  },
  to: {
    transform: "translateY(0%)",
    opacity: 1
  }
});
var oldNumberScrollUpKeyframes = keyframes({
  from: {
    transform: "translateY(0%)",
    opacity: 1
  },
  to: {
    transform: "translateY(-60%)",
    opacity: 0
  }
});
var oldNumberScrollDownKeyframes = keyframes({
  from: {
    transform: "translateY(0%)",
    opacity: 1
  },
  to: {
    transform: "translateY(60%)",
    opacity: 0
  }
});
var useStyles57 = createStyles(() => ({
  baseNumber: {
    height: 18,
    width: "0.6em",
    maxWidth: "0.6em",
    position: "relative",
    display: "inline-block"
  },
  oldNumberTop: {
    transform: "translateY(-100%);"
  },
  oldNumberBottom: {
    transform: "translateY(100%);"
  },
  oldNumber: {
    display: "inline-block",
    opacity: 0,
    position: "absolute",
    left: 0,
    right: 0
  },
  currentNumberTop: {
    transform: "translateY(0%);"
  },
  currentNumber: {
    display: "inline-block",
    opacity: 1,
    position: "absolute",
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  },
  currentNumberScrollDown: {
    animation: `${currentScrollDownKeyframes} .2s cubic-bezier(0,0,.2, 1)`,
    animationIterationCount: 1
  },
  currentNumberScrollUp: {
    animation: `${currentScrollUpKeyframes} .2s cubic-bezier(0,0,.2, 1)`,
    animationIterationCount: 1
  },
  oldNumberScrollUp: {
    animation: `${oldNumberScrollUpKeyframes} .2s cubic-bezier(0,0,.2, 1)`,
    animationIterationCount: 1
  },
  oldNumberScrollDown: {
    animation: `${oldNumberScrollDownKeyframes} .2s cubic-bezier(0,0,.2, 1)`,
    animationIterationCount: 1
  }
}));
var MachineNumber_styles_default = useStyles57;

// node_modules/@mantine/core/esm/Indicator/Machine/MachineNumber.js
var MachineNumber = (0, import_react197.forwardRef)((props, ref) => {
  const [oldNumber, setOldNumber] = (0, import_react197.useState)(props.value);
  const [newNumber, setNewNumber] = (0, import_react197.useState)(props.value);
  const [scrollAnimationDirection, setScrollAnimationDirection] = (0, import_react197.useState)("up");
  const [isActive2, setIsActive] = (0, import_react197.useState)(false);
  const prevValueRef = usePrevious(props.value);
  const scrollByDir = (dir) => {
    setIsActive(true);
    setScrollAnimationDirection(dir);
    setTimeout(() => {
      setIsActive(false);
    }, 180);
  };
  const scroll = () => {
    const { newOriginalNumber, oldOriginalNumber } = props;
    if (newOriginalNumber == null || oldOriginalNumber == null) {
      return;
    }
    if (newOriginalNumber > oldOriginalNumber) {
      scrollByDir("up");
    } else if (newOriginalNumber < oldOriginalNumber) {
      scrollByDir("down");
    }
  };
  (0, import_react197.useEffect)(() => {
    setOldNumber(prevValueRef);
    setNewNumber(props.value);
    scroll();
  }, [props.value, prevValueRef]);
  const { classes, cx } = MachineNumber_styles_default(null, { name: "MachineNumber" });
  const newNumberScrollAnimationClass = (0, import_react197.useMemo)(() => isActive2 ? scrollAnimationDirection === "up" ? classes.currentNumberScrollUp : classes.currentNumberScrollDown : null, [isActive2, scrollAnimationDirection]);
  const oldNumberScrollAnimationClass = (0, import_react197.useMemo)(() => isActive2 ? scrollAnimationDirection === "up" ? classes.oldNumberScrollUp : classes.oldNumberScrollDown : null, [isActive2, scrollAnimationDirection]);
  return import_react197.default.createElement("span", {
    ref,
    className: classes.baseNumber
  }, oldNumber && import_react197.default.createElement("span", {
    className: cx(classes.oldNumber, classes.currentNumberTop, oldNumberScrollAnimationClass)
  }, oldNumber) || null, import_react197.default.createElement("span", null, import_react197.default.createElement("span", {
    className: cx(classes.currentNumber, newNumberScrollAnimationClass)
  }, newNumber)), oldNumber && import_react197.default.createElement("span", {
    className: cx(classes.oldNumber, classes.oldNumberBottom, oldNumberScrollAnimationClass)
  }, oldNumber) || null);
});

// node_modules/@mantine/core/esm/Indicator/Machine/Machine.styles.js
var useStyles58 = createStyles(() => ({
  base: {
    display: "flex",
    alignItems: "center",
    overflow: "hidden"
  }
}));
var Machine_styles_default = useStyles58;

// node_modules/@mantine/core/esm/Indicator/Machine/Machine.js
var Machine = (0, import_react198.forwardRef)(({ value = 0, max: max5 }, ref) => {
  const [oldValue, setOldValue] = (0, import_react198.useState)();
  const [newValue, setNewValue] = (0, import_react198.useState)();
  const prevValueRef = usePrevious(value);
  (0, import_react198.useEffect)(() => {
    if (typeof value === "string") {
      setOldValue(void 0);
      setNewValue(void 0);
    } else if (typeof prevValueRef === "string") {
      setOldValue(void 0);
      setNewValue(value);
    } else {
      setOldValue(prevValueRef);
      setNewValue(value);
    }
  }, [value, prevValueRef]);
  const numbers = (0, import_react198.useMemo)(() => {
    if (typeof value === "string") {
      return [];
    }
    if (value < 1) {
      return [0];
    }
    const result = [];
    let currentValue = value;
    if (typeof max5 === "number") {
      currentValue = Math.min(max5, currentValue);
    }
    while (currentValue >= 1) {
      result.push(currentValue % 10);
      currentValue /= 10;
      currentValue = Math.floor(currentValue);
    }
    result.reverse();
    return result;
  }, [value, max5]);
  const { classes } = Machine_styles_default(null, { name: "machine" });
  return typeof value === "string" ? import_react198.default.createElement("span", {
    ref
  }, value) : import_react198.default.createElement("span", {
    ref,
    className: classes.base
  }, numbers.map((number2, i) => import_react198.default.createElement(MachineNumber, {
    key: numbers.length - i - 1,
    value: number2,
    oldOriginalNumber: oldValue,
    newOriginalNumber: newValue
  })), typeof max5 === "number" && value > max5 && import_react198.default.createElement("span", null, "+"));
});

// node_modules/@mantine/core/esm/Indicator/Indicator.js
var __defProp140 = Object.defineProperty;
var __getOwnPropSymbols142 = Object.getOwnPropertySymbols;
var __hasOwnProp142 = Object.prototype.hasOwnProperty;
var __propIsEnum142 = Object.prototype.propertyIsEnumerable;
var __defNormalProp140 = (obj, key2, value) => key2 in obj ? __defProp140(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues140 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp142.call(b2, prop))
      __defNormalProp140(a2, prop, b2[prop]);
  if (__getOwnPropSymbols142)
    for (var prop of __getOwnPropSymbols142(b2)) {
      if (__propIsEnum142.call(b2, prop))
        __defNormalProp140(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest90 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp142.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols142)
    for (var prop of __getOwnPropSymbols142(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum142.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps68 = {
  position: "top-end",
  offset: 0,
  inline: false,
  withBorder: false,
  disabled: false,
  showZero: true,
  processing: false,
  dot: true,
  size: 10,
  overflowCount: 99,
  radius: 1e3,
  zIndex: getDefaultZIndex("app")
};
var Indicator = (0, import_react199.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Indicator", defaultProps68, props), {
    children,
    position: position5,
    offset: offset3,
    size: size3,
    radius: radius2,
    inline: inline2,
    withBorder,
    className,
    color: color2,
    dot,
    styles: styles2,
    label,
    overflowCount,
    showZero,
    classNames,
    disabled,
    zIndex,
    unstyled,
    processing
  } = _a, others = __objRest90(_a, [
    "children",
    "position",
    "offset",
    "size",
    "radius",
    "inline",
    "withBorder",
    "className",
    "color",
    "dot",
    "styles",
    "label",
    "overflowCount",
    "showZero",
    "classNames",
    "disabled",
    "zIndex",
    "unstyled",
    "processing"
  ]);
  const { classes, cx } = Indicator_styles_default({ position: position5, offset: offset3, size: size3, radius: radius2, inline: inline2, color: color2, withBorder, zIndex, withLabel: !!label }, { name: "Indicator", classNames, styles: styles2, unstyled });
  const renderLabel = (0, import_react199.useMemo)(() => {
    if (typeof label === "number") {
      return import_react199.default.createElement(Machine, {
        value: label,
        max: overflowCount
      });
    }
    return label;
  }, [label, overflowCount]);
  const isShowIndicator = (0, import_react199.useMemo)(() => !disabled && (dot || label != null && !(label <= 0 && !showZero)), [disabled, label, showZero]);
  return import_react199.default.createElement(Box, __spreadValues140({
    ref,
    className: cx(classes.root, className)
  }, others), isShowIndicator && import_react199.default.createElement(import_react199.default.Fragment, null, import_react199.default.createElement("div", {
    className: cx(classes.indicator, classes.common)
  }, renderLabel), processing && import_react199.default.createElement("div", {
    className: cx(classes.processing, classes.common)
  })), children);
});
Indicator.displayName = "@mantine/core/Indicator";

// node_modules/@mantine/core/esm/InputBase/InputBase.js
var import_react200 = __toESM(require_react());
var __defProp141 = Object.defineProperty;
var __defProps59 = Object.defineProperties;
var __getOwnPropDescs59 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols143 = Object.getOwnPropertySymbols;
var __hasOwnProp143 = Object.prototype.hasOwnProperty;
var __propIsEnum143 = Object.prototype.propertyIsEnumerable;
var __defNormalProp141 = (obj, key2, value) => key2 in obj ? __defProp141(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues141 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp143.call(b2, prop))
      __defNormalProp141(a2, prop, b2[prop]);
  if (__getOwnPropSymbols143)
    for (var prop of __getOwnPropSymbols143(b2)) {
      if (__propIsEnum143.call(b2, prop))
        __defNormalProp141(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps59 = (a2, b2) => __defProps59(a2, __getOwnPropDescs59(b2));
var __objRest91 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp143.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols143)
    for (var prop of __getOwnPropSymbols143(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum143.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps69 = {
  size: "sm",
  __staticSelector: "InputBase"
};
var _InputBase = (0, import_react200.forwardRef)((props, ref) => {
  const _a = useInputProps("InputBase", defaultProps69, props), { inputProps, wrapperProps } = _a, others = __objRest91(_a, ["inputProps", "wrapperProps"]);
  return import_react200.default.createElement(Input.Wrapper, __spreadValues141({}, wrapperProps), import_react200.default.createElement(Input, __spreadProps59(__spreadValues141(__spreadValues141({}, inputProps), others), {
    ref
  })));
});
_InputBase.displayName = "@mantine/core/InputBase";
var InputBase = createPolymorphicComponent(_InputBase);

// node_modules/@mantine/core/esm/JsonInput/validate-json/validate-json.js
function validateJson(value) {
  if (typeof value === "string" && value.trim().length === 0) {
    return true;
  }
  try {
    JSON.parse(value);
    return true;
  } catch (e) {
    return false;
  }
}

// node_modules/@mantine/core/esm/JsonInput/JsonInput.js
var import_react205 = __toESM(require_react());

// node_modules/@mantine/core/esm/JsonInput/JsonInput.styles.js
var useStyles59 = createStyles((theme, { size: size3 }) => ({
  input: {
    fontFamily: theme.fontFamilyMonospace,
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }) - 2
  }
}));
var JsonInput_styles_default = useStyles59;

// node_modules/@mantine/core/esm/Textarea/Textarea.js
var import_react204 = __toESM(require_react());

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key2, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key2 = sourceKeys[i];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source2[key2];
  }
  return target;
}

// node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.esm.js
var import_react203 = __toESM(require_react());

// node_modules/use-latest/dist/use-latest.esm.js
var React122 = __toESM(require_react());

// node_modules/use-isomorphic-layout-effect/dist/use-isomorphic-layout-effect.browser.esm.js
var import_react201 = __toESM(require_react());
var index3 = import_react201.useLayoutEffect;
var use_isomorphic_layout_effect_browser_esm_default = index3;

// node_modules/use-latest/dist/use-latest.esm.js
var useLatest = function useLatest2(value) {
  var ref = React122.useRef(value);
  use_isomorphic_layout_effect_browser_esm_default(function() {
    ref.current = value;
  });
  return ref;
};

// node_modules/use-composed-ref/dist/use-composed-ref.esm.js
var import_react202 = __toESM(require_react());
var updateRef = function updateRef2(ref, value) {
  if (typeof ref === "function") {
    ref(value);
    return;
  }
  ref.current = value;
};
var useComposedRef = function useComposedRef2(libRef, userRef) {
  var prevUserRef = (0, import_react202.useRef)();
  return (0, import_react202.useCallback)(function(instance) {
    libRef.current = instance;
    if (prevUserRef.current) {
      updateRef(prevUserRef.current, null);
    }
    prevUserRef.current = userRef;
    if (!userRef) {
      return;
    }
    updateRef(userRef, instance);
  }, [userRef]);
};
var use_composed_ref_esm_default = useComposedRef;

// node_modules/react-textarea-autosize/dist/react-textarea-autosize.browser.esm.js
var HIDDEN_TEXTAREA_STYLE = {
  "min-height": "0",
  "max-height": "none",
  height: "0",
  visibility: "hidden",
  overflow: "hidden",
  position: "absolute",
  "z-index": "-1000",
  top: "0",
  right: "0"
};
var forceHiddenStyles = function forceHiddenStyles2(node4) {
  Object.keys(HIDDEN_TEXTAREA_STYLE).forEach(function(key2) {
    node4.style.setProperty(key2, HIDDEN_TEXTAREA_STYLE[key2], "important");
  });
};
var hiddenTextarea = null;
var getHeight = function getHeight2(node4, sizingData) {
  var height = node4.scrollHeight;
  if (sizingData.sizingStyle.boxSizing === "border-box") {
    return height + sizingData.borderSize;
  }
  return height - sizingData.paddingSize;
};
function calculateNodeHeight(sizingData, value, minRows, maxRows) {
  if (minRows === void 0) {
    minRows = 1;
  }
  if (maxRows === void 0) {
    maxRows = Infinity;
  }
  if (!hiddenTextarea) {
    hiddenTextarea = document.createElement("textarea");
    hiddenTextarea.setAttribute("tabindex", "-1");
    hiddenTextarea.setAttribute("aria-hidden", "true");
    forceHiddenStyles(hiddenTextarea);
  }
  if (hiddenTextarea.parentNode === null) {
    document.body.appendChild(hiddenTextarea);
  }
  var paddingSize = sizingData.paddingSize, borderSize = sizingData.borderSize, sizingStyle = sizingData.sizingStyle;
  var boxSizing = sizingStyle.boxSizing;
  Object.keys(sizingStyle).forEach(function(_key) {
    var key2 = _key;
    hiddenTextarea.style[key2] = sizingStyle[key2];
  });
  forceHiddenStyles(hiddenTextarea);
  hiddenTextarea.value = value;
  var height = getHeight(hiddenTextarea, sizingData);
  hiddenTextarea.value = "x";
  var rowHeight = hiddenTextarea.scrollHeight - paddingSize;
  var minHeight = rowHeight * minRows;
  if (boxSizing === "border-box") {
    minHeight = minHeight + paddingSize + borderSize;
  }
  height = Math.max(minHeight, height);
  var maxHeight = rowHeight * maxRows;
  if (boxSizing === "border-box") {
    maxHeight = maxHeight + paddingSize + borderSize;
  }
  height = Math.min(maxHeight, height);
  return [height, rowHeight];
}
var noop2 = function noop3() {
};
var pick = function pick2(props, obj) {
  return props.reduce(function(acc, prop) {
    acc[prop] = obj[prop];
    return acc;
  }, {});
};
var SIZING_STYLE = [
  "borderBottomWidth",
  "borderLeftWidth",
  "borderRightWidth",
  "borderTopWidth",
  "boxSizing",
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "letterSpacing",
  "lineHeight",
  "paddingBottom",
  "paddingLeft",
  "paddingRight",
  "paddingTop",
  // non-standard
  "tabSize",
  "textIndent",
  // non-standard
  "textRendering",
  "textTransform",
  "width",
  "wordBreak"
];
var isIE = !!document.documentElement.currentStyle;
var getSizingData = function getSizingData2(node4) {
  var style3 = window.getComputedStyle(node4);
  if (style3 === null) {
    return null;
  }
  var sizingStyle = pick(SIZING_STYLE, style3);
  var boxSizing = sizingStyle.boxSizing;
  if (boxSizing === "") {
    return null;
  }
  if (isIE && boxSizing === "border-box") {
    sizingStyle.width = parseFloat(sizingStyle.width) + parseFloat(sizingStyle.borderRightWidth) + parseFloat(sizingStyle.borderLeftWidth) + parseFloat(sizingStyle.paddingRight) + parseFloat(sizingStyle.paddingLeft) + "px";
  }
  var paddingSize = parseFloat(sizingStyle.paddingBottom) + parseFloat(sizingStyle.paddingTop);
  var borderSize = parseFloat(sizingStyle.borderBottomWidth) + parseFloat(sizingStyle.borderTopWidth);
  return {
    sizingStyle,
    paddingSize,
    borderSize
  };
};
var useWindowResizeListener = function useWindowResizeListener2(listener) {
  var latestListener = useLatest(listener);
  (0, import_react203.useLayoutEffect)(function() {
    var handler = function handler2(event) {
      latestListener.current(event);
    };
    window.addEventListener("resize", handler);
    return function() {
      window.removeEventListener("resize", handler);
    };
  }, []);
};
var TextareaAutosize = function TextareaAutosize2(_ref, userRef) {
  var cacheMeasurements = _ref.cacheMeasurements, maxRows = _ref.maxRows, minRows = _ref.minRows, _ref$onChange = _ref.onChange, onChange = _ref$onChange === void 0 ? noop2 : _ref$onChange, _ref$onHeightChange = _ref.onHeightChange, onHeightChange = _ref$onHeightChange === void 0 ? noop2 : _ref$onHeightChange, props = _objectWithoutPropertiesLoose(_ref, ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"]);
  if (props.style) {
    if ("maxHeight" in props.style) {
      throw new Error("Using `style.maxHeight` for <TextareaAutosize/> is not supported. Please use `maxRows`.");
    }
    if ("minHeight" in props.style) {
      throw new Error("Using `style.minHeight` for <TextareaAutosize/> is not supported. Please use `minRows`.");
    }
  }
  var isControlled = props.value !== void 0;
  var libRef = (0, import_react203.useRef)(null);
  var ref = use_composed_ref_esm_default(libRef, userRef);
  var heightRef = (0, import_react203.useRef)(0);
  var measurementsCacheRef = (0, import_react203.useRef)();
  var resizeTextarea = function resizeTextarea2() {
    var node4 = libRef.current;
    var nodeSizingData = cacheMeasurements && measurementsCacheRef.current ? measurementsCacheRef.current : getSizingData(node4);
    if (!nodeSizingData) {
      return;
    }
    measurementsCacheRef.current = nodeSizingData;
    var _calculateNodeHeight = calculateNodeHeight(nodeSizingData, node4.value || node4.placeholder || "x", minRows, maxRows), height = _calculateNodeHeight[0], rowHeight = _calculateNodeHeight[1];
    if (heightRef.current !== height) {
      heightRef.current = height;
      node4.style.setProperty("height", height + "px", "important");
      onHeightChange(height, {
        rowHeight
      });
    }
  };
  var handleChange = function handleChange2(event) {
    if (!isControlled) {
      resizeTextarea();
    }
    onChange(event);
  };
  {
    (0, import_react203.useLayoutEffect)(resizeTextarea);
    useWindowResizeListener(resizeTextarea);
  }
  return (0, import_react203.createElement)("textarea", _extends({}, props, {
    onChange: handleChange,
    ref
  }));
};
var index4 = (0, import_react203.forwardRef)(TextareaAutosize);
var react_textarea_autosize_browser_esm_default = index4;

// node_modules/@mantine/core/esm/Textarea/Textarea.styles.js
var useStyles60 = createStyles((theme) => ({
  input: {
    paddingTop: theme.spacing.xs,
    paddingBottom: theme.spacing.xs
  }
}));
var Textarea_styles_default = useStyles60;

// node_modules/@mantine/core/esm/Textarea/Textarea.js
var __defProp142 = Object.defineProperty;
var __defProps60 = Object.defineProperties;
var __getOwnPropDescs60 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols144 = Object.getOwnPropertySymbols;
var __hasOwnProp144 = Object.prototype.hasOwnProperty;
var __propIsEnum144 = Object.prototype.propertyIsEnumerable;
var __defNormalProp142 = (obj, key2, value) => key2 in obj ? __defProp142(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues142 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp144.call(b2, prop))
      __defNormalProp142(a2, prop, b2[prop]);
  if (__getOwnPropSymbols144)
    for (var prop of __getOwnPropSymbols144(b2)) {
      if (__propIsEnum144.call(b2, prop))
        __defNormalProp142(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps60 = (a2, b2) => __defProps60(a2, __getOwnPropDescs60(b2));
var __objRest92 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp144.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols144)
    for (var prop of __getOwnPropSymbols144(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum144.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps70 = {
  autosize: false,
  size: "sm",
  __staticSelector: "Textarea"
};
var Textarea = (0, import_react204.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Textarea", defaultProps70, props), {
    autosize,
    maxRows,
    minRows,
    label,
    error,
    description,
    id: id2,
    className,
    required,
    style: style3,
    wrapperProps,
    classNames,
    styles: styles2,
    size: size3,
    __staticSelector,
    sx,
    errorProps,
    descriptionProps,
    labelProps,
    inputWrapperOrder,
    inputContainer,
    unstyled,
    withAsterisk
  } = _a, others = __objRest92(_a, [
    "autosize",
    "maxRows",
    "minRows",
    "label",
    "error",
    "description",
    "id",
    "className",
    "required",
    "style",
    "wrapperProps",
    "classNames",
    "styles",
    "size",
    "__staticSelector",
    "sx",
    "errorProps",
    "descriptionProps",
    "labelProps",
    "inputWrapperOrder",
    "inputContainer",
    "unstyled",
    "withAsterisk"
  ]);
  const uuid = useId(id2);
  const { classes, cx } = Textarea_styles_default();
  const { systemStyles, rest } = extractSystemStyles(others);
  const sharedProps = __spreadValues142({
    required,
    ref,
    invalid: !!error,
    id: uuid,
    classNames: __spreadProps60(__spreadValues142({}, classNames), { input: cx(classes.input, classNames == null ? void 0 : classNames.input) }),
    styles: styles2,
    __staticSelector,
    size: size3,
    multiline: true,
    unstyled
  }, rest);
  return import_react204.default.createElement(Input.Wrapper, __spreadValues142(__spreadValues142({
    label,
    error,
    id: uuid,
    description,
    required,
    style: style3,
    className,
    classNames,
    styles: styles2,
    size: size3,
    __staticSelector,
    sx,
    errorProps,
    labelProps,
    descriptionProps,
    inputContainer,
    inputWrapperOrder,
    unstyled,
    withAsterisk
  }, systemStyles), wrapperProps), autosize ? import_react204.default.createElement(Input, __spreadProps60(__spreadValues142({}, sharedProps), {
    component: react_textarea_autosize_browser_esm_default,
    maxRows,
    minRows
  })) : import_react204.default.createElement(Input, __spreadProps60(__spreadValues142({}, sharedProps), {
    component: "textarea",
    rows: minRows
  })));
});
Textarea.displayName = "@mantine/core/Textarea";

// node_modules/@mantine/core/esm/JsonInput/JsonInput.js
var __defProp143 = Object.defineProperty;
var __defProps61 = Object.defineProperties;
var __getOwnPropDescs61 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols145 = Object.getOwnPropertySymbols;
var __hasOwnProp145 = Object.prototype.hasOwnProperty;
var __propIsEnum145 = Object.prototype.propertyIsEnumerable;
var __defNormalProp143 = (obj, key2, value) => key2 in obj ? __defProp143(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues143 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp145.call(b2, prop))
      __defNormalProp143(a2, prop, b2[prop]);
  if (__getOwnPropSymbols145)
    for (var prop of __getOwnPropSymbols145(b2)) {
      if (__propIsEnum145.call(b2, prop))
        __defNormalProp143(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps61 = (a2, b2) => __defProps61(a2, __getOwnPropDescs61(b2));
var __objRest93 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp145.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols145)
    for (var prop of __getOwnPropSymbols145(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum145.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps71 = {
  formatOnBlur: false,
  size: "sm"
};
var JsonInput = (0, import_react205.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("JsonInput", defaultProps71, props), {
    value,
    defaultValue,
    onChange,
    onFocus,
    onBlur,
    error,
    formatOnBlur,
    size: size3,
    validationError,
    classNames,
    unstyled,
    readOnly
  } = _a, others = __objRest93(_a, [
    "value",
    "defaultValue",
    "onChange",
    "onFocus",
    "onBlur",
    "error",
    "formatOnBlur",
    "size",
    "validationError",
    "classNames",
    "unstyled",
    "readOnly"
  ]);
  const { classes, cx } = JsonInput_styles_default({ size: size3 }, { name: "JsonInput", unstyled });
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: "",
    onChange
  });
  const [valid2, setValid] = (0, import_react205.useState)(validateJson(_value));
  const handleFocus = (event) => {
    typeof onFocus === "function" && onFocus(event);
    setValid(true);
  };
  const handleBlur = (event) => {
    typeof onBlur === "function" && onBlur(event);
    const isValid = validateJson(event.currentTarget.value);
    isValid && event.currentTarget.value.trim() !== "" && setValue(JSON.stringify(JSON.parse(event.currentTarget.value), null, 2));
    setValid(isValid);
  };
  return import_react205.default.createElement(Textarea, __spreadValues143({
    value: _value,
    onChange: (event) => setValue(event.currentTarget.value),
    onFocus: handleFocus,
    onBlur: handleBlur,
    error: valid2 ? error : validationError || true,
    __staticSelector: "JsonInput",
    classNames: __spreadProps61(__spreadValues143({}, classNames), { input: cx(classes.input, classNames == null ? void 0 : classNames.input) }),
    autoComplete: "nope",
    ref,
    unstyled,
    readOnly
  }, others));
});
JsonInput.displayName = "@mantine/core/JsonInput";

// node_modules/@mantine/core/esm/Kbd/Kbd.js
var import_react206 = __toESM(require_react());

// node_modules/@mantine/core/esm/Kbd/Kbd.styles.js
var useStyles61 = createStyles((theme) => ({
  root: {
    lineHeight: theme.lineHeight,
    fontFamily: theme.fontFamilyMonospace,
    fontSize: theme.fontSizes.xs,
    fontWeight: 700,
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[0],
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.gray[7],
    padding: `3px calc(${theme.spacing.xs}px / 2)`,
    borderRadius: theme.radius.sm,
    border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`,
    borderBottom: `3px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`
  }
}));
var Kbd_styles_default = useStyles61;

// node_modules/@mantine/core/esm/Kbd/Kbd.js
var __defProp144 = Object.defineProperty;
var __getOwnPropSymbols146 = Object.getOwnPropertySymbols;
var __hasOwnProp146 = Object.prototype.hasOwnProperty;
var __propIsEnum146 = Object.prototype.propertyIsEnumerable;
var __defNormalProp144 = (obj, key2, value) => key2 in obj ? __defProp144(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues144 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp146.call(b2, prop))
      __defNormalProp144(a2, prop, b2[prop]);
  if (__getOwnPropSymbols146)
    for (var prop of __getOwnPropSymbols146(b2)) {
      if (__propIsEnum146.call(b2, prop))
        __defNormalProp144(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest94 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp146.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols146)
    for (var prop of __getOwnPropSymbols146(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum146.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var Kbd = (0, import_react206.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Kbd", {}, props), { className, children, unstyled } = _a, others = __objRest94(_a, ["className", "children", "unstyled"]);
  const { classes, cx } = Kbd_styles_default(null, { name: "Kbd", unstyled });
  return import_react206.default.createElement(Box, __spreadValues144({
    component: "kbd",
    className: cx(classes.root, className),
    ref
  }, others), children);
});
Kbd.displayName = "@mantine/core/Kbd";

// node_modules/@mantine/core/esm/List/List.js
var import_react208 = __toESM(require_react());

// node_modules/@mantine/core/esm/List/ListItem/ListItem.js
var import_react207 = __toESM(require_react());

// node_modules/@mantine/core/esm/List/List.context.js
var [ListProvider, useListContext] = createSafeContext("List component was not found in tree");

// node_modules/@mantine/core/esm/List/ListItem/ListItem.styles.js
var useStyles62 = createStyles((theme, { spacing, center }, getRef2) => ({
  itemWrapper: {
    ref: getRef2("itemWrapper"),
    display: "inline-flex",
    flexDirection: "column",
    whiteSpace: "normal"
  },
  item: {
    whiteSpace: "nowrap",
    lineHeight: center ? 1 : theme.lineHeight,
    "&:not(:first-of-type)": {
      marginTop: theme.fn.size({ size: spacing, sizes: theme.spacing })
    }
  },
  withIcon: {
    listStyle: "none",
    [`& .${getRef2("itemWrapper")}`]: {
      display: "inline-flex",
      alignItems: center ? "center" : "flex-start",
      flexDirection: "row"
    }
  },
  itemIcon: {
    display: "inline-block",
    verticalAlign: "middle",
    marginRight: theme.spacing.sm
  }
}));
var ListItem_styles_default = useStyles62;

// node_modules/@mantine/core/esm/List/ListItem/ListItem.js
var __defProp145 = Object.defineProperty;
var __getOwnPropSymbols147 = Object.getOwnPropertySymbols;
var __hasOwnProp147 = Object.prototype.hasOwnProperty;
var __propIsEnum147 = Object.prototype.propertyIsEnumerable;
var __defNormalProp145 = (obj, key2, value) => key2 in obj ? __defProp145(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues145 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp147.call(b2, prop))
      __defNormalProp145(a2, prop, b2[prop]);
  if (__getOwnPropSymbols147)
    for (var prop of __getOwnPropSymbols147(b2)) {
      if (__propIsEnum147.call(b2, prop))
        __defNormalProp145(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest95 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp147.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols147)
    for (var prop of __getOwnPropSymbols147(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum147.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps72 = {};
var ListItem = (0, import_react207.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("ListItem", defaultProps72, props), { className, children, icon } = _a, others = __objRest95(_a, ["className", "children", "icon"]);
  const {
    icon: ctxIcon,
    spacing,
    center,
    listStyleType,
    size: size3,
    withPadding,
    classNames,
    styles: styles2,
    unstyled
  } = useListContext();
  const _icon = icon || ctxIcon;
  const { classes, cx } = ListItem_styles_default({ withPadding, size: size3, listStyleType, center, spacing }, { classNames, styles: styles2, unstyled, name: "List" });
  return import_react207.default.createElement(Box, __spreadValues145({
    component: "li",
    className: cx(classes.item, { [classes.withIcon]: _icon }, className),
    ref
  }, others), import_react207.default.createElement("div", {
    className: classes.itemWrapper
  }, _icon && import_react207.default.createElement("span", {
    className: classes.itemIcon
  }, _icon), import_react207.default.createElement("span", null, children)));
});
ListItem.displayName = "@mantine/core/ListItem";

// node_modules/@mantine/core/esm/List/List.styles.js
var __defProp146 = Object.defineProperty;
var __defProps62 = Object.defineProperties;
var __getOwnPropDescs62 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols148 = Object.getOwnPropertySymbols;
var __hasOwnProp148 = Object.prototype.hasOwnProperty;
var __propIsEnum148 = Object.prototype.propertyIsEnumerable;
var __defNormalProp146 = (obj, key2, value) => key2 in obj ? __defProp146(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues146 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp148.call(b2, prop))
      __defNormalProp146(a2, prop, b2[prop]);
  if (__getOwnPropSymbols148)
    for (var prop of __getOwnPropSymbols148(b2)) {
      if (__propIsEnum148.call(b2, prop))
        __defNormalProp146(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps62 = (a2, b2) => __defProps62(a2, __getOwnPropDescs62(b2));
var useStyles63 = createStyles((theme, { withPadding, size: size3, listStyleType }) => ({
  root: __spreadProps62(__spreadValues146({}, theme.fn.fontStyles()), {
    listStyleType,
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
    lineHeight: theme.lineHeight,
    margin: 0,
    paddingLeft: withPadding ? theme.spacing.xl : 0,
    listStylePosition: "inside"
  })
}));
var List_styles_default = useStyles63;

// node_modules/@mantine/core/esm/List/List.js
var __defProp147 = Object.defineProperty;
var __getOwnPropSymbols149 = Object.getOwnPropertySymbols;
var __hasOwnProp149 = Object.prototype.hasOwnProperty;
var __propIsEnum149 = Object.prototype.propertyIsEnumerable;
var __defNormalProp147 = (obj, key2, value) => key2 in obj ? __defProp147(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues147 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp149.call(b2, prop))
      __defNormalProp147(a2, prop, b2[prop]);
  if (__getOwnPropSymbols149)
    for (var prop of __getOwnPropSymbols149(b2)) {
      if (__propIsEnum149.call(b2, prop))
        __defNormalProp147(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest96 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp149.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols149)
    for (var prop of __getOwnPropSymbols149(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum149.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps73 = {
  type: "unordered",
  size: "md",
  spacing: 0
};
var List = (0, import_react208.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("List", defaultProps73, props), {
    children,
    type,
    size: size3,
    listStyleType,
    withPadding,
    center,
    spacing,
    icon,
    className,
    styles: styles2,
    classNames,
    unstyled
  } = _a, others = __objRest96(_a, [
    "children",
    "type",
    "size",
    "listStyleType",
    "withPadding",
    "center",
    "spacing",
    "icon",
    "className",
    "styles",
    "classNames",
    "unstyled"
  ]);
  const { classes, cx } = List_styles_default({ withPadding, size: size3, listStyleType, center, spacing }, { classNames, styles: styles2, name: "List", unstyled });
  return import_react208.default.createElement(ListProvider, {
    value: {
      spacing,
      center,
      icon,
      listStyleType,
      size: size3,
      withPadding,
      classNames,
      styles: styles2,
      unstyled
    }
  }, import_react208.default.createElement(Box, __spreadValues147({
    component: type === "unordered" ? "ul" : "ol",
    className: cx(classes.root, className),
    ref
  }, others), children));
});
List.Item = ListItem;
List.displayName = "@mantine/core/List";

// node_modules/@mantine/core/esm/LoadingOverlay/LoadingOverlay.js
var import_react209 = __toESM(require_react());

// node_modules/@mantine/core/esm/LoadingOverlay/LoadingOverlay.styles.js
var useStyles64 = createStyles({
  root: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    overflow: "hidden"
  }
});
var LoadingOverlay_styles_default = useStyles64;

// node_modules/@mantine/core/esm/LoadingOverlay/LoadingOverlay.js
var __defProp148 = Object.defineProperty;
var __defProps63 = Object.defineProperties;
var __getOwnPropDescs63 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols150 = Object.getOwnPropertySymbols;
var __hasOwnProp150 = Object.prototype.hasOwnProperty;
var __propIsEnum150 = Object.prototype.propertyIsEnumerable;
var __defNormalProp148 = (obj, key2, value) => key2 in obj ? __defProp148(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues148 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp150.call(b2, prop))
      __defNormalProp148(a2, prop, b2[prop]);
  if (__getOwnPropSymbols150)
    for (var prop of __getOwnPropSymbols150(b2)) {
      if (__propIsEnum150.call(b2, prop))
        __defNormalProp148(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps63 = (a2, b2) => __defProps63(a2, __getOwnPropDescs63(b2));
var __objRest97 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp150.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols150)
    for (var prop of __getOwnPropSymbols150(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum150.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps74 = {
  overlayOpacity: 0.75,
  transitionDuration: 0,
  zIndex: getDefaultZIndex("overlay")
};
var LoadingOverlay = (0, import_react209.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("LoadingOverlay", defaultProps74, props), {
    className,
    visible: visible2,
    loaderProps,
    overlayOpacity,
    overlayColor,
    transitionDuration,
    exitTransitionDuration,
    zIndex,
    style: style3,
    loader,
    radius: radius2,
    overlayBlur,
    unstyled
  } = _a, others = __objRest97(_a, [
    "className",
    "visible",
    "loaderProps",
    "overlayOpacity",
    "overlayColor",
    "transitionDuration",
    "exitTransitionDuration",
    "zIndex",
    "style",
    "loader",
    "radius",
    "overlayBlur",
    "unstyled"
  ]);
  const { classes, cx, theme } = LoadingOverlay_styles_default(null, { name: "LoadingOverlay", unstyled });
  const _zIndex = `calc(${zIndex} + 1)`;
  return import_react209.default.createElement(Transition, {
    duration: transitionDuration,
    exitDuration: exitTransitionDuration,
    mounted: visible2,
    transition: "fade"
  }, (transitionStyles) => import_react209.default.createElement(Box, __spreadValues148({
    className: cx(classes.root, className),
    style: __spreadProps63(__spreadValues148(__spreadValues148({}, transitionStyles), style3), { zIndex }),
    ref
  }, others), loader ? import_react209.default.createElement("div", {
    style: { zIndex: _zIndex }
  }, loader) : import_react209.default.createElement(Loader, __spreadValues148({
    style: { zIndex: _zIndex }
  }, loaderProps)), import_react209.default.createElement(Overlay, {
    opacity: overlayOpacity,
    zIndex,
    radius: radius2,
    blur: overlayBlur,
    unstyled,
    color: overlayColor || (theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.white)
  })));
});
LoadingOverlay.displayName = "@mantine/core/LoadingOverlay";

// node_modules/@mantine/core/esm/MediaQuery/MediaQuery.js
var import_react210 = __toESM(require_react());

// node_modules/@mantine/core/esm/MediaQuery/MediaQuery.styles.js
var useStyles65 = createStyles((theme, { smallerThan: smallerThan2, largerThan: largerThan2, query, styles: styles2 }) => {
  const media2 = {};
  const minWidth = theme.fn.size({ size: largerThan2, sizes: theme.breakpoints });
  const maxWidth = theme.fn.size({ size: smallerThan2, sizes: theme.breakpoints });
  const _styles = typeof styles2 === "function" ? styles2(theme) : styles2;
  if (largerThan2 !== void 0 && smallerThan2 !== void 0) {
    media2[`@media (min-width: ${minWidth}px) and (max-width: ${maxWidth - 1}px)`] = _styles;
  } else {
    if (largerThan2 !== void 0) {
      media2[`@media (min-width: ${theme.fn.size({ size: largerThan2, sizes: theme.breakpoints })}px)`] = _styles;
    }
    if (smallerThan2 !== void 0) {
      media2[`@media (max-width: ${theme.fn.size({ size: smallerThan2, sizes: theme.breakpoints }) - 1}px)`] = _styles;
    }
  }
  if (query) {
    media2[`@media ${query}`] = _styles;
  }
  return { media: media2 };
});
var MediaQuery_styles_default = useStyles65;

// node_modules/@mantine/core/esm/MediaQuery/MediaQuery.js
function MediaQuery(props) {
  var _a;
  const { children, smallerThan: smallerThan2, largerThan: largerThan2, query, styles: styles2, className } = useComponentDefaultProps("MediaQuery", {}, props);
  const { classes, cx } = MediaQuery_styles_default({ smallerThan: smallerThan2, largerThan: largerThan2, query, styles: styles2 }, { name: "MediaQuery" });
  const child = import_react210.Children.only(children);
  if (typeof child === "object" && child !== null && "props" in child) {
    return import_react210.default.cloneElement(child, {
      className: cx(classes.media, (_a = child.props) == null ? void 0 : _a.className, className)
    });
  }
  return child;
}
MediaQuery.displayName = "@mantine/core/MediaQuery";

// node_modules/@mantine/core/esm/Menu/Menu.js
var import_react216 = __toESM(require_react());

// node_modules/@mantine/core/esm/Menu/MenuDivider/MenuDivider.js
var import_react211 = __toESM(require_react());

// node_modules/@mantine/core/esm/Menu/Menu.errors.js
var MENU_ERRORS = {
  context: "Menu component was not found in the tree",
  children: "Menu.Target component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported"
};

// node_modules/@mantine/core/esm/Menu/Menu.context.js
var [MenuContextProvider, useMenuContext] = createSafeContext(MENU_ERRORS.context);

// node_modules/@mantine/core/esm/Menu/MenuDivider/MenuDivider.styles.js
var useStyles66 = createStyles((theme) => ({
  divider: {
    margin: `calc(${theme.spacing.xs}px / 2) -5px`,
    borderTop: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2]}`
  }
}));
var MenuDivider_styles_default = useStyles66;

// node_modules/@mantine/core/esm/Menu/MenuDivider/MenuDivider.js
var __defProp149 = Object.defineProperty;
var __getOwnPropSymbols151 = Object.getOwnPropertySymbols;
var __hasOwnProp151 = Object.prototype.hasOwnProperty;
var __propIsEnum151 = Object.prototype.propertyIsEnumerable;
var __defNormalProp149 = (obj, key2, value) => key2 in obj ? __defProp149(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues149 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp151.call(b2, prop))
      __defNormalProp149(a2, prop, b2[prop]);
  if (__getOwnPropSymbols151)
    for (var prop of __getOwnPropSymbols151(b2)) {
      if (__propIsEnum151.call(b2, prop))
        __defNormalProp149(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest98 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp151.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols151)
    for (var prop of __getOwnPropSymbols151(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum151.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps75 = {};
var MenuDivider = (0, import_react211.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("MenuDivider", defaultProps75, props), { children, className } = _a, others = __objRest98(_a, ["children", "className"]);
  const { classNames, styles: styles2, unstyled } = useMenuContext();
  const { classes, cx } = MenuDivider_styles_default(null, { name: "Menu", classNames, styles: styles2, unstyled });
  return import_react211.default.createElement(Box, __spreadValues149({
    className: cx(classes.divider, className),
    ref
  }, others));
});
MenuDivider.displayName = "@mantine/core/MenuDivider";

// node_modules/@mantine/core/esm/Menu/MenuDropdown/MenuDropdown.js
var import_react212 = __toESM(require_react());
var __defProp150 = Object.defineProperty;
var __getOwnPropSymbols152 = Object.getOwnPropertySymbols;
var __hasOwnProp152 = Object.prototype.hasOwnProperty;
var __propIsEnum152 = Object.prototype.propertyIsEnumerable;
var __defNormalProp150 = (obj, key2, value) => key2 in obj ? __defProp150(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues150 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp152.call(b2, prop))
      __defNormalProp150(a2, prop, b2[prop]);
  if (__getOwnPropSymbols152)
    for (var prop of __getOwnPropSymbols152(b2)) {
      if (__propIsEnum152.call(b2, prop))
        __defNormalProp150(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest99 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp152.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols152)
    for (var prop of __getOwnPropSymbols152(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum152.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps76 = {};
function MenuDropdown(props) {
  const _a = useComponentDefaultProps("MenuDropdown", defaultProps76, props), { children, onMouseEnter, onMouseLeave } = _a, others = __objRest99(_a, ["children", "onMouseEnter", "onMouseLeave"]);
  const wrapperRef = (0, import_react212.useRef)();
  const ctx = useMenuContext();
  const handleKeyDown2 = (event) => {
    if (event.key === "ArrowUp" || event.key === "ArrowDown") {
      event.preventDefault();
      wrapperRef.current.querySelectorAll("[data-menu-item]")[0].focus();
    }
  };
  const handleMouseEnter = createEventHandler(onMouseEnter, () => ctx.trigger === "hover" && ctx.openDropdown());
  const handleMouseLeave = createEventHandler(onMouseLeave, () => ctx.trigger === "hover" && ctx.closeDropdown());
  return import_react212.default.createElement(Popover.Dropdown, __spreadValues150({
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    role: "menu",
    "aria-orientation": "vertical"
  }, others), import_react212.default.createElement("div", {
    tabIndex: -1,
    "data-menu-dropdown": true,
    "data-autofocus": true,
    onKeyDown: handleKeyDown2,
    ref: wrapperRef,
    style: { outline: 0 }
  }, children));
}
MenuDropdown.displayName = "@mantine/core/MenuDropdown";

// node_modules/@mantine/core/esm/Menu/MenuItem/MenuItem.js
var import_react213 = __toESM(require_react());

// node_modules/@mantine/core/esm/Menu/MenuItem/MenuItem.styles.js
var __defProp151 = Object.defineProperty;
var __defProps64 = Object.defineProperties;
var __getOwnPropDescs64 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols153 = Object.getOwnPropertySymbols;
var __hasOwnProp153 = Object.prototype.hasOwnProperty;
var __propIsEnum153 = Object.prototype.propertyIsEnumerable;
var __defNormalProp151 = (obj, key2, value) => key2 in obj ? __defProp151(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues151 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp153.call(b2, prop))
      __defNormalProp151(a2, prop, b2[prop]);
  if (__getOwnPropSymbols153)
    for (var prop of __getOwnPropSymbols153(b2)) {
      if (__propIsEnum153.call(b2, prop))
        __defNormalProp151(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps64 = (a2, b2) => __defProps64(a2, __getOwnPropDescs64(b2));
var useStyles67 = createStyles((theme, { color: color2, radius: radius2 }) => ({
  item: __spreadProps64(__spreadValues151({}, theme.fn.fontStyles()), {
    WebkitTapHighlightColor: "transparent",
    fontSize: theme.fontSizes.sm,
    border: 0,
    backgroundColor: "transparent",
    outline: 0,
    width: "100%",
    textAlign: "left",
    textDecoration: "none",
    boxSizing: "border-box",
    padding: `${theme.spacing.xs}px ${theme.spacing.sm}px`,
    cursor: "pointer",
    borderRadius: theme.fn.radius(radius2),
    color: color2 ? theme.fn.variant({ variant: "filled", primaryFallback: false, color: color2 }).background : theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    display: "flex",
    alignItems: "center",
    "&:disabled": {
      color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5],
      pointerEvents: "none",
      userSelect: "none"
    },
    "&[data-hovered]": {
      backgroundColor: color2 ? theme.fn.variant({ variant: "light", color: color2 }).background : theme.colorScheme === "dark" ? theme.fn.rgba(theme.colors.dark[3], 0.35) : theme.colors.gray[1]
    }
  }),
  itemLabel: {
    flex: 1
  },
  itemIcon: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    marginRight: theme.spacing.xs
  },
  itemRightSection: {}
}));
var MenuItem_styles_default = useStyles67;

// node_modules/@mantine/core/esm/Menu/MenuItem/MenuItem.js
var __defProp152 = Object.defineProperty;
var __defProps65 = Object.defineProperties;
var __getOwnPropDescs65 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols154 = Object.getOwnPropertySymbols;
var __hasOwnProp154 = Object.prototype.hasOwnProperty;
var __propIsEnum154 = Object.prototype.propertyIsEnumerable;
var __defNormalProp152 = (obj, key2, value) => key2 in obj ? __defProp152(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues152 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp154.call(b2, prop))
      __defNormalProp152(a2, prop, b2[prop]);
  if (__getOwnPropSymbols154)
    for (var prop of __getOwnPropSymbols154(b2)) {
      if (__propIsEnum154.call(b2, prop))
        __defNormalProp152(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps65 = (a2, b2) => __defProps65(a2, __getOwnPropDescs65(b2));
var __objRest100 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp154.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols154)
    for (var prop of __getOwnPropSymbols154(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum154.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps77 = {};
var _MenuItem = (0, import_react213.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("MenuItem", defaultProps77, props), { children, className, color: color2, closeMenuOnClick, icon, rightSection } = _a, others = __objRest100(_a, ["children", "className", "color", "closeMenuOnClick", "icon", "rightSection"]);
  const ctx = useMenuContext();
  const { classes, cx, theme } = MenuItem_styles_default({ radius: ctx.radius, color: color2 }, { name: "Menu", classNames: ctx.classNames, styles: ctx.styles, unstyled: ctx.unstyled });
  const itemRef = (0, import_react213.useRef)();
  const itemIndex = ctx.getItemIndex(itemRef.current);
  const _others = others;
  const handleMouseLeave = createEventHandler(_others.onMouseLeave, () => ctx.setHovered(-1));
  const handleMouseEnter = createEventHandler(_others.onMouseEnter, () => ctx.setHovered(ctx.getItemIndex(itemRef.current)));
  const handleClick2 = createEventHandler(_others.onClick, () => {
    if (typeof closeMenuOnClick === "boolean") {
      closeMenuOnClick && ctx.closeDropdownImmediately();
    } else {
      ctx.closeOnItemClick && ctx.closeDropdownImmediately();
    }
  });
  const handleFocus = createEventHandler(_others.onFocus, () => ctx.setHovered(ctx.getItemIndex(itemRef.current)));
  return import_react213.default.createElement(Box, __spreadProps65(__spreadValues152({
    component: "button",
    type: "button"
  }, others), {
    tabIndex: -1,
    onFocus: handleFocus,
    className: cx(classes.item, className),
    ref: useMergedRef(itemRef, ref),
    role: "menuitem",
    "data-menu-item": true,
    "data-hovered": ctx.hovered === itemIndex ? true : void 0,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onClick: handleClick2,
    onKeyDown: createScopedKeydownHandler({
      siblingSelector: "[data-menu-item]",
      parentSelector: "[data-menu-dropdown]",
      activateOnFocus: false,
      loop: ctx.loop,
      dir: theme.dir,
      orientation: "vertical",
      onKeyDown: _others.onKeydown
    })
  }), icon && import_react213.default.createElement("div", {
    className: classes.itemIcon
  }, icon), children && import_react213.default.createElement("div", {
    className: classes.itemLabel
  }, children), rightSection && import_react213.default.createElement("div", {
    className: classes.itemRightSection
  }, rightSection));
});
_MenuItem.displayName = "@mantine/core/MenuItem";
var MenuItem = createPolymorphicComponent(_MenuItem);

// node_modules/@mantine/core/esm/Menu/MenuLabel/MenuLabel.js
var import_react214 = __toESM(require_react());

// node_modules/@mantine/core/esm/Menu/MenuLabel/MenuLabel.styles.js
var useStyles68 = createStyles((theme) => ({
  label: {
    color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6],
    fontWeight: 500,
    fontSize: theme.fontSizes.xs,
    padding: `calc(${theme.spacing.xs}px / 2) ${theme.spacing.sm}px`,
    cursor: "default"
  }
}));
var MenuLabel_styles_default = useStyles68;

// node_modules/@mantine/core/esm/Menu/MenuLabel/MenuLabel.js
var __defProp153 = Object.defineProperty;
var __getOwnPropSymbols155 = Object.getOwnPropertySymbols;
var __hasOwnProp155 = Object.prototype.hasOwnProperty;
var __propIsEnum155 = Object.prototype.propertyIsEnumerable;
var __defNormalProp153 = (obj, key2, value) => key2 in obj ? __defProp153(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues153 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp155.call(b2, prop))
      __defNormalProp153(a2, prop, b2[prop]);
  if (__getOwnPropSymbols155)
    for (var prop of __getOwnPropSymbols155(b2)) {
      if (__propIsEnum155.call(b2, prop))
        __defNormalProp153(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest101 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp155.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols155)
    for (var prop of __getOwnPropSymbols155(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum155.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps78 = {};
var MenuLabel = (0, import_react214.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("MenuLabel", defaultProps78, props), { children, className } = _a, others = __objRest101(_a, ["children", "className"]);
  const { classNames, styles: styles2, unstyled } = useMenuContext();
  const { classes, cx } = MenuLabel_styles_default(null, { name: "Menu", classNames, styles: styles2, unstyled });
  return import_react214.default.createElement(Text, __spreadValues153({
    className: cx(classes.label, className),
    ref
  }, others), children);
});
MenuLabel.displayName = "@mantine/core/MenuLabel";

// node_modules/@mantine/core/esm/Menu/MenuTarget/MenuTarget.js
var import_react215 = __toESM(require_react());
var __defProp154 = Object.defineProperty;
var __getOwnPropSymbols156 = Object.getOwnPropertySymbols;
var __hasOwnProp156 = Object.prototype.hasOwnProperty;
var __propIsEnum156 = Object.prototype.propertyIsEnumerable;
var __defNormalProp154 = (obj, key2, value) => key2 in obj ? __defProp154(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues154 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp156.call(b2, prop))
      __defNormalProp154(a2, prop, b2[prop]);
  if (__getOwnPropSymbols156)
    for (var prop of __getOwnPropSymbols156(b2)) {
      if (__propIsEnum156.call(b2, prop))
        __defNormalProp154(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest102 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp156.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols156)
    for (var prop of __getOwnPropSymbols156(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum156.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps79 = {
  refProp: "ref"
};
var MenuTarget = (0, import_react215.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("MenuTarget", defaultProps79, props), { children, refProp } = _a, others = __objRest102(_a, ["children", "refProp"]);
  if (!isElement3(children)) {
    throw new Error(MENU_ERRORS.children);
  }
  const ctx = useMenuContext();
  const onClick = createEventHandler(children.props.onClick, () => ctx.trigger === "click" && ctx.toggleDropdown());
  const onMouseEnter = createEventHandler(children.props.onMouseEnter, () => ctx.trigger === "hover" && ctx.openDropdown());
  const onMouseLeave = createEventHandler(children.props.onMouseLeave, () => ctx.trigger === "hover" && ctx.closeDropdown());
  return import_react215.default.createElement(Popover.Target, __spreadValues154({
    refProp,
    popupType: "menu",
    ref
  }, others), (0, import_react215.cloneElement)(children, {
    onClick,
    onMouseEnter,
    onMouseLeave,
    "data-expanded": ctx.opened ? true : void 0
  }));
});
MenuTarget.displayName = "@mantine/core/MenuTarget";

// node_modules/@mantine/core/esm/Menu/Menu.styles.js
var useStyles69 = createStyles({
  dropdown: { padding: 4 }
});
var Menu_styles_default = useStyles69;

// node_modules/@mantine/core/esm/Menu/Menu.js
var __defProp155 = Object.defineProperty;
var __defProps66 = Object.defineProperties;
var __getOwnPropDescs66 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols157 = Object.getOwnPropertySymbols;
var __hasOwnProp157 = Object.prototype.hasOwnProperty;
var __propIsEnum157 = Object.prototype.propertyIsEnumerable;
var __defNormalProp155 = (obj, key2, value) => key2 in obj ? __defProp155(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues155 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp157.call(b2, prop))
      __defNormalProp155(a2, prop, b2[prop]);
  if (__getOwnPropSymbols157)
    for (var prop of __getOwnPropSymbols157(b2)) {
      if (__propIsEnum157.call(b2, prop))
        __defNormalProp155(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps66 = (a2, b2) => __defProps66(a2, __getOwnPropDescs66(b2));
var __objRest103 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp157.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols157)
    for (var prop of __getOwnPropSymbols157(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum157.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps80 = {
  closeOnItemClick: true,
  loop: true,
  trigger: "click",
  openDelay: 0,
  closeDelay: 100
};
function Menu(props) {
  const _a = useComponentDefaultProps("Menu", defaultProps80, props), {
    children,
    onOpen,
    onClose,
    opened,
    defaultOpened,
    onChange,
    closeOnItemClick,
    loop,
    closeOnEscape: closeOnEscape2,
    trigger,
    openDelay,
    closeDelay,
    classNames,
    styles: styles2,
    unstyled,
    radius: radius2
  } = _a, others = __objRest103(_a, [
    "children",
    "onOpen",
    "onClose",
    "opened",
    "defaultOpened",
    "onChange",
    "closeOnItemClick",
    "loop",
    "closeOnEscape",
    "trigger",
    "openDelay",
    "closeDelay",
    "classNames",
    "styles",
    "unstyled",
    "radius"
  ]);
  const { classes, cx } = Menu_styles_default();
  const [hovered, { setHovered, resetHovered }] = useHovered();
  const [_opened, setOpened] = useUncontrolled({
    value: opened,
    defaultValue: defaultOpened,
    finalValue: false,
    onChange
  });
  const close2 = () => {
    setOpened(false);
    _opened && (onClose == null ? void 0 : onClose());
  };
  const open = () => {
    setOpened(true);
    !_opened && (onOpen == null ? void 0 : onOpen());
  };
  const toggleDropdown = () => _opened ? close2() : open();
  const { openDropdown, closeDropdown } = useDelayedHover({ open, close: close2, closeDelay, openDelay });
  const getItemIndex = (node4) => getContextItemIndex("[data-menu-item]", "[data-menu-dropdown]", node4);
  useDidUpdate(() => {
    resetHovered();
  }, [_opened]);
  return import_react216.default.createElement(MenuContextProvider, {
    value: {
      opened: _opened,
      toggleDropdown,
      getItemIndex,
      hovered,
      setHovered,
      closeOnItemClick,
      closeDropdown: trigger === "click" ? close2 : closeDropdown,
      openDropdown: trigger === "click" ? open : openDropdown,
      closeDropdownImmediately: close2,
      loop,
      trigger,
      radius: radius2,
      classNames,
      styles: styles2,
      unstyled
    }
  }, import_react216.default.createElement(Popover, __spreadProps66(__spreadValues155({}, others), {
    radius: radius2,
    opened: _opened,
    onChange: setOpened,
    defaultOpened,
    trapFocus: trigger === "click",
    closeOnEscape: closeOnEscape2 && trigger === "click",
    __staticSelector: "Menu",
    classNames: __spreadProps66(__spreadValues155({}, classNames), { dropdown: cx(classes.dropdown, classNames == null ? void 0 : classNames.dropdown) }),
    styles: styles2,
    unstyled,
    onClose: close2,
    onOpen: open
  }), children));
}
Menu.displayName = "@mantine/core/Menu";
Menu.Item = MenuItem;
Menu.Label = MenuLabel;
Menu.Dropdown = MenuDropdown;
Menu.Target = MenuTarget;
Menu.Divider = MenuDivider;

// node_modules/@mantine/core/esm/Modal/Modal.js
var import_react217 = __toESM(require_react());

// node_modules/@mantine/core/esm/Modal/Modal.styles.js
var __defProp156 = Object.defineProperty;
var __getOwnPropSymbols158 = Object.getOwnPropertySymbols;
var __hasOwnProp158 = Object.prototype.hasOwnProperty;
var __propIsEnum158 = Object.prototype.propertyIsEnumerable;
var __defNormalProp156 = (obj, key2, value) => key2 in obj ? __defProp156(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues156 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp158.call(b2, prop))
      __defNormalProp156(a2, prop, b2[prop]);
  if (__getOwnPropSymbols158)
    for (var prop of __getOwnPropSymbols158(b2)) {
      if (__propIsEnum158.call(b2, prop))
        __defNormalProp156(a2, prop, b2[prop]);
    }
  return a2;
};
var sizes15 = {
  xs: 320,
  sm: 380,
  md: 440,
  lg: 620,
  xl: 780
};
function getFullScreenStyles(fullScreen) {
  if (!fullScreen) {
    return {};
  }
  return {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    maxHeight: "100vh",
    overflowY: "auto"
  };
}
var useStyles70 = createStyles((theme, { overflow, size: size3, centered, zIndex, fullScreen }) => ({
  close: {},
  overlay: {
    display: fullScreen ? "none" : void 0
  },
  root: {
    position: "fixed",
    zIndex,
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  inner: {
    position: "absolute",
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    overflowY: "auto",
    padding: fullScreen ? 0 : `${theme.spacing.xl * 2}px ${theme.spacing.md}px`,
    display: "flex",
    justifyContent: "center",
    alignItems: centered ? "center" : "flex-start"
  },
  title: {
    marginRight: theme.spacing.md,
    textOverflow: "ellipsis",
    display: "block",
    wordBreak: "break-word"
  },
  modal: __spreadValues156({
    position: "relative",
    width: fullScreen ? "100vw" : theme.fn.size({ sizes: sizes15, size: size3 }),
    borderRadius: fullScreen ? 0 : void 0,
    outline: 0,
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
    marginTop: centered ? "auto" : void 0,
    marginBottom: centered ? "auto" : void 0,
    zIndex: 1
  }, getFullScreenStyles(fullScreen)),
  header: {
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    marginBottom: theme.spacing.md,
    marginRight: -9
  },
  body: {
    maxHeight: overflow === "inside" ? "calc(100vh - 185px)" : null,
    overflowY: overflow === "inside" ? "auto" : null,
    wordBreak: "break-word"
  }
}));
var Modal_styles_default = useStyles70;

// node_modules/@mantine/core/esm/Modal/Modal.js
var __defProp157 = Object.defineProperty;
var __getOwnPropSymbols159 = Object.getOwnPropertySymbols;
var __hasOwnProp159 = Object.prototype.hasOwnProperty;
var __propIsEnum159 = Object.prototype.propertyIsEnumerable;
var __defNormalProp157 = (obj, key2, value) => key2 in obj ? __defProp157(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues157 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp159.call(b2, prop))
      __defNormalProp157(a2, prop, b2[prop]);
  if (__getOwnPropSymbols159)
    for (var prop of __getOwnPropSymbols159(b2)) {
      if (__propIsEnum159.call(b2, prop))
        __defNormalProp157(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest104 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp159.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols159)
    for (var prop of __getOwnPropSymbols159(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum159.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps81 = {
  size: "md",
  transitionDuration: 250,
  overflow: "outside",
  padding: "lg",
  shadow: "lg",
  closeOnClickOutside: true,
  closeOnEscape: true,
  trapFocus: true,
  withCloseButton: true,
  withinPortal: true,
  lockScroll: true,
  withFocusReturn: true,
  overlayBlur: 0,
  zIndex: getDefaultZIndex("modal"),
  exitTransitionDuration: 0
};
function Modal(props) {
  const _a = useComponentDefaultProps("Modal", defaultProps81, props), {
    className,
    opened,
    title,
    onClose,
    children,
    withCloseButton,
    overlayOpacity,
    size: size3,
    transitionDuration,
    exitTransitionDuration,
    closeButtonLabel,
    overlayColor,
    overflow,
    transition,
    padding: padding2,
    shadow,
    radius: radius2,
    id: id2,
    classNames,
    styles: styles2,
    closeOnClickOutside,
    trapFocus,
    closeOnEscape: closeOnEscape2,
    centered,
    target,
    withinPortal,
    zIndex,
    overlayBlur,
    transitionTimingFunction,
    fullScreen,
    unstyled,
    lockScroll: shouldLockScroll,
    withFocusReturn
  } = _a, others = __objRest104(_a, [
    "className",
    "opened",
    "title",
    "onClose",
    "children",
    "withCloseButton",
    "overlayOpacity",
    "size",
    "transitionDuration",
    "exitTransitionDuration",
    "closeButtonLabel",
    "overlayColor",
    "overflow",
    "transition",
    "padding",
    "shadow",
    "radius",
    "id",
    "classNames",
    "styles",
    "closeOnClickOutside",
    "trapFocus",
    "closeOnEscape",
    "centered",
    "target",
    "withinPortal",
    "zIndex",
    "overlayBlur",
    "transitionTimingFunction",
    "fullScreen",
    "unstyled",
    "lockScroll",
    "withFocusReturn"
  ]);
  const baseId = useId(id2);
  const titleId = `${baseId}-title`;
  const bodyId = `${baseId}-body`;
  const { classes, cx, theme } = Modal_styles_default({ size: size3, overflow, centered, zIndex, fullScreen }, { unstyled, classNames, styles: styles2, name: "Modal" });
  const focusTrapRef = useFocusTrap(trapFocus && opened);
  const overlayRef = (0, import_react217.useRef)(null);
  const mergedRef = useMergedRef(focusTrapRef, overlayRef);
  const _overlayOpacity = typeof overlayOpacity === "number" ? overlayOpacity : theme.colorScheme === "dark" ? 0.85 : 0.75;
  useScrollLock(shouldLockScroll && opened);
  const closeOnEscapePress = (event) => {
    if (!trapFocus && event.key === "Escape" && closeOnEscape2) {
      onClose();
    }
  };
  (0, import_react217.useEffect)(() => {
    if (!trapFocus) {
      window.addEventListener("keydown", closeOnEscapePress);
      return () => window.removeEventListener("keydown", closeOnEscapePress);
    }
    return void 0;
  }, [trapFocus]);
  useFocusReturn({ opened, shouldReturnFocus: trapFocus && withFocusReturn });
  const clickTarget = (0, import_react217.useRef)(null);
  useWindowEvent("mousedown", (e) => {
    clickTarget.current = e.target;
  });
  const handleOutsideClick = () => {
    if (clickTarget.current === overlayRef.current) {
      closeOnClickOutside && onClose();
    }
  };
  return import_react217.default.createElement(OptionalPortal, {
    withinPortal,
    target
  }, import_react217.default.createElement(GroupedTransition, {
    mounted: opened,
    duration: transitionDuration,
    exitDuration: exitTransitionDuration,
    timingFunction: transitionTimingFunction,
    transitions: {
      modal: {
        duration: transitionDuration,
        transition: transition || (fullScreen ? "fade" : "pop")
      },
      overlay: {
        duration: transitionDuration / 2,
        transition: "fade",
        timingFunction: "ease"
      }
    }
  }, (transitionStyles) => import_react217.default.createElement(import_react217.default.Fragment, null, import_react217.default.createElement(Box, __spreadValues157({
    id: baseId,
    className: cx(classes.root, className)
  }, others), import_react217.default.createElement("div", {
    style: transitionStyles.overlay
  }, import_react217.default.createElement(Overlay, {
    className: classes.overlay,
    sx: { position: "fixed" },
    zIndex: 0,
    blur: overlayBlur,
    color: overlayColor || (theme.colorScheme === "dark" ? theme.colors.dark[9] : theme.black),
    opacity: _overlayOpacity,
    unstyled
  })), import_react217.default.createElement("div", {
    role: "presentation",
    className: classes.inner,
    onClick: handleOutsideClick,
    onKeyDown: (event) => {
      var _a2;
      const shouldTrigger = ((_a2 = event.target) == null ? void 0 : _a2.getAttribute("data-mantine-stop-propagation")) !== "true";
      shouldTrigger && event.key === "Escape" && closeOnEscape2 && onClose();
    },
    ref: mergedRef
  }, import_react217.default.createElement(Paper, {
    className: classes.modal,
    shadow,
    p: padding2,
    radius: radius2,
    role: "dialog",
    "aria-labelledby": titleId,
    "aria-describedby": bodyId,
    "aria-modal": true,
    tabIndex: -1,
    style: transitionStyles.modal,
    unstyled,
    onClick: (event) => event.stopPropagation()
  }, (title || withCloseButton) && import_react217.default.createElement("div", {
    className: classes.header
  }, import_react217.default.createElement(Text, {
    id: titleId,
    className: classes.title
  }, title), withCloseButton && import_react217.default.createElement(CloseButton, {
    iconSize: 16,
    onClick: onClose,
    "aria-label": closeButtonLabel,
    className: classes.close
  })), import_react217.default.createElement("div", {
    id: bodyId,
    className: classes.body
  }, children)))))));
}
Modal.displayName = "@mantine/core/Modal";

// node_modules/@mantine/core/esm/MultiSelect/MultiSelect.js
var import_react222 = __toESM(require_react());

// node_modules/@mantine/core/esm/MultiSelect/DefaultValue/DefaultValue.js
var import_react218 = __toESM(require_react());

// node_modules/@mantine/core/esm/MultiSelect/DefaultValue/DefaultValue.styles.js
var sizes16 = {
  xs: 16,
  sm: 22,
  md: 26,
  lg: 30,
  xl: 36
};
var fontSizes = {
  xs: 10,
  sm: 12,
  md: 14,
  lg: 16,
  xl: 18
};
var useStyles71 = createStyles((theme, { size: size3, disabled, radius: radius2, readOnly, variant: variant2 }) => ({
  defaultValue: {
    display: "flex",
    alignItems: "center",
    backgroundColor: disabled ? theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[3] : theme.colorScheme === "dark" ? theme.colors.dark[7] : variant2 === "filled" ? theme.white : theme.colors.gray[1],
    color: disabled ? theme.colorScheme === "dark" ? theme.colors.dark[1] : theme.colors.gray[7] : theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.gray[7],
    height: theme.fn.size({ size: size3, sizes: sizes16 }),
    paddingLeft: theme.fn.size({ size: size3, sizes: theme.spacing }),
    paddingRight: disabled || readOnly ? theme.fn.size({ size: size3, sizes: theme.spacing }) : 0,
    fontWeight: 500,
    fontSize: theme.fn.size({ size: size3, sizes: fontSizes }),
    borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
    cursor: disabled ? "not-allowed" : "default",
    userSelect: "none",
    maxWidth: "calc(100% - 20px)"
  },
  defaultValueRemove: {
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.gray[7],
    marginLeft: theme.fn.size({ size: size3, sizes: theme.spacing }) / 6
  },
  defaultValueLabel: {
    display: "block",
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }
}));
var DefaultValue_styles_default = useStyles71;

// node_modules/@mantine/core/esm/MultiSelect/DefaultValue/DefaultValue.js
var __defProp158 = Object.defineProperty;
var __getOwnPropSymbols160 = Object.getOwnPropertySymbols;
var __hasOwnProp160 = Object.prototype.hasOwnProperty;
var __propIsEnum160 = Object.prototype.propertyIsEnumerable;
var __defNormalProp158 = (obj, key2, value) => key2 in obj ? __defProp158(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues158 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp160.call(b2, prop))
      __defNormalProp158(a2, prop, b2[prop]);
  if (__getOwnPropSymbols160)
    for (var prop of __getOwnPropSymbols160(b2)) {
      if (__propIsEnum160.call(b2, prop))
        __defNormalProp158(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest105 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp160.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols160)
    for (var prop of __getOwnPropSymbols160(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum160.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var buttonSizes = {
  xs: 16,
  sm: 22,
  md: 24,
  lg: 26,
  xl: 30
};
function DefaultValue2(_a) {
  var _b = _a, {
    label,
    classNames,
    styles: styles2,
    className,
    onRemove,
    disabled,
    readOnly,
    size: size3,
    radius: radius2 = "sm",
    variant: variant2
  } = _b, others = __objRest105(_b, [
    "label",
    "classNames",
    "styles",
    "className",
    "onRemove",
    "disabled",
    "readOnly",
    "size",
    "radius",
    "variant"
  ]);
  const { classes, cx } = DefaultValue_styles_default({ size: size3, disabled, readOnly, radius: radius2, variant: variant2 }, { classNames, styles: styles2, name: "MultiSelect" });
  return import_react218.default.createElement("div", __spreadValues158({
    className: cx(classes.defaultValue, className)
  }, others), import_react218.default.createElement("span", {
    className: classes.defaultValueLabel
  }, label), !disabled && !readOnly && import_react218.default.createElement(CloseButton, {
    "aria-hidden": true,
    onMouseDown: onRemove,
    size: buttonSizes[size3],
    radius: 2,
    color: "blue",
    variant: "transparent",
    iconSize: buttonSizes[size3] / 2,
    className: classes.defaultValueRemove,
    tabIndex: -1
  }));
}
DefaultValue2.displayName = "@mantine/core/MultiSelect/DefaultValue";

// node_modules/@mantine/core/esm/MultiSelect/filter-data/filter-data.js
function filterData2({
  data,
  searchable,
  limit,
  searchValue,
  filter,
  value,
  disableSelectedItemFiltering
}) {
  if (!searchable && value.length === 0) {
    return data;
  }
  if (!searchable) {
    const result2 = [];
    for (let i = 0; i < data.length; i += 1) {
      if (!!disableSelectedItemFiltering || !value.some((val) => val === data[i].value && !data[i].disabled)) {
        result2.push(data[i]);
      }
    }
    return result2;
  }
  const result = [];
  for (let i = 0; i < data.length; i += 1) {
    if (filter(searchValue, value.some((val) => val === data[i].value && !data[i].disabled), data[i])) {
      result.push(data[i]);
    }
    if (result.length >= limit) {
      break;
    }
  }
  return result;
}

// node_modules/@mantine/core/esm/Select/SelectRightSection/get-select-right-section-props.js
var import_react221 = __toESM(require_react());

// node_modules/@mantine/core/esm/Select/SelectRightSection/SelectRightSection.js
var import_react220 = __toESM(require_react());

// node_modules/@mantine/core/esm/Select/SelectRightSection/ChevronIcon.js
var import_react219 = __toESM(require_react());
var __defProp159 = Object.defineProperty;
var __getOwnPropSymbols161 = Object.getOwnPropertySymbols;
var __hasOwnProp161 = Object.prototype.hasOwnProperty;
var __propIsEnum161 = Object.prototype.propertyIsEnumerable;
var __defNormalProp159 = (obj, key2, value) => key2 in obj ? __defProp159(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues159 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp161.call(b2, prop))
      __defNormalProp159(a2, prop, b2[prop]);
  if (__getOwnPropSymbols161)
    for (var prop of __getOwnPropSymbols161(b2)) {
      if (__propIsEnum161.call(b2, prop))
        __defNormalProp159(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest106 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp161.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols161)
    for (var prop of __getOwnPropSymbols161(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum161.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var iconSizes4 = {
  xs: 14,
  sm: 18,
  md: 20,
  lg: 24,
  xl: 28
};
function ChevronIcon2(_a) {
  var _b = _a, { size: size3, error, style: style3 } = _b, others = __objRest106(_b, ["size", "error", "style"]);
  const theme = useMantineTheme();
  const _size = theme.fn.size({ size: size3, sizes: iconSizes4 });
  return import_react219.default.createElement("svg", __spreadValues159({
    width: _size,
    height: _size,
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    style: __spreadValues159({ color: error ? theme.colors.red[6] : theme.colors.gray[6] }, style3),
    "data-chevron": true
  }, others), import_react219.default.createElement("path", {
    d: "M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
}

// node_modules/@mantine/core/esm/Select/SelectRightSection/SelectRightSection.js
function SelectRightSection({
  shouldClear,
  clearButtonLabel,
  onClear,
  size: size3,
  error,
  clearButtonTabIndex
}) {
  return shouldClear ? import_react220.default.createElement(CloseButton, {
    variant: "transparent",
    "aria-label": clearButtonLabel,
    onClick: onClear,
    size: size3,
    tabIndex: clearButtonTabIndex,
    onMouseDown: (event) => event.preventDefault()
  }) : import_react220.default.createElement(ChevronIcon2, {
    error,
    size: size3
  });
}
SelectRightSection.displayName = "@mantine/core/SelectRightSection";

// node_modules/@mantine/core/esm/Select/SelectRightSection/get-select-right-section-props.js
var __defProp160 = Object.defineProperty;
var __defProps67 = Object.defineProperties;
var __getOwnPropDescs67 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols162 = Object.getOwnPropertySymbols;
var __hasOwnProp162 = Object.prototype.hasOwnProperty;
var __propIsEnum162 = Object.prototype.propertyIsEnumerable;
var __defNormalProp160 = (obj, key2, value) => key2 in obj ? __defProp160(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues160 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp162.call(b2, prop))
      __defNormalProp160(a2, prop, b2[prop]);
  if (__getOwnPropSymbols162)
    for (var prop of __getOwnPropSymbols162(b2)) {
      if (__propIsEnum162.call(b2, prop))
        __defNormalProp160(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps67 = (a2, b2) => __defProps67(a2, __getOwnPropDescs67(b2));
var __objRest107 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp162.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols162)
    for (var prop of __getOwnPropSymbols162(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum162.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var RIGHT_SECTION_WIDTH3 = {
  xs: 24,
  sm: 30,
  md: 34,
  lg: 44,
  xl: 54
};
function getSelectRightSectionProps(_a) {
  var _b = _a, {
    styles: styles2,
    rightSection,
    rightSectionWidth,
    theme
  } = _b, props = __objRest107(_b, [
    "styles",
    "rightSection",
    "rightSectionWidth",
    "theme"
  ]);
  if (rightSection) {
    return { rightSection, rightSectionWidth, styles: styles2 };
  }
  const _styles = typeof styles2 === "function" ? styles2(theme) : styles2;
  return {
    rightSectionWidth: theme.fn.size({ size: props.size, sizes: RIGHT_SECTION_WIDTH3 }),
    rightSection: !props.readOnly && !(props.disabled && props.shouldClear) && import_react221.default.createElement(SelectRightSection, __spreadValues160({}, props)),
    styles: __spreadProps67(__spreadValues160({}, _styles), {
      rightSection: __spreadProps67(__spreadValues160({}, _styles == null ? void 0 : _styles.rightSection), {
        pointerEvents: props.shouldClear ? void 0 : "none"
      })
    })
  };
}

// node_modules/@mantine/core/esm/MultiSelect/MultiSelect.styles.js
var __defProp161 = Object.defineProperty;
var __defProps68 = Object.defineProperties;
var __getOwnPropDescs68 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols163 = Object.getOwnPropertySymbols;
var __hasOwnProp163 = Object.prototype.hasOwnProperty;
var __propIsEnum163 = Object.prototype.propertyIsEnumerable;
var __defNormalProp161 = (obj, key2, value) => key2 in obj ? __defProp161(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues161 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp163.call(b2, prop))
      __defNormalProp161(a2, prop, b2[prop]);
  if (__getOwnPropSymbols163)
    for (var prop of __getOwnPropSymbols163(b2)) {
      if (__propIsEnum163.call(b2, prop))
        __defNormalProp161(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps68 = (a2, b2) => __defProps68(a2, __getOwnPropDescs68(b2));
var useStyles72 = createStyles((theme, { size: size3, invalid: invalid3 }) => ({
  wrapper: {
    position: "relative"
  },
  values: {
    minHeight: theme.fn.size({ size: size3, sizes: sizes4 }) - 2,
    display: "flex",
    alignItems: "center",
    flexWrap: "wrap",
    marginLeft: `calc(${-theme.spacing.xs}px / 2)`,
    boxSizing: "border-box"
  },
  value: {
    margin: `calc(${theme.spacing.xs}px / 2 - 2px) calc(${theme.spacing.xs}px / 2)`
  },
  searchInput: __spreadProps68(__spreadValues161({}, theme.fn.fontStyles()), {
    flex: 1,
    minWidth: 60,
    backgroundColor: "transparent",
    border: 0,
    outline: 0,
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
    padding: 0,
    marginLeft: `calc(${theme.spacing.xs}px / 2)`,
    appearance: "none",
    color: "inherit",
    lineHeight: `${theme.fn.size({ size: size3, sizes: sizes4 }) - 2}px`,
    "&::placeholder": {
      opacity: 1,
      color: invalid3 ? theme.colors.red[theme.colorScheme === "dark" ? 6 : 7] : theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
    },
    "&:disabled": {
      cursor: "not-allowed"
    }
  }),
  searchInputEmpty: {
    width: "100%"
  },
  searchInputInputHidden: {
    width: 0,
    height: 0,
    margin: 0,
    overflow: "hidden"
  },
  searchInputPointer: {
    cursor: "pointer",
    "&:disabled": {
      cursor: "not-allowed"
    }
  },
  input: {
    cursor: "pointer",
    "&:disabled": {
      cursor: "not-allowed"
    }
  }
}));
var MultiSelect_styles_default = useStyles72;

// node_modules/@mantine/core/esm/MultiSelect/MultiSelect.js
var __defProp162 = Object.defineProperty;
var __defProps69 = Object.defineProperties;
var __getOwnPropDescs69 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols164 = Object.getOwnPropertySymbols;
var __hasOwnProp164 = Object.prototype.hasOwnProperty;
var __propIsEnum164 = Object.prototype.propertyIsEnumerable;
var __defNormalProp162 = (obj, key2, value) => key2 in obj ? __defProp162(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues162 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp164.call(b2, prop))
      __defNormalProp162(a2, prop, b2[prop]);
  if (__getOwnPropSymbols164)
    for (var prop of __getOwnPropSymbols164(b2)) {
      if (__propIsEnum164.call(b2, prop))
        __defNormalProp162(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps69 = (a2, b2) => __defProps69(a2, __getOwnPropDescs69(b2));
var __objRest108 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp164.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols164)
    for (var prop of __getOwnPropSymbols164(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum164.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function defaultFilter2(value, selected, item) {
  if (selected) {
    return false;
  }
  return item.label.toLowerCase().trim().includes(value.toLowerCase().trim());
}
function defaultShouldCreate(query, data) {
  return !!query && !data.some((item) => item.value.toLowerCase() === query.toLowerCase());
}
function filterValue(value, data) {
  if (!Array.isArray(value)) {
    return void 0;
  }
  if (data.length === 0) {
    return [];
  }
  const flatData = data.map((item) => {
    if (typeof item === "object") {
      return item.value;
    }
    return item;
  });
  return value.filter((val) => flatData.includes(val));
}
var defaultProps82 = {
  size: "sm",
  valueComponent: DefaultValue2,
  itemComponent: DefaultItem,
  transition: "pop-top-left",
  transitionDuration: 0,
  maxDropdownHeight: 220,
  shadow: "sm",
  searchable: false,
  filter: defaultFilter2,
  limit: Infinity,
  clearSearchOnChange: true,
  clearable: false,
  clearSearchOnBlur: false,
  disabled: false,
  initiallyOpened: false,
  creatable: false,
  shouldCreate: defaultShouldCreate,
  switchDirectionOnFlip: false,
  zIndex: getDefaultZIndex("popover"),
  selectOnBlur: false,
  clearButtonTabIndex: 0,
  positionDependencies: [],
  dropdownPosition: "flip"
};
var MultiSelect = (0, import_react222.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("MultiSelect", defaultProps82, props), {
    className,
    style: style3,
    required,
    label,
    description,
    size: size3,
    error,
    classNames,
    styles: styles2,
    wrapperProps,
    value,
    defaultValue,
    data,
    onChange,
    valueComponent: Value,
    itemComponent,
    id: id2,
    transition,
    transitionDuration,
    transitionTimingFunction,
    maxDropdownHeight,
    shadow,
    nothingFound,
    onFocus,
    onBlur,
    searchable,
    placeholder,
    filter,
    limit,
    clearSearchOnChange,
    clearable,
    clearSearchOnBlur,
    clearButtonLabel,
    variant: variant2,
    onSearchChange,
    searchValue,
    disabled,
    initiallyOpened,
    radius: radius2,
    icon,
    rightSection,
    rightSectionWidth,
    creatable,
    getCreateLabel,
    shouldCreate,
    onCreate: onCreate2,
    sx,
    dropdownComponent,
    onDropdownClose,
    onDropdownOpen,
    maxSelectedValues,
    withinPortal,
    switchDirectionOnFlip,
    zIndex,
    selectOnBlur,
    name,
    dropdownPosition,
    errorProps,
    labelProps,
    descriptionProps,
    clearButtonTabIndex,
    form,
    positionDependencies,
    onKeyDown,
    unstyled,
    inputContainer,
    inputWrapperOrder,
    readOnly,
    withAsterisk,
    hoverOnSearchChange,
    disableSelectedItemFiltering
  } = _a, others = __objRest108(_a, [
    "className",
    "style",
    "required",
    "label",
    "description",
    "size",
    "error",
    "classNames",
    "styles",
    "wrapperProps",
    "value",
    "defaultValue",
    "data",
    "onChange",
    "valueComponent",
    "itemComponent",
    "id",
    "transition",
    "transitionDuration",
    "transitionTimingFunction",
    "maxDropdownHeight",
    "shadow",
    "nothingFound",
    "onFocus",
    "onBlur",
    "searchable",
    "placeholder",
    "filter",
    "limit",
    "clearSearchOnChange",
    "clearable",
    "clearSearchOnBlur",
    "clearButtonLabel",
    "variant",
    "onSearchChange",
    "searchValue",
    "disabled",
    "initiallyOpened",
    "radius",
    "icon",
    "rightSection",
    "rightSectionWidth",
    "creatable",
    "getCreateLabel",
    "shouldCreate",
    "onCreate",
    "sx",
    "dropdownComponent",
    "onDropdownClose",
    "onDropdownOpen",
    "maxSelectedValues",
    "withinPortal",
    "switchDirectionOnFlip",
    "zIndex",
    "selectOnBlur",
    "name",
    "dropdownPosition",
    "errorProps",
    "labelProps",
    "descriptionProps",
    "clearButtonTabIndex",
    "form",
    "positionDependencies",
    "onKeyDown",
    "unstyled",
    "inputContainer",
    "inputWrapperOrder",
    "readOnly",
    "withAsterisk",
    "hoverOnSearchChange",
    "disableSelectedItemFiltering"
  ]);
  const { classes, cx, theme } = MultiSelect_styles_default({ size: size3, invalid: !!error }, { classNames, styles: styles2, unstyled, name: "MultiSelect" });
  const { systemStyles, rest } = extractSystemStyles(others);
  const inputRef = (0, import_react222.useRef)();
  const itemsRefs = (0, import_react222.useRef)({});
  const uuid = useId(id2);
  const [dropdownOpened, setDropdownOpened] = (0, import_react222.useState)(initiallyOpened);
  const [hovered, setHovered] = (0, import_react222.useState)(-1);
  const [direction, setDirection] = (0, import_react222.useState)("column");
  const [_searchValue, handleSearchChange] = useUncontrolled({
    value: searchValue,
    defaultValue: "",
    finalValue: void 0,
    onChange: onSearchChange
  });
  const [IMEOpen, setIMEOpen] = (0, import_react222.useState)(false);
  const { scrollIntoView: scrollIntoView2, targetRef, scrollableRef } = useScrollIntoView({
    duration: 0,
    offset: 5,
    cancelable: false,
    isList: true
  });
  const isCreatable = creatable && typeof getCreateLabel === "function";
  let createLabel = null;
  const formattedData = data.map((item) => typeof item === "string" ? { label: item, value: item } : item);
  const sortedData = groupOptions({ data: formattedData });
  const [_value, setValue] = useUncontrolled({
    value: filterValue(value, data),
    defaultValue: filterValue(defaultValue, data),
    finalValue: [],
    onChange
  });
  const valuesOverflow = (0, import_react222.useRef)(!!maxSelectedValues && maxSelectedValues < _value.length);
  const handleValueRemove = (_val) => {
    if (!readOnly) {
      const newValue = _value.filter((val) => val !== _val);
      setValue(newValue);
      if (!!maxSelectedValues && newValue.length < maxSelectedValues) {
        valuesOverflow.current = false;
      }
    }
  };
  const handleInputChange = (event) => {
    handleSearchChange(event.currentTarget.value);
    !disabled && !valuesOverflow.current && searchable && setDropdownOpened(true);
  };
  const handleInputFocus = (event) => {
    typeof onFocus === "function" && onFocus(event);
    !disabled && !valuesOverflow.current && searchable && setDropdownOpened(true);
  };
  const filteredData = filterData2({
    data: sortedData,
    searchable,
    searchValue: _searchValue,
    limit,
    filter,
    value: _value,
    disableSelectedItemFiltering
  });
  const getNextIndex2 = (index7, nextItem, compareFn) => {
    let i = index7;
    while (compareFn(i)) {
      i = nextItem(i);
      if (!filteredData[i].disabled)
        return i;
    }
    return index7;
  };
  useDidUpdate(() => {
    if (hoverOnSearchChange && _searchValue) {
      setHovered(0);
    } else {
      setHovered(-1);
    }
  }, [_searchValue, hoverOnSearchChange]);
  useDidUpdate(() => {
    if (!disabled && _value.length > data.length) {
      setDropdownOpened(false);
    }
    if (!!maxSelectedValues && _value.length < maxSelectedValues) {
      valuesOverflow.current = false;
    }
    if (!!maxSelectedValues && _value.length >= maxSelectedValues) {
      valuesOverflow.current = true;
      setDropdownOpened(false);
    }
  }, [_value]);
  const handleItemSelect = (item) => {
    if (!readOnly) {
      clearSearchOnChange && handleSearchChange("");
      if (_value.includes(item.value)) {
        handleValueRemove(item.value);
      } else {
        if (item.creatable && typeof onCreate2 === "function") {
          const createdItem = onCreate2(item.value);
          if (typeof createdItem !== "undefined" && createdItem !== null) {
            if (typeof createdItem === "string") {
              setValue([..._value, createdItem]);
            } else {
              setValue([..._value, createdItem.value]);
            }
          }
        } else {
          setValue([..._value, item.value]);
        }
        if (_value.length === maxSelectedValues - 1) {
          valuesOverflow.current = true;
          setDropdownOpened(false);
        }
        if (hovered === filteredData.length - 1) {
          setHovered(filteredData.length - 2);
        }
        if (filteredData.length === 1) {
          setDropdownOpened(false);
        }
      }
    }
  };
  const handleInputBlur = (event) => {
    typeof onBlur === "function" && onBlur(event);
    if (selectOnBlur && filteredData[hovered] && dropdownOpened) {
      handleItemSelect(filteredData[hovered]);
    }
    clearSearchOnBlur && handleSearchChange("");
    setDropdownOpened(false);
  };
  const handleInputKeydown = (event) => {
    if (IMEOpen) {
      return;
    }
    onKeyDown == null ? void 0 : onKeyDown(event);
    if (readOnly) {
      return;
    }
    if (event.key !== "Backspace" && !!maxSelectedValues && valuesOverflow.current) {
      return;
    }
    const isColumn = direction === "column";
    const handleNext = () => {
      setHovered((current) => {
        var _a2;
        const nextIndex = getNextIndex2(current, (index7) => index7 + 1, (index7) => index7 < filteredData.length - 1);
        if (dropdownOpened) {
          targetRef.current = itemsRefs.current[(_a2 = filteredData[nextIndex]) == null ? void 0 : _a2.value];
          scrollIntoView2({
            alignment: isColumn ? "end" : "start"
          });
        }
        return nextIndex;
      });
    };
    const handlePrevious = () => {
      setHovered((current) => {
        var _a2;
        const nextIndex = getNextIndex2(current, (index7) => index7 - 1, (index7) => index7 > 0);
        if (dropdownOpened) {
          targetRef.current = itemsRefs.current[(_a2 = filteredData[nextIndex]) == null ? void 0 : _a2.value];
          scrollIntoView2({
            alignment: isColumn ? "start" : "end"
          });
        }
        return nextIndex;
      });
    };
    switch (event.key) {
      case "ArrowUp": {
        event.preventDefault();
        setDropdownOpened(true);
        isColumn ? handlePrevious() : handleNext();
        break;
      }
      case "ArrowDown": {
        event.preventDefault();
        setDropdownOpened(true);
        isColumn ? handleNext() : handlePrevious();
        break;
      }
      case "Enter": {
        event.preventDefault();
        if (filteredData[hovered] && dropdownOpened) {
          handleItemSelect(filteredData[hovered]);
        } else {
          setDropdownOpened(true);
        }
        break;
      }
      case " ": {
        if (!searchable) {
          event.preventDefault();
          if (filteredData[hovered] && dropdownOpened) {
            handleItemSelect(filteredData[hovered]);
          } else {
            setDropdownOpened(true);
          }
        }
        break;
      }
      case "Backspace": {
        if (_value.length > 0 && _searchValue.length === 0) {
          setValue(_value.slice(0, -1));
          setDropdownOpened(true);
          if (maxSelectedValues) {
            valuesOverflow.current = false;
          }
        }
        break;
      }
      case "Home": {
        if (!searchable) {
          event.preventDefault();
          if (!dropdownOpened) {
            setDropdownOpened(true);
          }
          const firstItemIndex = filteredData.findIndex((item) => !item.disabled);
          setHovered(firstItemIndex);
          scrollIntoView2({
            alignment: isColumn ? "end" : "start"
          });
        }
        break;
      }
      case "End": {
        if (!searchable) {
          event.preventDefault();
          if (!dropdownOpened) {
            setDropdownOpened(true);
          }
          const lastItemIndex = filteredData.map((item) => !!item.disabled).lastIndexOf(false);
          setHovered(lastItemIndex);
          scrollIntoView2({
            alignment: isColumn ? "end" : "start"
          });
        }
        break;
      }
      case "Escape": {
        setDropdownOpened(false);
      }
    }
  };
  const selectedItems = _value.map((val) => {
    let selectedItem = sortedData.find((item) => item.value === val && !item.disabled);
    if (!selectedItem && isCreatable) {
      selectedItem = {
        value: val,
        label: val
      };
    }
    return selectedItem;
  }).filter((val) => !!val).map((item) => import_react222.default.createElement(Value, __spreadProps69(__spreadValues162({}, item), {
    variant: variant2,
    disabled,
    className: classes.value,
    readOnly,
    onRemove: (event) => {
      event.preventDefault();
      event.stopPropagation();
      handleValueRemove(item.value);
    },
    key: item.value,
    size: size3,
    styles: styles2,
    classNames,
    radius: radius2
  })));
  const isItemSelected = (itemValue) => _value.includes(itemValue);
  const handleClear = () => {
    var _a2;
    handleSearchChange("");
    setValue([]);
    (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    if (maxSelectedValues) {
      valuesOverflow.current = false;
    }
  };
  if (isCreatable && shouldCreate(_searchValue, sortedData)) {
    createLabel = getCreateLabel(_searchValue);
    filteredData.push({ label: _searchValue, value: _searchValue, creatable: true });
  }
  const shouldRenderDropdown = !readOnly && (filteredData.length > 0 ? dropdownOpened : dropdownOpened && !!nothingFound);
  useDidUpdate(() => {
    const handler = shouldRenderDropdown ? onDropdownOpen : onDropdownClose;
    typeof handler === "function" && handler();
  }, [shouldRenderDropdown]);
  return import_react222.default.createElement(Input.Wrapper, __spreadValues162(__spreadValues162({
    required,
    id: uuid,
    label,
    error,
    description,
    size: size3,
    className,
    style: style3,
    classNames,
    styles: styles2,
    __staticSelector: "MultiSelect",
    sx,
    errorProps,
    descriptionProps,
    labelProps,
    inputContainer,
    inputWrapperOrder,
    unstyled,
    withAsterisk
  }, systemStyles), wrapperProps), import_react222.default.createElement(SelectPopover, {
    opened: shouldRenderDropdown,
    transition,
    transitionDuration,
    shadow: "sm",
    withinPortal,
    __staticSelector: "MultiSelect",
    onDirectionChange: setDirection,
    switchDirectionOnFlip,
    zIndex,
    dropdownPosition,
    positionDependencies: [...positionDependencies, _searchValue],
    classNames,
    styles: styles2,
    unstyled
  }, import_react222.default.createElement(SelectPopover.Target, null, import_react222.default.createElement("div", {
    className: classes.wrapper,
    role: "combobox",
    "aria-haspopup": "listbox",
    "aria-owns": dropdownOpened && shouldRenderDropdown ? `${uuid}-items` : null,
    "aria-controls": uuid,
    "aria-expanded": dropdownOpened,
    onMouseLeave: () => setHovered(-1),
    tabIndex: -1
  }, import_react222.default.createElement("input", {
    type: "hidden",
    name,
    value: _value.join(","),
    form,
    disabled
  }), import_react222.default.createElement(Input, __spreadValues162({
    __staticSelector: "MultiSelect",
    style: { overflow: "hidden" },
    component: "div",
    multiline: true,
    size: size3,
    variant: variant2,
    disabled,
    invalid: !!error,
    required,
    radius: radius2,
    icon,
    unstyled,
    onMouseDown: (event) => {
      var _a2;
      event.preventDefault();
      !disabled && !valuesOverflow.current && setDropdownOpened(!dropdownOpened);
      (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    },
    classNames: __spreadProps69(__spreadValues162({}, classNames), {
      input: cx({ [classes.input]: !searchable }, classNames == null ? void 0 : classNames.input)
    })
  }, getSelectRightSectionProps({
    theme,
    rightSection,
    rightSectionWidth,
    styles: styles2,
    size: size3,
    shouldClear: clearable && _value.length > 0,
    clearButtonLabel,
    onClear: handleClear,
    error,
    disabled,
    clearButtonTabIndex,
    readOnly
  })), import_react222.default.createElement("div", {
    className: classes.values
  }, selectedItems, import_react222.default.createElement("input", __spreadValues162({
    ref: useMergedRef(ref, inputRef),
    type: "search",
    id: uuid,
    className: cx(classes.searchInput, {
      [classes.searchInputPointer]: !searchable,
      [classes.searchInputInputHidden]: !dropdownOpened && _value.length > 0 || !searchable && _value.length > 0,
      [classes.searchInputEmpty]: _value.length === 0
    }),
    onKeyDown: handleInputKeydown,
    value: _searchValue,
    onChange: handleInputChange,
    onFocus: handleInputFocus,
    onBlur: handleInputBlur,
    readOnly: !searchable || valuesOverflow.current || readOnly,
    placeholder: _value.length === 0 ? placeholder : void 0,
    disabled,
    "data-mantine-stop-propagation": dropdownOpened,
    autoComplete: "off",
    onCompositionStart: () => setIMEOpen(true),
    onCompositionEnd: () => setIMEOpen(false)
  }, rest)))))), import_react222.default.createElement(SelectPopover.Dropdown, {
    component: dropdownComponent || SelectScrollArea,
    maxHeight: maxDropdownHeight,
    direction,
    id: uuid,
    innerRef: scrollableRef,
    __staticSelector: "MultiSelect",
    classNames,
    styles: styles2
  }, import_react222.default.createElement(SelectItems, {
    data: filteredData,
    hovered,
    classNames,
    styles: styles2,
    uuid,
    __staticSelector: "MultiSelect",
    onItemHover: setHovered,
    onItemSelect: handleItemSelect,
    itemsRefs,
    itemComponent,
    size: size3,
    nothingFound,
    isItemSelected,
    creatable: creatable && !!createLabel,
    createLabel,
    unstyled
  }))));
});
MultiSelect.displayName = "@mantine/core/MultiSelect";

// node_modules/@mantine/core/esm/NativeSelect/NativeSelect.js
var import_react223 = __toESM(require_react());
var __defProp163 = Object.defineProperty;
var __defProps70 = Object.defineProperties;
var __getOwnPropDescs70 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols165 = Object.getOwnPropertySymbols;
var __hasOwnProp165 = Object.prototype.hasOwnProperty;
var __propIsEnum165 = Object.prototype.propertyIsEnumerable;
var __defNormalProp163 = (obj, key2, value) => key2 in obj ? __defProp163(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues163 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp165.call(b2, prop))
      __defNormalProp163(a2, prop, b2[prop]);
  if (__getOwnPropSymbols165)
    for (var prop of __getOwnPropSymbols165(b2)) {
      if (__propIsEnum165.call(b2, prop))
        __defNormalProp163(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps70 = (a2, b2) => __defProps70(a2, __getOwnPropDescs70(b2));
var __objRest109 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp165.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols165)
    for (var prop of __getOwnPropSymbols165(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum165.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps83 = {
  size: "sm"
};
var NativeSelect = (0, import_react223.forwardRef)((props, ref) => {
  const _a = useInputProps("NativeSelect", defaultProps83, props), {
    inputProps,
    wrapperProps,
    data,
    onChange,
    value,
    classNames,
    styles: styles2,
    rightSection,
    rightSectionWidth
  } = _a, others = __objRest109(_a, [
    "inputProps",
    "wrapperProps",
    "data",
    "onChange",
    "value",
    "classNames",
    "styles",
    "rightSection",
    "rightSectionWidth"
  ]);
  const theme = useMantineTheme();
  const formattedData = data.map((item) => typeof item === "string" ? { label: item, value: item } : item);
  const options2 = formattedData.map((item) => import_react223.default.createElement("option", {
    key: item.value,
    value: item.value,
    disabled: item.disabled
  }, item.label));
  return import_react223.default.createElement(Input.Wrapper, __spreadProps70(__spreadValues163({}, wrapperProps), {
    __staticSelector: "NativeSelect"
  }), import_react223.default.createElement(Input, __spreadValues163(__spreadProps70(__spreadValues163(__spreadValues163({}, inputProps), others), {
    onChange,
    component: "select",
    ref,
    value: value === null ? "" : value,
    __staticSelector: "NativeSelect",
    pointer: theme.cursorType === "pointer"
  }), getSelectRightSectionProps({
    theme,
    rightSection,
    rightSectionWidth,
    styles: styles2,
    shouldClear: false,
    size: inputProps.size,
    error: wrapperProps.error,
    readOnly: false
  })), options2));
});
NativeSelect.displayName = "@mantine/core/NativeSelect";

// node_modules/@mantine/core/esm/NavLink/NavLink.js
var import_react224 = __toESM(require_react());

// node_modules/@mantine/core/esm/NavLink/NavLink.styles.js
var __defProp164 = Object.defineProperty;
var __defProps71 = Object.defineProperties;
var __getOwnPropDescs71 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols166 = Object.getOwnPropertySymbols;
var __hasOwnProp166 = Object.prototype.hasOwnProperty;
var __propIsEnum166 = Object.prototype.propertyIsEnumerable;
var __defNormalProp164 = (obj, key2, value) => key2 in obj ? __defProp164(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues164 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp166.call(b2, prop))
      __defNormalProp164(a2, prop, b2[prop]);
  if (__getOwnPropSymbols166)
    for (var prop of __getOwnPropSymbols166(b2)) {
      if (__propIsEnum166.call(b2, prop))
        __defNormalProp164(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps71 = (a2, b2) => __defProps71(a2, __getOwnPropDescs71(b2));
var useStyles73 = createStyles((theme, { color: color2, variant: variant2, noWrap, childrenOffset, alignIcon }) => {
  const colors2 = theme.fn.variant({ variant: variant2, color: color2 });
  return {
    root: __spreadProps71(__spreadValues164({
      display: "flex",
      alignItems: "center",
      width: "100%",
      padding: `8px ${theme.spacing.sm}px`,
      userSelect: "none"
    }, theme.fn.hover({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0]
    })), {
      "&[data-active]": __spreadValues164({
        backgroundColor: colors2.background,
        color: colors2.color
      }, theme.fn.hover({ backgroundColor: colors2.hover })),
      "&[data-disabled]": {
        opacity: 0.4,
        pointerEvents: "none"
      }
    }),
    icon: {
      marginRight: theme.spacing.sm,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      alignSelf: alignIcon === "center" ? "center" : "flex-start",
      paddingTop: alignIcon === "center" ? void 0 : 4
    },
    rightSection: {
      marginLeft: theme.spacing.sm,
      display: "flex",
      justifyContent: "center",
      alignItems: "center",
      transition: `transform 150ms ${theme.transitionTimingFunction}`,
      "&[data-rotate]": {
        transform: "rotate(90deg)"
      }
    },
    body: {
      flex: 1,
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: noWrap ? "nowrap" : void 0
    },
    label: {},
    description: {
      display: "block",
      "&[data-active]": {
        color: "inherit"
      }
    },
    children: {
      paddingLeft: theme.fn.size({ size: childrenOffset, sizes: theme.spacing })
    }
  };
});
var NavLink_styles_default = useStyles73;

// node_modules/@mantine/core/esm/NavLink/NavLink.js
var __defProp165 = Object.defineProperty;
var __getOwnPropSymbols167 = Object.getOwnPropertySymbols;
var __hasOwnProp167 = Object.prototype.hasOwnProperty;
var __propIsEnum167 = Object.prototype.propertyIsEnumerable;
var __defNormalProp165 = (obj, key2, value) => key2 in obj ? __defProp165(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues165 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp167.call(b2, prop))
      __defNormalProp165(a2, prop, b2[prop]);
  if (__getOwnPropSymbols167)
    for (var prop of __getOwnPropSymbols167(b2)) {
      if (__propIsEnum167.call(b2, prop))
        __defNormalProp165(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest110 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp167.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols167)
    for (var prop of __getOwnPropSymbols167(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum167.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps84 = {
  variant: "light",
  childrenOffset: "lg"
};
var _NavLink = (0, import_react224.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("NavLink", defaultProps84, props), {
    label,
    description,
    icon,
    rightSection,
    className,
    classNames,
    styles: styles2,
    unstyled,
    active,
    color: color2,
    variant: variant2,
    noWrap,
    children,
    opened,
    defaultOpened,
    onChange,
    disableRightSectionRotation,
    childrenOffset,
    disabled,
    onClick
  } = _a, others = __objRest110(_a, [
    "label",
    "description",
    "icon",
    "rightSection",
    "className",
    "classNames",
    "styles",
    "unstyled",
    "active",
    "color",
    "variant",
    "noWrap",
    "children",
    "opened",
    "defaultOpened",
    "onChange",
    "disableRightSectionRotation",
    "childrenOffset",
    "disabled",
    "onClick"
  ]);
  const { classes, cx } = NavLink_styles_default({ color: color2, variant: variant2, noWrap, childrenOffset, alignIcon: description ? "top" : "center" }, { name: "NavLink", classNames, styles: styles2, unstyled });
  const [_opened, setOpened] = useUncontrolled({
    value: opened,
    defaultValue: defaultOpened,
    finalValue: false,
    onChange
  });
  const withChildren = !!children;
  const handleClick2 = (event) => {
    if (withChildren) {
      event.preventDefault();
      onClick == null ? void 0 : onClick(event);
      setOpened(!_opened);
    } else {
      onClick == null ? void 0 : onClick(event);
    }
  };
  return import_react224.default.createElement(import_react224.default.Fragment, null, import_react224.default.createElement(UnstyledButton, __spreadValues165({
    ref,
    className: cx(classes.root, className),
    "data-active": active || void 0,
    onClick: handleClick2,
    unstyled,
    "data-expanded": _opened || void 0,
    "data-disabled": disabled || void 0,
    disabled
  }, others), icon && import_react224.default.createElement("span", {
    className: classes.icon
  }, icon), import_react224.default.createElement("span", {
    className: classes.body
  }, import_react224.default.createElement(Text, {
    component: "span",
    size: "sm",
    className: classes.label
  }, label), import_react224.default.createElement(Text, {
    component: "span",
    color: "dimmed",
    size: "xs",
    "data-active": active || void 0,
    className: classes.description
  }, description)), (withChildren || rightSection) && import_react224.default.createElement("span", {
    className: classes.rightSection,
    "data-rotate": _opened && !disableRightSectionRotation || void 0
  }, withChildren ? rightSection || import_react224.default.createElement(ChevronIcon, {
    width: 14,
    height: 14,
    style: { transform: "rotate(-90deg)" }
  }) : rightSection)), import_react224.default.createElement(Collapse, {
    in: _opened
  }, import_react224.default.createElement("div", {
    className: classes.children
  }, children)));
});
_NavLink.displayName = "@mantine/core/NavLink";
var NavLink = createPolymorphicComponent(_NavLink);

// node_modules/@mantine/core/esm/Notification/Notification.js
var import_react225 = __toESM(require_react());

// node_modules/@mantine/core/esm/Notification/Notification.styles.js
var useStyles74 = createStyles((theme, { color: color2, radius: radius2, withTitle }, getRef2) => {
  const _radius = theme.fn.radius(radius2);
  const topBottom = Math.min(Math.max(_radius / 1.2, 4), 30);
  const colors2 = theme.fn.variant({ variant: "filled", color: color2 });
  return {
    closeButton: theme.fn.hover({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : theme.colors.gray[0]
    }),
    icon: {
      ref: getRef2("icon"),
      boxSizing: "border-box",
      marginRight: theme.spacing.md,
      width: 28,
      height: 28,
      borderRadius: 28,
      display: "flex",
      flex: "none",
      alignItems: "center",
      justifyContent: "center",
      color: theme.white
    },
    withIcon: {
      paddingLeft: theme.spacing.xs,
      "&::before": {
        display: "none"
      }
    },
    root: {
      boxSizing: "border-box",
      position: "relative",
      display: "flex",
      alignItems: "center",
      overflow: "hidden",
      paddingLeft: 22,
      paddingRight: 5,
      paddingTop: theme.spacing.xs,
      paddingBottom: theme.spacing.xs,
      borderRadius: _radius,
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white,
      boxShadow: theme.shadows.lg,
      border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[2]}`,
      "&::before": {
        content: '""',
        display: "block",
        position: "absolute",
        width: 6,
        top: topBottom,
        bottom: topBottom,
        left: 4,
        borderRadius: _radius,
        backgroundColor: colors2.background
      },
      [`& .${getRef2("icon")}`]: {
        backgroundColor: colors2.background,
        color: theme.white
      }
    },
    body: {
      flex: 1,
      overflow: "hidden",
      marginRight: 10
    },
    loader: {
      marginRight: theme.spacing.md
    },
    title: {
      lineHeight: 1.4,
      marginBottom: 2,
      overflow: "hidden",
      textOverflow: "ellipsis",
      color: theme.colorScheme === "dark" ? theme.white : theme.colors.gray[9]
    },
    description: {
      color: withTitle ? theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6] : theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      lineHeight: 1.4,
      overflow: "hidden",
      textOverflow: "ellipsis"
    }
  };
});
var Notification_styles_default = useStyles74;

// node_modules/@mantine/core/esm/Notification/Notification.js
var __defProp166 = Object.defineProperty;
var __defProps72 = Object.defineProperties;
var __getOwnPropDescs72 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols168 = Object.getOwnPropertySymbols;
var __hasOwnProp168 = Object.prototype.hasOwnProperty;
var __propIsEnum168 = Object.prototype.propertyIsEnumerable;
var __defNormalProp166 = (obj, key2, value) => key2 in obj ? __defProp166(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues166 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp168.call(b2, prop))
      __defNormalProp166(a2, prop, b2[prop]);
  if (__getOwnPropSymbols168)
    for (var prop of __getOwnPropSymbols168(b2)) {
      if (__propIsEnum168.call(b2, prop))
        __defNormalProp166(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps72 = (a2, b2) => __defProps72(a2, __getOwnPropDescs72(b2));
var __objRest111 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp168.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols168)
    for (var prop of __getOwnPropSymbols168(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum168.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var Notification = (0, import_react225.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Notification", {}, props), {
    className,
    color: color2,
    radius: radius2,
    loading,
    disallowClose,
    title,
    icon,
    children,
    onClose,
    closeButtonProps,
    classNames,
    styles: styles2,
    unstyled
  } = _a, others = __objRest111(_a, [
    "className",
    "color",
    "radius",
    "loading",
    "disallowClose",
    "title",
    "icon",
    "children",
    "onClose",
    "closeButtonProps",
    "classNames",
    "styles",
    "unstyled"
  ]);
  const { classes, cx } = Notification_styles_default({ color: color2, radius: radius2, withTitle: !!title }, { classNames, styles: styles2, unstyled, name: "Notification" });
  const withIcon = icon || loading;
  return import_react225.default.createElement(Box, __spreadValues166({
    className: cx(classes.root, { [classes.withIcon]: withIcon }, className),
    role: "alert",
    ref
  }, others), icon && !loading && import_react225.default.createElement("div", {
    className: classes.icon
  }, icon), loading && import_react225.default.createElement(Loader, {
    size: 28,
    color: color2,
    className: classes.loader
  }), import_react225.default.createElement("div", {
    className: classes.body
  }, title && import_react225.default.createElement(Text, {
    className: classes.title,
    size: "sm",
    weight: 500
  }, title), import_react225.default.createElement(Text, {
    color: "dimmed",
    className: classes.description,
    size: "sm"
  }, children)), !disallowClose && import_react225.default.createElement(CloseButton, __spreadProps72(__spreadValues166({
    iconSize: 16,
    color: "gray"
  }, closeButtonProps), {
    onClick: onClose,
    className: classes.closeButton
  })));
});
Notification.displayName = "@mantine/core/Notification";

// node_modules/@mantine/core/esm/NumberInput/NumberInput.js
var import_react228 = __toESM(require_react());

// node_modules/@mantine/core/esm/NumberInput/get-input-mode/get-input-mode.js
var getInputMode = (step, precision, os2) => {
  if (Number.isInteger(step) && step >= 0 && precision === 0)
    return "numeric";
  if (!Number.isInteger(step) && step >= 0 && precision !== 0)
    return "decimal";
  if (Number.isInteger(step) && step < 0 && precision === 0) {
    if (os2 === "ios")
      return "text";
    return "decimal";
  }
  if (!Number.isInteger(step) && step < 0 && precision !== 0) {
    if (os2 === "ios")
      return "text";
    return "decimal";
  }
  return "numeric";
};

// node_modules/@mantine/core/esm/NumberInput/Chevron.js
var import_react226 = __toESM(require_react());
function Chevron({ direction, size: size3 }) {
  return import_react226.default.createElement("svg", {
    style: { transform: direction === "up" ? "rotate(180deg)" : void 0 },
    width: size3,
    height: size3,
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, import_react226.default.createElement("path", {
    d: "M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  }));
}

// node_modules/@mantine/core/esm/NumberInput/NumberInput.styles.js
var CONTROL_SIZES = {
  xs: 20,
  sm: 24,
  md: 30,
  lg: 34,
  xl: 36
};
var useStyles75 = createStyles((theme, { radius: radius2, size: size3 }) => ({
  rightSection: {
    display: "flex",
    flexDirection: "column",
    height: "calc(100% - 2px)",
    margin: 1,
    marginRight: 1,
    overflow: "hidden",
    borderTopRightRadius: theme.fn.radius(radius2),
    borderBottomRightRadius: theme.fn.radius(radius2)
  },
  control: {
    margin: 0,
    position: "relative",
    flex: "0 0 50%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    boxSizing: "border-box",
    width: theme.fn.size({ size: size3, sizes: CONTROL_SIZES }),
    padding: 0,
    WebkitTapHighlightColor: "transparent",
    borderBottom: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]}`,
    borderLeft: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]}`,
    borderTop: 0,
    borderRight: 0,
    backgroundColor: "transparent",
    marginRight: 1,
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    "&:not(:disabled):hover": {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[0]
    },
    "&:disabled": {
      color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[4]
    }
  },
  controlUp: {},
  controlDown: {
    borderBottom: 0
  }
}));
var NumberInput_styles_default = useStyles75;

// node_modules/@mantine/core/esm/TextInput/TextInput.js
var import_react227 = __toESM(require_react());
var __defProp167 = Object.defineProperty;
var __defProps73 = Object.defineProperties;
var __getOwnPropDescs73 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols169 = Object.getOwnPropertySymbols;
var __hasOwnProp169 = Object.prototype.hasOwnProperty;
var __propIsEnum169 = Object.prototype.propertyIsEnumerable;
var __defNormalProp167 = (obj, key2, value) => key2 in obj ? __defProp167(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues167 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp169.call(b2, prop))
      __defNormalProp167(a2, prop, b2[prop]);
  if (__getOwnPropSymbols169)
    for (var prop of __getOwnPropSymbols169(b2)) {
      if (__propIsEnum169.call(b2, prop))
        __defNormalProp167(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps73 = (a2, b2) => __defProps73(a2, __getOwnPropDescs73(b2));
var __objRest112 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp169.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols169)
    for (var prop of __getOwnPropSymbols169(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum169.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps85 = {
  type: "text",
  size: "sm",
  __staticSelector: "TextInput"
};
var TextInput = (0, import_react227.forwardRef)((props, ref) => {
  const _a = useInputProps("TextInput", defaultProps85, props), { inputProps, wrapperProps } = _a, others = __objRest112(_a, ["inputProps", "wrapperProps"]);
  return import_react227.default.createElement(Input.Wrapper, __spreadValues167({}, wrapperProps), import_react227.default.createElement(Input, __spreadProps73(__spreadValues167(__spreadValues167({}, inputProps), others), {
    ref
  })));
});
TextInput.displayName = "@mantine/core/TextInput";

// node_modules/@mantine/core/esm/NumberInput/NumberInput.js
var __defProp168 = Object.defineProperty;
var __defProps74 = Object.defineProperties;
var __getOwnPropDescs74 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols170 = Object.getOwnPropertySymbols;
var __hasOwnProp170 = Object.prototype.hasOwnProperty;
var __propIsEnum170 = Object.prototype.propertyIsEnumerable;
var __defNormalProp168 = (obj, key2, value) => key2 in obj ? __defProp168(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues168 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp170.call(b2, prop))
      __defNormalProp168(a2, prop, b2[prop]);
  if (__getOwnPropSymbols170)
    for (var prop of __getOwnPropSymbols170(b2)) {
      if (__propIsEnum170.call(b2, prop))
        __defNormalProp168(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps74 = (a2, b2) => __defProps74(a2, __getOwnPropDescs74(b2));
var __objRest113 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp170.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols170)
    for (var prop of __getOwnPropSymbols170(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum170.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultFormatter = (value) => value || "";
var defaultParser = (num) => {
  if (num === "-") {
    return num;
  }
  let tempNum = num;
  if (tempNum[0] === ".") {
    tempNum = `0${num}`;
  }
  const parsedNum = parseFloat(tempNum);
  if (Number.isNaN(parsedNum)) {
    return void 0;
  }
  return num;
};
var CHEVRON_SIZES = {
  xs: 10,
  sm: 14,
  md: 16,
  lg: 18,
  xl: 20
};
var defaultProps86 = {
  step: 1,
  hideControls: false,
  size: "sm",
  precision: 0,
  noClampOnBlur: false,
  removeTrailingZeros: false,
  formatter: defaultFormatter,
  parser: defaultParser,
  type: "text"
};
var NumberInput = (0, import_react228.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("NumberInput", defaultProps86, props), {
    readOnly,
    disabled,
    value,
    onChange,
    decimalSeparator,
    min: min5,
    max: max5,
    startValue,
    step,
    stepHoldInterval,
    stepHoldDelay,
    onBlur,
    onFocus,
    onKeyDown,
    onKeyUp,
    hideControls,
    radius: radius2,
    variant: variant2,
    precision,
    removeTrailingZeros,
    defaultValue,
    noClampOnBlur,
    handlersRef,
    classNames,
    styles: styles2,
    size: size3,
    rightSection,
    rightSectionWidth,
    formatter,
    parser,
    inputMode,
    unstyled,
    type
  } = _a, others = __objRest113(_a, [
    "readOnly",
    "disabled",
    "value",
    "onChange",
    "decimalSeparator",
    "min",
    "max",
    "startValue",
    "step",
    "stepHoldInterval",
    "stepHoldDelay",
    "onBlur",
    "onFocus",
    "onKeyDown",
    "onKeyUp",
    "hideControls",
    "radius",
    "variant",
    "precision",
    "removeTrailingZeros",
    "defaultValue",
    "noClampOnBlur",
    "handlersRef",
    "classNames",
    "styles",
    "size",
    "rightSection",
    "rightSectionWidth",
    "formatter",
    "parser",
    "inputMode",
    "unstyled",
    "type"
  ]);
  const { classes, cx, theme } = NumberInput_styles_default({ radius: radius2, size: size3 }, { classNames, styles: styles2, unstyled, name: "NumberInput" });
  const parsePrecision = (val) => {
    if (val === void 0)
      return void 0;
    let result = val.toFixed(precision);
    if (removeTrailingZeros && precision > 0) {
      result = result.replace(new RegExp(`[0]{0,${precision}}$`), "");
      if (result.endsWith(".") || result.endsWith(decimalSeparator)) {
        result = result.slice(0, -1);
      }
    }
    return result;
  };
  const [focused, setFocused] = (0, import_react228.useState)(false);
  const [_value, setValue] = (0, import_react228.useState)(typeof value === "number" ? value : typeof defaultValue === "number" ? defaultValue : void 0);
  const finalValue = typeof value === "number" ? value : _value;
  const [tempValue, setTempValue] = (0, import_react228.useState)(typeof finalValue === "number" ? parsePrecision(finalValue) : "");
  const inputRef = (0, import_react228.useRef)();
  const handleValueChange = (val) => {
    if (val !== _value && !Number.isNaN(val)) {
      typeof onChange === "function" && onChange(val);
      setValue(val);
    }
  };
  const formatNum = (val = "") => {
    let parsedStr = typeof val === "number" ? String(val) : val;
    if (decimalSeparator) {
      parsedStr = parsedStr.replace(/\./g, decimalSeparator);
    }
    return formatter(parsedStr);
  };
  const parseNum2 = (val) => {
    let num = val;
    if (decimalSeparator) {
      num = num.replace(new RegExp(`\\${decimalSeparator}`, "g"), ".");
    }
    return parser(num);
  };
  const _min = typeof min5 === "number" ? min5 : -Infinity;
  const _max = typeof max5 === "number" ? max5 : Infinity;
  const incrementRef = (0, import_react228.useRef)();
  incrementRef.current = () => {
    var _a2, _b, _c;
    if (_value === void 0) {
      handleValueChange((_a2 = startValue != null ? startValue : min5) != null ? _a2 : 0);
      setTempValue((_c = (_b = parsePrecision(startValue)) != null ? _b : parsePrecision(min5)) != null ? _c : "0");
    } else {
      const result = parsePrecision(clamp(_value + step, _min, _max));
      handleValueChange(parseFloat(result));
      setTempValue(result);
    }
  };
  const decrementRef = (0, import_react228.useRef)();
  decrementRef.current = () => {
    var _a2, _b, _c;
    if (_value === void 0) {
      handleValueChange((_a2 = startValue != null ? startValue : min5) != null ? _a2 : 0);
      setTempValue((_c = (_b = parsePrecision(startValue)) != null ? _b : parsePrecision(min5)) != null ? _c : "0");
    } else {
      const result = parsePrecision(clamp(_value - step, _min, _max));
      handleValueChange(parseFloat(result));
      setTempValue(result);
    }
  };
  assignRef(handlersRef, { increment: incrementRef.current, decrement: decrementRef.current });
  (0, import_react228.useEffect)(() => {
    if (typeof value === "number" && !focused) {
      setValue(value);
      setTempValue(parsePrecision(value));
    }
    if (defaultValue === void 0 && value === void 0 && !focused) {
      setValue(value);
      setTempValue("");
    }
  }, [value, precision]);
  const shouldUseStepInterval = stepHoldDelay !== void 0 && stepHoldInterval !== void 0;
  const onStepTimeoutRef = (0, import_react228.useRef)(null);
  const stepCountRef = (0, import_react228.useRef)(0);
  const onStepDone = () => {
    if (onStepTimeoutRef.current) {
      window.clearTimeout(onStepTimeoutRef.current);
    }
    onStepTimeoutRef.current = null;
    stepCountRef.current = 0;
  };
  const onStepHandleChange = (isIncrement) => {
    if (isIncrement) {
      incrementRef.current();
    } else {
      decrementRef.current();
    }
    stepCountRef.current += 1;
  };
  const onStepLoop = (isIncrement) => {
    onStepHandleChange(isIncrement);
    if (shouldUseStepInterval) {
      const interval = typeof stepHoldInterval === "number" ? stepHoldInterval : stepHoldInterval(stepCountRef.current);
      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), interval);
    }
  };
  const onStep = (event, isIncrement) => {
    event.preventDefault();
    inputRef.current.focus();
    onStepHandleChange(isIncrement);
    if (shouldUseStepInterval) {
      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), stepHoldDelay);
    }
  };
  (0, import_react228.useEffect)(() => {
    onStepDone();
    return onStepDone;
  }, []);
  const controls = import_react228.default.createElement("div", {
    className: classes.rightSection
  }, import_react228.default.createElement("button", {
    type: "button",
    tabIndex: -1,
    "aria-hidden": true,
    disabled: finalValue >= max5,
    className: cx(classes.control, classes.controlUp),
    onPointerDown: (event) => {
      onStep(event, true);
    },
    onPointerUp: onStepDone,
    onPointerLeave: onStepDone
  }, import_react228.default.createElement(Chevron, {
    size: theme.fn.size({ size: size3, sizes: CHEVRON_SIZES }),
    direction: "up"
  })), import_react228.default.createElement("button", {
    type: "button",
    tabIndex: -1,
    "aria-hidden": true,
    disabled: finalValue <= min5,
    className: cx(classes.control, classes.controlDown),
    onPointerDown: (event) => {
      onStep(event, false);
    },
    onPointerUp: onStepDone,
    onPointerLeave: onStepDone
  }, import_react228.default.createElement(Chevron, {
    size: theme.fn.size({ size: size3, sizes: CHEVRON_SIZES }),
    direction: "down"
  })));
  const handleChange = (event) => {
    const evt = event.nativeEvent;
    if (evt.isComposing) {
      return;
    }
    const val = event.target.value;
    const parsed = parseNum2(val);
    setTempValue(parsed);
    if (val === "" || val === "-") {
      handleValueChange(void 0);
    } else {
      val.trim() !== "" && !Number.isNaN(parsed) && handleValueChange(parseFloat(parsed));
    }
  };
  const handleBlur = (event) => {
    var _a2;
    if (event.target.value === "") {
      setTempValue("");
      handleValueChange(void 0);
    } else {
      let newNumber = event.target.value;
      if (newNumber[0] === `${decimalSeparator}` || newNumber[0] === ".") {
        newNumber = `0${newNumber}`;
      }
      const parsedVal = parseNum2(newNumber);
      const val = clamp(parseFloat(parsedVal), _min, _max);
      if (!Number.isNaN(val)) {
        if (!noClampOnBlur) {
          setTempValue(parsePrecision(val));
          handleValueChange(parseFloat(parsePrecision(val)));
        }
      } else {
        setTempValue((_a2 = parsePrecision(finalValue)) != null ? _a2 : "");
      }
    }
    setFocused(false);
    typeof onBlur === "function" && onBlur(event);
  };
  const handleFocus = (event) => {
    setFocused(true);
    typeof onFocus === "function" && onFocus(event);
  };
  const handleKeyDown2 = (event) => {
    typeof onKeyDown === "function" && onKeyDown(event);
    if (event.repeat && shouldUseStepInterval && (event.key === "ArrowUp" || event.key === "ArrowDown")) {
      event.preventDefault();
      return;
    }
    if (!readOnly) {
      if (event.key === "ArrowUp") {
        onStep(event, true);
      } else if (event.key === "ArrowDown") {
        onStep(event, false);
      }
    }
  };
  const handleKeyUp = (event) => {
    typeof onKeyUp === "function" && onKeyUp(event);
    if (event.key === "ArrowUp" || event.key === "ArrowDown") {
      onStepDone();
    }
  };
  return import_react228.default.createElement(TextInput, __spreadProps74(__spreadValues168({}, others), {
    type,
    variant: variant2,
    value: formatNum(tempValue),
    disabled,
    readOnly,
    ref: useMergedRef(inputRef, ref),
    onChange: handleChange,
    onBlur: handleBlur,
    onFocus: handleFocus,
    onKeyDown: handleKeyDown2,
    onKeyUp: handleKeyUp,
    rightSection: rightSection || (disabled || readOnly || hideControls || variant2 === "unstyled" ? null : controls),
    rightSectionWidth: rightSectionWidth || theme.fn.size({ size: size3, sizes: CONTROL_SIZES }) + 1,
    radius: radius2,
    max: max5,
    min: min5,
    step,
    size: size3,
    styles: styles2,
    classNames,
    inputMode: inputMode || getInputMode(step, precision, useOs()),
    __staticSelector: "NumberInput",
    unstyled
  }));
});
NumberInput.displayName = "@mantine/core/NumberInput";

// node_modules/@mantine/core/esm/Pagination/Pagination.js
var import_react235 = __toESM(require_react());

// node_modules/@mantine/core/esm/Pagination/DefaultItem/DefaultItem.js
var import_react234 = __toESM(require_react());

// node_modules/@mantine/core/esm/Pagination/icons/DotsIcon.js
var import_react229 = __toESM(require_react());
var __defProp169 = Object.defineProperty;
var __getOwnPropSymbols171 = Object.getOwnPropertySymbols;
var __hasOwnProp171 = Object.prototype.hasOwnProperty;
var __propIsEnum171 = Object.prototype.propertyIsEnumerable;
var __defNormalProp169 = (obj, key2, value) => key2 in obj ? __defProp169(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues169 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp171.call(b2, prop))
      __defNormalProp169(a2, prop, b2[prop]);
  if (__getOwnPropSymbols171)
    for (var prop of __getOwnPropSymbols171(b2)) {
      if (__propIsEnum171.call(b2, prop))
        __defNormalProp169(a2, prop, b2[prop]);
    }
  return a2;
};
function DotsIcon(props) {
  return import_react229.default.createElement("svg", __spreadValues169({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react229.default.createElement("path", {
    d: "M2 8c0-.733.6-1.333 1.333-1.333.734 0 1.334.6 1.334 1.333s-.6 1.333-1.334 1.333C2.6 9.333 2 8.733 2 8zm9.333 0c0-.733.6-1.333 1.334-1.333C13.4 6.667 14 7.267 14 8s-.6 1.333-1.333 1.333c-.734 0-1.334-.6-1.334-1.333zM6.667 8c0-.733.6-1.333 1.333-1.333s1.333.6 1.333 1.333S8.733 9.333 8 9.333 6.667 8.733 6.667 8z",
    fill: "currentColor"
  }));
}

// node_modules/@mantine/core/esm/Pagination/icons/NextIcon.js
var import_react230 = __toESM(require_react());
var __defProp170 = Object.defineProperty;
var __getOwnPropSymbols172 = Object.getOwnPropertySymbols;
var __hasOwnProp172 = Object.prototype.hasOwnProperty;
var __propIsEnum172 = Object.prototype.propertyIsEnumerable;
var __defNormalProp170 = (obj, key2, value) => key2 in obj ? __defProp170(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues170 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp172.call(b2, prop))
      __defNormalProp170(a2, prop, b2[prop]);
  if (__getOwnPropSymbols172)
    for (var prop of __getOwnPropSymbols172(b2)) {
      if (__propIsEnum172.call(b2, prop))
        __defNormalProp170(a2, prop, b2[prop]);
    }
  return a2;
};
function NextIcon(props) {
  return import_react230.default.createElement("svg", __spreadValues170({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react230.default.createElement("path", {
    d: "M8.781 8l-3.3-3.3.943-.943L10.667 8l-4.243 4.243-.943-.943 3.3-3.3z",
    fill: "currentColor"
  }));
}

// node_modules/@mantine/core/esm/Pagination/icons/PrevIcon.js
var import_react231 = __toESM(require_react());
var __defProp171 = Object.defineProperty;
var __getOwnPropSymbols173 = Object.getOwnPropertySymbols;
var __hasOwnProp173 = Object.prototype.hasOwnProperty;
var __propIsEnum173 = Object.prototype.propertyIsEnumerable;
var __defNormalProp171 = (obj, key2, value) => key2 in obj ? __defProp171(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues171 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp173.call(b2, prop))
      __defNormalProp171(a2, prop, b2[prop]);
  if (__getOwnPropSymbols173)
    for (var prop of __getOwnPropSymbols173(b2)) {
      if (__propIsEnum173.call(b2, prop))
        __defNormalProp171(a2, prop, b2[prop]);
    }
  return a2;
};
function PrevIcon(props) {
  return import_react231.default.createElement("svg", __spreadValues171({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react231.default.createElement("path", {
    d: "M7.219 8l3.3 3.3-.943.943L5.333 8l4.243-4.243.943.943-3.3 3.3z",
    fill: "currentColor"
  }));
}

// node_modules/@mantine/core/esm/Pagination/icons/FirstIcon.js
var import_react232 = __toESM(require_react());
var __defProp172 = Object.defineProperty;
var __getOwnPropSymbols174 = Object.getOwnPropertySymbols;
var __hasOwnProp174 = Object.prototype.hasOwnProperty;
var __propIsEnum174 = Object.prototype.propertyIsEnumerable;
var __defNormalProp172 = (obj, key2, value) => key2 in obj ? __defProp172(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues172 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp174.call(b2, prop))
      __defNormalProp172(a2, prop, b2[prop]);
  if (__getOwnPropSymbols174)
    for (var prop of __getOwnPropSymbols174(b2)) {
      if (__propIsEnum174.call(b2, prop))
        __defNormalProp172(a2, prop, b2[prop]);
    }
  return a2;
};
function FirstIcon(props) {
  return import_react232.default.createElement("svg", __spreadValues172({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react232.default.createElement("path", {
    d: "M6.85355 3.85355C7.04882 3.65829 7.04882 3.34171 6.85355 3.14645C6.65829 2.95118 6.34171 2.95118 6.14645 3.14645L2.14645 7.14645C1.95118 7.34171 1.95118 7.65829 2.14645 7.85355L6.14645 11.8536C6.34171 12.0488 6.65829 12.0488 6.85355 11.8536C7.04882 11.6583 7.04882 11.3417 6.85355 11.1464L3.20711 7.5L6.85355 3.85355ZM12.8536 3.85355C13.0488 3.65829 13.0488 3.34171 12.8536 3.14645C12.6583 2.95118 12.3417 2.95118 12.1464 3.14645L8.14645 7.14645C7.95118 7.34171 7.95118 7.65829 8.14645 7.85355L12.1464 11.8536C12.3417 12.0488 12.6583 12.0488 12.8536 11.8536C13.0488 11.6583 13.0488 11.3417 12.8536 11.1464L9.20711 7.5L12.8536 3.85355Z",
    fill: "currentColor"
  }));
}

// node_modules/@mantine/core/esm/Pagination/icons/LastIcon.js
var import_react233 = __toESM(require_react());
var __defProp173 = Object.defineProperty;
var __getOwnPropSymbols175 = Object.getOwnPropertySymbols;
var __hasOwnProp175 = Object.prototype.hasOwnProperty;
var __propIsEnum175 = Object.prototype.propertyIsEnumerable;
var __defNormalProp173 = (obj, key2, value) => key2 in obj ? __defProp173(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues173 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp175.call(b2, prop))
      __defNormalProp173(a2, prop, b2[prop]);
  if (__getOwnPropSymbols175)
    for (var prop of __getOwnPropSymbols175(b2)) {
      if (__propIsEnum175.call(b2, prop))
        __defNormalProp173(a2, prop, b2[prop]);
    }
  return a2;
};
function LastIcon(props) {
  return import_react233.default.createElement("svg", __spreadValues173({
    width: 16,
    height: 16,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react233.default.createElement("path", {
    d: "M2.14645 11.1464C1.95118 11.3417 1.95118 11.6583 2.14645 11.8536C2.34171 12.0488 2.65829 12.0488 2.85355 11.8536L6.85355 7.85355C7.04882 7.65829 7.04882 7.34171 6.85355 7.14645L2.85355 3.14645C2.65829 2.95118 2.34171 2.95118 2.14645 3.14645C1.95118 3.34171 1.95118 3.65829 2.14645 3.85355L5.79289 7.5L2.14645 11.1464ZM8.14645 11.1464C7.95118 11.3417 7.95118 11.6583 8.14645 11.8536C8.34171 12.0488 8.65829 12.0488 8.85355 11.8536L12.8536 7.85355C13.0488 7.65829 13.0488 7.34171 12.8536 7.14645L8.85355 3.14645C8.65829 2.95118 8.34171 2.95118 8.14645 3.14645C7.95118 3.34171 7.95118 3.65829 8.14645 3.85355L11.7929 7.5L8.14645 11.1464Z",
    fill: "currentColor"
  }));
}

// node_modules/@mantine/core/esm/Pagination/DefaultItem/DefaultItem.js
var __defProp174 = Object.defineProperty;
var __getOwnPropSymbols176 = Object.getOwnPropertySymbols;
var __hasOwnProp176 = Object.prototype.hasOwnProperty;
var __propIsEnum176 = Object.prototype.propertyIsEnumerable;
var __defNormalProp174 = (obj, key2, value) => key2 in obj ? __defProp174(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues174 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp176.call(b2, prop))
      __defNormalProp174(a2, prop, b2[prop]);
  if (__getOwnPropSymbols176)
    for (var prop of __getOwnPropSymbols176(b2)) {
      if (__propIsEnum176.call(b2, prop))
        __defNormalProp174(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest114 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp176.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols176)
    for (var prop of __getOwnPropSymbols176(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum176.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var icons = {
  dots: DotsIcon,
  next: NextIcon,
  prev: PrevIcon,
  first: FirstIcon,
  last: LastIcon
};
var rtlIcons = {
  dots: DotsIcon,
  prev: NextIcon,
  next: PrevIcon,
  last: FirstIcon,
  first: LastIcon
};
function DefaultItem2(_a) {
  var _b = _a, { page, active, onClick } = _b, others = __objRest114(_b, ["page", "active", "onClick"]);
  const theme = useMantineTheme();
  const Item3 = (theme.dir === "rtl" ? rtlIcons : icons)[page];
  const children = Item3 ? import_react234.default.createElement(Item3, null) : page;
  return import_react234.default.createElement("button", __spreadValues174({
    type: "button",
    onClick
  }, others), children);
}
DefaultItem2.displayName = "@mantine/core/Pagination/DefaultItem";

// node_modules/@mantine/core/esm/Pagination/Pagination.styles.js
var __defProp175 = Object.defineProperty;
var __defProps75 = Object.defineProperties;
var __getOwnPropDescs75 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols177 = Object.getOwnPropertySymbols;
var __hasOwnProp177 = Object.prototype.hasOwnProperty;
var __propIsEnum177 = Object.prototype.propertyIsEnumerable;
var __defNormalProp175 = (obj, key2, value) => key2 in obj ? __defProp175(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues175 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp177.call(b2, prop))
      __defNormalProp175(a2, prop, b2[prop]);
  if (__getOwnPropSymbols177)
    for (var prop of __getOwnPropSymbols177(b2)) {
      if (__propIsEnum177.call(b2, prop))
        __defNormalProp175(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps75 = (a2, b2) => __defProps75(a2, __getOwnPropDescs75(b2));
var sizes17 = {
  xs: 22,
  sm: 26,
  md: 32,
  lg: 38,
  xl: 44
};
var useStyles76 = createStyles((theme, { size: size3, radius: radius2, color: color2 }) => {
  const colors2 = theme.fn.variant({ color: color2, variant: "filled" });
  return {
    item: __spreadProps75(__spreadValues175(__spreadValues175({}, theme.fn.fontStyles()), theme.fn.focusStyles()), {
      cursor: "pointer",
      userSelect: "none",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]}`,
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      height: theme.fn.size({ size: size3, sizes: sizes17 }),
      minWidth: theme.fn.size({ size: size3, sizes: sizes17 }),
      padding: `0 ${theme.fn.size({ size: size3, sizes: theme.spacing }) / 2}px`,
      fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
      borderRadius: theme.fn.radius(radius2),
      lineHeight: 1,
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white,
      "&:active:not(:disabled):not([data-dots])": theme.activeStyles,
      "&:disabled": {
        opacity: 0.6,
        cursor: "not-allowed",
        color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
      },
      "&[data-dots]": {
        cursor: "default",
        borderColor: "transparent",
        backgroundColor: "transparent"
      },
      "&[data-active]": {
        borderColor: "transparent",
        color: colors2.color,
        backgroundColor: colors2.background
      }
    })
  };
});
var Pagination_styles_default = useStyles76;

// node_modules/@mantine/core/esm/Pagination/Pagination.js
var __defProp176 = Object.defineProperty;
var __getOwnPropSymbols178 = Object.getOwnPropertySymbols;
var __hasOwnProp178 = Object.prototype.hasOwnProperty;
var __propIsEnum178 = Object.prototype.propertyIsEnumerable;
var __defNormalProp176 = (obj, key2, value) => key2 in obj ? __defProp176(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues176 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp178.call(b2, prop))
      __defNormalProp176(a2, prop, b2[prop]);
  if (__getOwnPropSymbols178)
    for (var prop of __getOwnPropSymbols178(b2)) {
      if (__propIsEnum178.call(b2, prop))
        __defNormalProp176(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest115 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp178.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols178)
    for (var prop of __getOwnPropSymbols178(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum178.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps87 = {
  itemComponent: DefaultItem2,
  initialPage: 1,
  siblings: 1,
  boundaries: 1,
  size: "md",
  radius: "sm",
  withEdges: false,
  withControls: true
};
var Pagination = (0, import_react235.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Pagination", defaultProps87, props), {
    itemComponent: Item3,
    classNames,
    styles: styles2,
    page,
    initialPage,
    color: color2,
    total,
    siblings: siblings2,
    boundaries,
    size: size3,
    radius: radius2,
    onChange,
    getItemAriaLabel,
    spacing,
    withEdges,
    withControls,
    sx,
    unstyled,
    disabled
  } = _a, others = __objRest115(_a, [
    "itemComponent",
    "classNames",
    "styles",
    "page",
    "initialPage",
    "color",
    "total",
    "siblings",
    "boundaries",
    "size",
    "radius",
    "onChange",
    "getItemAriaLabel",
    "spacing",
    "withEdges",
    "withControls",
    "sx",
    "unstyled",
    "disabled"
  ]);
  const { classes, theme } = Pagination_styles_default({ color: color2, size: size3, radius: radius2 }, { classNames, styles: styles2, unstyled, name: "Pagination" });
  const { range: range2, setPage, next: next2, previous: previous3, active, first: first2, last: last2 } = usePagination({
    page,
    siblings: siblings2,
    total,
    onChange,
    initialPage,
    boundaries
  });
  if (total <= 0) {
    return null;
  }
  const items = range2.map((pageNumber, index7) => import_react235.default.createElement(Item3, {
    key: index7,
    page: pageNumber,
    active: pageNumber === active,
    "aria-current": pageNumber === active ? "page" : void 0,
    "aria-label": typeof getItemAriaLabel === "function" ? getItemAriaLabel(pageNumber) : null,
    tabIndex: pageNumber === "dots" ? -1 : 0,
    "data-dots": pageNumber === "dots" || void 0,
    "data-active": pageNumber === active || void 0,
    className: classes.item,
    onClick: pageNumber !== "dots" ? () => setPage(pageNumber) : void 0,
    disabled
  }));
  return import_react235.default.createElement(Group, __spreadValues176({
    role: "navigation",
    spacing: spacing != null ? spacing : theme.fn.size({ size: size3, sizes: theme.spacing }) / 2,
    ref,
    sx,
    unstyled
  }, others), withEdges && import_react235.default.createElement(Item3, {
    page: "first",
    onClick: first2,
    "aria-label": getItemAriaLabel ? getItemAriaLabel("first") : void 0,
    "aria-disabled": active === 1 || disabled,
    className: classes.item,
    disabled: active === 1 || disabled
  }), withControls && import_react235.default.createElement(Item3, {
    page: "prev",
    onClick: previous3,
    "aria-label": getItemAriaLabel ? getItemAriaLabel("prev") : void 0,
    "aria-disabled": active === 1 || disabled,
    className: classes.item,
    disabled: active === 1 || disabled
  }), items, withControls && import_react235.default.createElement(Item3, {
    page: "next",
    onClick: next2,
    "aria-label": getItemAriaLabel ? getItemAriaLabel("next") : void 0,
    "aria-disabled": active === total || disabled,
    className: classes.item,
    disabled: active === total || disabled
  }), withEdges && import_react235.default.createElement(Item3, {
    page: "last",
    onClick: last2,
    "aria-label": getItemAriaLabel ? getItemAriaLabel("last") : void 0,
    "aria-disabled": active === total || disabled,
    className: classes.item,
    disabled: active === total || disabled
  }));
});
Pagination.displayName = "@mantine/core/Pagination";

// node_modules/@mantine/core/esm/PasswordInput/PasswordInput.js
var import_react237 = __toESM(require_react());

// node_modules/@mantine/core/esm/PasswordInput/PasswordToggleIcon.js
var import_react236 = __toESM(require_react());
var PasswordToggleIcon = ({
  reveal,
  size: size3 = 15
}) => import_react236.default.createElement("svg", {
  width: size3,
  height: size3,
  viewBox: "0 0 15 15",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg"
}, import_react236.default.createElement("path", {
  d: reveal ? "M13.3536 2.35355C13.5488 2.15829 13.5488 1.84171 13.3536 1.64645C13.1583 1.45118 12.8417 1.45118 12.6464 1.64645L10.6828 3.61012C9.70652 3.21671 8.63759 3 7.5 3C4.30786 3 1.65639 4.70638 0.0760002 7.23501C-0.0253338 7.39715 -0.0253334 7.60288 0.0760014 7.76501C0.902945 9.08812 2.02314 10.1861 3.36061 10.9323L1.64645 12.6464C1.45118 12.8417 1.45118 13.1583 1.64645 13.3536C1.84171 13.5488 2.15829 13.5488 2.35355 13.3536L4.31723 11.3899C5.29348 11.7833 6.36241 12 7.5 12C10.6921 12 13.3436 10.2936 14.924 7.76501C15.0253 7.60288 15.0253 7.39715 14.924 7.23501C14.0971 5.9119 12.9769 4.81391 11.6394 4.06771L13.3536 2.35355ZM9.90428 4.38861C9.15332 4.1361 8.34759 4 7.5 4C4.80285 4 2.52952 5.37816 1.09622 7.50001C1.87284 8.6497 2.89609 9.58106 4.09974 10.1931L9.90428 4.38861ZM5.09572 10.6114L10.9003 4.80685C12.1039 5.41894 13.1272 6.35031 13.9038 7.50001C12.4705 9.62183 10.1971 11 7.5 11C6.65241 11 5.84668 10.8639 5.09572 10.6114Z" : "M7.5 11C4.80285 11 2.52952 9.62184 1.09622 7.50001C2.52952 5.37816 4.80285 4 7.5 4C10.1971 4 12.4705 5.37816 13.9038 7.50001C12.4705 9.62183 10.1971 11 7.5 11ZM7.5 3C4.30786 3 1.65639 4.70638 0.0760002 7.23501C-0.0253338 7.39715 -0.0253334 7.60288 0.0760014 7.76501C1.65639 10.2936 4.30786 12 7.5 12C10.6921 12 13.3436 10.2936 14.924 7.76501C15.0253 7.60288 15.0253 7.39715 14.924 7.23501C13.3436 4.70638 10.6921 3 7.5 3ZM7.5 9.5C8.60457 9.5 9.5 8.60457 9.5 7.5C9.5 6.39543 8.60457 5.5 7.5 5.5C6.39543 5.5 5.5 6.39543 5.5 7.5C5.5 8.60457 6.39543 9.5 7.5 9.5Z",
  fill: "currentColor",
  fillRule: "evenodd",
  clipRule: "evenodd"
}));

// node_modules/@mantine/core/esm/PasswordInput/PasswordInput.styles.js
var __defProp177 = Object.defineProperty;
var __defProps76 = Object.defineProperties;
var __getOwnPropDescs76 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols179 = Object.getOwnPropertySymbols;
var __hasOwnProp179 = Object.prototype.hasOwnProperty;
var __propIsEnum179 = Object.prototype.propertyIsEnumerable;
var __defNormalProp177 = (obj, key2, value) => key2 in obj ? __defProp177(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues177 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp179.call(b2, prop))
      __defNormalProp177(a2, prop, b2[prop]);
  if (__getOwnPropSymbols179)
    for (var prop of __getOwnPropSymbols179(b2)) {
      if (__propIsEnum179.call(b2, prop))
        __defNormalProp177(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps76 = (a2, b2) => __defProps76(a2, __getOwnPropDescs76(b2));
var useStyles77 = createStyles((theme, { size: size3, rightSectionWidth }) => ({
  visibilityToggle: {},
  input: {
    position: "relative",
    overflow: "hidden"
  },
  innerInput: __spreadProps76(__spreadValues177({}, theme.fn.fontStyles()), {
    backgroundColor: "transparent",
    border: "1px solid transparent",
    borderLeftWidth: 0,
    borderRightWidth: 0,
    boxSizing: "border-box",
    position: "absolute",
    display: "block",
    width: `calc(100% - ${rightSectionWidth}px)`,
    paddingLeft: theme.fn.size({ size: size3, sizes: sizes4 }) / 3,
    fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
    height: theme.fn.size({ size: size3, sizes: sizes4 }) - 2,
    lineHeight: `${theme.fn.size({ size: size3, sizes: sizes4 }) - 4}px`,
    color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    "&::-ms-reveal, &::-ms-clear": {
      display: "none"
    },
    "&:focus": {
      outline: 0
    },
    "&:disabled": {
      cursor: "not-allowed"
    },
    "&::placeholder": __spreadProps76(__spreadValues177({}, theme.fn.placeholderStyles()), {
      opacity: 1
    })
  }),
  invalid: {
    color: theme.fn.variant({ variant: "filled", color: "red" }).background,
    "&::placeholder": {
      opacity: 1,
      color: theme.fn.variant({ variant: "filled", color: "red" }).background
    }
  },
  withIcon: {
    paddingLeft: `${theme.fn.size({ size: size3, sizes: sizes4 })}px !important`
  }
}));
var PasswordInput_styles_default = useStyles77;

// node_modules/@mantine/core/esm/PasswordInput/PasswordInput.js
var __defProp178 = Object.defineProperty;
var __defProps77 = Object.defineProperties;
var __getOwnPropDescs77 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols180 = Object.getOwnPropertySymbols;
var __hasOwnProp180 = Object.prototype.hasOwnProperty;
var __propIsEnum180 = Object.prototype.propertyIsEnumerable;
var __defNormalProp178 = (obj, key2, value) => key2 in obj ? __defProp178(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues178 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp180.call(b2, prop))
      __defNormalProp178(a2, prop, b2[prop]);
  if (__getOwnPropSymbols180)
    for (var prop of __getOwnPropSymbols180(b2)) {
      if (__propIsEnum180.call(b2, prop))
        __defNormalProp178(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps77 = (a2, b2) => __defProps77(a2, __getOwnPropDescs77(b2));
var __objRest116 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp180.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols180)
    for (var prop of __getOwnPropSymbols180(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum180.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var buttonSizes2 = {
  xs: 22,
  sm: 26,
  md: 28,
  lg: 32,
  xl: 40
};
var iconSizes5 = {
  xs: 12,
  sm: 15,
  md: 17,
  lg: 19,
  xl: 21
};
var rightSectionSizes = {
  xs: 28,
  sm: 32,
  md: 34,
  lg: 44,
  xl: 54
};
var defaultProps88 = {
  size: "sm",
  toggleTabIndex: -1,
  visibilityToggleIcon: PasswordToggleIcon,
  __staticSelector: "PasswordInput"
};
var PasswordInput = (0, import_react237.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("PasswordInput", defaultProps88, props), {
    radius: radius2,
    disabled,
    size: size3,
    toggleTabIndex,
    className,
    id: id2,
    label,
    error,
    required,
    style: style3,
    icon,
    description,
    wrapperProps,
    classNames,
    styles: styles2,
    variant: variant2,
    visibilityToggleIcon: VisibilityToggleIcon,
    __staticSelector,
    rightSection: _rightSection,
    rightSectionWidth: _rightSectionWidth,
    rightSectionProps: _rightSectionProps,
    sx,
    labelProps,
    descriptionProps,
    errorProps,
    unstyled,
    visibilityToggleLabel,
    withAsterisk,
    inputContainer,
    iconWidth,
    inputWrapperOrder,
    visible: visible2,
    defaultVisible,
    onVisibilityChange
  } = _a, others = __objRest116(_a, [
    "radius",
    "disabled",
    "size",
    "toggleTabIndex",
    "className",
    "id",
    "label",
    "error",
    "required",
    "style",
    "icon",
    "description",
    "wrapperProps",
    "classNames",
    "styles",
    "variant",
    "visibilityToggleIcon",
    "__staticSelector",
    "rightSection",
    "rightSectionWidth",
    "rightSectionProps",
    "sx",
    "labelProps",
    "descriptionProps",
    "errorProps",
    "unstyled",
    "visibilityToggleLabel",
    "withAsterisk",
    "inputContainer",
    "iconWidth",
    "inputWrapperOrder",
    "visible",
    "defaultVisible",
    "onVisibilityChange"
  ]);
  const theme = useMantineTheme();
  const rightSectionWidth = theme.fn.size({ size: size3, sizes: rightSectionSizes });
  const { classes, cx } = PasswordInput_styles_default({ size: size3, rightSectionWidth }, { name: "PasswordInput", classNames, styles: styles2, unstyled });
  const uuid = useId(id2);
  const { systemStyles, rest } = extractSystemStyles(others);
  const [_visible, setVisibility] = useUncontrolled({
    value: visible2,
    defaultValue: defaultVisible,
    finalValue: false,
    onChange: onVisibilityChange
  });
  const toggleVisibility = () => setVisibility(!_visible);
  const rightSection = import_react237.default.createElement(ActionIcon, {
    className: classes.visibilityToggle,
    tabIndex: toggleTabIndex,
    radius: radius2,
    size: theme.fn.size({ size: size3, sizes: buttonSizes2 }),
    "aria-hidden": !visibilityToggleLabel,
    "aria-label": visibilityToggleLabel,
    unstyled,
    onMouseDown: (event) => {
      event.preventDefault();
      toggleVisibility();
    },
    onKeyDown: (event) => {
      if (event.key === " ") {
        event.preventDefault();
        toggleVisibility();
      }
    }
  }, import_react237.default.createElement(VisibilityToggleIcon, {
    reveal: _visible,
    size: theme.fn.size({ size: size3, sizes: iconSizes5 })
  }));
  return import_react237.default.createElement(Input.Wrapper, __spreadValues178(__spreadValues178({
    required,
    id: uuid,
    label,
    error,
    description,
    size: size3,
    className,
    style: style3,
    classNames,
    styles: styles2,
    __staticSelector,
    sx,
    errorProps,
    descriptionProps,
    labelProps,
    unstyled,
    withAsterisk,
    inputWrapperOrder,
    inputContainer
  }, systemStyles), wrapperProps), import_react237.default.createElement(Input, {
    component: "div",
    invalid: !!error,
    icon,
    size: size3,
    classNames: __spreadProps77(__spreadValues178({}, classNames), { input: classes.input }),
    styles: styles2,
    radius: radius2,
    disabled,
    __staticSelector,
    rightSectionWidth,
    rightSection: !disabled && rightSection,
    variant: variant2,
    unstyled,
    iconWidth
  }, import_react237.default.createElement("input", __spreadValues178({
    type: _visible ? "text" : "password",
    required,
    className: cx(classes.innerInput, {
      [classes.withIcon]: icon,
      [classes.invalid]: !!error
    }),
    disabled,
    id: uuid,
    ref
  }, rest))));
});
PasswordInput.displayName = "@mantine/core/PasswordInput";

// node_modules/@mantine/core/esm/Progress/Progress.js
var import_react247 = __toESM(require_react());

// node_modules/@mantine/core/esm/Progress/Progress.styles.js
var sizes18 = {
  xs: 3,
  sm: 5,
  md: 8,
  lg: 12,
  xl: 16
};
var stripesAnimation = keyframes({
  from: { backgroundPosition: "0 0" },
  to: { backgroundPosition: "40px 0" }
});
var useStyles78 = createStyles((theme, { color: color2, radius: radius2, size: size3, striped, animate }) => ({
  root: {
    position: "relative",
    height: theme.fn.size({ size: size3, sizes: sizes18 }),
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
    borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
    overflow: "hidden"
  },
  bar: {
    position: "absolute",
    top: 0,
    bottom: 0,
    left: 0,
    height: "100%",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    backgroundColor: theme.fn.variant({
      variant: "filled",
      primaryFallback: false,
      color: color2 || theme.primaryColor
    }).background,
    transition: "width 100ms linear",
    animation: animate ? `${stripesAnimation} 1000ms linear infinite` : "none",
    backgroundSize: "20px 20px",
    backgroundImage: striped ? "linear-gradient(45deg, rgba(255, 255, 255, 0.15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.15) 50%, rgba(255, 255, 255, 0.15) 75%, transparent 75%, transparent)" : "none",
    "&:last-of-type": {
      borderTopRightRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
      borderBottomRightRadius: theme.fn.size({ size: radius2, sizes: theme.radius })
    },
    "&:first-of-type": {
      borderTopLeftRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
      borderBottomLeftRadius: theme.fn.size({ size: radius2, sizes: theme.radius })
    },
    "@media (prefers-reduced-motion)": {
      transitionDuration: theme.respectReducedMotion ? "0ms" : void 0
    }
  },
  label: {
    color: theme.white,
    fontSize: theme.fn.size({ size: size3, sizes: sizes18 }) * 0.65,
    fontWeight: 700,
    userSelect: "none",
    overflow: "hidden",
    whiteSpace: "nowrap"
  }
}));
var Progress_styles_default = useStyles78;

// node_modules/@mantine/core/esm/Tooltip/Tooltip.js
var import_react246 = __toESM(require_react());

// node_modules/@mantine/core/esm/Tooltip/TooltipGroup/TooltipGroup.js
var import_react239 = __toESM(require_react());

// node_modules/@mantine/core/esm/Tooltip/TooltipGroup/TooltipGroup.context.js
var import_react238 = __toESM(require_react());
var TooltipGroupContext = (0, import_react238.createContext)(false);
var TooltipGroupProvider = TooltipGroupContext.Provider;
var useTooltipGroupContext = () => (0, import_react238.useContext)(TooltipGroupContext);

// node_modules/@mantine/core/esm/Tooltip/TooltipGroup/TooltipGroup.js
function TooltipGroup({ children, openDelay = 0, closeDelay = 0 }) {
  return import_react239.default.createElement(TooltipGroupProvider, {
    value: true
  }, import_react239.default.createElement(FloatingDelayGroup, {
    delay: { open: openDelay, close: closeDelay }
  }, children));
}
TooltipGroup.displayName = "@mantine/core/TooltipGroup";

// node_modules/@mantine/core/esm/Tooltip/TooltipFloating/TooltipFloating.js
var import_react243 = __toESM(require_react());

// node_modules/@mantine/core/esm/Tooltip/Tooltip.styles.js
var __defProp179 = Object.defineProperty;
var __defProps78 = Object.defineProperties;
var __getOwnPropDescs78 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols181 = Object.getOwnPropertySymbols;
var __hasOwnProp181 = Object.prototype.hasOwnProperty;
var __propIsEnum181 = Object.prototype.propertyIsEnumerable;
var __defNormalProp179 = (obj, key2, value) => key2 in obj ? __defProp179(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues179 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp181.call(b2, prop))
      __defNormalProp179(a2, prop, b2[prop]);
  if (__getOwnPropSymbols181)
    for (var prop of __getOwnPropSymbols181(b2)) {
      if (__propIsEnum181.call(b2, prop))
        __defNormalProp179(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps78 = (a2, b2) => __defProps78(a2, __getOwnPropDescs78(b2));
function getColors(theme, color2) {
  if (!color2) {
    return {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[9],
      color: theme.white
    };
  }
  const colors2 = theme.fn.variant({ variant: "filled", color: color2, primaryFallback: false });
  return {
    backgroundColor: colors2.background,
    color: colors2.color
  };
}
var useStyles79 = createStyles((theme, { color: color2, radius: radius2, width, multiline }) => ({
  tooltip: __spreadProps78(__spreadValues179(__spreadValues179({}, theme.fn.fontStyles()), getColors(theme, color2)), {
    lineHeight: theme.lineHeight,
    fontSize: theme.fontSizes.sm,
    borderRadius: theme.fn.radius(radius2),
    padding: `calc(${theme.spacing.xs}px / 2) ${theme.spacing.xs}px`,
    position: "absolute",
    whiteSpace: multiline ? "unset" : "nowrap",
    pointerEvents: "none",
    width
  }),
  arrow: {
    backgroundColor: "inherit",
    border: 0,
    zIndex: 1
  }
}));
var Tooltip_styles_default = useStyles79;

// node_modules/@mantine/core/esm/Tooltip/Tooltip.errors.js
var TOOLTIP_ERRORS = {
  children: "Tooltip component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported"
};

// node_modules/@mantine/core/esm/Tooltip/TooltipFloating/use-floating-tooltip.js
var import_react241 = __toESM(require_react());
function useFloatingTooltip({
  offset: offset3,
  position: position5
}) {
  const [opened, setOpened] = (0, import_react241.useState)(false);
  const boundaryRef = (0, import_react241.useRef)();
  const { x: x3, y, reference: reference2, floating, refs, update, placement } = useFloating2({
    placement: position5,
    middleware: [
      shift2({
        crossAxis: true,
        padding: 5,
        rootBoundary: "document"
      })
    ]
  });
  const horizontalOffset = placement.includes("right") ? offset3 : position5.includes("left") ? offset3 * -1 : 0;
  const verticalOffset = placement.includes("bottom") ? offset3 : position5.includes("top") ? offset3 * -1 : 0;
  const handleMouseMove = (0, import_react241.useCallback)(({ clientX, clientY }) => {
    reference2({
      getBoundingClientRect() {
        return {
          width: 0,
          height: 0,
          x: clientX,
          y: clientY,
          left: clientX + horizontalOffset,
          top: clientY + verticalOffset,
          right: clientX,
          bottom: clientY
        };
      }
    });
  }, [reference2]);
  (0, import_react241.useEffect)(() => {
    if (refs.floating.current) {
      const boundary = boundaryRef.current;
      boundary.addEventListener("mousemove", handleMouseMove);
      const parents = getOverflowAncestors(refs.floating.current);
      parents.forEach((parent) => {
        parent.addEventListener("scroll", update);
      });
      return () => {
        boundary.removeEventListener("mousemove", handleMouseMove);
        parents.forEach((parent) => {
          parent.removeEventListener("scroll", update);
        });
      };
    }
    return void 0;
  }, [reference2, refs.floating.current, update, handleMouseMove, opened]);
  return { handleMouseMove, x: x3, y, opened, setOpened, boundaryRef, floating };
}

// node_modules/@mantine/core/esm/Tooltip/TooltipFloating/TooltipFloating.js
var __defProp180 = Object.defineProperty;
var __defProps79 = Object.defineProperties;
var __getOwnPropDescs79 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols182 = Object.getOwnPropertySymbols;
var __hasOwnProp182 = Object.prototype.hasOwnProperty;
var __propIsEnum182 = Object.prototype.propertyIsEnumerable;
var __defNormalProp180 = (obj, key2, value) => key2 in obj ? __defProp180(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues180 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp182.call(b2, prop))
      __defNormalProp180(a2, prop, b2[prop]);
  if (__getOwnPropSymbols182)
    for (var prop of __getOwnPropSymbols182(b2)) {
      if (__propIsEnum182.call(b2, prop))
        __defNormalProp180(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps79 = (a2, b2) => __defProps79(a2, __getOwnPropDescs79(b2));
var __objRest117 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp182.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols182)
    for (var prop of __getOwnPropSymbols182(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum182.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps89 = {
  refProp: "ref",
  withinPortal: true,
  offset: 10,
  position: "right",
  zIndex: getDefaultZIndex("popover")
};
function TooltipFloating(props) {
  var _b;
  const _a = useComponentDefaultProps("TooltipFloating", defaultProps89, props), {
    children,
    refProp,
    withinPortal,
    style: style3,
    className,
    classNames,
    styles: styles2,
    unstyled,
    radius: radius2,
    color: color2,
    label,
    offset: offset3,
    position: position5,
    multiline,
    width,
    zIndex,
    disabled
  } = _a, others = __objRest117(_a, [
    "children",
    "refProp",
    "withinPortal",
    "style",
    "className",
    "classNames",
    "styles",
    "unstyled",
    "radius",
    "color",
    "label",
    "offset",
    "position",
    "multiline",
    "width",
    "zIndex",
    "disabled"
  ]);
  const { handleMouseMove, x: x3, y, opened, boundaryRef, floating, setOpened } = useFloatingTooltip({
    offset: offset3,
    position: position5
  });
  const { classes, cx } = Tooltip_styles_default({ radius: radius2, color: color2, multiline, width }, { name: "TooltipFloating", classNames, styles: styles2, unstyled });
  if (!isElement3(children)) {
    throw new Error(TOOLTIP_ERRORS.children);
  }
  const targetRef = useMergedRef(boundaryRef, children.ref);
  const onMouseEnter = (event) => {
    var _a2, _b2;
    (_b2 = (_a2 = children.props).onMouseEnter) == null ? void 0 : _b2.call(_a2, event);
    handleMouseMove(event);
    setOpened(true);
  };
  const onMouseLeave = (event) => {
    var _a2, _b2;
    (_b2 = (_a2 = children.props).onMouseLeave) == null ? void 0 : _b2.call(_a2, event);
    setOpened(false);
  };
  return import_react243.default.createElement(import_react243.default.Fragment, null, import_react243.default.createElement(OptionalPortal, {
    withinPortal
  }, import_react243.default.createElement(Box, __spreadProps79(__spreadValues180({}, others), {
    ref: floating,
    className: cx(classes.tooltip, className),
    style: __spreadProps79(__spreadValues180({}, style3), {
      zIndex,
      display: !disabled && opened ? "block" : "none",
      top: y != null ? y : "",
      left: (_b = Math.round(x3)) != null ? _b : ""
    })
  }), label)), (0, import_react243.cloneElement)(children, __spreadProps79(__spreadValues180({}, children.props), {
    [refProp]: targetRef,
    onMouseEnter,
    onMouseLeave
  })));
}
TooltipFloating.displayName = "@mantine/core/TooltipFloating";

// node_modules/@mantine/core/esm/Tooltip/use-tooltip.js
var import_react244 = __toESM(require_react());
function useTooltip(settings) {
  const [uncontrolledOpened, setUncontrolledOpened] = (0, import_react244.useState)(false);
  const controlled = typeof settings.opened === "boolean";
  const opened = controlled ? settings.opened : uncontrolledOpened;
  const withinGroup = useTooltipGroupContext();
  const uid = useId();
  const { delay: groupDelay, currentId, setCurrentId } = useDelayGroupContext();
  const onChange = (0, import_react244.useCallback)((_opened) => {
    setUncontrolledOpened(_opened);
    if (_opened) {
      setCurrentId(uid);
    }
  }, [setCurrentId, uid]);
  const {
    x: x3,
    y,
    reference: reference2,
    floating,
    context,
    refs,
    update,
    placement,
    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }
  } = useFloating2({
    placement: settings.position,
    open: opened,
    onOpenChange: onChange,
    middleware: [
      offset2(settings.offset),
      shift2({ padding: 8 }),
      flip2(),
      arrow3({ element: settings.arrowRef, padding: settings.arrowOffset }),
      ...settings.inline ? [inline()] : []
    ]
  });
  const { getReferenceProps, getFloatingProps } = useInteractions([
    useHover2(context, {
      enabled: settings.events.hover,
      delay: withinGroup ? groupDelay : { open: settings.openDelay, close: settings.closeDelay },
      mouseOnly: !settings.events.touch
    }),
    useFocus(context, { enabled: settings.events.focus, keyboardOnly: true }),
    useRole(context, { role: "tooltip" }),
    useDismiss(context, { enabled: typeof settings.opened === void 0 }),
    useDelayGroup(context, { id: uid })
  ]);
  useFloatingAutoUpdate({
    opened,
    positionDependencies: settings.positionDependencies,
    floating: { refs, update }
  });
  useDidUpdate(() => {
    var _a;
    (_a = settings.onPositionChange) == null ? void 0 : _a.call(settings, placement);
  }, [placement]);
  const isGroupPhase = opened && currentId && currentId !== uid;
  return {
    x: x3,
    y,
    arrowX,
    arrowY,
    reference: reference2,
    floating,
    getFloatingProps,
    getReferenceProps,
    isGroupPhase,
    opened,
    placement
  };
}

// node_modules/@mantine/core/esm/Tooltip/Tooltip.js
var __defProp181 = Object.defineProperty;
var __defProps80 = Object.defineProperties;
var __getOwnPropDescs80 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols183 = Object.getOwnPropertySymbols;
var __hasOwnProp183 = Object.prototype.hasOwnProperty;
var __propIsEnum183 = Object.prototype.propertyIsEnumerable;
var __defNormalProp181 = (obj, key2, value) => key2 in obj ? __defProp181(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues181 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp183.call(b2, prop))
      __defNormalProp181(a2, prop, b2[prop]);
  if (__getOwnPropSymbols183)
    for (var prop of __getOwnPropSymbols183(b2)) {
      if (__propIsEnum183.call(b2, prop))
        __defNormalProp181(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps80 = (a2, b2) => __defProps80(a2, __getOwnPropDescs80(b2));
var __objRest118 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp183.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols183)
    for (var prop of __getOwnPropSymbols183(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum183.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps90 = {
  position: "top",
  refProp: "ref",
  withinPortal: false,
  inline: false,
  arrowSize: 4,
  arrowOffset: 5,
  arrowRadius: 0,
  arrowPosition: "side",
  offset: 5,
  transition: "fade",
  transitionDuration: 100,
  width: "auto",
  events: { hover: true, focus: false, touch: false },
  zIndex: getDefaultZIndex("popover"),
  positionDependencies: []
};
var _Tooltip = (0, import_react246.forwardRef)((props, ref) => {
  const arrowRef = (0, import_react246.useRef)(null);
  const _a = useComponentDefaultProps("Tooltip", defaultProps90, props), {
    children,
    position: position5,
    refProp,
    label,
    openDelay,
    closeDelay,
    onPositionChange,
    opened,
    withinPortal,
    radius: radius2,
    color: color2,
    classNames,
    styles: styles2,
    unstyled,
    style: style3,
    className,
    withArrow,
    arrowSize,
    arrowOffset,
    arrowRadius,
    arrowPosition,
    offset: offset3,
    transition,
    transitionDuration,
    multiline,
    width,
    events,
    zIndex,
    disabled,
    positionDependencies,
    onClick,
    onMouseEnter,
    onMouseLeave,
    inline: inline2
  } = _a, others = __objRest118(_a, [
    "children",
    "position",
    "refProp",
    "label",
    "openDelay",
    "closeDelay",
    "onPositionChange",
    "opened",
    "withinPortal",
    "radius",
    "color",
    "classNames",
    "styles",
    "unstyled",
    "style",
    "className",
    "withArrow",
    "arrowSize",
    "arrowOffset",
    "arrowRadius",
    "arrowPosition",
    "offset",
    "transition",
    "transitionDuration",
    "multiline",
    "width",
    "events",
    "zIndex",
    "disabled",
    "positionDependencies",
    "onClick",
    "onMouseEnter",
    "onMouseLeave",
    "inline"
  ]);
  const { classes, cx, theme } = Tooltip_styles_default({ radius: radius2, color: color2, width, multiline }, { name: "Tooltip", classNames, styles: styles2, unstyled });
  const tooltip = useTooltip({
    position: getFloatingPosition(theme.dir, position5),
    closeDelay,
    openDelay,
    onPositionChange,
    opened,
    events,
    arrowRef,
    arrowOffset,
    offset: offset3 + (withArrow ? arrowSize / 2 : 0),
    positionDependencies: [...positionDependencies, children],
    inline: inline2
  });
  if (!isElement3(children)) {
    throw new Error(TOOLTIP_ERRORS.children);
  }
  const targetRef = useMergedRef(tooltip.reference, children.ref, ref);
  return import_react246.default.createElement(import_react246.default.Fragment, null, import_react246.default.createElement(OptionalPortal, {
    withinPortal
  }, import_react246.default.createElement(Transition, {
    mounted: !disabled && tooltip.opened,
    transition,
    duration: tooltip.isGroupPhase ? 10 : transitionDuration
  }, (transitionStyles) => {
    var _a2, _b;
    return import_react246.default.createElement(Box, __spreadValues181(__spreadValues181({}, others), tooltip.getFloatingProps({
      ref: tooltip.floating,
      className: classes.tooltip,
      style: __spreadProps80(__spreadValues181(__spreadValues181({}, style3), transitionStyles), {
        zIndex,
        top: (_a2 = tooltip.y) != null ? _a2 : 0,
        left: (_b = tooltip.x) != null ? _b : 0
      })
    })), label, import_react246.default.createElement(FloatingArrow, {
      ref: arrowRef,
      arrowX: tooltip.arrowX,
      arrowY: tooltip.arrowY,
      visible: withArrow,
      withBorder: false,
      position: tooltip.placement,
      arrowSize,
      arrowOffset,
      arrowRadius,
      arrowPosition,
      className: classes.arrow
    }));
  })), (0, import_react246.cloneElement)(children, tooltip.getReferenceProps(__spreadValues181({
    onClick,
    onMouseEnter,
    onMouseLeave,
    onMouseMove: props.onMouseMove,
    onPointerDown: props.onPointerDown,
    onPointerEnter: props.onPointerEnter,
    [refProp]: targetRef,
    className: cx(className, children.props.className)
  }, children.props))));
});
_Tooltip.Group = TooltipGroup;
_Tooltip.Floating = TooltipFloating;
_Tooltip.displayName = "@mantine/core/Tooltip";
var Tooltip = _Tooltip;

// node_modules/@mantine/core/esm/Progress/Progress.js
var __defProp182 = Object.defineProperty;
var __defProps81 = Object.defineProperties;
var __getOwnPropDescs81 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols184 = Object.getOwnPropertySymbols;
var __hasOwnProp184 = Object.prototype.hasOwnProperty;
var __propIsEnum184 = Object.prototype.propertyIsEnumerable;
var __defNormalProp182 = (obj, key2, value) => key2 in obj ? __defProp182(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues182 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp184.call(b2, prop))
      __defNormalProp182(a2, prop, b2[prop]);
  if (__getOwnPropSymbols184)
    for (var prop of __getOwnPropSymbols184(b2)) {
      if (__propIsEnum184.call(b2, prop))
        __defNormalProp182(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps81 = (a2, b2) => __defProps81(a2, __getOwnPropDescs81(b2));
var __objRest119 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp184.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols184)
    for (var prop of __getOwnPropSymbols184(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum184.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function getCumulativeSections(sections) {
  return sections.reduce((acc, section) => {
    acc.sections.push(__spreadProps81(__spreadValues182({}, section), { accumulated: acc.accumulated }));
    acc.accumulated += section.value;
    return acc;
  }, { accumulated: 0, sections: [] }).sections;
}
var defaultProps91 = {
  size: "md",
  radius: "sm",
  striped: false,
  animate: false,
  label: ""
};
var Progress = (0, import_react247.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Progress", defaultProps91, props), {
    className,
    value,
    color: color2,
    size: size3,
    radius: radius2,
    striped,
    animate,
    label,
    "aria-label": ariaLabel,
    classNames,
    styles: styles2,
    sections,
    unstyled
  } = _a, others = __objRest119(_a, [
    "className",
    "value",
    "color",
    "size",
    "radius",
    "striped",
    "animate",
    "label",
    "aria-label",
    "classNames",
    "styles",
    "sections",
    "unstyled"
  ]);
  const { classes, cx, theme } = Progress_styles_default({ color: color2, size: size3, radius: radius2, striped: striped || animate, animate }, { classNames, styles: styles2, unstyled, name: "Progress" });
  const segments = Array.isArray(sections) ? getCumulativeSections(sections).map((_b, index7) => {
    var _c = _b, {
      tooltip,
      accumulated,
      value: sectionValue,
      label: sectionLabel,
      color: sectionColor
    } = _c, sectionProps = __objRest119(_c, [
      "tooltip",
      "accumulated",
      "value",
      "label",
      "color"
    ]);
    return import_react247.default.createElement(Tooltip.Floating, {
      label: tooltip,
      disabled: !tooltip,
      key: index7
    }, import_react247.default.createElement(Box, __spreadProps81(__spreadValues182({}, sectionProps), {
      className: cx(classes.bar, sectionProps.className),
      sx: {
        width: `${sectionValue}%`,
        left: `${accumulated}%`,
        backgroundColor: theme.fn.variant({
          variant: "filled",
          primaryFallback: false,
          color: sectionColor || theme.primaryColor
        }).background
      }
    }), sectionLabel && import_react247.default.createElement(Text, {
      className: classes.label
    }, sectionLabel)));
  }) : null;
  return import_react247.default.createElement(Box, __spreadValues182({
    className: cx(classes.root, className),
    ref
  }, others), segments || import_react247.default.createElement("div", {
    role: "progressbar",
    "aria-valuemax": 100,
    "aria-valuemin": 0,
    "aria-valuenow": value,
    "aria-label": ariaLabel,
    className: classes.bar,
    style: { width: `${value}%` }
  }, label ? import_react247.default.createElement(Text, {
    className: classes.label
  }, label) : ""));
});
Progress.displayName = "@mantine/core/Progress";

// node_modules/@mantine/core/esm/Radio/Radio.js
var import_react251 = __toESM(require_react());

// node_modules/@mantine/core/esm/Radio/RadioIcon.js
var import_react248 = __toESM(require_react());
var __defProp183 = Object.defineProperty;
var __getOwnPropSymbols185 = Object.getOwnPropertySymbols;
var __hasOwnProp185 = Object.prototype.hasOwnProperty;
var __propIsEnum185 = Object.prototype.propertyIsEnumerable;
var __defNormalProp183 = (obj, key2, value) => key2 in obj ? __defProp183(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues183 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp185.call(b2, prop))
      __defNormalProp183(a2, prop, b2[prop]);
  if (__getOwnPropSymbols185)
    for (var prop of __getOwnPropSymbols185(b2)) {
      if (__propIsEnum185.call(b2, prop))
        __defNormalProp183(a2, prop, b2[prop]);
    }
  return a2;
};
function RadioIcon(props) {
  return import_react248.default.createElement("svg", __spreadValues183({
    xmlns: "http://www.w3.org/2000/svg",
    fill: "none",
    viewBox: "0 0 5 5"
  }, props), import_react248.default.createElement("path", {
    fill: "currentColor",
    d: "M0 2.5a2.5 2.5 0 115 0 2.5 2.5 0 01-5 0z"
  }));
}

// node_modules/@mantine/core/esm/Radio/RadioGroup.context.js
var import_react249 = __toESM(require_react());
var RadioGroupContext = (0, import_react249.createContext)(null);
var RadioGroupProvider = RadioGroupContext.Provider;
var useRadioGroupContext = () => (0, import_react249.useContext)(RadioGroupContext);

// node_modules/@mantine/core/esm/Radio/RadioGroup/RadioGroup.js
var import_react250 = __toESM(require_react());
var __defProp184 = Object.defineProperty;
var __getOwnPropSymbols186 = Object.getOwnPropertySymbols;
var __hasOwnProp186 = Object.prototype.hasOwnProperty;
var __propIsEnum186 = Object.prototype.propertyIsEnumerable;
var __defNormalProp184 = (obj, key2, value) => key2 in obj ? __defProp184(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues184 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp186.call(b2, prop))
      __defNormalProp184(a2, prop, b2[prop]);
  if (__getOwnPropSymbols186)
    for (var prop of __getOwnPropSymbols186(b2)) {
      if (__propIsEnum186.call(b2, prop))
        __defNormalProp184(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest120 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp186.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols186)
    for (var prop of __getOwnPropSymbols186(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum186.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps92 = {
  orientation: "horizontal",
  spacing: "lg",
  offset: "xs",
  size: "sm"
};
var RadioGroup = (0, import_react250.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("RadioGroup", defaultProps92, props), {
    children,
    value,
    defaultValue,
    onChange,
    orientation,
    spacing,
    size: size3,
    wrapperProps,
    unstyled,
    offset: offset3,
    name
  } = _a, others = __objRest120(_a, [
    "children",
    "value",
    "defaultValue",
    "onChange",
    "orientation",
    "spacing",
    "size",
    "wrapperProps",
    "unstyled",
    "offset",
    "name"
  ]);
  const _name = useId(name);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: "",
    onChange
  });
  const handleChange = (event) => setValue(event.currentTarget.value);
  return import_react250.default.createElement(RadioGroupProvider, {
    value: { value: _value, onChange: handleChange, size: size3, name: _name }
  }, import_react250.default.createElement(Input.Wrapper, __spreadValues184(__spreadValues184({
    labelElement: "div",
    size: size3,
    __staticSelector: "RadioGroup",
    ref,
    unstyled
  }, wrapperProps), others), import_react250.default.createElement(InputsGroup, {
    spacing,
    orientation,
    unstyled,
    role: "radiogroup",
    offset: offset3
  }, children)));
});
RadioGroup.displayName = "@mantine/core/RadioGroup";

// node_modules/@mantine/core/esm/Radio/Radio.styles.js
var __defProp185 = Object.defineProperty;
var __defProps82 = Object.defineProperties;
var __getOwnPropDescs82 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols187 = Object.getOwnPropertySymbols;
var __hasOwnProp187 = Object.prototype.hasOwnProperty;
var __propIsEnum187 = Object.prototype.propertyIsEnumerable;
var __defNormalProp185 = (obj, key2, value) => key2 in obj ? __defProp185(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues185 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp187.call(b2, prop))
      __defNormalProp185(a2, prop, b2[prop]);
  if (__getOwnPropSymbols187)
    for (var prop of __getOwnPropSymbols187(b2)) {
      if (__propIsEnum187.call(b2, prop))
        __defNormalProp185(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps82 = (a2, b2) => __defProps82(a2, __getOwnPropDescs82(b2));
var sizes19 = {
  xs: 16,
  sm: 20,
  md: 24,
  lg: 30,
  xl: 36
};
var iconSizes6 = {
  xs: 6,
  sm: 8,
  md: 10,
  lg: 14,
  xl: 16
};
var useStyles80 = createStyles((theme, { size: size3, color: color2, transitionDuration, labelPosition, error }, getRef2) => {
  const colors2 = theme.fn.variant({ variant: "filled", color: color2 });
  const errorColor = theme.fn.variant({ variant: "filled", color: "red" }).background;
  return {
    inner: {
      order: labelPosition === "left" ? 2 : 1,
      position: "relative",
      alignSelf: "flex-start"
    },
    icon: {
      ref: getRef2("icon"),
      color: theme.white,
      opacity: 0,
      transform: "scale(0.75) translateY(2px)",
      transition: `opacity ${transitionDuration}ms ${theme.transitionTimingFunction}`,
      pointerEvents: "none",
      width: theme.fn.size({ sizes: iconSizes6, size: size3 }),
      height: theme.fn.size({ sizes: iconSizes6, size: size3 }),
      position: "absolute",
      top: `calc(50% - ${theme.fn.size({ sizes: iconSizes6, size: size3 }) / 2}px)`,
      left: `calc(50% - ${theme.fn.size({ sizes: iconSizes6, size: size3 }) / 2}px)`
    },
    radio: __spreadProps82(__spreadValues185({}, theme.fn.focusStyles()), {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.white,
      border: `1px solid ${error ? errorColor : theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]}`,
      position: "relative",
      appearance: "none",
      width: theme.fn.size({ sizes: sizes19, size: size3 }),
      height: theme.fn.size({ sizes: sizes19, size: size3 }),
      borderRadius: theme.fn.size({ sizes: sizes19, size: size3 }),
      margin: 0,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      transitionProperty: "background-color, border-color",
      transitionTimingFunction: theme.transitionTimingFunction,
      transitionDuration: `${transitionDuration}ms`,
      cursor: theme.cursorType,
      "&:checked": {
        background: colors2.background,
        borderColor: colors2.background,
        [`& + .${getRef2("icon")}`]: {
          opacity: 1,
          transform: "scale(1)"
        }
      },
      "&:disabled": {
        borderColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[4],
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1],
        [`& + .${getRef2("icon")}`]: {
          color: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[4]
        }
      }
    })
  };
});
var Radio_styles_default = useStyles80;

// node_modules/@mantine/core/esm/Radio/Radio.js
var __defProp186 = Object.defineProperty;
var __getOwnPropSymbols188 = Object.getOwnPropertySymbols;
var __hasOwnProp188 = Object.prototype.hasOwnProperty;
var __propIsEnum188 = Object.prototype.propertyIsEnumerable;
var __defNormalProp186 = (obj, key2, value) => key2 in obj ? __defProp186(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues186 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp188.call(b2, prop))
      __defNormalProp186(a2, prop, b2[prop]);
  if (__getOwnPropSymbols188)
    for (var prop of __getOwnPropSymbols188(b2)) {
      if (__propIsEnum188.call(b2, prop))
        __defNormalProp186(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest121 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp188.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols188)
    for (var prop of __getOwnPropSymbols188(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum188.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps93 = {
  icon: RadioIcon,
  transitionDuration: 100,
  size: "sm",
  labelPosition: "right"
};
var Radio = (0, import_react251.forwardRef)((props, ref) => {
  var _b, _c;
  const _a = useComponentDefaultProps("Radio", defaultProps93, props), {
    className,
    style: style3,
    id: id2,
    label,
    size: size3,
    title,
    disabled,
    color: color2,
    classNames,
    styles: styles2,
    sx,
    icon: Icon,
    transitionDuration,
    wrapperProps,
    unstyled,
    labelPosition,
    description,
    error
  } = _a, others = __objRest121(_a, [
    "className",
    "style",
    "id",
    "label",
    "size",
    "title",
    "disabled",
    "color",
    "classNames",
    "styles",
    "sx",
    "icon",
    "transitionDuration",
    "wrapperProps",
    "unstyled",
    "labelPosition",
    "description",
    "error"
  ]);
  const ctx = useRadioGroupContext();
  const contextSize = (_b = ctx == null ? void 0 : ctx.size) != null ? _b : size3;
  const componentSize = props.size ? size3 : contextSize;
  const { classes } = Radio_styles_default({ color: color2, size: componentSize, transitionDuration, labelPosition, error: !!error }, { classNames, styles: styles2, unstyled, name: "Radio" });
  const { systemStyles, rest } = extractSystemStyles(others);
  const uuid = useId(id2);
  const contextProps = ctx ? {
    checked: ctx.value === rest.value,
    name: (_c = rest.name) != null ? _c : ctx.name,
    onChange: ctx.onChange
  } : {};
  return import_react251.default.createElement(InlineInput, __spreadValues186(__spreadValues186({
    className,
    sx,
    style: style3,
    id: uuid,
    size: componentSize,
    labelPosition,
    label,
    description,
    error,
    disabled,
    __staticSelector: "Radio",
    classNames,
    styles: styles2,
    unstyled,
    "data-checked": contextProps.checked || void 0
  }, systemStyles), wrapperProps), import_react251.default.createElement("div", {
    className: classes.inner
  }, import_react251.default.createElement("input", __spreadValues186(__spreadValues186({
    ref,
    className: classes.radio,
    type: "radio",
    id: uuid,
    disabled
  }, rest), contextProps)), import_react251.default.createElement(Icon, {
    className: classes.icon,
    "aria-hidden": true
  })));
});
Radio.displayName = "@mantine/core/Radio";
Radio.Group = RadioGroup;

// node_modules/@mantine/core/esm/Rating/Rating.js
var import_react255 = __toESM(require_react());

// node_modules/@mantine/core/esm/Rating/RatingItem/RatingItem.js
var import_react254 = __toESM(require_react());

// node_modules/@mantine/core/esm/Rating/StarSymbol/StarSymbol.js
var import_react253 = __toESM(require_react());

// node_modules/@mantine/core/esm/Rating/StarSymbol/StarIcon.js
var import_react252 = __toESM(require_react());
var __defProp187 = Object.defineProperty;
var __getOwnPropSymbols189 = Object.getOwnPropertySymbols;
var __hasOwnProp189 = Object.prototype.hasOwnProperty;
var __propIsEnum189 = Object.prototype.propertyIsEnumerable;
var __defNormalProp187 = (obj, key2, value) => key2 in obj ? __defProp187(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues187 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp189.call(b2, prop))
      __defNormalProp187(a2, prop, b2[prop]);
  if (__getOwnPropSymbols189)
    for (var prop of __getOwnPropSymbols189(b2)) {
      if (__propIsEnum189.call(b2, prop))
        __defNormalProp187(a2, prop, b2[prop]);
    }
  return a2;
};
function StarIcon(props) {
  return import_react252.default.createElement("svg", __spreadValues187({
    viewBox: "0 0 24 24",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, props), import_react252.default.createElement("path", {
    d: "M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z"
  }));
}
StarIcon.displayName = "@mantine/core/StarIcon";

// node_modules/@mantine/core/esm/Rating/StarSymbol/StarSymbol.styles.js
var sizes20 = {
  xs: 14,
  sm: 18,
  md: 20,
  lg: 28,
  xl: 32
};
var useStyles81 = createStyles((theme, { size: size3, type, color: color2 }) => {
  const emptyColor = theme.colorScheme === "light" ? theme.colors.gray[3] : theme.colors.gray[8];
  const fullColor = theme.fn.variant({ variant: "filled", color: color2 }).background;
  return {
    icon: {
      stroke: type === "empty" ? emptyColor : fullColor,
      fill: type === "empty" ? emptyColor : fullColor,
      width: theme.fn.size({ size: size3, sizes: sizes20 }),
      height: theme.fn.size({ size: size3, sizes: sizes20 })
    }
  };
});
var StarSymbol_styles_default = useStyles81;

// node_modules/@mantine/core/esm/Rating/StarSymbol/StarSymbol.js
function StarSymbol({ size: size3, type, color: color2 }) {
  const { classes } = StarSymbol_styles_default({ size: size3, type, color: color2 });
  return import_react253.default.createElement(StarIcon, {
    className: classes.icon
  });
}
StarSymbol.displayName = "@mantine/core/StarSymbol";

// node_modules/@mantine/core/esm/Rating/RatingItem/RatingItem.styles.js
var useStyles82 = createStyles((theme, _params, getRef2) => ({
  input: {
    height: 0,
    width: 0,
    position: "absolute",
    overflow: "hidden",
    whiteSpace: "nowrap",
    opacity: 0,
    "&:focus": {
      [`& + .${getRef2("label")}`]: {
        outline: theme.focusRing === "always" || theme.focusRing === "auto" ? `1px solid ${theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 7 : 5]}` : void 0
      },
      "&:focus:not(:focus-visible)": {
        [`& + .${getRef2("label")}`]: {
          outline: theme.focusRing === "auto" || theme.focusRing === "never" ? "none" : void 0
        }
      }
    }
  },
  label: {
    ref: getRef2("label"),
    display: "block",
    boxSizing: "border-box",
    marginInline: 1,
    top: 0,
    left: 0,
    cursor: "pointer",
    position: "absolute",
    zIndex: 0,
    "&[data-read-only]": {
      cursor: "default"
    },
    "&:last-of-type": {
      position: "relative",
      zIndex: 0
    }
  },
  symbolBody: {
    display: "grid",
    placeContent: "center",
    placeItems: "center"
  }
}));
var RatingItem_styles_default = useStyles82;

// node_modules/@mantine/core/esm/Rating/RatingItem/RatingItem.js
var __defProp188 = Object.defineProperty;
var __getOwnPropSymbols190 = Object.getOwnPropertySymbols;
var __hasOwnProp190 = Object.prototype.hasOwnProperty;
var __propIsEnum190 = Object.prototype.propertyIsEnumerable;
var __defNormalProp188 = (obj, key2, value) => key2 in obj ? __defProp188(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues188 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp190.call(b2, prop))
      __defNormalProp188(a2, prop, b2[prop]);
  if (__getOwnPropSymbols190)
    for (var prop of __getOwnPropSymbols190(b2)) {
      if (__propIsEnum190.call(b2, prop))
        __defNormalProp188(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest122 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp190.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols190)
    for (var prop of __getOwnPropSymbols190(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum190.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function RatingItem(_a) {
  var _b = _a, {
    size: size3,
    getSymbolLabel,
    emptyIcon,
    fullIcon,
    full,
    active,
    value,
    readOnly,
    fractionValue,
    classNames,
    styles: styles2,
    unstyled,
    color: color2,
    id: id2
  } = _b, others = __objRest122(_b, [
    "size",
    "getSymbolLabel",
    "emptyIcon",
    "fullIcon",
    "full",
    "active",
    "value",
    "readOnly",
    "fractionValue",
    "classNames",
    "styles",
    "unstyled",
    "color",
    "id"
  ]);
  const { classes } = RatingItem_styles_default(null, { name: "Rating", classNames, styles: styles2, unstyled });
  const _fullIcon = typeof fullIcon === "function" ? fullIcon(value) : fullIcon;
  const _emptyIcon = typeof emptyIcon === "function" ? emptyIcon(value) : emptyIcon;
  return import_react254.default.createElement(import_react254.default.Fragment, null, !readOnly && import_react254.default.createElement("input", __spreadValues188({
    className: classes.input,
    id: id2,
    type: "radio",
    "data-active": active,
    "aria-label": getSymbolLabel(value),
    value
  }, others)), import_react254.default.createElement(Box, {
    component: readOnly ? "div" : "label",
    className: classes.label,
    "data-read-only": readOnly || void 0,
    htmlFor: id2,
    sx: fractionValue === 1 ? void 0 : { zIndex: active ? 2 : 0 }
  }, import_react254.default.createElement(Box, {
    className: classes.symbolBody,
    sx: fractionValue === 1 ? void 0 : { clipPath: `inset(0 ${active ? 100 - fractionValue * 100 : 100}% 0 0)` }
  }, full ? _fullIcon || import_react254.default.createElement(StarSymbol, {
    color: color2,
    size: size3,
    type: "full"
  }) : _emptyIcon || import_react254.default.createElement(StarSymbol, {
    color: color2,
    size: size3,
    type: "empty"
  }))));
}
RatingItem.displayName = "@mantine/core/RatingItem";

// node_modules/@mantine/core/esm/Rating/Rating.styles.js
var useStyles83 = createStyles(() => ({
  root: {
    display: "flex",
    width: "max-content"
  },
  symbolGroup: {
    position: "relative",
    transition: "transform 100ms ease",
    '&[data-active="true"]': {
      zIndex: 1,
      transform: "scale(1.2)"
    }
  }
}));
var Rating_styles_default = useStyles83;

// node_modules/@mantine/core/esm/Rating/Rating.js
var __defProp189 = Object.defineProperty;
var __getOwnPropSymbols191 = Object.getOwnPropertySymbols;
var __hasOwnProp191 = Object.prototype.hasOwnProperty;
var __propIsEnum191 = Object.prototype.propertyIsEnumerable;
var __defNormalProp189 = (obj, key2, value) => key2 in obj ? __defProp189(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues189 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp191.call(b2, prop))
      __defNormalProp189(a2, prop, b2[prop]);
  if (__getOwnPropSymbols191)
    for (var prop of __getOwnPropSymbols191(b2)) {
      if (__propIsEnum191.call(b2, prop))
        __defNormalProp189(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest123 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp191.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols191)
    for (var prop of __getOwnPropSymbols191(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum191.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function roundValueTo(value, to3) {
  var _a;
  const rounded = Math.round(value / to3) * to3;
  const precision = ((_a = `${to3}`.split(".")[1]) == null ? void 0 : _a.length) || 0;
  return Number(rounded.toFixed(precision));
}
var defaultProps94 = {
  size: "sm",
  getSymbolLabel: (value) => `${value}`,
  count: 5,
  fractions: 1,
  color: "yellow"
};
var Rating = (0, import_react255.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Rating", defaultProps94, props), {
    defaultValue,
    value,
    emptySymbol,
    fullSymbol,
    size: size3,
    count: count2,
    fractions,
    onChange,
    onHover,
    getSymbolLabel,
    name,
    readOnly,
    className,
    classNames,
    styles: styles2,
    unstyled,
    onMouseEnter,
    onMouseMove,
    onMouseLeave,
    highlightSelectedOnly,
    color: color2,
    id: id2
  } = _a, others = __objRest123(_a, [
    "defaultValue",
    "value",
    "emptySymbol",
    "fullSymbol",
    "size",
    "count",
    "fractions",
    "onChange",
    "onHover",
    "getSymbolLabel",
    "name",
    "readOnly",
    "className",
    "classNames",
    "styles",
    "unstyled",
    "onMouseEnter",
    "onMouseMove",
    "onMouseLeave",
    "highlightSelectedOnly",
    "color",
    "id"
  ]);
  const { classes, cx, theme } = Rating_styles_default(null, { name: "Rating", classNames, styles: styles2, unstyled });
  const _name = useId(name);
  const _id = useId(id2);
  const rootRef = (0, import_react255.useRef)(null);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: 0,
    onChange
  });
  const [hovered, setHovered] = (0, import_react255.useState)(-1);
  const [isOutside, setOutside] = (0, import_react255.useState)(true);
  const _fractions = Math.floor(fractions);
  const _count = Math.floor(count2);
  const decimalUnit = 1 / _fractions;
  const stableValueRounded = roundValueTo(_value, decimalUnit);
  const finalValue = hovered !== -1 ? hovered : stableValueRounded;
  const handleMouseEnter = (event) => {
    onMouseEnter == null ? void 0 : onMouseEnter(event);
    !readOnly && setOutside(false);
  };
  const handleMouseMove = (event) => {
    onMouseMove == null ? void 0 : onMouseMove(event);
    if (readOnly) {
      return;
    }
    const { left: left2, right: right2, width } = rootRef.current.getBoundingClientRect();
    const symbolWidth = width / _count;
    const hoverPosition = theme.dir === "rtl" ? right2 - event.clientX : event.clientX - left2;
    const hoverValue = hoverPosition / symbolWidth;
    const rounded = clamp(roundValueTo(hoverValue + decimalUnit / 2, decimalUnit), decimalUnit, _count);
    setHovered(rounded);
    rounded !== hovered && (onHover == null ? void 0 : onHover(rounded));
  };
  const handleMouseLeave = (event) => {
    onMouseLeave == null ? void 0 : onMouseLeave(event);
    if (readOnly) {
      return;
    }
    setHovered(-1);
    setOutside(true);
    hovered !== -1 && (onHover == null ? void 0 : onHover(-1));
  };
  const handleItemBlur = () => isOutside && setHovered(-1);
  const handleChange = (event) => {
    const resultedValue = parseFloat(event.target.value);
    setValue(resultedValue);
  };
  const items = Array(_count).fill(0).map((_2, index7) => {
    const integerValue = index7 + 1;
    const fractionItems = Array.from(new Array(index7 === 0 ? _fractions + 1 : _fractions));
    const isGroupActive = !readOnly && Math.ceil(hovered) === integerValue;
    return import_react255.default.createElement("div", {
      key: integerValue,
      "data-active": isGroupActive,
      className: classes.symbolGroup
    }, fractionItems.map((__, fractionIndex) => {
      const fractionValue = decimalUnit * (index7 === 0 ? fractionIndex : fractionIndex + 1);
      const symbolValue = roundValueTo(integerValue - 1 + fractionValue, decimalUnit);
      return import_react255.default.createElement(RatingItem, {
        key: `${integerValue}-${symbolValue}`,
        size: size3,
        getSymbolLabel,
        emptyIcon: emptySymbol,
        fullIcon: fullSymbol,
        full: highlightSelectedOnly ? symbolValue === finalValue : symbolValue <= finalValue,
        active: symbolValue === finalValue,
        checked: symbolValue === stableValueRounded,
        readOnly,
        fractionValue,
        value: symbolValue,
        name: _name,
        onChange: handleChange,
        onBlur: handleItemBlur,
        classNames,
        styles: styles2,
        unstyled,
        color: color2,
        id: `${_id}-${index7}-${fractionIndex}`
      });
    }));
  });
  return import_react255.default.createElement(Box, __spreadValues189({
    ref: useMergedRef(rootRef, ref),
    className: cx(classes.root, className),
    onMouseMove: handleMouseMove,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave
  }, others), items);
});
Rating.displayName = "@mantine/core/Rating";

// node_modules/@mantine/core/esm/RingProgress/RingProgress.js
var import_react257 = __toESM(require_react());

// node_modules/@mantine/core/esm/RingProgress/Curve/Curve.js
var import_react256 = __toESM(require_react());

// node_modules/@mantine/core/esm/RingProgress/Curve/get-curve-props.js
function getCurveProps({ size: size3, thickness, sum, value, root: root6, offset: offset3 }) {
  const radius2 = (size3 * 0.9 - thickness * 2) / 2;
  const deg = Math.PI * radius2 * 2 / 100;
  const strokeDasharray = root6 ? `${(100 - sum) * deg}, ${sum * deg}` : `${value * deg}, ${(100 - value) * deg}`;
  return {
    strokeWidth: thickness,
    cx: size3 / 2,
    cy: size3 / 2,
    r: radius2,
    transform: root6 ? `scale(1, -1) translate(0, -${size3})` : null,
    strokeDasharray,
    strokeDashoffset: root6 ? 0 : offset3
  };
}

// node_modules/@mantine/core/esm/RingProgress/Curve/Curve.js
var __defProp190 = Object.defineProperty;
var __defProps83 = Object.defineProperties;
var __getOwnPropDescs83 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols192 = Object.getOwnPropertySymbols;
var __hasOwnProp192 = Object.prototype.hasOwnProperty;
var __propIsEnum192 = Object.prototype.propertyIsEnumerable;
var __defNormalProp190 = (obj, key2, value) => key2 in obj ? __defProp190(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues190 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp192.call(b2, prop))
      __defNormalProp190(a2, prop, b2[prop]);
  if (__getOwnPropSymbols192)
    for (var prop of __getOwnPropSymbols192(b2)) {
      if (__propIsEnum192.call(b2, prop))
        __defNormalProp190(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps83 = (a2, b2) => __defProps83(a2, __getOwnPropDescs83(b2));
var __objRest124 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp192.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols192)
    for (var prop of __getOwnPropSymbols192(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum192.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function Curve(_a) {
  var _b = _a, {
    size: size3,
    value,
    offset: offset3,
    sum,
    thickness,
    root: root6,
    color: color2,
    lineRoundCaps,
    tooltip
  } = _b, others = __objRest124(_b, [
    "size",
    "value",
    "offset",
    "sum",
    "thickness",
    "root",
    "color",
    "lineRoundCaps",
    "tooltip"
  ]);
  const theme = useMantineTheme();
  const stroke = theme.fn.themeColor(color2 || (theme.colorScheme === "dark" ? "dark" : "gray"), color2 ? theme.fn.primaryShade() : theme.colorScheme === "dark" ? 4 : 1, false);
  return import_react256.default.createElement(Tooltip.Floating, {
    disabled: !tooltip,
    label: tooltip
  }, import_react256.default.createElement("circle", __spreadValues190(__spreadProps83(__spreadValues190({}, others), {
    fill: "none",
    strokeLinecap: lineRoundCaps ? "round" : "butt",
    stroke
  }), getCurveProps({ sum, size: size3, thickness, value, offset: offset3, root: root6 }))));
}
Curve.displayName = "@mantine/core/Curve";

// node_modules/@mantine/core/esm/RingProgress/get-curves/get-curves.js
var __defProp191 = Object.defineProperty;
var __defProps84 = Object.defineProperties;
var __getOwnPropDescs84 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols193 = Object.getOwnPropertySymbols;
var __hasOwnProp193 = Object.prototype.hasOwnProperty;
var __propIsEnum193 = Object.prototype.propertyIsEnumerable;
var __defNormalProp191 = (obj, key2, value) => key2 in obj ? __defProp191(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues191 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp193.call(b2, prop))
      __defNormalProp191(a2, prop, b2[prop]);
  if (__getOwnPropSymbols193)
    for (var prop of __getOwnPropSymbols193(b2)) {
      if (__propIsEnum193.call(b2, prop))
        __defNormalProp191(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps84 = (a2, b2) => __defProps84(a2, __getOwnPropDescs84(b2));
function getCurves({
  size: size3,
  thickness,
  sections,
  renderRoundedLineCaps,
  rootColor
}) {
  const sum = sections.reduce((acc, current) => acc + current.value, 0);
  const accumulated = Math.PI * ((size3 * 0.9 - thickness * 2) / 2) * 2;
  let offset3 = accumulated;
  const curves = [];
  const curvesInOrder = [];
  for (let i = 0; i < sections.length; i += 1) {
    curves.push({ sum, offset: offset3, data: sections[i], root: false });
    offset3 -= sections[i].value / 100 * accumulated;
  }
  curves.push({ sum, offset: offset3, data: { color: rootColor }, root: true });
  curvesInOrder.push(__spreadProps84(__spreadValues191({}, curves[curves.length - 1]), { lineRoundCaps: false }));
  if (curves.length > 2) {
    curvesInOrder.push(__spreadProps84(__spreadValues191({}, curves[0]), { lineRoundCaps: renderRoundedLineCaps }));
    curvesInOrder.push(__spreadProps84(__spreadValues191({}, curves[curves.length - 2]), { lineRoundCaps: renderRoundedLineCaps }));
    for (let i = 1; i <= curves.length - 3; i += 1) {
      curvesInOrder.push(__spreadProps84(__spreadValues191({}, curves[i]), { lineRoundCaps: false }));
    }
  } else {
    curvesInOrder.push(__spreadProps84(__spreadValues191({}, curves[0]), { lineRoundCaps: renderRoundedLineCaps }));
  }
  return curvesInOrder;
}

// node_modules/@mantine/core/esm/RingProgress/RingProgress.styles.js
var useStyles84 = createStyles({
  root: {
    position: "relative"
  },
  label: {
    position: "absolute",
    top: "50%",
    transform: "translateY(-50%)"
  }
});
var RingProgress_styles_default = useStyles84;

// node_modules/@mantine/core/esm/RingProgress/RingProgress.js
var __defProp192 = Object.defineProperty;
var __defProps85 = Object.defineProperties;
var __getOwnPropDescs85 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols194 = Object.getOwnPropertySymbols;
var __hasOwnProp194 = Object.prototype.hasOwnProperty;
var __propIsEnum194 = Object.prototype.propertyIsEnumerable;
var __defNormalProp192 = (obj, key2, value) => key2 in obj ? __defProp192(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues192 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp194.call(b2, prop))
      __defNormalProp192(a2, prop, b2[prop]);
  if (__getOwnPropSymbols194)
    for (var prop of __getOwnPropSymbols194(b2)) {
      if (__propIsEnum194.call(b2, prop))
        __defNormalProp192(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps85 = (a2, b2) => __defProps85(a2, __getOwnPropDescs85(b2));
var __objRest125 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp194.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols194)
    for (var prop of __getOwnPropSymbols194(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum194.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps95 = {
  size: 120,
  thickness: 12
};
var RingProgress = (0, import_react257.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("RingProgress", defaultProps95, props), {
    className,
    style: style3,
    label,
    sections,
    size: size3,
    thickness,
    classNames,
    styles: styles2,
    roundCaps,
    rootColor,
    unstyled
  } = _a, others = __objRest125(_a, [
    "className",
    "style",
    "label",
    "sections",
    "size",
    "thickness",
    "classNames",
    "styles",
    "roundCaps",
    "rootColor",
    "unstyled"
  ]);
  const { classes, cx } = RingProgress_styles_default(null, { classNames, styles: styles2, unstyled, name: "RingProgress" });
  const curves = getCurves({
    size: size3,
    thickness,
    sections,
    renderRoundedLineCaps: roundCaps,
    rootColor
  }).map(({ data, sum, root: root6, lineRoundCaps, offset: offset3 }, index7) => import_react257.default.createElement(Curve, __spreadProps85(__spreadValues192({}, data), {
    key: index7,
    size: size3,
    thickness,
    sum,
    offset: offset3,
    color: data == null ? void 0 : data.color,
    root: root6,
    lineRoundCaps
  })));
  return import_react257.default.createElement(Box, __spreadValues192({
    style: __spreadValues192({ width: size3, height: size3 }, style3),
    className: cx(classes.root, className),
    ref
  }, others), import_react257.default.createElement("svg", {
    width: size3,
    height: size3,
    style: { transform: "rotate(-90deg)" }
  }, curves), label && import_react257.default.createElement("div", {
    className: classes.label,
    style: { right: thickness * 2, left: thickness * 2 }
  }, label));
});
RingProgress.displayName = "@mantine/core/RingProgress";

// node_modules/@mantine/core/esm/SegmentedControl/SegmentedControl.js
var import_react258 = __toESM(require_react());

// node_modules/@mantine/core/esm/SegmentedControl/SegmentedControl.styles.js
var __defProp193 = Object.defineProperty;
var __defProps86 = Object.defineProperties;
var __getOwnPropDescs86 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols195 = Object.getOwnPropertySymbols;
var __hasOwnProp195 = Object.prototype.hasOwnProperty;
var __propIsEnum195 = Object.prototype.propertyIsEnumerable;
var __defNormalProp193 = (obj, key2, value) => key2 in obj ? __defProp193(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues193 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp195.call(b2, prop))
      __defNormalProp193(a2, prop, b2[prop]);
  if (__getOwnPropSymbols195)
    for (var prop of __getOwnPropSymbols195(b2)) {
      if (__propIsEnum195.call(b2, prop))
        __defNormalProp193(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps86 = (a2, b2) => __defProps86(a2, __getOwnPropDescs86(b2));
var WRAPPER_PADDING = 4;
var sizes21 = {
  xs: "3px 6px",
  sm: "5px 10px",
  md: "7px 14px",
  lg: "9px 16px",
  xl: "12px 20px"
};
var useStyles85 = createStyles((theme, {
  fullWidth,
  color: color2,
  radius: radius2,
  shouldAnimate,
  transitionDuration,
  transitionTimingFunction,
  size: size3,
  orientation
}, getRef2) => {
  const vertical = orientation === "vertical";
  const colors2 = theme.fn.variant({ variant: "filled", color: color2 });
  return {
    label: __spreadProps86(__spreadValues193(__spreadValues193({
      ref: getRef2("label")
    }, theme.fn.focusStyles()), theme.fn.fontStyles()), {
      WebkitTapHighlightColor: "transparent",
      borderRadius: theme.fn.radius(radius2),
      fontWeight: 500,
      fontSize: size3 in theme.fontSizes ? theme.fontSizes[size3] : theme.fontSizes.sm,
      cursor: "pointer",
      display: "block",
      textAlign: "center",
      padding: sizes21[size3 in sizes21 ? size3 : "sm"],
      whiteSpace: "nowrap",
      overflow: "hidden",
      textOverflow: "ellipsis",
      userSelect: "none",
      color: theme.colorScheme === "dark" ? theme.colors.dark[1] : theme.colors.gray[7],
      transition: `color ${shouldAnimate ? 0 : transitionDuration}ms ${transitionTimingFunction || theme.transitionTimingFunction}`,
      "&:hover": {
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black
      }
    }),
    control: {
      ref: getRef2("control"),
      position: "relative",
      boxSizing: "border-box",
      flex: 1,
      zIndex: 2,
      transition: `border-left-color ${shouldAnimate ? 0 : transitionDuration}ms ${transitionTimingFunction || theme.transitionTimingFunction}`,
      "&:not(:first-of-type)": {
        borderStyle: "solid",
        borderWidth: vertical ? "1px 0 0 0" : "0 0 0 1px",
        borderColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]
      }
    },
    input: {
      height: 0,
      width: 0,
      position: "absolute",
      overflow: "hidden",
      whiteSpace: "nowrap",
      opacity: 0,
      "&:focus": {
        outline: "none",
        [`& + .${getRef2("label")}`]: __spreadValues193({}, theme.focusRing === "always" || theme.focusRing === "auto" ? theme.focusRingStyles.styles(theme) : theme.focusRingStyles.resetStyles(theme)),
        "&:focus:not(:focus-visible)": {
          [`& + .${getRef2("label")}`]: __spreadValues193({}, theme.focusRing === "auto" || theme.focusRing === "never" ? theme.focusRingStyles.resetStyles(theme) : null)
        }
      }
    },
    root: {
      position: "relative",
      display: fullWidth || vertical ? "flex" : "inline-flex",
      width: vertical && !fullWidth ? "max-content" : "auto",
      flexDirection: vertical ? "column" : "row",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : theme.colors.gray[1],
      borderRadius: theme.fn.radius(radius2),
      overflow: "hidden",
      padding: WRAPPER_PADDING
    },
    controlActive: {
      borderLeftColor: "transparent !important",
      borderTopColor: "transparent !important",
      [`& + .${getRef2("control")}`]: {
        borderLeftColor: "transparent !important",
        borderTopColor: "transparent !important"
      },
      borderRadius: theme.fn.radius(radius2),
      boxShadow: shouldAnimate ? color2 || theme.colorScheme === "dark" ? "none" : theme.shadows.xs : void 0,
      backgroundColor: shouldAnimate ? color2 ? colors2.background : theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.white : void 0
    },
    labelActive: {
      "&, &:hover": {
        color: color2 || theme.colorScheme === "dark" ? theme.white : theme.black
      }
    },
    disabled: {
      "&, &:hover": {
        color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5],
        cursor: "not-allowed"
      }
    },
    active: {
      boxSizing: "border-box",
      borderRadius: theme.fn.radius(radius2),
      position: "absolute",
      zIndex: 1,
      boxShadow: color2 || theme.colorScheme === "dark" ? "none" : theme.shadows.xs,
      transition: `transform ${shouldAnimate ? 0 : transitionDuration}ms ${theme.transitionTimingFunction}, width ${shouldAnimate ? 0 : transitionDuration / 2}ms ${transitionTimingFunction || theme.transitionTimingFunction}`,
      backgroundColor: color2 ? colors2.background : theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.white
    }
  };
});
var SegmentedControl_styles_default = useStyles85;

// node_modules/@mantine/core/esm/SegmentedControl/SegmentedControl.js
var __defProp194 = Object.defineProperty;
var __getOwnPropSymbols196 = Object.getOwnPropertySymbols;
var __hasOwnProp196 = Object.prototype.hasOwnProperty;
var __propIsEnum196 = Object.prototype.propertyIsEnumerable;
var __defNormalProp194 = (obj, key2, value) => key2 in obj ? __defProp194(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues194 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp196.call(b2, prop))
      __defNormalProp194(a2, prop, b2[prop]);
  if (__getOwnPropSymbols196)
    for (var prop of __getOwnPropSymbols196(b2)) {
      if (__propIsEnum196.call(b2, prop))
        __defNormalProp194(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest126 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp196.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols196)
    for (var prop of __getOwnPropSymbols196(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum196.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps96 = {
  disabled: false,
  size: "sm",
  transitionDuration: 200
};
var SegmentedControl = (0, import_react258.forwardRef)((props, ref) => {
  var _b, _c, _d, _e2;
  const _a = useComponentDefaultProps("SegmentedControl", defaultProps96, props), {
    className,
    disabled,
    data: _data,
    name,
    value,
    onChange,
    color: color2,
    fullWidth,
    radius: radius2,
    size: size3,
    transitionDuration,
    transitionTimingFunction,
    classNames,
    styles: styles2,
    defaultValue,
    orientation,
    unstyled
  } = _a, others = __objRest126(_a, [
    "className",
    "disabled",
    "data",
    "name",
    "value",
    "onChange",
    "color",
    "fullWidth",
    "radius",
    "size",
    "transitionDuration",
    "transitionTimingFunction",
    "classNames",
    "styles",
    "defaultValue",
    "orientation",
    "unstyled"
  ]);
  const theme = useMantineTheme();
  const shouldReduceMotion = useReducedMotion();
  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;
  const data = _data.map((item) => typeof item === "string" ? { label: item, value: item } : item);
  const mounted = (0, import_react258.useRef)();
  const [shouldAnimate, setShouldAnimate] = (0, import_react258.useState)(false);
  const [_value, handleValueChange] = useUncontrolled({
    value,
    defaultValue,
    finalValue: Array.isArray(data) ? (_e2 = (_d = (_b = data.find((item) => !item.disabled)) == null ? void 0 : _b.value) != null ? _d : (_c = data[0]) == null ? void 0 : _c.value) != null ? _e2 : null : null,
    onChange
  });
  const { classes, cx } = SegmentedControl_styles_default({
    size: size3,
    fullWidth,
    color: color2,
    radius: radius2,
    shouldAnimate: reduceMotion || !shouldAnimate,
    transitionDuration,
    transitionTimingFunction,
    orientation
  }, { classNames, styles: styles2, unstyled, name: "SegmentedControl" });
  const [activePosition, setActivePosition] = (0, import_react258.useState)({
    width: 0,
    height: 0,
    translate: [0, 0]
  });
  const uuid = useId(name);
  const refs = (0, import_react258.useRef)({});
  const [observerRef, containerRect] = useResizeObserver();
  useIsomorphicEffect(() => {
    if (!mounted.current) {
      mounted.current = true;
      setShouldAnimate(false);
    } else {
      setShouldAnimate(true);
    }
  });
  (0, import_react258.useEffect)(() => {
    if (_value in refs.current && observerRef.current) {
      const element7 = refs.current[_value];
      const elementRect = element7.getBoundingClientRect();
      const scaledValue = element7.offsetWidth / elementRect.width;
      const width = elementRect.width * scaledValue || 0;
      const height = elementRect.height * scaledValue || 0;
      const offsetRight = containerRect.width - element7.parentElement.offsetLeft + WRAPPER_PADDING - width;
      const offsetLeft = element7.parentElement.offsetLeft - WRAPPER_PADDING;
      setActivePosition({
        width,
        height,
        translate: [
          theme.dir === "rtl" ? offsetRight : offsetLeft,
          element7.parentElement.offsetTop - WRAPPER_PADDING
        ]
      });
    }
  }, [_value, containerRect]);
  const controls = data.map((item) => import_react258.default.createElement("div", {
    className: cx(classes.control, { [classes.controlActive]: _value === item.value }),
    key: item.value
  }, import_react258.default.createElement("input", {
    className: classes.input,
    disabled: disabled || item.disabled,
    type: "radio",
    name: uuid,
    value: item.value,
    id: `${uuid}-${item.value}`,
    checked: _value === item.value,
    onChange: () => handleValueChange(item.value)
  }), import_react258.default.createElement("label", {
    className: cx(classes.label, {
      [classes.labelActive]: _value === item.value,
      [classes.disabled]: disabled || item.disabled
    }),
    htmlFor: `${uuid}-${item.value}`,
    ref: (node4) => {
      refs.current[item.value] = node4;
    }
  }, item.label)));
  const mergedRef = useMergedRef(observerRef, ref);
  if (data.length === 0) {
    return null;
  }
  return import_react258.default.createElement(Box, __spreadValues194({
    className: cx(classes.root, className),
    ref: mergedRef
  }, others), typeof _value === "string" && shouldAnimate && import_react258.default.createElement(Box, {
    component: "span",
    className: classes.active,
    sx: {
      width: activePosition.width,
      height: activePosition.height,
      transform: `translate(${activePosition.translate[0]}px, ${activePosition.translate[1]}px )`
    }
  }), controls);
});
SegmentedControl.displayName = "@mantine/core/SegmentedControl";

// node_modules/@mantine/core/esm/Select/Select.js
var import_react259 = __toESM(require_react());

// node_modules/@mantine/core/esm/Select/filter-data/filter-data.js
function filterData3({
  data,
  searchable,
  limit,
  searchValue,
  filter,
  value,
  filterDataOnExactSearchMatch
}) {
  if (!searchable) {
    return data;
  }
  const selected = value != null ? data.find((item) => item.value === value) || null : null;
  if (selected && !filterDataOnExactSearchMatch && (selected == null ? void 0 : selected.label) === searchValue) {
    if (limit) {
      if (limit >= data.length) {
        return data;
      }
      const firstIndex = data.indexOf(selected);
      const lastIndex = firstIndex + limit;
      const firstIndexOffset = lastIndex - data.length;
      if (firstIndexOffset > 0) {
        return data.slice(firstIndex - firstIndexOffset);
      }
      return data.slice(firstIndex, lastIndex);
    }
    return data;
  }
  const result = [];
  for (let i = 0; i < data.length; i += 1) {
    if (filter(searchValue, data[i])) {
      result.push(data[i]);
    }
    if (result.length >= limit) {
      break;
    }
  }
  return result;
}

// node_modules/@mantine/core/esm/Select/Select.styles.js
var useStyles86 = createStyles(() => ({
  input: {
    "&:not(:disabled)": {
      cursor: "pointer",
      "&::selection": {
        backgroundColor: "transparent"
      }
    }
  }
}));
var Select_styles_default = useStyles86;

// node_modules/@mantine/core/esm/Select/Select.js
var __defProp195 = Object.defineProperty;
var __defProps87 = Object.defineProperties;
var __getOwnPropDescs87 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols197 = Object.getOwnPropertySymbols;
var __hasOwnProp197 = Object.prototype.hasOwnProperty;
var __propIsEnum197 = Object.prototype.propertyIsEnumerable;
var __defNormalProp195 = (obj, key2, value) => key2 in obj ? __defProp195(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues195 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp197.call(b2, prop))
      __defNormalProp195(a2, prop, b2[prop]);
  if (__getOwnPropSymbols197)
    for (var prop of __getOwnPropSymbols197(b2)) {
      if (__propIsEnum197.call(b2, prop))
        __defNormalProp195(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps87 = (a2, b2) => __defProps87(a2, __getOwnPropDescs87(b2));
var __objRest127 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp197.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols197)
    for (var prop of __getOwnPropSymbols197(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum197.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function defaultFilter3(value, item) {
  return item.label.toLowerCase().trim().includes(value.toLowerCase().trim());
}
function defaultShouldCreate2(query, data) {
  return !!query && !data.some((item) => item.label.toLowerCase() === query.toLowerCase());
}
var defaultProps97 = {
  required: false,
  size: "sm",
  shadow: "sm",
  itemComponent: DefaultItem,
  transition: "fade",
  transitionDuration: 0,
  initiallyOpened: false,
  filter: defaultFilter3,
  maxDropdownHeight: 220,
  searchable: false,
  clearable: false,
  limit: Infinity,
  disabled: false,
  creatable: false,
  shouldCreate: defaultShouldCreate2,
  selectOnBlur: false,
  switchDirectionOnFlip: false,
  filterDataOnExactSearchMatch: false,
  zIndex: getDefaultZIndex("popover"),
  clearButtonTabIndex: 0,
  positionDependencies: [],
  dropdownPosition: "flip"
};
var Select = (0, import_react259.forwardRef)((props, ref) => {
  const _a = useInputProps("Select", defaultProps97, props), {
    inputProps,
    wrapperProps,
    shadow,
    data,
    value,
    defaultValue,
    onChange,
    itemComponent,
    onKeyDown,
    onBlur,
    onFocus,
    transition,
    transitionDuration,
    initiallyOpened,
    transitionTimingFunction,
    unstyled,
    classNames,
    styles: styles2,
    filter,
    maxDropdownHeight,
    searchable,
    clearable,
    nothingFound,
    clearButtonLabel,
    limit,
    disabled,
    onSearchChange,
    searchValue,
    rightSection,
    rightSectionWidth,
    creatable,
    getCreateLabel,
    shouldCreate,
    selectOnBlur,
    onCreate: onCreate2,
    dropdownComponent,
    onDropdownClose,
    onDropdownOpen,
    withinPortal,
    switchDirectionOnFlip,
    zIndex,
    name,
    dropdownPosition,
    allowDeselect,
    placeholder,
    filterDataOnExactSearchMatch,
    clearButtonTabIndex,
    form,
    positionDependencies,
    readOnly,
    hoverOnSearchChange
  } = _a, others = __objRest127(_a, [
    "inputProps",
    "wrapperProps",
    "shadow",
    "data",
    "value",
    "defaultValue",
    "onChange",
    "itemComponent",
    "onKeyDown",
    "onBlur",
    "onFocus",
    "transition",
    "transitionDuration",
    "initiallyOpened",
    "transitionTimingFunction",
    "unstyled",
    "classNames",
    "styles",
    "filter",
    "maxDropdownHeight",
    "searchable",
    "clearable",
    "nothingFound",
    "clearButtonLabel",
    "limit",
    "disabled",
    "onSearchChange",
    "searchValue",
    "rightSection",
    "rightSectionWidth",
    "creatable",
    "getCreateLabel",
    "shouldCreate",
    "selectOnBlur",
    "onCreate",
    "dropdownComponent",
    "onDropdownClose",
    "onDropdownOpen",
    "withinPortal",
    "switchDirectionOnFlip",
    "zIndex",
    "name",
    "dropdownPosition",
    "allowDeselect",
    "placeholder",
    "filterDataOnExactSearchMatch",
    "clearButtonTabIndex",
    "form",
    "positionDependencies",
    "readOnly",
    "hoverOnSearchChange"
  ]);
  const { classes, cx, theme } = Select_styles_default();
  const [dropdownOpened, _setDropdownOpened] = (0, import_react259.useState)(initiallyOpened);
  const [hovered, setHovered] = (0, import_react259.useState)(-1);
  const inputRef = (0, import_react259.useRef)();
  const itemsRefs = (0, import_react259.useRef)({});
  const [direction, setDirection] = (0, import_react259.useState)("column");
  const isColumn = direction === "column";
  const { scrollIntoView: scrollIntoView2, targetRef, scrollableRef } = useScrollIntoView({
    duration: 0,
    offset: 5,
    cancelable: false,
    isList: true
  });
  const isDeselectable = allowDeselect === void 0 ? clearable : allowDeselect;
  const setDropdownOpened = (opened) => {
    if (dropdownOpened !== opened) {
      _setDropdownOpened(opened);
      const handler = opened ? onDropdownOpen : onDropdownClose;
      typeof handler === "function" && handler();
    }
  };
  const isCreatable = creatable && typeof getCreateLabel === "function";
  let createLabel = null;
  const formattedData = data.map((item) => typeof item === "string" ? { label: item, value: item } : item);
  const sortedData = groupOptions({ data: formattedData });
  const [_value, handleChange, controlled] = useUncontrolled({
    value,
    defaultValue,
    finalValue: null,
    onChange
  });
  const selectedValue = sortedData.find((item) => item.value === _value);
  const [inputValue, setInputValue] = useUncontrolled({
    value: searchValue,
    defaultValue: (selectedValue == null ? void 0 : selectedValue.label) || "",
    finalValue: void 0,
    onChange: onSearchChange
  });
  const handleSearchChange = (val) => {
    setInputValue(val);
    if (searchable && typeof onSearchChange === "function") {
      onSearchChange(val);
    }
  };
  const handleClear = () => {
    var _a2;
    if (!readOnly) {
      handleChange(null);
      if (!controlled) {
        handleSearchChange("");
      }
      (_a2 = inputRef.current) == null ? void 0 : _a2.focus();
    }
  };
  (0, import_react259.useEffect)(() => {
    const newSelectedValue = sortedData.find((item) => item.value === _value);
    if (newSelectedValue) {
      handleSearchChange(newSelectedValue.label);
    } else if (!isCreatable || !_value) {
      handleSearchChange("");
    }
  }, [_value]);
  (0, import_react259.useEffect)(() => {
    if (selectedValue && (!searchable || !dropdownOpened)) {
      handleSearchChange(selectedValue.label);
    }
  }, [selectedValue == null ? void 0 : selectedValue.label]);
  const handleItemSelect = (item) => {
    if (!readOnly) {
      if (isDeselectable && (selectedValue == null ? void 0 : selectedValue.value) === item.value) {
        handleChange(null);
        setDropdownOpened(false);
      } else {
        if (item.creatable && typeof onCreate2 === "function") {
          const createdItem = onCreate2(item.value);
          if (typeof createdItem !== "undefined" && createdItem !== null) {
            if (typeof createdItem === "string") {
              handleChange(createdItem);
            } else {
              handleChange(createdItem.value);
            }
          }
        } else {
          handleChange(item.value);
        }
        if (!controlled) {
          handleSearchChange(item.label);
        }
        setHovered(-1);
        setDropdownOpened(false);
        inputRef.current.focus();
      }
    }
  };
  const filteredData = filterData3({
    data: sortedData,
    searchable,
    limit,
    searchValue: inputValue,
    filter,
    filterDataOnExactSearchMatch,
    value: _value
  });
  if (isCreatable && shouldCreate(inputValue, filteredData)) {
    createLabel = getCreateLabel(inputValue);
    filteredData.push({ label: inputValue, value: inputValue, creatable: true });
  }
  const getNextIndex2 = (index7, nextItem, compareFn) => {
    let i = index7;
    while (compareFn(i)) {
      i = nextItem(i);
      if (!filteredData[i].disabled)
        return i;
    }
    return index7;
  };
  useDidUpdate(() => {
    if (hoverOnSearchChange && inputValue) {
      setHovered(0);
    } else {
      setHovered(-1);
    }
  }, [inputValue, hoverOnSearchChange]);
  const selectedItemIndex = _value ? filteredData.findIndex((el) => el.value === _value) : 0;
  const shouldShowDropdown = !readOnly && (filteredData.length > 0 ? dropdownOpened : dropdownOpened && !!nothingFound);
  const handlePrevious = () => {
    setHovered((current) => {
      var _a2;
      const nextIndex = getNextIndex2(current, (index7) => index7 - 1, (index7) => index7 > 0);
      targetRef.current = itemsRefs.current[(_a2 = filteredData[nextIndex]) == null ? void 0 : _a2.value];
      shouldShowDropdown && scrollIntoView2({ alignment: isColumn ? "start" : "end" });
      return nextIndex;
    });
  };
  const handleNext = () => {
    setHovered((current) => {
      var _a2;
      const nextIndex = getNextIndex2(current, (index7) => index7 + 1, (index7) => index7 < filteredData.length - 1);
      targetRef.current = itemsRefs.current[(_a2 = filteredData[nextIndex]) == null ? void 0 : _a2.value];
      shouldShowDropdown && scrollIntoView2({ alignment: isColumn ? "end" : "start" });
      return nextIndex;
    });
  };
  const scrollSelectedItemIntoView = () => window.setTimeout(() => {
    var _a2;
    targetRef.current = itemsRefs.current[(_a2 = filteredData[selectedItemIndex]) == null ? void 0 : _a2.value];
    scrollIntoView2({ alignment: isColumn ? "end" : "start" });
  }, 0);
  useDidUpdate(() => {
    if (shouldShowDropdown)
      scrollSelectedItemIntoView();
  }, [shouldShowDropdown]);
  const handleInputKeydown = (event) => {
    typeof onKeyDown === "function" && onKeyDown(event);
    switch (event.key) {
      case "ArrowUp": {
        event.preventDefault();
        if (!dropdownOpened) {
          setHovered(selectedItemIndex);
          setDropdownOpened(true);
          scrollSelectedItemIntoView();
        } else {
          isColumn ? handlePrevious() : handleNext();
        }
        break;
      }
      case "ArrowDown": {
        event.preventDefault();
        if (!dropdownOpened) {
          setHovered(selectedItemIndex);
          setDropdownOpened(true);
          scrollSelectedItemIntoView();
        } else {
          isColumn ? handleNext() : handlePrevious();
        }
        break;
      }
      case "Home": {
        if (!searchable) {
          event.preventDefault();
          if (!dropdownOpened) {
            setDropdownOpened(true);
          }
          const firstItemIndex = filteredData.findIndex((item) => !item.disabled);
          setHovered(firstItemIndex);
          shouldShowDropdown && scrollIntoView2({ alignment: isColumn ? "end" : "start" });
        }
        break;
      }
      case "End": {
        if (!searchable) {
          event.preventDefault();
          if (!dropdownOpened) {
            setDropdownOpened(true);
          }
          const lastItemIndex = filteredData.map((item) => !!item.disabled).lastIndexOf(false);
          setHovered(lastItemIndex);
          shouldShowDropdown && scrollIntoView2({ alignment: isColumn ? "end" : "start" });
        }
        break;
      }
      case "Escape": {
        event.preventDefault();
        setDropdownOpened(false);
        setHovered(-1);
        break;
      }
      case " ": {
        if (!searchable) {
          event.preventDefault();
          if (filteredData[hovered] && dropdownOpened) {
            handleItemSelect(filteredData[hovered]);
          } else {
            setDropdownOpened(true);
            setHovered(selectedItemIndex);
            scrollSelectedItemIntoView();
          }
        }
        break;
      }
      case "Enter": {
        if (!searchable) {
          event.preventDefault();
        }
        if (filteredData[hovered] && dropdownOpened) {
          event.preventDefault();
          handleItemSelect(filteredData[hovered]);
        }
      }
    }
  };
  const handleInputBlur = (event) => {
    typeof onBlur === "function" && onBlur(event);
    const selected = sortedData.find((item) => item.value === _value);
    if (selectOnBlur && filteredData[hovered] && dropdownOpened) {
      handleItemSelect(filteredData[hovered]);
    }
    handleSearchChange((selected == null ? void 0 : selected.label) || "");
    setDropdownOpened(false);
  };
  const handleInputFocus = (event) => {
    typeof onFocus === "function" && onFocus(event);
    if (searchable) {
      setDropdownOpened(true);
    }
  };
  const handleInputChange = (event) => {
    if (!readOnly) {
      handleSearchChange(event.currentTarget.value);
      if (clearable && event.currentTarget.value === "") {
        handleChange(null);
      }
      setHovered(-1);
      setDropdownOpened(true);
    }
  };
  const handleInputClick = () => {
    if (!readOnly) {
      setDropdownOpened(!dropdownOpened);
      if (_value && !dropdownOpened) {
        setHovered(selectedItemIndex);
      }
    }
  };
  return import_react259.default.createElement(Input.Wrapper, __spreadProps87(__spreadValues195({}, wrapperProps), {
    __staticSelector: "Select"
  }), import_react259.default.createElement(SelectPopover, {
    opened: shouldShowDropdown,
    transition,
    transitionDuration,
    shadow: "sm",
    withinPortal,
    __staticSelector: "Select",
    onDirectionChange: setDirection,
    switchDirectionOnFlip,
    zIndex,
    dropdownPosition,
    positionDependencies: [...positionDependencies, inputValue],
    classNames,
    styles: styles2,
    unstyled
  }, import_react259.default.createElement(SelectPopover.Target, null, import_react259.default.createElement("div", {
    role: "combobox",
    "aria-haspopup": "listbox",
    "aria-owns": shouldShowDropdown ? `${inputProps.id}-items` : null,
    "aria-controls": inputProps.id,
    "aria-expanded": shouldShowDropdown,
    onMouseLeave: () => setHovered(-1),
    tabIndex: -1
  }, import_react259.default.createElement("input", {
    type: "hidden",
    name,
    value: _value || "",
    form,
    disabled
  }), import_react259.default.createElement(Input, __spreadValues195(__spreadProps87(__spreadValues195(__spreadValues195({
    autoComplete: "off",
    type: "search"
  }, inputProps), others), {
    ref: useMergedRef(ref, inputRef),
    onKeyDown: handleInputKeydown,
    __staticSelector: "Select",
    value: inputValue,
    placeholder,
    onChange: handleInputChange,
    "aria-autocomplete": "list",
    "aria-controls": shouldShowDropdown ? `${inputProps.id}-items` : null,
    "aria-activedescendant": hovered >= 0 ? `${inputProps.id}-${hovered}` : null,
    onMouseDown: handleInputClick,
    onBlur: handleInputBlur,
    onFocus: handleInputFocus,
    readOnly: !searchable || readOnly,
    disabled,
    "data-mantine-stop-propagation": shouldShowDropdown,
    name: null,
    classNames: __spreadProps87(__spreadValues195({}, classNames), {
      input: cx({ [classes.input]: !searchable }, classNames == null ? void 0 : classNames.input)
    })
  }), getSelectRightSectionProps({
    theme,
    rightSection,
    rightSectionWidth,
    styles: styles2,
    size: inputProps.size,
    shouldClear: clearable && !!selectedValue,
    clearButtonLabel,
    onClear: handleClear,
    error: wrapperProps.error,
    clearButtonTabIndex,
    disabled,
    readOnly
  }))))), import_react259.default.createElement(SelectPopover.Dropdown, {
    component: dropdownComponent || SelectScrollArea,
    maxHeight: maxDropdownHeight,
    direction,
    id: inputProps.id,
    innerRef: scrollableRef,
    __staticSelector: "Select",
    classNames,
    styles: styles2
  }, import_react259.default.createElement(SelectItems, {
    data: filteredData,
    hovered,
    classNames,
    styles: styles2,
    isItemSelected: (val) => val === _value,
    uuid: inputProps.id,
    __staticSelector: "Select",
    onItemHover: setHovered,
    onItemSelect: handleItemSelect,
    itemsRefs,
    itemComponent,
    size: inputProps.size,
    nothingFound,
    creatable: isCreatable && !!createLabel,
    createLabel,
    "aria-label": wrapperProps.label,
    unstyled
  }))));
});
Select.displayName = "@mantine/core/Select";

// node_modules/@mantine/core/esm/SimpleGrid/SimpleGrid.js
var import_react260 = __toESM(require_react());

// node_modules/@mantine/core/esm/SimpleGrid/get-sorted-breakpoints/get-sorted-breakpoints.js
function getSortedBreakpoints2(theme, breakpoints) {
  if (breakpoints.length === 0) {
    return breakpoints;
  }
  const property = "maxWidth" in breakpoints[0] ? "maxWidth" : "minWidth";
  const sorted = [...breakpoints].sort((a2, b2) => theme.fn.size({ size: b2[property], sizes: theme.breakpoints }) - theme.fn.size({ size: a2[property], sizes: theme.breakpoints }));
  return property === "minWidth" ? sorted.reverse() : sorted;
}

// node_modules/@mantine/core/esm/SimpleGrid/SimpleGrid.styles.js
var __defProp196 = Object.defineProperty;
var __getOwnPropSymbols198 = Object.getOwnPropertySymbols;
var __hasOwnProp198 = Object.prototype.hasOwnProperty;
var __propIsEnum198 = Object.prototype.propertyIsEnumerable;
var __defNormalProp196 = (obj, key2, value) => key2 in obj ? __defProp196(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues196 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp198.call(b2, prop))
      __defNormalProp196(a2, prop, b2[prop]);
  if (__getOwnPropSymbols198)
    for (var prop of __getOwnPropSymbols198(b2)) {
      if (__propIsEnum198.call(b2, prop))
        __defNormalProp196(a2, prop, b2[prop]);
    }
  return a2;
};
var useStyles87 = createStyles((theme, { spacing, breakpoints, cols, verticalSpacing }) => {
  const hasVerticalSpacing = verticalSpacing != null;
  const gridBreakpoints = getSortedBreakpoints2(theme, breakpoints).reduce((acc, breakpoint) => {
    var _a, _b;
    const property = "maxWidth" in breakpoint ? "max-width" : "min-width";
    const breakpointSize = theme.fn.size({
      size: property === "max-width" ? breakpoint.maxWidth : breakpoint.minWidth,
      sizes: theme.breakpoints
    });
    acc[`@media (${property}: ${breakpointSize - (property === "max-width" ? 1 : 0)}px)`] = {
      gridTemplateColumns: `repeat(${breakpoint.cols}, minmax(0, 1fr))`,
      gap: `${theme.fn.size({
        size: (_a = breakpoint.verticalSpacing) != null ? _a : hasVerticalSpacing ? verticalSpacing : spacing,
        sizes: theme.spacing
      })}px ${theme.fn.size({
        size: (_b = breakpoint.spacing) != null ? _b : spacing,
        sizes: theme.spacing
      })}px`
    };
    return acc;
  }, {});
  return {
    root: __spreadValues196({
      boxSizing: "border-box",
      display: "grid",
      gridTemplateColumns: `repeat(${cols}, minmax(0, 1fr))`,
      gap: `${theme.fn.size({
        size: hasVerticalSpacing ? verticalSpacing : spacing,
        sizes: theme.spacing
      })}px ${theme.fn.size({
        size: spacing,
        sizes: theme.spacing
      })}px`
    }, gridBreakpoints)
  };
});
var SimpleGrid_styles_default = useStyles87;

// node_modules/@mantine/core/esm/SimpleGrid/SimpleGrid.js
var __defProp197 = Object.defineProperty;
var __getOwnPropSymbols199 = Object.getOwnPropertySymbols;
var __hasOwnProp199 = Object.prototype.hasOwnProperty;
var __propIsEnum199 = Object.prototype.propertyIsEnumerable;
var __defNormalProp197 = (obj, key2, value) => key2 in obj ? __defProp197(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues197 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp199.call(b2, prop))
      __defNormalProp197(a2, prop, b2[prop]);
  if (__getOwnPropSymbols199)
    for (var prop of __getOwnPropSymbols199(b2)) {
      if (__propIsEnum199.call(b2, prop))
        __defNormalProp197(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest128 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp199.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols199)
    for (var prop of __getOwnPropSymbols199(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum199.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps98 = {
  breakpoints: [],
  cols: 1,
  spacing: "md"
};
var SimpleGrid = (0, import_react260.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("SimpleGrid", defaultProps98, props), { className, breakpoints, cols, spacing, verticalSpacing, children, unstyled } = _a, others = __objRest128(_a, ["className", "breakpoints", "cols", "spacing", "verticalSpacing", "children", "unstyled"]);
  const { classes, cx } = SimpleGrid_styles_default({ breakpoints, cols, spacing, verticalSpacing }, { unstyled, name: "SimpleGrid" });
  return import_react260.default.createElement(Box, __spreadValues197({
    className: cx(classes.root, className),
    ref
  }, others), children);
});
SimpleGrid.displayName = "@mantine/core/SimpleGrid";

// node_modules/@mantine/core/esm/Skeleton/Skeleton.js
var import_react261 = __toESM(require_react());

// node_modules/@mantine/core/esm/Skeleton/Skeleton.styles.js
var fade = keyframes({
  "from, to": { opacity: 0.4 },
  "50%": { opacity: 1 }
});
var useStyles88 = createStyles((theme, { height, width, radius: radius2, circle, animate }) => ({
  root: {
    height,
    width: circle ? height : width,
    borderRadius: circle ? height : theme.fn.radius(radius2),
    position: "relative",
    WebkitTransform: "translateZ(0)"
  },
  visible: {
    overflow: "hidden",
    "&::before": {
      content: '""',
      position: "absolute",
      background: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      zIndex: 10
    },
    "&::after": {
      content: '""',
      position: "absolute",
      background: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3],
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      animation: animate ? `${fade} 1500ms linear infinite` : "none",
      zIndex: 11
    }
  }
}));
var Skeleton_styles_default = useStyles88;

// node_modules/@mantine/core/esm/Skeleton/Skeleton.js
var __defProp198 = Object.defineProperty;
var __getOwnPropSymbols200 = Object.getOwnPropertySymbols;
var __hasOwnProp200 = Object.prototype.hasOwnProperty;
var __propIsEnum200 = Object.prototype.propertyIsEnumerable;
var __defNormalProp198 = (obj, key2, value) => key2 in obj ? __defProp198(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues198 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp200.call(b2, prop))
      __defNormalProp198(a2, prop, b2[prop]);
  if (__getOwnPropSymbols200)
    for (var prop of __getOwnPropSymbols200(b2)) {
      if (__propIsEnum200.call(b2, prop))
        __defNormalProp198(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest129 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp200.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols200)
    for (var prop of __getOwnPropSymbols200(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum200.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps99 = {
  height: "auto",
  width: "100%",
  visible: true,
  animate: true
};
var Skeleton = (0, import_react261.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Skeleton", defaultProps99, props), { height, width, visible: visible2, animate, className, circle, radius: radius2, unstyled } = _a, others = __objRest129(_a, ["height", "width", "visible", "animate", "className", "circle", "radius", "unstyled"]);
  const { classes, cx } = Skeleton_styles_default({ height, width, circle, radius: radius2, animate }, { unstyled, name: "Skeleton" });
  return import_react261.default.createElement(Box, __spreadValues198({
    className: cx(classes.root, { [classes.visible]: visible2 }, className),
    ref
  }, others));
});
Skeleton.displayName = "@mantine/core/Skeleton";

// node_modules/@mantine/core/esm/Slider/Slider/Slider.js
var import_react266 = __toESM(require_react());

// node_modules/@mantine/core/esm/Slider/utils/get-position/get-position.js
function getPosition({ value, min: min5, max: max5 }) {
  const position5 = (value - min5) / (max5 - min5) * 100;
  return Math.min(Math.max(position5, 0), 100);
}

// node_modules/@mantine/core/esm/Slider/utils/get-change-value/get-change-value.js
function getChangeValue({
  value,
  containerWidth,
  min: min5,
  max: max5,
  step,
  precision
}) {
  const left2 = !containerWidth ? value : Math.min(Math.max(value, 0), containerWidth) / containerWidth;
  const dx = left2 * (max5 - min5);
  const nextValue = (dx !== 0 ? Math.round(dx / step) * step : 0) + min5;
  const nextValueWithinStep = Math.max(nextValue, min5);
  if (precision !== void 0) {
    return Number(nextValueWithinStep.toFixed(precision));
  }
  return nextValueWithinStep;
}

// node_modules/@mantine/core/esm/Slider/Thumb/Thumb.js
var import_react262 = __toESM(require_react());

// node_modules/@mantine/core/esm/Slider/SliderRoot/SliderRoot.styles.js
var __defProp199 = Object.defineProperty;
var __defProps88 = Object.defineProperties;
var __getOwnPropDescs88 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols201 = Object.getOwnPropertySymbols;
var __hasOwnProp201 = Object.prototype.hasOwnProperty;
var __propIsEnum201 = Object.prototype.propertyIsEnumerable;
var __defNormalProp199 = (obj, key2, value) => key2 in obj ? __defProp199(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues199 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp201.call(b2, prop))
      __defNormalProp199(a2, prop, b2[prop]);
  if (__getOwnPropSymbols201)
    for (var prop of __getOwnPropSymbols201(b2)) {
      if (__propIsEnum201.call(b2, prop))
        __defNormalProp199(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps88 = (a2, b2) => __defProps88(a2, __getOwnPropDescs88(b2));
var sizes22 = {
  xs: 4,
  sm: 6,
  md: 8,
  lg: 10,
  xl: 12
};
var useStyles89 = createStyles((theme, { size: size3, disabled }) => ({
  root: __spreadProps88(__spreadValues199({}, theme.fn.fontStyles()), {
    WebkitTapHighlightColor: "transparent",
    outline: 0,
    height: theme.fn.size({ sizes: sizes22, size: size3 }) * 2,
    display: "flex",
    alignItems: "center",
    cursor: disabled ? "not-allowed" : "pointer",
    touchAction: "none"
  })
}));
var SliderRoot_styles_default = useStyles89;

// node_modules/@mantine/core/esm/Slider/Thumb/Thumb.styles.js
var __defProp200 = Object.defineProperty;
var __defProps89 = Object.defineProperties;
var __getOwnPropDescs89 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols202 = Object.getOwnPropertySymbols;
var __hasOwnProp202 = Object.prototype.hasOwnProperty;
var __propIsEnum202 = Object.prototype.propertyIsEnumerable;
var __defNormalProp200 = (obj, key2, value) => key2 in obj ? __defProp200(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues200 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp202.call(b2, prop))
      __defNormalProp200(a2, prop, b2[prop]);
  if (__getOwnPropSymbols202)
    for (var prop of __getOwnPropSymbols202(b2)) {
      if (__propIsEnum202.call(b2, prop))
        __defNormalProp200(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps89 = (a2, b2) => __defProps89(a2, __getOwnPropDescs89(b2));
var useStyles90 = createStyles((theme, { color: color2, size: size3, disabled, thumbSize }) => ({
  label: {
    position: "absolute",
    top: -36,
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[9],
    fontSize: theme.fontSizes.xs,
    color: theme.white,
    padding: `calc(${theme.spacing.xs}px / 2)`,
    borderRadius: theme.radius.sm,
    whiteSpace: "nowrap",
    pointerEvents: "none",
    userSelect: "none",
    touchAction: "none"
  },
  thumb: __spreadProps89(__spreadValues200({}, theme.fn.focusStyles()), {
    boxSizing: "border-box",
    position: "absolute",
    display: disabled ? "none" : "flex",
    height: thumbSize || theme.fn.size({ sizes: sizes22, size: size3 }) * 2,
    width: thumbSize || theme.fn.size({ sizes: sizes22, size: size3 }) * 2,
    backgroundColor: theme.colorScheme === "dark" ? theme.fn.themeColor(color2, theme.fn.primaryShade()) : theme.white,
    border: `4px solid ${theme.colorScheme === "dark" ? theme.white : theme.fn.themeColor(color2, theme.fn.primaryShade())}`,
    color: theme.colorScheme === "dark" ? theme.white : theme.fn.themeColor(color2, theme.fn.primaryShade()),
    transform: "translate(-50%, -50%)",
    top: "50%",
    cursor: "pointer",
    borderRadius: 1e3,
    alignItems: "center",
    justifyContent: "center",
    transitionDuration: "100ms",
    transitionProperty: "box-shadow, transform",
    transitionTimingFunction: theme.transitionTimingFunction,
    zIndex: 3,
    userSelect: "none",
    touchAction: "none"
  }),
  dragging: {
    transform: "translate(-50%, -50%) scale(1.05)",
    boxShadow: theme.shadows.sm
  }
}));
var Thumb_styles_default2 = useStyles90;

// node_modules/@mantine/core/esm/Slider/Thumb/Thumb.js
var Thumb2 = (0, import_react262.forwardRef)(({
  max: max5,
  min: min5,
  value,
  position: position5,
  label,
  dragging,
  onMouseDown,
  color: color2,
  classNames,
  styles: styles2,
  size: size3,
  labelTransition,
  labelTransitionDuration,
  labelTransitionTimingFunction,
  labelAlwaysOn,
  thumbLabel,
  onFocus,
  onBlur,
  showLabelOnHover,
  children = null,
  disabled,
  unstyled,
  thumbSize
}, ref) => {
  const { classes, cx, theme } = Thumb_styles_default2({ color: color2, size: size3, disabled, thumbSize }, { classNames, styles: styles2, unstyled, name: "Slider" });
  const [focused, setFocused] = (0, import_react262.useState)(false);
  const isVisible3 = labelAlwaysOn || dragging || focused || showLabelOnHover;
  return import_react262.default.createElement(Box, {
    tabIndex: 0,
    role: "slider",
    "aria-label": thumbLabel,
    "aria-valuemax": max5,
    "aria-valuemin": min5,
    "aria-valuenow": value,
    ref,
    className: cx(classes.thumb, { [classes.dragging]: dragging }),
    onFocus: () => {
      setFocused(true);
      typeof onFocus === "function" && onFocus();
    },
    onBlur: () => {
      setFocused(false);
      typeof onBlur === "function" && onBlur();
    },
    onTouchStart: onMouseDown,
    onMouseDown,
    onClick: (event) => event.stopPropagation(),
    style: { [theme.dir === "rtl" ? "right" : "left"]: `${position5}%` }
  }, children, import_react262.default.createElement(Transition, {
    mounted: label != null && isVisible3,
    duration: labelTransitionDuration,
    transition: labelTransition,
    timingFunction: labelTransitionTimingFunction || theme.transitionTimingFunction
  }, (transitionStyles) => import_react262.default.createElement("div", {
    style: transitionStyles,
    className: classes.label
  }, label)));
});
Thumb2.displayName = "@mantine/core/SliderThumb";

// node_modules/@mantine/core/esm/Slider/Track/Track.js
var import_react264 = __toESM(require_react());

// node_modules/@mantine/core/esm/Slider/Marks/Marks.js
var import_react263 = __toESM(require_react());

// node_modules/@mantine/core/esm/Slider/Marks/is-mark-filled.js
function isMarkFilled({ mark: mark2, offset: offset3, value, inverted = false }) {
  return inverted ? typeof offset3 === "number" ? mark2.value <= offset3 || mark2.value >= value : mark2.value >= value : typeof offset3 === "number" ? mark2.value >= offset3 && mark2.value <= value : mark2.value <= value;
}

// node_modules/@mantine/core/esm/Slider/Marks/Marks.styles.js
var useStyles91 = createStyles((theme, { size: size3, color: color2, disabled }) => ({
  markWrapper: {
    position: "absolute",
    top: 0,
    zIndex: 2
  },
  mark: {
    boxSizing: "border-box",
    border: `${theme.fn.size({ size: size3, sizes: sizes22 }) >= 8 ? "2px" : "1px"} solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2]}`,
    height: theme.fn.size({ sizes: sizes22, size: size3 }),
    width: theme.fn.size({ sizes: sizes22, size: size3 }),
    borderRadius: 1e3,
    transform: `translateX(-${theme.fn.size({ sizes: sizes22, size: size3 }) / 2}px)`,
    backgroundColor: theme.white
  },
  markFilled: {
    borderColor: disabled ? theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[4] : theme.fn.variant({ variant: "filled", color: color2 }).background
  },
  markLabel: {
    transform: "translate(-50%, 0)",
    fontSize: theme.fontSizes.sm,
    color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6],
    marginTop: `calc(${theme.spacing.xs}px / 2)`,
    whiteSpace: "nowrap"
  }
}));
var Marks_styles_default = useStyles91;

// node_modules/@mantine/core/esm/Slider/Marks/Marks.js
function Marks({
  marks,
  color: color2,
  size: size3,
  min: min5,
  max: max5,
  value,
  classNames,
  styles: styles2,
  offset: offset3,
  onChange,
  disabled,
  unstyled,
  inverted
}) {
  const { classes, cx } = Marks_styles_default({ size: size3, color: color2, disabled }, { classNames, styles: styles2, unstyled, name: "Slider" });
  const items = marks.map((mark2, index7) => import_react263.default.createElement(Box, {
    className: classes.markWrapper,
    sx: { left: `${getPosition({ value: mark2.value, min: min5, max: max5 })}%` },
    key: index7
  }, import_react263.default.createElement("div", {
    className: cx(classes.mark, {
      [classes.markFilled]: isMarkFilled({ mark: mark2, value, offset: offset3, inverted })
    })
  }), mark2.label && import_react263.default.createElement("div", {
    className: classes.markLabel,
    onMouseDown: (event) => {
      event.stopPropagation();
      onChange(mark2.value);
    },
    onTouchStart: (event) => {
      event.stopPropagation();
      onChange(mark2.value);
    }
  }, mark2.label)));
  return import_react263.default.createElement("div", null, items);
}
Marks.displayName = "@mantine/core/SliderMarks";

// node_modules/@mantine/core/esm/Slider/Track/Track.styles.js
var useStyles92 = createStyles((theme, { radius: radius2, size: size3, color: color2, disabled, inverted }) => ({
  track: {
    position: "relative",
    height: theme.fn.size({ sizes: sizes22, size: size3 }),
    width: "100%",
    marginRight: theme.fn.size({ size: size3, sizes: sizes22 }),
    marginLeft: theme.fn.size({ size: size3, sizes: sizes22 }),
    "&::before": {
      content: '""',
      position: "absolute",
      top: 0,
      bottom: 0,
      borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
      right: -theme.fn.size({ size: size3, sizes: sizes22 }),
      left: -theme.fn.size({ size: size3, sizes: sizes22 }),
      backgroundColor: inverted ? disabled ? theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[4] : theme.fn.variant({ variant: "filled", color: color2 }).background : theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
      zIndex: 0
    }
  },
  bar: {
    position: "absolute",
    zIndex: 1,
    top: 0,
    bottom: 0,
    backgroundColor: inverted ? theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2] : disabled ? theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[4] : theme.fn.variant({ variant: "filled", color: color2 }).background,
    borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius })
  }
}));
var Track_styles_default = useStyles92;

// node_modules/@mantine/core/esm/Slider/Track/Track.js
var __defProp201 = Object.defineProperty;
var __defProps90 = Object.defineProperties;
var __getOwnPropDescs90 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols203 = Object.getOwnPropertySymbols;
var __hasOwnProp203 = Object.prototype.hasOwnProperty;
var __propIsEnum203 = Object.prototype.propertyIsEnumerable;
var __defNormalProp201 = (obj, key2, value) => key2 in obj ? __defProp201(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues201 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp203.call(b2, prop))
      __defNormalProp201(a2, prop, b2[prop]);
  if (__getOwnPropSymbols203)
    for (var prop of __getOwnPropSymbols203(b2)) {
      if (__propIsEnum203.call(b2, prop))
        __defNormalProp201(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps90 = (a2, b2) => __defProps90(a2, __getOwnPropDescs90(b2));
var __objRest130 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp203.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols203)
    for (var prop of __getOwnPropSymbols203(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum203.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function Track(_a) {
  var _b = _a, {
    filled,
    size: size3,
    color: color2,
    classNames,
    styles: styles2,
    radius: radius2,
    children,
    offset: offset3,
    onMouseLeave,
    onMouseEnter,
    disabled,
    marksOffset,
    unstyled,
    inverted
  } = _b, others = __objRest130(_b, [
    "filled",
    "size",
    "color",
    "classNames",
    "styles",
    "radius",
    "children",
    "offset",
    "onMouseLeave",
    "onMouseEnter",
    "disabled",
    "marksOffset",
    "unstyled",
    "inverted"
  ]);
  const { classes } = Track_styles_default({ color: color2, size: size3, radius: radius2, disabled, inverted }, { classNames, styles: styles2, unstyled, name: "Slider" });
  return import_react264.default.createElement("div", {
    className: classes.track,
    onMouseLeave,
    onMouseEnter
  }, import_react264.default.createElement(Box, {
    className: classes.bar,
    sx: (theme) => ({
      left: `calc(${offset3}% - ${theme.fn.size({ size: size3, sizes: sizes22 })}px)`,
      width: `calc(${filled}% + ${theme.fn.size({ size: size3, sizes: sizes22 })}px)`
    })
  }), children, import_react264.default.createElement(Marks, __spreadProps90(__spreadValues201({}, others), {
    size: size3,
    color: color2,
    offset: marksOffset,
    classNames,
    styles: styles2,
    disabled,
    unstyled,
    inverted
  })));
}
Track.displayName = "@mantine/core/SliderTrack";

// node_modules/@mantine/core/esm/Slider/SliderRoot/SliderRoot.js
var import_react265 = __toESM(require_react());
var __defProp202 = Object.defineProperty;
var __defProps91 = Object.defineProperties;
var __getOwnPropDescs91 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols204 = Object.getOwnPropertySymbols;
var __hasOwnProp204 = Object.prototype.hasOwnProperty;
var __propIsEnum204 = Object.prototype.propertyIsEnumerable;
var __defNormalProp202 = (obj, key2, value) => key2 in obj ? __defProp202(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues202 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp204.call(b2, prop))
      __defNormalProp202(a2, prop, b2[prop]);
  if (__getOwnPropSymbols204)
    for (var prop of __getOwnPropSymbols204(b2)) {
      if (__propIsEnum204.call(b2, prop))
        __defNormalProp202(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps91 = (a2, b2) => __defProps91(a2, __getOwnPropDescs91(b2));
var __objRest131 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp204.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols204)
    for (var prop of __getOwnPropSymbols204(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum204.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var SliderRoot = (0, import_react265.forwardRef)((_a, ref) => {
  var _b = _a, { className, size: size3, classNames, styles: styles2, disabled, unstyled } = _b, others = __objRest131(_b, ["className", "size", "classNames", "styles", "disabled", "unstyled"]);
  const { classes, cx } = SliderRoot_styles_default({ size: size3, disabled }, { classNames, styles: styles2, unstyled, name: "Slider" });
  return import_react265.default.createElement(Box, __spreadProps91(__spreadValues202({}, others), {
    tabIndex: -1,
    className: cx(classes.root, className),
    ref
  }));
});
SliderRoot.displayName = "@mantine/core/SliderRoot";

// node_modules/@mantine/core/esm/Slider/Slider/Slider.js
var __defProp203 = Object.defineProperty;
var __defProps92 = Object.defineProperties;
var __getOwnPropDescs92 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols205 = Object.getOwnPropertySymbols;
var __hasOwnProp205 = Object.prototype.hasOwnProperty;
var __propIsEnum205 = Object.prototype.propertyIsEnumerable;
var __defNormalProp203 = (obj, key2, value) => key2 in obj ? __defProp203(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues203 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp205.call(b2, prop))
      __defNormalProp203(a2, prop, b2[prop]);
  if (__getOwnPropSymbols205)
    for (var prop of __getOwnPropSymbols205(b2)) {
      if (__propIsEnum205.call(b2, prop))
        __defNormalProp203(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps92 = (a2, b2) => __defProps92(a2, __getOwnPropDescs92(b2));
var __objRest132 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp205.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols205)
    for (var prop of __getOwnPropSymbols205(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum205.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps100 = {
  size: "md",
  radius: "xl",
  min: 0,
  max: 100,
  step: 1,
  marks: [],
  label: (f2) => f2,
  labelTransition: "skew-down",
  labelTransitionDuration: 0,
  labelAlwaysOn: false,
  thumbLabel: "",
  showLabelOnHover: true,
  disabled: false,
  scale: (v) => v
};
var Slider = (0, import_react266.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Slider", defaultProps100, props), {
    classNames,
    styles: styles2,
    color: color2,
    value,
    onChange,
    onChangeEnd,
    size: size3,
    radius: radius2,
    min: min5,
    max: max5,
    step,
    precision,
    defaultValue,
    name,
    marks,
    label,
    labelTransition,
    labelTransitionDuration,
    labelTransitionTimingFunction,
    labelAlwaysOn,
    thumbLabel,
    showLabelOnHover,
    thumbChildren,
    disabled,
    unstyled,
    thumbSize,
    scale,
    inverted
  } = _a, others = __objRest132(_a, [
    "classNames",
    "styles",
    "color",
    "value",
    "onChange",
    "onChangeEnd",
    "size",
    "radius",
    "min",
    "max",
    "step",
    "precision",
    "defaultValue",
    "name",
    "marks",
    "label",
    "labelTransition",
    "labelTransitionDuration",
    "labelTransitionTimingFunction",
    "labelAlwaysOn",
    "thumbLabel",
    "showLabelOnHover",
    "thumbChildren",
    "disabled",
    "unstyled",
    "thumbSize",
    "scale",
    "inverted"
  ]);
  const theme = useMantineTheme();
  const [hovered, setHovered] = (0, import_react266.useState)(false);
  const [_value, setValue] = useUncontrolled({
    value: typeof value === "number" ? clamp(value, min5, max5) : value,
    defaultValue: typeof defaultValue === "number" ? clamp(defaultValue, min5, max5) : defaultValue,
    finalValue: clamp(0, min5, max5),
    onChange
  });
  const valueRef = (0, import_react266.useRef)(_value);
  const thumb = (0, import_react266.useRef)();
  const position5 = getPosition({ value: _value, min: min5, max: max5 });
  const scaledValue = scale(_value);
  const _label = typeof label === "function" ? label(scaledValue) : label;
  const handleChange = (0, import_react266.useCallback)(({ x: x3 }) => {
    if (!disabled) {
      const nextValue = getChangeValue({ value: x3, min: min5, max: max5, step, precision });
      setValue(nextValue);
      valueRef.current = nextValue;
    }
  }, [disabled, min5, max5, step, precision]);
  const { ref: container, active } = useMove(handleChange, { onScrubEnd: () => onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current) }, theme.dir);
  const handleThumbMouseDown = (event) => {
    event.stopPropagation();
  };
  const handleTrackKeydownCapture = (event) => {
    if (!disabled) {
      switch (event.key) {
        case "ArrowUp": {
          event.preventDefault();
          thumb.current.focus();
          const nextValue = Math.min(Math.max(_value + step, min5), max5);
          onChangeEnd == null ? void 0 : onChangeEnd(nextValue);
          setValue(nextValue);
          break;
        }
        case "ArrowRight": {
          event.preventDefault();
          thumb.current.focus();
          const nextValue = Math.min(Math.max(theme.dir === "rtl" ? _value - step : _value + step, min5), max5);
          onChangeEnd == null ? void 0 : onChangeEnd(nextValue);
          setValue(nextValue);
          break;
        }
        case "ArrowDown": {
          event.preventDefault();
          thumb.current.focus();
          const nextValue = Math.min(Math.max(_value - step, min5), max5);
          onChangeEnd == null ? void 0 : onChangeEnd(nextValue);
          setValue(nextValue);
          break;
        }
        case "ArrowLeft": {
          event.preventDefault();
          thumb.current.focus();
          const nextValue = Math.min(Math.max(theme.dir === "rtl" ? _value + step : _value - step, min5), max5);
          onChangeEnd == null ? void 0 : onChangeEnd(nextValue);
          setValue(nextValue);
          break;
        }
        case "Home": {
          event.preventDefault();
          thumb.current.focus();
          onChangeEnd == null ? void 0 : onChangeEnd(min5);
          setValue(min5);
          break;
        }
        case "End": {
          event.preventDefault();
          thumb.current.focus();
          onChangeEnd == null ? void 0 : onChangeEnd(max5);
          setValue(max5);
          break;
        }
      }
    }
  };
  return import_react266.default.createElement(SliderRoot, __spreadProps92(__spreadValues203({}, others), {
    size: size3,
    ref: useMergedRef(container, ref),
    onKeyDownCapture: handleTrackKeydownCapture,
    onMouseDownCapture: () => {
      var _a2;
      return (_a2 = container.current) == null ? void 0 : _a2.focus();
    },
    classNames,
    styles: styles2,
    disabled,
    unstyled
  }), import_react266.default.createElement(Track, {
    inverted,
    offset: 0,
    filled: position5,
    marks,
    size: size3,
    radius: radius2,
    color: color2,
    min: min5,
    max: max5,
    value: scaledValue,
    onChange: setValue,
    onMouseEnter: showLabelOnHover ? () => setHovered(true) : void 0,
    onMouseLeave: showLabelOnHover ? () => setHovered(false) : void 0,
    classNames,
    styles: styles2,
    disabled,
    unstyled
  }, import_react266.default.createElement(Thumb2, {
    max: max5,
    min: min5,
    value: scaledValue,
    position: position5,
    dragging: active,
    color: color2,
    size: size3,
    label: _label,
    ref: thumb,
    onMouseDown: handleThumbMouseDown,
    labelTransition,
    labelTransitionDuration,
    labelTransitionTimingFunction,
    labelAlwaysOn,
    classNames,
    styles: styles2,
    thumbLabel,
    showLabelOnHover: showLabelOnHover && hovered,
    disabled,
    unstyled,
    thumbSize
  }, thumbChildren)), import_react266.default.createElement("input", {
    type: "hidden",
    name,
    value: scaledValue
  }));
});
Slider.displayName = "@mantine/core/Slider";

// node_modules/@mantine/core/esm/Slider/RangeSlider/RangeSlider.js
var import_react267 = __toESM(require_react());

// node_modules/@mantine/core/esm/Slider/utils/get-client-position/get-client-position.js
function getClientPosition(event) {
  if ("TouchEvent" in window && event instanceof window.TouchEvent) {
    const touch = event.touches[0];
    return touch.clientX;
  }
  return event.clientX;
}

// node_modules/@mantine/core/esm/Slider/RangeSlider/RangeSlider.js
var __defProp204 = Object.defineProperty;
var __defProps93 = Object.defineProperties;
var __getOwnPropDescs93 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols206 = Object.getOwnPropertySymbols;
var __hasOwnProp206 = Object.prototype.hasOwnProperty;
var __propIsEnum206 = Object.prototype.propertyIsEnumerable;
var __defNormalProp204 = (obj, key2, value) => key2 in obj ? __defProp204(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues204 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp206.call(b2, prop))
      __defNormalProp204(a2, prop, b2[prop]);
  if (__getOwnPropSymbols206)
    for (var prop of __getOwnPropSymbols206(b2)) {
      if (__propIsEnum206.call(b2, prop))
        __defNormalProp204(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps93 = (a2, b2) => __defProps93(a2, __getOwnPropDescs93(b2));
var __objRest133 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp206.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols206)
    for (var prop of __getOwnPropSymbols206(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum206.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps101 = {
  size: "md",
  radius: "xl",
  min: 0,
  max: 100,
  minRange: 10,
  step: 1,
  marks: [],
  label: (f2) => f2,
  labelTransition: "skew-down",
  labelTransitionDuration: 0,
  labelAlwaysOn: false,
  thumbFromLabel: "",
  thumbToLabel: "",
  showLabelOnHover: true,
  disabled: false,
  scale: (v) => v
};
var RangeSlider = (0, import_react267.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("RangeSlider", defaultProps101, props), {
    classNames,
    styles: styles2,
    color: color2,
    value,
    onChange,
    onChangeEnd,
    size: size3,
    radius: radius2,
    min: min5,
    max: max5,
    minRange,
    maxRange,
    step,
    precision,
    defaultValue,
    name,
    marks,
    label,
    labelTransition,
    labelTransitionDuration,
    labelTransitionTimingFunction,
    labelAlwaysOn,
    thumbFromLabel,
    thumbToLabel,
    showLabelOnHover,
    thumbChildren,
    disabled,
    unstyled,
    thumbSize,
    scale,
    inverted
  } = _a, others = __objRest133(_a, [
    "classNames",
    "styles",
    "color",
    "value",
    "onChange",
    "onChangeEnd",
    "size",
    "radius",
    "min",
    "max",
    "minRange",
    "maxRange",
    "step",
    "precision",
    "defaultValue",
    "name",
    "marks",
    "label",
    "labelTransition",
    "labelTransitionDuration",
    "labelTransitionTimingFunction",
    "labelAlwaysOn",
    "thumbFromLabel",
    "thumbToLabel",
    "showLabelOnHover",
    "thumbChildren",
    "disabled",
    "unstyled",
    "thumbSize",
    "scale",
    "inverted"
  ]);
  const theme = useMantineTheme();
  const [focused, setFocused] = (0, import_react267.useState)(-1);
  const [hovered, setHovered] = (0, import_react267.useState)(false);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: [min5, max5],
    onChange
  });
  const valueRef = (0, import_react267.useRef)(_value);
  const thumbs = (0, import_react267.useRef)([]);
  const thumbIndex = (0, import_react267.useRef)(void 0);
  const positions = [
    getPosition({ value: _value[0], min: min5, max: max5 }),
    getPosition({ value: _value[1], min: min5, max: max5 })
  ];
  const _setValue = (val) => {
    setValue(val);
    valueRef.current = val;
  };
  (0, import_react267.useEffect)(() => {
    if (Array.isArray(value)) {
      valueRef.current = value;
    }
  }, Array.isArray(value) ? [value[0], value[1]] : [null, null]);
  const setRangedValue = (val, index7, triggerChangeEnd) => {
    const clone = [...valueRef.current];
    clone[index7] = val;
    if (index7 === 0) {
      if (val > clone[1] - (minRange - 1e-9)) {
        clone[1] = Math.min(val + minRange, max5);
      }
      if (val > (max5 - (minRange - 1e-9) || min5)) {
        clone[index7] = valueRef.current[index7];
      }
      if (clone[1] - val > maxRange) {
        clone[1] = val + maxRange;
      }
    }
    if (index7 === 1) {
      if (val < clone[0] + minRange) {
        clone[0] = Math.max(val - minRange, min5);
      }
      if (val < clone[0] + minRange) {
        clone[index7] = valueRef.current[index7];
      }
      if (val - clone[0] > maxRange) {
        clone[0] = val - maxRange;
      }
    }
    _setValue(clone);
    if (triggerChangeEnd) {
      onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current);
    }
  };
  const handleChange = (val) => {
    if (!disabled) {
      const nextValue = getChangeValue({ value: val, min: min5, max: max5, step, precision });
      setRangedValue(nextValue, thumbIndex.current, false);
    }
  };
  const { ref: container, active } = useMove(({ x: x3 }) => handleChange(x3), { onScrubEnd: () => onChangeEnd == null ? void 0 : onChangeEnd(valueRef.current) }, theme.dir);
  function handleThumbMouseDown(event, index7) {
    event.stopPropagation();
    thumbIndex.current = index7;
  }
  const handleTrackMouseDownCapture = (event) => {
    container.current.focus();
    const rect = container.current.getBoundingClientRect();
    const changePosition = getClientPosition(event.nativeEvent);
    const changeValue = getChangeValue({
      value: changePosition - rect.left,
      max: max5,
      min: min5,
      step,
      containerWidth: rect.width
    });
    const nearestHandle = Math.abs(_value[0] - changeValue) > Math.abs(_value[1] - changeValue) ? 1 : 0;
    const _nearestHandle = theme.dir === "ltr" ? nearestHandle : nearestHandle === 1 ? 0 : 1;
    thumbIndex.current = _nearestHandle;
  };
  const getFocusedThumbIndex = () => {
    if (focused !== 1 && focused !== 0) {
      setFocused(0);
      return 0;
    }
    return focused;
  };
  const handleTrackKeydownCapture = (event) => {
    if (!disabled) {
      switch (event.key) {
        case "ArrowUp": {
          event.preventDefault();
          const focusedIndex = getFocusedThumbIndex();
          thumbs.current[focusedIndex].focus();
          setRangedValue(Math.min(Math.max(valueRef.current[focusedIndex] + step, min5), max5), focusedIndex, true);
          break;
        }
        case "ArrowRight": {
          event.preventDefault();
          const focusedIndex = getFocusedThumbIndex();
          thumbs.current[focusedIndex].focus();
          setRangedValue(Math.min(Math.max(theme.dir === "rtl" ? valueRef.current[focusedIndex] - step : valueRef.current[focusedIndex] + step, min5), max5), focusedIndex, true);
          break;
        }
        case "ArrowDown": {
          event.preventDefault();
          const focusedIndex = getFocusedThumbIndex();
          thumbs.current[focusedIndex].focus();
          setRangedValue(Math.min(Math.max(valueRef.current[focusedIndex] - step, min5), max5), focusedIndex, true);
          break;
        }
        case "ArrowLeft": {
          event.preventDefault();
          const focusedIndex = getFocusedThumbIndex();
          thumbs.current[focusedIndex].focus();
          setRangedValue(Math.min(Math.max(theme.dir === "rtl" ? valueRef.current[focusedIndex] + step : valueRef.current[focusedIndex] - step, min5), max5), focusedIndex, true);
          break;
        }
      }
    }
  };
  const sharedThumbProps = {
    max: max5,
    min: min5,
    color: color2,
    size: size3,
    labelTransition,
    labelTransitionDuration,
    labelTransitionTimingFunction,
    labelAlwaysOn,
    onBlur: () => setFocused(-1),
    classNames,
    styles: styles2
  };
  const hasArrayThumbChildren = Array.isArray(thumbChildren);
  return import_react267.default.createElement(SliderRoot, __spreadProps93(__spreadValues204({}, others), {
    size: size3,
    ref: useMergedRef(container, ref),
    onTouchStartCapture: handleTrackMouseDownCapture,
    onTouchEndCapture: () => {
      thumbIndex.current = -1;
    },
    onMouseDownCapture: handleTrackMouseDownCapture,
    onMouseUpCapture: () => {
      thumbIndex.current = -1;
    },
    onKeyDownCapture: handleTrackKeydownCapture,
    styles: styles2,
    classNames,
    disabled,
    unstyled
  }), import_react267.default.createElement(Track, {
    offset: positions[0],
    marksOffset: _value[0],
    filled: positions[1] - positions[0],
    marks,
    inverted,
    size: size3,
    radius: radius2,
    color: color2,
    min: min5,
    max: max5,
    value: _value[1],
    styles: styles2,
    classNames,
    onMouseEnter: showLabelOnHover ? () => setHovered(true) : void 0,
    onMouseLeave: showLabelOnHover ? () => setHovered(false) : void 0,
    onChange: (val) => {
      const nearestValue = Math.abs(_value[0] - val) > Math.abs(_value[1] - val) ? 1 : 0;
      const clone = [..._value];
      clone[nearestValue] = val;
      _setValue(clone);
    },
    disabled,
    unstyled
  }, import_react267.default.createElement(Thumb2, __spreadProps93(__spreadValues204({}, sharedThumbProps), {
    value: scale(_value[0]),
    position: positions[0],
    dragging: active,
    label: typeof label === "function" ? label(scale(_value[0])) : label,
    ref: (node4) => {
      thumbs.current[0] = node4;
    },
    thumbLabel: thumbFromLabel,
    onMouseDown: (event) => handleThumbMouseDown(event, 0),
    onFocus: () => setFocused(0),
    showLabelOnHover: showLabelOnHover && hovered,
    disabled,
    unstyled,
    thumbSize
  }), hasArrayThumbChildren ? thumbChildren[0] : thumbChildren), import_react267.default.createElement(Thumb2, __spreadProps93(__spreadValues204({}, sharedThumbProps), {
    thumbLabel: thumbToLabel,
    value: scale(_value[1]),
    position: positions[1],
    dragging: active,
    label: typeof label === "function" ? label(scale(_value[1])) : label,
    ref: (node4) => {
      thumbs.current[1] = node4;
    },
    onMouseDown: (event) => handleThumbMouseDown(event, 1),
    onFocus: () => setFocused(1),
    showLabelOnHover: showLabelOnHover && hovered,
    disabled,
    unstyled,
    thumbSize
  }), hasArrayThumbChildren ? thumbChildren[1] : thumbChildren)), import_react267.default.createElement("input", {
    type: "hidden",
    name: `${name}_from`,
    value: _value[0]
  }), import_react267.default.createElement("input", {
    type: "hidden",
    name: `${name}_to`,
    value: _value[1]
  }));
});
RangeSlider.displayName = "@mantine/core/RangeSlider";

// node_modules/@mantine/core/esm/Space/Space.js
var import_react268 = __toESM(require_react());
var __defProp205 = Object.defineProperty;
var __getOwnPropSymbols207 = Object.getOwnPropertySymbols;
var __hasOwnProp207 = Object.prototype.hasOwnProperty;
var __propIsEnum207 = Object.prototype.propertyIsEnumerable;
var __defNormalProp205 = (obj, key2, value) => key2 in obj ? __defProp205(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues205 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp207.call(b2, prop))
      __defNormalProp205(a2, prop, b2[prop]);
  if (__getOwnPropSymbols207)
    for (var prop of __getOwnPropSymbols207(b2)) {
      if (__propIsEnum207.call(b2, prop))
        __defNormalProp205(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest134 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp207.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols207)
    for (var prop of __getOwnPropSymbols207(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum207.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps102 = {
  w: 0,
  h: 0
};
var Space = (0, import_react268.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Space", defaultProps102, props), { w, h: h2 } = _a, others = __objRest134(_a, ["w", "h"]);
  return import_react268.default.createElement(Box, __spreadValues205({
    ref,
    w,
    miw: w,
    h: h2,
    mih: h2
  }, others));
});
Space.displayName = "@mantine/core/Space";

// node_modules/@mantine/core/esm/Spoiler/Spoiler.js
var import_react269 = __toESM(require_react());

// node_modules/@mantine/core/esm/Spoiler/Spoiler.styles.js
var useStyles93 = createStyles((theme, { transitionDuration }) => ({
  control: {},
  root: {
    position: "relative"
  },
  content: {
    display: "flex",
    flexDirection: "column",
    overflow: "hidden",
    transitionProperty: "max-height",
    transitionTimingFunction: theme.transitionTimingFunction,
    transitionDuration: `${transitionDuration}ms`,
    "@media (prefers-reduced-motion)": {
      transitionDuration: theme.respectReducedMotion ? "0ms" : void 0
    }
  }
}));
var Spoiler_styles_default = useStyles93;

// node_modules/@mantine/core/esm/Spoiler/Spoiler.js
var __defProp206 = Object.defineProperty;
var __getOwnPropSymbols208 = Object.getOwnPropertySymbols;
var __hasOwnProp208 = Object.prototype.hasOwnProperty;
var __propIsEnum208 = Object.prototype.propertyIsEnumerable;
var __defNormalProp206 = (obj, key2, value) => key2 in obj ? __defProp206(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues206 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp208.call(b2, prop))
      __defNormalProp206(a2, prop, b2[prop]);
  if (__getOwnPropSymbols208)
    for (var prop of __getOwnPropSymbols208(b2)) {
      if (__propIsEnum208.call(b2, prop))
        __defNormalProp206(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest135 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp208.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols208)
    for (var prop of __getOwnPropSymbols208(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum208.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps103 = {
  maxHeight: 100,
  transitionDuration: 200,
  initialState: false
};
var Spoiler = (0, import_react269.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Spoiler", defaultProps103, props), {
    className,
    children,
    maxHeight,
    hideLabel,
    showLabel,
    transitionDuration,
    controlRef,
    initialState,
    classNames,
    styles: styles2,
    unstyled
  } = _a, others = __objRest135(_a, [
    "className",
    "children",
    "maxHeight",
    "hideLabel",
    "showLabel",
    "transitionDuration",
    "controlRef",
    "initialState",
    "classNames",
    "styles",
    "unstyled"
  ]);
  const { classes, cx } = Spoiler_styles_default({ transitionDuration }, { classNames, styles: styles2, unstyled, name: "Spoiler" });
  const [show, setShowState] = (0, import_react269.useState)(initialState);
  const [spoiler, setSpoilerState] = (0, import_react269.useState)(initialState);
  const { ref: contentRef, height } = useElementSize();
  const spoilerMoreContent = show ? hideLabel : showLabel;
  (0, import_react269.useEffect)(() => {
    setSpoilerState(maxHeight < height);
  }, [height, maxHeight, children]);
  return import_react269.default.createElement(Box, __spreadValues206({
    className: cx(classes.root, className),
    ref
  }, others), import_react269.default.createElement("div", {
    className: classes.content,
    style: {
      maxHeight: !show ? maxHeight : height || void 0
    }
  }, import_react269.default.createElement("div", {
    ref: contentRef
  }, children)), spoiler && import_react269.default.createElement(Anchor, {
    component: "button",
    ref: controlRef,
    onClick: () => setShowState((opened) => !opened),
    className: classes.control
  }, spoilerMoreContent));
});
Spoiler.displayName = "@mantine/core/Spoiler";

// node_modules/@mantine/core/esm/Stepper/Step/Step.js
var import_react270 = __toESM(require_react());

// node_modules/@mantine/core/esm/Stepper/Step/Step.styles.js
var __defProp207 = Object.defineProperty;
var __defProps94 = Object.defineProperties;
var __getOwnPropDescs94 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols209 = Object.getOwnPropertySymbols;
var __hasOwnProp209 = Object.prototype.hasOwnProperty;
var __propIsEnum209 = Object.prototype.propertyIsEnumerable;
var __defNormalProp207 = (obj, key2, value) => key2 in obj ? __defProp207(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues207 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp209.call(b2, prop))
      __defNormalProp207(a2, prop, b2[prop]);
  if (__getOwnPropSymbols209)
    for (var prop of __getOwnPropSymbols209(b2)) {
      if (__propIsEnum209.call(b2, prop))
        __defNormalProp207(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps94 = (a2, b2) => __defProps94(a2, __getOwnPropDescs94(b2));
var iconSizes7 = {
  xs: 34,
  sm: 36,
  md: 42,
  lg: 48,
  xl: 52
};
var useStyles94 = createStyles((theme, { color: color2, iconSize, size: size3, radius: radius2, allowStepClick, iconPosition, orientation }, getRef2) => {
  const _iconSize = iconSize || theme.fn.size({ size: size3, sizes: iconSizes7 });
  const iconMargin = size3 === "xl" || size3 === "lg" ? theme.spacing.md : theme.spacing.sm;
  const _radius = theme.fn.size({ size: radius2, sizes: theme.radius });
  const colors2 = theme.fn.variant({
    variant: "filled",
    color: color2 || theme.primaryColor,
    primaryFallback: false
  });
  const separatorDistanceFromIcon = theme.spacing.xs / 2;
  const verticalOrientationStyles = {
    step: {
      justifyContent: "flex-start",
      minHeight: `calc(${_iconSize}px + ${theme.spacing.xl}px + ${separatorDistanceFromIcon}px)`,
      marginTop: `${separatorDistanceFromIcon}px`,
      overflow: "hidden",
      "&:first-of-type": {
        marginTop: 0
      },
      [`&:last-of-type .${getRef2("verticalSeparator")}`]: {
        display: "none"
      }
    }
  };
  return {
    stepLoader: {},
    step: __spreadValues207({
      display: "flex",
      flexDirection: iconPosition === "left" ? "row" : "row-reverse",
      cursor: allowStepClick ? "pointer" : "default"
    }, orientation === "vertical" ? verticalOrientationStyles.step : {
      alignItems: "center"
    }),
    stepWrapper: {
      position: "relative"
    },
    verticalSeparator: {
      top: `${_iconSize + separatorDistanceFromIcon}px`,
      left: `${_iconSize / 2}px`,
      height: "100vh",
      position: "absolute",
      borderLeft: `2px solid ${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1]}`,
      ref: getRef2("verticalSeparator")
    },
    verticalSeparatorActive: {
      borderColor: theme.fn.variant({ variant: "filled", color: color2 }).background
    },
    stepIcon: {
      boxSizing: "border-box",
      height: _iconSize,
      width: _iconSize,
      minWidth: _iconSize,
      borderRadius: _radius,
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1],
      border: `2px solid ${theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1]}`,
      transition: "background-color 150ms ease, border-color 150ms ease",
      position: "relative",
      fontWeight: 700,
      color: theme.colorScheme === "dark" ? theme.colors.dark[1] : theme.colors.gray[7],
      fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
      "&[data-progress]": {
        borderColor: colors2.background
      },
      "&[data-completed]": {
        backgroundColor: colors2.background,
        borderColor: colors2.background,
        color: theme.white
      }
    },
    stepCompletedIcon: __spreadProps94(__spreadValues207({}, theme.fn.cover()), {
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      color: theme.white
    }),
    stepBody: __spreadValues207({
      display: "flex",
      flexDirection: "column",
      marginLeft: iconPosition === "left" ? iconMargin : void 0,
      marginRight: iconPosition === "right" ? iconMargin : void 0
    }, orientation === "vertical" ? {
      marginTop: _iconSize > theme.fn.size({ size: size3, sizes: theme.fontSizes }) * 4 ? _iconSize / 4 : _iconSize / 12
    } : null),
    stepLabel: {
      textAlign: iconPosition,
      fontWeight: 500,
      fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }),
      lineHeight: 1
    },
    stepDescription: {
      textAlign: iconPosition,
      marginTop: theme.fn.size({ size: size3, sizes: theme.spacing }) / 3,
      marginBottom: theme.fn.size({ size: size3, sizes: theme.spacing }) / 3,
      fontSize: theme.fn.size({ size: size3, sizes: theme.fontSizes }) - 2,
      lineHeight: 1
    }
  };
});
var Step_styles_default = useStyles94;

// node_modules/@mantine/core/esm/Stepper/Step/Step.js
var __defProp208 = Object.defineProperty;
var __getOwnPropSymbols210 = Object.getOwnPropertySymbols;
var __hasOwnProp210 = Object.prototype.hasOwnProperty;
var __propIsEnum210 = Object.prototype.propertyIsEnumerable;
var __defNormalProp208 = (obj, key2, value) => key2 in obj ? __defProp208(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues208 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp210.call(b2, prop))
      __defNormalProp208(a2, prop, b2[prop]);
  if (__getOwnPropSymbols210)
    for (var prop of __getOwnPropSymbols210(b2)) {
      if (__propIsEnum210.call(b2, prop))
        __defNormalProp208(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest136 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp210.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols210)
    for (var prop of __getOwnPropSymbols210(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum210.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultIconSizes = {
  xs: 16,
  sm: 18,
  md: 20,
  lg: 22,
  xl: 24
};
var defaultProps104 = {
  withIcon: true,
  size: "md",
  radius: "xl",
  allowStepClick: true,
  iconPosition: "left",
  __staticSelector: "Step"
};
var getStepFragment = (Fragment6, step) => {
  if (typeof Fragment6 === "function") {
    return import_react270.default.createElement(Fragment6, {
      step
    });
  }
  return Fragment6;
};
var Step2 = (0, import_react270.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("StepperStep", defaultProps104, props), {
    className,
    step,
    state,
    color: color2,
    icon,
    completedIcon,
    progressIcon,
    label,
    description,
    withIcon,
    iconSize,
    size: size3,
    radius: radius2,
    loading,
    allowStepClick,
    allowStepSelect,
    iconPosition,
    __staticSelector,
    classNames,
    styles: styles2,
    unstyled,
    orientation
  } = _a, others = __objRest136(_a, [
    "className",
    "step",
    "state",
    "color",
    "icon",
    "completedIcon",
    "progressIcon",
    "label",
    "description",
    "withIcon",
    "iconSize",
    "size",
    "radius",
    "loading",
    "allowStepClick",
    "allowStepSelect",
    "iconPosition",
    "__staticSelector",
    "classNames",
    "styles",
    "unstyled",
    "orientation"
  ]);
  const { classes, cx, theme } = Step_styles_default({ color: color2, iconSize, size: size3, radius: radius2, allowStepClick, iconPosition, orientation }, { name: __staticSelector, classNames, styles: styles2, unstyled });
  const _iconSize = theme.fn.size({ size: size3, sizes: defaultIconSizes });
  const _icon = state === "stepCompleted" ? null : state === "stepProgress" ? progressIcon : icon;
  const dataAttributes = {
    "data-progress": state === "stepProgress" || void 0,
    "data-completed": state === "stepCompleted" || void 0
  };
  return import_react270.default.createElement(UnstyledButton, __spreadValues208(__spreadValues208({
    className: cx(classes.step, className),
    tabIndex: allowStepClick ? 0 : -1,
    ref
  }, dataAttributes), others), withIcon && import_react270.default.createElement("div", {
    className: classes.stepWrapper
  }, import_react270.default.createElement("div", __spreadValues208({
    className: classes.stepIcon
  }, dataAttributes), import_react270.default.createElement(Transition, {
    mounted: state === "stepCompleted",
    transition: "pop",
    duration: 200
  }, (transitionStyles) => import_react270.default.createElement("div", {
    className: classes.stepCompletedIcon,
    style: transitionStyles
  }, loading ? import_react270.default.createElement(Loader, {
    color: "#fff",
    size: _iconSize,
    className: classes.stepLoader
  }) : getStepFragment(completedIcon, step) || import_react270.default.createElement(CheckboxIcon, {
    indeterminate: false,
    width: _iconSize,
    height: _iconSize
  }))), state !== "stepCompleted" ? loading ? import_react270.default.createElement(Loader, {
    size: _iconSize,
    color: color2
  }) : getStepFragment(_icon || icon, step) : null), orientation === "vertical" && import_react270.default.createElement("div", {
    className: cx(classes.verticalSeparator, {
      [classes.verticalSeparatorActive]: state === "stepCompleted"
    })
  })), (label || description) && import_react270.default.createElement("div", {
    className: classes.stepBody
  }, label && import_react270.default.createElement(Text, {
    className: classes.stepLabel
  }, getStepFragment(label, step)), description && import_react270.default.createElement(Text, {
    className: classes.stepDescription,
    color: "dimmed"
  }, getStepFragment(description, step))));
});
Step2.displayName = "@mantine/core/Step";

// node_modules/@mantine/core/esm/Stepper/Stepper.js
var import_react271 = __toESM(require_react());

// node_modules/@mantine/core/esm/Stepper/StepCompleted/StepCompleted.js
function StepCompleted(props) {
  return null;
}
StepCompleted.displayName = "@mantine/core/StepCompleted";

// node_modules/@mantine/core/esm/Stepper/Stepper.styles.js
var __defProp209 = Object.defineProperty;
var __defProps95 = Object.defineProperties;
var __getOwnPropDescs95 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols211 = Object.getOwnPropertySymbols;
var __hasOwnProp211 = Object.prototype.hasOwnProperty;
var __propIsEnum211 = Object.prototype.propertyIsEnumerable;
var __defNormalProp209 = (obj, key2, value) => key2 in obj ? __defProp209(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues209 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp211.call(b2, prop))
      __defNormalProp209(a2, prop, b2[prop]);
  if (__getOwnPropSymbols211)
    for (var prop of __getOwnPropSymbols211(b2)) {
      if (__propIsEnum211.call(b2, prop))
        __defNormalProp209(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps95 = (a2, b2) => __defProps95(a2, __getOwnPropDescs95(b2));
var useStyles95 = createStyles((theme, {
  contentPadding,
  color: color2,
  orientation,
  iconPosition,
  iconSize,
  size: size3,
  breakpoint
}) => {
  const shouldBeResponsive = typeof breakpoint !== "undefined";
  const breakpointValue = theme.fn.size({ size: breakpoint, sizes: theme.breakpoints });
  const separatorOffset = typeof iconSize !== "undefined" ? iconSize / 2 - 1 : theme.fn.size({ size: size3, sizes: iconSizes7 }) / 2 - 1;
  const verticalOrientationStyles = {
    steps: {
      flexDirection: "column",
      alignItems: iconPosition === "left" ? "flex-start" : "flex-end"
    },
    separator: {
      width: 2,
      minHeight: theme.spacing.xl,
      marginLeft: iconPosition === "left" ? separatorOffset : 0,
      marginRight: iconPosition === "right" ? separatorOffset : 0,
      marginTop: `calc(${theme.spacing.xs}px / 2)`,
      marginBottom: `calc(${theme.spacing.xs}px - 2px)`
    }
  };
  const responsiveStyles = {
    steps: {
      [`@media (max-width: ${breakpointValue - 1}px)`]: verticalOrientationStyles.steps
    },
    separator: {
      [`@media (max-width: ${breakpointValue - 1}px)`]: verticalOrientationStyles.separator
    }
  };
  return {
    root: {},
    steps: __spreadValues209(__spreadValues209({
      display: "flex",
      boxSizing: "border-box",
      alignItems: "center"
    }, orientation === "vertical" ? verticalOrientationStyles.steps : null), shouldBeResponsive ? responsiveStyles.steps : null),
    separator: __spreadValues209(__spreadValues209({
      boxSizing: "border-box",
      transition: "background-color 150ms ease",
      flex: 1,
      height: 2,
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
      marginLeft: theme.spacing.md,
      marginRight: theme.spacing.md
    }, orientation === "vertical" ? verticalOrientationStyles.separator : null), shouldBeResponsive ? responsiveStyles.separator : null),
    separatorActive: {
      backgroundColor: theme.fn.variant({
        variant: "filled",
        color: color2 || theme.primaryColor,
        primaryFallback: false
      }).background
    },
    content: __spreadProps95(__spreadValues209({}, theme.fn.fontStyles()), {
      paddingTop: theme.fn.size({ size: contentPadding, sizes: theme.spacing })
    })
  };
});
var Stepper_styles_default = useStyles95;

// node_modules/@mantine/core/esm/Stepper/Stepper.js
var __defProp210 = Object.defineProperty;
var __getOwnPropSymbols212 = Object.getOwnPropertySymbols;
var __hasOwnProp212 = Object.prototype.hasOwnProperty;
var __propIsEnum212 = Object.prototype.propertyIsEnumerable;
var __defNormalProp210 = (obj, key2, value) => key2 in obj ? __defProp210(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues210 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp212.call(b2, prop))
      __defNormalProp210(a2, prop, b2[prop]);
  if (__getOwnPropSymbols212)
    for (var prop of __getOwnPropSymbols212(b2)) {
      if (__propIsEnum212.call(b2, prop))
        __defNormalProp210(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest137 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp212.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols212)
    for (var prop of __getOwnPropSymbols212(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum212.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps105 = {
  contentPadding: "md",
  size: "md",
  radius: "xl",
  orientation: "horizontal",
  iconPosition: "left",
  allowNextStepsSelect: true
};
var Stepper = (0, import_react271.forwardRef)((props, ref) => {
  var _b, _c, _d;
  const _a = useComponentDefaultProps("Stepper", defaultProps105, props), {
    className,
    children,
    onStepClick,
    active,
    icon,
    completedIcon,
    progressIcon,
    color: color2,
    iconSize,
    contentPadding,
    size: size3,
    radius: radius2,
    orientation,
    breakpoint,
    iconPosition,
    allowNextStepsSelect,
    classNames,
    styles: styles2,
    unstyled
  } = _a, others = __objRest137(_a, [
    "className",
    "children",
    "onStepClick",
    "active",
    "icon",
    "completedIcon",
    "progressIcon",
    "color",
    "iconSize",
    "contentPadding",
    "size",
    "radius",
    "orientation",
    "breakpoint",
    "iconPosition",
    "allowNextStepsSelect",
    "classNames",
    "styles",
    "unstyled"
  ]);
  const { classes, cx } = Stepper_styles_default({ contentPadding, color: color2, orientation, iconPosition, size: size3, iconSize, breakpoint }, { classNames, styles: styles2, unstyled, name: "Stepper" });
  const convertedChildren = import_react271.Children.toArray(children);
  const _children = convertedChildren.filter((child) => child.type !== StepCompleted);
  const completedStep = convertedChildren.find((item) => item.type === StepCompleted);
  const items = _children.reduce((acc, item, index7) => {
    const state = active === index7 ? "stepProgress" : active > index7 ? "stepCompleted" : "stepInactive";
    const shouldAllowSelect = () => {
      if (typeof onStepClick !== "function") {
        return false;
      }
      if (typeof item.props.allowStepSelect === "boolean") {
        return item.props.allowStepSelect;
      }
      return state === "stepCompleted" || allowNextStepsSelect;
    };
    const isStepSelectionEnabled = shouldAllowSelect();
    acc.push((0, import_react271.cloneElement)(item, {
      __staticSelector: "Stepper",
      icon: item.props.icon || icon || index7 + 1,
      key: index7,
      step: index7,
      state,
      onClick: () => isStepSelectionEnabled && onStepClick(index7),
      allowStepClick: isStepSelectionEnabled,
      completedIcon: item.props.completedIcon || completedIcon,
      progressIcon: item.props.progressIcon || progressIcon,
      color: item.props.color || color2,
      iconSize,
      size: size3,
      radius: radius2,
      classNames,
      styles: styles2,
      iconPosition: item.props.iconPosition || iconPosition,
      orientation,
      unstyled
    }));
    if (orientation === "horizontal" && index7 !== _children.length - 1) {
      acc.push(import_react271.default.createElement("div", {
        className: cx(classes.separator, { [classes.separatorActive]: index7 < active }),
        key: `separator-${index7}`
      }));
    }
    return acc;
  }, []);
  const stepContent = (_c = (_b = _children[active]) == null ? void 0 : _b.props) == null ? void 0 : _c.children;
  const completedContent = (_d = completedStep == null ? void 0 : completedStep.props) == null ? void 0 : _d.children;
  const content5 = active > _children.length - 1 ? completedContent : stepContent;
  return import_react271.default.createElement(Box, __spreadValues210({
    className: cx(classes.root, className),
    ref
  }, others), import_react271.default.createElement("div", {
    className: classes.steps
  }, items), content5 && import_react271.default.createElement("div", {
    className: classes.content
  }, content5));
});
Stepper.Step = Step2;
Stepper.Completed = StepCompleted;
Stepper.displayName = "@mantine/core/Stepper";

// node_modules/@mantine/core/esm/Switch/Switch.js
var import_react274 = __toESM(require_react());

// node_modules/@mantine/core/esm/Switch/SwitchGroup/SwitchGroup.js
var import_react273 = __toESM(require_react());

// node_modules/@mantine/core/esm/Switch/SwitchGroup.context.js
var import_react272 = __toESM(require_react());
var SwitchGroupContext = (0, import_react272.createContext)(null);
var SwitchGroupProvider = SwitchGroupContext.Provider;
var useSwitchGroupContext = () => (0, import_react272.useContext)(SwitchGroupContext);

// node_modules/@mantine/core/esm/Switch/SwitchGroup/SwitchGroup.js
var __defProp211 = Object.defineProperty;
var __getOwnPropSymbols213 = Object.getOwnPropertySymbols;
var __hasOwnProp213 = Object.prototype.hasOwnProperty;
var __propIsEnum213 = Object.prototype.propertyIsEnumerable;
var __defNormalProp211 = (obj, key2, value) => key2 in obj ? __defProp211(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues211 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp213.call(b2, prop))
      __defNormalProp211(a2, prop, b2[prop]);
  if (__getOwnPropSymbols213)
    for (var prop of __getOwnPropSymbols213(b2)) {
      if (__propIsEnum213.call(b2, prop))
        __defNormalProp211(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest138 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp213.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols213)
    for (var prop of __getOwnPropSymbols213(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum213.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps106 = {
  orientation: "horizontal",
  spacing: "lg",
  size: "sm",
  offset: "xs"
};
var SwitchGroup = (0, import_react273.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("SwitchGroup", defaultProps106, props), {
    children,
    value,
    defaultValue,
    onChange,
    orientation,
    spacing,
    size: size3,
    wrapperProps,
    offset: offset3
  } = _a, others = __objRest138(_a, [
    "children",
    "value",
    "defaultValue",
    "onChange",
    "orientation",
    "spacing",
    "size",
    "wrapperProps",
    "offset"
  ]);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: [],
    onChange
  });
  const handleChange = (event) => {
    const itemValue = event.currentTarget.value;
    setValue(_value.includes(itemValue) ? _value.filter((item) => item !== itemValue) : [..._value, itemValue]);
  };
  return import_react273.default.createElement(SwitchGroupProvider, {
    value: { value: _value, onChange: handleChange, size: size3 }
  }, import_react273.default.createElement(Input.Wrapper, __spreadValues211(__spreadValues211({
    labelElement: "div",
    size: size3,
    __staticSelector: "SwitchGroup",
    ref
  }, wrapperProps), others), import_react273.default.createElement(InputsGroup, {
    spacing,
    orientation,
    offset: offset3
  }, children)));
});
SwitchGroup.displayName = "@mantine/core/SwitchGroup";

// node_modules/@mantine/core/esm/Switch/Switch.styles.js
var __defProp212 = Object.defineProperty;
var __defProps96 = Object.defineProperties;
var __getOwnPropDescs96 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols214 = Object.getOwnPropertySymbols;
var __hasOwnProp214 = Object.prototype.hasOwnProperty;
var __propIsEnum214 = Object.prototype.propertyIsEnumerable;
var __defNormalProp212 = (obj, key2, value) => key2 in obj ? __defProp212(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues212 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp214.call(b2, prop))
      __defNormalProp212(a2, prop, b2[prop]);
  if (__getOwnPropSymbols214)
    for (var prop of __getOwnPropSymbols214(b2)) {
      if (__propIsEnum214.call(b2, prop))
        __defNormalProp212(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps96 = (a2, b2) => __defProps96(a2, __getOwnPropDescs96(b2));
var switchHeight = {
  xs: 16,
  sm: 20,
  md: 24,
  lg: 30,
  xl: 36
};
var switchWidth = {
  xs: 32,
  sm: 38,
  md: 46,
  lg: 56,
  xl: 72
};
var handleSizes = {
  xs: 12,
  sm: 14,
  md: 18,
  lg: 22,
  xl: 28
};
var labelFontSizes = {
  xs: 5,
  sm: 6,
  md: 7,
  lg: 9,
  xl: 11
};
var trackLabelPaddings = {
  xs: 4,
  sm: 5,
  md: 6,
  lg: 8,
  xl: 10
};
var useStyles96 = createStyles((theme, { size: size3, radius: radius2, color: color2, labelPosition, error }) => {
  const handleSize = theme.fn.size({ size: size3, sizes: handleSizes });
  const borderRadius = theme.fn.size({ size: radius2, sizes: theme.radius });
  const colors2 = theme.fn.variant({ variant: "filled", color: color2 });
  const trackWidth = theme.fn.size({ size: size3, sizes: switchWidth });
  const trackPadding = size3 === "xs" ? 1 : 2;
  const errorColor = theme.fn.variant({ variant: "filled", color: "red" }).background;
  return {
    input: {
      clip: "rect(1px, 1px, 1px, 1px)",
      height: 0,
      width: 0,
      overflow: "hidden",
      whiteSpace: "nowrap",
      padding: 0,
      WebkitClipPath: "inset(50%)",
      clipPath: "inset(50%)",
      position: "absolute"
    },
    track: __spreadProps96(__spreadValues212({}, theme.fn.focusStyles("input:focus + &")), {
      cursor: theme.cursorType,
      overflow: "hidden",
      WebkitTapHighlightColor: "transparent",
      position: "relative",
      borderRadius,
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[2],
      border: `1px solid ${error ? errorColor : theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`,
      height: theme.fn.size({ size: size3, sizes: switchHeight }),
      minWidth: trackWidth,
      margin: 0,
      transitionProperty: "background-color, border-color",
      transitionTimingFunction: theme.transitionTimingFunction,
      transitionDuration: "150ms",
      boxSizing: "border-box",
      appearance: "none",
      display: "flex",
      alignItems: "center",
      fontSize: theme.fn.size({ size: size3, sizes: labelFontSizes }),
      fontWeight: 600,
      order: labelPosition === "left" ? 2 : 1,
      userSelect: "none",
      MozUserSelect: "none",
      WebkitUserSelect: "none",
      MsUserSelect: "none",
      zIndex: 0,
      lineHeight: 0,
      color: theme.colorScheme === "dark" ? theme.colors.dark[1] : theme.colors.gray[6],
      transition: `color 150ms ${theme.transitionTimingFunction}`,
      "input:checked + &": {
        backgroundColor: colors2.background,
        borderColor: colors2.background,
        color: theme.white,
        transition: `color 150ms ${theme.transitionTimingFunction}`
      },
      "input:disabled + &": {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        borderColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        cursor: "not-allowed"
      }
    }),
    thumb: {
      position: "absolute",
      zIndex: 1,
      borderRadius,
      boxSizing: "border-box",
      display: "flex",
      backgroundColor: theme.white,
      height: handleSize,
      width: handleSize,
      border: `1px solid ${theme.colorScheme === "dark" ? theme.white : theme.colors.gray[3]}`,
      left: `${trackPadding}px`,
      transition: `left 150ms ${theme.transitionTimingFunction}`,
      "& > *": {
        margin: "auto"
      },
      "@media (prefers-reduced-motion)": {
        transitionDuration: theme.respectReducedMotion ? "0ms" : ""
      },
      "input:checked + * > &": {
        left: `calc(100% - ${handleSize}px - ${trackPadding}px)`,
        borderColor: theme.white
      },
      "input:disabled + * > &": {
        borderColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[2],
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[0]
      }
    },
    trackLabel: {
      height: "100%",
      display: "grid",
      placeContent: "center",
      minWidth: trackWidth - handleSize,
      paddingInline: theme.fn.size({ size: size3, sizes: trackLabelPaddings }),
      margin: `0 0 0 ${handleSize + trackPadding}px`,
      transition: `margin 150ms ${theme.transitionTimingFunction}`,
      "input:checked + * > &": {
        margin: `0 ${handleSize + trackPadding}px 0 0`
      }
    }
  };
});
var Switch_styles_default = useStyles96;

// node_modules/@mantine/core/esm/Switch/Switch.js
var __defProp213 = Object.defineProperty;
var __defProps97 = Object.defineProperties;
var __getOwnPropDescs97 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols215 = Object.getOwnPropertySymbols;
var __hasOwnProp215 = Object.prototype.hasOwnProperty;
var __propIsEnum215 = Object.prototype.propertyIsEnumerable;
var __defNormalProp213 = (obj, key2, value) => key2 in obj ? __defProp213(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues213 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp215.call(b2, prop))
      __defNormalProp213(a2, prop, b2[prop]);
  if (__getOwnPropSymbols215)
    for (var prop of __getOwnPropSymbols215(b2)) {
      if (__propIsEnum215.call(b2, prop))
        __defNormalProp213(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps97 = (a2, b2) => __defProps97(a2, __getOwnPropDescs97(b2));
var __objRest139 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp215.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols215)
    for (var prop of __getOwnPropSymbols215(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum215.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps107 = {
  offLabel: "",
  onLabel: "",
  size: "sm",
  radius: "xl",
  error: false
};
var Switch = (0, import_react274.forwardRef)((props, ref) => {
  var _b;
  const _a = useComponentDefaultProps("Switch", defaultProps107, props), {
    className,
    color: color2,
    label,
    offLabel,
    onLabel,
    id: id2,
    style: style3,
    size: size3,
    radius: radius2,
    wrapperProps,
    children,
    unstyled,
    styles: styles2,
    classNames,
    thumbIcon,
    sx,
    checked,
    defaultChecked,
    onChange,
    labelPosition,
    description,
    error,
    disabled
  } = _a, others = __objRest139(_a, [
    "className",
    "color",
    "label",
    "offLabel",
    "onLabel",
    "id",
    "style",
    "size",
    "radius",
    "wrapperProps",
    "children",
    "unstyled",
    "styles",
    "classNames",
    "thumbIcon",
    "sx",
    "checked",
    "defaultChecked",
    "onChange",
    "labelPosition",
    "description",
    "error",
    "disabled"
  ]);
  const ctx = useSwitchGroupContext();
  const { classes } = Switch_styles_default({ size: (ctx == null ? void 0 : ctx.size) || size3, color: color2, radius: radius2, labelPosition, error: !!error }, { unstyled, styles: styles2, classNames, name: "Switch" });
  const { systemStyles, rest } = extractSystemStyles(others);
  const uuid = useId(id2);
  const contextProps = ctx ? {
    checked: ctx.value.includes(rest.value),
    onChange: ctx.onChange
  } : {};
  const [_checked, handleChange] = useUncontrolled({
    value: (_b = contextProps.checked) != null ? _b : checked,
    defaultValue: defaultChecked,
    finalValue: false
  });
  return import_react274.default.createElement(InlineInput, __spreadValues213(__spreadValues213({
    className,
    sx,
    style: style3,
    id: uuid,
    size: (ctx == null ? void 0 : ctx.size) || size3,
    labelPosition,
    label,
    description,
    error,
    disabled,
    __staticSelector: "Switch",
    classNames,
    styles: styles2,
    unstyled,
    "data-checked": contextProps.checked || void 0
  }, systemStyles), wrapperProps), import_react274.default.createElement("input", __spreadProps97(__spreadValues213({}, rest), {
    disabled,
    checked: _checked,
    onChange: (event) => {
      ctx ? contextProps.onChange(event) : onChange == null ? void 0 : onChange(event);
      handleChange(event.currentTarget.checked);
    },
    id: uuid,
    ref,
    type: "checkbox",
    className: classes.input
  })), import_react274.default.createElement("label", {
    htmlFor: uuid,
    className: classes.track
  }, import_react274.default.createElement("div", {
    className: classes.thumb
  }, thumbIcon), import_react274.default.createElement("div", {
    className: classes.trackLabel
  }, _checked ? onLabel : offLabel)));
});
Switch.displayName = "@mantine/core/Switch";
Switch.Group = SwitchGroup;

// node_modules/@mantine/core/esm/Table/Table.js
var import_react275 = __toESM(require_react());

// node_modules/@mantine/core/esm/Table/Table.styles.js
var __defProp214 = Object.defineProperty;
var __defProps98 = Object.defineProperties;
var __getOwnPropDescs98 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols216 = Object.getOwnPropertySymbols;
var __hasOwnProp216 = Object.prototype.hasOwnProperty;
var __propIsEnum216 = Object.prototype.propertyIsEnumerable;
var __defNormalProp214 = (obj, key2, value) => key2 in obj ? __defProp214(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues214 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp216.call(b2, prop))
      __defNormalProp214(a2, prop, b2[prop]);
  if (__getOwnPropSymbols216)
    for (var prop of __getOwnPropSymbols216(b2)) {
      if (__propIsEnum216.call(b2, prop))
        __defNormalProp214(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps98 = (a2, b2) => __defProps98(a2, __getOwnPropDescs98(b2));
var useStyles97 = createStyles((theme, {
  captionSide,
  horizontalSpacing,
  verticalSpacing,
  fontSize,
  withBorder,
  withColumnBorders
}) => {
  const border = `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`;
  return {
    root: __spreadProps98(__spreadValues214({}, theme.fn.fontStyles()), {
      width: "100%",
      borderCollapse: "collapse",
      captionSide,
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      lineHeight: theme.lineHeight,
      border: withBorder ? border : "",
      "& caption": {
        marginTop: captionSide === "top" ? 0 : theme.spacing.xs,
        marginBottom: captionSide === "bottom" ? 0 : theme.spacing.xs,
        fontSize: theme.fontSizes.sm,
        color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6]
      },
      "& thead tr th, & tfoot tr th, & tbody tr th": {
        textAlign: "left",
        fontWeight: "bold",
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.gray[7],
        fontSize: theme.fn.size({ size: fontSize, sizes: theme.fontSizes }),
        padding: `${theme.fn.size({
          size: verticalSpacing,
          sizes: theme.spacing
        })}px ${theme.fn.size({ size: horizontalSpacing, sizes: theme.spacing })}px`
      },
      "& thead tr th": {
        borderBottom: border
      },
      "& tfoot tr th, & tbody tr th": {
        borderTop: border
      },
      "& tbody tr td": {
        padding: `${theme.fn.size({
          size: verticalSpacing,
          sizes: theme.spacing
        })}px ${theme.fn.size({ size: horizontalSpacing, sizes: theme.spacing })}px`,
        borderTop: border,
        fontSize: theme.fn.size({ size: fontSize, sizes: theme.fontSizes })
      },
      "& tbody tr:first-of-type td, & tbody tr:first-of-type th": {
        borderTop: "none"
      },
      "& thead th, & tbody td": {
        borderRight: withColumnBorders ? border : "none",
        "&:last-of-type": {
          borderRight: "none",
          borderLeft: withColumnBorders ? border : "none"
        }
      },
      "& tbody tr th": {
        borderRight: withColumnBorders ? border : "none"
      },
      "&[data-striped] tbody tr:nth-of-type(odd)": {
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0]
      },
      "&[data-hover] tbody tr": theme.fn.hover({
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[5] : theme.colors.gray[1]
      })
    })
  };
});
var Table_styles_default = useStyles97;

// node_modules/@mantine/core/esm/Table/Table.js
var __defProp215 = Object.defineProperty;
var __defProps99 = Object.defineProperties;
var __getOwnPropDescs99 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols217 = Object.getOwnPropertySymbols;
var __hasOwnProp217 = Object.prototype.hasOwnProperty;
var __propIsEnum217 = Object.prototype.propertyIsEnumerable;
var __defNormalProp215 = (obj, key2, value) => key2 in obj ? __defProp215(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues215 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp217.call(b2, prop))
      __defNormalProp215(a2, prop, b2[prop]);
  if (__getOwnPropSymbols217)
    for (var prop of __getOwnPropSymbols217(b2)) {
      if (__propIsEnum217.call(b2, prop))
        __defNormalProp215(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps99 = (a2, b2) => __defProps99(a2, __getOwnPropDescs99(b2));
var __objRest140 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp217.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols217)
    for (var prop of __getOwnPropSymbols217(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum217.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps108 = {
  striped: false,
  highlightOnHover: false,
  captionSide: "top",
  horizontalSpacing: "xs",
  fontSize: "sm",
  verticalSpacing: 7,
  withBorder: false,
  withColumnBorders: false
};
var Table = (0, import_react275.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Table", defaultProps108, props), {
    className,
    children,
    striped,
    highlightOnHover,
    captionSide,
    horizontalSpacing,
    verticalSpacing,
    fontSize,
    unstyled,
    withBorder,
    withColumnBorders
  } = _a, others = __objRest140(_a, [
    "className",
    "children",
    "striped",
    "highlightOnHover",
    "captionSide",
    "horizontalSpacing",
    "verticalSpacing",
    "fontSize",
    "unstyled",
    "withBorder",
    "withColumnBorders"
  ]);
  const { classes, cx } = Table_styles_default({ captionSide, verticalSpacing, horizontalSpacing, fontSize, withBorder, withColumnBorders }, { unstyled, name: "Table" });
  return import_react275.default.createElement(Box, __spreadProps99(__spreadValues215({}, others), {
    component: "table",
    ref,
    className: cx(classes.root, className),
    "data-striped": striped || void 0,
    "data-hover": highlightOnHover || void 0
  }), children);
});
Table.displayName = "@mantine/core/Table";

// node_modules/@mantine/core/esm/Tabs/Tabs.js
var import_react280 = __toESM(require_react());

// node_modules/@mantine/core/esm/Tabs/TabsList/TabsList.js
var import_react276 = __toESM(require_react());

// node_modules/@mantine/core/esm/Tabs/Tabs.errors.js
var TABS_ERRORS = {
  context: "Tabs component was not found in the tree",
  value: "Tabs.Tab or Tabs.Panel component was rendered with invalid value or without value"
};

// node_modules/@mantine/core/esm/Tabs/Tabs.context.js
var [TabsContextProvider, useTabsContext] = createSafeContext(TABS_ERRORS.context);

// node_modules/@mantine/core/esm/Tabs/TabsList/TabsList.styles.js
var __defProp216 = Object.defineProperty;
var __getOwnPropSymbols218 = Object.getOwnPropertySymbols;
var __hasOwnProp218 = Object.prototype.hasOwnProperty;
var __propIsEnum218 = Object.prototype.propertyIsEnumerable;
var __defNormalProp216 = (obj, key2, value) => key2 in obj ? __defProp216(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues216 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp218.call(b2, prop))
      __defNormalProp216(a2, prop, b2[prop]);
  if (__getOwnPropSymbols218)
    for (var prop of __getOwnPropSymbols218(b2)) {
      if (__propIsEnum218.call(b2, prop))
        __defNormalProp216(a2, prop, b2[prop]);
    }
  return a2;
};
function getVariantStyles8({ variant: variant2, orientation, inverted, placement }, theme) {
  const vertical = orientation === "vertical";
  if (variant2 === "default") {
    return {
      [vertical ? placement === "left" ? "borderRight" : "borderLeft" : inverted ? "borderTop" : "borderBottom"]: `2px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`
    };
  }
  if (variant2 === "outline") {
    return {
      [vertical ? placement === "left" ? "borderRight" : "borderLeft" : inverted ? "borderTop" : "borderBottom"]: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`
    };
  }
  if (variant2 === "pills") {
    return {
      gap: `calc(${theme.spacing.sm}px / 2)`
    };
  }
  return {};
}
var useStyles98 = createStyles((theme, params2) => {
  const vertical = params2.orientation === "vertical";
  return {
    tabsList: __spreadValues216({
      display: "flex",
      flexWrap: "wrap",
      flexDirection: vertical ? "column" : "row",
      justifyContent: GROUP_POSITIONS[params2.position],
      '& [role="tab"]': {
        flex: params2.grow ? 1 : void 0
      }
    }, getVariantStyles8(params2, theme))
  };
});
var TabsList_styles_default = useStyles98;

// node_modules/@mantine/core/esm/Tabs/TabsList/TabsList.js
var __defProp217 = Object.defineProperty;
var __defProps100 = Object.defineProperties;
var __getOwnPropDescs100 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols219 = Object.getOwnPropertySymbols;
var __hasOwnProp219 = Object.prototype.hasOwnProperty;
var __propIsEnum219 = Object.prototype.propertyIsEnumerable;
var __defNormalProp217 = (obj, key2, value) => key2 in obj ? __defProp217(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues217 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp219.call(b2, prop))
      __defNormalProp217(a2, prop, b2[prop]);
  if (__getOwnPropSymbols219)
    for (var prop of __getOwnPropSymbols219(b2)) {
      if (__propIsEnum219.call(b2, prop))
        __defNormalProp217(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps100 = (a2, b2) => __defProps100(a2, __getOwnPropDescs100(b2));
var __objRest141 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp219.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols219)
    for (var prop of __getOwnPropSymbols219(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum219.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps109 = {
  grow: false,
  position: "left"
};
var TabsList = (0, import_react276.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("TabsList", defaultProps109, props), { children, className, grow, position: position5 } = _a, others = __objRest141(_a, ["children", "className", "grow", "position"]);
  const { orientation, variant: variant2, color: color2, radius: radius2, inverted, placement, classNames, styles: styles2, unstyled } = useTabsContext();
  const { classes, cx } = TabsList_styles_default({ orientation, grow, variant: variant2, color: color2, position: position5, radius: radius2, inverted, placement }, { name: "Tabs", unstyled, classNames, styles: styles2 });
  return import_react276.default.createElement(Box, __spreadProps100(__spreadValues217({}, others), {
    className: cx(classes.tabsList, className),
    ref,
    role: "tablist",
    "aria-orientation": orientation
  }), children);
});
TabsList.displayName = "@mantine/core/TabsList";

// node_modules/@mantine/core/esm/Tabs/TabsPanel/TabsPanel.js
var import_react277 = __toESM(require_react());

// node_modules/@mantine/core/esm/Tabs/TabsPanel/TabsPanel.styles.js
var useStyles99 = createStyles((_theme, { orientation }) => ({
  panel: {
    flex: orientation === "vertical" ? 1 : void 0
  }
}));
var TabsPanel_styles_default = useStyles99;

// node_modules/@mantine/core/esm/Tabs/TabsPanel/TabsPanel.js
var __defProp218 = Object.defineProperty;
var __defProps101 = Object.defineProperties;
var __getOwnPropDescs101 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols220 = Object.getOwnPropertySymbols;
var __hasOwnProp220 = Object.prototype.hasOwnProperty;
var __propIsEnum220 = Object.prototype.propertyIsEnumerable;
var __defNormalProp218 = (obj, key2, value) => key2 in obj ? __defProp218(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues218 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp220.call(b2, prop))
      __defNormalProp218(a2, prop, b2[prop]);
  if (__getOwnPropSymbols220)
    for (var prop of __getOwnPropSymbols220(b2)) {
      if (__propIsEnum220.call(b2, prop))
        __defNormalProp218(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps101 = (a2, b2) => __defProps101(a2, __getOwnPropDescs101(b2));
var __objRest142 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp220.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols220)
    for (var prop of __getOwnPropSymbols220(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum220.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps110 = {};
var TabsPanel = (0, import_react277.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("TabsPanel", defaultProps110, props), { value, children, sx, className } = _a, others = __objRest142(_a, ["value", "children", "sx", "className"]);
  const ctx = useTabsContext();
  const { classes, cx } = TabsPanel_styles_default({
    orientation: ctx.orientation,
    variant: ctx.variant,
    color: ctx.color,
    radius: ctx.radius,
    inverted: ctx.inverted,
    placement: ctx.placement
  }, { name: "Tabs", unstyled: ctx.unstyled, classNames: ctx.classNames, styles: ctx.styles });
  const active = ctx.value === value;
  const content5 = ctx.keepMounted ? children : active ? children : null;
  return import_react277.default.createElement(Box, __spreadProps101(__spreadValues218({}, others), {
    ref,
    sx: [{ display: !active ? "none" : void 0 }, ...packSx(sx)],
    className: cx(classes.panel, className),
    role: "tabpanel",
    id: ctx.getPanelId(value),
    "aria-labelledby": ctx.getTabId(value)
  }), content5);
});
TabsPanel.displayName = "@mantine/core/TabsPanel";

// node_modules/@mantine/core/esm/Tabs/Tab/Tab.js
var import_react278 = __toESM(require_react());

// node_modules/@mantine/core/esm/Tabs/Tab/Tab.styles.js
var __defProp219 = Object.defineProperty;
var __defProps102 = Object.defineProperties;
var __getOwnPropDescs102 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols221 = Object.getOwnPropertySymbols;
var __hasOwnProp221 = Object.prototype.hasOwnProperty;
var __propIsEnum221 = Object.prototype.propertyIsEnumerable;
var __defNormalProp219 = (obj, key2, value) => key2 in obj ? __defProp219(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues219 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp221.call(b2, prop))
      __defNormalProp219(a2, prop, b2[prop]);
  if (__getOwnPropSymbols221)
    for (var prop of __getOwnPropSymbols221(b2)) {
      if (__propIsEnum221.call(b2, prop))
        __defNormalProp219(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps102 = (a2, b2) => __defProps102(a2, __getOwnPropDescs102(b2));
function getVariantStyles9(theme, { variant: variant2, orientation, color: color2, radius: radius2, inverted, placement }) {
  const vertical = orientation === "vertical";
  const filledScheme = theme.fn.variant({ color: color2, variant: "filled" });
  const radiusValue = theme.fn.radius(radius2);
  const borderRadius = orientation === "vertical" ? placement === "left" ? `${radiusValue}px 0 0 ${radiusValue}px` : ` 0 ${radiusValue}px ${radiusValue}px 0` : inverted ? `0 0 ${radiusValue}px ${radiusValue}px` : `${radiusValue}px ${radiusValue}px 0 0`;
  if (variant2 === "default") {
    return __spreadProps102(__spreadValues219({
      [vertical ? placement === "left" ? "borderRight" : "borderLeft" : inverted ? "borderTop" : "borderBottom"]: "2px solid transparent",
      [vertical ? placement === "left" ? "marginRight" : "marginLeft" : inverted ? "marginTop" : "marginBottom"]: -2,
      borderRadius
    }, theme.fn.hover({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0],
      borderColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]
    })), {
      "&[data-active]": __spreadValues219({
        borderColor: filledScheme.background,
        color: theme.colorScheme === "dark" ? theme.white : theme.black
      }, theme.fn.hover({ borderColor: filledScheme.background }))
    });
  }
  if (variant2 === "outline") {
    return {
      borderRadius,
      border: "1px solid transparent",
      [vertical ? placement === "left" ? "borderRight" : "borderLeft" : inverted ? "borderTop" : "borderBottom"]: "none",
      "&[data-active]": {
        borderColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3],
        "&::before": {
          content: '""',
          backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
          position: "absolute",
          bottom: vertical ? 0 : inverted ? "unset" : -1,
          top: vertical ? 0 : inverted ? -1 : "unset",
          [vertical ? "width" : "height"]: 1,
          right: vertical ? placement === "left" ? -1 : "unset" : 0,
          left: vertical ? placement === "left" ? "unset" : -1 : 0
        }
      }
    };
  }
  if (variant2 === "pills") {
    return __spreadProps102(__spreadValues219({
      borderRadius: theme.fn.radius(radius2)
    }, theme.fn.hover({
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0]
    })), {
      "&[data-active]": __spreadValues219({
        backgroundColor: filledScheme.background,
        color: theme.white
      }, theme.fn.hover({ backgroundColor: filledScheme.background }))
    });
  }
  return {};
}
var useStyles100 = createStyles((theme, params2) => ({
  tabLabel: {},
  tab: __spreadValues219({
    position: "relative",
    padding: `${theme.spacing.xs}px ${theme.spacing.md}px`,
    paddingLeft: params2.withIcon ? theme.spacing.xs : void 0,
    paddingRight: params2.withRightSection ? theme.spacing.xs : void 0,
    fontSize: theme.fontSizes.sm,
    whiteSpace: "nowrap",
    zIndex: 0,
    display: "flex",
    alignItems: "center",
    justifyContent: params2.orientation === "horizontal" ? "center" : void 0,
    lineHeight: 1,
    "&:disabled": __spreadValues219({
      opacity: 0.5,
      cursor: "not-allowed"
    }, theme.fn.hover({ backgroundColor: "transparent" })),
    "&:focus": {
      zIndex: 1
    }
  }, getVariantStyles9(theme, params2)),
  tabRightSection: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    "&:not(:only-child)": {
      marginLeft: 7
    }
  },
  tabIcon: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    "&:not(:only-child)": {
      marginRight: 7
    }
  }
}));
var Tab_styles_default = useStyles100;

// node_modules/@mantine/core/esm/Tabs/Tab/Tab.js
var __defProp220 = Object.defineProperty;
var __defProps103 = Object.defineProperties;
var __getOwnPropDescs103 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols222 = Object.getOwnPropertySymbols;
var __hasOwnProp222 = Object.prototype.hasOwnProperty;
var __propIsEnum222 = Object.prototype.propertyIsEnumerable;
var __defNormalProp220 = (obj, key2, value) => key2 in obj ? __defProp220(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues220 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp222.call(b2, prop))
      __defNormalProp220(a2, prop, b2[prop]);
  if (__getOwnPropSymbols222)
    for (var prop of __getOwnPropSymbols222(b2)) {
      if (__propIsEnum222.call(b2, prop))
        __defNormalProp220(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps103 = (a2, b2) => __defProps103(a2, __getOwnPropDescs103(b2));
var __objRest143 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp222.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols222)
    for (var prop of __getOwnPropSymbols222(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum222.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps111 = {};
var Tab = (0, import_react278.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("TabsTab", defaultProps111, props), { value, children, onKeyDown, onClick, className, icon, rightSection, color: color2 } = _a, others = __objRest143(_a, ["value", "children", "onKeyDown", "onClick", "className", "icon", "rightSection", "color"]);
  const ctx = useTabsContext();
  const hasIcon = !!icon;
  const hasRightSection = !!rightSection;
  const { theme, classes, cx } = Tab_styles_default({
    withIcon: hasIcon || hasRightSection && !children,
    withRightSection: hasRightSection || hasIcon && !children,
    orientation: ctx.orientation,
    color: color2 || ctx.color,
    variant: ctx.variant,
    radius: ctx.radius,
    inverted: ctx.inverted,
    placement: ctx.placement
  }, { name: "Tabs", unstyled: ctx.unstyled, classNames: ctx.classNames, styles: ctx.styles });
  const isActive2 = value === ctx.value;
  const activateTab = (event) => {
    ctx.onTabChange(ctx.allowTabDeactivation ? value === ctx.value ? null : value : value);
    onClick == null ? void 0 : onClick(event);
  };
  return import_react278.default.createElement(UnstyledButton, __spreadProps103(__spreadValues220({}, others), {
    unstyled: ctx.unstyled,
    className: cx(classes.tab, className),
    "data-active": isActive2 || void 0,
    ref,
    type: "button",
    role: "tab",
    id: ctx.getTabId(value),
    "aria-selected": isActive2,
    tabIndex: isActive2 || ctx.value === null ? 0 : -1,
    "aria-controls": ctx.getPanelId(value),
    onClick: activateTab,
    onKeyDown: createScopedKeydownHandler({
      siblingSelector: '[role="tab"]',
      parentSelector: '[role="tablist"]',
      activateOnFocus: ctx.activateTabWithKeyboard,
      loop: ctx.loop,
      dir: theme.dir,
      orientation: ctx.orientation,
      onKeyDown
    })
  }), icon && import_react278.default.createElement("div", {
    className: classes.tabIcon
  }, icon), children && import_react278.default.createElement("div", {
    className: classes.tabLabel
  }, children), rightSection && import_react278.default.createElement("div", {
    className: classes.tabRightSection
  }, rightSection));
});
Tab.displayName = "@mantine/core/Tab";

// node_modules/@mantine/core/esm/Tabs/TabsProvider.js
var import_react279 = __toESM(require_react());
function TabsProvider({
  defaultValue,
  value,
  onTabChange,
  orientation,
  children,
  loop,
  id: id2,
  activateTabWithKeyboard,
  allowTabDeactivation,
  variant: variant2,
  color: color2,
  radius: radius2,
  inverted,
  placement,
  keepMounted = true,
  classNames,
  styles: styles2,
  unstyled
}) {
  const uid = useId(id2);
  const [_value, onChange] = useUncontrolled({
    value,
    defaultValue,
    finalValue: null,
    onChange: onTabChange
  });
  return import_react279.default.createElement(TabsContextProvider, {
    value: {
      placement,
      value: _value,
      orientation,
      id: uid,
      loop,
      activateTabWithKeyboard,
      getTabId: getSafeId(`${uid}-tab`, TABS_ERRORS.value),
      getPanelId: getSafeId(`${uid}-panel`, TABS_ERRORS.value),
      onTabChange: onChange,
      allowTabDeactivation,
      variant: variant2,
      color: color2,
      radius: radius2,
      inverted,
      keepMounted,
      classNames,
      styles: styles2,
      unstyled
    }
  }, children);
}
TabsProvider.displayName = "@mantine/core/TabsProvider";

// node_modules/@mantine/core/esm/Tabs/Tabs.styles.js
var useStyles101 = createStyles((_theme, { orientation, placement }) => ({
  root: {
    display: orientation === "vertical" ? "flex" : void 0,
    flexDirection: placement === "right" ? "row-reverse" : "row"
  }
}));
var Tabs_styles_default = useStyles101;

// node_modules/@mantine/core/esm/Tabs/Tabs.js
var __defProp221 = Object.defineProperty;
var __defProps104 = Object.defineProperties;
var __getOwnPropDescs104 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols223 = Object.getOwnPropertySymbols;
var __hasOwnProp223 = Object.prototype.hasOwnProperty;
var __propIsEnum223 = Object.prototype.propertyIsEnumerable;
var __defNormalProp221 = (obj, key2, value) => key2 in obj ? __defProp221(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues221 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp223.call(b2, prop))
      __defNormalProp221(a2, prop, b2[prop]);
  if (__getOwnPropSymbols223)
    for (var prop of __getOwnPropSymbols223(b2)) {
      if (__propIsEnum223.call(b2, prop))
        __defNormalProp221(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps104 = (a2, b2) => __defProps104(a2, __getOwnPropDescs104(b2));
var __objRest144 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp223.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols223)
    for (var prop of __getOwnPropSymbols223(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum223.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps112 = {
  orientation: "horizontal",
  loop: true,
  activateTabWithKeyboard: true,
  allowTabDeactivation: false,
  unstyled: false,
  inverted: false,
  variant: "default",
  placement: "left"
};
var Tabs = (0, import_react280.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Tabs", defaultProps112, props), {
    defaultValue,
    value,
    orientation,
    loop,
    activateTabWithKeyboard,
    allowTabDeactivation,
    children,
    id: id2,
    onTabChange,
    variant: variant2,
    color: color2,
    className,
    unstyled,
    classNames,
    styles: styles2,
    radius: radius2,
    inverted,
    keepMounted,
    placement
  } = _a, others = __objRest144(_a, [
    "defaultValue",
    "value",
    "orientation",
    "loop",
    "activateTabWithKeyboard",
    "allowTabDeactivation",
    "children",
    "id",
    "onTabChange",
    "variant",
    "color",
    "className",
    "unstyled",
    "classNames",
    "styles",
    "radius",
    "inverted",
    "keepMounted",
    "placement"
  ]);
  const { classes, cx } = Tabs_styles_default({ orientation, color: color2, variant: variant2, radius: radius2, inverted, placement }, { unstyled, name: "Tabs", classNames, styles: styles2 });
  return import_react280.default.createElement(TabsProvider, {
    activateTabWithKeyboard,
    defaultValue,
    orientation,
    onTabChange,
    value,
    id: id2,
    loop,
    allowTabDeactivation,
    color: color2,
    variant: variant2,
    radius: radius2,
    inverted,
    keepMounted,
    placement,
    classNames,
    styles: styles2,
    unstyled
  }, import_react280.default.createElement(Box, __spreadProps104(__spreadValues221({}, others), {
    className: cx(classes.root, className),
    id: id2,
    ref
  }), children));
});
Tabs.List = TabsList;
Tabs.Tab = Tab;
Tabs.Panel = TabsPanel;
Tabs.displayName = "@mantine/core/Tabs";

// node_modules/@mantine/core/esm/ThemeIcon/ThemeIcon.js
var import_react281 = __toESM(require_react());

// node_modules/@mantine/core/esm/ThemeIcon/ThemeIcon.styles.js
var __defProp222 = Object.defineProperty;
var __defProps105 = Object.defineProperties;
var __getOwnPropDescs105 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols224 = Object.getOwnPropertySymbols;
var __hasOwnProp224 = Object.prototype.hasOwnProperty;
var __propIsEnum224 = Object.prototype.propertyIsEnumerable;
var __defNormalProp222 = (obj, key2, value) => key2 in obj ? __defProp222(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues222 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp224.call(b2, prop))
      __defNormalProp222(a2, prop, b2[prop]);
  if (__getOwnPropSymbols224)
    for (var prop of __getOwnPropSymbols224(b2)) {
      if (__propIsEnum224.call(b2, prop))
        __defNormalProp222(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps105 = (a2, b2) => __defProps105(a2, __getOwnPropDescs105(b2));
var sizes23 = {
  xs: 16,
  sm: 20,
  md: 26,
  lg: 32,
  xl: 40
};
var useStyles102 = createStyles((theme, { color: color2, size: size3, radius: radius2, gradient: gradient2, variant: variant2 }) => {
  const colors2 = theme.fn.variant({
    variant: variant2,
    color: color2 || theme.primaryColor,
    gradient: gradient2,
    primaryFallback: false
  });
  const iconSize = theme.fn.size({ size: size3, sizes: sizes23 });
  return {
    root: __spreadProps105(__spreadValues222({}, theme.fn.fontStyles()), {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      boxSizing: "border-box",
      width: iconSize,
      height: iconSize,
      minWidth: iconSize,
      minHeight: iconSize,
      borderRadius: theme.fn.radius(radius2),
      backgroundColor: colors2.background,
      color: colors2.color,
      backgroundImage: variant2 === "gradient" ? colors2.background : void 0,
      border: `${variant2 === "gradient" ? 0 : 1}px solid ${colors2.border}`
    })
  };
});
var ThemeIcon_styles_default = useStyles102;

// node_modules/@mantine/core/esm/ThemeIcon/ThemeIcon.js
var __defProp223 = Object.defineProperty;
var __getOwnPropSymbols225 = Object.getOwnPropertySymbols;
var __hasOwnProp225 = Object.prototype.hasOwnProperty;
var __propIsEnum225 = Object.prototype.propertyIsEnumerable;
var __defNormalProp223 = (obj, key2, value) => key2 in obj ? __defProp223(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues223 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp225.call(b2, prop))
      __defNormalProp223(a2, prop, b2[prop]);
  if (__getOwnPropSymbols225)
    for (var prop of __getOwnPropSymbols225(b2)) {
      if (__propIsEnum225.call(b2, prop))
        __defNormalProp223(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest145 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp225.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols225)
    for (var prop of __getOwnPropSymbols225(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum225.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps113 = {
  size: "md",
  variant: "filled"
};
var ThemeIcon = (0, import_react281.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("ThemeIcon", defaultProps113, props), { className, size: size3, radius: radius2, variant: variant2, color: color2, children, gradient: gradient2, unstyled } = _a, others = __objRest145(_a, ["className", "size", "radius", "variant", "color", "children", "gradient", "unstyled"]);
  const { classes, cx } = ThemeIcon_styles_default({ variant: variant2, radius: radius2, color: color2, size: size3, gradient: gradient2 }, { name: "ThemeIcon", unstyled });
  return import_react281.default.createElement(Box, __spreadValues223({
    className: cx(classes.root, className),
    ref
  }, others), children);
});
ThemeIcon.displayName = "@mantine/core/ThemeIcon";

// node_modules/@mantine/core/esm/Timeline/Timeline.js
var import_react283 = __toESM(require_react());

// node_modules/@mantine/core/esm/Timeline/TimelineItem/TimelineItem.js
var import_react282 = __toESM(require_react());

// node_modules/@mantine/core/esm/Timeline/TimelineItem/TimelineItem.styles.js
var useStyles103 = createStyles((theme, { bulletSize, color: color2, radius: radius2, align, lineVariant, lineWidth }) => {
  const colors2 = theme.fn.variant({ variant: "filled", color: color2 });
  return {
    itemBody: {},
    itemContent: {},
    itemBullet: {
      boxSizing: "border-box",
      width: bulletSize,
      height: bulletSize,
      borderRadius: theme.fn.size({ size: radius2, sizes: theme.radius }),
      border: `${lineWidth}px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`,
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
      position: "absolute",
      top: 0,
      left: align === "left" ? -bulletSize / 2 - lineWidth / 2 : "auto",
      right: align === "right" ? -bulletSize / 2 - lineWidth / 2 : "auto",
      display: "flex",
      alignItems: "center",
      justifyContent: "center",
      color: theme.white,
      "&[data-with-child]": {
        borderWidth: 1,
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3],
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black
      },
      "&[data-active]": {
        borderColor: colors2.background,
        backgroundColor: theme.white,
        "&[data-with-child]": {
          backgroundColor: colors2.background,
          color: theme.white
        }
      }
    },
    item: {
      position: "relative",
      boxSizing: "border-box",
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      paddingLeft: align === "left" ? theme.spacing.xl : 0,
      paddingRight: align === "right" ? theme.spacing.xl : 0,
      textAlign: align,
      "&:not(:last-of-type)::before": {
        display: "block"
      },
      "&:not(:first-of-type)": {
        marginTop: theme.spacing.xl
      },
      "&::before": {
        boxSizing: "border-box",
        position: "absolute",
        top: 0,
        left: align === "left" ? -lineWidth : "auto",
        right: align === "right" ? -lineWidth : "auto",
        bottom: -theme.spacing.xl,
        borderLeft: `${lineWidth}px ${lineVariant} ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`,
        content: '""',
        display: "none"
      },
      "&[data-line-active]": {
        "&::before": {
          borderLeftColor: colors2.background
        }
      }
    },
    itemTitle: {
      fontWeight: 500,
      lineHeight: 1,
      marginBottom: `calc(${theme.spacing.xs}px / 2)`,
      textAlign: align
    }
  };
});
var TimelineItem_styles_default = useStyles103;

// node_modules/@mantine/core/esm/Timeline/TimelineItem/TimelineItem.js
var __defProp224 = Object.defineProperty;
var __getOwnPropSymbols226 = Object.getOwnPropertySymbols;
var __hasOwnProp226 = Object.prototype.hasOwnProperty;
var __propIsEnum226 = Object.prototype.propertyIsEnumerable;
var __defNormalProp224 = (obj, key2, value) => key2 in obj ? __defProp224(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues224 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp226.call(b2, prop))
      __defNormalProp224(a2, prop, b2[prop]);
  if (__getOwnPropSymbols226)
    for (var prop of __getOwnPropSymbols226(b2)) {
      if (__propIsEnum226.call(b2, prop))
        __defNormalProp224(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest146 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp226.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols226)
    for (var prop of __getOwnPropSymbols226(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum226.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps114 = {
  bulletSize: 20,
  radius: "xl",
  lineWidth: 4,
  lineVariant: "solid"
};
var TimelineItem = (0, import_react282.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("TimelineItem", defaultProps114, props), {
    className,
    bullet,
    title,
    bulletSize,
    radius: radius2,
    lineWidth,
    active,
    lineActive,
    classNames,
    styles: styles2,
    children,
    color: color2,
    align,
    lineVariant,
    unstyled
  } = _a, others = __objRest146(_a, [
    "className",
    "bullet",
    "title",
    "bulletSize",
    "radius",
    "lineWidth",
    "active",
    "lineActive",
    "classNames",
    "styles",
    "children",
    "color",
    "align",
    "lineVariant",
    "unstyled"
  ]);
  const { classes, cx } = TimelineItem_styles_default({ bulletSize, color: color2, radius: radius2, align, lineVariant, lineWidth }, { classNames, styles: styles2, unstyled, name: "Timeline" });
  return import_react282.default.createElement(Box, __spreadValues224({
    className: cx(classes.item, className),
    "data-line-active": lineActive || void 0,
    "data-active": active || void 0,
    ref
  }, others), import_react282.default.createElement("div", {
    className: classes.itemBullet,
    "data-with-child": !!bullet || void 0,
    "data-active": active || void 0
  }, bullet), import_react282.default.createElement("div", {
    className: classes.itemBody
  }, title && import_react282.default.createElement(Text, {
    className: classes.itemTitle
  }, title), import_react282.default.createElement("div", {
    className: classes.itemContent
  }, children)));
});
TimelineItem.displayName = "@mantine/core/TimelineItem";

// node_modules/@mantine/core/esm/Timeline/Timeline.js
var __defProp225 = Object.defineProperty;
var __getOwnPropSymbols227 = Object.getOwnPropertySymbols;
var __hasOwnProp227 = Object.prototype.hasOwnProperty;
var __propIsEnum227 = Object.prototype.propertyIsEnumerable;
var __defNormalProp225 = (obj, key2, value) => key2 in obj ? __defProp225(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues225 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp227.call(b2, prop))
      __defNormalProp225(a2, prop, b2[prop]);
  if (__getOwnPropSymbols227)
    for (var prop of __getOwnPropSymbols227(b2)) {
      if (__propIsEnum227.call(b2, prop))
        __defNormalProp225(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest147 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp227.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols227)
    for (var prop of __getOwnPropSymbols227(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum227.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps115 = {
  active: -1,
  radius: "xl",
  bulletSize: 20,
  align: "left",
  lineWidth: 4,
  reverseActive: false
};
var Timeline = (0, import_react283.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Timeline", defaultProps115, props), {
    children,
    active,
    color: color2,
    radius: radius2,
    bulletSize,
    align,
    lineWidth,
    classNames,
    styles: styles2,
    sx,
    reverseActive,
    unstyled
  } = _a, others = __objRest147(_a, [
    "children",
    "active",
    "color",
    "radius",
    "bulletSize",
    "align",
    "lineWidth",
    "classNames",
    "styles",
    "sx",
    "reverseActive",
    "unstyled"
  ]);
  const _children = import_react283.Children.toArray(children);
  const items = _children.map((item, index7) => import_react283.default.cloneElement(item, {
    classNames,
    styles: styles2,
    align,
    lineWidth,
    radius: item.props.radius || radius2,
    color: item.props.color || color2,
    bulletSize: item.props.bulletSize || bulletSize,
    unstyled,
    active: item.props.active || (reverseActive ? active >= _children.length - index7 - 1 : active >= index7),
    lineActive: item.props.lineActive || (reverseActive ? active >= _children.length - index7 - 1 : active - 1 >= index7)
  }));
  const offset3 = align === "left" ? { paddingLeft: bulletSize / 2 + lineWidth / 2 } : { paddingRight: bulletSize / 2 + lineWidth / 2 };
  return import_react283.default.createElement(Box, __spreadValues225({
    ref,
    sx: [offset3, ...packSx(sx)]
  }, others), items);
});
Timeline.Item = TimelineItem;
Timeline.displayName = "@mantine/core/Timeline";

// node_modules/@mantine/core/esm/Title/Title.js
var import_react284 = __toESM(require_react());

// node_modules/@mantine/core/esm/Title/Title.styles.js
var __defProp226 = Object.defineProperty;
var __defProps106 = Object.defineProperties;
var __getOwnPropDescs106 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols228 = Object.getOwnPropertySymbols;
var __hasOwnProp228 = Object.prototype.hasOwnProperty;
var __propIsEnum228 = Object.prototype.propertyIsEnumerable;
var __defNormalProp226 = (obj, key2, value) => key2 in obj ? __defProp226(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues226 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp228.call(b2, prop))
      __defNormalProp226(a2, prop, b2[prop]);
  if (__getOwnPropSymbols228)
    for (var prop of __getOwnPropSymbols228(b2)) {
      if (__propIsEnum228.call(b2, prop))
        __defNormalProp226(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps106 = (a2, b2) => __defProps106(a2, __getOwnPropDescs106(b2));
function getFontSize(size3, element7, theme) {
  if (typeof size3 !== "undefined") {
    return size3 in theme.headings.sizes ? theme.headings.sizes[size3].fontSize : size3;
  }
  return theme.headings.sizes[element7].fontSize;
}
function getLineHeight(size3, element7, theme) {
  if (typeof size3 !== "undefined" && size3 in theme.headings.sizes) {
    return theme.headings.sizes[size3].lineHeight;
  }
  return theme.headings.sizes[element7].lineHeight;
}
var useStyles104 = createStyles((theme, { element: element7, weight, size: size3, inline: inline2 }) => ({
  root: __spreadProps106(__spreadValues226({}, theme.fn.fontStyles()), {
    fontFamily: theme.headings.fontFamily,
    fontWeight: weight || theme.headings.sizes[element7].fontWeight || theme.headings.fontWeight,
    fontSize: getFontSize(size3, element7, theme),
    lineHeight: inline2 ? 1 : getLineHeight(size3, element7, theme),
    margin: 0
  })
}));
var Title_styles_default = useStyles104;

// node_modules/@mantine/core/esm/Title/Title.js
var __defProp227 = Object.defineProperty;
var __getOwnPropSymbols229 = Object.getOwnPropertySymbols;
var __hasOwnProp229 = Object.prototype.hasOwnProperty;
var __propIsEnum229 = Object.prototype.propertyIsEnumerable;
var __defNormalProp227 = (obj, key2, value) => key2 in obj ? __defProp227(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues227 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp229.call(b2, prop))
      __defNormalProp227(a2, prop, b2[prop]);
  if (__getOwnPropSymbols229)
    for (var prop of __getOwnPropSymbols229(b2)) {
      if (__propIsEnum229.call(b2, prop))
        __defNormalProp227(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest148 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp229.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols229)
    for (var prop of __getOwnPropSymbols229(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum229.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var defaultProps116 = {
  order: 1
};
var Title = (0, import_react284.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("Title", defaultProps116, props), { className, order: order3, children, unstyled, size: size3, weight, inline: inline2 } = _a, others = __objRest148(_a, ["className", "order", "children", "unstyled", "size", "weight", "inline"]);
  const { classes, cx } = Title_styles_default({ element: `h${order3}`, weight, size: size3, inline: inline2 }, { name: "Title", unstyled });
  if (![1, 2, 3, 4, 5, 6].includes(order3)) {
    return null;
  }
  return import_react284.default.createElement(Text, __spreadValues227({
    component: `h${order3}`,
    ref,
    className: cx(classes.root, className)
  }, others), children);
});
Title.displayName = "@mantine/core/Title";

// node_modules/@mantine/core/esm/TransferList/TransferList.js
var import_react288 = __toESM(require_react());

// node_modules/@mantine/core/esm/TransferList/RenderList/RenderList.js
var import_react285 = __toESM(require_react());

// node_modules/@mantine/core/esm/TransferList/RenderList/RenderList.styles.js
var ITEM_PADDING = 7;
var useStyles105 = createStyles((theme, { reversed, native, radius: radius2 }) => ({
  transferList: {
    flex: 1,
    display: "flex",
    flexDirection: "column"
  },
  transferListItem: {
    display: "block",
    width: `calc(100% - ${ITEM_PADDING * 2}px)`,
    padding: ITEM_PADDING,
    marginLeft: `calc(${theme.spacing.sm}px - ${ITEM_PADDING}px)`,
    marginRight: `calc(${theme.spacing.sm}px - ${ITEM_PADDING}px)`,
    borderRadius: theme.fn.radius(radius2),
    "&:first-of-type": {
      marginTop: `calc(${theme.spacing.sm}px - ${ITEM_PADDING}px)`
    },
    "&:last-of-type": {
      marginBottom: `calc(${theme.spacing.sm}px - ${ITEM_PADDING}px)`
    }
  },
  transferListItemHovered: {
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : theme.colors.gray[0]
  },
  transferListItems: {
    overflow: native ? "auto" : "hidden"
  },
  transferListHeader: {
    display: "flex",
    flexDirection: reversed ? "row-reverse" : "row"
  },
  transferListBody: {
    flex: 1,
    borderRadius: theme.fn.radius(radius2),
    backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[7] : theme.white,
    border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]}`
  },
  transferListTitle: {
    marginBottom: 5
  },
  transferListSearch: {
    borderTopWidth: 0,
    borderRightWidth: 0,
    borderLeftWidth: 0,
    borderTopLeftRadius: reversed ? 0 : `calc(${theme.fn.radius(radius2)}px - 1px)`,
    borderTopRightRadius: reversed ? `calc(${theme.fn.radius(radius2)}px - 1px)` : 0,
    display: "block",
    borderBottomColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]
  },
  transferListControl: {
    borderTop: 0,
    borderRightWidth: reversed ? void 0 : 0,
    borderLeftWidth: reversed ? 0 : void 0,
    borderColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4],
    "&:last-of-type": {
      borderTopLeftRadius: reversed ? `calc(${theme.fn.radius(radius2)}px - 1px)` : 0,
      borderTopRightRadius: reversed ? 0 : `calc(${theme.fn.radius(radius2)}px - 1px)`
    },
    "&:disabled": {
      backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[6] : "transparent",
      borderColor: theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[4]
    }
  },
  separator: {
    boxSizing: "border-box",
    textAlign: "left",
    width: "100%",
    padding: "7px 12px"
  },
  separatorLabel: {
    color: theme.colorScheme === "dark" ? theme.colors.dark[3] : theme.colors.gray[5]
  }
}));
var RenderList_styles_default = useStyles105;

// node_modules/@mantine/core/esm/TransferList/RenderList/RenderList.js
var icons2 = {
  Prev: PrevIcon,
  Next: NextIcon,
  First: FirstIcon,
  Last: LastIcon
};
var rtlIons = {
  Next: PrevIcon,
  Prev: NextIcon,
  Last: FirstIcon,
  First: LastIcon
};
function RenderList({
  className,
  data,
  onSelect,
  selection,
  itemComponent: ItemComponent,
  listComponent,
  transferIcon: TransferIcon,
  transferAllIcon: TransferAllIcon,
  transferAllMatchingFilter,
  searchPlaceholder,
  query,
  onSearch,
  filter,
  nothingFound,
  placeholder,
  title,
  showTransferAll,
  reversed,
  onMoveAll,
  onMove,
  height,
  radius: radius2,
  classNames,
  styles: styles2,
  limit,
  unstyled
}) {
  const { classes, cx, theme } = RenderList_styles_default({ reversed, native: listComponent !== SelectScrollArea, radius: radius2 }, { name: "TransferList", classNames, styles: styles2, unstyled });
  const unGroupedItems = [];
  const groupedItems = [];
  const [hovered, setHovered] = (0, import_react285.useState)(-1);
  const filteredData = data.filter((item) => filter(query, item)).slice(0, limit);
  const ListComponent = listComponent || "div";
  const Icons = theme.dir === "rtl" ? rtlIons : icons2;
  const itemsRefs = (0, import_react285.useRef)({});
  const sortedData = groupOptions({ data: filteredData });
  const { scrollIntoView: scrollIntoView2, targetRef, scrollableRef } = useScrollIntoView({
    duration: 0,
    offset: 5,
    cancelable: false,
    isList: true
  });
  let groupName = null;
  sortedData.forEach((item, index7) => {
    const itemComponent = import_react285.default.createElement(UnstyledButton, {
      unstyled,
      tabIndex: -1,
      onClick: () => onSelect(item.value),
      key: item.value,
      onMouseEnter: () => setHovered(index7),
      className: cx(classes.transferListItem, {
        [classes.transferListItemHovered]: index7 === hovered
      }),
      ref: (node4) => {
        if (itemsRefs && itemsRefs.current) {
          itemsRefs.current[item.value] = node4;
        }
      }
    }, import_react285.default.createElement(ItemComponent, {
      data: item,
      selected: selection.includes(item.value),
      radius: radius2
    }));
    if (!item.group) {
      unGroupedItems.push(itemComponent);
    } else {
      if (groupName !== item.group) {
        groupName = item.group;
        groupedItems.push(import_react285.default.createElement("div", {
          className: classes.separator,
          key: groupName
        }, import_react285.default.createElement(Divider, {
          classNames: { label: classes.separatorLabel },
          label: groupName
        })));
      }
      groupedItems.push(itemComponent);
    }
  });
  if (groupedItems.length > 0 && unGroupedItems.length > 0) {
    unGroupedItems.unshift(import_react285.default.createElement("div", {
      className: classes.separator
    }, import_react285.default.createElement(Divider, {
      unstyled,
      classNames: { label: classes.separatorLabel }
    })));
  }
  const handleSearchKeydown = (event) => {
    switch (event.key) {
      case "Enter": {
        event.preventDefault();
        if (filteredData[hovered]) {
          onSelect(filteredData[hovered].value);
        }
        break;
      }
      case "ArrowDown": {
        event.preventDefault();
        setHovered((current) => {
          var _a;
          const nextIndex = current < filteredData.length - 1 ? current + 1 : current;
          targetRef.current = itemsRefs.current[(_a = filteredData[nextIndex]) == null ? void 0 : _a.value];
          scrollIntoView2({
            alignment: "end"
          });
          return nextIndex;
        });
        break;
      }
      case "ArrowUp": {
        event.preventDefault();
        setHovered((current) => {
          var _a;
          const nextIndex = current > 0 ? current - 1 : current;
          targetRef.current = itemsRefs.current[(_a = filteredData[nextIndex]) == null ? void 0 : _a.value];
          scrollIntoView2({
            alignment: "start"
          });
          return nextIndex;
        });
      }
    }
  };
  const transferIcon = reversed ? import_react285.default.createElement(Icons.Prev, null) : import_react285.default.createElement(Icons.Next, null);
  const transferAllIcon = reversed ? import_react285.default.createElement(Icons.First, null) : import_react285.default.createElement(Icons.Last, null);
  return import_react285.default.createElement("div", {
    className: cx(classes.transferList, className)
  }, title && import_react285.default.createElement(Text, {
    weight: 500,
    unstyled,
    className: classes.transferListTitle
  }, title), import_react285.default.createElement("div", {
    className: classes.transferListBody
  }, import_react285.default.createElement("div", {
    className: classes.transferListHeader
  }, import_react285.default.createElement(TextInput, {
    unstyled,
    value: query,
    onChange: (event) => {
      onSearch(event.currentTarget.value);
      setHovered(0);
    },
    onFocus: () => setHovered(0),
    onBlur: () => setHovered(-1),
    placeholder: searchPlaceholder,
    radius: 0,
    onKeyDown: handleSearchKeydown,
    sx: { flex: 1 },
    classNames: { input: classes.transferListSearch }
  }), import_react285.default.createElement(ActionIcon, {
    variant: "default",
    size: 36,
    radius: 0,
    className: classes.transferListControl,
    disabled: selection.length === 0,
    onClick: onMove,
    unstyled
  }, TransferIcon ? import_react285.default.createElement(TransferIcon, {
    reversed
  }) : transferIcon), showTransferAll && import_react285.default.createElement(ActionIcon, {
    variant: "default",
    size: 36,
    radius: 0,
    className: classes.transferListControl,
    disabled: transferAllMatchingFilter ? filteredData.length === 0 : data.length === 0,
    onClick: onMoveAll,
    unstyled
  }, TransferAllIcon ? import_react285.default.createElement(TransferAllIcon, {
    reversed
  }) : transferAllIcon)), import_react285.default.createElement(ListComponent, {
    ref: scrollableRef,
    onMouseLeave: () => setHovered(-1),
    className: classes.transferListItems,
    style: { height, position: "relative", overflowX: "hidden" }
  }, groupedItems.length > 0 || unGroupedItems.length > 0 ? import_react285.default.createElement(import_react285.default.Fragment, null, groupedItems, unGroupedItems) : import_react285.default.createElement(Text, {
    color: "dimmed",
    unstyled,
    size: "sm",
    align: "center",
    mt: "sm"
  }, !query && placeholder ? placeholder : nothingFound))));
}
RenderList.displayName = "@mantine/core/RenderList";

// node_modules/@mantine/core/esm/TransferList/DefaultItem/DefaultItem.js
var import_react286 = __toESM(require_react());
var DefaultItem3 = import_react286.default.memo(({ data, selected, radius: radius2 }) => import_react286.default.createElement(Checkbox, {
  checked: selected,
  onChange: () => {
  },
  label: data.label,
  tabIndex: -1,
  radius: radius2,
  sx: { pointerEvents: "none" }
}));

// node_modules/@mantine/core/esm/TransferList/use-selection-state/use-selection-state.js
var import_react287 = __toESM(require_react());
function useSelectionState(initialSelection = [[], []]) {
  const [selection, setSelection] = (0, import_react287.useState)(initialSelection);
  const handleSelect = (listIndex, value) => setSelection((currentSelection) => {
    const listSelection = currentSelection[listIndex];
    let result = listSelection;
    if (typeof value === "string") {
      if (listSelection.includes(value)) {
        result = listSelection.filter((item) => item !== value);
      } else {
        result = [...listSelection, value];
      }
    }
    const clone = [...currentSelection];
    clone[listIndex] = result;
    return clone;
  });
  const handleDeselect = (listIndex, values2) => setSelection((currentSelection) => {
    const clone = [...currentSelection];
    clone[listIndex] = currentSelection[listIndex].filter((item) => !values2.includes(item));
    return clone;
  });
  const handleDeselectAll = (listIndex) => setSelection((currentSelection) => {
    const clone = [...currentSelection];
    clone[listIndex] = [];
    return clone;
  });
  const handlers4 = {
    select: handleSelect,
    deselect: handleDeselect,
    deselectAll: handleDeselectAll
  };
  return [selection, handlers4];
}

// node_modules/@mantine/core/esm/TransferList/TransferList.js
var __defProp228 = Object.defineProperty;
var __defProps107 = Object.defineProperties;
var __getOwnPropDescs107 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols230 = Object.getOwnPropertySymbols;
var __hasOwnProp230 = Object.prototype.hasOwnProperty;
var __propIsEnum230 = Object.prototype.propertyIsEnumerable;
var __defNormalProp228 = (obj, key2, value) => key2 in obj ? __defProp228(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues228 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp230.call(b2, prop))
      __defNormalProp228(a2, prop, b2[prop]);
  if (__getOwnPropSymbols230)
    for (var prop of __getOwnPropSymbols230(b2)) {
      if (__propIsEnum230.call(b2, prop))
        __defNormalProp228(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps107 = (a2, b2) => __defProps107(a2, __getOwnPropDescs107(b2));
var __objRest149 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp230.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols230)
    for (var prop of __getOwnPropSymbols230(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum230.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
function defaultFilter4(query, item) {
  return item.label.toLowerCase().trim().includes(query.toLowerCase().trim());
}
var defaultProps117 = {
  itemComponent: DefaultItem3,
  filter: defaultFilter4,
  titles: [null, null],
  placeholder: [null, null],
  listHeight: 150,
  listComponent: SelectScrollArea,
  showTransferAll: true,
  limit: Infinity,
  transferAllMatchingFilter: false
};
var TransferList = (0, import_react288.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("TransferList", defaultProps117, props), {
    value,
    onChange,
    itemComponent,
    searchPlaceholder,
    searchValues,
    onSearch,
    filter,
    nothingFound,
    placeholder,
    titles,
    initialSelection,
    listHeight,
    listComponent,
    showTransferAll,
    breakpoint,
    radius: radius2,
    classNames,
    styles: styles2,
    limit,
    unstyled,
    transferIcon,
    transferAllIcon,
    transferAllMatchingFilter
  } = _a, others = __objRest149(_a, [
    "value",
    "onChange",
    "itemComponent",
    "searchPlaceholder",
    "searchValues",
    "onSearch",
    "filter",
    "nothingFound",
    "placeholder",
    "titles",
    "initialSelection",
    "listHeight",
    "listComponent",
    "showTransferAll",
    "breakpoint",
    "radius",
    "classNames",
    "styles",
    "limit",
    "unstyled",
    "transferIcon",
    "transferAllIcon",
    "transferAllMatchingFilter"
  ]);
  const [selection, handlers4] = useSelectionState(initialSelection);
  const [search3, handleSearch] = useUncontrolled({
    value: searchValues,
    defaultValue: ["", ""],
    finalValue: ["", ""],
    onChange: onSearch
  });
  const handleMoveAll = (listIndex) => {
    const items = Array(2);
    const moveToIndex = listIndex === 0 ? 1 : 0;
    if (transferAllMatchingFilter) {
      const query = search3[listIndex];
      const shownItems = value[listIndex].filter((item) => filter(query, item)).slice(0, limit);
      const hiddenItems = value[listIndex].filter((item) => !filter(query, item));
      items[listIndex] = hiddenItems;
      items[moveToIndex] = [...value[moveToIndex], ...shownItems];
    } else {
      items[listIndex] = [];
      items[moveToIndex] = [...value[moveToIndex], ...value[listIndex]];
    }
    onChange(items);
    handlers4.deselectAll(listIndex);
  };
  const handleMove = (listIndex) => {
    const moveToIndex = listIndex === 0 ? 1 : 0;
    const items = Array(2);
    const transferData = value[listIndex].reduce((acc, item) => {
      if (!selection[listIndex].includes(item.value)) {
        acc.filtered.push(item);
      } else {
        acc.current.push(item);
      }
      return acc;
    }, { filtered: [], current: [] });
    items[listIndex] = transferData.filtered;
    items[moveToIndex] = [...transferData.current, ...value[moveToIndex]];
    onChange(items);
    handlers4.deselectAll(listIndex);
  };
  const breakpoints = breakpoint ? [{ maxWidth: breakpoint, cols: 1 }] : [];
  const sharedListProps = {
    itemComponent,
    listComponent,
    transferIcon,
    transferAllIcon,
    filter,
    height: listHeight,
    showTransferAll,
    classNames,
    styles: styles2,
    limit,
    radius: radius2
  };
  return import_react288.default.createElement(SimpleGrid, __spreadValues228({
    cols: 2,
    spacing: "xl",
    breakpoints,
    ref,
    unstyled
  }, others), import_react288.default.createElement(RenderList, __spreadProps107(__spreadValues228({}, sharedListProps), {
    data: value[0],
    selection: selection[0],
    onSelect: (val) => handlers4.select(0, val),
    onMoveAll: () => handleMoveAll(0),
    onMove: () => handleMove(0),
    title: titles[0],
    placeholder: Array.isArray(placeholder) ? placeholder[0] : placeholder,
    searchPlaceholder: Array.isArray(searchPlaceholder) ? searchPlaceholder[0] : searchPlaceholder,
    nothingFound: Array.isArray(nothingFound) ? nothingFound[0] : nothingFound,
    query: search3[0],
    onSearch: (query) => handleSearch([query, search3[1]]),
    unstyled,
    transferAllMatchingFilter
  })), import_react288.default.createElement(RenderList, __spreadProps107(__spreadValues228({}, sharedListProps), {
    data: value[1],
    selection: selection[1],
    onSelect: (val) => handlers4.select(1, val),
    onMoveAll: () => handleMoveAll(1),
    onMove: () => handleMove(1),
    title: titles[1],
    placeholder: Array.isArray(placeholder) ? placeholder[1] : placeholder,
    searchPlaceholder: Array.isArray(searchPlaceholder) ? searchPlaceholder[1] : searchPlaceholder,
    nothingFound: Array.isArray(nothingFound) ? nothingFound[1] : nothingFound,
    query: search3[1],
    onSearch: (query) => handleSearch([search3[0], query]),
    reversed: true,
    unstyled,
    transferAllMatchingFilter
  })));
});
TransferList.displayName = "@mantine/core/TransferList";

// node_modules/@mantine/core/esm/TypographyStylesProvider/TypographyStylesProvider.js
var import_react289 = __toESM(require_react());

// node_modules/@mantine/core/esm/TypographyStylesProvider/TypographyStylesProvider.styles.js
var __defProp229 = Object.defineProperty;
var __defProps108 = Object.defineProperties;
var __getOwnPropDescs108 = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols231 = Object.getOwnPropertySymbols;
var __hasOwnProp231 = Object.prototype.hasOwnProperty;
var __propIsEnum231 = Object.prototype.propertyIsEnumerable;
var __defNormalProp229 = (obj, key2, value) => key2 in obj ? __defProp229(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues229 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp231.call(b2, prop))
      __defNormalProp229(a2, prop, b2[prop]);
  if (__getOwnPropSymbols231)
    for (var prop of __getOwnPropSymbols231(b2)) {
      if (__propIsEnum231.call(b2, prop))
        __defNormalProp229(a2, prop, b2[prop]);
    }
  return a2;
};
var __spreadProps108 = (a2, b2) => __defProps108(a2, __getOwnPropDescs108(b2));
var useStyles106 = createStyles((theme) => {
  const headings = keys2(theme.headings.sizes).reduce((acc, h2) => {
    const values2 = theme.headings.sizes[h2];
    acc[`& ${h2}`] = __spreadProps108(__spreadValues229({
      fontFamily: theme.headings.fontFamily,
      fontWeight: values2.fontWeight || theme.headings.fontWeight,
      marginTop: typeof values2.lineHeight === "number" ? `calc(${theme.spacing.xl}px * ${values2.lineHeight})` : theme.spacing.xl,
      marginBottom: theme.spacing.sm
    }, values2), {
      "@media (max-width: 755px)": {
        fontSize: typeof values2.fontSize === "number" && values2.fontSize / 1.3
      }
    });
    return acc;
  }, {});
  return {
    root: __spreadProps108(__spreadValues229(__spreadProps108(__spreadValues229({}, theme.fn.fontStyles()), {
      color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
      lineHeight: theme.lineHeight,
      fontSize: theme.fontSizes.md,
      "@media (max-width: 755px)": {
        fontSize: theme.fontSizes.sm
      }
    }), headings), {
      "& .ql-align-center": {
        textAlign: "center"
      },
      "& .ql-align-right": {
        textAlign: "right"
      },
      "& .ql-align-left": {
        textAlign: "left"
      },
      "& img": {
        maxWidth: "100%",
        marginBottom: theme.spacing.xs
      },
      "& p": {
        marginTop: 0,
        marginBottom: theme.spacing.lg
      },
      "& mark": {
        backgroundColor: theme.fn.themeColor("yellow", theme.colorScheme === "dark" ? 5 : 2),
        color: theme.colorScheme === "dark" ? theme.colors.dark[9] : "inherit"
      },
      "& hr": {
        marginTop: theme.spacing.md,
        marginBottom: theme.spacing.sm,
        borderBottom: 0,
        borderLeft: 0,
        borderRight: 0,
        borderTop: `1px dashed ${theme.colors.gray[theme.colorScheme === "dark" ? 4 : 6]}`
      },
      "& a": __spreadProps108(__spreadValues229({}, theme.fn.focusStyles()), {
        color: theme.colors[theme.primaryColor][theme.colorScheme === "dark" ? 4 : 6],
        textDecoration: "none",
        "&:hover": {
          textDecoration: "underline"
        }
      }),
      "& pre": {
        padding: theme.spacing.xs,
        lineHeight: theme.lineHeight,
        margin: 0,
        marginTop: theme.spacing.md,
        marginBottom: theme.spacing.md,
        overflowX: "auto",
        fontFamily: theme.fontFamilyMonospace,
        fontSize: theme.fontSizes.sm,
        borderRadius: theme.radius.sm,
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[8] : theme.colors.gray[0],
        "& code": {
          backgroundColor: "transparent",
          padding: 0,
          borderRadius: 0,
          color: "inherit",
          border: 0
        }
      },
      "& code": {
        lineHeight: theme.lineHeight,
        padding: "1px 5px",
        borderRadius: theme.radius.sm,
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
        backgroundColor: theme.colorScheme === "dark" ? theme.colors.dark[9] : theme.colors.gray[0],
        fontFamily: theme.fontFamilyMonospace,
        fontSize: theme.fontSizes.xs,
        border: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[9] : theme.colors.gray[3]}`
      },
      "& ul, & ol": {
        marginBottom: theme.spacing.md,
        paddingLeft: 38,
        "& li": {
          marginTop: theme.spacing.xs
        }
      },
      "& table": {
        width: "100%",
        borderCollapse: "collapse",
        captionSide: "bottom",
        marginBottom: theme.spacing.md,
        "& caption": {
          marginTop: theme.spacing.xs,
          fontSize: theme.fontSizes.sm,
          color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6]
        },
        "& th": {
          textAlign: "left",
          fontWeight: "bold",
          color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.colors.gray[7],
          fontSize: 14,
          padding: "7px 10px"
        },
        "& thead th": {
          borderBottom: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`
        },
        "& tfoot th": {
          borderTop: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`
        },
        "& td": {
          padding: "7px 10px",
          borderBottom: `1px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`,
          fontSize: 14
        },
        "& tr:last-of-type td": {
          borderBottom: "none"
        }
      },
      "& blockquote": {
        fontSize: theme.fontSizes.lg,
        lineHeight: theme.lineHeight,
        margin: `${theme.spacing.md}px 0`,
        borderTopRightRadius: theme.radius.sm,
        borderBottomRightRadius: theme.radius.sm,
        padding: `${theme.spacing.md}px ${theme.spacing.lg}px`,
        color: theme.colorScheme === "dark" ? theme.colors.dark[0] : theme.black,
        borderLeft: `6px solid ${theme.colorScheme === "dark" ? theme.colors.dark[4] : theme.colors.gray[3]}`,
        "& cite": {
          display: "block",
          fontSize: theme.fontSizes.sm,
          marginTop: theme.spacing.xs,
          color: theme.colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6],
          overflow: "hidden",
          textOverflow: "ellipsis"
        }
      }
    })
  };
});
var TypographyStylesProvider_styles_default = useStyles106;

// node_modules/@mantine/core/esm/TypographyStylesProvider/TypographyStylesProvider.js
var __defProp230 = Object.defineProperty;
var __getOwnPropSymbols232 = Object.getOwnPropertySymbols;
var __hasOwnProp232 = Object.prototype.hasOwnProperty;
var __propIsEnum232 = Object.prototype.propertyIsEnumerable;
var __defNormalProp230 = (obj, key2, value) => key2 in obj ? __defProp230(obj, key2, { enumerable: true, configurable: true, writable: true, value }) : obj[key2] = value;
var __spreadValues230 = (a2, b2) => {
  for (var prop in b2 || (b2 = {}))
    if (__hasOwnProp232.call(b2, prop))
      __defNormalProp230(a2, prop, b2[prop]);
  if (__getOwnPropSymbols232)
    for (var prop of __getOwnPropSymbols232(b2)) {
      if (__propIsEnum232.call(b2, prop))
        __defNormalProp230(a2, prop, b2[prop]);
    }
  return a2;
};
var __objRest150 = (source2, exclude) => {
  var target = {};
  for (var prop in source2)
    if (__hasOwnProp232.call(source2, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source2[prop];
  if (source2 != null && __getOwnPropSymbols232)
    for (var prop of __getOwnPropSymbols232(source2)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum232.call(source2, prop))
        target[prop] = source2[prop];
    }
  return target;
};
var TypographyStylesProvider = (0, import_react289.forwardRef)((props, ref) => {
  const _a = useComponentDefaultProps("TypographyStylesProvider", {}, props), { className, unstyled } = _a, others = __objRest150(_a, ["className", "unstyled"]);
  const { classes, cx } = TypographyStylesProvider_styles_default(null, { name: "TypographyStylesProvider", unstyled });
  return import_react289.default.createElement(Box, __spreadValues230({
    className: cx(classes.root, className),
    ref
  }, others));
});
TypographyStylesProvider.displayName = "@mantine/core/TypographyStylesProvider";

// node_modules/@blocknote/react/dist/blocknote-react.js
var import_react_dom10 = __toESM(require_react_dom());

// node_modules/@tippyjs/react/dist/tippy-react.esm.js
var import_react290 = __toESM(require_react());
var import_react_dom9 = __toESM(require_react_dom());
function _objectWithoutPropertiesLoose2(source2, excluded) {
  if (source2 == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source2);
  var key2, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key2 = sourceKeys[i];
    if (excluded.indexOf(key2) >= 0)
      continue;
    target[key2] = source2[key2];
  }
  return target;
}
var isBrowser4 = typeof window !== "undefined" && typeof document !== "undefined";
function preserveRef(ref, node4) {
  if (ref) {
    if (typeof ref === "function") {
      ref(node4);
    }
    if ({}.hasOwnProperty.call(ref, "current")) {
      ref.current = node4;
    }
  }
}
function ssrSafeCreateDiv() {
  return isBrowser4 && document.createElement("div");
}
function toDataAttributes(attrs) {
  var dataAttrs = {
    "data-placement": attrs.placement
  };
  if (attrs.referenceHidden) {
    dataAttrs["data-reference-hidden"] = "";
  }
  if (attrs.escaped) {
    dataAttrs["data-escaped"] = "";
  }
  return dataAttrs;
}
function deepEqual2(x3, y) {
  if (x3 === y) {
    return true;
  } else if (typeof x3 === "object" && x3 != null && typeof y === "object" && y != null) {
    if (Object.keys(x3).length !== Object.keys(y).length) {
      return false;
    }
    for (var prop in x3) {
      if (y.hasOwnProperty(prop)) {
        if (!deepEqual2(x3[prop], y[prop])) {
          return false;
        }
      } else {
        return false;
      }
    }
    return true;
  } else {
    return false;
  }
}
function uniqueByShape(arr) {
  var output = [];
  arr.forEach(function(item) {
    if (!output.find(function(outputItem) {
      return deepEqual2(item, outputItem);
    })) {
      output.push(item);
    }
  });
  return output;
}
function deepPreserveProps(instanceProps, componentProps) {
  var _instanceProps$popper, _componentProps$poppe;
  return Object.assign({}, componentProps, {
    popperOptions: Object.assign({}, instanceProps.popperOptions, componentProps.popperOptions, {
      modifiers: uniqueByShape([].concat(((_instanceProps$popper = instanceProps.popperOptions) == null ? void 0 : _instanceProps$popper.modifiers) || [], ((_componentProps$poppe = componentProps.popperOptions) == null ? void 0 : _componentProps$poppe.modifiers) || []))
    })
  });
}
var useIsomorphicLayoutEffect = isBrowser4 ? import_react290.useLayoutEffect : import_react290.useEffect;
function useMutableBox(initialValue) {
  var ref = (0, import_react290.useRef)();
  if (!ref.current) {
    ref.current = typeof initialValue === "function" ? initialValue() : initialValue;
  }
  return ref.current;
}
function updateClassName(box, action, classNames) {
  classNames.split(/\s+/).forEach(function(name) {
    if (name) {
      box.classList[action](name);
    }
  });
}
var classNamePlugin = {
  name: "className",
  defaultValue: "",
  fn: function fn2(instance) {
    var box = instance.popper.firstElementChild;
    var isDefaultRenderFn = function isDefaultRenderFn2() {
      var _instance$props$rende;
      return !!((_instance$props$rende = instance.props.render) == null ? void 0 : _instance$props$rende.$$tippy);
    };
    function add() {
      if (instance.props.className && !isDefaultRenderFn()) {
        if (true) {
          console.warn(["@tippyjs/react: Cannot use `className` prop in conjunction with", "`render` prop. Place the className on the element you are", "rendering."].join(" "));
        }
        return;
      }
      updateClassName(box, "add", instance.props.className);
    }
    function remove() {
      if (isDefaultRenderFn()) {
        updateClassName(box, "remove", instance.props.className);
      }
    }
    return {
      onCreate: add,
      onBeforeUpdate: remove,
      onAfterUpdate: add
    };
  }
};
function TippyGenerator(tippy2) {
  function Tippy(_ref) {
    var children = _ref.children, content5 = _ref.content, visible2 = _ref.visible, singleton = _ref.singleton, render2 = _ref.render, reference2 = _ref.reference, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$ignoreAttributes = _ref.ignoreAttributes, ignoreAttributes = _ref$ignoreAttributes === void 0 ? true : _ref$ignoreAttributes, __source = _ref.__source, __self = _ref.__self, restOfNativeProps = _objectWithoutPropertiesLoose2(_ref, ["children", "content", "visible", "singleton", "render", "reference", "disabled", "ignoreAttributes", "__source", "__self"]);
    var isControlledMode = visible2 !== void 0;
    var isSingletonMode = singleton !== void 0;
    var _useState = (0, import_react290.useState)(false), mounted = _useState[0], setMounted = _useState[1];
    var _useState2 = (0, import_react290.useState)({}), attrs = _useState2[0], setAttrs = _useState2[1];
    var _useState3 = (0, import_react290.useState)(), singletonContent = _useState3[0], setSingletonContent = _useState3[1];
    var mutableBox = useMutableBox(function() {
      return {
        container: ssrSafeCreateDiv(),
        renders: 1
      };
    });
    var props = Object.assign({
      ignoreAttributes
    }, restOfNativeProps, {
      content: mutableBox.container
    });
    if (isControlledMode) {
      if (true) {
        ["trigger", "hideOnClick", "showOnCreate"].forEach(function(nativeStateProp) {
          if (props[nativeStateProp] !== void 0) {
            console.warn(["@tippyjs/react: Cannot specify `" + nativeStateProp + "` prop in", "controlled mode (`visible` prop)"].join(" "));
          }
        });
      }
      props.trigger = "manual";
      props.hideOnClick = false;
    }
    if (isSingletonMode) {
      disabled = true;
    }
    var computedProps = props;
    var plugins = props.plugins || [];
    if (render2) {
      computedProps = Object.assign({}, props, {
        plugins: isSingletonMode && singleton.data != null ? [].concat(plugins, [{
          fn: function fn3() {
            return {
              onTrigger: function onTrigger2(instance, event) {
                var node4 = singleton.data.children.find(function(_ref2) {
                  var instance2 = _ref2.instance;
                  return instance2.reference === event.currentTarget;
                });
                instance.state.$$activeSingletonInstance = node4.instance;
                setSingletonContent(node4.content);
              }
            };
          }
        }]) : plugins,
        render: function render3() {
          return {
            popper: mutableBox.container
          };
        }
      });
    }
    var deps = [reference2].concat(children ? [children.type] : []);
    useIsomorphicLayoutEffect(function() {
      var element7 = reference2;
      if (reference2 && reference2.hasOwnProperty("current")) {
        element7 = reference2.current;
      }
      var instance = tippy2(element7 || mutableBox.ref || ssrSafeCreateDiv(), Object.assign({}, computedProps, {
        plugins: [classNamePlugin].concat(props.plugins || [])
      }));
      mutableBox.instance = instance;
      if (disabled) {
        instance.disable();
      }
      if (visible2) {
        instance.show();
      }
      if (isSingletonMode) {
        singleton.hook({
          instance,
          content: content5,
          props: computedProps,
          setSingletonContent
        });
      }
      setMounted(true);
      return function() {
        instance.destroy();
        singleton == null ? void 0 : singleton.cleanup(instance);
      };
    }, deps);
    useIsomorphicLayoutEffect(function() {
      var _instance$popperInsta;
      if (mutableBox.renders === 1) {
        mutableBox.renders++;
        return;
      }
      var instance = mutableBox.instance;
      instance.setProps(deepPreserveProps(instance.props, computedProps));
      (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.forceUpdate();
      if (disabled) {
        instance.disable();
      } else {
        instance.enable();
      }
      if (isControlledMode) {
        if (visible2) {
          instance.show();
        } else {
          instance.hide();
        }
      }
      if (isSingletonMode) {
        singleton.hook({
          instance,
          content: content5,
          props: computedProps,
          setSingletonContent
        });
      }
    });
    useIsomorphicLayoutEffect(function() {
      var _instance$props$poppe;
      if (!render2) {
        return;
      }
      var instance = mutableBox.instance;
      instance.setProps({
        popperOptions: Object.assign({}, instance.props.popperOptions, {
          modifiers: [].concat((((_instance$props$poppe = instance.props.popperOptions) == null ? void 0 : _instance$props$poppe.modifiers) || []).filter(function(_ref3) {
            var name = _ref3.name;
            return name !== "$$tippyReact";
          }), [{
            name: "$$tippyReact",
            enabled: true,
            phase: "beforeWrite",
            requires: ["computeStyles"],
            fn: function fn3(_ref4) {
              var _state$modifiersData;
              var state = _ref4.state;
              var hideData = (_state$modifiersData = state.modifiersData) == null ? void 0 : _state$modifiersData.hide;
              if (attrs.placement !== state.placement || attrs.referenceHidden !== (hideData == null ? void 0 : hideData.isReferenceHidden) || attrs.escaped !== (hideData == null ? void 0 : hideData.hasPopperEscaped)) {
                setAttrs({
                  placement: state.placement,
                  referenceHidden: hideData == null ? void 0 : hideData.isReferenceHidden,
                  escaped: hideData == null ? void 0 : hideData.hasPopperEscaped
                });
              }
              state.attributes.popper = {};
            }
          }])
        })
      });
    }, [attrs.placement, attrs.referenceHidden, attrs.escaped].concat(deps));
    return import_react290.default.createElement(import_react290.default.Fragment, null, children ? (0, import_react290.cloneElement)(children, {
      ref: function ref(node4) {
        mutableBox.ref = node4;
        preserveRef(children.ref, node4);
      }
    }) : null, mounted && (0, import_react_dom9.createPortal)(render2 ? render2(toDataAttributes(attrs), singletonContent, mutableBox.instance) : content5, mutableBox.container));
  }
  return Tippy;
}
function useSingletonGenerator(createSingleton3) {
  return function useSingleton2(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, _ref$disabled = _ref.disabled, disabled = _ref$disabled === void 0 ? false : _ref$disabled, _ref$overrides = _ref.overrides, overrides = _ref$overrides === void 0 ? [] : _ref$overrides;
    var _useState = (0, import_react290.useState)(false), mounted = _useState[0], setMounted = _useState[1];
    var mutableBox = useMutableBox({
      children: [],
      renders: 1
    });
    useIsomorphicLayoutEffect(function() {
      if (!mounted) {
        setMounted(true);
        return;
      }
      var children = mutableBox.children, sourceData = mutableBox.sourceData;
      if (!sourceData) {
        if (true) {
          console.error(["@tippyjs/react: The `source` variable from `useSingleton()` has", "not been passed to a <Tippy /> component."].join(" "));
        }
        return;
      }
      var instance = createSingleton3(children.map(function(child) {
        return child.instance;
      }), Object.assign({}, sourceData.props, {
        popperOptions: sourceData.instance.props.popperOptions,
        overrides,
        plugins: [classNamePlugin].concat(sourceData.props.plugins || [])
      }));
      mutableBox.instance = instance;
      if (disabled) {
        instance.disable();
      }
      return function() {
        instance.destroy();
        mutableBox.children = children.filter(function(_ref2) {
          var instance2 = _ref2.instance;
          return !instance2.state.isDestroyed;
        });
      };
    }, [mounted]);
    useIsomorphicLayoutEffect(function() {
      if (!mounted) {
        return;
      }
      if (mutableBox.renders === 1) {
        mutableBox.renders++;
        return;
      }
      var children = mutableBox.children, instance = mutableBox.instance, sourceData = mutableBox.sourceData;
      if (!(instance && sourceData)) {
        return;
      }
      var _sourceData$props = sourceData.props, content5 = _sourceData$props.content, props = _objectWithoutPropertiesLoose2(_sourceData$props, ["content"]);
      instance.setProps(deepPreserveProps(instance.props, Object.assign({}, props, {
        overrides
      })));
      instance.setInstances(children.map(function(child) {
        return child.instance;
      }));
      if (disabled) {
        instance.disable();
      } else {
        instance.enable();
      }
    });
    return (0, import_react290.useMemo)(function() {
      var source2 = {
        data: mutableBox,
        hook: function hook(data) {
          mutableBox.sourceData = data;
          mutableBox.setSingletonContent = data.setSingletonContent;
        },
        cleanup: function cleanup() {
          mutableBox.sourceData = null;
        }
      };
      var target = {
        hook: function hook(data) {
          var _mutableBox$instance, _mutableBox$instance2;
          mutableBox.children = mutableBox.children.filter(function(_ref3) {
            var instance = _ref3.instance;
            return data.instance !== instance;
          });
          mutableBox.children.push(data);
          if (((_mutableBox$instance = mutableBox.instance) == null ? void 0 : _mutableBox$instance.state.isMounted) && ((_mutableBox$instance2 = mutableBox.instance) == null ? void 0 : _mutableBox$instance2.state.$$activeSingletonInstance) === data.instance) {
            mutableBox.setSingletonContent == null ? void 0 : mutableBox.setSingletonContent(data.content);
          }
          if (mutableBox.instance && !mutableBox.instance.state.isDestroyed) {
            mutableBox.instance.setInstances(mutableBox.children.map(function(child) {
              return child.instance;
            }));
          }
        },
        cleanup: function cleanup(instance) {
          mutableBox.children = mutableBox.children.filter(function(data) {
            return data.instance !== instance;
          });
          if (mutableBox.instance && !mutableBox.instance.state.isDestroyed) {
            mutableBox.instance.setInstances(mutableBox.children.map(function(child) {
              return child.instance;
            }));
          }
        }
      };
      return [source2, target];
    }, []);
  };
}
var forwardRef128 = function(Tippy, defaultProps118) {
  return (0, import_react290.forwardRef)(function TippyWrapper(_ref, _ref2) {
    var children = _ref.children, props = _objectWithoutPropertiesLoose2(_ref, ["children"]);
    return (
      // If I spread them separately here, Babel adds the _extends ponyfill for
      // some reason
      import_react290.default.createElement(Tippy, Object.assign({}, defaultProps118, props), children ? (0, import_react290.cloneElement)(children, {
        ref: function ref(node4) {
          preserveRef(_ref2, node4);
          preserveRef(children.ref, node4);
        }
      }) : null)
    );
  });
};
var useSingleton = useSingletonGenerator(createSingleton);
var index5 = forwardRef128(TippyGenerator(tippy_esm_default));
var tippy_react_esm_default = index5;

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
var i;
function stringify2(arr) {
  var offset3 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset3 + 0]] + byteToHex[arr[offset3 + 1]] + byteToHex[arr[offset3 + 2]] + byteToHex[arr[offset3 + 3]] + "-" + byteToHex[arr[offset3 + 4]] + byteToHex[arr[offset3 + 5]] + "-" + byteToHex[arr[offset3 + 6]] + byteToHex[arr[offset3 + 7]] + "-" + byteToHex[arr[offset3 + 8]] + byteToHex[arr[offset3 + 9]] + "-" + byteToHex[arr[offset3 + 10]] + byteToHex[arr[offset3 + 11]] + byteToHex[arr[offset3 + 12]] + byteToHex[arr[offset3 + 13]] + byteToHex[arr[offset3 + 14]] + byteToHex[arr[offset3 + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify2;

// node_modules/uuid/dist/esm-browser/parse.js
function parse2(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse2;

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35_default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset3) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset3 = offset3 || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset3 + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input3) {
  var output = [];
  var length32 = input3.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x3 = input3[i >> 5] >>> i % 32 & 255;
    var hex = parseInt(hexTab.charAt(x3 >>> 4 & 15) + hexTab.charAt(x3 & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x3, len) {
  x3[len >> 5] |= 128 << len % 32;
  x3[getOutputLength(len) - 1] = len;
  var a2 = 1732584193;
  var b2 = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x3.length; i += 16) {
    var olda = a2;
    var oldb = b2;
    var oldc = c;
    var oldd = d;
    a2 = md5ff(a2, b2, c, d, x3[i], 7, -680876936);
    d = md5ff(d, a2, b2, c, x3[i + 1], 12, -389564586);
    c = md5ff(c, d, a2, b2, x3[i + 2], 17, 606105819);
    b2 = md5ff(b2, c, d, a2, x3[i + 3], 22, -1044525330);
    a2 = md5ff(a2, b2, c, d, x3[i + 4], 7, -176418897);
    d = md5ff(d, a2, b2, c, x3[i + 5], 12, 1200080426);
    c = md5ff(c, d, a2, b2, x3[i + 6], 17, -1473231341);
    b2 = md5ff(b2, c, d, a2, x3[i + 7], 22, -45705983);
    a2 = md5ff(a2, b2, c, d, x3[i + 8], 7, 1770035416);
    d = md5ff(d, a2, b2, c, x3[i + 9], 12, -1958414417);
    c = md5ff(c, d, a2, b2, x3[i + 10], 17, -42063);
    b2 = md5ff(b2, c, d, a2, x3[i + 11], 22, -1990404162);
    a2 = md5ff(a2, b2, c, d, x3[i + 12], 7, 1804603682);
    d = md5ff(d, a2, b2, c, x3[i + 13], 12, -40341101);
    c = md5ff(c, d, a2, b2, x3[i + 14], 17, -1502002290);
    b2 = md5ff(b2, c, d, a2, x3[i + 15], 22, 1236535329);
    a2 = md5gg(a2, b2, c, d, x3[i + 1], 5, -165796510);
    d = md5gg(d, a2, b2, c, x3[i + 6], 9, -1069501632);
    c = md5gg(c, d, a2, b2, x3[i + 11], 14, 643717713);
    b2 = md5gg(b2, c, d, a2, x3[i], 20, -373897302);
    a2 = md5gg(a2, b2, c, d, x3[i + 5], 5, -701558691);
    d = md5gg(d, a2, b2, c, x3[i + 10], 9, 38016083);
    c = md5gg(c, d, a2, b2, x3[i + 15], 14, -660478335);
    b2 = md5gg(b2, c, d, a2, x3[i + 4], 20, -405537848);
    a2 = md5gg(a2, b2, c, d, x3[i + 9], 5, 568446438);
    d = md5gg(d, a2, b2, c, x3[i + 14], 9, -1019803690);
    c = md5gg(c, d, a2, b2, x3[i + 3], 14, -187363961);
    b2 = md5gg(b2, c, d, a2, x3[i + 8], 20, 1163531501);
    a2 = md5gg(a2, b2, c, d, x3[i + 13], 5, -1444681467);
    d = md5gg(d, a2, b2, c, x3[i + 2], 9, -51403784);
    c = md5gg(c, d, a2, b2, x3[i + 7], 14, 1735328473);
    b2 = md5gg(b2, c, d, a2, x3[i + 12], 20, -1926607734);
    a2 = md5hh(a2, b2, c, d, x3[i + 5], 4, -378558);
    d = md5hh(d, a2, b2, c, x3[i + 8], 11, -2022574463);
    c = md5hh(c, d, a2, b2, x3[i + 11], 16, 1839030562);
    b2 = md5hh(b2, c, d, a2, x3[i + 14], 23, -35309556);
    a2 = md5hh(a2, b2, c, d, x3[i + 1], 4, -1530992060);
    d = md5hh(d, a2, b2, c, x3[i + 4], 11, 1272893353);
    c = md5hh(c, d, a2, b2, x3[i + 7], 16, -155497632);
    b2 = md5hh(b2, c, d, a2, x3[i + 10], 23, -1094730640);
    a2 = md5hh(a2, b2, c, d, x3[i + 13], 4, 681279174);
    d = md5hh(d, a2, b2, c, x3[i], 11, -358537222);
    c = md5hh(c, d, a2, b2, x3[i + 3], 16, -722521979);
    b2 = md5hh(b2, c, d, a2, x3[i + 6], 23, 76029189);
    a2 = md5hh(a2, b2, c, d, x3[i + 9], 4, -640364487);
    d = md5hh(d, a2, b2, c, x3[i + 12], 11, -421815835);
    c = md5hh(c, d, a2, b2, x3[i + 15], 16, 530742520);
    b2 = md5hh(b2, c, d, a2, x3[i + 2], 23, -995338651);
    a2 = md5ii(a2, b2, c, d, x3[i], 6, -198630844);
    d = md5ii(d, a2, b2, c, x3[i + 7], 10, 1126891415);
    c = md5ii(c, d, a2, b2, x3[i + 14], 15, -1416354905);
    b2 = md5ii(b2, c, d, a2, x3[i + 5], 21, -57434055);
    a2 = md5ii(a2, b2, c, d, x3[i + 12], 6, 1700485571);
    d = md5ii(d, a2, b2, c, x3[i + 3], 10, -1894986606);
    c = md5ii(c, d, a2, b2, x3[i + 10], 15, -1051523);
    b2 = md5ii(b2, c, d, a2, x3[i + 1], 21, -2054922799);
    a2 = md5ii(a2, b2, c, d, x3[i + 8], 6, 1873313359);
    d = md5ii(d, a2, b2, c, x3[i + 15], 10, -30611744);
    c = md5ii(c, d, a2, b2, x3[i + 6], 15, -1560198380);
    b2 = md5ii(b2, c, d, a2, x3[i + 13], 21, 1309151649);
    a2 = md5ii(a2, b2, c, d, x3[i + 4], 6, -145523070);
    d = md5ii(d, a2, b2, c, x3[i + 11], 10, -1120210379);
    c = md5ii(c, d, a2, b2, x3[i + 2], 15, 718787259);
    b2 = md5ii(b2, c, d, a2, x3[i + 9], 21, -343485551);
    a2 = safeAdd(a2, olda);
    b2 = safeAdd(b2, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a2, b2, c, d];
}
function bytesToWords(input3) {
  if (input3.length === 0) {
    return [];
  }
  var length8 = input3.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input3[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x3, y) {
  var lsw = (x3 & 65535) + (y & 65535);
  var msw = (x3 >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q3, a2, b2, x3, s2, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a2, q3), safeAdd(x3, t)), s2), b2);
}
function md5ff(a2, b2, c, d, x3, s2, t) {
  return md5cmn(b2 & c | ~b2 & d, a2, b2, x3, s2, t);
}
function md5gg(a2, b2, c, d, x3, s2, t) {
  return md5cmn(b2 & d | c & ~d, a2, b2, x3, s2, t);
}
function md5hh(a2, b2, c, d, x3, s2, t) {
  return md5cmn(b2 ^ c ^ d, a2, b2, x3, s2, t);
}
function md5ii(a2, b2, c, d, x3, s2, t) {
  return md5cmn(c ^ (b2 | ~d), a2, b2, x3, s2, t);
}
var md5_default = md5;

// node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35_default("v3", 48, md5_default);

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options2, buf, offset3) {
  options2 = options2 || {};
  var rnds = options2.random || (options2.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset3 = offset3 || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset3 + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// node_modules/uuid/dist/esm-browser/sha1.js
function f(s2, x3, y, z) {
  switch (s2) {
    case 0:
      return x3 & y ^ ~x3 & z;
    case 1:
      return x3 ^ y ^ z;
    case 2:
      return x3 & y ^ x3 & z ^ y & z;
    case 3:
      return x3 ^ y ^ z;
  }
}
function ROTL(x3, n) {
  return x3 << n | x3 >>> 32 - n;
}
function sha1(bytes) {
  var K2 = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a2 = H[0];
    var b2 = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s2 = Math.floor(_t2 / 20);
      var T2 = ROTL(a2, 5) + f(s2, b2, c, d) + e + K2[s2] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b2, 30) >>> 0;
      b2 = a2;
      a2 = T2;
    }
    H[0] = H[0] + a2 >>> 0;
    H[1] = H[1] + b2 >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35_default("v5", 80, sha1_default);

// node_modules/rehype-parse/lib/index.js
var import_parser = __toESM(require_parser(), 1);

// node_modules/property-information/lib/util/schema.js
var Schema2 = class {
  /**
   * @constructor
   * @param {Properties} property
   * @param {Normal} normal
   * @param {string} [space]
   */
  constructor(property, normal, space2) {
    this.property = property;
    this.normal = normal;
    if (space2) {
      this.space = space2;
    }
  }
};
Schema2.prototype.property = {};
Schema2.prototype.normal = {};
Schema2.prototype.space = null;

// node_modules/property-information/lib/util/merge.js
function merge2(definitions2, space2) {
  const property = {};
  const normal = {};
  let index7 = -1;
  while (++index7 < definitions2.length) {
    Object.assign(property, definitions2[index7].property);
    Object.assign(normal, definitions2[index7].normal);
  }
  return new Schema2(property, normal, space2);
}

// node_modules/property-information/lib/normalize.js
function normalize2(value) {
  return value.toLowerCase();
}

// node_modules/property-information/lib/util/info.js
var Info = class {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   */
  constructor(property, attribute) {
    this.property = property;
    this.attribute = attribute;
  }
};
Info.prototype.space = null;
Info.prototype.boolean = false;
Info.prototype.booleanish = false;
Info.prototype.overloadedBoolean = false;
Info.prototype.number = false;
Info.prototype.commaSeparated = false;
Info.prototype.spaceSeparated = false;
Info.prototype.commaOrSpaceSeparated = false;
Info.prototype.mustUseProperty = false;
Info.prototype.defined = false;

// node_modules/property-information/lib/util/types.js
var types_exports = {};
__export(types_exports, {
  boolean: () => boolean,
  booleanish: () => booleanish,
  commaOrSpaceSeparated: () => commaOrSpaceSeparated,
  commaSeparated: () => commaSeparated,
  number: () => number,
  overloadedBoolean: () => overloadedBoolean,
  spaceSeparated: () => spaceSeparated
});
var powers = 0;
var boolean = increment();
var booleanish = increment();
var overloadedBoolean = increment();
var number = increment();
var spaceSeparated = increment();
var commaSeparated = increment();
var commaOrSpaceSeparated = increment();
function increment() {
  return 2 ** ++powers;
}

// node_modules/property-information/lib/util/defined-info.js
var checks = Object.keys(types_exports);
var DefinedInfo = class extends Info {
  /**
   * @constructor
   * @param {string} property
   * @param {string} attribute
   * @param {number|null} [mask]
   * @param {string} [space]
   */
  constructor(property, attribute, mask, space2) {
    let index7 = -1;
    super(property, attribute);
    mark(this, "space", space2);
    if (typeof mask === "number") {
      while (++index7 < checks.length) {
        const check = checks[index7];
        mark(this, checks[index7], (mask & types_exports[check]) === types_exports[check]);
      }
    }
  }
};
DefinedInfo.prototype.defined = true;
function mark(values2, key2, value) {
  if (value) {
    values2[key2] = value;
  }
}

// node_modules/property-information/lib/util/create.js
var own = {}.hasOwnProperty;
function create(definition3) {
  const property = {};
  const normal = {};
  let prop;
  for (prop in definition3.properties) {
    if (own.call(definition3.properties, prop)) {
      const value = definition3.properties[prop];
      const info = new DefinedInfo(
        prop,
        definition3.transform(definition3.attributes || {}, prop),
        value,
        definition3.space
      );
      if (definition3.mustUseProperty && definition3.mustUseProperty.includes(prop)) {
        info.mustUseProperty = true;
      }
      property[prop] = info;
      normal[normalize2(prop)] = prop;
      normal[normalize2(info.attribute)] = prop;
    }
  }
  return new Schema2(property, normal, definition3.space);
}

// node_modules/property-information/lib/xlink.js
var xlink = create({
  space: "xlink",
  transform(_2, prop) {
    return "xlink:" + prop.slice(5).toLowerCase();
  },
  properties: {
    xLinkActuate: null,
    xLinkArcRole: null,
    xLinkHref: null,
    xLinkRole: null,
    xLinkShow: null,
    xLinkTitle: null,
    xLinkType: null
  }
});

// node_modules/property-information/lib/xml.js
var xml = create({
  space: "xml",
  transform(_2, prop) {
    return "xml:" + prop.slice(3).toLowerCase();
  },
  properties: { xmlLang: null, xmlBase: null, xmlSpace: null }
});

// node_modules/property-information/lib/util/case-sensitive-transform.js
function caseSensitiveTransform(attributes, attribute) {
  return attribute in attributes ? attributes[attribute] : attribute;
}

// node_modules/property-information/lib/util/case-insensitive-transform.js
function caseInsensitiveTransform(attributes, property) {
  return caseSensitiveTransform(attributes, property.toLowerCase());
}

// node_modules/property-information/lib/xmlns.js
var xmlns = create({
  space: "xmlns",
  attributes: { xmlnsxlink: "xmlns:xlink" },
  transform: caseInsensitiveTransform,
  properties: { xmlns: null, xmlnsXLink: null }
});

// node_modules/property-information/lib/aria.js
var aria = create({
  transform(_2, prop) {
    return prop === "role" ? prop : "aria-" + prop.slice(4).toLowerCase();
  },
  properties: {
    ariaActiveDescendant: null,
    ariaAtomic: booleanish,
    ariaAutoComplete: null,
    ariaBusy: booleanish,
    ariaChecked: booleanish,
    ariaColCount: number,
    ariaColIndex: number,
    ariaColSpan: number,
    ariaControls: spaceSeparated,
    ariaCurrent: null,
    ariaDescribedBy: spaceSeparated,
    ariaDetails: null,
    ariaDisabled: booleanish,
    ariaDropEffect: spaceSeparated,
    ariaErrorMessage: null,
    ariaExpanded: booleanish,
    ariaFlowTo: spaceSeparated,
    ariaGrabbed: booleanish,
    ariaHasPopup: null,
    ariaHidden: booleanish,
    ariaInvalid: null,
    ariaKeyShortcuts: null,
    ariaLabel: null,
    ariaLabelledBy: spaceSeparated,
    ariaLevel: number,
    ariaLive: null,
    ariaModal: booleanish,
    ariaMultiLine: booleanish,
    ariaMultiSelectable: booleanish,
    ariaOrientation: null,
    ariaOwns: spaceSeparated,
    ariaPlaceholder: null,
    ariaPosInSet: number,
    ariaPressed: booleanish,
    ariaReadOnly: booleanish,
    ariaRelevant: null,
    ariaRequired: booleanish,
    ariaRoleDescription: spaceSeparated,
    ariaRowCount: number,
    ariaRowIndex: number,
    ariaRowSpan: number,
    ariaSelected: booleanish,
    ariaSetSize: number,
    ariaSort: null,
    ariaValueMax: number,
    ariaValueMin: number,
    ariaValueNow: number,
    ariaValueText: null,
    role: null
  }
});

// node_modules/property-information/lib/html.js
var html = create({
  space: "html",
  attributes: {
    acceptcharset: "accept-charset",
    classname: "class",
    htmlfor: "for",
    httpequiv: "http-equiv"
  },
  transform: caseInsensitiveTransform,
  mustUseProperty: ["checked", "multiple", "muted", "selected"],
  properties: {
    // Standard Properties.
    abbr: null,
    accept: commaSeparated,
    acceptCharset: spaceSeparated,
    accessKey: spaceSeparated,
    action: null,
    allow: null,
    allowFullScreen: boolean,
    allowPaymentRequest: boolean,
    allowUserMedia: boolean,
    alt: null,
    as: null,
    async: boolean,
    autoCapitalize: null,
    autoComplete: spaceSeparated,
    autoFocus: boolean,
    autoPlay: boolean,
    capture: boolean,
    charSet: null,
    checked: boolean,
    cite: null,
    className: spaceSeparated,
    cols: number,
    colSpan: null,
    content: null,
    contentEditable: booleanish,
    controls: boolean,
    controlsList: spaceSeparated,
    coords: number | commaSeparated,
    crossOrigin: null,
    data: null,
    dateTime: null,
    decoding: null,
    default: boolean,
    defer: boolean,
    dir: null,
    dirName: null,
    disabled: boolean,
    download: overloadedBoolean,
    draggable: booleanish,
    encType: null,
    enterKeyHint: null,
    form: null,
    formAction: null,
    formEncType: null,
    formMethod: null,
    formNoValidate: boolean,
    formTarget: null,
    headers: spaceSeparated,
    height: number,
    hidden: boolean,
    high: number,
    href: null,
    hrefLang: null,
    htmlFor: spaceSeparated,
    httpEquiv: spaceSeparated,
    id: null,
    imageSizes: null,
    imageSrcSet: null,
    inputMode: null,
    integrity: null,
    is: null,
    isMap: boolean,
    itemId: null,
    itemProp: spaceSeparated,
    itemRef: spaceSeparated,
    itemScope: boolean,
    itemType: spaceSeparated,
    kind: null,
    label: null,
    lang: null,
    language: null,
    list: null,
    loading: null,
    loop: boolean,
    low: number,
    manifest: null,
    max: null,
    maxLength: number,
    media: null,
    method: null,
    min: null,
    minLength: number,
    multiple: boolean,
    muted: boolean,
    name: null,
    nonce: null,
    noModule: boolean,
    noValidate: boolean,
    onAbort: null,
    onAfterPrint: null,
    onAuxClick: null,
    onBeforeMatch: null,
    onBeforePrint: null,
    onBeforeUnload: null,
    onBlur: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onContextLost: null,
    onContextMenu: null,
    onContextRestored: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFormData: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLanguageChange: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadEnd: null,
    onLoadStart: null,
    onMessage: null,
    onMessageError: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRejectionHandled: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onScrollEnd: null,
    onSecurityPolicyViolation: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onSlotChange: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnhandledRejection: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onWheel: null,
    open: boolean,
    optimum: number,
    pattern: null,
    ping: spaceSeparated,
    placeholder: null,
    playsInline: boolean,
    poster: null,
    preload: null,
    readOnly: boolean,
    referrerPolicy: null,
    rel: spaceSeparated,
    required: boolean,
    reversed: boolean,
    rows: number,
    rowSpan: number,
    sandbox: spaceSeparated,
    scope: null,
    scoped: boolean,
    seamless: boolean,
    selected: boolean,
    shape: null,
    size: number,
    sizes: null,
    slot: null,
    span: number,
    spellCheck: booleanish,
    src: null,
    srcDoc: null,
    srcLang: null,
    srcSet: null,
    start: number,
    step: null,
    style: null,
    tabIndex: number,
    target: null,
    title: null,
    translate: null,
    type: null,
    typeMustMatch: boolean,
    useMap: null,
    value: booleanish,
    width: number,
    wrap: null,
    // Legacy.
    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
    align: null,
    // Several. Use CSS `text-align` instead,
    aLink: null,
    // `<body>`. Use CSS `a:active {color}` instead
    archive: spaceSeparated,
    // `<object>`. List of URIs to archives
    axis: null,
    // `<td>` and `<th>`. Use `scope` on `<th>`
    background: null,
    // `<body>`. Use CSS `background-image` instead
    bgColor: null,
    // `<body>` and table elements. Use CSS `background-color` instead
    border: number,
    // `<table>`. Use CSS `border-width` instead,
    borderColor: null,
    // `<table>`. Use CSS `border-color` instead,
    bottomMargin: number,
    // `<body>`
    cellPadding: null,
    // `<table>`
    cellSpacing: null,
    // `<table>`
    char: null,
    // Several table elements. When `align=char`, sets the character to align on
    charOff: null,
    // Several table elements. When `char`, offsets the alignment
    classId: null,
    // `<object>`
    clear: null,
    // `<br>`. Use CSS `clear` instead
    code: null,
    // `<object>`
    codeBase: null,
    // `<object>`
    codeType: null,
    // `<object>`
    color: null,
    // `<font>` and `<hr>`. Use CSS instead
    compact: boolean,
    // Lists. Use CSS to reduce space between items instead
    declare: boolean,
    // `<object>`
    event: null,
    // `<script>`
    face: null,
    // `<font>`. Use CSS instead
    frame: null,
    // `<table>`
    frameBorder: null,
    // `<iframe>`. Use CSS `border` instead
    hSpace: number,
    // `<img>` and `<object>`
    leftMargin: number,
    // `<body>`
    link: null,
    // `<body>`. Use CSS `a:link {color: *}` instead
    longDesc: null,
    // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
    lowSrc: null,
    // `<img>`. Use a `<picture>`
    marginHeight: number,
    // `<body>`
    marginWidth: number,
    // `<body>`
    noResize: boolean,
    // `<frame>`
    noHref: boolean,
    // `<area>`. Use no href instead of an explicit `nohref`
    noShade: boolean,
    // `<hr>`. Use background-color and height instead of borders
    noWrap: boolean,
    // `<td>` and `<th>`
    object: null,
    // `<applet>`
    profile: null,
    // `<head>`
    prompt: null,
    // `<isindex>`
    rev: null,
    // `<link>`
    rightMargin: number,
    // `<body>`
    rules: null,
    // `<table>`
    scheme: null,
    // `<meta>`
    scrolling: booleanish,
    // `<frame>`. Use overflow in the child context
    standby: null,
    // `<object>`
    summary: null,
    // `<table>`
    text: null,
    // `<body>`. Use CSS `color` instead
    topMargin: number,
    // `<body>`
    valueType: null,
    // `<param>`
    version: null,
    // `<html>`. Use a doctype.
    vAlign: null,
    // Several. Use CSS `vertical-align` instead
    vLink: null,
    // `<body>`. Use CSS `a:visited {color}` instead
    vSpace: number,
    // `<img>` and `<object>`
    // Non-standard Properties.
    allowTransparency: null,
    autoCorrect: null,
    autoSave: null,
    disablePictureInPicture: boolean,
    disableRemotePlayback: boolean,
    prefix: null,
    property: null,
    results: number,
    security: null,
    unselectable: null
  }
});

// node_modules/property-information/lib/svg.js
var svg = create({
  space: "svg",
  attributes: {
    accentHeight: "accent-height",
    alignmentBaseline: "alignment-baseline",
    arabicForm: "arabic-form",
    baselineShift: "baseline-shift",
    capHeight: "cap-height",
    className: "class",
    clipPath: "clip-path",
    clipRule: "clip-rule",
    colorInterpolation: "color-interpolation",
    colorInterpolationFilters: "color-interpolation-filters",
    colorProfile: "color-profile",
    colorRendering: "color-rendering",
    crossOrigin: "crossorigin",
    dataType: "datatype",
    dominantBaseline: "dominant-baseline",
    enableBackground: "enable-background",
    fillOpacity: "fill-opacity",
    fillRule: "fill-rule",
    floodColor: "flood-color",
    floodOpacity: "flood-opacity",
    fontFamily: "font-family",
    fontSize: "font-size",
    fontSizeAdjust: "font-size-adjust",
    fontStretch: "font-stretch",
    fontStyle: "font-style",
    fontVariant: "font-variant",
    fontWeight: "font-weight",
    glyphName: "glyph-name",
    glyphOrientationHorizontal: "glyph-orientation-horizontal",
    glyphOrientationVertical: "glyph-orientation-vertical",
    hrefLang: "hreflang",
    horizAdvX: "horiz-adv-x",
    horizOriginX: "horiz-origin-x",
    horizOriginY: "horiz-origin-y",
    imageRendering: "image-rendering",
    letterSpacing: "letter-spacing",
    lightingColor: "lighting-color",
    markerEnd: "marker-end",
    markerMid: "marker-mid",
    markerStart: "marker-start",
    navDown: "nav-down",
    navDownLeft: "nav-down-left",
    navDownRight: "nav-down-right",
    navLeft: "nav-left",
    navNext: "nav-next",
    navPrev: "nav-prev",
    navRight: "nav-right",
    navUp: "nav-up",
    navUpLeft: "nav-up-left",
    navUpRight: "nav-up-right",
    onAbort: "onabort",
    onActivate: "onactivate",
    onAfterPrint: "onafterprint",
    onBeforePrint: "onbeforeprint",
    onBegin: "onbegin",
    onCancel: "oncancel",
    onCanPlay: "oncanplay",
    onCanPlayThrough: "oncanplaythrough",
    onChange: "onchange",
    onClick: "onclick",
    onClose: "onclose",
    onCopy: "oncopy",
    onCueChange: "oncuechange",
    onCut: "oncut",
    onDblClick: "ondblclick",
    onDrag: "ondrag",
    onDragEnd: "ondragend",
    onDragEnter: "ondragenter",
    onDragExit: "ondragexit",
    onDragLeave: "ondragleave",
    onDragOver: "ondragover",
    onDragStart: "ondragstart",
    onDrop: "ondrop",
    onDurationChange: "ondurationchange",
    onEmptied: "onemptied",
    onEnd: "onend",
    onEnded: "onended",
    onError: "onerror",
    onFocus: "onfocus",
    onFocusIn: "onfocusin",
    onFocusOut: "onfocusout",
    onHashChange: "onhashchange",
    onInput: "oninput",
    onInvalid: "oninvalid",
    onKeyDown: "onkeydown",
    onKeyPress: "onkeypress",
    onKeyUp: "onkeyup",
    onLoad: "onload",
    onLoadedData: "onloadeddata",
    onLoadedMetadata: "onloadedmetadata",
    onLoadStart: "onloadstart",
    onMessage: "onmessage",
    onMouseDown: "onmousedown",
    onMouseEnter: "onmouseenter",
    onMouseLeave: "onmouseleave",
    onMouseMove: "onmousemove",
    onMouseOut: "onmouseout",
    onMouseOver: "onmouseover",
    onMouseUp: "onmouseup",
    onMouseWheel: "onmousewheel",
    onOffline: "onoffline",
    onOnline: "ononline",
    onPageHide: "onpagehide",
    onPageShow: "onpageshow",
    onPaste: "onpaste",
    onPause: "onpause",
    onPlay: "onplay",
    onPlaying: "onplaying",
    onPopState: "onpopstate",
    onProgress: "onprogress",
    onRateChange: "onratechange",
    onRepeat: "onrepeat",
    onReset: "onreset",
    onResize: "onresize",
    onScroll: "onscroll",
    onSeeked: "onseeked",
    onSeeking: "onseeking",
    onSelect: "onselect",
    onShow: "onshow",
    onStalled: "onstalled",
    onStorage: "onstorage",
    onSubmit: "onsubmit",
    onSuspend: "onsuspend",
    onTimeUpdate: "ontimeupdate",
    onToggle: "ontoggle",
    onUnload: "onunload",
    onVolumeChange: "onvolumechange",
    onWaiting: "onwaiting",
    onZoom: "onzoom",
    overlinePosition: "overline-position",
    overlineThickness: "overline-thickness",
    paintOrder: "paint-order",
    panose1: "panose-1",
    pointerEvents: "pointer-events",
    referrerPolicy: "referrerpolicy",
    renderingIntent: "rendering-intent",
    shapeRendering: "shape-rendering",
    stopColor: "stop-color",
    stopOpacity: "stop-opacity",
    strikethroughPosition: "strikethrough-position",
    strikethroughThickness: "strikethrough-thickness",
    strokeDashArray: "stroke-dasharray",
    strokeDashOffset: "stroke-dashoffset",
    strokeLineCap: "stroke-linecap",
    strokeLineJoin: "stroke-linejoin",
    strokeMiterLimit: "stroke-miterlimit",
    strokeOpacity: "stroke-opacity",
    strokeWidth: "stroke-width",
    tabIndex: "tabindex",
    textAnchor: "text-anchor",
    textDecoration: "text-decoration",
    textRendering: "text-rendering",
    typeOf: "typeof",
    underlinePosition: "underline-position",
    underlineThickness: "underline-thickness",
    unicodeBidi: "unicode-bidi",
    unicodeRange: "unicode-range",
    unitsPerEm: "units-per-em",
    vAlphabetic: "v-alphabetic",
    vHanging: "v-hanging",
    vIdeographic: "v-ideographic",
    vMathematical: "v-mathematical",
    vectorEffect: "vector-effect",
    vertAdvY: "vert-adv-y",
    vertOriginX: "vert-origin-x",
    vertOriginY: "vert-origin-y",
    wordSpacing: "word-spacing",
    writingMode: "writing-mode",
    xHeight: "x-height",
    // These were camelcased in Tiny. Now lowercased in SVG 2
    playbackOrder: "playbackorder",
    timelineBegin: "timelinebegin"
  },
  transform: caseSensitiveTransform,
  properties: {
    about: commaOrSpaceSeparated,
    accentHeight: number,
    accumulate: null,
    additive: null,
    alignmentBaseline: null,
    alphabetic: number,
    amplitude: number,
    arabicForm: null,
    ascent: number,
    attributeName: null,
    attributeType: null,
    azimuth: number,
    bandwidth: null,
    baselineShift: null,
    baseFrequency: null,
    baseProfile: null,
    bbox: null,
    begin: null,
    bias: number,
    by: null,
    calcMode: null,
    capHeight: number,
    className: spaceSeparated,
    clip: null,
    clipPath: null,
    clipPathUnits: null,
    clipRule: null,
    color: null,
    colorInterpolation: null,
    colorInterpolationFilters: null,
    colorProfile: null,
    colorRendering: null,
    content: null,
    contentScriptType: null,
    contentStyleType: null,
    crossOrigin: null,
    cursor: null,
    cx: null,
    cy: null,
    d: null,
    dataType: null,
    defaultAction: null,
    descent: number,
    diffuseConstant: number,
    direction: null,
    display: null,
    dur: null,
    divisor: number,
    dominantBaseline: null,
    download: boolean,
    dx: null,
    dy: null,
    edgeMode: null,
    editable: null,
    elevation: number,
    enableBackground: null,
    end: null,
    event: null,
    exponent: number,
    externalResourcesRequired: null,
    fill: null,
    fillOpacity: number,
    fillRule: null,
    filter: null,
    filterRes: null,
    filterUnits: null,
    floodColor: null,
    floodOpacity: null,
    focusable: null,
    focusHighlight: null,
    fontFamily: null,
    fontSize: null,
    fontSizeAdjust: null,
    fontStretch: null,
    fontStyle: null,
    fontVariant: null,
    fontWeight: null,
    format: null,
    fr: null,
    from: null,
    fx: null,
    fy: null,
    g1: commaSeparated,
    g2: commaSeparated,
    glyphName: commaSeparated,
    glyphOrientationHorizontal: null,
    glyphOrientationVertical: null,
    glyphRef: null,
    gradientTransform: null,
    gradientUnits: null,
    handler: null,
    hanging: number,
    hatchContentUnits: null,
    hatchUnits: null,
    height: null,
    href: null,
    hrefLang: null,
    horizAdvX: number,
    horizOriginX: number,
    horizOriginY: number,
    id: null,
    ideographic: number,
    imageRendering: null,
    initialVisibility: null,
    in: null,
    in2: null,
    intercept: number,
    k: number,
    k1: number,
    k2: number,
    k3: number,
    k4: number,
    kernelMatrix: commaOrSpaceSeparated,
    kernelUnitLength: null,
    keyPoints: null,
    // SEMI_COLON_SEPARATED
    keySplines: null,
    // SEMI_COLON_SEPARATED
    keyTimes: null,
    // SEMI_COLON_SEPARATED
    kerning: null,
    lang: null,
    lengthAdjust: null,
    letterSpacing: null,
    lightingColor: null,
    limitingConeAngle: number,
    local: null,
    markerEnd: null,
    markerMid: null,
    markerStart: null,
    markerHeight: null,
    markerUnits: null,
    markerWidth: null,
    mask: null,
    maskContentUnits: null,
    maskUnits: null,
    mathematical: null,
    max: null,
    media: null,
    mediaCharacterEncoding: null,
    mediaContentEncodings: null,
    mediaSize: number,
    mediaTime: null,
    method: null,
    min: null,
    mode: null,
    name: null,
    navDown: null,
    navDownLeft: null,
    navDownRight: null,
    navLeft: null,
    navNext: null,
    navPrev: null,
    navRight: null,
    navUp: null,
    navUpLeft: null,
    navUpRight: null,
    numOctaves: null,
    observer: null,
    offset: null,
    onAbort: null,
    onActivate: null,
    onAfterPrint: null,
    onBeforePrint: null,
    onBegin: null,
    onCancel: null,
    onCanPlay: null,
    onCanPlayThrough: null,
    onChange: null,
    onClick: null,
    onClose: null,
    onCopy: null,
    onCueChange: null,
    onCut: null,
    onDblClick: null,
    onDrag: null,
    onDragEnd: null,
    onDragEnter: null,
    onDragExit: null,
    onDragLeave: null,
    onDragOver: null,
    onDragStart: null,
    onDrop: null,
    onDurationChange: null,
    onEmptied: null,
    onEnd: null,
    onEnded: null,
    onError: null,
    onFocus: null,
    onFocusIn: null,
    onFocusOut: null,
    onHashChange: null,
    onInput: null,
    onInvalid: null,
    onKeyDown: null,
    onKeyPress: null,
    onKeyUp: null,
    onLoad: null,
    onLoadedData: null,
    onLoadedMetadata: null,
    onLoadStart: null,
    onMessage: null,
    onMouseDown: null,
    onMouseEnter: null,
    onMouseLeave: null,
    onMouseMove: null,
    onMouseOut: null,
    onMouseOver: null,
    onMouseUp: null,
    onMouseWheel: null,
    onOffline: null,
    onOnline: null,
    onPageHide: null,
    onPageShow: null,
    onPaste: null,
    onPause: null,
    onPlay: null,
    onPlaying: null,
    onPopState: null,
    onProgress: null,
    onRateChange: null,
    onRepeat: null,
    onReset: null,
    onResize: null,
    onScroll: null,
    onSeeked: null,
    onSeeking: null,
    onSelect: null,
    onShow: null,
    onStalled: null,
    onStorage: null,
    onSubmit: null,
    onSuspend: null,
    onTimeUpdate: null,
    onToggle: null,
    onUnload: null,
    onVolumeChange: null,
    onWaiting: null,
    onZoom: null,
    opacity: null,
    operator: null,
    order: null,
    orient: null,
    orientation: null,
    origin: null,
    overflow: null,
    overlay: null,
    overlinePosition: number,
    overlineThickness: number,
    paintOrder: null,
    panose1: null,
    path: null,
    pathLength: number,
    patternContentUnits: null,
    patternTransform: null,
    patternUnits: null,
    phase: null,
    ping: spaceSeparated,
    pitch: null,
    playbackOrder: null,
    pointerEvents: null,
    points: null,
    pointsAtX: number,
    pointsAtY: number,
    pointsAtZ: number,
    preserveAlpha: null,
    preserveAspectRatio: null,
    primitiveUnits: null,
    propagate: null,
    property: commaOrSpaceSeparated,
    r: null,
    radius: null,
    referrerPolicy: null,
    refX: null,
    refY: null,
    rel: commaOrSpaceSeparated,
    rev: commaOrSpaceSeparated,
    renderingIntent: null,
    repeatCount: null,
    repeatDur: null,
    requiredExtensions: commaOrSpaceSeparated,
    requiredFeatures: commaOrSpaceSeparated,
    requiredFonts: commaOrSpaceSeparated,
    requiredFormats: commaOrSpaceSeparated,
    resource: null,
    restart: null,
    result: null,
    rotate: null,
    rx: null,
    ry: null,
    scale: null,
    seed: null,
    shapeRendering: null,
    side: null,
    slope: null,
    snapshotTime: null,
    specularConstant: number,
    specularExponent: number,
    spreadMethod: null,
    spacing: null,
    startOffset: null,
    stdDeviation: null,
    stemh: null,
    stemv: null,
    stitchTiles: null,
    stopColor: null,
    stopOpacity: null,
    strikethroughPosition: number,
    strikethroughThickness: number,
    string: null,
    stroke: null,
    strokeDashArray: commaOrSpaceSeparated,
    strokeDashOffset: null,
    strokeLineCap: null,
    strokeLineJoin: null,
    strokeMiterLimit: number,
    strokeOpacity: number,
    strokeWidth: null,
    style: null,
    surfaceScale: number,
    syncBehavior: null,
    syncBehaviorDefault: null,
    syncMaster: null,
    syncTolerance: null,
    syncToleranceDefault: null,
    systemLanguage: commaOrSpaceSeparated,
    tabIndex: number,
    tableValues: null,
    target: null,
    targetX: number,
    targetY: number,
    textAnchor: null,
    textDecoration: null,
    textRendering: null,
    textLength: null,
    timelineBegin: null,
    title: null,
    transformBehavior: null,
    type: null,
    typeOf: commaOrSpaceSeparated,
    to: null,
    transform: null,
    u1: null,
    u2: null,
    underlinePosition: number,
    underlineThickness: number,
    unicode: null,
    unicodeBidi: null,
    unicodeRange: null,
    unitsPerEm: number,
    values: null,
    vAlphabetic: number,
    vMathematical: number,
    vectorEffect: null,
    vHanging: number,
    vIdeographic: number,
    version: null,
    vertAdvY: number,
    vertOriginX: number,
    vertOriginY: number,
    viewBox: null,
    viewTarget: null,
    visibility: null,
    width: null,
    widths: null,
    wordSpacing: null,
    writingMode: null,
    x: null,
    x1: null,
    x2: null,
    xChannelSelector: null,
    xHeight: number,
    y: null,
    y1: null,
    y2: null,
    yChannelSelector: null,
    z: null,
    zoomAndPan: null
  }
});

// node_modules/property-information/lib/find.js
var valid = /^data[-\w.:]+$/i;
var dash = /-[a-z]/g;
var cap = /[A-Z]/g;
function find(schema, value) {
  const normal = normalize2(value);
  let prop = value;
  let Type = Info;
  if (normal in schema.normal) {
    return schema.property[schema.normal[normal]];
  }
  if (normal.length > 4 && normal.slice(0, 4) === "data" && valid.test(value)) {
    if (value.charAt(4) === "-") {
      const rest = value.slice(5).replace(dash, camelcase);
      prop = "data" + rest.charAt(0).toUpperCase() + rest.slice(1);
    } else {
      const rest = value.slice(4);
      if (!dash.test(rest)) {
        let dashes = rest.replace(cap, kebab);
        if (dashes.charAt(0) !== "-") {
          dashes = "-" + dashes;
        }
        value = "data" + dashes;
      }
    }
    Type = DefinedInfo;
  }
  return new Type(prop, value);
}
function kebab($02) {
  return "-" + $02.toLowerCase();
}
function camelcase($02) {
  return $02.charAt(1).toUpperCase();
}

// node_modules/property-information/index.js
var html2 = merge2([xml, xlink, xmlns, aria, html], "html");
var svg2 = merge2([xml, xlink, xmlns, aria, svg], "svg");

// node_modules/hast-util-parse-selector/lib/index.js
var search = /[#.]/g;
function parseSelector(selector, defaultTagName) {
  const value = selector || "";
  const props = {};
  let start2 = 0;
  let previous3;
  let tagName;
  while (start2 < value.length) {
    search.lastIndex = start2;
    const match2 = search.exec(value);
    const subvalue = value.slice(start2, match2 ? match2.index : value.length);
    if (subvalue) {
      if (!previous3) {
        tagName = subvalue;
      } else if (previous3 === "#") {
        props.id = subvalue;
      } else if (Array.isArray(props.className)) {
        props.className.push(subvalue);
      } else {
        props.className = [subvalue];
      }
      start2 += subvalue.length;
    }
    if (match2) {
      previous3 = match2[0];
      start2++;
    }
  }
  return {
    type: "element",
    // @ts-expect-error: fine.
    tagName: tagName || defaultTagName || "div",
    properties: props,
    children: []
  };
}

// node_modules/space-separated-tokens/index.js
function parse3(value) {
  const input3 = String(value || "").trim();
  return input3 ? input3.split(/[ \t\n\r\f]+/g) : [];
}
function stringify3(values2) {
  return values2.join(" ").trim();
}

// node_modules/comma-separated-tokens/index.js
function parse4(value) {
  const tokens = [];
  const input3 = String(value || "");
  let index7 = input3.indexOf(",");
  let start2 = 0;
  let end2 = false;
  while (!end2) {
    if (index7 === -1) {
      index7 = input3.length;
      end2 = true;
    }
    const token2 = input3.slice(start2, index7).trim();
    if (token2 || !end2) {
      tokens.push(token2);
    }
    start2 = index7 + 1;
    index7 = input3.indexOf(",", start2);
  }
  return tokens;
}
function stringify4(values2, options2) {
  const settings = options2 || {};
  const input3 = values2[values2.length - 1] === "" ? [...values2, ""] : values2;
  return input3.join(
    (settings.padRight ? " " : "") + "," + (settings.padLeft === false ? "" : " ")
  ).trim();
}

// node_modules/hastscript/lib/core.js
var buttonTypes = /* @__PURE__ */ new Set(["menu", "submit", "reset", "button"]);
var own2 = {}.hasOwnProperty;
function core(schema, defaultTagName, caseSensitive) {
  const adjust = caseSensitive && createAdjustMap(caseSensitive);
  const h2 = (
    /**
     * @type {{
     *   (): Root
     *   (selector: null | undefined, ...children: Array<HChild>): Root
     *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element
     *   (selector: string, ...children: Array<HChild>): Element
     * }}
     */
    /**
     * Hyperscript compatible DSL for creating virtual hast trees.
     *
     * @param {string | null} [selector]
     * @param {HProperties | HChild} [properties]
     * @param {Array<HChild>} children
     * @returns {HResult}
     */
    function(selector, properties, ...children) {
      let index7 = -1;
      let node4;
      if (selector === void 0 || selector === null) {
        node4 = { type: "root", children: [] };
        children.unshift(properties);
      } else {
        node4 = parseSelector(selector, defaultTagName);
        node4.tagName = node4.tagName.toLowerCase();
        if (adjust && own2.call(adjust, node4.tagName)) {
          node4.tagName = adjust[node4.tagName];
        }
        if (isProperties(properties, node4.tagName)) {
          let key2;
          for (key2 in properties) {
            if (own2.call(properties, key2)) {
              addProperty(schema, node4.properties, key2, properties[key2]);
            }
          }
        } else {
          children.unshift(properties);
        }
      }
      while (++index7 < children.length) {
        addChild(node4.children, children[index7]);
      }
      if (node4.type === "element" && node4.tagName === "template") {
        node4.content = { type: "root", children: node4.children };
        node4.children = [];
      }
      return node4;
    }
  );
  return h2;
}
function isProperties(value, name) {
  if (value === null || value === void 0 || typeof value !== "object" || Array.isArray(value)) {
    return false;
  }
  if (name === "input" || !value.type || typeof value.type !== "string") {
    return true;
  }
  if ("children" in value && Array.isArray(value.children)) {
    return false;
  }
  if (name === "button") {
    return buttonTypes.has(value.type.toLowerCase());
  }
  return !("value" in value);
}
function addProperty(schema, properties, key2, value) {
  const info = find(schema, key2);
  let index7 = -1;
  let result;
  if (value === void 0 || value === null)
    return;
  if (typeof value === "number") {
    if (Number.isNaN(value))
      return;
    result = value;
  } else if (typeof value === "boolean") {
    result = value;
  } else if (typeof value === "string") {
    if (info.spaceSeparated) {
      result = parse3(value);
    } else if (info.commaSeparated) {
      result = parse4(value);
    } else if (info.commaOrSpaceSeparated) {
      result = parse3(parse4(value).join(" "));
    } else {
      result = parsePrimitive(info, info.property, value);
    }
  } else if (Array.isArray(value)) {
    result = value.concat();
  } else {
    result = info.property === "style" ? style2(value) : String(value);
  }
  if (Array.isArray(result)) {
    const finalResult = [];
    while (++index7 < result.length) {
      finalResult[index7] = parsePrimitive(info, info.property, result[index7]);
    }
    result = finalResult;
  }
  if (info.property === "className" && Array.isArray(properties.className)) {
    result = properties.className.concat(result);
  }
  properties[info.property] = result;
}
function addChild(nodes, value) {
  let index7 = -1;
  if (value === void 0 || value === null) {
  } else if (typeof value === "string" || typeof value === "number") {
    nodes.push({ type: "text", value: String(value) });
  } else if (Array.isArray(value)) {
    while (++index7 < value.length) {
      addChild(nodes, value[index7]);
    }
  } else if (typeof value === "object" && "type" in value) {
    if (value.type === "root") {
      addChild(nodes, value.children);
    } else {
      nodes.push(value);
    }
  } else {
    throw new Error("Expected node, nodes, or string, got `" + value + "`");
  }
}
function parsePrimitive(info, name, value) {
  if (typeof value === "string") {
    if (info.number && value && !Number.isNaN(Number(value))) {
      return Number(value);
    }
    if ((info.boolean || info.overloadedBoolean) && (value === "" || normalize2(value) === normalize2(name))) {
      return true;
    }
  }
  return value;
}
function style2(value) {
  const result = [];
  let key2;
  for (key2 in value) {
    if (own2.call(value, key2)) {
      result.push([key2, value[key2]].join(": "));
    }
  }
  return result.join("; ");
}
function createAdjustMap(values2) {
  const result = {};
  let index7 = -1;
  while (++index7 < values2.length) {
    result[values2[index7].toLowerCase()] = values2[index7];
  }
  return result;
}

// node_modules/hastscript/lib/html.js
var h = core(html2, "div");

// node_modules/hastscript/lib/svg-case-sensitive-tag-names.js
var svgCaseSensitiveTagNames = [
  "altGlyph",
  "altGlyphDef",
  "altGlyphItem",
  "animateColor",
  "animateMotion",
  "animateTransform",
  "clipPath",
  "feBlend",
  "feColorMatrix",
  "feComponentTransfer",
  "feComposite",
  "feConvolveMatrix",
  "feDiffuseLighting",
  "feDisplacementMap",
  "feDistantLight",
  "feDropShadow",
  "feFlood",
  "feFuncA",
  "feFuncB",
  "feFuncG",
  "feFuncR",
  "feGaussianBlur",
  "feImage",
  "feMerge",
  "feMergeNode",
  "feMorphology",
  "feOffset",
  "fePointLight",
  "feSpecularLighting",
  "feSpotLight",
  "feTile",
  "feTurbulence",
  "foreignObject",
  "glyphRef",
  "linearGradient",
  "radialGradient",
  "solidColor",
  "textArea",
  "textPath"
];

// node_modules/hastscript/lib/svg.js
var s = core(svg2, "g", svgCaseSensitiveTagNames);

// node_modules/vfile-location/lib/index.js
function location2(file) {
  const value = String(file);
  const indices = [];
  const search3 = /\r?\n|\r/g;
  while (search3.test(value)) {
    indices.push(search3.lastIndex);
  }
  indices.push(value.length + 1);
  return { toPoint, toOffset };
  function toPoint(offset3) {
    let index7 = -1;
    if (typeof offset3 === "number" && offset3 > -1 && offset3 < indices[indices.length - 1]) {
      while (++index7 < indices.length) {
        if (indices[index7] > offset3) {
          return {
            line: index7 + 1,
            column: offset3 - (index7 > 0 ? indices[index7 - 1] : 0) + 1,
            offset: offset3
          };
        }
      }
    }
    return { line: void 0, column: void 0, offset: void 0 };
  }
  function toOffset(point5) {
    const line3 = point5 && point5.line;
    const column2 = point5 && point5.column;
    if (typeof line3 === "number" && typeof column2 === "number" && !Number.isNaN(line3) && !Number.isNaN(column2) && line3 - 1 in indices) {
      const offset3 = (indices[line3 - 2] || 0) + column2 - 1 || 0;
      if (offset3 > -1 && offset3 < indices[indices.length - 1]) {
        return offset3;
      }
    }
    return -1;
  }
}

// node_modules/web-namespaces/index.js
var webNamespaces = {
  html: "http://www.w3.org/1999/xhtml",
  mathml: "http://www.w3.org/1998/Math/MathML",
  svg: "http://www.w3.org/2000/svg",
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/hast-util-from-parse5/lib/index.js
var own3 = {}.hasOwnProperty;
var proto = Object.prototype;
function fromParse5(tree, options2) {
  const options_ = options2 || {};
  let settings;
  let file;
  if (isFile(options_)) {
    file = options_;
    settings = {};
  } else {
    file = options_.file || void 0;
    settings = options_;
  }
  return one(
    {
      schema: settings.space === "svg" ? svg2 : html2,
      file,
      verbose: settings.verbose,
      location: false
    },
    tree
  );
}
function one(state, node4) {
  let result;
  switch (node4.nodeName) {
    case "#comment": {
      const reference2 = (
        /** @type {P5Comment} */
        node4
      );
      result = { type: "comment", value: reference2.data };
      patch(state, reference2, result);
      return result;
    }
    case "#document":
    case "#document-fragment": {
      const reference2 = (
        /** @type {P5Document | P5DocumentFragment} */
        node4
      );
      const quirksMode = "mode" in reference2 ? reference2.mode === "quirks" || reference2.mode === "limited-quirks" : false;
      result = {
        type: "root",
        children: all(state, node4.childNodes),
        data: { quirksMode }
      };
      if (state.file && state.location) {
        const doc4 = String(state.file);
        const loc = location2(doc4);
        const start2 = loc.toPoint(0);
        const end2 = loc.toPoint(doc4.length);
        result.position = { start: start2, end: end2 };
      }
      return result;
    }
    case "#documentType": {
      const reference2 = (
        /** @type {P5DocumentType} */
        node4
      );
      result = { type: "doctype" };
      patch(state, reference2, result);
      return result;
    }
    case "#text": {
      const reference2 = (
        /** @type {P5Text} */
        node4
      );
      result = { type: "text", value: reference2.value };
      patch(state, reference2, result);
      return result;
    }
    default: {
      const reference2 = (
        /** @type {P5Element} */
        node4
      );
      result = element(state, reference2);
      return result;
    }
  }
}
function all(state, nodes) {
  let index7 = -1;
  const result = [];
  while (++index7 < nodes.length) {
    result[index7] = one(state, nodes[index7]);
  }
  return result;
}
function element(state, node4) {
  const schema = state.schema;
  state.schema = node4.namespaceURI === webNamespaces.svg ? svg2 : html2;
  let index7 = -1;
  const props = {};
  while (++index7 < node4.attrs.length) {
    const attribute = node4.attrs[index7];
    const name = (attribute.prefix ? attribute.prefix + ":" : "") + attribute.name;
    if (!own3.call(proto, name)) {
      props[name] = attribute.value;
    }
  }
  const fn3 = state.schema.space === "svg" ? s : h;
  const result = fn3(node4.tagName, props, all(state, node4.childNodes));
  patch(state, node4, result);
  if (result.tagName === "template") {
    const reference2 = (
      /** @type {P5Template} */
      node4
    );
    const pos = reference2.sourceCodeLocation;
    const startTag = pos && pos.startTag && position2(pos.startTag);
    const endTag = pos && pos.endTag && position2(pos.endTag);
    const content5 = one(state, reference2.content);
    if (startTag && endTag && state.file) {
      content5.position = { start: startTag.end, end: endTag.start };
    }
    result.content = content5;
  }
  state.schema = schema;
  return result;
}
function patch(state, from5, to3) {
  if ("sourceCodeLocation" in from5 && from5.sourceCodeLocation && state.file) {
    const position5 = createLocation(state, to3, from5.sourceCodeLocation);
    if (position5) {
      state.location = true;
      to3.position = position5;
    }
  }
}
function createLocation(state, node4, location3) {
  const result = position2(location3);
  if (node4.type === "element") {
    const tail = node4.children[node4.children.length - 1];
    if (result && !location3.endTag && tail && tail.position && tail.position.end) {
      result.end = Object.assign({}, tail.position.end);
    }
    if (state.verbose) {
      const props = {};
      let key2;
      if (location3.attrs) {
        for (key2 in location3.attrs) {
          if (own3.call(location3.attrs, key2)) {
            props[find(state.schema, key2).property] = position2(
              location3.attrs[key2]
            );
          }
        }
      }
      node4.data = {
        position: {
          // @ts-expect-error: assume not `undefined`.
          opening: position2(location3.startTag),
          closing: location3.endTag ? position2(location3.endTag) : null,
          properties: props
        }
      };
    }
  }
  return result;
}
function position2(loc) {
  const start2 = point({
    line: loc.startLine,
    column: loc.startCol,
    offset: loc.startOffset
  });
  const end2 = point({
    line: loc.endLine,
    column: loc.endCol,
    offset: loc.endOffset
  });
  return start2 || end2 ? { start: start2, end: end2 } : void 0;
}
function point(point5) {
  return point5.line && point5.column ? point5 : void 0;
}
function isFile(value) {
  return "messages" in value;
}

// node_modules/rehype-parse/lib/errors.js
var errors = {
  abandonedHeadElementChild: {
    reason: "Unexpected metadata element after head",
    description: "Unexpected element after head. Expected the element before `</head>`",
    url: false
  },
  abruptClosingOfEmptyComment: {
    reason: "Unexpected abruptly closed empty comment",
    description: "Unexpected `>` or `->`. Expected `-->` to close comments"
  },
  abruptDoctypePublicIdentifier: {
    reason: "Unexpected abruptly closed public identifier",
    description: "Unexpected `>`. Expected a closing `\"` or `'` after the public identifier"
  },
  abruptDoctypeSystemIdentifier: {
    reason: "Unexpected abruptly closed system identifier",
    description: "Unexpected `>`. Expected a closing `\"` or `'` after the identifier identifier"
  },
  absenceOfDigitsInNumericCharacterReference: {
    reason: "Unexpected non-digit at start of numeric character reference",
    description: "Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references"
  },
  cdataInHtmlContent: {
    reason: "Unexpected CDATA section in HTML",
    description: "Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead"
  },
  characterReferenceOutsideUnicodeRange: {
    reason: "Unexpected too big numeric character reference",
    description: "Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)"
  },
  closingOfElementWithOpenChildElements: {
    reason: "Unexpected closing tag with open child elements",
    description: "Unexpectedly closing tag. Expected other tags to be closed first",
    url: false
  },
  controlCharacterInInputStream: {
    reason: "Unexpected control character",
    description: "Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace"
  },
  controlCharacterReference: {
    reason: "Unexpected control character reference",
    description: "Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace"
  },
  disallowedContentInNoscriptInHead: {
    reason: "Disallowed content inside `<noscript>` in `<head>`",
    description: "Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`",
    url: false
  },
  duplicateAttribute: {
    reason: "Unexpected duplicate attribute",
    description: "Unexpectedly double attribute. Expected attributes to occur only once"
  },
  endTagWithAttributes: {
    reason: "Unexpected attribute on closing tag",
    description: "Unexpected attribute. Expected `>` instead"
  },
  endTagWithTrailingSolidus: {
    reason: "Unexpected slash at end of closing tag",
    description: "Unexpected `%c-1`. Expected `>` instead"
  },
  endTagWithoutMatchingOpenElement: {
    reason: "Unexpected unopened end tag",
    description: "Unexpected end tag. Expected no end tag or another end tag",
    url: false
  },
  eofBeforeTagName: {
    reason: "Unexpected end of file",
    description: "Unexpected end of file. Expected tag name instead"
  },
  eofInCdata: {
    reason: "Unexpected end of file in CDATA",
    description: "Unexpected end of file. Expected `]]>` to close the CDATA"
  },
  eofInComment: {
    reason: "Unexpected end of file in comment",
    description: "Unexpected end of file. Expected `-->` to close the comment"
  },
  eofInDoctype: {
    reason: "Unexpected end of file in doctype",
    description: "Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)"
  },
  eofInElementThatCanContainOnlyText: {
    reason: "Unexpected end of file in element that can only contain text",
    description: "Unexpected end of file. Expected text or a closing tag",
    url: false
  },
  eofInScriptHtmlCommentLikeText: {
    reason: "Unexpected end of file in comment inside script",
    description: "Unexpected end of file. Expected `-->` to close the comment"
  },
  eofInTag: {
    reason: "Unexpected end of file in tag",
    description: "Unexpected end of file. Expected `>` to close the tag"
  },
  incorrectlyClosedComment: {
    reason: "Incorrectly closed comment",
    description: "Unexpected `%c-1`. Expected `-->` to close the comment"
  },
  incorrectlyOpenedComment: {
    reason: "Incorrectly opened comment",
    description: "Unexpected `%c`. Expected `<!--` to open the comment"
  },
  invalidCharacterSequenceAfterDoctypeName: {
    reason: "Invalid sequence after doctype name",
    description: "Unexpected sequence at `%c`. Expected `public` or `system`"
  },
  invalidFirstCharacterOfTagName: {
    reason: "Invalid first character in tag name",
    description: "Unexpected `%c`. Expected an ASCII letter instead"
  },
  misplacedDoctype: {
    reason: "Misplaced doctype",
    description: "Unexpected doctype. Expected doctype before head",
    url: false
  },
  misplacedStartTagForHeadElement: {
    reason: "Misplaced `<head>` start tag",
    description: "Unexpected start tag `<head>`. Expected `<head>` directly after doctype",
    url: false
  },
  missingAttributeValue: {
    reason: "Missing attribute value",
    description: "Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead"
  },
  missingDoctype: {
    reason: "Missing doctype before other content",
    description: "Expected a `<!doctype html>` before anything else",
    url: false
  },
  missingDoctypeName: {
    reason: "Missing doctype name",
    description: "Unexpected doctype end at `%c`. Expected `html` instead"
  },
  missingDoctypePublicIdentifier: {
    reason: "Missing public identifier in doctype",
    description: "Unexpected `%c`. Expected identifier for `public` instead"
  },
  missingDoctypeSystemIdentifier: {
    reason: "Missing system identifier in doctype",
    description: 'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'
  },
  missingEndTagName: {
    reason: "Missing name in end tag",
    description: "Unexpected `%c`. Expected an ASCII letter instead"
  },
  missingQuoteBeforeDoctypePublicIdentifier: {
    reason: "Missing quote before public identifier in doctype",
    description: "Unexpected `%c`. Expected `\"` or `'` instead"
  },
  missingQuoteBeforeDoctypeSystemIdentifier: {
    reason: "Missing quote before system identifier in doctype",
    description: "Unexpected `%c`. Expected `\"` or `'` instead"
  },
  missingSemicolonAfterCharacterReference: {
    reason: "Missing semicolon after character reference",
    description: "Unexpected `%c`. Expected `;` instead"
  },
  missingWhitespaceAfterDoctypePublicKeyword: {
    reason: "Missing whitespace after public identifier in doctype",
    description: "Unexpected `%c`. Expected ASCII whitespace instead"
  },
  missingWhitespaceAfterDoctypeSystemKeyword: {
    reason: "Missing whitespace after system identifier in doctype",
    description: "Unexpected `%c`. Expected ASCII whitespace instead"
  },
  missingWhitespaceBeforeDoctypeName: {
    reason: "Missing whitespace before doctype name",
    description: "Unexpected `%c`. Expected ASCII whitespace instead"
  },
  missingWhitespaceBetweenAttributes: {
    reason: "Missing whitespace between attributes",
    description: "Unexpected `%c`. Expected ASCII whitespace instead"
  },
  missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
    reason: "Missing whitespace between public and system identifiers in doctype",
    description: "Unexpected `%c`. Expected ASCII whitespace instead"
  },
  nestedComment: {
    reason: "Unexpected nested comment",
    description: "Unexpected `<!--`. Expected `-->`"
  },
  nestedNoscriptInHead: {
    reason: "Unexpected nested `<noscript>` in `<head>`",
    description: "Unexpected `<noscript>`. Expected a closing tag or a meta element",
    url: false
  },
  nonConformingDoctype: {
    reason: "Unexpected non-conforming doctype declaration",
    description: 'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
    url: false
  },
  nonVoidHtmlElementStartTagWithTrailingSolidus: {
    reason: "Unexpected trailing slash on start tag of non-void element",
    description: "Unexpected `/`. Expected `>` instead"
  },
  noncharacterCharacterReference: {
    reason: "Unexpected noncharacter code point referenced by character reference",
    description: "Unexpected code point. Do not use noncharacters in HTML"
  },
  noncharacterInInputStream: {
    reason: "Unexpected noncharacter character",
    description: "Unexpected code point `%x`. Do not use noncharacters in HTML"
  },
  nullCharacterReference: {
    reason: "Unexpected NULL character referenced by character reference",
    description: "Unexpected code point. Do not use NULL characters in HTML"
  },
  openElementsLeftAfterEof: {
    reason: "Unexpected end of file",
    description: "Unexpected end of file. Expected closing tag instead",
    url: false
  },
  surrogateCharacterReference: {
    reason: "Unexpected surrogate character referenced by character reference",
    description: "Unexpected code point. Do not use lone surrogate characters in HTML"
  },
  surrogateInInputStream: {
    reason: "Unexpected surrogate character",
    description: "Unexpected code point `%x`. Do not use lone surrogate characters in HTML"
  },
  unexpectedCharacterAfterDoctypeSystemIdentifier: {
    reason: "Invalid character after system identifier in doctype",
    description: "Unexpected character at `%c`. Expected `>`"
  },
  unexpectedCharacterInAttributeName: {
    reason: "Unexpected character in attribute name",
    description: "Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter"
  },
  unexpectedCharacterInUnquotedAttributeValue: {
    reason: "Unexpected character in unquoted attribute value",
    description: "Unexpected `%c`. Quote the attribute value to include it"
  },
  unexpectedEqualsSignBeforeAttributeName: {
    reason: "Unexpected equals sign before attribute name",
    description: "Unexpected `%c`. Add an attribute name before it"
  },
  unexpectedNullCharacter: {
    reason: "Unexpected NULL character",
    description: "Unexpected code point `%x`. Do not use NULL characters in HTML"
  },
  unexpectedQuestionMarkInsteadOfTagName: {
    reason: "Unexpected question mark instead of tag name",
    description: "Unexpected `%c`. Expected an ASCII letter instead"
  },
  unexpectedSolidusInTag: {
    reason: "Unexpected slash in tag",
    description: "Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value"
  },
  unknownNamedCharacterReference: {
    reason: "Unexpected unknown named character reference",
    description: "Unexpected character reference. Expected known named character references"
  }
};

// node_modules/rehype-parse/lib/index.js
var base2 = "https://html.spec.whatwg.org/multipage/parsing.html#parse-error-";
var fatalities = { 2: true, 1: false, 0: null };
function rehypeParse(options2) {
  const processorSettings = (
    /** @type {Options} */
    this.data("settings")
  );
  const settings = Object.assign({}, processorSettings, options2);
  Object.assign(this, { Parser: parser });
  function parser(doc4, file) {
    const fn3 = settings.fragment ? "parseFragment" : "parse";
    const onParseError = settings.emitParseErrors ? onerror : null;
    const parse52 = new import_parser.default({
      sourceCodeLocationInfo: true,
      onParseError,
      scriptingEnabled: false
    });
    return fromParse5(parse52[fn3](doc4), {
      space: settings.space,
      file,
      verbose: settings.verbose
    });
    function onerror(error) {
      const code5 = error.code;
      const name = camelcase2(code5);
      const setting = settings[name];
      const config = setting === void 0 || setting === null ? true : setting;
      const level = typeof config === "number" ? config : config ? 1 : 0;
      const start2 = {
        line: error.startLine,
        column: error.startCol,
        offset: error.startOffset
      };
      const end2 = {
        line: error.endLine,
        column: error.endCol,
        offset: error.endOffset
      };
      if (level) {
        const info = errors[name] || { reason: "", description: "", url: "" };
        const message = file.message(format(info.reason), { start: start2, end: end2 });
        message.source = "parse-error";
        message.ruleId = code5;
        message.fatal = fatalities[level];
        message.note = format(info.description);
        message.url = "url" in info && info.url === false ? null : base2 + code5;
      }
      function format(value) {
        return value.replace(/%c(?:-(\d+))?/g, (_2, $1) => {
          const offset3 = $1 ? -Number.parseInt($1, 10) : 0;
          const char2 = doc4.charAt(error.startOffset + offset3);
          return char2 === "`" ? "` ` `" : char2;
        }).replace(
          /%x/g,
          () => "0x" + doc4.charCodeAt(error.startOffset).toString(16).toUpperCase()
        );
      }
    }
  }
}
function camelcase2(value) {
  return value.replace(/-[a-z]/g, ($02) => $02.charAt(1).toUpperCase());
}

// node_modules/hast-util-is-element/index.js
var isElement6 = (
  /**
   * @type {(
   *   (() => false) &
   *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &
   *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)
   * )}
   */
  /**
   * @param {unknown} [node]
   * @param {Test | undefined} [test]
   * @param {number | null | undefined} [index]
   * @param {Parent | null | undefined} [parent]
   * @param {unknown} [context]
   * @returns {boolean}
   */
  // eslint-disable-next-line max-params
  function(node4, test2, index7, parent, context) {
    const check = convertElement(test2);
    if (index7 !== void 0 && index7 !== null && (typeof index7 !== "number" || index7 < 0 || index7 === Number.POSITIVE_INFINITY)) {
      throw new Error("Expected positive finite index for child node");
    }
    if (parent !== void 0 && parent !== null && (!parent.type || !parent.children)) {
      throw new Error("Expected parent node");
    }
    if (!node4 || !node4.type || typeof node4.type !== "string") {
      return false;
    }
    if ((parent === void 0 || parent === null) !== (index7 === void 0 || index7 === null)) {
      throw new Error("Expected both parent and index");
    }
    return check.call(context, node4, index7, parent);
  }
);
var convertElement = (
  /**
   * @type {(
   *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &
   *   ((test?: Test) => AssertAnything)
   * )}
   */
  /**
   * @param {Test | null | undefined} [test]
   * @returns {AssertAnything}
   */
  function(test2) {
    if (test2 === void 0 || test2 === null) {
      return element2;
    }
    if (typeof test2 === "string") {
      return tagNameFactory(test2);
    }
    if (typeof test2 === "object") {
      return anyFactory(test2);
    }
    if (typeof test2 === "function") {
      return castFactory(test2);
    }
    throw new Error("Expected function, string, or array as test");
  }
);
function anyFactory(tests) {
  const checks2 = [];
  let index7 = -1;
  while (++index7 < tests.length) {
    checks2[index7] = convertElement(tests[index7]);
  }
  return castFactory(any2);
  function any2(...parameters) {
    let index8 = -1;
    while (++index8 < checks2.length) {
      if (checks2[index8].call(this, ...parameters)) {
        return true;
      }
    }
    return false;
  }
}
function tagNameFactory(check) {
  return tagName;
  function tagName(node4) {
    return element2(node4) && node4.tagName === check;
  }
}
function castFactory(check) {
  return assertion;
  function assertion(node4, ...parameters) {
    return element2(node4) && Boolean(check.call(this, node4, ...parameters));
  }
}
function element2(node4) {
  return Boolean(
    node4 && typeof node4 === "object" && // @ts-expect-error Looks like a node.
    node4.type === "element" && // @ts-expect-error Looks like an element.
    typeof node4.tagName === "string"
  );
}

// node_modules/hast-util-embedded/lib/index.js
var embedded = convertElement([
  "audio",
  "canvas",
  "embed",
  "iframe",
  "img",
  "math",
  "object",
  "picture",
  "svg",
  "video"
]);

// node_modules/unist-util-is/lib/index.js
var convert = (
  /**
   * @type {(
   *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
   *   ((test?: Test) => AssertAnything)
   * )}
   */
  /**
   * @param {Test} [test]
   * @returns {AssertAnything}
   */
  function(test2) {
    if (test2 === void 0 || test2 === null) {
      return ok;
    }
    if (typeof test2 === "string") {
      return typeFactory(test2);
    }
    if (typeof test2 === "object") {
      return Array.isArray(test2) ? anyFactory2(test2) : propsFactory(test2);
    }
    if (typeof test2 === "function") {
      return castFactory2(test2);
    }
    throw new Error("Expected function, string, or object as test");
  }
);
function anyFactory2(tests) {
  const checks2 = [];
  let index7 = -1;
  while (++index7 < tests.length) {
    checks2[index7] = convert(tests[index7]);
  }
  return castFactory2(any2);
  function any2(...parameters) {
    let index8 = -1;
    while (++index8 < checks2.length) {
      if (checks2[index8].call(this, ...parameters))
        return true;
    }
    return false;
  }
}
function propsFactory(check) {
  return castFactory2(all9);
  function all9(node4) {
    let key2;
    for (key2 in check) {
      if (node4[key2] !== check[key2])
        return false;
    }
    return true;
  }
}
function typeFactory(check) {
  return castFactory2(type);
  function type(node4) {
    return node4 && node4.type === check;
  }
}
function castFactory2(check) {
  return assertion;
  function assertion(node4, ...parameters) {
    return Boolean(
      node4 && typeof node4 === "object" && "type" in node4 && // @ts-expect-error: fine.
      Boolean(check.call(this, node4, ...parameters))
    );
  }
}
function ok() {
  return true;
}

// node_modules/hast-util-whitespace/index.js
function whitespace2(thing) {
  const value = (
    // @ts-expect-error looks like a node.
    thing && typeof thing === "object" && thing.type === "text" ? (
      // @ts-expect-error looks like a text.
      thing.value || ""
    ) : thing
  );
  return typeof value === "string" && value.replace(/[ \t\n\f\r]/g, "") === "";
}

// node_modules/rehype-minify-whitespace/block.js
var blocks = [
  "address",
  // Flow content.
  "article",
  // Sections and headings.
  "aside",
  // Sections and headings.
  "blockquote",
  // Flow content.
  "body",
  // Page.
  "br",
  // Contribute whitespace intrinsically.
  "caption",
  // Similar to block.
  "center",
  // Flow content, legacy.
  "col",
  // Similar to block.
  "colgroup",
  // Similar to block.
  "dd",
  // Lists.
  "dialog",
  // Flow content.
  "dir",
  // Lists, legacy.
  "div",
  // Flow content.
  "dl",
  // Lists.
  "dt",
  // Lists.
  "figcaption",
  // Flow content.
  "figure",
  // Flow content.
  "footer",
  // Flow content.
  "form",
  // Flow content.
  "h1",
  // Sections and headings.
  "h2",
  // Sections and headings.
  "h3",
  // Sections and headings.
  "h4",
  // Sections and headings.
  "h5",
  // Sections and headings.
  "h6",
  // Sections and headings.
  "head",
  // Page.
  "header",
  // Flow content.
  "hgroup",
  // Sections and headings.
  "hr",
  // Flow content.
  "html",
  // Page.
  "legend",
  // Flow content.
  "li",
  // Block-like.
  "li",
  // Similar to block.
  "listing",
  // Flow content, legacy
  "main",
  // Flow content.
  "menu",
  // Lists.
  "nav",
  // Sections and headings.
  "ol",
  // Lists.
  "optgroup",
  // Similar to block.
  "option",
  // Similar to block.
  "p",
  // Flow content.
  "plaintext",
  // Flow content, legacy
  "pre",
  // Flow content.
  "section",
  // Sections and headings.
  "summary",
  // Similar to block.
  "table",
  // Similar to block.
  "tbody",
  // Similar to block.
  "td",
  // Block-like.
  "td",
  // Similar to block.
  "tfoot",
  // Similar to block.
  "th",
  // Block-like.
  "th",
  // Similar to block.
  "thead",
  // Similar to block.
  "tr",
  // Similar to block.
  "ul",
  // Lists.
  "wbr",
  // Contribute whitespace intrinsically.
  "xmp"
  // Flow content, legacy
];

// node_modules/rehype-minify-whitespace/content.js
var content = [
  // Form.
  "button",
  "input",
  "select",
  "textarea"
];

// node_modules/rehype-minify-whitespace/skippable.js
var skippable = [
  "area",
  "base",
  "basefont",
  "dialog",
  "datalist",
  "head",
  "link",
  "meta",
  "noembed",
  "noframes",
  "param",
  "rp",
  "script",
  "source",
  "style",
  "template",
  "track",
  "title"
];

// node_modules/rehype-minify-whitespace/index.js
var ignorableNode = convert(["doctype", "comment"]);
function rehypeMinifyWhitespace(options2 = {}) {
  const collapse = collapseFactory(
    options2.newlines ? replaceNewlines : replaceWhitespace
  );
  return (tree) => {
    minify(tree, { collapse, whitespace: "normal" });
  };
}
function minify(node4, context) {
  if ("children" in node4) {
    const settings = Object.assign({}, context);
    if (node4.type === "root" || blocklike(node4)) {
      settings.before = true;
      settings.after = true;
    }
    settings.whitespace = inferWhiteSpace(node4, context);
    return all2(node4, settings);
  }
  if (node4.type === "text") {
    if (context.whitespace === "normal") {
      return minifyText(node4, context);
    }
    if (context.whitespace === "nowrap") {
      node4.value = context.collapse(node4.value);
    }
  }
  return { remove: false, ignore: ignorableNode(node4), stripAtStart: false };
}
function minifyText(node4, context) {
  const value = context.collapse(node4.value);
  const result = { remove: false, ignore: false, stripAtStart: false };
  let start2 = 0;
  let end2 = value.length;
  if (context.before && removable(value.charAt(0))) {
    start2++;
  }
  if (start2 !== end2 && removable(value.charAt(end2 - 1))) {
    if (context.after) {
      end2--;
    } else {
      result.stripAtStart = true;
    }
  }
  if (start2 === end2) {
    result.remove = true;
  } else {
    node4.value = value.slice(start2, end2);
  }
  return result;
}
function all2(parent, context) {
  let before = context.before;
  const after = context.after;
  const children = parent.children;
  let length4 = children.length;
  let index7 = -1;
  while (++index7 < length4) {
    const result = minify(
      children[index7],
      Object.assign({}, context, {
        before,
        after: collapsableAfter(children, index7, after)
      })
    );
    if (result.remove) {
      children.splice(index7, 1);
      index7--;
      length4--;
    } else if (!result.ignore) {
      before = result.stripAtStart;
    }
    if (content2(children[index7])) {
      before = false;
    }
  }
  return { remove: false, ignore: false, stripAtStart: Boolean(before || after) };
}
function collapsableAfter(nodes, index7, after) {
  while (++index7 < nodes.length) {
    const node4 = nodes[index7];
    let result = inferBoundary(node4);
    if (result === void 0 && "children" in node4 && !skippable2(node4)) {
      result = collapsableAfter(node4.children, -1);
    }
    if (typeof result === "boolean") {
      return result;
    }
  }
  return after;
}
function inferBoundary(node4) {
  if (node4.type === "element") {
    if (content2(node4)) {
      return false;
    }
    if (blocklike(node4)) {
      return true;
    }
  } else if (node4.type === "text") {
    if (!whitespace2(node4)) {
      return false;
    }
  } else if (!ignorableNode(node4)) {
    return false;
  }
}
function content2(node4) {
  return embedded(node4) || isElement6(node4, content);
}
function blocklike(node4) {
  return isElement6(node4, blocks);
}
function skippable2(node4) {
  return Boolean(
    "properties" in node4 && node4.properties && node4.properties.hidden
  ) || ignorableNode(node4) || isElement6(node4, skippable);
}
function removable(character2) {
  return character2 === " " || character2 === "\n";
}
function replaceNewlines(value) {
  const match2 = /\r?\n|\r/.exec(value);
  return match2 ? match2[0] : " ";
}
function replaceWhitespace() {
  return " ";
}
function collapseFactory(replace4) {
  return collapse;
  function collapse(value) {
    return String(value).replace(/[\t\n\v\f\r ]+/g, replace4);
  }
}
function inferWhiteSpace(node4, context) {
  if ("tagName" in node4 && node4.properties) {
    switch (node4.tagName) {
      case "listing":
      case "plaintext":
      case "script":
      case "style":
      case "xmp":
        return "pre";
      case "nobr":
        return "nowrap";
      case "pre":
        return node4.properties.wrap ? "pre-wrap" : "pre";
      case "td":
      case "th":
        return node4.properties.noWrap ? "nowrap" : context.whitespace;
      case "textarea":
        return "pre-wrap";
      default:
    }
  }
  return context.whitespace;
}

// node_modules/unist-util-visit-parents/lib/color.browser.js
function color(d) {
  return d;
}

// node_modules/unist-util-visit-parents/lib/index.js
var CONTINUE = true;
var EXIT = false;
var SKIP = "skip";
var visitParents = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor<Node>} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor, reverse) {
    if (typeof test2 === "function" && typeof visitor !== "function") {
      reverse = visitor;
      visitor = test2;
      test2 = null;
    }
    const is3 = convert(test2);
    const step = reverse ? -1 : 1;
    factory(tree, void 0, [])();
    function factory(node4, index7, parents) {
      const value = node4 && typeof node4 === "object" ? node4 : {};
      if (typeof value.type === "string") {
        const name = (
          // `hast`
          typeof value.tagName === "string" ? value.tagName : (
            // `xast`
            typeof value.name === "string" ? value.name : void 0
          )
        );
        Object.defineProperty(visit2, "name", {
          value: "node (" + color(node4.type + (name ? "<" + name + ">" : "")) + ")"
        });
      }
      return visit2;
      function visit2() {
        let result = [];
        let subresult;
        let offset3;
        let grandparents;
        if (!test2 || is3(node4, index7, parents[parents.length - 1] || null)) {
          result = toResult(visitor(node4, parents));
          if (result[0] === EXIT) {
            return result;
          }
        }
        if (node4.children && result[0] !== SKIP) {
          offset3 = (reverse ? node4.children.length : -1) + step;
          grandparents = parents.concat(node4);
          while (offset3 > -1 && offset3 < node4.children.length) {
            subresult = factory(node4.children[offset3], offset3, grandparents)();
            if (subresult[0] === EXIT) {
              return subresult;
            }
            offset3 = typeof subresult[1] === "number" ? subresult[1] : offset3 + step;
          }
        }
        return result;
      }
    }
  }
);
function toResult(value) {
  if (Array.isArray(value)) {
    return value;
  }
  if (typeof value === "number") {
    return [CONTINUE, value];
  }
  return [value];
}

// node_modules/unist-util-visit/lib/index.js
var visit = (
  /**
   * @type {(
   *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
   *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
   * )}
   */
  /**
   * @param {Node} tree
   * @param {Test} test
   * @param {Visitor} visitor
   * @param {boolean | null | undefined} [reverse]
   * @returns {void}
   */
  function(tree, test2, visitor, reverse) {
    if (typeof test2 === "function" && typeof visitor !== "function") {
      reverse = visitor;
      visitor = test2;
      test2 = null;
    }
    visitParents(tree, test2, overload, reverse);
    function overload(node4, parents) {
      const parent = parents[parents.length - 1];
      return visitor(
        node4,
        parent ? parent.children.indexOf(node4) : null,
        parent
      );
    }
  }
);

// node_modules/hast-util-to-mdast/lib/all.js
function all3(h2, parent) {
  const nodes = parent.children || [];
  const values2 = [];
  let index7 = -1;
  while (++index7 < nodes.length) {
    const result = one2(h2, nodes[index7], parent);
    if (Array.isArray(result)) {
      values2.push(...result);
    } else if (result) {
      values2.push(result);
    }
  }
  let start2 = 0;
  let end2 = values2.length;
  while (start2 < end2 && values2[start2].type === "break") {
    start2++;
  }
  while (end2 > start2 && values2[end2 - 1].type === "break") {
    end2--;
  }
  return start2 === 0 && end2 === values2.length ? values2 : values2.slice(start2, end2);
}

// node_modules/hast-util-to-mdast/lib/util/own.js
var own4 = {}.hasOwnProperty;

// node_modules/hast-util-to-mdast/lib/util/wrap-text.js
function wrapText(h2, value) {
  return h2.wrapText ? value : value.replace(/\r?\n|\r/g, " ");
}

// node_modules/hast-util-to-mdast/lib/one.js
function one2(h2, node4, parent) {
  let fn3;
  if (node4.type === "element") {
    if (node4.properties && node4.properties.dataMdast === "ignore") {
      return;
    }
    if (own4.call(h2.handlers, node4.tagName)) {
      fn3 = h2.handlers[node4.tagName];
    }
  } else if (own4.call(h2.handlers, node4.type)) {
    fn3 = h2.handlers[node4.type];
  }
  if (typeof fn3 === "function") {
    return fn3(h2, node4, parent);
  }
  return unknown(h2, node4);
}
function unknown(h2, node4) {
  if (typeof node4.value === "string") {
    return h2(node4, "text", wrapText(h2, node4.value));
  }
  return all3(h2, node4);
}

// node_modules/hast-util-to-mdast/lib/util/wrap.js
var import_extend = __toESM(require_extend(), 1);

// node_modules/hast-util-has-property/lib/index.js
var own5 = {}.hasOwnProperty;
function hasProperty(node4, field) {
  const value = typeof field === "string" && isNode2(node4) && node4.type === "element" && node4.properties && own5.call(node4.properties, field) && node4.properties[field];
  return value !== null && value !== void 0 && value !== false;
}
function isNode2(value) {
  return Boolean(value && typeof value === "object" && "type" in value);
}

// node_modules/hast-util-is-body-ok-link/index.js
var list = /* @__PURE__ */ new Set(["pingback", "prefetch", "stylesheet"]);
function isBodyOkLink(node4) {
  if (!isElement6(node4, "link")) {
    return false;
  }
  if (hasProperty(node4, "itemProp")) {
    return true;
  }
  const props = node4.properties || {};
  const rel = props.rel || [];
  let index7 = -1;
  if (!Array.isArray(rel) || rel.length === 0) {
    return false;
  }
  while (++index7 < rel.length) {
    if (!list.has(String(rel[index7]))) {
      return false;
    }
  }
  return true;
}

// node_modules/hast-util-phrasing/lib/index.js
var basic = convertElement([
  "a",
  "abbr",
  // `area` is in fact only phrasing if it is inside a `map` element.
  // However, since `area`s are required to be inside a `map` element, and it’s
  // a rather involved check, it’s ignored here for now.
  "area",
  "b",
  "bdi",
  "bdo",
  "br",
  "button",
  "cite",
  "code",
  "data",
  "datalist",
  "del",
  "dfn",
  "em",
  "i",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "map",
  "mark",
  "meter",
  "noscript",
  "output",
  "progress",
  "q",
  "ruby",
  "s",
  "samp",
  "script",
  "select",
  "small",
  "span",
  "strong",
  "sub",
  "sup",
  "template",
  "textarea",
  "time",
  "u",
  "var",
  "wbr"
]);
var meta = convertElement("meta");
function phrasing(value) {
  return Boolean(
    node2(value) && (value.type === "text" || basic(value) || embedded(value) || isBodyOkLink(value) || meta(value) && hasProperty(value, "itemProp"))
  );
}
function node2(value) {
  return value && typeof value === "object" && "type" in value;
}

// node_modules/mdast-util-phrasing/lib/index.js
var phrasing2 = (
  /** @type {AssertPredicatePhrasing} */
  convert([
    "break",
    "delete",
    "emphasis",
    "footnote",
    "footnoteReference",
    "image",
    "imageReference",
    "inlineCode",
    "link",
    "linkReference",
    "strong",
    "text"
  ])
);

// node_modules/hast-util-to-mdast/lib/util/wrap.js
function wrap2(nodes) {
  return runs(nodes, onphrasing);
  function onphrasing(nodes2) {
    const head2 = nodes2[0];
    if (nodes2.length === 1 && head2.type === "text" && (head2.value === " " || head2.value === "\n")) {
      return [];
    }
    return { type: "paragraph", children: nodes2 };
  }
}
function wrapNeeded(nodes) {
  let index7 = -1;
  let node4;
  while (++index7 < nodes.length) {
    node4 = nodes[index7];
    if (!phrasing3(node4) || "children" in node4 && wrapNeeded(node4.children)) {
      return true;
    }
  }
  return false;
}
function runs(nodes, onphrasing, onnonphrasing) {
  const nonphrasing = onnonphrasing || identity;
  const flattened = flatten(nodes);
  let result = [];
  let index7 = -1;
  let queue;
  let node4;
  while (++index7 < flattened.length) {
    node4 = flattened[index7];
    if (phrasing3(node4)) {
      if (!queue)
        queue = [];
      queue.push(node4);
    } else {
      if (queue) {
        result = result.concat(onphrasing(queue));
        queue = void 0;
      }
      result = result.concat(nonphrasing(node4));
    }
  }
  if (queue) {
    result = result.concat(onphrasing(queue));
  }
  return result;
}
function flatten(nodes) {
  let flattened = [];
  let index7 = -1;
  let node4;
  while (++index7 < nodes.length) {
    node4 = nodes[index7];
    if ((node4.type === "delete" || node4.type === "link") && wrapNeeded(node4.children)) {
      flattened = flattened.concat(split2(node4));
    } else {
      flattened.push(node4);
    }
  }
  return flattened;
}
function split2(node4) {
  return runs(node4.children, onphrasing, onnonphrasing);
  function onnonphrasing(child) {
    if ("children" in child && "children" in node4) {
      const { children, ...rest } = node4;
      return {
        ...child,
        // @ts-expect-error: assume matching parent & child.
        children: [{ ...(0, import_extend.default)(true, {}, rest), children: child.children }]
      };
    }
    return { ...child };
  }
  function onphrasing(nodes) {
    const { children, ...rest } = node4;
    return { ...(0, import_extend.default)(true, {}, rest), children: nodes };
  }
}
function phrasing3(node4) {
  return node4.data && node4.data.hName ? phrasing({
    type: "element",
    tagName: node4.data.hName,
    properties: {},
    children: []
  }) : phrasing2(node4);
}
function identity(n) {
  return n;
}

// node_modules/hast-util-to-mdast/lib/util/wrap-children.js
function wrapChildren(h2, node4) {
  return wrap2(all3(h2, node4));
}

// node_modules/hast-util-to-mdast/lib/util/resolve.js
function resolve(h2, url) {
  if (url === null || url === void 0) {
    return "";
  }
  if (h2.frozenBaseUrl) {
    return String(new URL(url, h2.frozenBaseUrl));
  }
  return url;
}

// node_modules/hast-util-to-mdast/lib/handlers/a.js
function a(h2, node4) {
  const props = node4.properties;
  return h2(
    node4,
    "link",
    {
      title: props.title || null,
      url: resolve(h2, String(props.href || "") || null)
    },
    all3(h2, node4)
  );
}

// node_modules/hast-util-to-mdast/lib/handlers/base.js
function base3(h2, node4) {
  if (!h2.baseFound) {
    h2.frozenBaseUrl = String(node4.properties && node4.properties.href || "") || null;
    h2.baseFound = true;
  }
}

// node_modules/hast-util-to-mdast/lib/handlers/blockquote.js
function blockquote(h2, node4) {
  return h2(node4, "blockquote", wrapChildren(h2, node4));
}

// node_modules/hast-util-to-mdast/lib/handlers/br.js
function br(h2, node4) {
  return h2.wrapText ? h2(node4, "break") : h2(node4, "text", " ");
}

// node_modules/unist-util-find-after/lib/index.js
var findAfter = (
  /**
   * @type {(
   *  (<T extends Node>(node: Parent, index: Node | number, test: import('unist-util-is').PredicateTest<T>) => T | null) &
   *  ((node: Parent, index: Node | number, test?: Test) => Node | null)
   * )}
   */
  /**
   * @param {Parent} parent
   * @param {Node | number} index
   * @param {Test} [test]
   * @returns {Node | null}
   */
  function(parent, index7, test2) {
    const is3 = convert(test2);
    if (!parent || !parent.type || !parent.children) {
      throw new Error("Expected parent node");
    }
    if (typeof index7 === "number") {
      if (index7 < 0 || index7 === Number.POSITIVE_INFINITY) {
        throw new Error("Expected positive finite number as index");
      }
    } else {
      index7 = parent.children.indexOf(index7);
      if (index7 < 0) {
        throw new Error("Expected child node or index");
      }
    }
    while (++index7 < parent.children.length) {
      if (is3(parent.children[index7], index7, parent)) {
        return parent.children[index7];
      }
    }
    return null;
  }
);

// node_modules/hast-util-to-text/lib/index.js
var searchLineFeeds = /\n/g;
var searchTabOrSpaces = /[\t ]+/g;
var br2 = convertElement("br");
var p = convertElement("p");
var cell = convertElement(["th", "td"]);
var row = convertElement("tr");
var notRendered = convertElement([
  // List from: <https://html.spec.whatwg.org/#hidden-elements>
  "datalist",
  "head",
  "noembed",
  "noframes",
  "noscript",
  // Act as if we support scripting.
  "rp",
  "script",
  "style",
  "template",
  "title",
  // Hidden attribute.
  hidden2,
  // From: <https://html.spec.whatwg.org/#flow-content-3>
  closedDialog
]);
var blockOrCaption = convertElement([
  "address",
  // Flow content
  "article",
  // Sections and headings
  "aside",
  // Sections and headings
  "blockquote",
  // Flow content
  "body",
  // Page
  "caption",
  // `table-caption`
  "center",
  // Flow content (legacy)
  "dd",
  // Lists
  "dialog",
  // Flow content
  "dir",
  // Lists (legacy)
  "dl",
  // Lists
  "dt",
  // Lists
  "div",
  // Flow content
  "figure",
  // Flow content
  "figcaption",
  // Flow content
  "footer",
  // Flow content
  "form,",
  // Flow content
  "h1",
  // Sections and headings
  "h2",
  // Sections and headings
  "h3",
  // Sections and headings
  "h4",
  // Sections and headings
  "h5",
  // Sections and headings
  "h6",
  // Sections and headings
  "header",
  // Flow content
  "hgroup",
  // Sections and headings
  "hr",
  // Flow content
  "html",
  // Page
  "legend",
  // Flow content
  "listing",
  // Flow content (legacy)
  "main",
  // Flow content
  "menu",
  // Lists
  "nav",
  // Sections and headings
  "ol",
  // Lists
  "p",
  // Flow content
  "plaintext",
  // Flow content (legacy)
  "pre",
  // Flow content
  "section",
  // Sections and headings
  "ul",
  // Lists
  "xmp"
  // Flow content (legacy)
]);
function toText(tree, options2 = {}) {
  const children = "children" in tree ? tree.children : [];
  const block2 = blockOrCaption(tree);
  const whitespace4 = inferWhitespace(tree, {
    whitespace: options2.whitespace || "normal",
    breakBefore: false,
    breakAfter: false
  });
  const results = [];
  if (tree.type === "text" || tree.type === "comment") {
    results.push(
      ...collectText(tree, {
        whitespace: whitespace4,
        breakBefore: true,
        breakAfter: true
      })
    );
  }
  let index7 = -1;
  while (++index7 < children.length) {
    results.push(
      ...innerTextCollection(children[index7], tree, {
        whitespace: whitespace4,
        breakBefore: index7 ? void 0 : block2,
        breakAfter: index7 < children.length - 1 ? br2(children[index7 + 1]) : block2
      })
    );
  }
  const result = [];
  let count2;
  index7 = -1;
  while (++index7 < results.length) {
    const value = results[index7];
    if (typeof value === "number") {
      if (count2 !== void 0 && value > count2)
        count2 = value;
    } else if (value) {
      if (count2 !== void 0 && count2 > -1) {
        result.push("\n".repeat(count2) || " ");
      }
      count2 = -1;
      result.push(value);
    }
  }
  return result.join("");
}
function innerTextCollection(node4, parent, info) {
  if (node4.type === "element") {
    return collectElement(node4, parent, info);
  }
  if (node4.type === "text") {
    return info.whitespace === "normal" ? collectText(node4, info) : collectPreText(node4);
  }
  return [];
}
function collectElement(node4, parent, info) {
  const whitespace4 = inferWhitespace(node4, info);
  const children = node4.children || [];
  let index7 = -1;
  let items = [];
  if (notRendered(node4)) {
    return items;
  }
  let prefix5;
  let suffix;
  if (br2(node4)) {
    suffix = "\n";
  } else if (row(node4) && findAfter(parent, node4, row)) {
    suffix = "\n";
  } else if (p(node4)) {
    prefix5 = 2;
    suffix = 2;
  } else if (blockOrCaption(node4)) {
    prefix5 = 1;
    suffix = 1;
  }
  while (++index7 < children.length) {
    items = items.concat(
      innerTextCollection(children[index7], node4, {
        whitespace: whitespace4,
        breakBefore: index7 ? void 0 : prefix5,
        breakAfter: index7 < children.length - 1 ? br2(children[index7 + 1]) : suffix
      })
    );
  }
  if (cell(node4) && findAfter(parent, node4, cell)) {
    items.push("	");
  }
  if (prefix5)
    items.unshift(prefix5);
  if (suffix)
    items.push(suffix);
  return items;
}
function collectText(node4, info) {
  const value = String(node4.value);
  const lines2 = [];
  const result = [];
  let start2 = 0;
  while (start2 <= value.length) {
    searchLineFeeds.lastIndex = start2;
    const match2 = searchLineFeeds.exec(value);
    const end2 = match2 && "index" in match2 ? match2.index : value.length;
    lines2.push(
      // Any sequence of collapsible spaces and tabs immediately preceding or
      // following a segment break is removed.
      trimAndCollapseSpacesAndTabs(
        // […] ignoring bidi formatting characters (characters with the
        // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if
        // they were not there.
        value.slice(start2, end2).replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ""),
        start2 === 0 ? info.breakBefore : true,
        end2 === value.length ? info.breakAfter : true
      )
    );
    start2 = end2 + 1;
  }
  let index7 = -1;
  let join5;
  while (++index7 < lines2.length) {
    if (lines2[index7].charCodeAt(lines2[index7].length - 1) === 8203 || index7 < lines2.length - 1 && lines2[index7 + 1].charCodeAt(0) === 8203) {
      result.push(lines2[index7]);
      join5 = void 0;
    } else if (lines2[index7]) {
      if (typeof join5 === "number")
        result.push(join5);
      result.push(lines2[index7]);
      join5 = 0;
    } else if (index7 === 0 || index7 === lines2.length - 1) {
      result.push(0);
    }
  }
  return result;
}
function collectPreText(node4) {
  return [String(node4.value)];
}
function trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {
  const result = [];
  let start2 = 0;
  let end2;
  while (start2 < value.length) {
    searchTabOrSpaces.lastIndex = start2;
    const match2 = searchTabOrSpaces.exec(value);
    end2 = match2 ? match2.index : value.length;
    if (!start2 && !end2 && match2 && !breakBefore) {
      result.push("");
    }
    if (start2 !== end2) {
      result.push(value.slice(start2, end2));
    }
    start2 = match2 ? end2 + match2[0].length : end2;
  }
  if (start2 !== end2 && !breakAfter) {
    result.push("");
  }
  return result.join(" ");
}
function inferWhitespace(node4, info) {
  if (node4.type === "element") {
    const props = node4.properties || {};
    switch (node4.tagName) {
      case "listing":
      case "plaintext":
      case "xmp": {
        return "pre";
      }
      case "nobr": {
        return "nowrap";
      }
      case "pre": {
        return props.wrap ? "pre-wrap" : "pre";
      }
      case "td":
      case "th": {
        return props.noWrap ? "nowrap" : info.whitespace;
      }
      case "textarea": {
        return "pre-wrap";
      }
      default:
    }
  }
  return info.whitespace;
}
function hidden2(node4) {
  return Boolean((node4.properties || {}).hidden);
}
function closedDialog(node4) {
  return node4.tagName === "dialog" && !(node4.properties || {}).open;
}

// node_modules/trim-trailing-lines/index.js
function trimTrailingLines(value) {
  const input3 = String(value);
  let end2 = input3.length;
  while (end2 > 0) {
    const code5 = input3.codePointAt(end2 - 1);
    if (code5 !== void 0 && (code5 === 10 || code5 === 13)) {
      end2--;
    } else {
      break;
    }
  }
  return input3.slice(0, end2);
}

// node_modules/hast-util-to-mdast/lib/handlers/code.js
var prefix3 = "language-";
var pre = convertElement("pre");
var isCode = convertElement("code");
function code(h2, node4) {
  const children = node4.children;
  let index7 = -1;
  let classList;
  let lang;
  if (pre(node4)) {
    while (++index7 < children.length) {
      const child = children[index7];
      if (isCode(child) && child.properties && child.properties.className && Array.isArray(child.properties.className)) {
        classList = child.properties.className;
        break;
      }
    }
  }
  if (classList) {
    index7 = -1;
    while (++index7 < classList.length) {
      if (String(classList[index7]).slice(0, prefix3.length) === prefix3) {
        lang = String(classList[index7]).slice(prefix3.length);
        break;
      }
    }
  }
  return h2(
    node4,
    "code",
    { lang: lang || null, meta: null },
    trimTrailingLines(wrapText(h2, toText(node4)))
  );
}

// node_modules/hast-util-to-mdast/lib/handlers/comment.js
function comment2(h2, node4) {
  return h2(node4, "html", "<!--" + wrapText(h2, node4.value) + "-->");
}

// node_modules/hast-util-to-mdast/lib/handlers/del.js
function del2(h2, node4) {
  return h2(node4, "delete", all3(h2, node4));
}

// node_modules/hast-util-to-mdast/lib/util/list-items-spread.js
function listItemsSpread(children) {
  let index7 = -1;
  if (children.length > 1) {
    while (++index7 < children.length) {
      if (children[index7].spread) {
        return true;
      }
    }
  }
  return false;
}

// node_modules/hast-util-to-mdast/lib/util/wrap-list-items.js
function wrapListItems(h2, node4) {
  const children = all3(h2, node4);
  let index7 = -1;
  while (++index7 < children.length) {
    const child = children[index7];
    if (child.type !== "listItem") {
      children[index7] = {
        type: "listItem",
        spread: false,
        checked: null,
        // @ts-expect-error Assume `children[index]` is block content.
        children: [child]
      };
    }
  }
  return children;
}

// node_modules/hast-util-to-mdast/lib/handlers/dl.js
var div2 = convertElement("div");
var dt = convertElement("dt");
var dd = convertElement("dd");
function dl(h2, node4) {
  const children = node4.children;
  let index7 = -1;
  let clean3 = [];
  const groups = [];
  let group = { titles: [], definitions: [] };
  let child;
  let result;
  while (++index7 < children.length) {
    child = children[index7];
    clean3 = clean3.concat(div2(child) ? child.children : child);
  }
  index7 = -1;
  while (++index7 < clean3.length) {
    child = clean3[index7];
    if (dt(child)) {
      if (dd(clean3[index7 - 1])) {
        groups.push(group);
        group = { titles: [], definitions: [] };
      }
      group.titles.push(child);
    } else {
      group.definitions.push(child);
    }
  }
  groups.push(group);
  index7 = -1;
  const content5 = [];
  while (++index7 < groups.length) {
    result = [
      ...handle(h2, groups[index7].titles),
      ...handle(h2, groups[index7].definitions)
    ];
    if (result.length > 0) {
      content5.push({
        type: "listItem",
        spread: result.length > 1,
        checked: null,
        children: result
      });
    }
  }
  if (content5.length > 0) {
    return h2(
      node4,
      "list",
      { ordered: false, start: null, spread: listItemsSpread(content5) },
      content5
    );
  }
}
function handle(h2, children) {
  const nodes = wrapListItems(h2, { type: "element", tagName: "x", children });
  if (nodes.length === 0) {
    return [];
  }
  if (nodes.length === 1) {
    return nodes[0].children;
  }
  return [
    {
      type: "list",
      ordered: false,
      start: null,
      spread: listItemsSpread(nodes),
      children: nodes
    }
  ];
}

// node_modules/hast-util-to-mdast/lib/handlers/em.js
function em(h2, node4) {
  return h2(node4, "emphasis", all3(h2, node4));
}

// node_modules/hast-util-to-mdast/lib/handlers/heading.js
function heading(h2, node4) {
  const depth = Number(node4.tagName.charAt(1)) || 1;
  const wrap5 = h2.wrapText;
  h2.wrapText = false;
  const result = h2(node4, "heading", { depth }, all3(h2, node4));
  h2.wrapText = wrap5;
  return result;
}

// node_modules/hast-util-to-mdast/lib/handlers/hr.js
function hr(h2, node4) {
  return h2(node4, "thematicBreak");
}

// node_modules/hast-util-to-mdast/lib/handlers/iframe.js
function iframe(h2, node4) {
  const props = node4.properties;
  const src = String(props.src || "");
  const title = String(props.title || "");
  if (src && title) {
    return {
      type: "link",
      title: null,
      url: resolve(h2, src),
      children: [{ type: "text", value: wrapText(h2, title) }]
    };
  }
}

// node_modules/hast-util-to-mdast/lib/handlers/img.js
function img(h2, node4) {
  const props = node4.properties;
  return h2(node4, "image", {
    url: resolve(h2, String(props.src || "") || null),
    title: props.title || null,
    alt: props.alt || ""
  });
}

// node_modules/hast-util-to-mdast/lib/handlers/inline-code.js
function inlineCode(h2, node4) {
  return h2(node4, "inlineCode", wrapText(h2, toText(node4)));
}

// node_modules/hast-util-to-mdast/lib/util/find-selected-options.js
var option = convertElement("option");
function findSelectedOptions(h2, node4, properties) {
  const props = properties || node4.properties;
  let options2 = findOptions(node4);
  const size3 = Math.min(Number.parseInt(String(props.size), 10), 0) || (props.multiple ? 4 : 1);
  let index7 = -1;
  const selectedOptions = [];
  const values2 = [];
  while (++index7 < options2.length) {
    if (hasProperty(options2[index7], "selected")) {
      selectedOptions.push(options2[index7]);
    }
  }
  const list6 = selectedOptions.length > 0 ? selectedOptions : options2;
  options2 = list6.slice(0, size3);
  index7 = -1;
  while (++index7 < options2.length) {
    const option3 = options2[index7];
    const content5 = wrapText(h2, toText(option3));
    const props2 = option3.properties;
    const label = content5 || String(props2.label || "");
    const value = String(props2.value || "") || content5;
    values2.push([value, label === value ? null : label]);
  }
  return values2;
}
function findOptions(node4) {
  const children = node4.children;
  let index7 = -1;
  let results = [];
  let child;
  while (++index7 < children.length) {
    child = children[index7];
    if (Array.isArray(child.children)) {
      results = results.concat(findOptions(child));
    }
    if (option(child) && !hasProperty(child, "disabled")) {
      results.push(child);
    }
  }
  return results;
}

// node_modules/hast-util-to-mdast/lib/handlers/input.js
var datalist = convertElement("datalist");
function input(h2, node4) {
  const props = node4.properties;
  let value = String(props.value || props.placeholder || "");
  const results = [];
  const texts = [];
  let values2 = [];
  let index7 = -1;
  let list6;
  if (props.disabled || props.type === "hidden" || props.type === "file") {
    return;
  }
  if (props.type === "checkbox" || props.type === "radio") {
    return h2(
      node4,
      "text",
      wrapText(h2, h2[props.checked ? "checked" : "unchecked"])
    );
  }
  if (props.type === "image") {
    return props.alt || value ? h2(node4, "image", {
      url: resolve(h2, String(props.src || "") || null),
      title: wrapText(h2, String(props.title || "")) || null,
      alt: wrapText(h2, String(props.alt || value))
    }) : [];
  }
  if (value) {
    values2 = [[value, null]];
  } else if (
    // `list` is not supported on these types:
    props.type !== "password" && props.type !== "file" && props.type !== "submit" && props.type !== "reset" && props.type !== "button" && props.list
  ) {
    list6 = String(props.list).toUpperCase();
    if (own4.call(h2.nodeById, list6) && datalist(h2.nodeById[list6])) {
      values2 = findSelectedOptions(h2, h2.nodeById[list6], props);
    }
  }
  if (values2.length === 0) {
    return;
  }
  if (props.type === "password") {
    values2[0] = ["•".repeat(values2[0][0].length), null];
  }
  if (props.type === "url" || props.type === "email") {
    while (++index7 < values2.length) {
      value = resolve(h2, values2[index7][0]);
      results.push(
        h2(
          node4,
          "link",
          {
            title: null,
            url: wrapText(h2, props.type === "email" ? "mailto:" + value : value)
          },
          [{ type: "text", value: wrapText(h2, values2[index7][1] || value) }]
        )
      );
      if (index7 !== values2.length - 1) {
        results.push({ type: "text", value: ", " });
      }
    }
    return results;
  }
  while (++index7 < values2.length) {
    texts.push(
      values2[index7][1] ? values2[index7][1] + " (" + values2[index7][0] + ")" : values2[index7][0]
    );
  }
  return h2(node4, "text", wrapText(h2, texts.join(", ")));
}

// node_modules/hast-util-to-mdast/lib/handlers/li.js
var p2 = convertElement("p");
var input2 = convertElement("input");
function li(h2, node4) {
  const head2 = node4.children[0];
  let checked = null;
  let checkbox;
  let clone;
  if (p2(head2)) {
    checkbox = head2.children[0];
    if (input2(checkbox) && checkbox.properties && (checkbox.properties.type === "checkbox" || checkbox.properties.type === "radio")) {
      checked = Boolean(checkbox.properties.checked);
      clone = {
        ...node4,
        children: [
          { ...head2, children: head2.children.slice(1) },
          ...node4.children.slice(1)
        ]
      };
    }
  }
  const content5 = wrapChildren(h2, clone || node4);
  return h2(node4, "listItem", { spread: content5.length > 1, checked }, content5);
}

// node_modules/hast-util-to-mdast/lib/handlers/list.js
var ol = convertElement("ol");
function list2(h2, node4) {
  const ordered = ol(node4);
  const children = wrapListItems(h2, node4);
  let start2 = null;
  if (ordered) {
    start2 = hasProperty(node4, "start") ? (
      // @ts-expect-error: `props` exist.
      Number.parseInt(String(node4.properties.start), 10)
    ) : 1;
  }
  return h2(
    node4,
    "list",
    { ordered, start: start2, spread: listItemsSpread(children) },
    children
  );
}

// node_modules/mdast-util-to-string/lib/index.js
var emptyOptions = {};
function toString(value, options2) {
  const settings = options2 || emptyOptions;
  const includeImageAlt = typeof settings.includeImageAlt === "boolean" ? settings.includeImageAlt : true;
  const includeHtml = typeof settings.includeHtml === "boolean" ? settings.includeHtml : true;
  return one3(value, includeImageAlt, includeHtml);
}
function one3(value, includeImageAlt, includeHtml) {
  if (node3(value)) {
    if ("value" in value) {
      return value.type === "html" && !includeHtml ? "" : value.value;
    }
    if (includeImageAlt && "alt" in value && value.alt) {
      return value.alt;
    }
    if ("children" in value) {
      return all4(value.children, includeImageAlt, includeHtml);
    }
  }
  if (Array.isArray(value)) {
    return all4(value, includeImageAlt, includeHtml);
  }
  return "";
}
function all4(values2, includeImageAlt, includeHtml) {
  const result = [];
  let index7 = -1;
  while (++index7 < values2.length) {
    result[index7] = one3(values2[index7], includeImageAlt, includeHtml);
  }
  return result.join("");
}
function node3(value) {
  return Boolean(value && typeof value === "object");
}

// node_modules/hast-util-to-mdast/lib/handlers/media.js
var source = convertElement("source");
var video = convertElement("video");
function media(h2, node4) {
  let nodes = all3(h2, node4);
  const properties = node4.properties;
  const poster = video(node4) && String(properties.poster || "");
  let src = String(properties.src || "");
  let index7 = -1;
  let linkInFallbackContent = false;
  let child;
  visit({ type: "root", children: nodes }, "link", findLink);
  if (linkInFallbackContent || wrapNeeded(nodes)) {
    return nodes;
  }
  while (!src && ++index7 < node4.children.length) {
    child = node4.children[index7];
    if (source(child)) {
      src = String(child.properties.src || "");
    }
  }
  if (poster) {
    nodes = [
      {
        type: "image",
        title: null,
        url: resolve(h2, poster),
        alt: toString({ children: nodes })
      }
    ];
  }
  return {
    type: "link",
    // @ts-expect-error Types are broken.
    title: node4.properties.title || null,
    url: resolve(h2, src),
    // @ts-expect-error Assume phrasing content.
    children: nodes
  };
  function findLink() {
    linkInFallbackContent = true;
    return EXIT;
  }
}

// node_modules/hast-util-to-mdast/lib/handlers/p.js
function p3(h2, node4) {
  const nodes = all3(h2, node4);
  if (nodes.length > 0) {
    return h2(node4, "paragraph", nodes);
  }
}

// node_modules/hast-util-to-mdast/lib/handlers/q.js
function q(h2, node4) {
  const expected = h2.quotes[h2.qNesting % h2.quotes.length];
  h2.qNesting++;
  const contents = all3(h2, node4);
  h2.qNesting--;
  contents.unshift({ type: "text", value: expected.charAt(0) });
  contents.push({
    type: "text",
    value: expected.length > 1 ? expected.charAt(1) : expected
  });
  return contents;
}

// node_modules/hast-util-to-mdast/lib/handlers/root.js
function root(h2, node4) {
  let children = all3(h2, node4);
  if (h2.document || wrapNeeded(children)) {
    children = wrap2(children);
  }
  return h2(node4, "root", children);
}

// node_modules/hast-util-to-mdast/lib/handlers/select.js
function select(h2, node4) {
  const values2 = findSelectedOptions(h2, node4);
  let index7 = -1;
  const results = [];
  let value;
  while (++index7 < values2.length) {
    value = values2[index7];
    results.push(value[1] ? value[1] + " (" + value[0] + ")" : value[0]);
  }
  if (results.length > 0) {
    return h2(node4, "text", wrapText(h2, results.join(", ")));
  }
}

// node_modules/hast-util-to-mdast/lib/handlers/strong.js
function strong(h2, node4) {
  return h2(node4, "strong", all3(h2, node4));
}

// node_modules/hast-util-to-mdast/lib/handlers/table-cell.js
function tableCell(h2, node4) {
  const wrap5 = h2.wrapText;
  h2.wrapText = false;
  const result = h2(node4, "tableCell", all3(h2, node4));
  if (node4.properties && (node4.properties.rowSpan || node4.properties.colSpan)) {
    const data = result.data || (result.data = {});
    if (node4.properties.rowSpan)
      data.rowSpan = node4.properties.rowSpan;
    if (node4.properties.colSpan)
      data.colSpan = node4.properties.colSpan;
  }
  h2.wrapText = wrap5;
  return result;
}

// node_modules/hast-util-to-mdast/lib/handlers/table-row.js
function tableRow(h2, node4) {
  return h2(node4, "tableRow", all3(h2, node4));
}

// node_modules/hast-util-to-mdast/lib/handlers/table.js
var thead = convertElement("thead");
var tr = convertElement("tr");
var cell2 = convertElement(["th", "td"]);
function table(h2, node4) {
  if (h2.inTable) {
    return h2(node4, "text", wrapText(h2, toText(node4)));
  }
  h2.inTable = true;
  const { headless, align } = inspect(node4);
  const rows = toRows(all3(h2, node4), headless);
  let columns = 1;
  let rowIndex = -1;
  while (++rowIndex < rows.length) {
    const cells2 = rows[rowIndex].children;
    let cellIndex = -1;
    while (++cellIndex < cells2.length) {
      const cell3 = cells2[cellIndex];
      if (cell3.data) {
        const colSpan = Number.parseInt(String(cell3.data.colSpan), 10) || 1;
        const rowSpan = Number.parseInt(String(cell3.data.rowSpan), 10) || 1;
        if (colSpan > 1 || rowSpan > 1) {
          let otherRowIndex = rowIndex - 1;
          while (++otherRowIndex < rowIndex + rowSpan) {
            let colIndex = cellIndex - 1;
            while (++colIndex < cellIndex + colSpan) {
              if (!rows[otherRowIndex]) {
                break;
              }
              const newCells = [];
              if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {
                newCells.push({ type: "tableCell", children: [] });
              }
              rows[otherRowIndex].children.splice(colIndex, 0, ...newCells);
            }
          }
        }
        if ("colSpan" in cell3.data)
          delete cell3.data.colSpan;
        if ("rowSpan" in cell3.data)
          delete cell3.data.rowSpan;
        if (Object.keys(cell3.data).length === 0)
          delete cell3.data;
      }
    }
    if (cells2.length > columns)
      columns = cells2.length;
  }
  rowIndex = -1;
  while (++rowIndex < rows.length) {
    const cells2 = rows[rowIndex].children;
    let cellIndex = cells2.length - 1;
    while (++cellIndex < columns) {
      cells2.push({ type: "tableCell", children: [] });
    }
  }
  let alignIndex = align.length - 1;
  while (++alignIndex < columns) {
    align.push(null);
  }
  h2.inTable = false;
  return h2(node4, "table", { align }, rows);
}
function inspect(node4) {
  let headless = true;
  let rowIndex = 0;
  let cellIndex = 0;
  const align = [null];
  visit(node4, "element", (child) => {
    if (child.tagName === "table" && node4 !== child) {
      return SKIP;
    }
    if (cell2(child) && child.properties) {
      if (!align[cellIndex]) {
        align[cellIndex] = String(child.properties.align || "") || null;
      }
      if (headless && rowIndex < 2 && child.tagName === "th") {
        headless = false;
      }
      cellIndex++;
    } else if (thead(child)) {
      headless = false;
    } else if (tr(child)) {
      rowIndex++;
      cellIndex = 0;
    }
  });
  return { align, headless };
}
function toRows(children, headless) {
  let index7 = -1;
  const nodes = [];
  let queue;
  if (headless) {
    nodes.push({ type: "tableRow", children: [] });
  }
  while (++index7 < children.length) {
    const node4 = children[index7];
    if (node4.type === "tableRow") {
      if (queue) {
        node4.children.unshift(...queue);
        queue = void 0;
      }
      nodes.push(node4);
    } else {
      if (!queue)
        queue = [];
      queue.push(node4);
    }
  }
  if (queue) {
    nodes[nodes.length - 1].children.push(...queue);
  }
  index7 = -1;
  while (++index7 < nodes.length) {
    nodes[index7].children = toCells(nodes[index7].children);
  }
  return nodes;
}
function toCells(children) {
  const nodes = [];
  let index7 = -1;
  let node4;
  let queue;
  while (++index7 < children.length) {
    node4 = children[index7];
    if (node4.type === "tableCell") {
      if (queue) {
        node4.children.unshift(...queue);
        queue = void 0;
      }
      nodes.push(node4);
    } else {
      if (!queue)
        queue = [];
      queue.push(node4);
    }
  }
  if (queue) {
    node4 = nodes[nodes.length - 1];
    if (!node4) {
      node4 = { type: "tableCell", children: [] };
      nodes.push(node4);
    }
    node4.children.push(...queue);
  }
  return nodes;
}

// node_modules/hast-util-to-mdast/lib/handlers/text.js
function text(h2, node4) {
  return h2(node4, "text", wrapText(h2, node4.value));
}

// node_modules/hast-util-to-mdast/lib/handlers/textarea.js
function textarea(h2, node4) {
  return h2(node4, "text", wrapText(h2, toText(node4)));
}

// node_modules/hast-util-to-mdast/lib/handlers/wbr.js
function wbr(h2, node4) {
  return h2(node4, "text", "​");
}

// node_modules/hast-util-to-mdast/lib/handlers/index.js
var handlers2 = {
  root,
  text,
  comment: comment2,
  doctype: ignore,
  applet: ignore,
  area: ignore,
  basefont: ignore,
  bgsound: ignore,
  caption: ignore,
  col: ignore,
  colgroup: ignore,
  command: ignore,
  content: ignore,
  datalist: ignore,
  dialog: ignore,
  element: ignore,
  embed: ignore,
  frame: ignore,
  frameset: ignore,
  isindex: ignore,
  keygen: ignore,
  link: ignore,
  math: ignore,
  menu: ignore,
  menuitem: ignore,
  meta: ignore,
  nextid: ignore,
  noembed: ignore,
  noframes: ignore,
  optgroup: ignore,
  option: ignore,
  param: ignore,
  script: ignore,
  shadow: ignore,
  source: ignore,
  spacer: ignore,
  style: ignore,
  svg: ignore,
  template: ignore,
  title: ignore,
  track: ignore,
  abbr: all3,
  acronym: all3,
  bdi: all3,
  bdo: all3,
  big: all3,
  blink: all3,
  button: all3,
  canvas: all3,
  cite: all3,
  data: all3,
  details: all3,
  dfn: all3,
  font: all3,
  ins: all3,
  label: all3,
  map: all3,
  marquee: all3,
  meter: all3,
  nobr: all3,
  noscript: all3,
  object: all3,
  output: all3,
  progress: all3,
  rb: all3,
  rbc: all3,
  rp: all3,
  rt: all3,
  rtc: all3,
  ruby: all3,
  slot: all3,
  small: all3,
  span: all3,
  sup: all3,
  sub: all3,
  tbody: all3,
  tfoot: all3,
  thead: all3,
  time: all3,
  address: wrapChildren,
  article: wrapChildren,
  aside: wrapChildren,
  body: wrapChildren,
  center: wrapChildren,
  div: wrapChildren,
  fieldset: wrapChildren,
  figcaption: wrapChildren,
  figure: wrapChildren,
  form: wrapChildren,
  footer: wrapChildren,
  header: wrapChildren,
  hgroup: wrapChildren,
  html: wrapChildren,
  legend: wrapChildren,
  main: wrapChildren,
  multicol: wrapChildren,
  nav: wrapChildren,
  picture: wrapChildren,
  section: wrapChildren,
  a,
  audio: media,
  b: strong,
  base: base3,
  blockquote,
  br,
  code: inlineCode,
  dir: list2,
  dl,
  dt: li,
  dd: li,
  del: del2,
  em,
  h1: heading,
  h2: heading,
  h3: heading,
  h4: heading,
  h5: heading,
  h6: heading,
  hr,
  i: em,
  iframe,
  img,
  image: img,
  input,
  kbd: inlineCode,
  li,
  listing: code,
  mark: em,
  ol: list2,
  p: p3,
  plaintext: code,
  pre: code,
  q,
  s: del2,
  samp: inlineCode,
  select,
  strike: del2,
  strong,
  summary: p3,
  table,
  td: tableCell,
  textarea,
  th: tableCell,
  tr: tableRow,
  tt: inlineCode,
  u: em,
  ul: list2,
  var: inlineCode,
  video: media,
  wbr,
  xmp: code
};
function ignore() {
}

// node_modules/hast-util-to-mdast/lib/index.js
var block = convert(["heading", "paragraph", "root"]);
function toMdast(tree, options2 = {}) {
  const byId = {};
  let mdast;
  const h2 = Object.assign(
    /**
     * @type {HWithProps & HWithoutProps}
     */
    /**
     * @param {Node} node
     * @param {string} type
     * @param {Properties|string|Array<Node>} [props]
     * @param {string|Array<Node>} [children]
     */
    (node4, type, props, children) => {
      let properties;
      if (typeof props === "string" || Array.isArray(props)) {
        children = props;
        properties = {};
      } else {
        properties = props;
      }
      const result2 = { type, ...properties };
      if (typeof children === "string") {
        result2.value = children;
      } else if (children) {
        result2.children = children;
      }
      if (node4.position) {
        result2.position = node4.position;
      }
      return result2;
    },
    {
      nodeById: byId,
      baseFound: false,
      inTable: false,
      wrapText: true,
      /** @type {string|null} */
      frozenBaseUrl: null,
      qNesting: 0,
      handlers: options2.handlers ? { ...handlers2, ...options2.handlers } : handlers2,
      document: options2.document,
      checked: options2.checked || "[x]",
      unchecked: options2.unchecked || "[ ]",
      quotes: options2.quotes || ['"']
    }
  );
  visit(tree, "element", (node4) => {
    const id2 = node4.properties && "id" in node4.properties && String(node4.properties.id).toUpperCase();
    if (id2 && !own4.call(byId, id2)) {
      byId[id2] = node4;
    }
  });
  rehypeMinifyWhitespace({ newlines: options2.newlines === true })(tree);
  const result = one2(h2, tree, void 0);
  if (!result) {
    mdast = { type: "root", children: [] };
  } else if (Array.isArray(result)) {
    mdast = { type: "root", children: result };
  } else {
    mdast = result;
  }
  visit(mdast, "text", ontext);
  return mdast;
  function ontext(node4, index7, parent) {
    if (index7 === null || !parent) {
      return;
    }
    const previous3 = parent.children[index7 - 1];
    if (previous3 && previous3.type === node4.type) {
      previous3.value += node4.value;
      parent.children.splice(index7, 1);
      if (previous3.position && node4.position) {
        previous3.position.end = node4.position.end;
      }
      return index7 - 1;
    }
    node4.value = node4.value.replace(/[\t ]*(\r?\n|\r)[\t ]*/, "$1");
    if (parent && block(parent)) {
      if (!index7) {
        node4.value = node4.value.replace(/^[\t ]+/, "");
      }
      if (index7 === parent.children.length - 1) {
        node4.value = node4.value.replace(/[\t ]+$/, "");
      }
    }
    if (!node4.value) {
      parent.children.splice(index7, 1);
      return index7;
    }
  }
}

// node_modules/rehype-remark/lib/index.js
var rehypeRemark = (
  /**
   * @type {(import('unified').Plugin<[Processor, Options?], HastRoot> & import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>)}
   */
  /**
   * @param {Processor|Options} [destination]
   * @param {Options} [options]
   */
  function(destination, options2) {
    let settings;
    let processor;
    if (typeof destination === "function") {
      processor = destination;
      settings = options2 || {};
    } else {
      settings = destination || {};
    }
    if (settings.document === void 0 || settings.document === null) {
      settings = Object.assign({}, settings, { document: true });
    }
    return processor ? bridge(processor, settings) : mutate(settings);
  }
);
var lib_default = rehypeRemark;
function bridge(destination, options2) {
  return (node4, file, next2) => {
    destination.run(toMdast(node4, options2), file, (error) => {
      next2(error);
    });
  };
}
function mutate(options2 = {}) {
  return (node4) => {
    const result = (
      /** @type {MdastRoot} */
      toMdast(node4, options2)
    );
    return result;
  };
}

// node_modules/html-void-elements/index.js
var htmlVoidElements = [
  "area",
  "base",
  "basefont",
  "bgsound",
  "br",
  "col",
  "command",
  "embed",
  "frame",
  "hr",
  "image",
  "img",
  "input",
  "isindex",
  "keygen",
  "link",
  "menuitem",
  "meta",
  "nextid",
  "param",
  "source",
  "track",
  "wbr"
];

// node_modules/zwitch/index.js
var own6 = {}.hasOwnProperty;
function zwitch(key2, options2) {
  const settings = options2 || {};
  function one7(value, ...parameters) {
    let fn3 = one7.invalid;
    const handlers4 = one7.handlers;
    if (value && own6.call(value, key2)) {
      const id2 = String(value[key2]);
      fn3 = own6.call(handlers4, id2) ? handlers4[id2] : one7.unknown;
    }
    if (fn3) {
      return fn3.call(this, value, ...parameters);
    }
  }
  one7.handlers = settings.handlers || {};
  one7.invalid = settings.invalid;
  one7.unknown = settings.unknown;
  return one7;
}

// node_modules/stringify-entities/lib/core.js
function core2(value, options2) {
  value = value.replace(
    options2.subset ? charactersToExpression(options2.subset) : /["&'<>`]/g,
    basic2
  );
  if (options2.subset || options2.escapeOnly) {
    return value;
  }
  return value.replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, surrogate).replace(
    // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
    /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,
    basic2
  );
  function surrogate(pair, index7, all9) {
    return options2.format(
      (pair.charCodeAt(0) - 55296) * 1024 + pair.charCodeAt(1) - 56320 + 65536,
      all9.charCodeAt(index7 + 2),
      options2
    );
  }
  function basic2(character2, index7, all9) {
    return options2.format(
      character2.charCodeAt(0),
      all9.charCodeAt(index7 + 1),
      options2
    );
  }
}
function charactersToExpression(subset) {
  const groups = [];
  let index7 = -1;
  while (++index7 < subset.length) {
    groups.push(subset[index7].replace(/[|\\{}()[\]^$+*?.]/g, "\\$&"));
  }
  return new RegExp("(?:" + groups.join("|") + ")", "g");
}

// node_modules/stringify-entities/lib/util/to-hexadecimal.js
function toHexadecimal(code5, next2, omit) {
  const value = "&#x" + code5.toString(16).toUpperCase();
  return omit && next2 && !/[\dA-Fa-f]/.test(String.fromCharCode(next2)) ? value : value + ";";
}

// node_modules/stringify-entities/lib/util/to-decimal.js
function toDecimal(code5, next2, omit) {
  const value = "&#" + String(code5);
  return omit && next2 && !/\d/.test(String.fromCharCode(next2)) ? value : value + ";";
}

// node_modules/character-entities-legacy/index.js
var characterEntitiesLegacy = [
  "AElig",
  "AMP",
  "Aacute",
  "Acirc",
  "Agrave",
  "Aring",
  "Atilde",
  "Auml",
  "COPY",
  "Ccedil",
  "ETH",
  "Eacute",
  "Ecirc",
  "Egrave",
  "Euml",
  "GT",
  "Iacute",
  "Icirc",
  "Igrave",
  "Iuml",
  "LT",
  "Ntilde",
  "Oacute",
  "Ocirc",
  "Ograve",
  "Oslash",
  "Otilde",
  "Ouml",
  "QUOT",
  "REG",
  "THORN",
  "Uacute",
  "Ucirc",
  "Ugrave",
  "Uuml",
  "Yacute",
  "aacute",
  "acirc",
  "acute",
  "aelig",
  "agrave",
  "amp",
  "aring",
  "atilde",
  "auml",
  "brvbar",
  "ccedil",
  "cedil",
  "cent",
  "copy",
  "curren",
  "deg",
  "divide",
  "eacute",
  "ecirc",
  "egrave",
  "eth",
  "euml",
  "frac12",
  "frac14",
  "frac34",
  "gt",
  "iacute",
  "icirc",
  "iexcl",
  "igrave",
  "iquest",
  "iuml",
  "laquo",
  "lt",
  "macr",
  "micro",
  "middot",
  "nbsp",
  "not",
  "ntilde",
  "oacute",
  "ocirc",
  "ograve",
  "ordf",
  "ordm",
  "oslash",
  "otilde",
  "ouml",
  "para",
  "plusmn",
  "pound",
  "quot",
  "raquo",
  "reg",
  "sect",
  "shy",
  "sup1",
  "sup2",
  "sup3",
  "szlig",
  "thorn",
  "times",
  "uacute",
  "ucirc",
  "ugrave",
  "uml",
  "uuml",
  "yacute",
  "yen",
  "yuml"
];

// node_modules/character-entities-html4/index.js
var characterEntitiesHtml4 = {
  nbsp: " ",
  iexcl: "¡",
  cent: "¢",
  pound: "£",
  curren: "¤",
  yen: "¥",
  brvbar: "¦",
  sect: "§",
  uml: "¨",
  copy: "©",
  ordf: "ª",
  laquo: "«",
  not: "¬",
  shy: "­",
  reg: "®",
  macr: "¯",
  deg: "°",
  plusmn: "±",
  sup2: "²",
  sup3: "³",
  acute: "´",
  micro: "µ",
  para: "¶",
  middot: "·",
  cedil: "¸",
  sup1: "¹",
  ordm: "º",
  raquo: "»",
  frac14: "¼",
  frac12: "½",
  frac34: "¾",
  iquest: "¿",
  Agrave: "À",
  Aacute: "Á",
  Acirc: "Â",
  Atilde: "Ã",
  Auml: "Ä",
  Aring: "Å",
  AElig: "Æ",
  Ccedil: "Ç",
  Egrave: "È",
  Eacute: "É",
  Ecirc: "Ê",
  Euml: "Ë",
  Igrave: "Ì",
  Iacute: "Í",
  Icirc: "Î",
  Iuml: "Ï",
  ETH: "Ð",
  Ntilde: "Ñ",
  Ograve: "Ò",
  Oacute: "Ó",
  Ocirc: "Ô",
  Otilde: "Õ",
  Ouml: "Ö",
  times: "×",
  Oslash: "Ø",
  Ugrave: "Ù",
  Uacute: "Ú",
  Ucirc: "Û",
  Uuml: "Ü",
  Yacute: "Ý",
  THORN: "Þ",
  szlig: "ß",
  agrave: "à",
  aacute: "á",
  acirc: "â",
  atilde: "ã",
  auml: "ä",
  aring: "å",
  aelig: "æ",
  ccedil: "ç",
  egrave: "è",
  eacute: "é",
  ecirc: "ê",
  euml: "ë",
  igrave: "ì",
  iacute: "í",
  icirc: "î",
  iuml: "ï",
  eth: "ð",
  ntilde: "ñ",
  ograve: "ò",
  oacute: "ó",
  ocirc: "ô",
  otilde: "õ",
  ouml: "ö",
  divide: "÷",
  oslash: "ø",
  ugrave: "ù",
  uacute: "ú",
  ucirc: "û",
  uuml: "ü",
  yacute: "ý",
  thorn: "þ",
  yuml: "ÿ",
  fnof: "ƒ",
  Alpha: "Α",
  Beta: "Β",
  Gamma: "Γ",
  Delta: "Δ",
  Epsilon: "Ε",
  Zeta: "Ζ",
  Eta: "Η",
  Theta: "Θ",
  Iota: "Ι",
  Kappa: "Κ",
  Lambda: "Λ",
  Mu: "Μ",
  Nu: "Ν",
  Xi: "Ξ",
  Omicron: "Ο",
  Pi: "Π",
  Rho: "Ρ",
  Sigma: "Σ",
  Tau: "Τ",
  Upsilon: "Υ",
  Phi: "Φ",
  Chi: "Χ",
  Psi: "Ψ",
  Omega: "Ω",
  alpha: "α",
  beta: "β",
  gamma: "γ",
  delta: "δ",
  epsilon: "ε",
  zeta: "ζ",
  eta: "η",
  theta: "θ",
  iota: "ι",
  kappa: "κ",
  lambda: "λ",
  mu: "μ",
  nu: "ν",
  xi: "ξ",
  omicron: "ο",
  pi: "π",
  rho: "ρ",
  sigmaf: "ς",
  sigma: "σ",
  tau: "τ",
  upsilon: "υ",
  phi: "φ",
  chi: "χ",
  psi: "ψ",
  omega: "ω",
  thetasym: "ϑ",
  upsih: "ϒ",
  piv: "ϖ",
  bull: "•",
  hellip: "…",
  prime: "′",
  Prime: "″",
  oline: "‾",
  frasl: "⁄",
  weierp: "℘",
  image: "ℑ",
  real: "ℜ",
  trade: "™",
  alefsym: "ℵ",
  larr: "←",
  uarr: "↑",
  rarr: "→",
  darr: "↓",
  harr: "↔",
  crarr: "↵",
  lArr: "⇐",
  uArr: "⇑",
  rArr: "⇒",
  dArr: "⇓",
  hArr: "⇔",
  forall: "∀",
  part: "∂",
  exist: "∃",
  empty: "∅",
  nabla: "∇",
  isin: "∈",
  notin: "∉",
  ni: "∋",
  prod: "∏",
  sum: "∑",
  minus: "−",
  lowast: "∗",
  radic: "√",
  prop: "∝",
  infin: "∞",
  ang: "∠",
  and: "∧",
  or: "∨",
  cap: "∩",
  cup: "∪",
  int: "∫",
  there4: "∴",
  sim: "∼",
  cong: "≅",
  asymp: "≈",
  ne: "≠",
  equiv: "≡",
  le: "≤",
  ge: "≥",
  sub: "⊂",
  sup: "⊃",
  nsub: "⊄",
  sube: "⊆",
  supe: "⊇",
  oplus: "⊕",
  otimes: "⊗",
  perp: "⊥",
  sdot: "⋅",
  lceil: "⌈",
  rceil: "⌉",
  lfloor: "⌊",
  rfloor: "⌋",
  lang: "〈",
  rang: "〉",
  loz: "◊",
  spades: "♠",
  clubs: "♣",
  hearts: "♥",
  diams: "♦",
  quot: '"',
  amp: "&",
  lt: "<",
  gt: ">",
  OElig: "Œ",
  oelig: "œ",
  Scaron: "Š",
  scaron: "š",
  Yuml: "Ÿ",
  circ: "ˆ",
  tilde: "˜",
  ensp: " ",
  emsp: " ",
  thinsp: " ",
  zwnj: "‌",
  zwj: "‍",
  lrm: "‎",
  rlm: "‏",
  ndash: "–",
  mdash: "—",
  lsquo: "‘",
  rsquo: "’",
  sbquo: "‚",
  ldquo: "“",
  rdquo: "”",
  bdquo: "„",
  dagger: "†",
  Dagger: "‡",
  permil: "‰",
  lsaquo: "‹",
  rsaquo: "›",
  euro: "€"
};

// node_modules/stringify-entities/lib/constant/dangerous.js
var dangerous = [
  "cent",
  "copy",
  "divide",
  "gt",
  "lt",
  "not",
  "para",
  "times"
];

// node_modules/stringify-entities/lib/util/to-named.js
var own7 = {}.hasOwnProperty;
var characters2 = {};
var key;
for (key in characterEntitiesHtml4) {
  if (own7.call(characterEntitiesHtml4, key)) {
    characters2[characterEntitiesHtml4[key]] = key;
  }
}
function toNamed(code5, next2, omit, attribute) {
  const character2 = String.fromCharCode(code5);
  if (own7.call(characters2, character2)) {
    const name = characters2[character2];
    const value = "&" + name;
    if (omit && characterEntitiesLegacy.includes(name) && !dangerous.includes(name) && (!attribute || next2 && next2 !== 61 && /[^\da-z]/i.test(String.fromCharCode(next2)))) {
      return value;
    }
    return value + ";";
  }
  return "";
}

// node_modules/stringify-entities/lib/util/format-smart.js
function formatSmart(code5, next2, options2) {
  let numeric2 = toHexadecimal(code5, next2, options2.omitOptionalSemicolons);
  let named;
  if (options2.useNamedReferences || options2.useShortestReferences) {
    named = toNamed(
      code5,
      next2,
      options2.omitOptionalSemicolons,
      options2.attribute
    );
  }
  if ((options2.useShortestReferences || !named) && options2.useShortestReferences) {
    const decimal = toDecimal(code5, next2, options2.omitOptionalSemicolons);
    if (decimal.length < numeric2.length) {
      numeric2 = decimal;
    }
  }
  return named && (!options2.useShortestReferences || named.length < numeric2.length) ? named : numeric2;
}

// node_modules/stringify-entities/lib/index.js
function stringifyEntities(value, options2) {
  return core2(value, Object.assign({ format: formatSmart }, options2));
}

// node_modules/hast-util-to-html/lib/handle/comment.js
function comment3(node4, _1, _2, state) {
  return state.settings.bogusComments ? "<?" + stringifyEntities(
    node4.value,
    Object.assign({}, state.settings.characterReferences, { subset: [">"] })
  ) + ">" : "<!--" + node4.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode2) + "-->";
  function encode2($02) {
    return stringifyEntities(
      $02,
      Object.assign({}, state.settings.characterReferences, {
        subset: ["<", ">"]
      })
    );
  }
}

// node_modules/hast-util-to-html/lib/handle/doctype.js
function doctype(_1, _2, _3, state) {
  return "<!" + (state.settings.upperDoctype ? "DOCTYPE" : "doctype") + (state.settings.tightDoctype ? "" : " ") + "html>";
}

// node_modules/ccount/index.js
function ccount(value, character2) {
  const source2 = String(value);
  if (typeof character2 !== "string") {
    throw new TypeError("Expected character");
  }
  let count2 = 0;
  let index7 = source2.indexOf(character2);
  while (index7 !== -1) {
    count2++;
    index7 = source2.indexOf(character2, index7 + character2.length);
  }
  return count2;
}

// node_modules/hast-util-to-html/lib/omission/util/siblings.js
var siblingAfter = siblings(1);
var siblingBefore = siblings(-1);
function siblings(increment2) {
  return sibling;
  function sibling(parent, index7, includeWhitespace) {
    const siblings2 = parent ? parent.children : [];
    let offset3 = (index7 || 0) + increment2;
    let next2 = siblings2 && siblings2[offset3];
    if (!includeWhitespace) {
      while (next2 && whitespace2(next2)) {
        offset3 += increment2;
        next2 = siblings2[offset3];
      }
    }
    return next2;
  }
}

// node_modules/hast-util-to-html/lib/omission/omission.js
var own8 = {}.hasOwnProperty;
function omission(handlers4) {
  return omit;
  function omit(node4, index7, parent) {
    return own8.call(handlers4, node4.tagName) && handlers4[node4.tagName](node4, index7, parent);
  }
}

// node_modules/hast-util-to-html/lib/omission/closing.js
var closing = omission({
  html: html3,
  head: headOrColgroupOrCaption,
  body,
  p: p4,
  li: li2,
  dt: dt2,
  dd: dd2,
  rt: rubyElement,
  rp: rubyElement,
  optgroup,
  option: option2,
  menuitem,
  colgroup: headOrColgroupOrCaption,
  caption: headOrColgroupOrCaption,
  thead: thead2,
  tbody,
  tfoot,
  tr: tr2,
  td: cells,
  th: cells
});
function headOrColgroupOrCaption(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7, true);
  return !next2 || next2.type !== "comment" && !(next2.type === "text" && whitespace2(next2.value.charAt(0)));
}
function html3(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type !== "comment";
}
function body(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type !== "comment";
}
function p4(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return next2 ? next2.type === "element" && (next2.tagName === "address" || next2.tagName === "article" || next2.tagName === "aside" || next2.tagName === "blockquote" || next2.tagName === "details" || next2.tagName === "div" || next2.tagName === "dl" || next2.tagName === "fieldset" || next2.tagName === "figcaption" || next2.tagName === "figure" || next2.tagName === "footer" || next2.tagName === "form" || next2.tagName === "h1" || next2.tagName === "h2" || next2.tagName === "h3" || next2.tagName === "h4" || next2.tagName === "h5" || next2.tagName === "h6" || next2.tagName === "header" || next2.tagName === "hgroup" || next2.tagName === "hr" || next2.tagName === "main" || next2.tagName === "menu" || next2.tagName === "nav" || next2.tagName === "ol" || next2.tagName === "p" || next2.tagName === "pre" || next2.tagName === "section" || next2.tagName === "table" || next2.tagName === "ul") : !parent || // Confusing parent.
  !(parent.type === "element" && (parent.tagName === "a" || parent.tagName === "audio" || parent.tagName === "del" || parent.tagName === "ins" || parent.tagName === "map" || parent.tagName === "noscript" || parent.tagName === "video"));
}
function li2(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && next2.tagName === "li";
}
function dt2(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return next2 && next2.type === "element" && (next2.tagName === "dt" || next2.tagName === "dd");
}
function dd2(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && (next2.tagName === "dt" || next2.tagName === "dd");
}
function rubyElement(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && (next2.tagName === "rp" || next2.tagName === "rt");
}
function optgroup(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && next2.tagName === "optgroup";
}
function option2(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && (next2.tagName === "option" || next2.tagName === "optgroup");
}
function menuitem(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && (next2.tagName === "menuitem" || next2.tagName === "hr" || next2.tagName === "menu");
}
function thead2(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return next2 && next2.type === "element" && (next2.tagName === "tbody" || next2.tagName === "tfoot");
}
function tbody(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && (next2.tagName === "tbody" || next2.tagName === "tfoot");
}
function tfoot(_2, index7, parent) {
  return !siblingAfter(parent, index7);
}
function tr2(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && next2.tagName === "tr";
}
function cells(_2, index7, parent) {
  const next2 = siblingAfter(parent, index7);
  return !next2 || next2.type === "element" && (next2.tagName === "td" || next2.tagName === "th");
}

// node_modules/hast-util-to-html/lib/omission/opening.js
var opening = omission({
  html: html4,
  head,
  body: body2,
  colgroup,
  tbody: tbody2
});
function html4(node4) {
  const head2 = siblingAfter(node4, -1);
  return !head2 || head2.type !== "comment";
}
function head(node4) {
  const children = node4.children;
  const seen = [];
  let index7 = -1;
  while (++index7 < children.length) {
    const child = children[index7];
    if (child.type === "element" && (child.tagName === "title" || child.tagName === "base")) {
      if (seen.includes(child.tagName))
        return false;
      seen.push(child.tagName);
    }
  }
  return children.length > 0;
}
function body2(node4) {
  const head2 = siblingAfter(node4, -1, true);
  return !head2 || head2.type !== "comment" && !(head2.type === "text" && whitespace2(head2.value.charAt(0))) && !(head2.type === "element" && (head2.tagName === "meta" || head2.tagName === "link" || head2.tagName === "script" || head2.tagName === "style" || head2.tagName === "template"));
}
function colgroup(node4, index7, parent) {
  const previous3 = siblingBefore(parent, index7);
  const head2 = siblingAfter(node4, -1, true);
  if (parent && previous3 && previous3.type === "element" && previous3.tagName === "colgroup" && closing(previous3, parent.children.indexOf(previous3), parent)) {
    return false;
  }
  return head2 && head2.type === "element" && head2.tagName === "col";
}
function tbody2(node4, index7, parent) {
  const previous3 = siblingBefore(parent, index7);
  const head2 = siblingAfter(node4, -1);
  if (parent && previous3 && previous3.type === "element" && (previous3.tagName === "thead" || previous3.tagName === "tbody") && closing(previous3, parent.children.indexOf(previous3), parent)) {
    return false;
  }
  return head2 && head2.type === "element" && head2.tagName === "tr";
}

// node_modules/hast-util-to-html/lib/handle/element.js
var constants = {
  // See: <https://html.spec.whatwg.org/#attribute-name-state>.
  name: [
    ["	\n\f\r &/=>".split(""), "	\n\f\r \"&'/=>`".split("")],
    [`\0	
\f\r "&'/<=>`.split(""), "\0	\n\f\r \"&'/<=>`".split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
  unquoted: [
    ["	\n\f\r &>".split(""), "\0	\n\f\r \"&'<=>`".split("")],
    ["\0	\n\f\r \"&'<=>`".split(""), "\0	\n\f\r \"&'<=>`".split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
  single: [
    ["&'".split(""), "\"&'`".split("")],
    ["\0&'".split(""), "\0\"&'`".split("")]
  ],
  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
  double: [
    ['"&'.split(""), "\"&'`".split("")],
    ['\0"&'.split(""), "\0\"&'`".split("")]
  ]
};
function element3(node4, index7, parent, state) {
  const schema = state.schema;
  const omit = schema.space === "svg" ? false : state.settings.omitOptionalTags;
  let selfClosing = schema.space === "svg" ? state.settings.closeEmptyElements : state.settings.voids.includes(node4.tagName.toLowerCase());
  const parts = [];
  let last2;
  if (schema.space === "html" && node4.tagName === "svg") {
    state.schema = svg2;
  }
  const attrs = serializeAttributes(state, node4.properties);
  const content5 = state.all(
    schema.space === "html" && node4.tagName === "template" ? node4.content : node4
  );
  state.schema = schema;
  if (content5)
    selfClosing = false;
  if (attrs || !omit || !opening(node4, index7, parent)) {
    parts.push("<", node4.tagName, attrs ? " " + attrs : "");
    if (selfClosing && (schema.space === "svg" || state.settings.closeSelfClosing)) {
      last2 = attrs.charAt(attrs.length - 1);
      if (!state.settings.tightSelfClosing || last2 === "/" || last2 && last2 !== '"' && last2 !== "'") {
        parts.push(" ");
      }
      parts.push("/");
    }
    parts.push(">");
  }
  parts.push(content5);
  if (!selfClosing && (!omit || !closing(node4, index7, parent))) {
    parts.push("</" + node4.tagName + ">");
  }
  return parts.join("");
}
function serializeAttributes(state, props) {
  const values2 = [];
  let index7 = -1;
  let key2;
  if (props) {
    for (key2 in props) {
      if (props[key2] !== void 0 && props[key2] !== null) {
        const value = serializeAttribute(state, key2, props[key2]);
        if (value)
          values2.push(value);
      }
    }
  }
  while (++index7 < values2.length) {
    const last2 = state.settings.tightAttributes ? values2[index7].charAt(values2[index7].length - 1) : null;
    if (index7 !== values2.length - 1 && last2 !== '"' && last2 !== "'") {
      values2[index7] += " ";
    }
  }
  return values2.join("");
}
function serializeAttribute(state, key2, value) {
  const info = find(state.schema, key2);
  const x3 = state.settings.allowParseErrors && state.schema.space === "html" ? 0 : 1;
  const y = state.settings.allowDangerousCharacters ? 0 : 1;
  let quote = state.quote;
  let result;
  if (info.overloadedBoolean && (value === info.attribute || value === "")) {
    value = true;
  } else if (info.boolean || info.overloadedBoolean && typeof value !== "string") {
    value = Boolean(value);
  }
  if (value === void 0 || value === null || value === false || typeof value === "number" && Number.isNaN(value)) {
    return "";
  }
  const name = stringifyEntities(
    info.attribute,
    Object.assign({}, state.settings.characterReferences, {
      // Always encode without parse errors in non-HTML.
      subset: constants.name[x3][y]
    })
  );
  if (value === true)
    return name;
  value = Array.isArray(value) ? (info.commaSeparated ? stringify4 : stringify3)(value, {
    padLeft: !state.settings.tightCommaSeparatedLists
  }) : String(value);
  if (state.settings.collapseEmptyAttributes && !value)
    return name;
  if (state.settings.preferUnquoted) {
    result = stringifyEntities(
      value,
      Object.assign({}, state.settings.characterReferences, {
        subset: constants.unquoted[x3][y],
        attribute: true
      })
    );
  }
  if (result !== value) {
    if (state.settings.quoteSmart && ccount(value, quote) > ccount(value, state.alternative)) {
      quote = state.alternative;
    }
    result = quote + stringifyEntities(
      value,
      Object.assign({}, state.settings.characterReferences, {
        // Always encode without parse errors in non-HTML.
        subset: (quote === "'" ? constants.single : constants.double)[x3][y],
        attribute: true
      })
    ) + quote;
  }
  return name + (result ? "=" + result : result);
}

// node_modules/hast-util-to-html/lib/handle/text.js
function text2(node4, _2, parent, state) {
  return parent && parent.type === "element" && (parent.tagName === "script" || parent.tagName === "style") ? node4.value : stringifyEntities(
    node4.value,
    Object.assign({}, state.settings.characterReferences, {
      subset: ["<", "&"]
    })
  );
}

// node_modules/hast-util-to-html/lib/handle/raw.js
function raw(node4, index7, parent, state) {
  return state.settings.allowDangerousHtml ? node4.value : text2(node4, index7, parent, state);
}

// node_modules/hast-util-to-html/lib/handle/root.js
function root2(node4, _1, _2, state) {
  return state.all(node4);
}

// node_modules/hast-util-to-html/lib/handle/index.js
var handle2 = zwitch("type", {
  invalid,
  unknown: unknown2,
  handlers: { comment: comment3, doctype, element: element3, raw, root: root2, text: text2 }
});
function invalid(node4) {
  throw new Error("Expected node, not `" + node4 + "`");
}
function unknown2(node4) {
  throw new Error("Cannot compile unknown node `" + node4.type + "`");
}

// node_modules/hast-util-to-html/lib/index.js
function toHtml(tree, options2) {
  const options_ = options2 || {};
  const quote = options_.quote || '"';
  const alternative = quote === '"' ? "'" : '"';
  if (quote !== '"' && quote !== "'") {
    throw new Error("Invalid quote `" + quote + "`, expected `'` or `\"`");
  }
  const state = {
    one: one4,
    all: all5,
    settings: {
      omitOptionalTags: options_.omitOptionalTags || false,
      allowParseErrors: options_.allowParseErrors || false,
      allowDangerousCharacters: options_.allowDangerousCharacters || false,
      quoteSmart: options_.quoteSmart || false,
      preferUnquoted: options_.preferUnquoted || false,
      tightAttributes: options_.tightAttributes || false,
      upperDoctype: options_.upperDoctype || false,
      tightDoctype: options_.tightDoctype || false,
      bogusComments: options_.bogusComments || false,
      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,
      tightSelfClosing: options_.tightSelfClosing || false,
      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,
      allowDangerousHtml: options_.allowDangerousHtml || false,
      voids: options_.voids || htmlVoidElements,
      characterReferences: options_.characterReferences || options_.entities || {},
      closeSelfClosing: options_.closeSelfClosing || false,
      closeEmptyElements: options_.closeEmptyElements || false
    },
    schema: options_.space === "svg" ? svg2 : html2,
    quote,
    alternative
  };
  return state.one(
    Array.isArray(tree) ? { type: "root", children: tree } : tree,
    void 0,
    void 0
  );
}
function one4(node4, index7, parent) {
  return handle2(node4, index7, parent, this);
}
function all5(parent) {
  const results = [];
  const children = parent && parent.children || [];
  let index7 = -1;
  while (++index7 < children.length) {
    results[index7] = this.one(children[index7], index7, parent);
  }
  return results.join("");
}

// node_modules/rehype-stringify/lib/index.js
function rehypeStringify(config) {
  const processorSettings = (
    /** @type {Options} */
    this.data("settings")
  );
  const settings = Object.assign({}, processorSettings, config);
  Object.assign(this, { Compiler: compiler2 });
  function compiler2(tree) {
    return toHtml(tree, settings);
  }
}

// node_modules/micromark-util-symbol/constants.js
var constants2 = {
  attentionSideBefore: 1,
  // Symbol to mark an attention sequence as before content: `*a`
  attentionSideAfter: 2,
  // Symbol to mark an attention sequence as after content: `a*`
  atxHeadingOpeningFenceSizeMax: 6,
  // 6 number signs is fine, 7 isn’t.
  autolinkDomainSizeMax: 63,
  // 63 characters is fine, 64 is too many.
  autolinkSchemeSizeMax: 32,
  // 32 characters is fine, 33 is too many.
  cdataOpeningString: "CDATA[",
  // And preceded by `<![`.
  characterGroupWhitespace: 1,
  // Symbol used to indicate a character is whitespace
  characterGroupPunctuation: 2,
  // Symbol used to indicate a character is punctuation
  characterReferenceDecimalSizeMax: 7,
  // `&#9999999;`.
  characterReferenceHexadecimalSizeMax: 6,
  // `&#xff9999;`.
  characterReferenceNamedSizeMax: 31,
  // `&CounterClockwiseContourIntegral;`.
  codeFencedSequenceSizeMin: 3,
  // At least 3 ticks or tildes are needed.
  contentTypeDocument: "document",
  contentTypeFlow: "flow",
  contentTypeContent: "content",
  contentTypeString: "string",
  contentTypeText: "text",
  hardBreakPrefixSizeMin: 2,
  // At least 2 trailing spaces are needed.
  htmlRaw: 1,
  // Symbol for `<script>`
  htmlComment: 2,
  // Symbol for `<!---->`
  htmlInstruction: 3,
  // Symbol for `<?php?>`
  htmlDeclaration: 4,
  // Symbol for `<!doctype>`
  htmlCdata: 5,
  // Symbol for `<![CDATA[]]>`
  htmlBasic: 6,
  // Symbol for `<div`
  htmlComplete: 7,
  // Symbol for `<x>`
  htmlRawSizeMax: 8,
  // Length of `textarea`.
  linkResourceDestinationBalanceMax: 32,
  // See: <https://spec.commonmark.org/0.30/#link-destination>, <https://github.com/remarkjs/react-markdown/issues/658#issuecomment-984345577>
  linkReferenceSizeMax: 999,
  // See: <https://spec.commonmark.org/0.30/#link-label>
  listItemValueSizeMax: 10,
  // See: <https://spec.commonmark.org/0.30/#ordered-list-marker>
  numericBaseDecimal: 10,
  numericBaseHexadecimal: 16,
  tabSize: 4,
  // Tabs have a hard-coded size of 4, per CommonMark.
  thematicBreakMarkerCountMin: 3,
  // At least 3 asterisks, dashes, or underscores are needed.
  v8MaxSafeChunkSize: 1e4
  // V8 (and potentially others) have problems injecting giant arrays into other arrays, hence we operate in chunks.
};

// node_modules/micromark-util-chunked/dev/index.js
function splice(list6, start2, remove, items) {
  const end2 = list6.length;
  let chunkStart = 0;
  let parameters;
  if (start2 < 0) {
    start2 = -start2 > end2 ? 0 : end2 + start2;
  } else {
    start2 = start2 > end2 ? end2 : start2;
  }
  remove = remove > 0 ? remove : 0;
  if (items.length < constants2.v8MaxSafeChunkSize) {
    parameters = Array.from(items);
    parameters.unshift(start2, remove);
    [].splice.apply(list6, parameters);
  } else {
    if (remove)
      [].splice.apply(list6, [start2, remove]);
    while (chunkStart < items.length) {
      parameters = items.slice(
        chunkStart,
        chunkStart + constants2.v8MaxSafeChunkSize
      );
      parameters.unshift(start2, 0);
      [].splice.apply(list6, parameters);
      chunkStart += constants2.v8MaxSafeChunkSize;
      start2 += constants2.v8MaxSafeChunkSize;
    }
  }
}
function push(list6, items) {
  if (list6.length > 0) {
    splice(list6, list6.length, 0, items);
    return list6;
  }
  return items;
}

// node_modules/micromark-util-combine-extensions/index.js
var hasOwnProperty3 = {}.hasOwnProperty;
function combineExtensions(extensions2) {
  const all9 = {};
  let index7 = -1;
  while (++index7 < extensions2.length) {
    syntaxExtension(all9, extensions2[index7]);
  }
  return all9;
}
function syntaxExtension(all9, extension2) {
  let hook;
  for (hook in extension2) {
    const maybe = hasOwnProperty3.call(all9, hook) ? all9[hook] : void 0;
    const left2 = maybe || (all9[hook] = {});
    const right2 = extension2[hook];
    let code5;
    for (code5 in right2) {
      if (!hasOwnProperty3.call(left2, code5))
        left2[code5] = [];
      const value = right2[code5];
      constructs(
        // @ts-expect-error Looks like a list.
        left2[code5],
        Array.isArray(value) ? value : value ? [value] : []
      );
    }
  }
}
function constructs(existing, list6) {
  let index7 = -1;
  const before = [];
  while (++index7 < list6.length) {
    ;
    (list6[index7].add === "after" ? existing : before).push(list6[index7]);
  }
  splice(existing, 0, 0, before);
}

// node_modules/micromark-util-symbol/codes.js
var codes = {
  carriageReturn: -5,
  lineFeed: -4,
  carriageReturnLineFeed: -3,
  horizontalTab: -2,
  virtualSpace: -1,
  eof: null,
  nul: 0,
  soh: 1,
  stx: 2,
  etx: 3,
  eot: 4,
  enq: 5,
  ack: 6,
  bel: 7,
  bs: 8,
  ht: 9,
  // `\t`
  lf: 10,
  // `\n`
  vt: 11,
  // `\v`
  ff: 12,
  // `\f`
  cr: 13,
  // `\r`
  so: 14,
  si: 15,
  dle: 16,
  dc1: 17,
  dc2: 18,
  dc3: 19,
  dc4: 20,
  nak: 21,
  syn: 22,
  etb: 23,
  can: 24,
  em: 25,
  sub: 26,
  esc: 27,
  fs: 28,
  gs: 29,
  rs: 30,
  us: 31,
  space: 32,
  exclamationMark: 33,
  // `!`
  quotationMark: 34,
  // `"`
  numberSign: 35,
  // `#`
  dollarSign: 36,
  // `$`
  percentSign: 37,
  // `%`
  ampersand: 38,
  // `&`
  apostrophe: 39,
  // `'`
  leftParenthesis: 40,
  // `(`
  rightParenthesis: 41,
  // `)`
  asterisk: 42,
  // `*`
  plusSign: 43,
  // `+`
  comma: 44,
  // `,`
  dash: 45,
  // `-`
  dot: 46,
  // `.`
  slash: 47,
  // `/`
  digit0: 48,
  // `0`
  digit1: 49,
  // `1`
  digit2: 50,
  // `2`
  digit3: 51,
  // `3`
  digit4: 52,
  // `4`
  digit5: 53,
  // `5`
  digit6: 54,
  // `6`
  digit7: 55,
  // `7`
  digit8: 56,
  // `8`
  digit9: 57,
  // `9`
  colon: 58,
  // `:`
  semicolon: 59,
  // `;`
  lessThan: 60,
  // `<`
  equalsTo: 61,
  // `=`
  greaterThan: 62,
  // `>`
  questionMark: 63,
  // `?`
  atSign: 64,
  // `@`
  uppercaseA: 65,
  // `A`
  uppercaseB: 66,
  // `B`
  uppercaseC: 67,
  // `C`
  uppercaseD: 68,
  // `D`
  uppercaseE: 69,
  // `E`
  uppercaseF: 70,
  // `F`
  uppercaseG: 71,
  // `G`
  uppercaseH: 72,
  // `H`
  uppercaseI: 73,
  // `I`
  uppercaseJ: 74,
  // `J`
  uppercaseK: 75,
  // `K`
  uppercaseL: 76,
  // `L`
  uppercaseM: 77,
  // `M`
  uppercaseN: 78,
  // `N`
  uppercaseO: 79,
  // `O`
  uppercaseP: 80,
  // `P`
  uppercaseQ: 81,
  // `Q`
  uppercaseR: 82,
  // `R`
  uppercaseS: 83,
  // `S`
  uppercaseT: 84,
  // `T`
  uppercaseU: 85,
  // `U`
  uppercaseV: 86,
  // `V`
  uppercaseW: 87,
  // `W`
  uppercaseX: 88,
  // `X`
  uppercaseY: 89,
  // `Y`
  uppercaseZ: 90,
  // `Z`
  leftSquareBracket: 91,
  // `[`
  backslash: 92,
  // `\`
  rightSquareBracket: 93,
  // `]`
  caret: 94,
  // `^`
  underscore: 95,
  // `_`
  graveAccent: 96,
  // `` ` ``
  lowercaseA: 97,
  // `a`
  lowercaseB: 98,
  // `b`
  lowercaseC: 99,
  // `c`
  lowercaseD: 100,
  // `d`
  lowercaseE: 101,
  // `e`
  lowercaseF: 102,
  // `f`
  lowercaseG: 103,
  // `g`
  lowercaseH: 104,
  // `h`
  lowercaseI: 105,
  // `i`
  lowercaseJ: 106,
  // `j`
  lowercaseK: 107,
  // `k`
  lowercaseL: 108,
  // `l`
  lowercaseM: 109,
  // `m`
  lowercaseN: 110,
  // `n`
  lowercaseO: 111,
  // `o`
  lowercaseP: 112,
  // `p`
  lowercaseQ: 113,
  // `q`
  lowercaseR: 114,
  // `r`
  lowercaseS: 115,
  // `s`
  lowercaseT: 116,
  // `t`
  lowercaseU: 117,
  // `u`
  lowercaseV: 118,
  // `v`
  lowercaseW: 119,
  // `w`
  lowercaseX: 120,
  // `x`
  lowercaseY: 121,
  // `y`
  lowercaseZ: 122,
  // `z`
  leftCurlyBrace: 123,
  // `{`
  verticalBar: 124,
  // `|`
  rightCurlyBrace: 125,
  // `}`
  tilde: 126,
  // `~`
  del: 127,
  // Unicode Specials block.
  byteOrderMarker: 65279,
  // Unicode Specials block.
  replacementCharacter: 65533
  // `�`
};

// node_modules/micromark-util-character/dev/lib/unicode-punctuation-regex.js
var unicodePunctuationRegex = /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061D-\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1B7D\u1B7E\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52-\u2E5D\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

// node_modules/micromark-util-character/dev/index.js
var asciiAlpha = regexCheck(/[A-Za-z]/);
var asciiDigit = regexCheck(/\d/);
var asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
var asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
var asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
var asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
function asciiControl(code5) {
  return (
    // Special whitespace codes (which have negative values), C0 and Control
    // character DEL
    code5 !== null && (code5 < codes.space || code5 === codes.del)
  );
}
function markdownLineEndingOrSpace(code5) {
  return code5 !== null && (code5 < codes.nul || code5 === codes.space);
}
function markdownLineEnding(code5) {
  return code5 !== null && code5 < codes.horizontalTab;
}
function markdownSpace(code5) {
  return code5 === codes.horizontalTab || code5 === codes.virtualSpace || code5 === codes.space;
}
var unicodeWhitespace = regexCheck(/\s/);
var unicodePunctuation = regexCheck(unicodePunctuationRegex);
function regexCheck(regex) {
  return check;
  function check(code5) {
    return code5 !== null && regex.test(String.fromCharCode(code5));
  }
}

// node_modules/micromark-extension-gfm-autolink-literal/dev/lib/syntax.js
var wwwPrefix = { tokenize: tokenizeWwwPrefix, partial: true };
var domain = { tokenize: tokenizeDomain, partial: true };
var path = { tokenize: tokenizePath, partial: true };
var trail = { tokenize: tokenizeTrail, partial: true };
var emailDomainDotTrail = {
  tokenize: tokenizeEmailDomainDotTrail,
  partial: true
};
var wwwAutolink = { tokenize: tokenizeWwwAutolink, previous: previousWww };
var protocolAutolink = {
  tokenize: tokenizeProtocolAutolink,
  previous: previousProtocol
};
var emailAutolink = { tokenize: tokenizeEmailAutolink, previous: previousEmail };
var text3 = {};
var gfmAutolinkLiteral = { text: text3 };
var code2 = codes.digit0;
while (code2 < codes.leftCurlyBrace) {
  text3[code2] = emailAutolink;
  code2++;
  if (code2 === codes.colon)
    code2 = codes.uppercaseA;
  else if (code2 === codes.leftSquareBracket)
    code2 = codes.lowercaseA;
}
text3[codes.plusSign] = emailAutolink;
text3[codes.dash] = emailAutolink;
text3[codes.dot] = emailAutolink;
text3[codes.underscore] = emailAutolink;
text3[codes.uppercaseH] = [emailAutolink, protocolAutolink];
text3[codes.lowercaseH] = [emailAutolink, protocolAutolink];
text3[codes.uppercaseW] = [emailAutolink, wwwAutolink];
text3[codes.lowercaseW] = [emailAutolink, wwwAutolink];
function tokenizeEmailAutolink(effects, ok3, nok) {
  const self2 = this;
  let dot;
  let data;
  return start2;
  function start2(code5) {
    if (!gfmAtext(code5) || !previousEmail.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code5);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkEmail");
    return atext(code5);
  }
  function atext(code5) {
    if (gfmAtext(code5)) {
      effects.consume(code5);
      return atext;
    }
    if (code5 === codes.atSign) {
      effects.consume(code5);
      return emailDomain;
    }
    return nok(code5);
  }
  function emailDomain(code5) {
    if (code5 === codes.dot) {
      return effects.check(
        emailDomainDotTrail,
        emailDomainAfter,
        emailDomainDot
      )(code5);
    }
    if (code5 === codes.dash || code5 === codes.underscore || asciiAlphanumeric(code5)) {
      data = true;
      effects.consume(code5);
      return emailDomain;
    }
    return emailDomainAfter(code5);
  }
  function emailDomainDot(code5) {
    effects.consume(code5);
    dot = true;
    return emailDomain;
  }
  function emailDomainAfter(code5) {
    if (data && dot && asciiAlpha(self2.previous)) {
      effects.exit("literalAutolinkEmail");
      effects.exit("literalAutolink");
      return ok3(code5);
    }
    return nok(code5);
  }
}
function tokenizeWwwAutolink(effects, ok3, nok) {
  const self2 = this;
  return wwwStart;
  function wwwStart(code5) {
    if (code5 !== codes.uppercaseW && code5 !== codes.lowercaseW || !previousWww.call(self2, self2.previous) || previousUnbalanced(self2.events)) {
      return nok(code5);
    }
    effects.enter("literalAutolink");
    effects.enter("literalAutolinkWww");
    return effects.check(
      wwwPrefix,
      effects.attempt(domain, effects.attempt(path, wwwAfter), nok),
      nok
    )(code5);
  }
  function wwwAfter(code5) {
    effects.exit("literalAutolinkWww");
    effects.exit("literalAutolink");
    return ok3(code5);
  }
}
function tokenizeProtocolAutolink(effects, ok3, nok) {
  const self2 = this;
  let buffer2 = "";
  let seen = false;
  return protocolStart;
  function protocolStart(code5) {
    if ((code5 === codes.uppercaseH || code5 === codes.lowercaseH) && previousProtocol.call(self2, self2.previous) && !previousUnbalanced(self2.events)) {
      effects.enter("literalAutolink");
      effects.enter("literalAutolinkHttp");
      buffer2 += String.fromCodePoint(code5);
      effects.consume(code5);
      return protocolPrefixInside;
    }
    return nok(code5);
  }
  function protocolPrefixInside(code5) {
    if (asciiAlpha(code5) && buffer2.length < 5) {
      buffer2 += String.fromCodePoint(code5);
      effects.consume(code5);
      return protocolPrefixInside;
    }
    if (code5 === codes.colon) {
      const protocol = buffer2.toLowerCase();
      if (protocol === "http" || protocol === "https") {
        effects.consume(code5);
        return protocolSlashesInside;
      }
    }
    return nok(code5);
  }
  function protocolSlashesInside(code5) {
    if (code5 === codes.slash) {
      effects.consume(code5);
      if (seen) {
        return afterProtocol;
      }
      seen = true;
      return protocolSlashesInside;
    }
    return nok(code5);
  }
  function afterProtocol(code5) {
    return code5 === codes.eof || asciiControl(code5) || markdownLineEndingOrSpace(code5) || unicodeWhitespace(code5) || unicodePunctuation(code5) ? nok(code5) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code5);
  }
  function protocolAfter(code5) {
    effects.exit("literalAutolinkHttp");
    effects.exit("literalAutolink");
    return ok3(code5);
  }
}
function tokenizeWwwPrefix(effects, ok3, nok) {
  let size3 = 0;
  return wwwPrefixInside;
  function wwwPrefixInside(code5) {
    if ((code5 === codes.uppercaseW || code5 === codes.lowercaseW) && size3 < 3) {
      size3++;
      effects.consume(code5);
      return wwwPrefixInside;
    }
    if (code5 === codes.dot && size3 === 3) {
      effects.consume(code5);
      return wwwPrefixAfter;
    }
    return nok(code5);
  }
  function wwwPrefixAfter(code5) {
    return code5 === codes.eof ? nok(code5) : ok3(code5);
  }
}
function tokenizeDomain(effects, ok3, nok) {
  let underscoreInLastSegment;
  let underscoreInLastLastSegment;
  let seen;
  return domainInside;
  function domainInside(code5) {
    if (code5 === codes.dot || code5 === codes.underscore) {
      return effects.check(trail, domainAfter, domainAtPunctuation)(code5);
    }
    if (code5 === codes.eof || markdownLineEndingOrSpace(code5) || unicodeWhitespace(code5) || code5 !== codes.dash && unicodePunctuation(code5)) {
      return domainAfter(code5);
    }
    seen = true;
    effects.consume(code5);
    return domainInside;
  }
  function domainAtPunctuation(code5) {
    if (code5 === codes.underscore) {
      underscoreInLastSegment = true;
    } else {
      underscoreInLastLastSegment = underscoreInLastSegment;
      underscoreInLastSegment = void 0;
    }
    effects.consume(code5);
    return domainInside;
  }
  function domainAfter(code5) {
    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {
      return nok(code5);
    }
    return ok3(code5);
  }
}
function tokenizePath(effects, ok3) {
  let sizeOpen = 0;
  let sizeClose = 0;
  return pathInside;
  function pathInside(code5) {
    if (code5 === codes.leftParenthesis) {
      sizeOpen++;
      effects.consume(code5);
      return pathInside;
    }
    if (code5 === codes.rightParenthesis && sizeClose < sizeOpen) {
      return pathAtPunctuation(code5);
    }
    if (code5 === codes.exclamationMark || code5 === codes.quotationMark || code5 === codes.ampersand || code5 === codes.apostrophe || code5 === codes.rightParenthesis || code5 === codes.asterisk || code5 === codes.comma || code5 === codes.dot || code5 === codes.colon || code5 === codes.semicolon || code5 === codes.lessThan || code5 === codes.questionMark || code5 === codes.rightSquareBracket || code5 === codes.underscore || code5 === codes.tilde) {
      return effects.check(trail, ok3, pathAtPunctuation)(code5);
    }
    if (code5 === codes.eof || markdownLineEndingOrSpace(code5) || unicodeWhitespace(code5)) {
      return ok3(code5);
    }
    effects.consume(code5);
    return pathInside;
  }
  function pathAtPunctuation(code5) {
    if (code5 === codes.rightParenthesis) {
      sizeClose++;
    }
    effects.consume(code5);
    return pathInside;
  }
}
function tokenizeTrail(effects, ok3, nok) {
  return trail2;
  function trail2(code5) {
    if (code5 === codes.exclamationMark || code5 === codes.quotationMark || code5 === codes.apostrophe || code5 === codes.rightParenthesis || code5 === codes.asterisk || code5 === codes.comma || code5 === codes.dot || code5 === codes.colon || code5 === codes.semicolon || code5 === codes.questionMark || code5 === codes.underscore || code5 === codes.tilde) {
      effects.consume(code5);
      return trail2;
    }
    if (code5 === codes.ampersand) {
      effects.consume(code5);
      return trailCharRefStart;
    }
    if (code5 === codes.rightSquareBracket) {
      effects.consume(code5);
      return trailBracketAfter;
    }
    if (
      // `<` is an end.
      code5 === codes.lessThan || // So is whitespace.
      code5 === codes.eof || markdownLineEndingOrSpace(code5) || unicodeWhitespace(code5)
    ) {
      return ok3(code5);
    }
    return nok(code5);
  }
  function trailBracketAfter(code5) {
    if (code5 === codes.eof || code5 === codes.leftParenthesis || code5 === codes.leftSquareBracket || markdownLineEndingOrSpace(code5) || unicodeWhitespace(code5)) {
      return ok3(code5);
    }
    return trail2(code5);
  }
  function trailCharRefStart(code5) {
    return asciiAlpha(code5) ? trailCharRefInside(code5) : nok(code5);
  }
  function trailCharRefInside(code5) {
    if (code5 === codes.semicolon) {
      effects.consume(code5);
      return trail2;
    }
    if (asciiAlpha(code5)) {
      effects.consume(code5);
      return trailCharRefInside;
    }
    return nok(code5);
  }
}
function tokenizeEmailDomainDotTrail(effects, ok3, nok) {
  return start2;
  function start2(code5) {
    effects.consume(code5);
    return after;
  }
  function after(code5) {
    return asciiAlphanumeric(code5) ? nok(code5) : ok3(code5);
  }
}
function previousWww(code5) {
  return code5 === codes.eof || code5 === codes.leftParenthesis || code5 === codes.asterisk || code5 === codes.underscore || code5 === codes.leftSquareBracket || code5 === codes.rightSquareBracket || code5 === codes.tilde || markdownLineEndingOrSpace(code5);
}
function previousProtocol(code5) {
  return !asciiAlpha(code5);
}
function previousEmail(code5) {
  return !(code5 === codes.slash || gfmAtext(code5));
}
function gfmAtext(code5) {
  return code5 === codes.plusSign || code5 === codes.dash || code5 === codes.dot || code5 === codes.underscore || asciiAlphanumeric(code5);
}
function previousUnbalanced(events) {
  let index7 = events.length;
  let result = false;
  while (index7--) {
    const token2 = events[index7][1];
    if ((token2.type === "labelLink" || token2.type === "labelImage") && !token2._balanced) {
      result = true;
      break;
    }
    if (token2._gfmAutolinkLiteralWalkedInto) {
      result = false;
      break;
    }
  }
  if (events.length > 0 && !result) {
    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;
  }
  return result;
}

// node_modules/micromark-util-symbol/values.js
var values = {
  ht: "	",
  lf: "\n",
  cr: "\r",
  space: " ",
  exclamationMark: "!",
  quotationMark: '"',
  numberSign: "#",
  dollarSign: "$",
  percentSign: "%",
  ampersand: "&",
  apostrophe: "'",
  leftParenthesis: "(",
  rightParenthesis: ")",
  asterisk: "*",
  plusSign: "+",
  comma: ",",
  dash: "-",
  dot: ".",
  slash: "/",
  digit0: "0",
  digit1: "1",
  digit2: "2",
  digit3: "3",
  digit4: "4",
  digit5: "5",
  digit6: "6",
  digit7: "7",
  digit8: "8",
  digit9: "9",
  colon: ":",
  semicolon: ";",
  lessThan: "<",
  equalsTo: "=",
  greaterThan: ">",
  questionMark: "?",
  atSign: "@",
  uppercaseA: "A",
  uppercaseB: "B",
  uppercaseC: "C",
  uppercaseD: "D",
  uppercaseE: "E",
  uppercaseF: "F",
  uppercaseG: "G",
  uppercaseH: "H",
  uppercaseI: "I",
  uppercaseJ: "J",
  uppercaseK: "K",
  uppercaseL: "L",
  uppercaseM: "M",
  uppercaseN: "N",
  uppercaseO: "O",
  uppercaseP: "P",
  uppercaseQ: "Q",
  uppercaseR: "R",
  uppercaseS: "S",
  uppercaseT: "T",
  uppercaseU: "U",
  uppercaseV: "V",
  uppercaseW: "W",
  uppercaseX: "X",
  uppercaseY: "Y",
  uppercaseZ: "Z",
  leftSquareBracket: "[",
  backslash: "\\",
  rightSquareBracket: "]",
  caret: "^",
  underscore: "_",
  graveAccent: "`",
  lowercaseA: "a",
  lowercaseB: "b",
  lowercaseC: "c",
  lowercaseD: "d",
  lowercaseE: "e",
  lowercaseF: "f",
  lowercaseG: "g",
  lowercaseH: "h",
  lowercaseI: "i",
  lowercaseJ: "j",
  lowercaseK: "k",
  lowercaseL: "l",
  lowercaseM: "m",
  lowercaseN: "n",
  lowercaseO: "o",
  lowercaseP: "p",
  lowercaseQ: "q",
  lowercaseR: "r",
  lowercaseS: "s",
  lowercaseT: "t",
  lowercaseU: "u",
  lowercaseV: "v",
  lowercaseW: "w",
  lowercaseX: "x",
  lowercaseY: "y",
  lowercaseZ: "z",
  leftCurlyBrace: "{",
  verticalBar: "|",
  rightCurlyBrace: "}",
  tilde: "~",
  replacementCharacter: "�"
};

// node_modules/micromark-util-sanitize-uri/dev/index.js
function normalizeUri(value) {
  const result = [];
  let index7 = -1;
  let start2 = 0;
  let skip = 0;
  while (++index7 < value.length) {
    const code5 = value.charCodeAt(index7);
    let replace4 = "";
    if (code5 === codes.percentSign && asciiAlphanumeric(value.charCodeAt(index7 + 1)) && asciiAlphanumeric(value.charCodeAt(index7 + 2))) {
      skip = 2;
    } else if (code5 < 128) {
      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code5))) {
        replace4 = String.fromCharCode(code5);
      }
    } else if (code5 > 55295 && code5 < 57344) {
      const next2 = value.charCodeAt(index7 + 1);
      if (code5 < 56320 && next2 > 56319 && next2 < 57344) {
        replace4 = String.fromCharCode(code5, next2);
        skip = 1;
      } else {
        replace4 = values.replacementCharacter;
      }
    } else {
      replace4 = String.fromCharCode(code5);
    }
    if (replace4) {
      result.push(value.slice(start2, index7), encodeURIComponent(replace4));
      start2 = index7 + skip + 1;
      replace4 = "";
    }
    if (skip) {
      index7 += skip;
      skip = 0;
    }
  }
  return result.join("") + value.slice(start2);
}

// node_modules/dequal/dist/index.mjs
var has = Object.prototype.hasOwnProperty;
function find2(iter, tar, key2) {
  for (key2 of iter.keys()) {
    if (dequal(key2, tar))
      return key2;
  }
}
function dequal(foo, bar) {
  var ctor, len, tmp;
  if (foo === bar)
    return true;
  if (foo && bar && (ctor = foo.constructor) === bar.constructor) {
    if (ctor === Date)
      return foo.getTime() === bar.getTime();
    if (ctor === RegExp)
      return foo.toString() === bar.toString();
    if (ctor === Array) {
      if ((len = foo.length) === bar.length) {
        while (len-- && dequal(foo[len], bar[len]))
          ;
      }
      return len === -1;
    }
    if (ctor === Set) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len;
        if (tmp && typeof tmp === "object") {
          tmp = find2(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!bar.has(tmp))
          return false;
      }
      return true;
    }
    if (ctor === Map) {
      if (foo.size !== bar.size) {
        return false;
      }
      for (len of foo) {
        tmp = len[0];
        if (tmp && typeof tmp === "object") {
          tmp = find2(bar, tmp);
          if (!tmp)
            return false;
        }
        if (!dequal(len[1], bar.get(tmp))) {
          return false;
        }
      }
      return true;
    }
    if (ctor === ArrayBuffer) {
      foo = new Uint8Array(foo);
      bar = new Uint8Array(bar);
    } else if (ctor === DataView) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo.getInt8(len) === bar.getInt8(len))
          ;
      }
      return len === -1;
    }
    if (ArrayBuffer.isView(foo)) {
      if ((len = foo.byteLength) === bar.byteLength) {
        while (len-- && foo[len] === bar[len])
          ;
      }
      return len === -1;
    }
    if (!ctor || typeof foo === "object") {
      len = 0;
      for (ctor in foo) {
        if (has.call(foo, ctor) && ++len && !has.call(bar, ctor))
          return false;
        if (!(ctor in bar) || !dequal(foo[ctor], bar[ctor]))
          return false;
      }
      return Object.keys(bar).length === len;
    }
  }
  return foo !== foo && bar !== bar;
}

// node_modules/kleur/index.mjs
var FORCE_COLOR;
var NODE_DISABLE_COLORS;
var NO_COLOR;
var TERM;
var isTTY = true;
if (typeof process !== "undefined") {
  ({ FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM } = process.env || {});
  isTTY = process.stdout && process.stdout.isTTY;
}
var $ = {
  enabled: !NODE_DISABLE_COLORS && NO_COLOR == null && TERM !== "dumb" && (FORCE_COLOR != null && FORCE_COLOR !== "0" || isTTY),
  // modifiers
  reset: init(0, 0),
  bold: init(1, 22),
  dim: init(2, 22),
  italic: init(3, 23),
  underline: init(4, 24),
  inverse: init(7, 27),
  hidden: init(8, 28),
  strikethrough: init(9, 29),
  // colors
  black: init(30, 39),
  red: init(31, 39),
  green: init(32, 39),
  yellow: init(33, 39),
  blue: init(34, 39),
  magenta: init(35, 39),
  cyan: init(36, 39),
  white: init(37, 39),
  gray: init(90, 39),
  grey: init(90, 39),
  // background colors
  bgBlack: init(40, 49),
  bgRed: init(41, 49),
  bgGreen: init(42, 49),
  bgYellow: init(43, 49),
  bgBlue: init(44, 49),
  bgMagenta: init(45, 49),
  bgCyan: init(46, 49),
  bgWhite: init(47, 49)
};
function run2(arr, str) {
  let i = 0, tmp, beg = "", end2 = "";
  for (; i < arr.length; i++) {
    tmp = arr[i];
    beg += tmp.open;
    end2 += tmp.close;
    if (!!~str.indexOf(tmp.close)) {
      str = str.replace(tmp.rgx, tmp.close + tmp.open);
    }
  }
  return beg + str + end2;
}
function chain(has2, keys5) {
  let ctx = { has: has2, keys: keys5 };
  ctx.reset = $.reset.bind(ctx);
  ctx.bold = $.bold.bind(ctx);
  ctx.dim = $.dim.bind(ctx);
  ctx.italic = $.italic.bind(ctx);
  ctx.underline = $.underline.bind(ctx);
  ctx.inverse = $.inverse.bind(ctx);
  ctx.hidden = $.hidden.bind(ctx);
  ctx.strikethrough = $.strikethrough.bind(ctx);
  ctx.black = $.black.bind(ctx);
  ctx.red = $.red.bind(ctx);
  ctx.green = $.green.bind(ctx);
  ctx.yellow = $.yellow.bind(ctx);
  ctx.blue = $.blue.bind(ctx);
  ctx.magenta = $.magenta.bind(ctx);
  ctx.cyan = $.cyan.bind(ctx);
  ctx.white = $.white.bind(ctx);
  ctx.gray = $.gray.bind(ctx);
  ctx.grey = $.grey.bind(ctx);
  ctx.bgBlack = $.bgBlack.bind(ctx);
  ctx.bgRed = $.bgRed.bind(ctx);
  ctx.bgGreen = $.bgGreen.bind(ctx);
  ctx.bgYellow = $.bgYellow.bind(ctx);
  ctx.bgBlue = $.bgBlue.bind(ctx);
  ctx.bgMagenta = $.bgMagenta.bind(ctx);
  ctx.bgCyan = $.bgCyan.bind(ctx);
  ctx.bgWhite = $.bgWhite.bind(ctx);
  return ctx;
}
function init(open, close2) {
  let blk = {
    open: `\x1B[${open}m`,
    close: `\x1B[${close2}m`,
    rgx: new RegExp(`\\x1b\\[${close2}m`, "g")
  };
  return function(txt) {
    if (this !== void 0 && this.has !== void 0) {
      !!~this.has.indexOf(open) || (this.has.push(open), this.keys.push(blk));
      return txt === void 0 ? this : $.enabled ? run2(this.keys, txt + "") : txt + "";
    }
    return txt === void 0 ? chain([open], [blk]) : $.enabled ? run2([blk], txt + "") : txt + "";
  };
}
var kleur_default = $;

// node_modules/diff/lib/index.es6.js
function Diff() {
}
Diff.prototype = {
  diff: function diff(oldString, newString) {
    var options2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
    var callback = options2.callback;
    if (typeof options2 === "function") {
      callback = options2;
      options2 = {};
    }
    this.options = options2;
    var self2 = this;
    function done(value) {
      if (callback) {
        setTimeout(function() {
          callback(void 0, value);
        }, 0);
        return true;
      } else {
        return value;
      }
    }
    oldString = this.castInput(oldString);
    newString = this.castInput(newString);
    oldString = this.removeEmpty(this.tokenize(oldString));
    newString = this.removeEmpty(this.tokenize(newString));
    var newLen = newString.length, oldLen = oldString.length;
    var editLength = 1;
    var maxEditLength = newLen + oldLen;
    if (options2.maxEditLength) {
      maxEditLength = Math.min(maxEditLength, options2.maxEditLength);
    }
    var bestPath = [{
      newPos: -1,
      components: []
    }];
    var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
    if (bestPath[0].newPos + 1 >= newLen && oldPos + 1 >= oldLen) {
      return done([{
        value: this.join(newString),
        count: newString.length
      }]);
    }
    function execEditLength() {
      for (var diagonalPath = -1 * editLength; diagonalPath <= editLength; diagonalPath += 2) {
        var basePath = void 0;
        var addPath = bestPath[diagonalPath - 1], removePath = bestPath[diagonalPath + 1], _oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
        if (addPath) {
          bestPath[diagonalPath - 1] = void 0;
        }
        var canAdd = addPath && addPath.newPos + 1 < newLen, canRemove = removePath && 0 <= _oldPos && _oldPos < oldLen;
        if (!canAdd && !canRemove) {
          bestPath[diagonalPath] = void 0;
          continue;
        }
        if (!canAdd || canRemove && addPath.newPos < removePath.newPos) {
          basePath = clonePath(removePath);
          self2.pushComponent(basePath.components, void 0, true);
        } else {
          basePath = addPath;
          basePath.newPos++;
          self2.pushComponent(basePath.components, true, void 0);
        }
        _oldPos = self2.extractCommon(basePath, newString, oldString, diagonalPath);
        if (basePath.newPos + 1 >= newLen && _oldPos + 1 >= oldLen) {
          return done(buildValues(self2, basePath.components, newString, oldString, self2.useLongestToken));
        } else {
          bestPath[diagonalPath] = basePath;
        }
      }
      editLength++;
    }
    if (callback) {
      (function exec() {
        setTimeout(function() {
          if (editLength > maxEditLength) {
            return callback();
          }
          if (!execEditLength()) {
            exec();
          }
        }, 0);
      })();
    } else {
      while (editLength <= maxEditLength) {
        var ret = execEditLength();
        if (ret) {
          return ret;
        }
      }
    }
  },
  pushComponent: function pushComponent(components, added, removed) {
    var last2 = components[components.length - 1];
    if (last2 && last2.added === added && last2.removed === removed) {
      components[components.length - 1] = {
        count: last2.count + 1,
        added,
        removed
      };
    } else {
      components.push({
        count: 1,
        added,
        removed
      });
    }
  },
  extractCommon: function extractCommon(basePath, newString, oldString, diagonalPath) {
    var newLen = newString.length, oldLen = oldString.length, newPos = basePath.newPos, oldPos = newPos - diagonalPath, commonCount = 0;
    while (newPos + 1 < newLen && oldPos + 1 < oldLen && this.equals(newString[newPos + 1], oldString[oldPos + 1])) {
      newPos++;
      oldPos++;
      commonCount++;
    }
    if (commonCount) {
      basePath.components.push({
        count: commonCount
      });
    }
    basePath.newPos = newPos;
    return oldPos;
  },
  equals: function equals(left2, right2) {
    if (this.options.comparator) {
      return this.options.comparator(left2, right2);
    } else {
      return left2 === right2 || this.options.ignoreCase && left2.toLowerCase() === right2.toLowerCase();
    }
  },
  removeEmpty: function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  },
  castInput: function castInput(value) {
    return value;
  },
  tokenize: function tokenize2(value) {
    return value.split("");
  },
  join: function join2(chars2) {
    return chars2.join("");
  }
};
function buildValues(diff2, components, newString, oldString, useLongestToken) {
  var componentPos = 0, componentLen = components.length, newPos = 0, oldPos = 0;
  for (; componentPos < componentLen; componentPos++) {
    var component = components[componentPos];
    if (!component.removed) {
      if (!component.added && useLongestToken) {
        var value = newString.slice(newPos, newPos + component.count);
        value = value.map(function(value2, i) {
          var oldValue = oldString[oldPos + i];
          return oldValue.length > value2.length ? oldValue : value2;
        });
        component.value = diff2.join(value);
      } else {
        component.value = diff2.join(newString.slice(newPos, newPos + component.count));
      }
      newPos += component.count;
      if (!component.added) {
        oldPos += component.count;
      }
    } else {
      component.value = diff2.join(oldString.slice(oldPos, oldPos + component.count));
      oldPos += component.count;
      if (componentPos && components[componentPos - 1].added) {
        var tmp = components[componentPos - 1];
        components[componentPos - 1] = components[componentPos];
        components[componentPos] = tmp;
      }
    }
  }
  var lastComponent = components[componentLen - 1];
  if (componentLen > 1 && typeof lastComponent.value === "string" && (lastComponent.added || lastComponent.removed) && diff2.equals("", lastComponent.value)) {
    components[componentLen - 2].value += lastComponent.value;
    components.pop();
  }
  return components;
}
function clonePath(path3) {
  return {
    newPos: path3.newPos,
    components: path3.components.slice(0)
  };
}
var characterDiff = new Diff();
function diffChars(oldStr, newStr, options2) {
  return characterDiff.diff(oldStr, newStr, options2);
}
var extendedWordChars = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/;
var reWhitespace = /\S/;
var wordDiff = new Diff();
wordDiff.equals = function(left2, right2) {
  if (this.options.ignoreCase) {
    left2 = left2.toLowerCase();
    right2 = right2.toLowerCase();
  }
  return left2 === right2 || this.options.ignoreWhitespace && !reWhitespace.test(left2) && !reWhitespace.test(right2);
};
wordDiff.tokenize = function(value) {
  var tokens = value.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/);
  for (var i = 0; i < tokens.length - 1; i++) {
    if (!tokens[i + 1] && tokens[i + 2] && extendedWordChars.test(tokens[i]) && extendedWordChars.test(tokens[i + 2])) {
      tokens[i] += tokens[i + 2];
      tokens.splice(i + 1, 2);
      i--;
    }
  }
  return tokens;
};
var lineDiff = new Diff();
lineDiff.tokenize = function(value) {
  var retLines = [], linesAndNewlines = value.split(/(\n|\r\n)/);
  if (!linesAndNewlines[linesAndNewlines.length - 1]) {
    linesAndNewlines.pop();
  }
  for (var i = 0; i < linesAndNewlines.length; i++) {
    var line3 = linesAndNewlines[i];
    if (i % 2 && !this.options.newlineIsToken) {
      retLines[retLines.length - 1] += line3;
    } else {
      if (this.options.ignoreWhitespace) {
        line3 = line3.trim();
      }
      retLines.push(line3);
    }
  }
  return retLines;
};
function diffLines(oldStr, newStr, callback) {
  return lineDiff.diff(oldStr, newStr, callback);
}
var sentenceDiff = new Diff();
sentenceDiff.tokenize = function(value) {
  return value.split(/(\S.+?[.!?])(?=\s+|$)/);
};
var cssDiff = new Diff();
cssDiff.tokenize = function(value) {
  return value.split(/([{}:;,]|\s+)/);
};
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
var objectPrototypeToString = Object.prototype.toString;
var jsonDiff = new Diff();
jsonDiff.useLongestToken = true;
jsonDiff.tokenize = lineDiff.tokenize;
jsonDiff.castInput = function(value) {
  var _this$options = this.options, undefinedReplacement = _this$options.undefinedReplacement, _this$options$stringi = _this$options.stringifyReplacer, stringifyReplacer = _this$options$stringi === void 0 ? function(k, v) {
    return typeof v === "undefined" ? undefinedReplacement : v;
  } : _this$options$stringi;
  return typeof value === "string" ? value : JSON.stringify(canonicalize(value, null, null, stringifyReplacer), stringifyReplacer, "  ");
};
jsonDiff.equals = function(left2, right2) {
  return Diff.prototype.equals.call(jsonDiff, left2.replace(/,([\r\n])/g, "$1"), right2.replace(/,([\r\n])/g, "$1"));
};
function canonicalize(obj, stack, replacementStack, replacer, key2) {
  stack = stack || [];
  replacementStack = replacementStack || [];
  if (replacer) {
    obj = replacer(key2, obj);
  }
  var i;
  for (i = 0; i < stack.length; i += 1) {
    if (stack[i] === obj) {
      return replacementStack[i];
    }
  }
  var canonicalizedObj;
  if ("[object Array]" === objectPrototypeToString.call(obj)) {
    stack.push(obj);
    canonicalizedObj = new Array(obj.length);
    replacementStack.push(canonicalizedObj);
    for (i = 0; i < obj.length; i += 1) {
      canonicalizedObj[i] = canonicalize(obj[i], stack, replacementStack, replacer, key2);
    }
    stack.pop();
    replacementStack.pop();
    return canonicalizedObj;
  }
  if (obj && obj.toJSON) {
    obj = obj.toJSON();
  }
  if (_typeof(obj) === "object" && obj !== null) {
    stack.push(obj);
    canonicalizedObj = {};
    replacementStack.push(canonicalizedObj);
    var sortedKeys = [], _key;
    for (_key in obj) {
      if (obj.hasOwnProperty(_key)) {
        sortedKeys.push(_key);
      }
    }
    sortedKeys.sort();
    for (i = 0; i < sortedKeys.length; i += 1) {
      _key = sortedKeys[i];
      canonicalizedObj[_key] = canonicalize(obj[_key], stack, replacementStack, replacer, _key);
    }
    stack.pop();
    replacementStack.pop();
  } else {
    canonicalizedObj = obj;
  }
  return canonicalizedObj;
}
var arrayDiff = new Diff();
arrayDiff.tokenize = function(value) {
  return value.slice();
};
arrayDiff.join = arrayDiff.removeEmpty = function(value) {
  return value;
};
function diffArrays(oldArr, newArr, callback) {
  return arrayDiff.diff(oldArr, newArr, callback);
}

// node_modules/uvu/diff/index.mjs
var colors = {
  "--": kleur_default.red,
  "··": kleur_default.grey,
  "++": kleur_default.green
};
var TITLE = kleur_default.dim().italic;
var TAB = kleur_default.dim("→");
var SPACE = kleur_default.dim("·");
var NL = kleur_default.dim("↵");
var LOG = (sym, str) => colors[sym](sym + PRETTY(str)) + "\n";
var LINE = (num, x3) => kleur_default.dim("L" + String(num).padStart(x3, "0") + " ");
var PRETTY = (str) => str.replace(/[ ]/g, SPACE).replace(/\t/g, TAB).replace(/(\r?\n)/g, NL);
function line2(obj, prev2, pad) {
  let char2 = obj.removed ? "--" : obj.added ? "++" : "··";
  let arr = obj.value.replace(/\r?\n$/, "").split("\n");
  let i = 0, tmp, out = "";
  if (obj.added)
    out += colors[char2]().underline(TITLE("Expected:")) + "\n";
  else if (obj.removed)
    out += colors[char2]().underline(TITLE("Actual:")) + "\n";
  for (; i < arr.length; i++) {
    tmp = arr[i];
    if (tmp != null) {
      if (prev2)
        out += LINE(prev2 + i, pad);
      out += LOG(char2, tmp || "\n");
    }
  }
  return out;
}
function arrays(input3, expect) {
  let arr = diffArrays(input3, expect);
  let i = 0, j = 0, k = 0, tmp, val, char2, isObj, str;
  let out = LOG("··", "[");
  for (; i < arr.length; i++) {
    char2 = (tmp = arr[i]).removed ? "--" : tmp.added ? "++" : "··";
    if (tmp.added) {
      out += colors[char2]().underline(TITLE("Expected:")) + "\n";
    } else if (tmp.removed) {
      out += colors[char2]().underline(TITLE("Actual:")) + "\n";
    }
    for (j = 0; j < tmp.value.length; j++) {
      isObj = tmp.value[j] && typeof tmp.value[j] === "object";
      val = stringify5(tmp.value[j]).split(/\r?\n/g);
      for (k = 0; k < val.length; ) {
        str = "  " + val[k++] + (isObj ? "" : ",");
        if (isObj && k === val.length && j + 1 < tmp.value.length)
          str += ",";
        out += LOG(char2, str);
      }
    }
  }
  return out + LOG("··", "]");
}
function lines(input3, expect, linenum = 0) {
  let i = 0, tmp, output = "";
  let arr = diffLines(input3, expect);
  let pad = String(expect.split(/\r?\n/g).length - linenum).length;
  for (; i < arr.length; i++) {
    output += line2(tmp = arr[i], linenum, pad);
    if (linenum && !tmp.removed)
      linenum += tmp.count;
  }
  return output;
}
function chars(input3, expect) {
  let arr = diffChars(input3, expect);
  let i = 0, output = "", tmp;
  let l1 = input3.length;
  let l2 = expect.length;
  let p1 = PRETTY(input3);
  let p22 = PRETTY(expect);
  tmp = arr[i];
  if (l1 === l2) {
  } else if (tmp.removed && arr[i + 1]) {
    let del3 = tmp.count - arr[i + 1].count;
    if (del3 == 0) {
    } else if (del3 > 0) {
      expect = " ".repeat(del3) + expect;
      p22 = " ".repeat(del3) + p22;
      l2 += del3;
    } else if (del3 < 0) {
      input3 = " ".repeat(-del3) + input3;
      p1 = " ".repeat(-del3) + p1;
      l1 += -del3;
    }
  }
  output += direct(p1, p22, l1, l2);
  if (l1 === l2) {
    for (tmp = "  "; i < l1; i++) {
      tmp += input3[i] === expect[i] ? " " : "^";
    }
  } else {
    for (tmp = "  "; i < arr.length; i++) {
      tmp += (arr[i].added || arr[i].removed ? "^" : " ").repeat(Math.max(arr[i].count, 0));
      if (i + 1 < arr.length && (arr[i].added && arr[i + 1].removed || arr[i].removed && arr[i + 1].added)) {
        arr[i + 1].count -= arr[i].count;
      }
    }
  }
  return output + kleur_default.red(tmp);
}
function direct(input3, expect, lenA = String(input3).length, lenB = String(expect).length) {
  let gutter = 4;
  let lenC = Math.max(lenA, lenB);
  let typeA = typeof input3, typeB = typeof expect;
  if (typeA !== typeB) {
    gutter = 2;
    let delA = gutter + lenC - lenA;
    let delB = gutter + lenC - lenB;
    input3 += " ".repeat(delA) + kleur_default.dim(`[${typeA}]`);
    expect += " ".repeat(delB) + kleur_default.dim(`[${typeB}]`);
    lenA += delA + typeA.length + 2;
    lenB += delB + typeB.length + 2;
    lenC = Math.max(lenA, lenB);
  }
  let output = colors["++"]("++" + expect + " ".repeat(gutter + lenC - lenB) + TITLE("(Expected)")) + "\n";
  return output + colors["--"]("--" + input3 + " ".repeat(gutter + lenC - lenA) + TITLE("(Actual)")) + "\n";
}
function sort(input3, expect) {
  var k, i = 0, tmp, isArr = Array.isArray(input3);
  var keys5 = [], out = isArr ? Array(input3.length) : {};
  if (isArr) {
    for (i = 0; i < out.length; i++) {
      tmp = input3[i];
      if (!tmp || typeof tmp !== "object")
        out[i] = tmp;
      else
        out[i] = sort(tmp, expect[i]);
    }
  } else {
    for (k in expect)
      keys5.push(k);
    for (; i < keys5.length; i++) {
      if (Object.prototype.hasOwnProperty.call(input3, k = keys5[i])) {
        if (!(tmp = input3[k]) || typeof tmp !== "object")
          out[k] = tmp;
        else
          out[k] = sort(tmp, expect[k]);
      }
    }
    for (k in input3) {
      if (!out.hasOwnProperty(k)) {
        out[k] = input3[k];
      }
    }
  }
  return out;
}
function circular() {
  var cache = /* @__PURE__ */ new Set();
  return function print2(key2, val) {
    if (val === void 0)
      return "[__VOID__]";
    if (typeof val === "number" && val !== val)
      return "[__NAN__]";
    if (typeof val === "bigint")
      return val.toString();
    if (!val || typeof val !== "object")
      return val;
    if (cache.has(val))
      return "[Circular]";
    cache.add(val);
    return val;
  };
}
function stringify5(input3) {
  return JSON.stringify(input3, circular(), 2).replace(/"\[__NAN__\]"/g, "NaN").replace(/"\[__VOID__\]"/g, "undefined");
}
function compare(input3, expect) {
  if (Array.isArray(expect) && Array.isArray(input3))
    return arrays(input3, expect);
  if (expect instanceof RegExp)
    return chars("" + input3, "" + expect);
  let isA = input3 && typeof input3 == "object";
  let isB = expect && typeof expect == "object";
  if (isA && isB)
    input3 = sort(input3, expect);
  if (isB)
    expect = stringify5(expect);
  if (isA)
    input3 = stringify5(input3);
  if (expect && typeof expect == "object") {
    input3 = stringify5(sort(input3, expect));
    expect = stringify5(expect);
  }
  isA = typeof input3 == "string";
  isB = typeof expect == "string";
  if (isA && /\r?\n/.test(input3))
    return lines(input3, "" + expect);
  if (isB && /\r?\n/.test(expect))
    return lines("" + input3, expect);
  if (isA && isB)
    return chars(input3, expect);
  return direct(input3, expect);
}

// node_modules/uvu/assert/index.mjs
function dedent(str) {
  str = str.replace(/\r?\n/g, "\n");
  let arr = str.match(/^[ \t]*(?=\S)/gm);
  let i = 0, min5 = 1 / 0, len = (arr || []).length;
  for (; i < len; i++)
    min5 = Math.min(min5, arr[i].length);
  return len && min5 ? str.replace(new RegExp(`^[ \\t]{${min5}}`, "gm"), "") : str;
}
var Assertion = class extends Error {
  constructor(opts = {}) {
    super(opts.message);
    this.name = "Assertion";
    this.code = "ERR_ASSERTION";
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    }
    this.details = opts.details || false;
    this.generated = !!opts.generated;
    this.operator = opts.operator;
    this.expects = opts.expects;
    this.actual = opts.actual;
  }
};
function assert(bool, actual, expects, operator, detailer, backup, msg) {
  if (bool)
    return;
  let message = msg || backup;
  if (msg instanceof Error)
    throw msg;
  let details = detailer && detailer(actual, expects);
  throw new Assertion({ actual, expects, operator, message, details, generated: !msg });
}
function ok2(val, msg) {
  assert(!!val, false, true, "ok", false, "Expected value to be truthy", msg);
}
function is2(val, exp, msg) {
  assert(val === exp, val, exp, "is", compare, "Expected values to be strictly equal:", msg);
}
function not(val, msg) {
  assert(!val, true, false, "not", false, "Expected value to be falsey", msg);
}
not.ok = not;
is2.not = function(val, exp, msg) {
  assert(val !== exp, val, exp, "is.not", false, "Expected values not to be strictly equal", msg);
};
not.equal = function(val, exp, msg) {
  assert(!dequal(val, exp), val, exp, "not.equal", false, "Expected values not to be deeply equal", msg);
};
not.type = function(val, exp, msg) {
  let tmp = typeof val;
  assert(tmp !== exp, tmp, exp, "not.type", false, `Expected "${tmp}" not to be "${exp}"`, msg);
};
not.instance = function(val, exp, msg) {
  let name = "`" + (exp.name || exp.constructor.name) + "`";
  assert(!(val instanceof exp), val, exp, "not.instance", false, `Expected value not to be an instance of ${name}`, msg);
};
not.snapshot = function(val, exp, msg) {
  val = dedent(val);
  exp = dedent(exp);
  assert(val !== exp, val, exp, "not.snapshot", false, "Expected value not to match snapshot", msg);
};
not.fixture = function(val, exp, msg) {
  val = dedent(val);
  exp = dedent(exp);
  assert(val !== exp, val, exp, "not.fixture", false, "Expected value not to match fixture", msg);
};
not.match = function(val, exp, msg) {
  if (typeof exp === "string") {
    assert(!val.includes(exp), val, exp, "not.match", false, `Expected value not to include "${exp}" substring`, msg);
  } else {
    assert(!exp.test(val), val, exp, "not.match", false, `Expected value not to match \`${String(exp)}\` pattern`, msg);
  }
};
not.throws = function(blk, exp, msg) {
  if (!msg && typeof exp === "string") {
    msg = exp;
    exp = null;
  }
  try {
    blk();
  } catch (err) {
    if (typeof exp === "function") {
      assert(!exp(err), true, false, "not.throws", false, "Expected function not to throw matching exception", msg);
    } else if (exp instanceof RegExp) {
      assert(!exp.test(err.message), true, false, "not.throws", false, `Expected function not to throw exception matching \`${String(exp)}\` pattern`, msg);
    } else if (!exp) {
      assert(false, true, false, "not.throws", false, "Expected function not to throw", msg);
    }
  }
};

// node_modules/micromark-util-classify-character/dev/index.js
function classifyCharacter(code5) {
  if (code5 === codes.eof || markdownLineEndingOrSpace(code5) || unicodeWhitespace(code5)) {
    return constants2.characterGroupWhitespace;
  }
  if (unicodePunctuation(code5)) {
    return constants2.characterGroupPunctuation;
  }
}

// node_modules/micromark-util-resolve-all/index.js
function resolveAll(constructs2, events, context) {
  const called = [];
  let index7 = -1;
  while (++index7 < constructs2.length) {
    const resolve2 = constructs2[index7].resolveAll;
    if (resolve2 && !called.includes(resolve2)) {
      events = resolve2(events, context);
      called.push(resolve2);
    }
  }
  return events;
}

// node_modules/micromark-util-symbol/types.js
var types = {
  // Generic type for data, such as in a title, a destination, etc.
  data: "data",
  // Generic type for syntactic whitespace (tabs, virtual spaces, spaces).
  // Such as, between a fenced code fence and an info string.
  whitespace: "whitespace",
  // Generic type for line endings (line feed, carriage return, carriage return +
  // line feed).
  lineEnding: "lineEnding",
  // A line ending, but ending a blank line.
  lineEndingBlank: "lineEndingBlank",
  // Generic type for whitespace (tabs, virtual spaces, spaces) at the start of a
  // line.
  linePrefix: "linePrefix",
  // Generic type for whitespace (tabs, virtual spaces, spaces) at the end of a
  // line.
  lineSuffix: "lineSuffix",
  // Whole ATX heading:
  //
  // ```markdown
  // #
  // ## Alpha
  // ### Bravo ###
  // ```
  //
  // Includes `atxHeadingSequence`, `whitespace`, `atxHeadingText`.
  atxHeading: "atxHeading",
  // Sequence of number signs in an ATX heading (`###`).
  atxHeadingSequence: "atxHeadingSequence",
  // Content in an ATX heading (`alpha`).
  // Includes text.
  atxHeadingText: "atxHeadingText",
  // Whole autolink (`<https://example.com>` or `<admin@example.com>`)
  // Includes `autolinkMarker` and `autolinkProtocol` or `autolinkEmail`.
  autolink: "autolink",
  // Email autolink w/o markers (`admin@example.com`)
  autolinkEmail: "autolinkEmail",
  // Marker around an `autolinkProtocol` or `autolinkEmail` (`<` or `>`).
  autolinkMarker: "autolinkMarker",
  // Protocol autolink w/o markers (`https://example.com`)
  autolinkProtocol: "autolinkProtocol",
  // A whole character escape (`\-`).
  // Includes `escapeMarker` and `characterEscapeValue`.
  characterEscape: "characterEscape",
  // The escaped character (`-`).
  characterEscapeValue: "characterEscapeValue",
  // A whole character reference (`&amp;`, `&#8800;`, or `&#x1D306;`).
  // Includes `characterReferenceMarker`, an optional
  // `characterReferenceMarkerNumeric`, in which case an optional
  // `characterReferenceMarkerHexadecimal`, and a `characterReferenceValue`.
  characterReference: "characterReference",
  // The start or end marker (`&` or `;`).
  characterReferenceMarker: "characterReferenceMarker",
  // Mark reference as numeric (`#`).
  characterReferenceMarkerNumeric: "characterReferenceMarkerNumeric",
  // Mark reference as numeric (`x` or `X`).
  characterReferenceMarkerHexadecimal: "characterReferenceMarkerHexadecimal",
  // Value of character reference w/o markers (`amp`, `8800`, or `1D306`).
  characterReferenceValue: "characterReferenceValue",
  // Whole fenced code:
  //
  // ````markdown
  // ```js
  // alert(1)
  // ```
  // ````
  codeFenced: "codeFenced",
  // A fenced code fence, including whitespace, sequence, info, and meta
  // (` ```js `).
  codeFencedFence: "codeFencedFence",
  // Sequence of grave accent or tilde characters (` ``` `) in a fence.
  codeFencedFenceSequence: "codeFencedFenceSequence",
  // Info word (`js`) in a fence.
  // Includes string.
  codeFencedFenceInfo: "codeFencedFenceInfo",
  // Meta words (`highlight="1"`) in a fence.
  // Includes string.
  codeFencedFenceMeta: "codeFencedFenceMeta",
  // A line of code.
  codeFlowValue: "codeFlowValue",
  // Whole indented code:
  //
  // ```markdown
  //     alert(1)
  // ```
  //
  // Includes `lineEnding`, `linePrefix`, and `codeFlowValue`.
  codeIndented: "codeIndented",
  // A text code (``` `alpha` ```).
  // Includes `codeTextSequence`, `codeTextData`, `lineEnding`, and can include
  // `codeTextPadding`.
  codeText: "codeText",
  codeTextData: "codeTextData",
  // A space or line ending right after or before a tick.
  codeTextPadding: "codeTextPadding",
  // A text code fence (` `` `).
  codeTextSequence: "codeTextSequence",
  // Whole content:
  //
  // ```markdown
  // [a]: b
  // c
  // =
  // d
  // ```
  //
  // Includes `paragraph` and `definition`.
  content: "content",
  // Whole definition:
  //
  // ```markdown
  // [micromark]: https://github.com/micromark/micromark
  // ```
  //
  // Includes `definitionLabel`, `definitionMarker`, `whitespace`,
  // `definitionDestination`, and optionally `lineEnding` and `definitionTitle`.
  definition: "definition",
  // Destination of a definition (`https://github.com/micromark/micromark` or
  // `<https://github.com/micromark/micromark>`).
  // Includes `definitionDestinationLiteral` or `definitionDestinationRaw`.
  definitionDestination: "definitionDestination",
  // Enclosed destination of a definition
  // (`<https://github.com/micromark/micromark>`).
  // Includes `definitionDestinationLiteralMarker` and optionally
  // `definitionDestinationString`.
  definitionDestinationLiteral: "definitionDestinationLiteral",
  // Markers of an enclosed definition destination (`<` or `>`).
  definitionDestinationLiteralMarker: "definitionDestinationLiteralMarker",
  // Unenclosed destination of a definition
  // (`https://github.com/micromark/micromark`).
  // Includes `definitionDestinationString`.
  definitionDestinationRaw: "definitionDestinationRaw",
  // Text in an destination (`https://github.com/micromark/micromark`).
  // Includes string.
  definitionDestinationString: "definitionDestinationString",
  // Label of a definition (`[micromark]`).
  // Includes `definitionLabelMarker` and `definitionLabelString`.
  definitionLabel: "definitionLabel",
  // Markers of a definition label (`[` or `]`).
  definitionLabelMarker: "definitionLabelMarker",
  // Value of a definition label (`micromark`).
  // Includes string.
  definitionLabelString: "definitionLabelString",
  // Marker between a label and a destination (`:`).
  definitionMarker: "definitionMarker",
  // Title of a definition (`"x"`, `'y'`, or `(z)`).
  // Includes `definitionTitleMarker` and optionally `definitionTitleString`.
  definitionTitle: "definitionTitle",
  // Marker around a title of a definition (`"`, `'`, `(`, or `)`).
  definitionTitleMarker: "definitionTitleMarker",
  // Data without markers in a title (`z`).
  // Includes string.
  definitionTitleString: "definitionTitleString",
  // Emphasis (`*alpha*`).
  // Includes `emphasisSequence` and `emphasisText`.
  emphasis: "emphasis",
  // Sequence of emphasis markers (`*` or `_`).
  emphasisSequence: "emphasisSequence",
  // Emphasis text (`alpha`).
  // Includes text.
  emphasisText: "emphasisText",
  // The character escape marker (`\`).
  escapeMarker: "escapeMarker",
  // A hard break created with a backslash (`\\n`).
  // Includes `escapeMarker` (does not include the line ending)
  hardBreakEscape: "hardBreakEscape",
  // A hard break created with trailing spaces (`  \n`).
  // Does not include the line ending.
  hardBreakTrailing: "hardBreakTrailing",
  // Flow HTML:
  //
  // ```markdown
  // <div
  // ```
  //
  // Inlcudes `lineEnding`, `htmlFlowData`.
  htmlFlow: "htmlFlow",
  htmlFlowData: "htmlFlowData",
  // HTML in text (the tag in `a <i> b`).
  // Includes `lineEnding`, `htmlTextData`.
  htmlText: "htmlText",
  htmlTextData: "htmlTextData",
  // Whole image (`![alpha](bravo)`, `![alpha][bravo]`, `![alpha][]`, or
  // `![alpha]`).
  // Includes `label` and an optional `resource` or `reference`.
  image: "image",
  // Whole link label (`[*alpha*]`).
  // Includes `labelLink` or `labelImage`, `labelText`, and `labelEnd`.
  label: "label",
  // Text in an label (`*alpha*`).
  // Includes text.
  labelText: "labelText",
  // Start a link label (`[`).
  // Includes a `labelMarker`.
  labelLink: "labelLink",
  // Start an image label (`![`).
  // Includes `labelImageMarker` and `labelMarker`.
  labelImage: "labelImage",
  // Marker of a label (`[` or `]`).
  labelMarker: "labelMarker",
  // Marker to start an image (`!`).
  labelImageMarker: "labelImageMarker",
  // End a label (`]`).
  // Includes `labelMarker`.
  labelEnd: "labelEnd",
  // Whole link (`[alpha](bravo)`, `[alpha][bravo]`, `[alpha][]`, or `[alpha]`).
  // Includes `label` and an optional `resource` or `reference`.
  link: "link",
  // Whole paragraph:
  //
  // ```markdown
  // alpha
  // bravo.
  // ```
  //
  // Includes text.
  paragraph: "paragraph",
  // A reference (`[alpha]` or `[]`).
  // Includes `referenceMarker` and an optional `referenceString`.
  reference: "reference",
  // A reference marker (`[` or `]`).
  referenceMarker: "referenceMarker",
  // Reference text (`alpha`).
  // Includes string.
  referenceString: "referenceString",
  // A resource (`(https://example.com "alpha")`).
  // Includes `resourceMarker`, an optional `resourceDestination` with an optional
  // `whitespace` and `resourceTitle`.
  resource: "resource",
  // A resource destination (`https://example.com`).
  // Includes `resourceDestinationLiteral` or `resourceDestinationRaw`.
  resourceDestination: "resourceDestination",
  // A literal resource destination (`<https://example.com>`).
  // Includes `resourceDestinationLiteralMarker` and optionally
  // `resourceDestinationString`.
  resourceDestinationLiteral: "resourceDestinationLiteral",
  // A resource destination marker (`<` or `>`).
  resourceDestinationLiteralMarker: "resourceDestinationLiteralMarker",
  // A raw resource destination (`https://example.com`).
  // Includes `resourceDestinationString`.
  resourceDestinationRaw: "resourceDestinationRaw",
  // Resource destination text (`https://example.com`).
  // Includes string.
  resourceDestinationString: "resourceDestinationString",
  // A resource marker (`(` or `)`).
  resourceMarker: "resourceMarker",
  // A resource title (`"alpha"`, `'alpha'`, or `(alpha)`).
  // Includes `resourceTitleMarker` and optionally `resourceTitleString`.
  resourceTitle: "resourceTitle",
  // A resource title marker (`"`, `'`, `(`, or `)`).
  resourceTitleMarker: "resourceTitleMarker",
  // Resource destination title (`alpha`).
  // Includes string.
  resourceTitleString: "resourceTitleString",
  // Whole setext heading:
  //
  // ```markdown
  // alpha
  // bravo
  // =====
  // ```
  //
  // Includes `setextHeadingText`, `lineEnding`, `linePrefix`, and
  // `setextHeadingLine`.
  setextHeading: "setextHeading",
  // Content in a setext heading (`alpha\nbravo`).
  // Includes text.
  setextHeadingText: "setextHeadingText",
  // Underline in a setext heading, including whitespace suffix (`==`).
  // Includes `setextHeadingLineSequence`.
  setextHeadingLine: "setextHeadingLine",
  // Sequence of equals or dash characters in underline in a setext heading (`-`).
  setextHeadingLineSequence: "setextHeadingLineSequence",
  // Strong (`**alpha**`).
  // Includes `strongSequence` and `strongText`.
  strong: "strong",
  // Sequence of strong markers (`**` or `__`).
  strongSequence: "strongSequence",
  // Strong text (`alpha`).
  // Includes text.
  strongText: "strongText",
  // Whole thematic break:
  //
  // ```markdown
  // * * *
  // ```
  //
  // Includes `thematicBreakSequence` and `whitespace`.
  thematicBreak: "thematicBreak",
  // A sequence of one or more thematic break markers (`***`).
  thematicBreakSequence: "thematicBreakSequence",
  // Whole block quote:
  //
  // ```markdown
  // > a
  // >
  // > b
  // ```
  //
  // Includes `blockQuotePrefix` and flow.
  blockQuote: "blockQuote",
  // The `>` or `> ` of a block quote.
  blockQuotePrefix: "blockQuotePrefix",
  // The `>` of a block quote prefix.
  blockQuoteMarker: "blockQuoteMarker",
  // The optional ` ` of a block quote prefix.
  blockQuotePrefixWhitespace: "blockQuotePrefixWhitespace",
  // Whole unordered list:
  //
  // ```markdown
  // - a
  //   b
  // ```
  //
  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
  // lines.
  listOrdered: "listOrdered",
  // Whole ordered list:
  //
  // ```markdown
  // 1. a
  //    b
  // ```
  //
  // Includes `listItemPrefix`, flow, and optionally  `listItemIndent` on further
  // lines.
  listUnordered: "listUnordered",
  // The indent of further list item lines.
  listItemIndent: "listItemIndent",
  // A marker, as in, `*`, `+`, `-`, `.`, or `)`.
  listItemMarker: "listItemMarker",
  // The thing that starts a list item, such as `1. `.
  // Includes `listItemValue` if ordered, `listItemMarker`, and
  // `listItemPrefixWhitespace` (unless followed by a line ending).
  listItemPrefix: "listItemPrefix",
  // The whitespace after a marker.
  listItemPrefixWhitespace: "listItemPrefixWhitespace",
  // The numerical value of an ordered item.
  listItemValue: "listItemValue",
  // Internal types used for subtokenizers, compiled away
  chunkDocument: "chunkDocument",
  chunkContent: "chunkContent",
  chunkFlow: "chunkFlow",
  chunkText: "chunkText",
  chunkString: "chunkString"
};

// node_modules/micromark-core-commonmark/dev/lib/attention.js
var attention = {
  name: "attention",
  tokenize: tokenizeAttention,
  resolveAll: resolveAllAttention
};
function resolveAllAttention(events, context) {
  let index7 = -1;
  let open;
  let group;
  let text10;
  let openingSequence;
  let closingSequence;
  let use;
  let nextEvents;
  let offset3;
  while (++index7 < events.length) {
    if (events[index7][0] === "enter" && events[index7][1].type === "attentionSequence" && events[index7][1]._close) {
      open = index7;
      while (open--) {
        if (events[open][0] === "exit" && events[open][1].type === "attentionSequence" && events[open][1]._open && // If the markers are the same:
        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index7][1]).charCodeAt(0)) {
          if ((events[open][1]._close || events[index7][1]._open) && (events[index7][1].end.offset - events[index7][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index7][1].end.offset - events[index7][1].start.offset) % 3)) {
            continue;
          }
          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index7][1].end.offset - events[index7][1].start.offset > 1 ? 2 : 1;
          const start2 = Object.assign({}, events[open][1].end);
          const end2 = Object.assign({}, events[index7][1].start);
          movePoint(start2, -use);
          movePoint(end2, use);
          openingSequence = {
            type: use > 1 ? types.strongSequence : types.emphasisSequence,
            start: start2,
            end: Object.assign({}, events[open][1].end)
          };
          closingSequence = {
            type: use > 1 ? types.strongSequence : types.emphasisSequence,
            start: Object.assign({}, events[index7][1].start),
            end: end2
          };
          text10 = {
            type: use > 1 ? types.strongText : types.emphasisText,
            start: Object.assign({}, events[open][1].end),
            end: Object.assign({}, events[index7][1].start)
          };
          group = {
            type: use > 1 ? types.strong : types.emphasis,
            start: Object.assign({}, openingSequence.start),
            end: Object.assign({}, closingSequence.end)
          };
          events[open][1].end = Object.assign({}, openingSequence.start);
          events[index7][1].start = Object.assign({}, closingSequence.end);
          nextEvents = [];
          if (events[open][1].end.offset - events[open][1].start.offset) {
            nextEvents = push(nextEvents, [
              ["enter", events[open][1], context],
              ["exit", events[open][1], context]
            ]);
          }
          nextEvents = push(nextEvents, [
            ["enter", group, context],
            ["enter", openingSequence, context],
            ["exit", openingSequence, context],
            ["enter", text10, context]
          ]);
          nextEvents = push(
            nextEvents,
            resolveAll(
              context.parser.constructs.insideSpan.null,
              events.slice(open + 1, index7),
              context
            )
          );
          nextEvents = push(nextEvents, [
            ["exit", text10, context],
            ["enter", closingSequence, context],
            ["exit", closingSequence, context],
            ["exit", group, context]
          ]);
          if (events[index7][1].end.offset - events[index7][1].start.offset) {
            offset3 = 2;
            nextEvents = push(nextEvents, [
              ["enter", events[index7][1], context],
              ["exit", events[index7][1], context]
            ]);
          } else {
            offset3 = 0;
          }
          splice(events, open - 1, index7 - open + 3, nextEvents);
          index7 = open + nextEvents.length - offset3 - 2;
          break;
        }
      }
    }
  }
  index7 = -1;
  while (++index7 < events.length) {
    if (events[index7][1].type === "attentionSequence") {
      events[index7][1].type = "data";
    }
  }
  return events;
}
function tokenizeAttention(effects, ok3) {
  const attentionMarkers2 = this.parser.constructs.attentionMarkers.null;
  const previous3 = this.previous;
  const before = classifyCharacter(previous3);
  let marker;
  return start2;
  function start2(code5) {
    ok2(
      code5 === codes.asterisk || code5 === codes.underscore,
      "expected asterisk or underscore"
    );
    effects.enter("attentionSequence");
    marker = code5;
    return sequence(code5);
  }
  function sequence(code5) {
    if (code5 === marker) {
      effects.consume(code5);
      return sequence;
    }
    const token2 = effects.exit("attentionSequence");
    const after = classifyCharacter(code5);
    const open = !after || after === constants2.characterGroupPunctuation && before || attentionMarkers2.includes(code5);
    const close2 = !before || before === constants2.characterGroupPunctuation && after || attentionMarkers2.includes(previous3);
    token2._open = Boolean(
      marker === codes.asterisk ? open : open && (before || !close2)
    );
    token2._close = Boolean(
      marker === codes.asterisk ? close2 : close2 && (after || !open)
    );
    return ok3(code5);
  }
}
function movePoint(point5, offset3) {
  point5.column += offset3;
  point5.offset += offset3;
  point5._bufferIndex += offset3;
}

// node_modules/micromark-core-commonmark/dev/lib/autolink.js
var autolink = { name: "autolink", tokenize: tokenizeAutolink };
function tokenizeAutolink(effects, ok3, nok) {
  let size3 = 1;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.lessThan, "expected `<`");
    effects.enter(types.autolink);
    effects.enter(types.autolinkMarker);
    effects.consume(code5);
    effects.exit(types.autolinkMarker);
    effects.enter(types.autolinkProtocol);
    return open;
  }
  function open(code5) {
    if (asciiAlpha(code5)) {
      effects.consume(code5);
      return schemeOrEmailAtext;
    }
    return asciiAtext(code5) ? emailAtext(code5) : nok(code5);
  }
  function schemeOrEmailAtext(code5) {
    return code5 === codes.plusSign || code5 === codes.dash || code5 === codes.dot || asciiAlphanumeric(code5) ? schemeInsideOrEmailAtext(code5) : emailAtext(code5);
  }
  function schemeInsideOrEmailAtext(code5) {
    if (code5 === codes.colon) {
      effects.consume(code5);
      return urlInside;
    }
    if ((code5 === codes.plusSign || code5 === codes.dash || code5 === codes.dot || asciiAlphanumeric(code5)) && size3++ < constants2.autolinkSchemeSizeMax) {
      effects.consume(code5);
      return schemeInsideOrEmailAtext;
    }
    return emailAtext(code5);
  }
  function urlInside(code5) {
    if (code5 === codes.greaterThan) {
      effects.exit(types.autolinkProtocol);
      return end2(code5);
    }
    if (code5 === codes.eof || code5 === codes.space || code5 === codes.lessThan || asciiControl(code5)) {
      return nok(code5);
    }
    effects.consume(code5);
    return urlInside;
  }
  function emailAtext(code5) {
    if (code5 === codes.atSign) {
      effects.consume(code5);
      size3 = 0;
      return emailAtSignOrDot;
    }
    if (asciiAtext(code5)) {
      effects.consume(code5);
      return emailAtext;
    }
    return nok(code5);
  }
  function emailAtSignOrDot(code5) {
    return asciiAlphanumeric(code5) ? emailLabel(code5) : nok(code5);
  }
  function emailLabel(code5) {
    if (code5 === codes.dot) {
      effects.consume(code5);
      size3 = 0;
      return emailAtSignOrDot;
    }
    if (code5 === codes.greaterThan) {
      effects.exit(types.autolinkProtocol).type = types.autolinkEmail;
      return end2(code5);
    }
    return emailValue(code5);
  }
  function emailValue(code5) {
    if ((code5 === codes.dash || asciiAlphanumeric(code5)) && size3++ < constants2.autolinkDomainSizeMax) {
      effects.consume(code5);
      return code5 === codes.dash ? emailValue : emailLabel;
    }
    return nok(code5);
  }
  function end2(code5) {
    ok2(code5 === codes.greaterThan, "expected `>`");
    effects.enter(types.autolinkMarker);
    effects.consume(code5);
    effects.exit(types.autolinkMarker);
    effects.exit(types.autolink);
    return ok3;
  }
}

// node_modules/micromark-factory-space/dev/index.js
function factorySpace(effects, ok3, type, max5) {
  const limit = max5 ? max5 - 1 : Number.POSITIVE_INFINITY;
  let size3 = 0;
  return start2;
  function start2(code5) {
    if (markdownSpace(code5)) {
      effects.enter(type);
      return prefix5(code5);
    }
    return ok3(code5);
  }
  function prefix5(code5) {
    if (markdownSpace(code5) && size3++ < limit) {
      effects.consume(code5);
      return prefix5;
    }
    effects.exit(type);
    return ok3(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/blank-line.js
var blankLine = { tokenize: tokenizeBlankLine, partial: true };
function tokenizeBlankLine(effects, ok3, nok) {
  return factorySpace(effects, afterWhitespace, types.linePrefix);
  function afterWhitespace(code5) {
    return code5 === codes.eof || markdownLineEnding(code5) ? ok3(code5) : nok(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/block-quote.js
var blockQuote = {
  name: "blockQuote",
  tokenize: tokenizeBlockQuoteStart,
  continuation: { tokenize: tokenizeBlockQuoteContinuation },
  exit
};
function tokenizeBlockQuoteStart(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code5) {
    if (code5 === codes.greaterThan) {
      const state = self2.containerState;
      ok2(state, "expected `containerState` to be defined in container");
      if (!state.open) {
        effects.enter(types.blockQuote, { _container: true });
        state.open = true;
      }
      effects.enter(types.blockQuotePrefix);
      effects.enter(types.blockQuoteMarker);
      effects.consume(code5);
      effects.exit(types.blockQuoteMarker);
      return after;
    }
    return nok(code5);
  }
  function after(code5) {
    if (markdownSpace(code5)) {
      effects.enter(types.blockQuotePrefixWhitespace);
      effects.consume(code5);
      effects.exit(types.blockQuotePrefixWhitespace);
      effects.exit(types.blockQuotePrefix);
      return ok3;
    }
    effects.exit(types.blockQuotePrefix);
    return ok3(code5);
  }
}
function tokenizeBlockQuoteContinuation(effects, ok3, nok) {
  return factorySpace(
    effects,
    effects.attempt(blockQuote, ok3, nok),
    types.linePrefix,
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants2.tabSize
  );
}
function exit(effects) {
  effects.exit(types.blockQuote);
}

// node_modules/micromark-core-commonmark/dev/lib/character-escape.js
var characterEscape = {
  name: "characterEscape",
  tokenize: tokenizeCharacterEscape
};
function tokenizeCharacterEscape(effects, ok3, nok) {
  return start2;
  function start2(code5) {
    ok2(code5 === codes.backslash, "expected `\\`");
    effects.enter(types.characterEscape);
    effects.enter(types.escapeMarker);
    effects.consume(code5);
    effects.exit(types.escapeMarker);
    return open;
  }
  function open(code5) {
    if (asciiPunctuation(code5)) {
      effects.enter(types.characterEscapeValue);
      effects.consume(code5);
      effects.exit(types.characterEscapeValue);
      effects.exit(types.characterEscape);
      return ok3;
    }
    return nok(code5);
  }
}

// node_modules/decode-named-character-reference/index.dom.js
var element4 = document.createElement("i");
function decodeNamedCharacterReference(value) {
  const characterReference2 = "&" + value + ";";
  element4.innerHTML = characterReference2;
  const char2 = element4.textContent;
  if (char2.charCodeAt(char2.length - 1) === 59 && value !== "semi") {
    return false;
  }
  return char2 === characterReference2 ? false : char2;
}

// node_modules/micromark-core-commonmark/dev/lib/character-reference.js
var characterReference = {
  name: "characterReference",
  tokenize: tokenizeCharacterReference
};
function tokenizeCharacterReference(effects, ok3, nok) {
  const self2 = this;
  let size3 = 0;
  let max5;
  let test2;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.ampersand, "expected `&`");
    effects.enter(types.characterReference);
    effects.enter(types.characterReferenceMarker);
    effects.consume(code5);
    effects.exit(types.characterReferenceMarker);
    return open;
  }
  function open(code5) {
    if (code5 === codes.numberSign) {
      effects.enter(types.characterReferenceMarkerNumeric);
      effects.consume(code5);
      effects.exit(types.characterReferenceMarkerNumeric);
      return numeric2;
    }
    effects.enter(types.characterReferenceValue);
    max5 = constants2.characterReferenceNamedSizeMax;
    test2 = asciiAlphanumeric;
    return value(code5);
  }
  function numeric2(code5) {
    if (code5 === codes.uppercaseX || code5 === codes.lowercaseX) {
      effects.enter(types.characterReferenceMarkerHexadecimal);
      effects.consume(code5);
      effects.exit(types.characterReferenceMarkerHexadecimal);
      effects.enter(types.characterReferenceValue);
      max5 = constants2.characterReferenceHexadecimalSizeMax;
      test2 = asciiHexDigit;
      return value;
    }
    effects.enter(types.characterReferenceValue);
    max5 = constants2.characterReferenceDecimalSizeMax;
    test2 = asciiDigit;
    return value(code5);
  }
  function value(code5) {
    let token2;
    if (code5 === codes.semicolon && size3) {
      token2 = effects.exit(types.characterReferenceValue);
      if (test2 === asciiAlphanumeric && !decodeNamedCharacterReference(self2.sliceSerialize(token2))) {
        return nok(code5);
      }
      effects.enter(types.characterReferenceMarker);
      effects.consume(code5);
      effects.exit(types.characterReferenceMarker);
      effects.exit(types.characterReference);
      return ok3;
    }
    if (test2(code5) && size3++ < max5) {
      effects.consume(code5);
      return value;
    }
    return nok(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-fenced.js
var codeFenced = {
  name: "codeFenced",
  tokenize: tokenizeCodeFenced,
  concrete: true
};
function tokenizeCodeFenced(effects, ok3, nok) {
  const self2 = this;
  const closingFenceConstruct = { tokenize: tokenizeClosingFence, partial: true };
  const nonLazyLine = { tokenize: tokenizeNonLazyLine, partial: true };
  const tail = this.events[this.events.length - 1];
  const initialPrefix = tail && tail[1].type === types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let sizeOpen = 0;
  let marker;
  return start2;
  function start2(code5) {
    ok2(
      code5 === codes.graveAccent || code5 === codes.tilde,
      "expected `` ` `` or `~`"
    );
    effects.enter(types.codeFenced);
    effects.enter(types.codeFencedFence);
    effects.enter(types.codeFencedFenceSequence);
    marker = code5;
    return sequenceOpen(code5);
  }
  function sequenceOpen(code5) {
    if (code5 === marker) {
      effects.consume(code5);
      sizeOpen++;
      return sequenceOpen;
    }
    effects.exit(types.codeFencedFenceSequence);
    return sizeOpen < constants2.codeFencedSequenceSizeMin ? nok(code5) : factorySpace(effects, infoOpen, types.whitespace)(code5);
  }
  function infoOpen(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      return openAfter(code5);
    }
    effects.enter(types.codeFencedFenceInfo);
    effects.enter(types.chunkString, { contentType: constants2.contentTypeString });
    return info(code5);
  }
  function info(code5) {
    if (code5 === codes.eof || markdownLineEndingOrSpace(code5)) {
      effects.exit(types.chunkString);
      effects.exit(types.codeFencedFenceInfo);
      return factorySpace(effects, infoAfter, types.whitespace)(code5);
    }
    if (code5 === codes.graveAccent && code5 === marker)
      return nok(code5);
    effects.consume(code5);
    return info;
  }
  function infoAfter(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      return openAfter(code5);
    }
    effects.enter(types.codeFencedFenceMeta);
    effects.enter(types.chunkString, { contentType: constants2.contentTypeString });
    return meta2(code5);
  }
  function meta2(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit(types.chunkString);
      effects.exit(types.codeFencedFenceMeta);
      return openAfter(code5);
    }
    if (code5 === codes.graveAccent && code5 === marker)
      return nok(code5);
    effects.consume(code5);
    return meta2;
  }
  function openAfter(code5) {
    effects.exit(types.codeFencedFence);
    return self2.interrupt ? ok3(code5) : contentStart(code5);
  }
  function contentStart(code5) {
    if (code5 === codes.eof) {
      return after(code5);
    }
    if (markdownLineEnding(code5)) {
      return effects.attempt(
        nonLazyLine,
        effects.attempt(
          closingFenceConstruct,
          after,
          initialPrefix ? factorySpace(
            effects,
            contentStart,
            types.linePrefix,
            initialPrefix + 1
          ) : contentStart
        ),
        after
      )(code5);
    }
    effects.enter(types.codeFlowValue);
    return contentContinue(code5);
  }
  function contentContinue(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit(types.codeFlowValue);
      return contentStart(code5);
    }
    effects.consume(code5);
    return contentContinue;
  }
  function after(code5) {
    effects.exit(types.codeFenced);
    return ok3(code5);
  }
  function tokenizeNonLazyLine(effects2, ok4, nok2) {
    const self3 = this;
    return start3;
    function start3(code5) {
      ok2(markdownLineEnding(code5), "expected eol");
      effects2.enter(types.lineEnding);
      effects2.consume(code5);
      effects2.exit(types.lineEnding);
      return lineStart;
    }
    function lineStart(code5) {
      return self3.parser.lazy[self3.now().line] ? nok2(code5) : ok4(code5);
    }
  }
  function tokenizeClosingFence(effects2, ok4, nok2) {
    let size3 = 0;
    return factorySpace(
      effects2,
      closingSequenceStart,
      types.linePrefix,
      this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants2.tabSize
    );
    function closingSequenceStart(code5) {
      effects2.enter(types.codeFencedFence);
      effects2.enter(types.codeFencedFenceSequence);
      return closingSequence(code5);
    }
    function closingSequence(code5) {
      if (code5 === marker) {
        effects2.consume(code5);
        size3++;
        return closingSequence;
      }
      if (size3 < sizeOpen)
        return nok2(code5);
      effects2.exit(types.codeFencedFenceSequence);
      return factorySpace(effects2, closingSequenceEnd, types.whitespace)(code5);
    }
    function closingSequenceEnd(code5) {
      if (code5 === codes.eof || markdownLineEnding(code5)) {
        effects2.exit(types.codeFencedFence);
        return ok4(code5);
      }
      return nok2(code5);
    }
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-indented.js
var codeIndented = {
  name: "codeIndented",
  tokenize: tokenizeCodeIndented
};
var indentedContent = { tokenize: tokenizeIndentedContent, partial: true };
function tokenizeCodeIndented(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code5) {
    effects.enter(types.codeIndented);
    return factorySpace(
      effects,
      afterStartPrefix,
      types.linePrefix,
      constants2.tabSize + 1
    )(code5);
  }
  function afterStartPrefix(code5) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants2.tabSize ? afterPrefix(code5) : nok(code5);
  }
  function afterPrefix(code5) {
    if (code5 === codes.eof) {
      return after(code5);
    }
    if (markdownLineEnding(code5)) {
      return effects.attempt(indentedContent, afterPrefix, after)(code5);
    }
    effects.enter(types.codeFlowValue);
    return content5(code5);
  }
  function content5(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit(types.codeFlowValue);
      return afterPrefix(code5);
    }
    effects.consume(code5);
    return content5;
  }
  function after(code5) {
    effects.exit(types.codeIndented);
    return ok3(code5);
  }
}
function tokenizeIndentedContent(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code5) {
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code5);
    }
    if (markdownLineEnding(code5)) {
      effects.enter(types.lineEnding);
      effects.consume(code5);
      effects.exit(types.lineEnding);
      return start2;
    }
    return factorySpace(
      effects,
      afterPrefix,
      types.linePrefix,
      constants2.tabSize + 1
    )(code5);
  }
  function afterPrefix(code5) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants2.tabSize ? ok3(code5) : markdownLineEnding(code5) ? start2(code5) : nok(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/code-text.js
var codeText = {
  name: "codeText",
  tokenize: tokenizeCodeText,
  resolve: resolveCodeText,
  previous
};
function resolveCodeText(events) {
  let tailExitIndex = events.length - 4;
  let headEnterIndex = 3;
  let index7;
  let enter2;
  if ((events[headEnterIndex][1].type === types.lineEnding || events[headEnterIndex][1].type === "space") && (events[tailExitIndex][1].type === types.lineEnding || events[tailExitIndex][1].type === "space")) {
    index7 = headEnterIndex;
    while (++index7 < tailExitIndex) {
      if (events[index7][1].type === types.codeTextData) {
        events[headEnterIndex][1].type = types.codeTextPadding;
        events[tailExitIndex][1].type = types.codeTextPadding;
        headEnterIndex += 2;
        tailExitIndex -= 2;
        break;
      }
    }
  }
  index7 = headEnterIndex - 1;
  tailExitIndex++;
  while (++index7 <= tailExitIndex) {
    if (enter2 === void 0) {
      if (index7 !== tailExitIndex && events[index7][1].type !== types.lineEnding) {
        enter2 = index7;
      }
    } else if (index7 === tailExitIndex || events[index7][1].type === types.lineEnding) {
      events[enter2][1].type = types.codeTextData;
      if (index7 !== enter2 + 2) {
        events[enter2][1].end = events[index7 - 1][1].end;
        events.splice(enter2 + 2, index7 - enter2 - 2);
        tailExitIndex -= index7 - enter2 - 2;
        index7 = enter2 + 2;
      }
      enter2 = void 0;
    }
  }
  return events;
}
function previous(code5) {
  return code5 !== codes.graveAccent || this.events[this.events.length - 1][1].type === types.characterEscape;
}
function tokenizeCodeText(effects, ok3, nok) {
  const self2 = this;
  let sizeOpen = 0;
  let size3;
  let token2;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.graveAccent, "expected `` ` ``");
    ok2(previous.call(self2, self2.previous), "expected correct previous");
    effects.enter(types.codeText);
    effects.enter(types.codeTextSequence);
    return openingSequence(code5);
  }
  function openingSequence(code5) {
    if (code5 === codes.graveAccent) {
      effects.consume(code5);
      sizeOpen++;
      return openingSequence;
    }
    effects.exit(types.codeTextSequence);
    return gap(code5);
  }
  function gap(code5) {
    if (code5 === codes.eof) {
      return nok(code5);
    }
    if (code5 === codes.graveAccent) {
      token2 = effects.enter(types.codeTextSequence);
      size3 = 0;
      return closingSequence(code5);
    }
    if (code5 === codes.space) {
      effects.enter("space");
      effects.consume(code5);
      effects.exit("space");
      return gap;
    }
    if (markdownLineEnding(code5)) {
      effects.enter(types.lineEnding);
      effects.consume(code5);
      effects.exit(types.lineEnding);
      return gap;
    }
    effects.enter(types.codeTextData);
    return data(code5);
  }
  function data(code5) {
    if (code5 === codes.eof || code5 === codes.space || code5 === codes.graveAccent || markdownLineEnding(code5)) {
      effects.exit(types.codeTextData);
      return gap(code5);
    }
    effects.consume(code5);
    return data;
  }
  function closingSequence(code5) {
    if (code5 === codes.graveAccent) {
      effects.consume(code5);
      size3++;
      return closingSequence;
    }
    if (size3 === sizeOpen) {
      effects.exit(types.codeTextSequence);
      effects.exit(types.codeText);
      return ok3(code5);
    }
    token2.type = types.codeTextData;
    return data(code5);
  }
}

// node_modules/micromark-util-subtokenize/dev/index.js
function subtokenize(events) {
  const jumps = {};
  let index7 = -1;
  let event;
  let lineIndex;
  let otherIndex;
  let otherEvent;
  let parameters;
  let subevents;
  let more;
  while (++index7 < events.length) {
    while (index7 in jumps) {
      index7 = jumps[index7];
    }
    event = events[index7];
    if (index7 && event[1].type === types.chunkFlow && events[index7 - 1][1].type === types.listItemPrefix) {
      ok2(event[1]._tokenizer, "expected `_tokenizer` on subtokens");
      subevents = event[1]._tokenizer.events;
      otherIndex = 0;
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === types.lineEndingBlank) {
        otherIndex += 2;
      }
      if (otherIndex < subevents.length && subevents[otherIndex][1].type === types.content) {
        while (++otherIndex < subevents.length) {
          if (subevents[otherIndex][1].type === types.content) {
            break;
          }
          if (subevents[otherIndex][1].type === types.chunkText) {
            subevents[otherIndex][1]._isInFirstContentOfListItem = true;
            otherIndex++;
          }
        }
      }
    }
    if (event[0] === "enter") {
      if (event[1].contentType) {
        Object.assign(jumps, subcontent(events, index7));
        index7 = jumps[index7];
        more = true;
      }
    } else if (event[1]._container) {
      otherIndex = index7;
      lineIndex = void 0;
      while (otherIndex--) {
        otherEvent = events[otherIndex];
        if (otherEvent[1].type === types.lineEnding || otherEvent[1].type === types.lineEndingBlank) {
          if (otherEvent[0] === "enter") {
            if (lineIndex) {
              events[lineIndex][1].type = types.lineEndingBlank;
            }
            otherEvent[1].type = types.lineEnding;
            lineIndex = otherIndex;
          }
        } else {
          break;
        }
      }
      if (lineIndex) {
        event[1].end = Object.assign({}, events[lineIndex][1].start);
        parameters = events.slice(lineIndex, index7);
        parameters.unshift(event);
        splice(events, lineIndex, index7 - lineIndex + 1, parameters);
      }
    }
  }
  return !more;
}
function subcontent(events, eventIndex) {
  const token2 = events[eventIndex][1];
  const context = events[eventIndex][2];
  let startPosition = eventIndex - 1;
  const startPositions = [];
  ok2(token2.contentType, "expected `contentType` on subtokens");
  const tokenizer = token2._tokenizer || context.parser[token2.contentType](token2.start);
  const childEvents = tokenizer.events;
  const jumps = [];
  const gaps = {};
  let stream;
  let previous3;
  let index7 = -1;
  let current = token2;
  let adjust = 0;
  let start2 = 0;
  const breaks = [start2];
  while (current) {
    while (events[++startPosition][1] !== current) {
    }
    ok2(
      !previous3 || current.previous === previous3,
      "expected previous to match"
    );
    ok2(!previous3 || previous3.next === current, "expected next to match");
    startPositions.push(startPosition);
    if (!current._tokenizer) {
      stream = context.sliceStream(current);
      if (!current.next) {
        stream.push(codes.eof);
      }
      if (previous3) {
        tokenizer.defineSkip(current.start);
      }
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = true;
      }
      tokenizer.write(stream);
      if (current._isInFirstContentOfListItem) {
        tokenizer._gfmTasklistFirstContentOfListItem = void 0;
      }
    }
    previous3 = current;
    current = current.next;
  }
  current = token2;
  while (++index7 < childEvents.length) {
    if (
      // Find a void token that includes a break.
      childEvents[index7][0] === "exit" && childEvents[index7 - 1][0] === "enter" && childEvents[index7][1].type === childEvents[index7 - 1][1].type && childEvents[index7][1].start.line !== childEvents[index7][1].end.line
    ) {
      ok2(current, "expected a current token");
      start2 = index7 + 1;
      breaks.push(start2);
      current._tokenizer = void 0;
      current.previous = void 0;
      current = current.next;
    }
  }
  tokenizer.events = [];
  if (current) {
    current._tokenizer = void 0;
    current.previous = void 0;
    ok2(!current.next, "expected no next token");
  } else {
    breaks.pop();
  }
  index7 = breaks.length;
  while (index7--) {
    const slice3 = childEvents.slice(breaks[index7], breaks[index7 + 1]);
    const start3 = startPositions.pop();
    ok2(start3 !== void 0, "expected a start position when splicing");
    jumps.unshift([start3, start3 + slice3.length - 1]);
    splice(events, start3, 2, slice3);
  }
  index7 = -1;
  while (++index7 < jumps.length) {
    gaps[adjust + jumps[index7][0]] = adjust + jumps[index7][1];
    adjust += jumps[index7][1] - jumps[index7][0] - 1;
  }
  return gaps;
}

// node_modules/micromark-core-commonmark/dev/lib/content.js
var content3 = { tokenize: tokenizeContent, resolve: resolveContent };
var continuationConstruct = { tokenize: tokenizeContinuation, partial: true };
function resolveContent(events) {
  subtokenize(events);
  return events;
}
function tokenizeContent(effects, ok3) {
  let previous3;
  return start2;
  function start2(code5) {
    ok2(
      code5 !== codes.eof && !markdownLineEnding(code5),
      "expected no eof or eol"
    );
    effects.enter(types.content);
    previous3 = effects.enter(types.chunkContent, {
      contentType: constants2.contentTypeContent
    });
    return data(code5);
  }
  function data(code5) {
    if (code5 === codes.eof) {
      return contentEnd(code5);
    }
    if (markdownLineEnding(code5)) {
      return effects.check(
        continuationConstruct,
        contentContinue,
        contentEnd
      )(code5);
    }
    effects.consume(code5);
    return data;
  }
  function contentEnd(code5) {
    effects.exit(types.chunkContent);
    effects.exit(types.content);
    return ok3(code5);
  }
  function contentContinue(code5) {
    ok2(markdownLineEnding(code5), "expected eol");
    effects.consume(code5);
    effects.exit(types.chunkContent);
    previous3.next = effects.enter(types.chunkContent, {
      contentType: constants2.contentTypeContent,
      previous: previous3
    });
    previous3 = previous3.next;
    return data;
  }
}
function tokenizeContinuation(effects, ok3, nok) {
  const self2 = this;
  return startLookahead;
  function startLookahead(code5) {
    ok2(markdownLineEnding(code5), "expected a line ending");
    effects.exit(types.chunkContent);
    effects.enter(types.lineEnding);
    effects.consume(code5);
    effects.exit(types.lineEnding);
    return factorySpace(effects, prefixed, types.linePrefix);
  }
  function prefixed(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      return nok(code5);
    }
    const tail = self2.events[self2.events.length - 1];
    if (!self2.parser.constructs.disable.null.includes("codeIndented") && tail && tail[1].type === types.linePrefix && tail[2].sliceSerialize(tail[1], true).length >= constants2.tabSize) {
      return ok3(code5);
    }
    return effects.interrupt(self2.parser.constructs.flow, nok, ok3)(code5);
  }
}

// node_modules/micromark-factory-destination/dev/index.js
function factoryDestination(effects, ok3, nok, type, literalType, literalMarkerType, rawType, stringType, max5) {
  const limit = max5 || Number.POSITIVE_INFINITY;
  let balance = 0;
  return start2;
  function start2(code5) {
    if (code5 === codes.lessThan) {
      effects.enter(type);
      effects.enter(literalType);
      effects.enter(literalMarkerType);
      effects.consume(code5);
      effects.exit(literalMarkerType);
      return destinationEnclosedBefore;
    }
    if (code5 === codes.eof || code5 === codes.rightParenthesis || asciiControl(code5)) {
      return nok(code5);
    }
    effects.enter(type);
    effects.enter(rawType);
    effects.enter(stringType);
    effects.enter(types.chunkString, { contentType: constants2.contentTypeString });
    return destinationRaw(code5);
  }
  function destinationEnclosedBefore(code5) {
    if (code5 === codes.greaterThan) {
      effects.enter(literalMarkerType);
      effects.consume(code5);
      effects.exit(literalMarkerType);
      effects.exit(literalType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    effects.enter(types.chunkString, { contentType: constants2.contentTypeString });
    return destinationEnclosed(code5);
  }
  function destinationEnclosed(code5) {
    if (code5 === codes.greaterThan) {
      effects.exit(types.chunkString);
      effects.exit(stringType);
      return destinationEnclosedBefore(code5);
    }
    if (code5 === codes.eof || code5 === codes.lessThan || markdownLineEnding(code5)) {
      return nok(code5);
    }
    effects.consume(code5);
    return code5 === codes.backslash ? destinationEnclosedEscape : destinationEnclosed;
  }
  function destinationEnclosedEscape(code5) {
    if (code5 === codes.lessThan || code5 === codes.greaterThan || code5 === codes.backslash) {
      effects.consume(code5);
      return destinationEnclosed;
    }
    return destinationEnclosed(code5);
  }
  function destinationRaw(code5) {
    if (code5 === codes.leftParenthesis) {
      if (++balance > limit)
        return nok(code5);
      effects.consume(code5);
      return destinationRaw;
    }
    if (code5 === codes.rightParenthesis) {
      if (!balance--) {
        effects.exit(types.chunkString);
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok3(code5);
      }
      effects.consume(code5);
      return destinationRaw;
    }
    if (code5 === codes.eof || markdownLineEndingOrSpace(code5)) {
      if (balance)
        return nok(code5);
      effects.exit(types.chunkString);
      effects.exit(stringType);
      effects.exit(rawType);
      effects.exit(type);
      return ok3(code5);
    }
    if (asciiControl(code5))
      return nok(code5);
    effects.consume(code5);
    return code5 === codes.backslash ? destinationRawEscape : destinationRaw;
  }
  function destinationRawEscape(code5) {
    if (code5 === codes.leftParenthesis || code5 === codes.rightParenthesis || code5 === codes.backslash) {
      effects.consume(code5);
      return destinationRaw;
    }
    return destinationRaw(code5);
  }
}

// node_modules/micromark-factory-label/dev/index.js
function factoryLabel(effects, ok3, nok, type, markerType, stringType) {
  const self2 = this;
  let size3 = 0;
  let data;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.leftSquareBracket, "expected `[`");
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code5);
    effects.exit(markerType);
    effects.enter(stringType);
    return atBreak;
  }
  function atBreak(code5) {
    if (code5 === codes.eof || code5 === codes.leftSquareBracket || code5 === codes.rightSquareBracket && !data || /* To do: remove in the future once we’ve switched from
     * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
     * which doesn’t need this */
    /* Hidden footnotes hook */
    /* c8 ignore next 3 */
    code5 === codes.caret && !size3 && "_hiddenFootnoteSupport" in self2.parser.constructs || size3 > constants2.linkReferenceSizeMax) {
      return nok(code5);
    }
    if (code5 === codes.rightSquareBracket) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code5);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    if (markdownLineEnding(code5)) {
      effects.enter(types.lineEnding);
      effects.consume(code5);
      effects.exit(types.lineEnding);
      return atBreak;
    }
    effects.enter(types.chunkString, { contentType: constants2.contentTypeString });
    return label(code5);
  }
  function label(code5) {
    if (code5 === codes.eof || code5 === codes.leftSquareBracket || code5 === codes.rightSquareBracket || markdownLineEnding(code5) || size3++ > constants2.linkReferenceSizeMax) {
      effects.exit(types.chunkString);
      return atBreak(code5);
    }
    effects.consume(code5);
    data = data || !markdownSpace(code5);
    return code5 === codes.backslash ? labelEscape : label;
  }
  function labelEscape(code5) {
    if (code5 === codes.leftSquareBracket || code5 === codes.backslash || code5 === codes.rightSquareBracket) {
      effects.consume(code5);
      size3++;
      return label;
    }
    return label(code5);
  }
}

// node_modules/micromark-factory-title/dev/index.js
function factoryTitle(effects, ok3, nok, type, markerType, stringType) {
  let marker;
  return start2;
  function start2(code5) {
    ok2(
      code5 === codes.quotationMark || code5 === codes.apostrophe || code5 === codes.leftParenthesis,
      "expected `\"`, `'`, or `(`"
    );
    effects.enter(type);
    effects.enter(markerType);
    effects.consume(code5);
    effects.exit(markerType);
    marker = code5 === codes.leftParenthesis ? codes.rightParenthesis : code5;
    return atFirstTitleBreak;
  }
  function atFirstTitleBreak(code5) {
    if (code5 === marker) {
      effects.enter(markerType);
      effects.consume(code5);
      effects.exit(markerType);
      effects.exit(type);
      return ok3;
    }
    effects.enter(stringType);
    return atTitleBreak(code5);
  }
  function atTitleBreak(code5) {
    if (code5 === marker) {
      effects.exit(stringType);
      return atFirstTitleBreak(marker);
    }
    if (code5 === codes.eof) {
      return nok(code5);
    }
    if (markdownLineEnding(code5)) {
      effects.enter(types.lineEnding);
      effects.consume(code5);
      effects.exit(types.lineEnding);
      return factorySpace(effects, atTitleBreak, types.linePrefix);
    }
    effects.enter(types.chunkString, { contentType: constants2.contentTypeString });
    return title(code5);
  }
  function title(code5) {
    if (code5 === marker || code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit(types.chunkString);
      return atTitleBreak(code5);
    }
    effects.consume(code5);
    return code5 === codes.backslash ? titleEscape : title;
  }
  function titleEscape(code5) {
    if (code5 === marker || code5 === codes.backslash) {
      effects.consume(code5);
      return title;
    }
    return title(code5);
  }
}

// node_modules/micromark-factory-whitespace/dev/index.js
function factoryWhitespace(effects, ok3) {
  let seen;
  return start2;
  function start2(code5) {
    if (markdownLineEnding(code5)) {
      effects.enter(types.lineEnding);
      effects.consume(code5);
      effects.exit(types.lineEnding);
      seen = true;
      return start2;
    }
    if (markdownSpace(code5)) {
      return factorySpace(
        effects,
        start2,
        seen ? types.linePrefix : types.lineSuffix
      )(code5);
    }
    return ok3(code5);
  }
}

// node_modules/micromark-util-normalize-identifier/dev/index.js
function normalizeIdentifier(value) {
  return value.replace(/[\t\n\r ]+/g, values.space).replace(/^ | $/g, "").toLowerCase().toUpperCase();
}

// node_modules/micromark-core-commonmark/dev/lib/definition.js
var definition = { name: "definition", tokenize: tokenizeDefinition };
var titleConstruct = { tokenize: tokenizeTitle, partial: true };
function tokenizeDefinition(effects, ok3, nok) {
  const self2 = this;
  let identifier3;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.leftSquareBracket, "expected `[`");
    effects.enter(types.definition);
    return factoryLabel.call(
      self2,
      effects,
      labelAfter,
      nok,
      types.definitionLabel,
      types.definitionLabelMarker,
      types.definitionLabelString
    )(code5);
  }
  function labelAfter(code5) {
    identifier3 = normalizeIdentifier(
      self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
    );
    if (code5 === codes.colon) {
      effects.enter(types.definitionMarker);
      effects.consume(code5);
      effects.exit(types.definitionMarker);
      return factoryWhitespace(
        effects,
        factoryDestination(
          effects,
          effects.attempt(
            titleConstruct,
            factorySpace(effects, after, types.whitespace),
            factorySpace(effects, after, types.whitespace)
          ),
          nok,
          types.definitionDestination,
          types.definitionDestinationLiteral,
          types.definitionDestinationLiteralMarker,
          types.definitionDestinationRaw,
          types.definitionDestinationString
        )
      );
    }
    return nok(code5);
  }
  function after(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit(types.definition);
      if (!self2.parser.defined.includes(identifier3)) {
        self2.parser.defined.push(identifier3);
      }
      return ok3(code5);
    }
    return nok(code5);
  }
}
function tokenizeTitle(effects, ok3, nok) {
  return start2;
  function start2(code5) {
    return markdownLineEndingOrSpace(code5) ? factoryWhitespace(effects, before)(code5) : nok(code5);
  }
  function before(code5) {
    if (code5 === codes.quotationMark || code5 === codes.apostrophe || code5 === codes.leftParenthesis) {
      return factoryTitle(
        effects,
        factorySpace(effects, after, types.whitespace),
        nok,
        types.definitionTitle,
        types.definitionTitleMarker,
        types.definitionTitleString
      )(code5);
    }
    return nok(code5);
  }
  function after(code5) {
    return code5 === codes.eof || markdownLineEnding(code5) ? ok3(code5) : nok(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/hard-break-escape.js
var hardBreakEscape = {
  name: "hardBreakEscape",
  tokenize: tokenizeHardBreakEscape
};
function tokenizeHardBreakEscape(effects, ok3, nok) {
  return start2;
  function start2(code5) {
    ok2(code5 === codes.backslash, "expected `\\`");
    effects.enter(types.hardBreakEscape);
    effects.enter(types.escapeMarker);
    effects.consume(code5);
    return open;
  }
  function open(code5) {
    if (markdownLineEnding(code5)) {
      effects.exit(types.escapeMarker);
      effects.exit(types.hardBreakEscape);
      return ok3(code5);
    }
    return nok(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/heading-atx.js
var headingAtx = {
  name: "headingAtx",
  tokenize: tokenizeHeadingAtx,
  resolve: resolveHeadingAtx
};
function resolveHeadingAtx(events, context) {
  let contentEnd = events.length - 2;
  let contentStart = 3;
  let content5;
  let text10;
  if (events[contentStart][1].type === types.whitespace) {
    contentStart += 2;
  }
  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === types.whitespace) {
    contentEnd -= 2;
  }
  if (events[contentEnd][1].type === types.atxHeadingSequence && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === types.whitespace)) {
    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
  }
  if (contentEnd > contentStart) {
    content5 = {
      type: types.atxHeadingText,
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end
    };
    text10 = {
      type: types.chunkText,
      start: events[contentStart][1].start,
      end: events[contentEnd][1].end,
      // @ts-expect-error Constants are fine to assign.
      contentType: constants2.contentTypeText
    };
    splice(events, contentStart, contentEnd - contentStart + 1, [
      ["enter", content5, context],
      ["enter", text10, context],
      ["exit", text10, context],
      ["exit", content5, context]
    ]);
  }
  return events;
}
function tokenizeHeadingAtx(effects, ok3, nok) {
  const self2 = this;
  let size3 = 0;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.numberSign, "expected `#`");
    effects.enter(types.atxHeading);
    effects.enter(types.atxHeadingSequence);
    return fenceOpenInside(code5);
  }
  function fenceOpenInside(code5) {
    if (code5 === codes.numberSign && size3++ < constants2.atxHeadingOpeningFenceSizeMax) {
      effects.consume(code5);
      return fenceOpenInside;
    }
    if (code5 === codes.eof || markdownLineEndingOrSpace(code5)) {
      effects.exit(types.atxHeadingSequence);
      return self2.interrupt ? ok3(code5) : headingBreak(code5);
    }
    return nok(code5);
  }
  function headingBreak(code5) {
    if (code5 === codes.numberSign) {
      effects.enter(types.atxHeadingSequence);
      return sequence(code5);
    }
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit(types.atxHeading);
      return ok3(code5);
    }
    if (markdownSpace(code5)) {
      return factorySpace(effects, headingBreak, types.whitespace)(code5);
    }
    effects.enter(types.atxHeadingText);
    return data(code5);
  }
  function sequence(code5) {
    if (code5 === codes.numberSign) {
      effects.consume(code5);
      return sequence;
    }
    effects.exit(types.atxHeadingSequence);
    return headingBreak(code5);
  }
  function data(code5) {
    if (code5 === codes.eof || code5 === codes.numberSign || markdownLineEndingOrSpace(code5)) {
      effects.exit(types.atxHeadingText);
      return headingBreak(code5);
    }
    effects.consume(code5);
    return data;
  }
}

// node_modules/micromark-util-html-tag-name/index.js
var htmlBlockNames = [
  "address",
  "article",
  "aside",
  "base",
  "basefont",
  "blockquote",
  "body",
  "caption",
  "center",
  "col",
  "colgroup",
  "dd",
  "details",
  "dialog",
  "dir",
  "div",
  "dl",
  "dt",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "frame",
  "frameset",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hr",
  "html",
  "iframe",
  "legend",
  "li",
  "link",
  "main",
  "menu",
  "menuitem",
  "nav",
  "noframes",
  "ol",
  "optgroup",
  "option",
  "p",
  "param",
  "section",
  "summary",
  "table",
  "tbody",
  "td",
  "tfoot",
  "th",
  "thead",
  "title",
  "tr",
  "track",
  "ul"
];
var htmlRawNames = ["pre", "script", "style", "textarea"];

// node_modules/micromark-core-commonmark/dev/lib/html-flow.js
var htmlFlow = {
  name: "htmlFlow",
  tokenize: tokenizeHtmlFlow,
  resolveTo: resolveToHtmlFlow,
  concrete: true
};
var nextBlankConstruct = { tokenize: tokenizeNextBlank, partial: true };
function resolveToHtmlFlow(events) {
  let index7 = events.length;
  while (index7--) {
    if (events[index7][0] === "enter" && events[index7][1].type === types.htmlFlow) {
      break;
    }
  }
  if (index7 > 1 && events[index7 - 2][1].type === types.linePrefix) {
    events[index7][1].start = events[index7 - 2][1].start;
    events[index7 + 1][1].start = events[index7 - 2][1].start;
    events.splice(index7 - 2, 2);
  }
  return events;
}
function tokenizeHtmlFlow(effects, ok3, nok) {
  const self2 = this;
  let kind;
  let startTag;
  let buffer2;
  let index7;
  let marker;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.lessThan, "expected `<`");
    effects.enter(types.htmlFlow);
    effects.enter(types.htmlFlowData);
    effects.consume(code5);
    return open;
  }
  function open(code5) {
    if (code5 === codes.exclamationMark) {
      effects.consume(code5);
      return declarationStart;
    }
    if (code5 === codes.slash) {
      effects.consume(code5);
      return tagCloseStart;
    }
    if (code5 === codes.questionMark) {
      effects.consume(code5);
      kind = constants2.htmlInstruction;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    if (asciiAlpha(code5)) {
      effects.consume(code5);
      buffer2 = String.fromCharCode(code5);
      startTag = true;
      return tagName;
    }
    return nok(code5);
  }
  function declarationStart(code5) {
    if (code5 === codes.dash) {
      effects.consume(code5);
      kind = constants2.htmlComment;
      return commentOpenInside;
    }
    if (code5 === codes.leftSquareBracket) {
      effects.consume(code5);
      kind = constants2.htmlCdata;
      buffer2 = constants2.cdataOpeningString;
      index7 = 0;
      return cdataOpenInside;
    }
    if (asciiAlpha(code5)) {
      effects.consume(code5);
      kind = constants2.htmlDeclaration;
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code5);
  }
  function commentOpenInside(code5) {
    if (code5 === codes.dash) {
      effects.consume(code5);
      return self2.interrupt ? ok3 : continuationDeclarationInside;
    }
    return nok(code5);
  }
  function cdataOpenInside(code5) {
    if (code5 === buffer2.charCodeAt(index7++)) {
      effects.consume(code5);
      return index7 === buffer2.length ? self2.interrupt ? ok3 : continuation : cdataOpenInside;
    }
    return nok(code5);
  }
  function tagCloseStart(code5) {
    if (asciiAlpha(code5)) {
      effects.consume(code5);
      buffer2 = String.fromCharCode(code5);
      return tagName;
    }
    return nok(code5);
  }
  function tagName(code5) {
    if (code5 === codes.eof || code5 === codes.slash || code5 === codes.greaterThan || markdownLineEndingOrSpace(code5)) {
      if (code5 !== codes.slash && startTag && htmlRawNames.includes(buffer2.toLowerCase())) {
        kind = constants2.htmlRaw;
        return self2.interrupt ? ok3(code5) : continuation(code5);
      }
      if (htmlBlockNames.includes(buffer2.toLowerCase())) {
        kind = constants2.htmlBasic;
        if (code5 === codes.slash) {
          effects.consume(code5);
          return basicSelfClosing;
        }
        return self2.interrupt ? ok3(code5) : continuation(code5);
      }
      kind = constants2.htmlComplete;
      return self2.interrupt && !self2.parser.lazy[self2.now().line] ? nok(code5) : startTag ? completeAttributeNameBefore(code5) : completeClosingTagAfter(code5);
    }
    if (code5 === codes.dash || asciiAlphanumeric(code5)) {
      effects.consume(code5);
      buffer2 += String.fromCharCode(code5);
      return tagName;
    }
    return nok(code5);
  }
  function basicSelfClosing(code5) {
    if (code5 === codes.greaterThan) {
      effects.consume(code5);
      return self2.interrupt ? ok3 : continuation;
    }
    return nok(code5);
  }
  function completeClosingTagAfter(code5) {
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return completeClosingTagAfter;
    }
    return completeEnd(code5);
  }
  function completeAttributeNameBefore(code5) {
    if (code5 === codes.slash) {
      effects.consume(code5);
      return completeEnd;
    }
    if (code5 === codes.colon || code5 === codes.underscore || asciiAlpha(code5)) {
      effects.consume(code5);
      return completeAttributeName;
    }
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return completeAttributeNameBefore;
    }
    return completeEnd(code5);
  }
  function completeAttributeName(code5) {
    if (code5 === codes.dash || code5 === codes.dot || code5 === codes.colon || code5 === codes.underscore || asciiAlphanumeric(code5)) {
      effects.consume(code5);
      return completeAttributeName;
    }
    return completeAttributeNameAfter(code5);
  }
  function completeAttributeNameAfter(code5) {
    if (code5 === codes.equalsTo) {
      effects.consume(code5);
      return completeAttributeValueBefore;
    }
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return completeAttributeNameAfter;
    }
    return completeAttributeNameBefore(code5);
  }
  function completeAttributeValueBefore(code5) {
    if (code5 === codes.eof || code5 === codes.lessThan || code5 === codes.equalsTo || code5 === codes.greaterThan || code5 === codes.graveAccent) {
      return nok(code5);
    }
    if (code5 === codes.quotationMark || code5 === codes.apostrophe) {
      effects.consume(code5);
      marker = code5;
      return completeAttributeValueQuoted;
    }
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return completeAttributeValueBefore;
    }
    marker = null;
    return completeAttributeValueUnquoted(code5);
  }
  function completeAttributeValueQuoted(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      return nok(code5);
    }
    if (code5 === marker) {
      effects.consume(code5);
      return completeAttributeValueQuotedAfter;
    }
    effects.consume(code5);
    return completeAttributeValueQuoted;
  }
  function completeAttributeValueUnquoted(code5) {
    if (code5 === codes.eof || code5 === codes.quotationMark || code5 === codes.apostrophe || code5 === codes.lessThan || code5 === codes.equalsTo || code5 === codes.greaterThan || code5 === codes.graveAccent || markdownLineEndingOrSpace(code5)) {
      return completeAttributeNameAfter(code5);
    }
    effects.consume(code5);
    return completeAttributeValueUnquoted;
  }
  function completeAttributeValueQuotedAfter(code5) {
    if (code5 === codes.slash || code5 === codes.greaterThan || markdownSpace(code5)) {
      return completeAttributeNameBefore(code5);
    }
    return nok(code5);
  }
  function completeEnd(code5) {
    if (code5 === codes.greaterThan) {
      effects.consume(code5);
      return completeAfter;
    }
    return nok(code5);
  }
  function completeAfter(code5) {
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return completeAfter;
    }
    return code5 === codes.eof || markdownLineEnding(code5) ? continuation(code5) : nok(code5);
  }
  function continuation(code5) {
    if (code5 === codes.dash && kind === constants2.htmlComment) {
      effects.consume(code5);
      return continuationCommentInside;
    }
    if (code5 === codes.lessThan && kind === constants2.htmlRaw) {
      effects.consume(code5);
      return continuationRawTagOpen;
    }
    if (code5 === codes.greaterThan && kind === constants2.htmlDeclaration) {
      effects.consume(code5);
      return continuationClose;
    }
    if (code5 === codes.questionMark && kind === constants2.htmlInstruction) {
      effects.consume(code5);
      return continuationDeclarationInside;
    }
    if (code5 === codes.rightSquareBracket && kind === constants2.htmlCdata) {
      effects.consume(code5);
      return continuationCharacterDataInside;
    }
    if (markdownLineEnding(code5) && (kind === constants2.htmlBasic || kind === constants2.htmlComplete)) {
      return effects.check(
        nextBlankConstruct,
        continuationClose,
        continuationAtLineEnding
      )(code5);
    }
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      return continuationAtLineEnding(code5);
    }
    effects.consume(code5);
    return continuation;
  }
  function continuationAtLineEnding(code5) {
    effects.exit(types.htmlFlowData);
    return htmlContinueStart(code5);
  }
  function htmlContinueStart(code5) {
    if (code5 === codes.eof) {
      return done(code5);
    }
    if (markdownLineEnding(code5)) {
      return effects.attempt(
        { tokenize: htmlLineEnd, partial: true },
        htmlContinueStart,
        done
      )(code5);
    }
    effects.enter(types.htmlFlowData);
    return continuation(code5);
  }
  function htmlLineEnd(effects2, ok4, nok2) {
    return start3;
    function start3(code5) {
      ok2(markdownLineEnding(code5), "expected eol");
      effects2.enter(types.lineEnding);
      effects2.consume(code5);
      effects2.exit(types.lineEnding);
      return lineStart;
    }
    function lineStart(code5) {
      return self2.parser.lazy[self2.now().line] ? nok2(code5) : ok4(code5);
    }
  }
  function continuationCommentInside(code5) {
    if (code5 === codes.dash) {
      effects.consume(code5);
      return continuationDeclarationInside;
    }
    return continuation(code5);
  }
  function continuationRawTagOpen(code5) {
    if (code5 === codes.slash) {
      effects.consume(code5);
      buffer2 = "";
      return continuationRawEndTag;
    }
    return continuation(code5);
  }
  function continuationRawEndTag(code5) {
    if (code5 === codes.greaterThan && htmlRawNames.includes(buffer2.toLowerCase())) {
      effects.consume(code5);
      return continuationClose;
    }
    if (asciiAlpha(code5) && buffer2.length < constants2.htmlRawSizeMax) {
      effects.consume(code5);
      buffer2 += String.fromCharCode(code5);
      return continuationRawEndTag;
    }
    return continuation(code5);
  }
  function continuationCharacterDataInside(code5) {
    if (code5 === codes.rightSquareBracket) {
      effects.consume(code5);
      return continuationDeclarationInside;
    }
    return continuation(code5);
  }
  function continuationDeclarationInside(code5) {
    if (code5 === codes.greaterThan) {
      effects.consume(code5);
      return continuationClose;
    }
    if (code5 === codes.dash && kind === constants2.htmlComment) {
      effects.consume(code5);
      return continuationDeclarationInside;
    }
    return continuation(code5);
  }
  function continuationClose(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit(types.htmlFlowData);
      return done(code5);
    }
    effects.consume(code5);
    return continuationClose;
  }
  function done(code5) {
    effects.exit(types.htmlFlow);
    return ok3(code5);
  }
}
function tokenizeNextBlank(effects, ok3, nok) {
  return start2;
  function start2(code5) {
    ok2(markdownLineEnding(code5), "expected a line ending");
    effects.exit(types.htmlFlowData);
    effects.enter(types.lineEndingBlank);
    effects.consume(code5);
    effects.exit(types.lineEndingBlank);
    return effects.attempt(blankLine, ok3, nok);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/html-text.js
var htmlText = { name: "htmlText", tokenize: tokenizeHtmlText };
function tokenizeHtmlText(effects, ok3, nok) {
  const self2 = this;
  let marker;
  let buffer2;
  let index7;
  let returnState;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.lessThan, "expected `<`");
    effects.enter(types.htmlText);
    effects.enter(types.htmlTextData);
    effects.consume(code5);
    return open;
  }
  function open(code5) {
    if (code5 === codes.exclamationMark) {
      effects.consume(code5);
      return declarationOpen;
    }
    if (code5 === codes.slash) {
      effects.consume(code5);
      return tagCloseStart;
    }
    if (code5 === codes.questionMark) {
      effects.consume(code5);
      return instruction;
    }
    if (asciiAlpha(code5)) {
      effects.consume(code5);
      return tagOpen;
    }
    return nok(code5);
  }
  function declarationOpen(code5) {
    if (code5 === codes.dash) {
      effects.consume(code5);
      return commentOpen;
    }
    if (code5 === codes.leftSquareBracket) {
      effects.consume(code5);
      buffer2 = constants2.cdataOpeningString;
      index7 = 0;
      return cdataOpen;
    }
    if (asciiAlpha(code5)) {
      effects.consume(code5);
      return declaration2;
    }
    return nok(code5);
  }
  function commentOpen(code5) {
    if (code5 === codes.dash) {
      effects.consume(code5);
      return commentStart;
    }
    return nok(code5);
  }
  function commentStart(code5) {
    if (code5 === codes.eof || code5 === codes.greaterThan) {
      return nok(code5);
    }
    if (code5 === codes.dash) {
      effects.consume(code5);
      return commentStartDash;
    }
    return comment5(code5);
  }
  function commentStartDash(code5) {
    if (code5 === codes.eof || code5 === codes.greaterThan) {
      return nok(code5);
    }
    return comment5(code5);
  }
  function comment5(code5) {
    if (code5 === codes.eof) {
      return nok(code5);
    }
    if (code5 === codes.dash) {
      effects.consume(code5);
      return commentClose;
    }
    if (markdownLineEnding(code5)) {
      returnState = comment5;
      return atLineEnding(code5);
    }
    effects.consume(code5);
    return comment5;
  }
  function commentClose(code5) {
    if (code5 === codes.dash) {
      effects.consume(code5);
      return end2;
    }
    return comment5(code5);
  }
  function cdataOpen(code5) {
    if (code5 === buffer2.charCodeAt(index7++)) {
      effects.consume(code5);
      return index7 === buffer2.length ? cdata : cdataOpen;
    }
    return nok(code5);
  }
  function cdata(code5) {
    if (code5 === codes.eof) {
      return nok(code5);
    }
    if (code5 === codes.rightSquareBracket) {
      effects.consume(code5);
      return cdataClose;
    }
    if (markdownLineEnding(code5)) {
      returnState = cdata;
      return atLineEnding(code5);
    }
    effects.consume(code5);
    return cdata;
  }
  function cdataClose(code5) {
    if (code5 === codes.rightSquareBracket) {
      effects.consume(code5);
      return cdataEnd;
    }
    return cdata(code5);
  }
  function cdataEnd(code5) {
    if (code5 === codes.greaterThan) {
      return end2(code5);
    }
    if (code5 === codes.rightSquareBracket) {
      effects.consume(code5);
      return cdataEnd;
    }
    return cdata(code5);
  }
  function declaration2(code5) {
    if (code5 === codes.eof || code5 === codes.greaterThan) {
      return end2(code5);
    }
    if (markdownLineEnding(code5)) {
      returnState = declaration2;
      return atLineEnding(code5);
    }
    effects.consume(code5);
    return declaration2;
  }
  function instruction(code5) {
    if (code5 === codes.eof) {
      return nok(code5);
    }
    if (code5 === codes.questionMark) {
      effects.consume(code5);
      return instructionClose;
    }
    if (markdownLineEnding(code5)) {
      returnState = instruction;
      return atLineEnding(code5);
    }
    effects.consume(code5);
    return instruction;
  }
  function instructionClose(code5) {
    return code5 === codes.greaterThan ? end2(code5) : instruction(code5);
  }
  function tagCloseStart(code5) {
    if (asciiAlpha(code5)) {
      effects.consume(code5);
      return tagClose;
    }
    return nok(code5);
  }
  function tagClose(code5) {
    if (code5 === codes.dash || asciiAlphanumeric(code5)) {
      effects.consume(code5);
      return tagClose;
    }
    return tagCloseBetween(code5);
  }
  function tagCloseBetween(code5) {
    if (markdownLineEnding(code5)) {
      returnState = tagCloseBetween;
      return atLineEnding(code5);
    }
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return tagCloseBetween;
    }
    return end2(code5);
  }
  function tagOpen(code5) {
    if (code5 === codes.dash || asciiAlphanumeric(code5)) {
      effects.consume(code5);
      return tagOpen;
    }
    if (code5 === codes.slash || code5 === codes.greaterThan || markdownLineEndingOrSpace(code5)) {
      return tagOpenBetween(code5);
    }
    return nok(code5);
  }
  function tagOpenBetween(code5) {
    if (code5 === codes.slash) {
      effects.consume(code5);
      return end2;
    }
    if (code5 === codes.colon || code5 === codes.underscore || asciiAlpha(code5)) {
      effects.consume(code5);
      return tagOpenAttributeName;
    }
    if (markdownLineEnding(code5)) {
      returnState = tagOpenBetween;
      return atLineEnding(code5);
    }
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return tagOpenBetween;
    }
    return end2(code5);
  }
  function tagOpenAttributeName(code5) {
    if (code5 === codes.dash || code5 === codes.dot || code5 === codes.colon || code5 === codes.underscore || asciiAlphanumeric(code5)) {
      effects.consume(code5);
      return tagOpenAttributeName;
    }
    return tagOpenAttributeNameAfter(code5);
  }
  function tagOpenAttributeNameAfter(code5) {
    if (code5 === codes.equalsTo) {
      effects.consume(code5);
      return tagOpenAttributeValueBefore;
    }
    if (markdownLineEnding(code5)) {
      returnState = tagOpenAttributeNameAfter;
      return atLineEnding(code5);
    }
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return tagOpenAttributeNameAfter;
    }
    return tagOpenBetween(code5);
  }
  function tagOpenAttributeValueBefore(code5) {
    if (code5 === codes.eof || code5 === codes.lessThan || code5 === codes.equalsTo || code5 === codes.greaterThan || code5 === codes.graveAccent) {
      return nok(code5);
    }
    if (code5 === codes.quotationMark || code5 === codes.apostrophe) {
      effects.consume(code5);
      marker = code5;
      return tagOpenAttributeValueQuoted;
    }
    if (markdownLineEnding(code5)) {
      returnState = tagOpenAttributeValueBefore;
      return atLineEnding(code5);
    }
    if (markdownSpace(code5)) {
      effects.consume(code5);
      return tagOpenAttributeValueBefore;
    }
    effects.consume(code5);
    marker = void 0;
    return tagOpenAttributeValueUnquoted;
  }
  function tagOpenAttributeValueQuoted(code5) {
    if (code5 === marker) {
      effects.consume(code5);
      return tagOpenAttributeValueQuotedAfter;
    }
    if (code5 === codes.eof) {
      return nok(code5);
    }
    if (markdownLineEnding(code5)) {
      returnState = tagOpenAttributeValueQuoted;
      return atLineEnding(code5);
    }
    effects.consume(code5);
    return tagOpenAttributeValueQuoted;
  }
  function tagOpenAttributeValueQuotedAfter(code5) {
    if (code5 === codes.greaterThan || code5 === codes.slash || markdownLineEndingOrSpace(code5)) {
      return tagOpenBetween(code5);
    }
    return nok(code5);
  }
  function tagOpenAttributeValueUnquoted(code5) {
    if (code5 === codes.eof || code5 === codes.quotationMark || code5 === codes.apostrophe || code5 === codes.lessThan || code5 === codes.equalsTo || code5 === codes.graveAccent) {
      return nok(code5);
    }
    if (code5 === codes.greaterThan || markdownLineEndingOrSpace(code5)) {
      return tagOpenBetween(code5);
    }
    effects.consume(code5);
    return tagOpenAttributeValueUnquoted;
  }
  function atLineEnding(code5) {
    ok2(returnState, "expected return state");
    ok2(markdownLineEnding(code5), "expected eol");
    effects.exit(types.htmlTextData);
    effects.enter(types.lineEnding);
    effects.consume(code5);
    effects.exit(types.lineEnding);
    return factorySpace(
      effects,
      afterPrefix,
      types.linePrefix,
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants2.tabSize
    );
  }
  function afterPrefix(code5) {
    effects.enter(types.htmlTextData);
    return returnState(code5);
  }
  function end2(code5) {
    if (code5 === codes.greaterThan) {
      effects.consume(code5);
      effects.exit(types.htmlTextData);
      effects.exit(types.htmlText);
      return ok3;
    }
    return nok(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-end.js
var labelEnd = {
  name: "labelEnd",
  tokenize: tokenizeLabelEnd,
  resolveTo: resolveToLabelEnd,
  resolveAll: resolveAllLabelEnd
};
var resourceConstruct = { tokenize: tokenizeResource };
var fullReferenceConstruct = { tokenize: tokenizeFullReference };
var collapsedReferenceConstruct = { tokenize: tokenizeCollapsedReference };
function resolveAllLabelEnd(events) {
  let index7 = -1;
  let token2;
  while (++index7 < events.length) {
    token2 = events[index7][1];
    if (token2.type === types.labelImage || token2.type === types.labelLink || token2.type === types.labelEnd) {
      events.splice(index7 + 1, token2.type === types.labelImage ? 4 : 2);
      token2.type = types.data;
      index7++;
    }
  }
  return events;
}
function resolveToLabelEnd(events, context) {
  let index7 = events.length;
  let offset3 = 0;
  let token2;
  let open;
  let close2;
  let media2;
  while (index7--) {
    token2 = events[index7][1];
    if (open) {
      if (token2.type === types.link || token2.type === types.labelLink && token2._inactive) {
        break;
      }
      if (events[index7][0] === "enter" && token2.type === types.labelLink) {
        token2._inactive = true;
      }
    } else if (close2) {
      if (events[index7][0] === "enter" && (token2.type === types.labelImage || token2.type === types.labelLink) && !token2._balanced) {
        open = index7;
        if (token2.type !== types.labelLink) {
          offset3 = 2;
          break;
        }
      }
    } else if (token2.type === types.labelEnd) {
      close2 = index7;
    }
  }
  ok2(open !== void 0, "`open` is supposed to be found");
  ok2(close2 !== void 0, "`close` is supposed to be found");
  const group = {
    type: events[open][1].type === types.labelLink ? types.link : types.image,
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const label = {
    type: types.label,
    start: Object.assign({}, events[open][1].start),
    end: Object.assign({}, events[close2][1].end)
  };
  const text10 = {
    type: types.labelText,
    start: Object.assign({}, events[open + offset3 + 2][1].end),
    end: Object.assign({}, events[close2 - 2][1].start)
  };
  media2 = [
    ["enter", group, context],
    ["enter", label, context]
  ];
  media2 = push(media2, events.slice(open + 1, open + offset3 + 3));
  media2 = push(media2, [["enter", text10, context]]);
  media2 = push(
    media2,
    resolveAll(
      context.parser.constructs.insideSpan.null,
      events.slice(open + offset3 + 4, close2 - 3),
      context
    )
  );
  media2 = push(media2, [
    ["exit", text10, context],
    events[close2 - 2],
    events[close2 - 1],
    ["exit", label, context]
  ]);
  media2 = push(media2, events.slice(close2 + 1));
  media2 = push(media2, [["exit", group, context]]);
  splice(events, open, events.length, media2);
  return events;
}
function tokenizeLabelEnd(effects, ok3, nok) {
  const self2 = this;
  let index7 = self2.events.length;
  let labelStart;
  let defined;
  while (index7--) {
    if ((self2.events[index7][1].type === types.labelImage || self2.events[index7][1].type === types.labelLink) && !self2.events[index7][1]._balanced) {
      labelStart = self2.events[index7][1];
      break;
    }
  }
  return start2;
  function start2(code5) {
    ok2(code5 === codes.rightSquareBracket, "expected `]`");
    if (!labelStart) {
      return nok(code5);
    }
    if (labelStart._inactive)
      return balanced(code5);
    defined = self2.parser.defined.includes(
      normalizeIdentifier(
        self2.sliceSerialize({ start: labelStart.end, end: self2.now() })
      )
    );
    effects.enter(types.labelEnd);
    effects.enter(types.labelMarker);
    effects.consume(code5);
    effects.exit(types.labelMarker);
    effects.exit(types.labelEnd);
    return afterLabelEnd;
  }
  function afterLabelEnd(code5) {
    if (code5 === codes.leftParenthesis) {
      return effects.attempt(
        resourceConstruct,
        ok3,
        defined ? ok3 : balanced
      )(code5);
    }
    if (code5 === codes.leftSquareBracket) {
      return effects.attempt(
        fullReferenceConstruct,
        ok3,
        defined ? effects.attempt(collapsedReferenceConstruct, ok3, balanced) : balanced
      )(code5);
    }
    return defined ? ok3(code5) : balanced(code5);
  }
  function balanced(code5) {
    labelStart._balanced = true;
    return nok(code5);
  }
}
function tokenizeResource(effects, ok3, nok) {
  return start2;
  function start2(code5) {
    ok2(code5 === codes.leftParenthesis, "expected left paren");
    effects.enter(types.resource);
    effects.enter(types.resourceMarker);
    effects.consume(code5);
    effects.exit(types.resourceMarker);
    return factoryWhitespace(effects, open);
  }
  function open(code5) {
    if (code5 === codes.rightParenthesis) {
      return end2(code5);
    }
    return factoryDestination(
      effects,
      destinationAfter,
      nok,
      types.resourceDestination,
      types.resourceDestinationLiteral,
      types.resourceDestinationLiteralMarker,
      types.resourceDestinationRaw,
      types.resourceDestinationString,
      constants2.linkResourceDestinationBalanceMax
    )(code5);
  }
  function destinationAfter(code5) {
    return markdownLineEndingOrSpace(code5) ? factoryWhitespace(effects, between2)(code5) : end2(code5);
  }
  function between2(code5) {
    if (code5 === codes.quotationMark || code5 === codes.apostrophe || code5 === codes.leftParenthesis) {
      return factoryTitle(
        effects,
        factoryWhitespace(effects, end2),
        nok,
        types.resourceTitle,
        types.resourceTitleMarker,
        types.resourceTitleString
      )(code5);
    }
    return end2(code5);
  }
  function end2(code5) {
    if (code5 === codes.rightParenthesis) {
      effects.enter(types.resourceMarker);
      effects.consume(code5);
      effects.exit(types.resourceMarker);
      effects.exit(types.resource);
      return ok3;
    }
    return nok(code5);
  }
}
function tokenizeFullReference(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.leftSquareBracket, "expected left bracket");
    return factoryLabel.call(
      self2,
      effects,
      afterLabel,
      nok,
      types.reference,
      types.referenceMarker,
      types.referenceString
    )(code5);
  }
  function afterLabel(code5) {
    return self2.parser.defined.includes(
      normalizeIdentifier(
        self2.sliceSerialize(self2.events[self2.events.length - 1][1]).slice(1, -1)
      )
    ) ? ok3(code5) : nok(code5);
  }
}
function tokenizeCollapsedReference(effects, ok3, nok) {
  return start2;
  function start2(code5) {
    ok2(code5 === codes.leftSquareBracket, "expected left bracket");
    effects.enter(types.reference);
    effects.enter(types.referenceMarker);
    effects.consume(code5);
    effects.exit(types.referenceMarker);
    return open;
  }
  function open(code5) {
    if (code5 === codes.rightSquareBracket) {
      effects.enter(types.referenceMarker);
      effects.consume(code5);
      effects.exit(types.referenceMarker);
      effects.exit(types.reference);
      return ok3;
    }
    return nok(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-start-image.js
var labelStartImage = {
  name: "labelStartImage",
  tokenize: tokenizeLabelStartImage,
  resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartImage(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.exclamationMark, "expected `!`");
    effects.enter(types.labelImage);
    effects.enter(types.labelImageMarker);
    effects.consume(code5);
    effects.exit(types.labelImageMarker);
    return open;
  }
  function open(code5) {
    if (code5 === codes.leftSquareBracket) {
      effects.enter(types.labelMarker);
      effects.consume(code5);
      effects.exit(types.labelMarker);
      effects.exit(types.labelImage);
      return after;
    }
    return nok(code5);
  }
  function after(code5) {
    return code5 === codes.caret && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code5) : ok3(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/label-start-link.js
var labelStartLink = {
  name: "labelStartLink",
  tokenize: tokenizeLabelStartLink,
  resolveAll: labelEnd.resolveAll
};
function tokenizeLabelStartLink(effects, ok3, nok) {
  const self2 = this;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.leftSquareBracket, "expected `[`");
    effects.enter(types.labelLink);
    effects.enter(types.labelMarker);
    effects.consume(code5);
    effects.exit(types.labelMarker);
    effects.exit(types.labelLink);
    return after;
  }
  function after(code5) {
    return code5 === codes.caret && "_hiddenFootnoteSupport" in self2.parser.constructs ? nok(code5) : ok3(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/line-ending.js
var lineEnding = { name: "lineEnding", tokenize: tokenizeLineEnding };
function tokenizeLineEnding(effects, ok3) {
  return start2;
  function start2(code5) {
    ok2(markdownLineEnding(code5), "expected eol");
    effects.enter(types.lineEnding);
    effects.consume(code5);
    effects.exit(types.lineEnding);
    return factorySpace(effects, ok3, types.linePrefix);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/thematic-break.js
var thematicBreak = {
  name: "thematicBreak",
  tokenize: tokenizeThematicBreak
};
function tokenizeThematicBreak(effects, ok3, nok) {
  let size3 = 0;
  let marker;
  return start2;
  function start2(code5) {
    ok2(
      code5 === codes.asterisk || code5 === codes.dash || code5 === codes.underscore,
      "expected `*`, `-`, or `_`"
    );
    effects.enter(types.thematicBreak);
    marker = code5;
    return atBreak(code5);
  }
  function atBreak(code5) {
    if (code5 === marker) {
      effects.enter(types.thematicBreakSequence);
      return sequence(code5);
    }
    if (markdownSpace(code5)) {
      return factorySpace(effects, atBreak, types.whitespace)(code5);
    }
    if (size3 < constants2.thematicBreakMarkerCountMin || code5 !== codes.eof && !markdownLineEnding(code5)) {
      return nok(code5);
    }
    effects.exit(types.thematicBreak);
    return ok3(code5);
  }
  function sequence(code5) {
    if (code5 === marker) {
      effects.consume(code5);
      size3++;
      return sequence;
    }
    effects.exit(types.thematicBreakSequence);
    return atBreak(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/list.js
var list3 = {
  name: "list",
  tokenize: tokenizeListStart,
  continuation: { tokenize: tokenizeListContinuation },
  exit: tokenizeListEnd
};
var listItemPrefixWhitespaceConstruct = {
  tokenize: tokenizeListItemPrefixWhitespace,
  partial: true
};
var indentConstruct = { tokenize: tokenizeIndent, partial: true };
function tokenizeListStart(effects, ok3, nok) {
  const self2 = this;
  const tail = self2.events[self2.events.length - 1];
  let initialSize = tail && tail[1].type === types.linePrefix ? tail[2].sliceSerialize(tail[1], true).length : 0;
  let size3 = 0;
  return start2;
  function start2(code5) {
    const kind = self2.containerState.type || (code5 === codes.asterisk || code5 === codes.plusSign || code5 === codes.dash ? types.listUnordered : types.listOrdered);
    if (kind === types.listUnordered ? !self2.containerState.marker || code5 === self2.containerState.marker : asciiDigit(code5)) {
      if (!self2.containerState.type) {
        self2.containerState.type = kind;
        effects.enter(kind, { _container: true });
      }
      if (kind === types.listUnordered) {
        effects.enter(types.listItemPrefix);
        return code5 === codes.asterisk || code5 === codes.dash ? effects.check(thematicBreak, nok, atMarker)(code5) : atMarker(code5);
      }
      if (!self2.interrupt || code5 === codes.digit1) {
        effects.enter(types.listItemPrefix);
        effects.enter(types.listItemValue);
        return inside(code5);
      }
    }
    return nok(code5);
  }
  function inside(code5) {
    if (asciiDigit(code5) && ++size3 < constants2.listItemValueSizeMax) {
      effects.consume(code5);
      return inside;
    }
    if ((!self2.interrupt || size3 < 2) && (self2.containerState.marker ? code5 === self2.containerState.marker : code5 === codes.rightParenthesis || code5 === codes.dot)) {
      effects.exit(types.listItemValue);
      return atMarker(code5);
    }
    return nok(code5);
  }
  function atMarker(code5) {
    ok2(code5 !== codes.eof, "eof (`null`) is not a marker");
    effects.enter(types.listItemMarker);
    effects.consume(code5);
    effects.exit(types.listItemMarker);
    self2.containerState.marker = self2.containerState.marker || code5;
    return effects.check(
      blankLine,
      // Can’t be empty when interrupting.
      self2.interrupt ? nok : onBlank,
      effects.attempt(
        listItemPrefixWhitespaceConstruct,
        endOfPrefix,
        otherPrefix
      )
    );
  }
  function onBlank(code5) {
    self2.containerState.initialBlankLine = true;
    initialSize++;
    return endOfPrefix(code5);
  }
  function otherPrefix(code5) {
    if (markdownSpace(code5)) {
      effects.enter(types.listItemPrefixWhitespace);
      effects.consume(code5);
      effects.exit(types.listItemPrefixWhitespace);
      return endOfPrefix;
    }
    return nok(code5);
  }
  function endOfPrefix(code5) {
    self2.containerState.size = initialSize + self2.sliceSerialize(effects.exit(types.listItemPrefix), true).length;
    return ok3(code5);
  }
}
function tokenizeListContinuation(effects, ok3, nok) {
  const self2 = this;
  self2.containerState._closeFlow = void 0;
  return effects.check(blankLine, onBlank, notBlank);
  function onBlank(code5) {
    self2.containerState.furtherBlankLines = self2.containerState.furtherBlankLines || self2.containerState.initialBlankLine;
    return factorySpace(
      effects,
      ok3,
      types.listItemIndent,
      self2.containerState.size + 1
    )(code5);
  }
  function notBlank(code5) {
    if (self2.containerState.furtherBlankLines || !markdownSpace(code5)) {
      self2.containerState.furtherBlankLines = void 0;
      self2.containerState.initialBlankLine = void 0;
      return notInCurrentItem(code5);
    }
    self2.containerState.furtherBlankLines = void 0;
    self2.containerState.initialBlankLine = void 0;
    return effects.attempt(indentConstruct, ok3, notInCurrentItem)(code5);
  }
  function notInCurrentItem(code5) {
    self2.containerState._closeFlow = true;
    self2.interrupt = void 0;
    return factorySpace(
      effects,
      effects.attempt(list3, ok3, nok),
      types.linePrefix,
      self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants2.tabSize
    )(code5);
  }
}
function tokenizeIndent(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    types.listItemIndent,
    self2.containerState.size + 1
  );
  function afterPrefix(code5) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === types.listItemIndent && tail[2].sliceSerialize(tail[1], true).length === self2.containerState.size ? ok3(code5) : nok(code5);
  }
}
function tokenizeListEnd(effects) {
  effects.exit(this.containerState.type);
}
function tokenizeListItemPrefixWhitespace(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    types.listItemPrefixWhitespace,
    self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants2.tabSize + 1
  );
  function afterPrefix(code5) {
    const tail = self2.events[self2.events.length - 1];
    return !markdownSpace(code5) && tail && tail[1].type === types.listItemPrefixWhitespace ? ok3(code5) : nok(code5);
  }
}

// node_modules/micromark-core-commonmark/dev/lib/setext-underline.js
var setextUnderline = {
  name: "setextUnderline",
  tokenize: tokenizeSetextUnderline,
  resolveTo: resolveToSetextUnderline
};
function resolveToSetextUnderline(events, context) {
  let index7 = events.length;
  let content5;
  let text10;
  let definition3;
  while (index7--) {
    if (events[index7][0] === "enter") {
      if (events[index7][1].type === types.content) {
        content5 = index7;
        break;
      }
      if (events[index7][1].type === types.paragraph) {
        text10 = index7;
      }
    } else {
      if (events[index7][1].type === types.content) {
        events.splice(index7, 1);
      }
      if (!definition3 && events[index7][1].type === types.definition) {
        definition3 = index7;
      }
    }
  }
  ok2(text10 !== void 0, "expected a `text` index to be found");
  ok2(content5 !== void 0, "expected a `text` index to be found");
  const heading4 = {
    type: types.setextHeading,
    start: Object.assign({}, events[text10][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  events[text10][1].type = types.setextHeadingText;
  if (definition3) {
    events.splice(text10, 0, ["enter", heading4, context]);
    events.splice(definition3 + 1, 0, ["exit", events[content5][1], context]);
    events[content5][1].end = Object.assign({}, events[definition3][1].end);
  } else {
    events[content5][1] = heading4;
  }
  events.push(["exit", heading4, context]);
  return events;
}
function tokenizeSetextUnderline(effects, ok3, nok) {
  const self2 = this;
  let index7 = self2.events.length;
  let marker;
  let paragraph3;
  while (index7--) {
    if (self2.events[index7][1].type !== types.lineEnding && self2.events[index7][1].type !== types.linePrefix && self2.events[index7][1].type !== types.content) {
      paragraph3 = self2.events[index7][1].type === types.paragraph;
      break;
    }
  }
  return start2;
  function start2(code5) {
    ok2(
      code5 === codes.dash || code5 === codes.equalsTo,
      "expected `=` or `-`"
    );
    if (!self2.parser.lazy[self2.now().line] && (self2.interrupt || paragraph3)) {
      effects.enter(types.setextHeadingLine);
      effects.enter(types.setextHeadingLineSequence);
      marker = code5;
      return closingSequence(code5);
    }
    return nok(code5);
  }
  function closingSequence(code5) {
    if (code5 === marker) {
      effects.consume(code5);
      return closingSequence;
    }
    effects.exit(types.setextHeadingLineSequence);
    return factorySpace(effects, closingSequenceEnd, types.lineSuffix)(code5);
  }
  function closingSequenceEnd(code5) {
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit(types.setextHeadingLine);
      return ok3(code5);
    }
    return nok(code5);
  }
}

// node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js
var indent = { tokenize: tokenizeIndent2, partial: true };
function gfmFootnote() {
  return {
    document: {
      [codes.leftSquareBracket]: {
        tokenize: tokenizeDefinitionStart,
        continuation: { tokenize: tokenizeDefinitionContinuation },
        exit: gfmFootnoteDefinitionEnd
      }
    },
    text: {
      [codes.leftSquareBracket]: { tokenize: tokenizeGfmFootnoteCall },
      [codes.rightSquareBracket]: {
        add: "after",
        tokenize: tokenizePotentialGfmFootnoteCall,
        resolveTo: resolveToPotentialGfmFootnoteCall
      }
    }
  };
}
function tokenizePotentialGfmFootnoteCall(effects, ok3, nok) {
  const self2 = this;
  let index7 = self2.events.length;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let labelStart;
  while (index7--) {
    const token2 = self2.events[index7][1];
    if (token2.type === types.labelImage) {
      labelStart = token2;
      break;
    }
    if (token2.type === "gfmFootnoteCall" || token2.type === types.labelLink || token2.type === types.label || token2.type === types.image || token2.type === types.link) {
      break;
    }
  }
  return start2;
  function start2(code5) {
    ok2(code5 === codes.rightSquareBracket, "expected `]`");
    if (!labelStart || !labelStart._balanced) {
      return nok(code5);
    }
    const id2 = normalizeIdentifier(
      self2.sliceSerialize({ start: labelStart.end, end: self2.now() })
    );
    if (id2.codePointAt(0) !== codes.caret || !defined.includes(id2.slice(1))) {
      return nok(code5);
    }
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code5);
    effects.exit("gfmFootnoteCallLabelMarker");
    return ok3(code5);
  }
}
function resolveToPotentialGfmFootnoteCall(events, context) {
  let index7 = events.length;
  let labelStart;
  while (index7--) {
    if (events[index7][1].type === types.labelImage && events[index7][0] === "enter") {
      labelStart = events[index7][1];
      break;
    }
  }
  ok2(labelStart, "expected `labelStart` to resolve");
  events[index7 + 1][1].type = types.data;
  events[index7 + 3][1].type = "gfmFootnoteCallLabelMarker";
  const call = {
    type: "gfmFootnoteCall",
    start: Object.assign({}, events[index7 + 3][1].start),
    end: Object.assign({}, events[events.length - 1][1].end)
  };
  const marker = {
    type: "gfmFootnoteCallMarker",
    start: Object.assign({}, events[index7 + 3][1].end),
    end: Object.assign({}, events[index7 + 3][1].end)
  };
  marker.end.column++;
  marker.end.offset++;
  marker.end._bufferIndex++;
  const string3 = {
    type: "gfmFootnoteCallString",
    start: Object.assign({}, marker.end),
    end: Object.assign({}, events[events.length - 1][1].start)
  };
  const chunk = {
    type: types.chunkString,
    contentType: "string",
    start: Object.assign({}, string3.start),
    end: Object.assign({}, string3.end)
  };
  const replacement = [
    // Take the `labelImageMarker` (now `data`, the `!`)
    events[index7 + 1],
    events[index7 + 2],
    ["enter", call, context],
    // The `[`
    events[index7 + 3],
    events[index7 + 4],
    // The `^`.
    ["enter", marker, context],
    ["exit", marker, context],
    // Everything in between.
    ["enter", string3, context],
    ["enter", chunk, context],
    ["exit", chunk, context],
    ["exit", string3, context],
    // The ending (`]`, properly parsed and labelled).
    events[events.length - 2],
    events[events.length - 1],
    ["exit", call, context]
  ];
  events.splice(index7, events.length - index7 + 1, ...replacement);
  return events;
}
function tokenizeGfmFootnoteCall(effects, ok3, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let size3 = 0;
  let data;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.leftSquareBracket, "expected `[`");
    effects.enter("gfmFootnoteCall");
    effects.enter("gfmFootnoteCallLabelMarker");
    effects.consume(code5);
    effects.exit("gfmFootnoteCallLabelMarker");
    return callStart;
  }
  function callStart(code5) {
    if (code5 !== codes.caret)
      return nok(code5);
    effects.enter("gfmFootnoteCallMarker");
    effects.consume(code5);
    effects.exit("gfmFootnoteCallMarker");
    effects.enter("gfmFootnoteCallString");
    effects.enter("chunkString").contentType = "string";
    return callData;
  }
  function callData(code5) {
    if (
      // Too long.
      size3 > constants2.linkReferenceSizeMax || // Closing brace with nothing.
      code5 === codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code5 === codes.eof || code5 === codes.leftSquareBracket || markdownLineEndingOrSpace(code5)
    ) {
      return nok(code5);
    }
    if (code5 === codes.rightSquareBracket) {
      effects.exit("chunkString");
      const token2 = effects.exit("gfmFootnoteCallString");
      if (!defined.includes(normalizeIdentifier(self2.sliceSerialize(token2)))) {
        return nok(code5);
      }
      effects.enter("gfmFootnoteCallLabelMarker");
      effects.consume(code5);
      effects.exit("gfmFootnoteCallLabelMarker");
      effects.exit("gfmFootnoteCall");
      return ok3;
    }
    if (!markdownLineEndingOrSpace(code5)) {
      data = true;
    }
    size3++;
    effects.consume(code5);
    return code5 === codes.backslash ? callEscape : callData;
  }
  function callEscape(code5) {
    if (code5 === codes.leftSquareBracket || code5 === codes.backslash || code5 === codes.rightSquareBracket) {
      effects.consume(code5);
      size3++;
      return callData;
    }
    return callData(code5);
  }
}
function tokenizeDefinitionStart(effects, ok3, nok) {
  const self2 = this;
  const defined = self2.parser.gfmFootnotes || (self2.parser.gfmFootnotes = []);
  let identifier3;
  let size3 = 0;
  let data;
  return start2;
  function start2(code5) {
    ok2(code5 === codes.leftSquareBracket, "expected `[`");
    effects.enter("gfmFootnoteDefinition")._container = true;
    effects.enter("gfmFootnoteDefinitionLabel");
    effects.enter("gfmFootnoteDefinitionLabelMarker");
    effects.consume(code5);
    effects.exit("gfmFootnoteDefinitionLabelMarker");
    return labelAtMarker;
  }
  function labelAtMarker(code5) {
    if (code5 === codes.caret) {
      effects.enter("gfmFootnoteDefinitionMarker");
      effects.consume(code5);
      effects.exit("gfmFootnoteDefinitionMarker");
      effects.enter("gfmFootnoteDefinitionLabelString");
      effects.enter("chunkString").contentType = "string";
      return labelInside;
    }
    return nok(code5);
  }
  function labelInside(code5) {
    if (
      // Too long.
      size3 > constants2.linkReferenceSizeMax || // Closing brace with nothing.
      code5 === codes.rightSquareBracket && !data || // Space or tab is not supported by GFM for some reason.
      // `\n` and `[` not being supported makes sense.
      code5 === codes.eof || code5 === codes.leftSquareBracket || markdownLineEndingOrSpace(code5)
    ) {
      return nok(code5);
    }
    if (code5 === codes.rightSquareBracket) {
      effects.exit("chunkString");
      const token2 = effects.exit("gfmFootnoteDefinitionLabelString");
      identifier3 = normalizeIdentifier(self2.sliceSerialize(token2));
      effects.enter("gfmFootnoteDefinitionLabelMarker");
      effects.consume(code5);
      effects.exit("gfmFootnoteDefinitionLabelMarker");
      effects.exit("gfmFootnoteDefinitionLabel");
      return labelAfter;
    }
    if (!markdownLineEndingOrSpace(code5)) {
      data = true;
    }
    size3++;
    effects.consume(code5);
    return code5 === codes.backslash ? labelEscape : labelInside;
  }
  function labelEscape(code5) {
    if (code5 === codes.leftSquareBracket || code5 === codes.backslash || code5 === codes.rightSquareBracket) {
      effects.consume(code5);
      size3++;
      return labelInside;
    }
    return labelInside(code5);
  }
  function labelAfter(code5) {
    if (code5 === codes.colon) {
      effects.enter("definitionMarker");
      effects.consume(code5);
      effects.exit("definitionMarker");
      if (!defined.includes(identifier3)) {
        defined.push(identifier3);
      }
      return factorySpace(
        effects,
        whitespaceAfter,
        "gfmFootnoteDefinitionWhitespace"
      );
    }
    return nok(code5);
  }
  function whitespaceAfter(code5) {
    return ok3(code5);
  }
}
function tokenizeDefinitionContinuation(effects, ok3, nok) {
  return effects.check(blankLine, ok3, effects.attempt(indent, ok3, nok));
}
function gfmFootnoteDefinitionEnd(effects) {
  effects.exit("gfmFootnoteDefinition");
}
function tokenizeIndent2(effects, ok3, nok) {
  const self2 = this;
  return factorySpace(
    effects,
    afterPrefix,
    "gfmFootnoteDefinitionIndent",
    constants2.tabSize + 1
  );
  function afterPrefix(code5) {
    const tail = self2.events[self2.events.length - 1];
    return tail && tail[1].type === "gfmFootnoteDefinitionIndent" && tail[2].sliceSerialize(tail[1], true).length === constants2.tabSize ? ok3(code5) : nok(code5);
  }
}

// node_modules/micromark-extension-gfm-footnote/dev/lib/html.js
var own9 = {}.hasOwnProperty;

// node_modules/micromark-extension-gfm-strikethrough/dev/lib/syntax.js
function gfmStrikethrough(options2) {
  const options_ = options2 || {};
  let single = options_.singleTilde;
  const tokenizer = {
    tokenize: tokenizeStrikethrough,
    resolveAll: resolveAllStrikethrough
  };
  if (single === null || single === void 0) {
    single = true;
  }
  return {
    text: { [codes.tilde]: tokenizer },
    insideSpan: { null: [tokenizer] },
    attentionMarkers: { null: [codes.tilde] }
  };
  function resolveAllStrikethrough(events, context) {
    let index7 = -1;
    while (++index7 < events.length) {
      if (events[index7][0] === "enter" && events[index7][1].type === "strikethroughSequenceTemporary" && events[index7][1]._close) {
        let open = index7;
        while (open--) {
          if (events[open][0] === "exit" && events[open][1].type === "strikethroughSequenceTemporary" && events[open][1]._open && // If the sizes are the same:
          events[index7][1].end.offset - events[index7][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {
            events[index7][1].type = "strikethroughSequence";
            events[open][1].type = "strikethroughSequence";
            const strikethrough2 = {
              type: "strikethrough",
              start: Object.assign({}, events[open][1].start),
              end: Object.assign({}, events[index7][1].end)
            };
            const text10 = {
              type: "strikethroughText",
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index7][1].start)
            };
            const nextEvents = [
              ["enter", strikethrough2, context],
              ["enter", events[open][1], context],
              ["exit", events[open][1], context],
              ["enter", text10, context]
            ];
            const insideSpan2 = context.parser.constructs.insideSpan.null;
            if (insideSpan2) {
              splice(
                nextEvents,
                nextEvents.length,
                0,
                // @ts-expect-error: to do: update `mdast-util-types` to allow explicit `undefined`s.
                resolveAll(insideSpan2, events.slice(open + 1, index7), context)
              );
            }
            splice(nextEvents, nextEvents.length, 0, [
              ["exit", text10, context],
              ["enter", events[index7][1], context],
              ["exit", events[index7][1], context],
              ["exit", strikethrough2, context]
            ]);
            splice(events, open - 1, index7 - open + 3, nextEvents);
            index7 = open + nextEvents.length - 2;
            break;
          }
        }
      }
    }
    index7 = -1;
    while (++index7 < events.length) {
      if (events[index7][1].type === "strikethroughSequenceTemporary") {
        events[index7][1].type = types.data;
      }
    }
    return events;
  }
  function tokenizeStrikethrough(effects, ok3, nok) {
    const previous3 = this.previous;
    const events = this.events;
    let size3 = 0;
    return start2;
    function start2(code5) {
      ok2(code5 === codes.tilde, "expected `~`");
      if (previous3 === codes.tilde && events[events.length - 1][1].type !== types.characterEscape) {
        return nok(code5);
      }
      effects.enter("strikethroughSequenceTemporary");
      return more(code5);
    }
    function more(code5) {
      const before = classifyCharacter(previous3);
      if (code5 === codes.tilde) {
        if (size3 > 1)
          return nok(code5);
        effects.consume(code5);
        size3++;
        return more;
      }
      if (size3 < 2 && !single)
        return nok(code5);
      const token2 = effects.exit("strikethroughSequenceTemporary");
      const after = classifyCharacter(code5);
      token2._open = !after || after === constants2.attentionSideAfter && Boolean(before);
      token2._close = !before || before === constants2.attentionSideAfter && Boolean(after);
      return ok3(code5);
    }
  }
}

// node_modules/micromark-extension-gfm-table/dev/lib/edit-map.js
var EditMap = class {
  /**
   * Create a new edit map.
   */
  constructor() {
    this.map = [];
  }
  /**
   * Create an edit: a remove and/or add at a certain place.
   *
   * @param {number} index
   * @param {number} remove
   * @param {Array<Event>} add
   * @returns {void}
   */
  add(index7, remove, add) {
    addImpl(this, index7, remove, add);
  }
  // To do: not used here.
  // /**
  //  * Create an edit: but insert `add` before existing additions.
  //  *
  //  * @param {number} index
  //  * @param {number} remove
  //  * @param {Array<Event>} add
  //  * @returns {void}
  //  */
  // addBefore(index, remove, add) {
  //   addImpl(this, index, remove, add, true)
  // }
  /**
   * Done, change the events.
   *
   * @param {Array<Event>} events
   * @returns {void}
   */
  consume(events) {
    this.map.sort((a2, b2) => a2[0] - b2[0]);
    if (this.map.length === 0) {
      return;
    }
    let index7 = this.map.length;
    const vecs = [];
    while (index7 > 0) {
      index7 -= 1;
      vecs.push(events.slice(this.map[index7][0] + this.map[index7][1]));
      vecs.push(this.map[index7][2]);
      events.length = this.map[index7][0];
    }
    vecs.push([...events]);
    events.length = 0;
    let slice3 = vecs.pop();
    while (slice3) {
      events.push(...slice3);
      slice3 = vecs.pop();
    }
    this.map.length = 0;
  }
};
function addImpl(editMap, at, remove, add) {
  let index7 = 0;
  if (remove === 0 && add.length === 0) {
    return;
  }
  while (index7 < editMap.map.length) {
    if (editMap.map[index7][0] === at) {
      editMap.map[index7][1] += remove;
      editMap.map[index7][2].push(...add);
      return;
    }
    index7 += 1;
  }
  editMap.map.push([at, remove, add]);
}

// node_modules/micromark-extension-gfm-table/dev/lib/infer.js
function gfmTableAlign(events, index7) {
  ok2(events[index7][1].type === "table", "expected table");
  let inDelimiterRow = false;
  const align = [];
  while (index7 < events.length) {
    const event = events[index7];
    if (inDelimiterRow) {
      if (event[0] === "enter") {
        if (event[1].type === "tableContent") {
          align.push(
            events[index7 + 1][1].type === "tableDelimiterMarker" ? "left" : "none"
          );
        }
      } else if (event[1].type === "tableContent") {
        if (events[index7 - 1][1].type === "tableDelimiterMarker") {
          const alignIndex = align.length - 1;
          align[alignIndex] = align[alignIndex] === "left" ? "center" : "right";
        }
      } else if (event[1].type === "tableDelimiterRow") {
        break;
      }
    } else if (event[0] === "enter" && event[1].type === "tableDelimiterRow") {
      inDelimiterRow = true;
    }
    index7 += 1;
  }
  return align;
}

// node_modules/micromark-extension-gfm-table/dev/lib/syntax.js
var gfmTable = {
  flow: { null: { tokenize: tokenizeTable, resolveAll: resolveTable } }
};
function tokenizeTable(effects, ok3, nok) {
  const self2 = this;
  let size3 = 0;
  let sizeB = 0;
  let seen;
  return start2;
  function start2(code5) {
    let index7 = self2.events.length - 1;
    while (index7 > -1) {
      const type = self2.events[index7][1].type;
      if (type === types.lineEnding || // Note: markdown-rs uses `whitespace` instead of `linePrefix`
      type === types.linePrefix)
        index7--;
      else
        break;
    }
    const tail = index7 > -1 ? self2.events[index7][1].type : null;
    const next2 = tail === "tableHead" || tail === "tableRow" ? bodyRowStart : headRowBefore;
    if (next2 === bodyRowStart && self2.parser.lazy[self2.now().line]) {
      return nok(code5);
    }
    return next2(code5);
  }
  function headRowBefore(code5) {
    effects.enter("tableHead");
    effects.enter("tableRow");
    return headRowStart(code5);
  }
  function headRowStart(code5) {
    if (code5 === codes.verticalBar) {
      return headRowBreak(code5);
    }
    seen = true;
    sizeB += 1;
    return headRowBreak(code5);
  }
  function headRowBreak(code5) {
    if (code5 === codes.eof) {
      return nok(code5);
    }
    if (markdownLineEnding(code5)) {
      if (sizeB > 1) {
        sizeB = 0;
        self2.interrupt = true;
        effects.exit("tableRow");
        effects.enter(types.lineEnding);
        effects.consume(code5);
        effects.exit(types.lineEnding);
        return headDelimiterStart;
      }
      return nok(code5);
    }
    if (markdownSpace(code5)) {
      return factorySpace(effects, headRowBreak, types.whitespace)(code5);
    }
    sizeB += 1;
    if (seen) {
      seen = false;
      size3 += 1;
    }
    if (code5 === codes.verticalBar) {
      effects.enter("tableCellDivider");
      effects.consume(code5);
      effects.exit("tableCellDivider");
      seen = true;
      return headRowBreak;
    }
    effects.enter(types.data);
    return headRowData(code5);
  }
  function headRowData(code5) {
    if (code5 === codes.eof || code5 === codes.verticalBar || markdownLineEndingOrSpace(code5)) {
      effects.exit(types.data);
      return headRowBreak(code5);
    }
    effects.consume(code5);
    return code5 === codes.backslash ? headRowEscape : headRowData;
  }
  function headRowEscape(code5) {
    if (code5 === codes.backslash || code5 === codes.verticalBar) {
      effects.consume(code5);
      return headRowData;
    }
    return headRowData(code5);
  }
  function headDelimiterStart(code5) {
    self2.interrupt = false;
    if (self2.parser.lazy[self2.now().line]) {
      return nok(code5);
    }
    effects.enter("tableDelimiterRow");
    seen = false;
    if (markdownSpace(code5)) {
      return factorySpace(
        effects,
        headDelimiterBefore,
        types.linePrefix,
        self2.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants2.tabSize
      )(code5);
    }
    return headDelimiterBefore(code5);
  }
  function headDelimiterBefore(code5) {
    if (code5 === codes.dash || code5 === codes.colon) {
      return headDelimiterValueBefore(code5);
    }
    if (code5 === codes.verticalBar) {
      seen = true;
      effects.enter("tableCellDivider");
      effects.consume(code5);
      effects.exit("tableCellDivider");
      return headDelimiterCellBefore;
    }
    return headDelimiterNok(code5);
  }
  function headDelimiterCellBefore(code5) {
    if (markdownSpace(code5)) {
      return factorySpace(
        effects,
        headDelimiterValueBefore,
        types.whitespace
      )(code5);
    }
    return headDelimiterValueBefore(code5);
  }
  function headDelimiterValueBefore(code5) {
    if (code5 === codes.colon) {
      sizeB += 1;
      seen = true;
      effects.enter("tableDelimiterMarker");
      effects.consume(code5);
      effects.exit("tableDelimiterMarker");
      return headDelimiterLeftAlignmentAfter;
    }
    if (code5 === codes.dash) {
      sizeB += 1;
      return headDelimiterLeftAlignmentAfter(code5);
    }
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      return headDelimiterCellAfter(code5);
    }
    return headDelimiterNok(code5);
  }
  function headDelimiterLeftAlignmentAfter(code5) {
    if (code5 === codes.dash) {
      effects.enter("tableDelimiterFiller");
      return headDelimiterFiller(code5);
    }
    return headDelimiterNok(code5);
  }
  function headDelimiterFiller(code5) {
    if (code5 === codes.dash) {
      effects.consume(code5);
      return headDelimiterFiller;
    }
    if (code5 === codes.colon) {
      seen = true;
      effects.exit("tableDelimiterFiller");
      effects.enter("tableDelimiterMarker");
      effects.consume(code5);
      effects.exit("tableDelimiterMarker");
      return headDelimiterRightAlignmentAfter;
    }
    effects.exit("tableDelimiterFiller");
    return headDelimiterRightAlignmentAfter(code5);
  }
  function headDelimiterRightAlignmentAfter(code5) {
    if (markdownSpace(code5)) {
      return factorySpace(
        effects,
        headDelimiterCellAfter,
        types.whitespace
      )(code5);
    }
    return headDelimiterCellAfter(code5);
  }
  function headDelimiterCellAfter(code5) {
    if (code5 === codes.verticalBar) {
      return headDelimiterBefore(code5);
    }
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      if (!seen || size3 !== sizeB) {
        return headDelimiterNok(code5);
      }
      effects.exit("tableDelimiterRow");
      effects.exit("tableHead");
      return ok3(code5);
    }
    return headDelimiterNok(code5);
  }
  function headDelimiterNok(code5) {
    return nok(code5);
  }
  function bodyRowStart(code5) {
    effects.enter("tableRow");
    return bodyRowBreak(code5);
  }
  function bodyRowBreak(code5) {
    if (code5 === codes.verticalBar) {
      effects.enter("tableCellDivider");
      effects.consume(code5);
      effects.exit("tableCellDivider");
      return bodyRowBreak;
    }
    if (code5 === codes.eof || markdownLineEnding(code5)) {
      effects.exit("tableRow");
      return ok3(code5);
    }
    if (markdownSpace(code5)) {
      return factorySpace(effects, bodyRowBreak, types.whitespace)(code5);
    }
    effects.enter(types.data);
    return bodyRowData(code5);
  }
  function bodyRowData(code5) {
    if (code5 === codes.eof || code5 === codes.verticalBar || markdownLineEndingOrSpace(code5)) {
      effects.exit(types.data);
      return bodyRowBreak(code5);
    }
    effects.consume(code5);
    return code5 === codes.backslash ? bodyRowEscape : bodyRowData;
  }
  function bodyRowEscape(code5) {
    if (code5 === codes.backslash || code5 === codes.verticalBar) {
      effects.consume(code5);
      return bodyRowData;
    }
    return bodyRowData(code5);
  }
}
function resolveTable(events, context) {
  let index7 = -1;
  let inFirstCellAwaitingPipe = true;
  let rowKind = 0;
  let lastCell = [0, 0, 0, 0];
  let cell3 = [0, 0, 0, 0];
  let afterHeadAwaitingFirstBodyRow = false;
  let lastTableEnd = 0;
  let currentTable;
  let currentBody;
  let currentCell;
  const map6 = new EditMap();
  while (++index7 < events.length) {
    const event = events[index7];
    const token2 = event[1];
    if (event[0] === "enter") {
      if (token2.type === "tableHead") {
        afterHeadAwaitingFirstBodyRow = false;
        if (lastTableEnd !== 0) {
          ok2(currentTable, "there should be a table opening");
          flushTableEnd(map6, context, lastTableEnd, currentTable, currentBody);
          currentBody = void 0;
          lastTableEnd = 0;
        }
        currentTable = {
          type: "table",
          start: Object.assign({}, token2.start),
          // Note: correct end is set later.
          end: Object.assign({}, token2.end)
        };
        map6.add(index7, 0, [["enter", currentTable, context]]);
      } else if (token2.type === "tableRow" || token2.type === "tableDelimiterRow") {
        inFirstCellAwaitingPipe = true;
        currentCell = void 0;
        lastCell = [0, 0, 0, 0];
        cell3 = [0, index7 + 1, 0, 0];
        if (afterHeadAwaitingFirstBodyRow) {
          afterHeadAwaitingFirstBodyRow = false;
          currentBody = {
            type: "tableBody",
            start: Object.assign({}, token2.start),
            // Note: correct end is set later.
            end: Object.assign({}, token2.end)
          };
          map6.add(index7, 0, [["enter", currentBody, context]]);
        }
        rowKind = token2.type === "tableDelimiterRow" ? 2 : currentBody ? 3 : 1;
      } else if (rowKind && (token2.type === types.data || token2.type === "tableDelimiterMarker" || token2.type === "tableDelimiterFiller")) {
        inFirstCellAwaitingPipe = false;
        if (cell3[2] === 0) {
          if (lastCell[1] !== 0) {
            cell3[0] = cell3[1];
            currentCell = flushCell(
              map6,
              context,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
            lastCell = [0, 0, 0, 0];
          }
          cell3[2] = index7;
        }
      } else if (token2.type === "tableCellDivider") {
        if (inFirstCellAwaitingPipe) {
          inFirstCellAwaitingPipe = false;
        } else {
          if (lastCell[1] !== 0) {
            cell3[0] = cell3[1];
            currentCell = flushCell(
              map6,
              context,
              lastCell,
              rowKind,
              void 0,
              currentCell
            );
          }
          lastCell = cell3;
          cell3 = [lastCell[1], index7, 0, 0];
        }
      }
    } else if (token2.type === "tableHead") {
      afterHeadAwaitingFirstBodyRow = true;
      lastTableEnd = index7;
    } else if (token2.type === "tableRow" || token2.type === "tableDelimiterRow") {
      lastTableEnd = index7;
      if (lastCell[1] !== 0) {
        cell3[0] = cell3[1];
        currentCell = flushCell(
          map6,
          context,
          lastCell,
          rowKind,
          index7,
          currentCell
        );
      } else if (cell3[1] !== 0) {
        currentCell = flushCell(map6, context, cell3, rowKind, index7, currentCell);
      }
      rowKind = 0;
    } else if (rowKind && (token2.type === types.data || token2.type === "tableDelimiterMarker" || token2.type === "tableDelimiterFiller")) {
      cell3[3] = index7;
    }
  }
  if (lastTableEnd !== 0) {
    ok2(currentTable, "expected table opening");
    flushTableEnd(map6, context, lastTableEnd, currentTable, currentBody);
  }
  map6.consume(context.events);
  index7 = -1;
  while (++index7 < context.events.length) {
    const event = context.events[index7];
    if (event[0] === "enter" && event[1].type === "table") {
      event[1]._align = gfmTableAlign(context.events, index7);
    }
  }
  return events;
}
function flushCell(map6, context, range2, rowKind, rowEnd, previousCell) {
  const groupName = rowKind === 1 ? "tableHeader" : rowKind === 2 ? "tableDelimiter" : "tableData";
  const valueName = "tableContent";
  if (range2[0] !== 0) {
    ok2(previousCell, "expected previous cell enter");
    previousCell.end = Object.assign({}, getPoint(context.events, range2[0]));
    map6.add(range2[0], 0, [["exit", previousCell, context]]);
  }
  const now = getPoint(context.events, range2[1]);
  previousCell = {
    type: groupName,
    start: Object.assign({}, now),
    // Note: correct end is set later.
    end: Object.assign({}, now)
  };
  map6.add(range2[1], 0, [["enter", previousCell, context]]);
  if (range2[2] !== 0) {
    const relatedStart = getPoint(context.events, range2[2]);
    const relatedEnd = getPoint(context.events, range2[3]);
    const valueToken = {
      type: valueName,
      start: Object.assign({}, relatedStart),
      end: Object.assign({}, relatedEnd)
    };
    map6.add(range2[2], 0, [["enter", valueToken, context]]);
    ok2(range2[3] !== 0);
    if (rowKind !== 2) {
      const start2 = context.events[range2[2]];
      const end2 = context.events[range2[3]];
      start2[1].end = Object.assign({}, end2[1].end);
      start2[1].type = types.chunkText;
      start2[1].contentType = constants2.contentTypeText;
      if (range2[3] > range2[2] + 1) {
        const a2 = range2[2] + 1;
        const b2 = range2[3] - range2[2] - 1;
        map6.add(a2, b2, []);
      }
    }
    map6.add(range2[3] + 1, 0, [["exit", valueToken, context]]);
  }
  if (rowEnd !== void 0) {
    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));
    map6.add(rowEnd, 0, [["exit", previousCell, context]]);
    previousCell = void 0;
  }
  return previousCell;
}
function flushTableEnd(map6, context, index7, table3, tableBody) {
  const exits = [];
  const related = getPoint(context.events, index7);
  if (tableBody) {
    tableBody.end = Object.assign({}, related);
    exits.push(["exit", tableBody, context]);
  }
  table3.end = Object.assign({}, related);
  exits.push(["exit", table3, context]);
  map6.add(index7 + 1, 0, exits);
}
function getPoint(events, index7) {
  const event = events[index7];
  const side = event[0] === "enter" ? "start" : "end";
  return event[1][side];
}

// node_modules/micromark-extension-gfm-tagfilter/index.js
var reFlow = /<(\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\t\n\f\r />])/gi;
var reText = new RegExp("^" + reFlow.source, "i");

// node_modules/micromark-extension-gfm-task-list-item/dev/lib/syntax.js
var tasklistCheck = { tokenize: tokenizeTasklistCheck };
var gfmTaskListItem = {
  text: { [codes.leftSquareBracket]: tasklistCheck }
};
function tokenizeTasklistCheck(effects, ok3, nok) {
  const self2 = this;
  return open;
  function open(code5) {
    ok2(code5 === codes.leftSquareBracket, "expected `[`");
    if (
      // Exit if there’s stuff before.
      self2.previous !== codes.eof || // Exit if not in the first content that is the first child of a list
      // item.
      !self2._gfmTasklistFirstContentOfListItem
    ) {
      return nok(code5);
    }
    effects.enter("taskListCheck");
    effects.enter("taskListCheckMarker");
    effects.consume(code5);
    effects.exit("taskListCheckMarker");
    return inside;
  }
  function inside(code5) {
    if (markdownLineEndingOrSpace(code5)) {
      effects.enter("taskListCheckValueUnchecked");
      effects.consume(code5);
      effects.exit("taskListCheckValueUnchecked");
      return close2;
    }
    if (code5 === codes.uppercaseX || code5 === codes.lowercaseX) {
      effects.enter("taskListCheckValueChecked");
      effects.consume(code5);
      effects.exit("taskListCheckValueChecked");
      return close2;
    }
    return nok(code5);
  }
  function close2(code5) {
    if (code5 === codes.rightSquareBracket) {
      effects.enter("taskListCheckMarker");
      effects.consume(code5);
      effects.exit("taskListCheckMarker");
      effects.exit("taskListCheck");
      return after;
    }
    return nok(code5);
  }
  function after(code5) {
    if (markdownLineEnding(code5)) {
      return ok3(code5);
    }
    if (markdownSpace(code5)) {
      return effects.check({ tokenize: spaceThenNonSpace }, ok3, nok)(code5);
    }
    return nok(code5);
  }
}
function spaceThenNonSpace(effects, ok3, nok) {
  return factorySpace(effects, after, types.whitespace);
  function after(code5) {
    return code5 === codes.eof ? nok(code5) : ok3(code5);
  }
}

// node_modules/micromark-extension-gfm/index.js
function gfm(options2) {
  return combineExtensions([
    gfmAutolinkLiteral,
    gfmFootnote(),
    gfmStrikethrough(options2),
    gfmTable,
    gfmTaskListItem
  ]);
}

// node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js
function escapeStringRegexp(string3) {
  if (typeof string3 !== "string") {
    throw new TypeError("Expected a string");
  }
  return string3.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}

// node_modules/mdast-util-find-and-replace/lib/index.js
var own10 = {}.hasOwnProperty;
var findAndReplace = (
  /**
   * @type {(
   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &
   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)
   * )}
   **/
  /**
   * @template {Node} Tree
   * @param {Tree} tree
   * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find
   * @param {Replace | Options | null | undefined} [replace]
   * @param {Options | null | undefined} [options]
   * @returns {Tree}
   */
  function(tree, find5, replace4, options2) {
    let settings;
    let schema;
    if (typeof find5 === "string" || find5 instanceof RegExp) {
      schema = [[find5, replace4]];
      settings = options2;
    } else {
      schema = find5;
      settings = replace4;
    }
    if (!settings) {
      settings = {};
    }
    const ignored = convert(settings.ignore || []);
    const pairs = toPairs(schema);
    let pairIndex = -1;
    while (++pairIndex < pairs.length) {
      visitParents(tree, "text", visitor);
    }
    return tree;
    function visitor(node4, parents) {
      let index7 = -1;
      let grandparent;
      while (++index7 < parents.length) {
        const parent = parents[index7];
        if (ignored(
          parent,
          // @ts-expect-error: TS doesn’t understand but it’s perfect.
          grandparent ? grandparent.children.indexOf(parent) : void 0,
          grandparent
        )) {
          return;
        }
        grandparent = parent;
      }
      if (grandparent) {
        return handler(node4, parents);
      }
    }
    function handler(node4, parents) {
      const parent = parents[parents.length - 1];
      const find6 = pairs[pairIndex][0];
      const replace5 = pairs[pairIndex][1];
      let start2 = 0;
      const index7 = parent.children.indexOf(node4);
      let change = false;
      let nodes = [];
      find6.lastIndex = 0;
      let match2 = find6.exec(node4.value);
      while (match2) {
        const position5 = match2.index;
        const matchObject = {
          index: match2.index,
          input: match2.input,
          // @ts-expect-error: stack is fine.
          stack: [...parents, node4]
        };
        let value = replace5(...match2, matchObject);
        if (typeof value === "string") {
          value = value.length > 0 ? { type: "text", value } : void 0;
        }
        if (value !== false) {
          if (start2 !== position5) {
            nodes.push({
              type: "text",
              value: node4.value.slice(start2, position5)
            });
          }
          if (Array.isArray(value)) {
            nodes.push(...value);
          } else if (value) {
            nodes.push(value);
          }
          start2 = position5 + match2[0].length;
          change = true;
        }
        if (!find6.global) {
          break;
        }
        match2 = find6.exec(node4.value);
      }
      if (change) {
        if (start2 < node4.value.length) {
          nodes.push({ type: "text", value: node4.value.slice(start2) });
        }
        parent.children.splice(index7, 1, ...nodes);
      } else {
        nodes = [node4];
      }
      return index7 + nodes.length;
    }
  }
);
function toPairs(schema) {
  const result = [];
  if (typeof schema !== "object") {
    throw new TypeError("Expected array or object as schema");
  }
  if (Array.isArray(schema)) {
    let index7 = -1;
    while (++index7 < schema.length) {
      result.push([
        toExpression(schema[index7][0]),
        toFunction(schema[index7][1])
      ]);
    }
  } else {
    let key2;
    for (key2 in schema) {
      if (own10.call(schema, key2)) {
        result.push([toExpression(key2), toFunction(schema[key2])]);
      }
    }
  }
  return result;
}
function toExpression(find5) {
  return typeof find5 === "string" ? new RegExp(escapeStringRegexp(find5), "g") : find5;
}
function toFunction(replace4) {
  return typeof replace4 === "function" ? replace4 : () => replace4;
}

// node_modules/mdast-util-gfm-autolink-literal/lib/index.js
var inConstruct = "phrasing";
var notInConstruct = ["autolink", "link", "image", "label"];
var gfmAutolinkLiteralFromMarkdown = {
  transforms: [transformGfmAutolinkLiterals],
  enter: {
    literalAutolink: enterLiteralAutolink,
    literalAutolinkEmail: enterLiteralAutolinkValue,
    literalAutolinkHttp: enterLiteralAutolinkValue,
    literalAutolinkWww: enterLiteralAutolinkValue
  },
  exit: {
    literalAutolink: exitLiteralAutolink,
    literalAutolinkEmail: exitLiteralAutolinkEmail,
    literalAutolinkHttp: exitLiteralAutolinkHttp,
    literalAutolinkWww: exitLiteralAutolinkWww
  }
};
var gfmAutolinkLiteralToMarkdown = {
  unsafe: [
    {
      character: "@",
      before: "[+\\-.\\w]",
      after: "[\\-.\\w]",
      inConstruct,
      notInConstruct
    },
    {
      character: ".",
      before: "[Ww]",
      after: "[\\-.\\w]",
      inConstruct,
      notInConstruct
    },
    { character: ":", before: "[ps]", after: "\\/", inConstruct, notInConstruct }
  ]
};
function enterLiteralAutolink(token2) {
  this.enter({ type: "link", title: null, url: "", children: [] }, token2);
}
function enterLiteralAutolinkValue(token2) {
  this.config.enter.autolinkProtocol.call(this, token2);
}
function exitLiteralAutolinkHttp(token2) {
  this.config.exit.autolinkProtocol.call(this, token2);
}
function exitLiteralAutolinkWww(token2) {
  this.config.exit.data.call(this, token2);
  const node4 = (
    /** @type {Link} */
    this.stack[this.stack.length - 1]
  );
  node4.url = "http://" + this.sliceSerialize(token2);
}
function exitLiteralAutolinkEmail(token2) {
  this.config.exit.autolinkEmail.call(this, token2);
}
function exitLiteralAutolink(token2) {
  this.exit(token2);
}
function transformGfmAutolinkLiterals(tree) {
  findAndReplace(
    tree,
    [
      [/(https?:\/\/|www(?=\.))([-.\w]+)([^ \t\r\n]*)/gi, findUrl],
      [/([-.\w+]+)@([-\w]+(?:\.[-\w]+)+)/g, findEmail]
    ],
    { ignore: ["link", "linkReference"] }
  );
}
function findUrl(_2, protocol, domain3, path3, match2) {
  let prefix5 = "";
  if (!previous2(match2)) {
    return false;
  }
  if (/^w/i.test(protocol)) {
    domain3 = protocol + domain3;
    protocol = "";
    prefix5 = "http://";
  }
  if (!isCorrectDomain(domain3)) {
    return false;
  }
  const parts = splitUrl(domain3 + path3);
  if (!parts[0])
    return false;
  const result = {
    type: "link",
    title: null,
    url: prefix5 + protocol + parts[0],
    children: [{ type: "text", value: protocol + parts[0] }]
  };
  if (parts[1]) {
    return [result, { type: "text", value: parts[1] }];
  }
  return result;
}
function findEmail(_2, atext, label, match2) {
  if (
    // Not an expected previous character.
    !previous2(match2, true) || // Label ends in not allowed character.
    /[-\d_]$/.test(label)
  ) {
    return false;
  }
  return {
    type: "link",
    title: null,
    url: "mailto:" + atext + "@" + label,
    children: [{ type: "text", value: atext + "@" + label }]
  };
}
function isCorrectDomain(domain3) {
  const parts = domain3.split(".");
  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\d]/.test(parts[parts.length - 2]))) {
    return false;
  }
  return true;
}
function splitUrl(url) {
  const trailExec = /[!"&'),.:;<>?\]}]+$/.exec(url);
  if (!trailExec) {
    return [url, void 0];
  }
  url = url.slice(0, trailExec.index);
  let trail2 = trailExec[0];
  let closingParenIndex = trail2.indexOf(")");
  const openingParens = ccount(url, "(");
  let closingParens = ccount(url, ")");
  while (closingParenIndex !== -1 && openingParens > closingParens) {
    url += trail2.slice(0, closingParenIndex + 1);
    trail2 = trail2.slice(closingParenIndex + 1);
    closingParenIndex = trail2.indexOf(")");
    closingParens++;
  }
  return [url, trail2];
}
function previous2(match2, email) {
  const code5 = match2.input.charCodeAt(match2.index - 1);
  return (match2.index === 0 || unicodeWhitespace(code5) || unicodePunctuation(code5)) && (!email || code5 !== 47);
}

// node_modules/micromark-util-decode-numeric-character-reference/dev/index.js
function decodeNumericCharacterReference(value, base5) {
  const code5 = Number.parseInt(value, base5);
  if (
    // C0 except for HT, LF, FF, CR, space
    code5 < codes.ht || code5 === codes.vt || code5 > codes.cr && code5 < codes.space || // Control character (DEL) of the basic block and C1 controls.
    code5 > codes.tilde && code5 < 160 || // Lone high surrogates and low surrogates.
    code5 > 55295 && code5 < 57344 || // Noncharacters.
    code5 > 64975 && code5 < 65008 || (code5 & 65535) === 65535 || (code5 & 65535) === 65534 || // Out of range
    code5 > 1114111
  ) {
    return values.replacementCharacter;
  }
  return String.fromCharCode(code5);
}

// node_modules/micromark-util-decode-string/dev/index.js
var characterEscapeOrReference = /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
function decodeString(value) {
  return value.replace(characterEscapeOrReference, decode);
}
function decode($02, $1, $2) {
  if ($1) {
    return $1;
  }
  const head2 = $2.charCodeAt(0);
  if (head2 === codes.numberSign) {
    const head3 = $2.charCodeAt(1);
    const hex = head3 === codes.lowercaseX || head3 === codes.uppercaseX;
    return decodeNumericCharacterReference(
      $2.slice(hex ? 2 : 1),
      hex ? constants2.numericBaseHexadecimal : constants2.numericBaseDecimal
    );
  }
  return decodeNamedCharacterReference($2) || $02;
}

// node_modules/mdast-util-to-markdown/lib/util/association.js
function association(node4) {
  if (node4.label || !node4.identifier) {
    return node4.label || "";
  }
  return decodeString(node4.identifier);
}

// node_modules/mdast-util-to-markdown/lib/util/container-flow.js
function containerFlow(parent, state, info) {
  const indexStack = state.indexStack;
  const children = parent.children || [];
  const tracker = state.createTracker(info);
  const results = [];
  let index7 = -1;
  indexStack.push(-1);
  while (++index7 < children.length) {
    const child = children[index7];
    indexStack[indexStack.length - 1] = index7;
    results.push(
      tracker.move(
        state.handle(child, parent, state, {
          before: "\n",
          after: "\n",
          ...tracker.current()
        })
      )
    );
    if (child.type !== "list") {
      state.bulletLastUsed = void 0;
    }
    if (index7 < children.length - 1) {
      results.push(
        tracker.move(between(child, children[index7 + 1], parent, state))
      );
    }
  }
  indexStack.pop();
  return results.join("");
}
function between(left2, right2, parent, state) {
  let index7 = state.join.length;
  while (index7--) {
    const result = state.join[index7](left2, right2, parent, state);
    if (result === true || result === 1) {
      break;
    }
    if (typeof result === "number") {
      return "\n".repeat(1 + result);
    }
    if (result === false) {
      return "\n\n<!---->\n\n";
    }
  }
  return "\n\n";
}

// node_modules/mdast-util-to-markdown/lib/util/indent-lines.js
var eol = /\r?\n|\r/g;
function indentLines(value, map6) {
  const result = [];
  let start2 = 0;
  let line3 = 0;
  let match2;
  while (match2 = eol.exec(value)) {
    one7(value.slice(start2, match2.index));
    result.push(match2[0]);
    start2 = match2.index + match2[0].length;
    line3++;
  }
  one7(value.slice(start2));
  return result.join("");
  function one7(value2) {
    result.push(map6(value2, line3, !value2));
  }
}

// node_modules/mdast-util-to-markdown/lib/util/pattern-compile.js
function patternCompile(pattern) {
  if (!pattern._compiled) {
    const before = (pattern.atBreak ? "[\\r\\n][\\t ]*" : "") + (pattern.before ? "(?:" + pattern.before + ")" : "");
    pattern._compiled = new RegExp(
      (before ? "(" + before + ")" : "") + (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? "\\" : "") + pattern.character + (pattern.after ? "(?:" + pattern.after + ")" : ""),
      "g"
    );
  }
  return pattern._compiled;
}

// node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js
function patternInScope(stack, pattern) {
  return listInScope(stack, pattern.inConstruct, true) && !listInScope(stack, pattern.notInConstruct, false);
}
function listInScope(stack, list6, none2) {
  if (typeof list6 === "string") {
    list6 = [list6];
  }
  if (!list6 || list6.length === 0) {
    return none2;
  }
  let index7 = -1;
  while (++index7 < list6.length) {
    if (stack.includes(list6[index7])) {
      return true;
    }
  }
  return false;
}

// node_modules/mdast-util-to-markdown/lib/util/safe.js
function safe(state, input3, config) {
  const value = (config.before || "") + (input3 || "") + (config.after || "");
  const positions = [];
  const result = [];
  const infos = {};
  let index7 = -1;
  while (++index7 < state.unsafe.length) {
    const pattern = state.unsafe[index7];
    if (!patternInScope(state.stack, pattern)) {
      continue;
    }
    const expression = patternCompile(pattern);
    let match2;
    while (match2 = expression.exec(value)) {
      const before = "before" in pattern || Boolean(pattern.atBreak);
      const after = "after" in pattern;
      const position5 = match2.index + (before ? match2[1].length : 0);
      if (positions.includes(position5)) {
        if (infos[position5].before && !before) {
          infos[position5].before = false;
        }
        if (infos[position5].after && !after) {
          infos[position5].after = false;
        }
      } else {
        positions.push(position5);
        infos[position5] = { before, after };
      }
    }
  }
  positions.sort(numerical);
  let start2 = config.before ? config.before.length : 0;
  const end2 = value.length - (config.after ? config.after.length : 0);
  index7 = -1;
  while (++index7 < positions.length) {
    const position5 = positions[index7];
    if (position5 < start2 || position5 >= end2) {
      continue;
    }
    if (position5 + 1 < end2 && positions[index7 + 1] === position5 + 1 && infos[position5].after && !infos[position5 + 1].before && !infos[position5 + 1].after || positions[index7 - 1] === position5 - 1 && infos[position5].before && !infos[position5 - 1].before && !infos[position5 - 1].after) {
      continue;
    }
    if (start2 !== position5) {
      result.push(escapeBackslashes(value.slice(start2, position5), "\\"));
    }
    start2 = position5;
    if (/[!-/:-@[-`{-~]/.test(value.charAt(position5)) && (!config.encode || !config.encode.includes(value.charAt(position5)))) {
      result.push("\\");
    } else {
      result.push(
        "&#x" + value.charCodeAt(position5).toString(16).toUpperCase() + ";"
      );
      start2++;
    }
  }
  result.push(escapeBackslashes(value.slice(start2, end2), config.after));
  return result.join("");
}
function numerical(a2, b2) {
  return a2 - b2;
}
function escapeBackslashes(value, after) {
  const expression = /\\(?=[!-/:-@[-`{-~])/g;
  const positions = [];
  const results = [];
  const whole = value + after;
  let index7 = -1;
  let start2 = 0;
  let match2;
  while (match2 = expression.exec(whole)) {
    positions.push(match2.index);
  }
  while (++index7 < positions.length) {
    if (start2 !== positions[index7]) {
      results.push(value.slice(start2, positions[index7]));
    }
    results.push("\\");
    start2 = positions[index7];
  }
  results.push(value.slice(start2));
  return results.join("");
}

// node_modules/mdast-util-to-markdown/lib/util/track.js
function track(config) {
  const options2 = config || {};
  const now = options2.now || {};
  let lineShift = options2.lineShift || 0;
  let line3 = now.line || 1;
  let column2 = now.column || 1;
  return { move, current, shift: shift3 };
  function current() {
    return { now: { line: line3, column: column2 }, lineShift };
  }
  function shift3(value) {
    lineShift += value;
  }
  function move(input3) {
    const value = input3 || "";
    const chunks = value.split(/\r?\n|\r/g);
    const tail = chunks[chunks.length - 1];
    line3 += chunks.length - 1;
    column2 = chunks.length === 1 ? column2 + tail.length : 1 + tail.length + lineShift;
    return value;
  }
}

// node_modules/mdast-util-gfm-footnote/lib/index.js
footnoteReference.peek = footnoteReferencePeek;
function gfmFootnoteFromMarkdown() {
  return {
    enter: {
      gfmFootnoteDefinition: enterFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,
      gfmFootnoteCall: enterFootnoteCall,
      gfmFootnoteCallString: enterFootnoteCallString
    },
    exit: {
      gfmFootnoteDefinition: exitFootnoteDefinition,
      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,
      gfmFootnoteCall: exitFootnoteCall,
      gfmFootnoteCallString: exitFootnoteCallString
    }
  };
}
function gfmFootnoteToMarkdown() {
  return {
    // This is on by default already.
    unsafe: [{ character: "[", inConstruct: ["phrasing", "label", "reference"] }],
    handlers: { footnoteDefinition, footnoteReference }
  };
}
function enterFootnoteDefinition(token2) {
  this.enter(
    { type: "footnoteDefinition", identifier: "", label: "", children: [] },
    token2
  );
}
function enterFootnoteDefinitionLabelString() {
  this.buffer();
}
function exitFootnoteDefinitionLabelString(token2) {
  const label = this.resume();
  const node4 = (
    /** @type {FootnoteDefinition} */
    this.stack[this.stack.length - 1]
  );
  node4.label = label;
  node4.identifier = normalizeIdentifier(
    this.sliceSerialize(token2)
  ).toLowerCase();
}
function exitFootnoteDefinition(token2) {
  this.exit(token2);
}
function enterFootnoteCall(token2) {
  this.enter({ type: "footnoteReference", identifier: "", label: "" }, token2);
}
function enterFootnoteCallString() {
  this.buffer();
}
function exitFootnoteCallString(token2) {
  const label = this.resume();
  const node4 = (
    /** @type {FootnoteDefinition} */
    this.stack[this.stack.length - 1]
  );
  node4.label = label;
  node4.identifier = normalizeIdentifier(
    this.sliceSerialize(token2)
  ).toLowerCase();
}
function exitFootnoteCall(token2) {
  this.exit(token2);
}
function footnoteReference(node4, _2, context, safeOptions) {
  const tracker = track(safeOptions);
  let value = tracker.move("[^");
  const exit3 = context.enter("footnoteReference");
  const subexit = context.enter("reference");
  value += tracker.move(
    safe(context, association(node4), {
      ...tracker.current(),
      before: value,
      after: "]"
    })
  );
  subexit();
  exit3();
  value += tracker.move("]");
  return value;
}
function footnoteReferencePeek() {
  return "[";
}
function footnoteDefinition(node4, _2, context, safeOptions) {
  const tracker = track(safeOptions);
  let value = tracker.move("[^");
  const exit3 = context.enter("footnoteDefinition");
  const subexit = context.enter("label");
  value += tracker.move(
    safe(context, association(node4), {
      ...tracker.current(),
      before: value,
      after: "]"
    })
  );
  subexit();
  value += tracker.move(
    "]:" + (node4.children && node4.children.length > 0 ? " " : "")
  );
  tracker.shift(4);
  value += tracker.move(
    indentLines(containerFlow(node4, context, tracker.current()), map)
  );
  exit3();
  return value;
}
function map(line3, index7, blank) {
  if (index7 === 0) {
    return line3;
  }
  return (blank ? "" : "    ") + line3;
}

// node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js
function containerPhrasing(parent, state, info) {
  const indexStack = state.indexStack;
  const children = parent.children || [];
  const results = [];
  let index7 = -1;
  let before = info.before;
  indexStack.push(-1);
  let tracker = state.createTracker(info);
  while (++index7 < children.length) {
    const child = children[index7];
    let after;
    indexStack[indexStack.length - 1] = index7;
    if (index7 + 1 < children.length) {
      let handle4 = state.handle.handlers[children[index7 + 1].type];
      if (handle4 && handle4.peek)
        handle4 = handle4.peek;
      after = handle4 ? handle4(children[index7 + 1], parent, state, {
        before: "",
        after: "",
        ...tracker.current()
      }).charAt(0) : "";
    } else {
      after = info.after;
    }
    if (results.length > 0 && (before === "\r" || before === "\n") && child.type === "html") {
      results[results.length - 1] = results[results.length - 1].replace(
        /(\r?\n|\r)$/,
        " "
      );
      before = " ";
      tracker = state.createTracker(info);
      tracker.move(results.join(""));
    }
    results.push(
      tracker.move(
        state.handle(child, parent, state, {
          ...tracker.current(),
          before,
          after
        })
      )
    );
    before = results[results.length - 1].slice(-1);
  }
  indexStack.pop();
  return results.join("");
}

// node_modules/mdast-util-gfm-strikethrough/lib/index.js
var constructsWithoutStrikethrough = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
handleDelete.peek = peekDelete;
var gfmStrikethroughFromMarkdown = {
  canContainEols: ["delete"],
  enter: { strikethrough: enterStrikethrough },
  exit: { strikethrough: exitStrikethrough }
};
var gfmStrikethroughToMarkdown = {
  unsafe: [
    {
      character: "~",
      inConstruct: "phrasing",
      notInConstruct: constructsWithoutStrikethrough
    }
  ],
  handlers: { delete: handleDelete }
};
function enterStrikethrough(token2) {
  this.enter({ type: "delete", children: [] }, token2);
}
function exitStrikethrough(token2) {
  this.exit(token2);
}
function handleDelete(node4, _2, context, safeOptions) {
  const tracker = track(safeOptions);
  const exit3 = context.enter("strikethrough");
  let value = tracker.move("~~");
  value += containerPhrasing(node4, context, {
    ...tracker.current(),
    before: value,
    after: "~"
  });
  value += tracker.move("~~");
  exit3();
  return value;
}
function peekDelete() {
  return "~";
}

// node_modules/mdast-util-to-markdown/lib/handle/inline-code.js
inlineCode2.peek = inlineCodePeek;
function inlineCode2(node4, _2, state) {
  let value = node4.value || "";
  let sequence = "`";
  let index7 = -1;
  while (new RegExp("(^|[^`])" + sequence + "([^`]|$)").test(value)) {
    sequence += "`";
  }
  if (/[^ \r\n]/.test(value) && (/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value) || /^`|`$/.test(value))) {
    value = " " + value + " ";
  }
  while (++index7 < state.unsafe.length) {
    const pattern = state.unsafe[index7];
    const expression = patternCompile(pattern);
    let match2;
    if (!pattern.atBreak)
      continue;
    while (match2 = expression.exec(value)) {
      let position5 = match2.index;
      if (value.charCodeAt(position5) === 10 && value.charCodeAt(position5 - 1) === 13) {
        position5--;
      }
      value = value.slice(0, position5) + " " + value.slice(match2.index + 1);
    }
  }
  return sequence + value + sequence;
}
function inlineCodePeek() {
  return "`";
}

// node_modules/markdown-table/index.js
function markdownTable(table3, options2 = {}) {
  const align = (options2.align || []).concat();
  const stringLength = options2.stringLength || defaultStringLength;
  const alignments = [];
  const cellMatrix = [];
  const sizeMatrix = [];
  const longestCellByColumn = [];
  let mostCellsPerRow = 0;
  let rowIndex = -1;
  while (++rowIndex < table3.length) {
    const row3 = [];
    const sizes25 = [];
    let columnIndex2 = -1;
    if (table3[rowIndex].length > mostCellsPerRow) {
      mostCellsPerRow = table3[rowIndex].length;
    }
    while (++columnIndex2 < table3[rowIndex].length) {
      const cell3 = serialize2(table3[rowIndex][columnIndex2]);
      if (options2.alignDelimiters !== false) {
        const size3 = stringLength(cell3);
        sizes25[columnIndex2] = size3;
        if (longestCellByColumn[columnIndex2] === void 0 || size3 > longestCellByColumn[columnIndex2]) {
          longestCellByColumn[columnIndex2] = size3;
        }
      }
      row3.push(cell3);
    }
    cellMatrix[rowIndex] = row3;
    sizeMatrix[rowIndex] = sizes25;
  }
  let columnIndex = -1;
  if (typeof align === "object" && "length" in align) {
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = toAlignment(align[columnIndex]);
    }
  } else {
    const code5 = toAlignment(align);
    while (++columnIndex < mostCellsPerRow) {
      alignments[columnIndex] = code5;
    }
  }
  columnIndex = -1;
  const row2 = [];
  const sizes24 = [];
  while (++columnIndex < mostCellsPerRow) {
    const code5 = alignments[columnIndex];
    let before = "";
    let after = "";
    if (code5 === 99) {
      before = ":";
      after = ":";
    } else if (code5 === 108) {
      before = ":";
    } else if (code5 === 114) {
      after = ":";
    }
    let size3 = options2.alignDelimiters === false ? 1 : Math.max(
      1,
      longestCellByColumn[columnIndex] - before.length - after.length
    );
    const cell3 = before + "-".repeat(size3) + after;
    if (options2.alignDelimiters !== false) {
      size3 = before.length + size3 + after.length;
      if (size3 > longestCellByColumn[columnIndex]) {
        longestCellByColumn[columnIndex] = size3;
      }
      sizes24[columnIndex] = size3;
    }
    row2[columnIndex] = cell3;
  }
  cellMatrix.splice(1, 0, row2);
  sizeMatrix.splice(1, 0, sizes24);
  rowIndex = -1;
  const lines2 = [];
  while (++rowIndex < cellMatrix.length) {
    const row3 = cellMatrix[rowIndex];
    const sizes25 = sizeMatrix[rowIndex];
    columnIndex = -1;
    const line3 = [];
    while (++columnIndex < mostCellsPerRow) {
      const cell3 = row3[columnIndex] || "";
      let before = "";
      let after = "";
      if (options2.alignDelimiters !== false) {
        const size3 = longestCellByColumn[columnIndex] - (sizes25[columnIndex] || 0);
        const code5 = alignments[columnIndex];
        if (code5 === 114) {
          before = " ".repeat(size3);
        } else if (code5 === 99) {
          if (size3 % 2) {
            before = " ".repeat(size3 / 2 + 0.5);
            after = " ".repeat(size3 / 2 - 0.5);
          } else {
            before = " ".repeat(size3 / 2);
            after = before;
          }
        } else {
          after = " ".repeat(size3);
        }
      }
      if (options2.delimiterStart !== false && !columnIndex) {
        line3.push("|");
      }
      if (options2.padding !== false && // Don’t add the opening space if we’re not aligning and the cell is
      // empty: there will be a closing space.
      !(options2.alignDelimiters === false && cell3 === "") && (options2.delimiterStart !== false || columnIndex)) {
        line3.push(" ");
      }
      if (options2.alignDelimiters !== false) {
        line3.push(before);
      }
      line3.push(cell3);
      if (options2.alignDelimiters !== false) {
        line3.push(after);
      }
      if (options2.padding !== false) {
        line3.push(" ");
      }
      if (options2.delimiterEnd !== false || columnIndex !== mostCellsPerRow - 1) {
        line3.push("|");
      }
    }
    lines2.push(
      options2.delimiterEnd === false ? line3.join("").replace(/ +$/, "") : line3.join("")
    );
  }
  return lines2.join("\n");
}
function serialize2(value) {
  return value === null || value === void 0 ? "" : String(value);
}
function defaultStringLength(value) {
  return value.length;
}
function toAlignment(value) {
  const code5 = typeof value === "string" ? value.codePointAt(0) : 0;
  return code5 === 67 || code5 === 99 ? 99 : code5 === 76 || code5 === 108 ? 108 : code5 === 82 || code5 === 114 ? 114 : 0;
}

// node_modules/mdast-util-gfm-table/lib/index.js
var gfmTableFromMarkdown = {
  enter: {
    table: enterTable,
    tableData: enterCell,
    tableHeader: enterCell,
    tableRow: enterRow
  },
  exit: {
    codeText: exitCodeText,
    table: exitTable,
    tableData: exit2,
    tableHeader: exit2,
    tableRow: exit2
  }
};
function enterTable(token2) {
  const align = token2._align;
  this.enter(
    {
      type: "table",
      align: align.map((d) => d === "none" ? null : d),
      children: []
    },
    token2
  );
  this.setData("inTable", true);
}
function exitTable(token2) {
  this.exit(token2);
  this.setData("inTable");
}
function enterRow(token2) {
  this.enter({ type: "tableRow", children: [] }, token2);
}
function exit2(token2) {
  this.exit(token2);
}
function enterCell(token2) {
  this.enter({ type: "tableCell", children: [] }, token2);
}
function exitCodeText(token2) {
  let value = this.resume();
  if (this.getData("inTable")) {
    value = value.replace(/\\([\\|])/g, replace3);
  }
  const node4 = (
    /** @type {InlineCode} */
    this.stack[this.stack.length - 1]
  );
  node4.value = value;
  this.exit(token2);
}
function replace3($02, $1) {
  return $1 === "|" ? $1 : $02;
}
function gfmTableToMarkdown(options2) {
  const settings = options2 || {};
  const padding2 = settings.tableCellPadding;
  const alignDelimiters = settings.tablePipeAlign;
  const stringLength = settings.stringLength;
  const around = padding2 ? " " : "|";
  return {
    unsafe: [
      { character: "\r", inConstruct: "tableCell" },
      { character: "\n", inConstruct: "tableCell" },
      // A pipe, when followed by a tab or space (padding), or a dash or colon
      // (unpadded delimiter row), could result in a table.
      { atBreak: true, character: "|", after: "[	 :-]" },
      // A pipe in a cell must be encoded.
      { character: "|", inConstruct: "tableCell" },
      // A colon must be followed by a dash, in which case it could start a
      // delimiter row.
      { atBreak: true, character: ":", after: "-" },
      // A delimiter row can also start with a dash, when followed by more
      // dashes, a colon, or a pipe.
      // This is a stricter version than the built in check for lists, thematic
      // breaks, and setex heading underlines though:
      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>
      { atBreak: true, character: "-", after: "[:|-]" }
    ],
    handlers: {
      table: handleTable,
      tableRow: handleTableRow,
      tableCell: handleTableCell,
      inlineCode: inlineCodeWithTable
    }
  };
  function handleTable(node4, _2, context, safeOptions) {
    return serializeData(
      handleTableAsData(node4, context, safeOptions),
      node4.align
    );
  }
  function handleTableRow(node4, _2, context, safeOptions) {
    const row2 = handleTableRowAsData(node4, context, safeOptions);
    const value = serializeData([row2]);
    return value.slice(0, value.indexOf("\n"));
  }
  function handleTableCell(node4, _2, context, safeOptions) {
    const exit3 = context.enter("tableCell");
    const subexit = context.enter("phrasing");
    const value = containerPhrasing(node4, context, {
      ...safeOptions,
      before: around,
      after: around
    });
    subexit();
    exit3();
    return value;
  }
  function serializeData(matrix, align) {
    return markdownTable(matrix, {
      align,
      // @ts-expect-error: `markdown-table` types should support `null`.
      alignDelimiters,
      // @ts-expect-error: `markdown-table` types should support `null`.
      padding: padding2,
      // @ts-expect-error: `markdown-table` types should support `null`.
      stringLength
    });
  }
  function handleTableAsData(node4, context, safeOptions) {
    const children = node4.children;
    let index7 = -1;
    const result = [];
    const subexit = context.enter("table");
    while (++index7 < children.length) {
      result[index7] = handleTableRowAsData(
        children[index7],
        context,
        safeOptions
      );
    }
    subexit();
    return result;
  }
  function handleTableRowAsData(node4, context, safeOptions) {
    const children = node4.children;
    let index7 = -1;
    const result = [];
    const subexit = context.enter("tableRow");
    while (++index7 < children.length) {
      result[index7] = handleTableCell(
        children[index7],
        node4,
        context,
        safeOptions
      );
    }
    subexit();
    return result;
  }
  function inlineCodeWithTable(node4, parent, context) {
    let value = inlineCode2(node4, parent, context);
    if (context.stack.includes("tableCell")) {
      value = value.replace(/\|/g, "\\$&");
    }
    return value;
  }
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet.js
function checkBullet(state) {
  const marker = state.options.bullet || "*";
  if (marker !== "*" && marker !== "+" && marker !== "-") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bullet`, expected `*`, `+`, or `-`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js
function checkListItemIndent(state) {
  const style3 = state.options.listItemIndent || "tab";
  if (style3 === 1 || style3 === "1") {
    return "one";
  }
  if (style3 !== "tab" && style3 !== "one" && style3 !== "mixed") {
    throw new Error(
      "Cannot serialize items with `" + style3 + "` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`"
    );
  }
  return style3;
}

// node_modules/mdast-util-to-markdown/lib/handle/list-item.js
function listItem(node4, parent, state, info) {
  const listItemIndent = checkListItemIndent(state);
  let bullet = state.bulletCurrent || checkBullet(state);
  if (parent && parent.type === "list" && parent.ordered) {
    bullet = (typeof parent.start === "number" && parent.start > -1 ? parent.start : 1) + (state.options.incrementListMarker === false ? 0 : parent.children.indexOf(node4)) + bullet;
  }
  let size3 = bullet.length + 1;
  if (listItemIndent === "tab" || listItemIndent === "mixed" && (parent && parent.type === "list" && parent.spread || node4.spread)) {
    size3 = Math.ceil(size3 / 4) * 4;
  }
  const tracker = state.createTracker(info);
  tracker.move(bullet + " ".repeat(size3 - bullet.length));
  tracker.shift(size3);
  const exit3 = state.enter("listItem");
  const value = state.indentLines(
    state.containerFlow(node4, tracker.current()),
    map6
  );
  exit3();
  return value;
  function map6(line3, index7, blank) {
    if (index7) {
      return (blank ? "" : " ".repeat(size3)) + line3;
    }
    return (blank ? bullet : bullet + " ".repeat(size3 - bullet.length)) + line3;
  }
}

// node_modules/mdast-util-gfm-task-list-item/lib/index.js
var gfmTaskListItemFromMarkdown = {
  exit: {
    taskListCheckValueChecked: exitCheck,
    taskListCheckValueUnchecked: exitCheck,
    paragraph: exitParagraphWithTaskListItem
  }
};
var gfmTaskListItemToMarkdown = {
  unsafe: [{ atBreak: true, character: "-", after: "[:|-]" }],
  handlers: { listItem: listItemWithTaskListItem }
};
function exitCheck(token2) {
  const node4 = (
    /** @type {ListItem} */
    this.stack[this.stack.length - 2]
  );
  node4.checked = token2.type === "taskListCheckValueChecked";
}
function exitParagraphWithTaskListItem(token2) {
  const parent = (
    /** @type {Parents} */
    this.stack[this.stack.length - 2]
  );
  if (parent && parent.type === "listItem" && typeof parent.checked === "boolean") {
    const node4 = (
      /** @type {Paragraph} */
      this.stack[this.stack.length - 1]
    );
    const head2 = node4.children[0];
    if (head2 && head2.type === "text") {
      const siblings2 = parent.children;
      let index7 = -1;
      let firstParaghraph;
      while (++index7 < siblings2.length) {
        const sibling = siblings2[index7];
        if (sibling.type === "paragraph") {
          firstParaghraph = sibling;
          break;
        }
      }
      if (firstParaghraph === node4) {
        head2.value = head2.value.slice(1);
        if (head2.value.length === 0) {
          node4.children.shift();
        } else if (node4.position && head2.position && typeof head2.position.start.offset === "number") {
          head2.position.start.column++;
          head2.position.start.offset++;
          node4.position.start = Object.assign({}, head2.position.start);
        }
      }
    }
  }
  this.exit(token2);
}
function listItemWithTaskListItem(node4, parent, context, safeOptions) {
  const head2 = node4.children[0];
  const checkable = typeof node4.checked === "boolean" && head2 && head2.type === "paragraph";
  const checkbox = "[" + (node4.checked ? "x" : " ") + "] ";
  const tracker = track(safeOptions);
  if (checkable) {
    tracker.move(checkbox);
  }
  let value = listItem(node4, parent, context, {
    ...safeOptions,
    ...tracker.current()
  });
  if (checkable) {
    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
  }
  return value;
  function check($02) {
    return $02 + checkbox;
  }
}

// node_modules/mdast-util-gfm/lib/index.js
function gfmFromMarkdown() {
  return [
    gfmAutolinkLiteralFromMarkdown,
    gfmFootnoteFromMarkdown(),
    gfmStrikethroughFromMarkdown,
    gfmTableFromMarkdown,
    gfmTaskListItemFromMarkdown
  ];
}
function gfmToMarkdown(options2) {
  return {
    extensions: [
      gfmAutolinkLiteralToMarkdown,
      gfmFootnoteToMarkdown(),
      gfmStrikethroughToMarkdown,
      gfmTableToMarkdown(options2),
      gfmTaskListItemToMarkdown
    ]
  };
}

// node_modules/remark-gfm/index.js
function remarkGfm(options2 = {}) {
  const data = this.data();
  add("micromarkExtensions", gfm(options2));
  add("fromMarkdownExtensions", gfmFromMarkdown());
  add("toMarkdownExtensions", gfmToMarkdown(options2));
  function add(field, value) {
    const list6 = (
      /** @type {unknown[]} */
      // Other extensions
      /* c8 ignore next 2 */
      data[field] ? data[field] : data[field] = []
    );
    list6.push(value);
  }
}

// node_modules/micromark/dev/lib/initialize/content.js
var content4 = { tokenize: initializeContent };
function initializeContent(effects) {
  const contentStart = effects.attempt(
    this.parser.constructs.contentInitial,
    afterContentStartConstruct,
    paragraphInitial
  );
  let previous3;
  return contentStart;
  function afterContentStartConstruct(code5) {
    ok2(
      code5 === codes.eof || markdownLineEnding(code5),
      "expected eol or eof"
    );
    if (code5 === codes.eof) {
      effects.consume(code5);
      return;
    }
    effects.enter(types.lineEnding);
    effects.consume(code5);
    effects.exit(types.lineEnding);
    return factorySpace(effects, contentStart, types.linePrefix);
  }
  function paragraphInitial(code5) {
    ok2(
      code5 !== codes.eof && !markdownLineEnding(code5),
      "expected anything other than a line ending or EOF"
    );
    effects.enter(types.paragraph);
    return lineStart(code5);
  }
  function lineStart(code5) {
    const token2 = effects.enter(types.chunkText, {
      contentType: constants2.contentTypeText,
      previous: previous3
    });
    if (previous3) {
      previous3.next = token2;
    }
    previous3 = token2;
    return data(code5);
  }
  function data(code5) {
    if (code5 === codes.eof) {
      effects.exit(types.chunkText);
      effects.exit(types.paragraph);
      effects.consume(code5);
      return;
    }
    if (markdownLineEnding(code5)) {
      effects.consume(code5);
      effects.exit(types.chunkText);
      return lineStart;
    }
    effects.consume(code5);
    return data;
  }
}

// node_modules/micromark/dev/lib/initialize/document.js
var document2 = { tokenize: initializeDocument };
var containerConstruct = { tokenize: tokenizeContainer };
function initializeDocument(effects) {
  const self2 = this;
  const stack = [];
  let continued = 0;
  let childFlow;
  let childToken;
  let lineStartOffset;
  return start2;
  function start2(code5) {
    if (continued < stack.length) {
      const item = stack[continued];
      self2.containerState = item[1];
      ok2(
        item[0].continuation,
        "expected `continuation` to be defined on container construct"
      );
      return effects.attempt(
        item[0].continuation,
        documentContinue,
        checkNewContainers
      )(code5);
    }
    return checkNewContainers(code5);
  }
  function documentContinue(code5) {
    ok2(
      self2.containerState,
      "expected `containerState` to be defined after continuation"
    );
    continued++;
    if (self2.containerState._closeFlow) {
      self2.containerState._closeFlow = void 0;
      if (childFlow) {
        closeFlow();
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let point5;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === types.chunkFlow) {
          point5 = self2.events[indexBeforeFlow][1].end;
          break;
        }
      }
      ok2(point5, "could not find previous flow chunk");
      exitContainers(continued);
      let index7 = indexBeforeExits;
      while (index7 < self2.events.length) {
        self2.events[index7][1].end = Object.assign({}, point5);
        index7++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index7;
      return checkNewContainers(code5);
    }
    return start2(code5);
  }
  function checkNewContainers(code5) {
    if (continued === stack.length) {
      if (!childFlow) {
        return documentContinued(code5);
      }
      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
        return flowStart(code5);
      }
      self2.interrupt = Boolean(
        childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
      );
    }
    self2.containerState = {};
    return effects.check(
      containerConstruct,
      thereIsANewContainer,
      thereIsNoNewContainer
    )(code5);
  }
  function thereIsANewContainer(code5) {
    if (childFlow)
      closeFlow();
    exitContainers(continued);
    return documentContinued(code5);
  }
  function thereIsNoNewContainer(code5) {
    self2.parser.lazy[self2.now().line] = continued !== stack.length;
    lineStartOffset = self2.now().offset;
    return flowStart(code5);
  }
  function documentContinued(code5) {
    self2.containerState = {};
    return effects.attempt(
      containerConstruct,
      containerContinue,
      flowStart
    )(code5);
  }
  function containerContinue(code5) {
    ok2(
      self2.currentConstruct,
      "expected `currentConstruct` to be defined on tokenizer"
    );
    ok2(
      self2.containerState,
      "expected `containerState` to be defined on tokenizer"
    );
    continued++;
    stack.push([self2.currentConstruct, self2.containerState]);
    return documentContinued(code5);
  }
  function flowStart(code5) {
    if (code5 === codes.eof) {
      if (childFlow)
        closeFlow();
      exitContainers(0);
      effects.consume(code5);
      return;
    }
    childFlow = childFlow || self2.parser.flow(self2.now());
    effects.enter(types.chunkFlow, {
      contentType: constants2.contentTypeFlow,
      previous: childToken,
      _tokenizer: childFlow
    });
    return flowContinue(code5);
  }
  function flowContinue(code5) {
    if (code5 === codes.eof) {
      writeToChild(effects.exit(types.chunkFlow), true);
      exitContainers(0);
      effects.consume(code5);
      return;
    }
    if (markdownLineEnding(code5)) {
      effects.consume(code5);
      writeToChild(effects.exit(types.chunkFlow));
      continued = 0;
      self2.interrupt = void 0;
      return start2;
    }
    effects.consume(code5);
    return flowContinue;
  }
  function writeToChild(token2, eof) {
    ok2(childFlow, "expected `childFlow` to be defined when continuing");
    const stream = self2.sliceStream(token2);
    if (eof)
      stream.push(null);
    token2.previous = childToken;
    if (childToken)
      childToken.next = token2;
    childToken = token2;
    childFlow.defineSkip(token2.start);
    childFlow.write(stream);
    if (self2.parser.lazy[token2.start.line]) {
      let index7 = childFlow.events.length;
      while (index7--) {
        if (
          // The token starts before the line ending…
          childFlow.events[index7][1].start.offset < lineStartOffset && // …and either is not ended yet…
          (!childFlow.events[index7][1].end || // …or ends after it.
          childFlow.events[index7][1].end.offset > lineStartOffset)
        ) {
          return;
        }
      }
      const indexBeforeExits = self2.events.length;
      let indexBeforeFlow = indexBeforeExits;
      let seen;
      let point5;
      while (indexBeforeFlow--) {
        if (self2.events[indexBeforeFlow][0] === "exit" && self2.events[indexBeforeFlow][1].type === types.chunkFlow) {
          if (seen) {
            point5 = self2.events[indexBeforeFlow][1].end;
            break;
          }
          seen = true;
        }
      }
      ok2(point5, "could not find previous flow chunk");
      exitContainers(continued);
      index7 = indexBeforeExits;
      while (index7 < self2.events.length) {
        self2.events[index7][1].end = Object.assign({}, point5);
        index7++;
      }
      splice(
        self2.events,
        indexBeforeFlow + 1,
        0,
        self2.events.slice(indexBeforeExits)
      );
      self2.events.length = index7;
    }
  }
  function exitContainers(size3) {
    let index7 = stack.length;
    while (index7-- > size3) {
      const entry = stack[index7];
      self2.containerState = entry[1];
      ok2(
        entry[0].exit,
        "expected `exit` to be defined on container construct"
      );
      entry[0].exit.call(self2, effects);
    }
    stack.length = size3;
  }
  function closeFlow() {
    ok2(
      self2.containerState,
      "expected `containerState` to be defined when closing flow"
    );
    ok2(childFlow, "expected `childFlow` to be defined when closing it");
    childFlow.write([codes.eof]);
    childToken = void 0;
    childFlow = void 0;
    self2.containerState._closeFlow = void 0;
  }
}
function tokenizeContainer(effects, ok3, nok) {
  return factorySpace(
    effects,
    effects.attempt(this.parser.constructs.document, ok3, nok),
    types.linePrefix,
    this.parser.constructs.disable.null.includes("codeIndented") ? void 0 : constants2.tabSize
  );
}

// node_modules/micromark/dev/lib/initialize/flow.js
var flow = { tokenize: initializeFlow };
function initializeFlow(effects) {
  const self2 = this;
  const initial = effects.attempt(
    // Try to parse a blank line.
    blankLine,
    atBlankEnding,
    // Try to parse initial flow (essentially, only code).
    effects.attempt(
      this.parser.constructs.flowInitial,
      afterConstruct,
      factorySpace(
        effects,
        effects.attempt(
          this.parser.constructs.flow,
          afterConstruct,
          effects.attempt(content3, afterConstruct)
        ),
        types.linePrefix
      )
    )
  );
  return initial;
  function atBlankEnding(code5) {
    ok2(
      code5 === codes.eof || markdownLineEnding(code5),
      "expected eol or eof"
    );
    if (code5 === codes.eof) {
      effects.consume(code5);
      return;
    }
    effects.enter(types.lineEndingBlank);
    effects.consume(code5);
    effects.exit(types.lineEndingBlank);
    self2.currentConstruct = void 0;
    return initial;
  }
  function afterConstruct(code5) {
    ok2(
      code5 === codes.eof || markdownLineEnding(code5),
      "expected eol or eof"
    );
    if (code5 === codes.eof) {
      effects.consume(code5);
      return;
    }
    effects.enter(types.lineEnding);
    effects.consume(code5);
    effects.exit(types.lineEnding);
    self2.currentConstruct = void 0;
    return initial;
  }
}

// node_modules/micromark/dev/lib/initialize/text.js
var resolver = { resolveAll: createResolver() };
var string = initializeFactory("string");
var text4 = initializeFactory("text");
function initializeFactory(field) {
  return {
    tokenize: initializeText,
    resolveAll: createResolver(
      field === "text" ? resolveAllLineSuffixes : void 0
    )
  };
  function initializeText(effects) {
    const self2 = this;
    const constructs2 = this.parser.constructs[field];
    const text10 = effects.attempt(constructs2, start2, notText);
    return start2;
    function start2(code5) {
      return atBreak(code5) ? text10(code5) : notText(code5);
    }
    function notText(code5) {
      if (code5 === codes.eof) {
        effects.consume(code5);
        return;
      }
      effects.enter(types.data);
      effects.consume(code5);
      return data;
    }
    function data(code5) {
      if (atBreak(code5)) {
        effects.exit(types.data);
        return text10(code5);
      }
      effects.consume(code5);
      return data;
    }
    function atBreak(code5) {
      if (code5 === codes.eof) {
        return true;
      }
      const list6 = constructs2[code5];
      let index7 = -1;
      if (list6) {
        while (++index7 < list6.length) {
          const item = list6[index7];
          if (!item.previous || item.previous.call(self2, self2.previous)) {
            return true;
          }
        }
      }
      return false;
    }
  }
}
function createResolver(extraResolver) {
  return resolveAllText;
  function resolveAllText(events, context) {
    let index7 = -1;
    let enter2;
    while (++index7 <= events.length) {
      if (enter2 === void 0) {
        if (events[index7] && events[index7][1].type === types.data) {
          enter2 = index7;
          index7++;
        }
      } else if (!events[index7] || events[index7][1].type !== types.data) {
        if (index7 !== enter2 + 2) {
          events[enter2][1].end = events[index7 - 1][1].end;
          events.splice(enter2 + 2, index7 - enter2 - 2);
          index7 = enter2 + 2;
        }
        enter2 = void 0;
      }
    }
    return extraResolver ? extraResolver(events, context) : events;
  }
}
function resolveAllLineSuffixes(events, context) {
  let eventIndex = 0;
  while (++eventIndex <= events.length) {
    if ((eventIndex === events.length || events[eventIndex][1].type === types.lineEnding) && events[eventIndex - 1][1].type === types.data) {
      const data = events[eventIndex - 1][1];
      const chunks = context.sliceStream(data);
      let index7 = chunks.length;
      let bufferIndex = -1;
      let size3 = 0;
      let tabs;
      while (index7--) {
        const chunk = chunks[index7];
        if (typeof chunk === "string") {
          bufferIndex = chunk.length;
          while (chunk.charCodeAt(bufferIndex - 1) === codes.space) {
            size3++;
            bufferIndex--;
          }
          if (bufferIndex)
            break;
          bufferIndex = -1;
        } else if (chunk === codes.horizontalTab) {
          tabs = true;
          size3++;
        } else if (chunk === codes.virtualSpace) {
        } else {
          index7++;
          break;
        }
      }
      if (size3) {
        const token2 = {
          type: eventIndex === events.length || tabs || size3 < constants2.hardBreakPrefixSizeMin ? types.lineSuffix : types.hardBreakTrailing,
          start: {
            line: data.end.line,
            column: data.end.column - size3,
            offset: data.end.offset - size3,
            _index: data.start._index + index7,
            _bufferIndex: index7 ? bufferIndex : data.start._bufferIndex + bufferIndex
          },
          end: Object.assign({}, data.end)
        };
        data.end = Object.assign({}, token2.start);
        if (data.start.offset === data.end.offset) {
          Object.assign(data, token2);
        } else {
          events.splice(
            eventIndex,
            0,
            ["enter", token2, context],
            ["exit", token2, context]
          );
          eventIndex += 2;
        }
      }
      eventIndex++;
    }
  }
  return events;
}

// node_modules/micromark/dev/lib/create-tokenizer.js
var import_debug = __toESM(require_browser(), 1);
var debug = (0, import_debug.default)("micromark");
function createTokenizer(parser, initialize, from5) {
  let point5 = Object.assign(
    from5 ? Object.assign({}, from5) : { line: 1, column: 1, offset: 0 },
    { _index: 0, _bufferIndex: -1 }
  );
  const columnStart = {};
  const resolveAllConstructs = [];
  let chunks = [];
  let stack = [];
  let consumed = true;
  const effects = {
    consume,
    enter: enter2,
    exit: exit3,
    attempt: constructFactory(onsuccessfulconstruct),
    check: constructFactory(onsuccessfulcheck),
    interrupt: constructFactory(onsuccessfulcheck, { interrupt: true })
  };
  const context = {
    previous: codes.eof,
    code: codes.eof,
    containerState: {},
    events: [],
    parser,
    sliceStream,
    sliceSerialize,
    now,
    defineSkip,
    write: write3
  };
  let state = initialize.tokenize.call(context, effects);
  let expectedCode;
  if (initialize.resolveAll) {
    resolveAllConstructs.push(initialize);
  }
  return context;
  function write3(slice3) {
    chunks = push(chunks, slice3);
    main2();
    if (chunks[chunks.length - 1] !== codes.eof) {
      return [];
    }
    addResult(initialize, 0);
    context.events = resolveAll(resolveAllConstructs, context.events, context);
    return context.events;
  }
  function sliceSerialize(token2, expandTabs) {
    return serializeChunks(sliceStream(token2), expandTabs);
  }
  function sliceStream(token2) {
    return sliceChunks(chunks, token2);
  }
  function now() {
    return Object.assign({}, point5);
  }
  function defineSkip(value) {
    columnStart[value.line] = value.column;
    accountForPotentialSkip();
    debug("position: define skip: `%j`", point5);
  }
  function main2() {
    let chunkIndex;
    while (point5._index < chunks.length) {
      const chunk = chunks[point5._index];
      if (typeof chunk === "string") {
        chunkIndex = point5._index;
        if (point5._bufferIndex < 0) {
          point5._bufferIndex = 0;
        }
        while (point5._index === chunkIndex && point5._bufferIndex < chunk.length) {
          go(chunk.charCodeAt(point5._bufferIndex));
        }
      } else {
        go(chunk);
      }
    }
  }
  function go(code5) {
    ok2(consumed === true, "expected character to be consumed");
    consumed = void 0;
    debug("main: passing `%s` to %s", code5, state && state.name);
    expectedCode = code5;
    ok2(typeof state === "function", "expected state");
    state = state(code5);
  }
  function consume(code5) {
    ok2(code5 === expectedCode, "expected given code to equal expected code");
    debug("consume: `%s`", code5);
    ok2(
      consumed === void 0,
      "expected code to not have been consumed: this might be because `return x(code)` instead of `return x` was used"
    );
    ok2(
      code5 === null ? context.events.length === 0 || context.events[context.events.length - 1][0] === "exit" : context.events[context.events.length - 1][0] === "enter",
      "expected last token to be open"
    );
    if (markdownLineEnding(code5)) {
      point5.line++;
      point5.column = 1;
      point5.offset += code5 === codes.carriageReturnLineFeed ? 2 : 1;
      accountForPotentialSkip();
      debug("position: after eol: `%j`", point5);
    } else if (code5 !== codes.virtualSpace) {
      point5.column++;
      point5.offset++;
    }
    if (point5._bufferIndex < 0) {
      point5._index++;
    } else {
      point5._bufferIndex++;
      if (point5._bufferIndex === chunks[point5._index].length) {
        point5._bufferIndex = -1;
        point5._index++;
      }
    }
    context.previous = code5;
    consumed = true;
  }
  function enter2(type, fields) {
    const token2 = fields || {};
    token2.type = type;
    token2.start = now();
    ok2(typeof type === "string", "expected string type");
    ok2(type.length > 0, "expected non-empty string");
    debug("enter: `%s`", type);
    context.events.push(["enter", token2, context]);
    stack.push(token2);
    return token2;
  }
  function exit3(type) {
    ok2(typeof type === "string", "expected string type");
    ok2(type.length > 0, "expected non-empty string");
    const token2 = stack.pop();
    ok2(token2, "cannot close w/o open tokens");
    token2.end = now();
    ok2(type === token2.type, "expected exit token to match current token");
    ok2(
      !(token2.start._index === token2.end._index && token2.start._bufferIndex === token2.end._bufferIndex),
      "expected non-empty token (`" + type + "`)"
    );
    debug("exit: `%s`", token2.type);
    context.events.push(["exit", token2, context]);
    return token2;
  }
  function onsuccessfulconstruct(construct, info) {
    addResult(construct, info.from);
  }
  function onsuccessfulcheck(_2, info) {
    info.restore();
  }
  function constructFactory(onreturn, fields) {
    return hook;
    function hook(constructs2, returnState, bogusState) {
      let listOfConstructs;
      let constructIndex;
      let currentConstruct;
      let info;
      return Array.isArray(constructs2) ? (
        /* c8 ignore next 1 */
        handleListOfConstructs(constructs2)
      ) : "tokenize" in constructs2 ? (
        // @ts-expect-error Looks like a construct.
        handleListOfConstructs([constructs2])
      ) : handleMapOfConstructs(constructs2);
      function handleMapOfConstructs(map6) {
        return start2;
        function start2(code5) {
          const def = code5 !== null && map6[code5];
          const all9 = code5 !== null && map6.null;
          const list6 = [
            // To do: add more extension tests.
            /* c8 ignore next 2 */
            ...Array.isArray(def) ? def : def ? [def] : [],
            ...Array.isArray(all9) ? all9 : all9 ? [all9] : []
          ];
          return handleListOfConstructs(list6)(code5);
        }
      }
      function handleListOfConstructs(list6) {
        listOfConstructs = list6;
        constructIndex = 0;
        if (list6.length === 0) {
          ok2(bogusState, "expected `bogusState` to be given");
          return bogusState;
        }
        return handleConstruct(list6[constructIndex]);
      }
      function handleConstruct(construct) {
        return start2;
        function start2(code5) {
          info = store();
          currentConstruct = construct;
          if (!construct.partial) {
            context.currentConstruct = construct;
          }
          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {
            return nok(code5);
          }
          return construct.tokenize.call(
            // If we do have fields, create an object w/ `context` as its
            // prototype.
            // This allows a “live binding”, which is needed for `interrupt`.
            fields ? Object.assign(Object.create(context), fields) : context,
            effects,
            ok3,
            nok
          )(code5);
        }
      }
      function ok3(code5) {
        ok2(code5 === expectedCode, "expected code");
        consumed = true;
        onreturn(currentConstruct, info);
        return returnState;
      }
      function nok(code5) {
        ok2(code5 === expectedCode, "expected code");
        consumed = true;
        info.restore();
        if (++constructIndex < listOfConstructs.length) {
          return handleConstruct(listOfConstructs[constructIndex]);
        }
        return bogusState;
      }
    }
  }
  function addResult(construct, from6) {
    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
      resolveAllConstructs.push(construct);
    }
    if (construct.resolve) {
      splice(
        context.events,
        from6,
        context.events.length - from6,
        construct.resolve(context.events.slice(from6), context)
      );
    }
    if (construct.resolveTo) {
      context.events = construct.resolveTo(context.events, context);
    }
    ok2(
      construct.partial || context.events.length === 0 || context.events[context.events.length - 1][0] === "exit",
      "expected last token to end"
    );
  }
  function store() {
    const startPoint = now();
    const startPrevious = context.previous;
    const startCurrentConstruct = context.currentConstruct;
    const startEventsIndex = context.events.length;
    const startStack = Array.from(stack);
    return { restore, from: startEventsIndex };
    function restore() {
      point5 = startPoint;
      context.previous = startPrevious;
      context.currentConstruct = startCurrentConstruct;
      context.events.length = startEventsIndex;
      stack = startStack;
      accountForPotentialSkip();
      debug("position: restore: `%j`", point5);
    }
  }
  function accountForPotentialSkip() {
    if (point5.line in columnStart && point5.column < 2) {
      point5.column = columnStart[point5.line];
      point5.offset += columnStart[point5.line] - 1;
    }
  }
}
function sliceChunks(chunks, token2) {
  const startIndex = token2.start._index;
  const startBufferIndex = token2.start._bufferIndex;
  const endIndex = token2.end._index;
  const endBufferIndex = token2.end._bufferIndex;
  let view;
  if (startIndex === endIndex) {
    ok2(endBufferIndex > -1, "expected non-negative end buffer index");
    ok2(startBufferIndex > -1, "expected non-negative start buffer index");
    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
  } else {
    view = chunks.slice(startIndex, endIndex);
    if (startBufferIndex > -1) {
      view[0] = view[0].slice(startBufferIndex);
    }
    if (endBufferIndex > 0) {
      view.push(chunks[endIndex].slice(0, endBufferIndex));
    }
  }
  return view;
}
function serializeChunks(chunks, expandTabs) {
  let index7 = -1;
  const result = [];
  let atTab;
  while (++index7 < chunks.length) {
    const chunk = chunks[index7];
    let value;
    if (typeof chunk === "string") {
      value = chunk;
    } else
      switch (chunk) {
        case codes.carriageReturn: {
          value = values.cr;
          break;
        }
        case codes.lineFeed: {
          value = values.lf;
          break;
        }
        case codes.carriageReturnLineFeed: {
          value = values.cr + values.lf;
          break;
        }
        case codes.horizontalTab: {
          value = expandTabs ? values.space : values.ht;
          break;
        }
        case codes.virtualSpace: {
          if (!expandTabs && atTab)
            continue;
          value = values.space;
          break;
        }
        default: {
          ok2(typeof chunk === "number", "expected number");
          value = String.fromCharCode(chunk);
        }
      }
    atTab = chunk === codes.horizontalTab;
    result.push(value);
  }
  return result.join("");
}

// node_modules/micromark/dev/lib/constructs.js
var constructs_exports = {};
__export(constructs_exports, {
  attentionMarkers: () => attentionMarkers,
  contentInitial: () => contentInitial,
  disable: () => disable,
  document: () => document3,
  flow: () => flow2,
  flowInitial: () => flowInitial,
  insideSpan: () => insideSpan,
  string: () => string2,
  text: () => text5
});
var document3 = {
  [codes.asterisk]: list3,
  [codes.plusSign]: list3,
  [codes.dash]: list3,
  [codes.digit0]: list3,
  [codes.digit1]: list3,
  [codes.digit2]: list3,
  [codes.digit3]: list3,
  [codes.digit4]: list3,
  [codes.digit5]: list3,
  [codes.digit6]: list3,
  [codes.digit7]: list3,
  [codes.digit8]: list3,
  [codes.digit9]: list3,
  [codes.greaterThan]: blockQuote
};
var contentInitial = {
  [codes.leftSquareBracket]: definition
};
var flowInitial = {
  [codes.horizontalTab]: codeIndented,
  [codes.virtualSpace]: codeIndented,
  [codes.space]: codeIndented
};
var flow2 = {
  [codes.numberSign]: headingAtx,
  [codes.asterisk]: thematicBreak,
  [codes.dash]: [setextUnderline, thematicBreak],
  [codes.lessThan]: htmlFlow,
  [codes.equalsTo]: setextUnderline,
  [codes.underscore]: thematicBreak,
  [codes.graveAccent]: codeFenced,
  [codes.tilde]: codeFenced
};
var string2 = {
  [codes.ampersand]: characterReference,
  [codes.backslash]: characterEscape
};
var text5 = {
  [codes.carriageReturn]: lineEnding,
  [codes.lineFeed]: lineEnding,
  [codes.carriageReturnLineFeed]: lineEnding,
  [codes.exclamationMark]: labelStartImage,
  [codes.ampersand]: characterReference,
  [codes.asterisk]: attention,
  [codes.lessThan]: [autolink, htmlText],
  [codes.leftSquareBracket]: labelStartLink,
  [codes.backslash]: [hardBreakEscape, characterEscape],
  [codes.rightSquareBracket]: labelEnd,
  [codes.underscore]: attention,
  [codes.graveAccent]: codeText
};
var insideSpan = { null: [attention, resolver] };
var attentionMarkers = { null: [codes.asterisk, codes.underscore] };
var disable = { null: [] };

// node_modules/micromark/dev/lib/parse.js
function parse5(options2 = {}) {
  const constructs2 = combineExtensions(
    // @ts-expect-error Same as above.
    [constructs_exports].concat(options2.extensions || [])
  );
  const parser = {
    defined: [],
    lazy: {},
    constructs: constructs2,
    content: create8(content4),
    document: create8(document2),
    flow: create8(flow),
    string: create8(string),
    text: create8(text4)
  };
  return parser;
  function create8(initial) {
    return creator;
    function creator(from5) {
      return createTokenizer(parser, initial, from5);
    }
  }
}

// node_modules/micromark/dev/lib/preprocess.js
var search2 = /[\0\t\n\r]/g;
function preprocess() {
  let column2 = 1;
  let buffer2 = "";
  let start2 = true;
  let atCarriageReturn;
  return preprocessor;
  function preprocessor(value, encoding, end2) {
    const chunks = [];
    let match2;
    let next2;
    let startPosition;
    let endPosition;
    let code5;
    value = buffer2 + value.toString(encoding);
    startPosition = 0;
    buffer2 = "";
    if (start2) {
      if (value.charCodeAt(0) === codes.byteOrderMarker) {
        startPosition++;
      }
      start2 = void 0;
    }
    while (startPosition < value.length) {
      search2.lastIndex = startPosition;
      match2 = search2.exec(value);
      endPosition = match2 && match2.index !== void 0 ? match2.index : value.length;
      code5 = value.charCodeAt(endPosition);
      if (!match2) {
        buffer2 = value.slice(startPosition);
        break;
      }
      if (code5 === codes.lf && startPosition === endPosition && atCarriageReturn) {
        chunks.push(codes.carriageReturnLineFeed);
        atCarriageReturn = void 0;
      } else {
        if (atCarriageReturn) {
          chunks.push(codes.carriageReturn);
          atCarriageReturn = void 0;
        }
        if (startPosition < endPosition) {
          chunks.push(value.slice(startPosition, endPosition));
          column2 += endPosition - startPosition;
        }
        switch (code5) {
          case codes.nul: {
            chunks.push(codes.replacementCharacter);
            column2++;
            break;
          }
          case codes.ht: {
            next2 = Math.ceil(column2 / constants2.tabSize) * constants2.tabSize;
            chunks.push(codes.horizontalTab);
            while (column2++ < next2)
              chunks.push(codes.virtualSpace);
            break;
          }
          case codes.lf: {
            chunks.push(codes.lineFeed);
            column2 = 1;
            break;
          }
          default: {
            atCarriageReturn = true;
            column2 = 1;
          }
        }
      }
      startPosition = endPosition + 1;
    }
    if (end2) {
      if (atCarriageReturn)
        chunks.push(codes.carriageReturn);
      if (buffer2)
        chunks.push(buffer2);
      chunks.push(codes.eof);
    }
    return chunks;
  }
}

// node_modules/micromark/dev/lib/postprocess.js
function postprocess(events) {
  while (!subtokenize(events)) {
  }
  return events;
}

// node_modules/unist-util-stringify-position/lib/index.js
function stringifyPosition(value) {
  if (!value || typeof value !== "object") {
    return "";
  }
  if ("position" in value || "type" in value) {
    return position3(value.position);
  }
  if ("start" in value || "end" in value) {
    return position3(value);
  }
  if ("line" in value || "column" in value) {
    return point2(value);
  }
  return "";
}
function point2(point5) {
  return index6(point5 && point5.line) + ":" + index6(point5 && point5.column);
}
function position3(pos) {
  return point2(pos && pos.start) + "-" + point2(pos && pos.end);
}
function index6(value) {
  return value && typeof value === "number" ? value : 1;
}

// node_modules/mdast-util-from-markdown/dev/lib/index.js
var own11 = {}.hasOwnProperty;
var fromMarkdown = (
  /**
   * @type {(
   *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
   *   ((value: Value, options?: Options | null | undefined) => Root)
   * )}
   */
  /**
   * @param {Value} value
   * @param {Encoding | Options | null | undefined} [encoding]
   * @param {Options | null | undefined} [options]
   * @returns {Root}
   */
  function(value, encoding, options2) {
    if (typeof encoding !== "string") {
      options2 = encoding;
      encoding = void 0;
    }
    return compiler(options2)(
      postprocess(
        // @ts-expect-error: micromark types need to accept `null`.
        parse5(options2).document().write(preprocess()(value, encoding, true))
      )
    );
  }
);
function compiler(options2) {
  const config = {
    transforms: [],
    canContainEols: ["emphasis", "fragment", "heading", "paragraph", "strong"],
    enter: {
      autolink: opener(link3),
      autolinkProtocol: onenterdata,
      autolinkEmail: onenterdata,
      atxHeading: opener(heading4),
      blockQuote: opener(blockQuote2),
      characterEscape: onenterdata,
      characterReference: onenterdata,
      codeFenced: opener(codeFlow),
      codeFencedFenceInfo: buffer2,
      codeFencedFenceMeta: buffer2,
      codeIndented: opener(codeFlow, buffer2),
      codeText: opener(codeText2, buffer2),
      codeTextData: onenterdata,
      data: onenterdata,
      codeFlowValue: onenterdata,
      definition: opener(definition3),
      definitionDestinationString: buffer2,
      definitionLabelString: buffer2,
      definitionTitleString: buffer2,
      emphasis: opener(emphasis3),
      hardBreakEscape: opener(hardBreak3),
      hardBreakTrailing: opener(hardBreak3),
      htmlFlow: opener(html7, buffer2),
      htmlFlowData: onenterdata,
      htmlText: opener(html7, buffer2),
      htmlTextData: onenterdata,
      image: opener(image3),
      label: buffer2,
      link: opener(link3),
      listItem: opener(listItem3),
      listItemValue: onenterlistitemvalue,
      listOrdered: opener(list6, onenterlistordered),
      listUnordered: opener(list6),
      paragraph: opener(paragraph3),
      reference: onenterreference,
      referenceString: buffer2,
      resourceDestinationString: buffer2,
      resourceTitleString: buffer2,
      setextHeading: opener(heading4),
      strong: opener(strong4),
      thematicBreak: opener(thematicBreak4)
    },
    exit: {
      atxHeading: closer(),
      atxHeadingSequence: onexitatxheadingsequence,
      autolink: closer(),
      autolinkEmail: onexitautolinkemail,
      autolinkProtocol: onexitautolinkprotocol,
      blockQuote: closer(),
      characterEscapeValue: onexitdata,
      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
      characterReferenceValue: onexitcharacterreferencevalue,
      codeFenced: closer(onexitcodefenced),
      codeFencedFence: onexitcodefencedfence,
      codeFencedFenceInfo: onexitcodefencedfenceinfo,
      codeFencedFenceMeta: onexitcodefencedfencemeta,
      codeFlowValue: onexitdata,
      codeIndented: closer(onexitcodeindented),
      codeText: closer(onexitcodetext),
      codeTextData: onexitdata,
      data: onexitdata,
      definition: closer(),
      definitionDestinationString: onexitdefinitiondestinationstring,
      definitionLabelString: onexitdefinitionlabelstring,
      definitionTitleString: onexitdefinitiontitlestring,
      emphasis: closer(),
      hardBreakEscape: closer(onexithardbreak),
      hardBreakTrailing: closer(onexithardbreak),
      htmlFlow: closer(onexithtmlflow),
      htmlFlowData: onexitdata,
      htmlText: closer(onexithtmltext),
      htmlTextData: onexitdata,
      image: closer(onexitimage),
      label: onexitlabel,
      labelText: onexitlabeltext,
      lineEnding: onexitlineending,
      link: closer(onexitlink),
      listItem: closer(),
      listOrdered: closer(),
      listUnordered: closer(),
      paragraph: closer(),
      referenceString: onexitreferencestring,
      resourceDestinationString: onexitresourcedestinationstring,
      resourceTitleString: onexitresourcetitlestring,
      resource: onexitresource,
      setextHeading: closer(onexitsetextheading),
      setextHeadingLineSequence: onexitsetextheadinglinesequence,
      setextHeadingText: onexitsetextheadingtext,
      strong: closer(),
      thematicBreak: closer()
    }
  };
  configure(config, (options2 || {}).mdastExtensions || []);
  const data = {};
  return compile2;
  function compile2(events) {
    let tree = { type: "root", children: [] };
    const context = {
      stack: [tree],
      tokenStack: [],
      config,
      enter: enter2,
      exit: exit3,
      buffer: buffer2,
      resume,
      setData,
      getData
    };
    const listStack = [];
    let index7 = -1;
    while (++index7 < events.length) {
      if (events[index7][1].type === types.listOrdered || events[index7][1].type === types.listUnordered) {
        if (events[index7][0] === "enter") {
          listStack.push(index7);
        } else {
          const tail = listStack.pop();
          ok2(typeof tail === "number", "expected list ot be open");
          index7 = prepareList(events, tail, index7);
        }
      }
    }
    index7 = -1;
    while (++index7 < events.length) {
      const handler = config[events[index7][0]];
      if (own11.call(handler, events[index7][1].type)) {
        handler[events[index7][1].type].call(
          Object.assign(
            { sliceSerialize: events[index7][2].sliceSerialize },
            context
          ),
          events[index7][1]
        );
      }
    }
    if (context.tokenStack.length > 0) {
      const tail = context.tokenStack[context.tokenStack.length - 1];
      const handler = tail[1] || defaultOnError;
      handler.call(context, void 0, tail[0]);
    }
    tree.position = {
      start: point3(
        events.length > 0 ? events[0][1].start : { line: 1, column: 1, offset: 0 }
      ),
      end: point3(
        events.length > 0 ? events[events.length - 2][1].end : { line: 1, column: 1, offset: 0 }
      )
    };
    index7 = -1;
    while (++index7 < config.transforms.length) {
      tree = config.transforms[index7](tree) || tree;
    }
    return tree;
  }
  function prepareList(events, start2, length4) {
    let index7 = start2 - 1;
    let containerBalance = -1;
    let listSpread = false;
    let listItem4;
    let lineIndex;
    let firstBlankLineIndex;
    let atMarker;
    while (++index7 <= length4) {
      const event = events[index7];
      if (event[1].type === types.listUnordered || event[1].type === types.listOrdered || event[1].type === types.blockQuote) {
        if (event[0] === "enter") {
          containerBalance++;
        } else {
          containerBalance--;
        }
        atMarker = void 0;
      } else if (event[1].type === types.lineEndingBlank) {
        if (event[0] === "enter") {
          if (listItem4 && !atMarker && !containerBalance && !firstBlankLineIndex) {
            firstBlankLineIndex = index7;
          }
          atMarker = void 0;
        }
      } else if (event[1].type === types.linePrefix || event[1].type === types.listItemValue || event[1].type === types.listItemMarker || event[1].type === types.listItemPrefix || event[1].type === types.listItemPrefixWhitespace) {
      } else {
        atMarker = void 0;
      }
      if (!containerBalance && event[0] === "enter" && event[1].type === types.listItemPrefix || containerBalance === -1 && event[0] === "exit" && (event[1].type === types.listUnordered || event[1].type === types.listOrdered)) {
        if (listItem4) {
          let tailIndex = index7;
          lineIndex = void 0;
          while (tailIndex--) {
            const tailEvent = events[tailIndex];
            if (tailEvent[1].type === types.lineEnding || tailEvent[1].type === types.lineEndingBlank) {
              if (tailEvent[0] === "exit")
                continue;
              if (lineIndex) {
                events[lineIndex][1].type = types.lineEndingBlank;
                listSpread = true;
              }
              tailEvent[1].type = types.lineEnding;
              lineIndex = tailIndex;
            } else if (tailEvent[1].type === types.linePrefix || tailEvent[1].type === types.blockQuotePrefix || tailEvent[1].type === types.blockQuotePrefixWhitespace || tailEvent[1].type === types.blockQuoteMarker || tailEvent[1].type === types.listItemIndent) {
            } else {
              break;
            }
          }
          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {
            listItem4._spread = true;
          }
          listItem4.end = Object.assign(
            {},
            lineIndex ? events[lineIndex][1].start : event[1].end
          );
          events.splice(lineIndex || index7, 0, ["exit", listItem4, event[2]]);
          index7++;
          length4++;
        }
        if (event[1].type === types.listItemPrefix) {
          listItem4 = {
            type: "listItem",
            // @ts-expect-error Patched
            _spread: false,
            start: Object.assign({}, event[1].start)
          };
          events.splice(index7, 0, ["enter", listItem4, event[2]]);
          index7++;
          length4++;
          firstBlankLineIndex = void 0;
          atMarker = true;
        }
      }
    }
    events[start2][1]._spread = listSpread;
    return length4;
  }
  function setData(key2, value) {
    data[key2] = value;
  }
  function getData(key2) {
    return data[key2];
  }
  function opener(create8, and) {
    return open;
    function open(token2) {
      enter2.call(this, create8(token2), token2);
      if (and)
        and.call(this, token2);
    }
  }
  function buffer2() {
    this.stack.push({ type: "fragment", children: [] });
  }
  function enter2(node4, token2, errorHandler) {
    const parent = this.stack[this.stack.length - 1];
    ok2(parent, "expected `parent`");
    ok2("children" in parent, "expected `parent`");
    parent.children.push(node4);
    this.stack.push(node4);
    this.tokenStack.push([token2, errorHandler]);
    node4.position = { start: point3(token2.start) };
    return node4;
  }
  function closer(and) {
    return close2;
    function close2(token2) {
      if (and)
        and.call(this, token2);
      exit3.call(this, token2);
    }
  }
  function exit3(token2, onExitError) {
    const node4 = this.stack.pop();
    ok2(node4, "expected `node`");
    const open = this.tokenStack.pop();
    if (!open) {
      throw new Error(
        "Cannot close `" + token2.type + "` (" + stringifyPosition({ start: token2.start, end: token2.end }) + "): it’s not open"
      );
    } else if (open[0].type !== token2.type) {
      if (onExitError) {
        onExitError.call(this, token2, open[0]);
      } else {
        const handler = open[1] || defaultOnError;
        handler.call(this, token2, open[0]);
      }
    }
    ok2(node4.type !== "fragment", "unexpected fragment `exit`ed");
    ok2(node4.position, "expected `position` to be defined");
    node4.position.end = point3(token2.end);
    return node4;
  }
  function resume() {
    return toString(this.stack.pop());
  }
  function onenterlistordered() {
    setData("expectingFirstListItemValue", true);
  }
  function onenterlistitemvalue(token2) {
    if (getData("expectingFirstListItemValue")) {
      const ancestor = this.stack[this.stack.length - 2];
      ok2(ancestor, "expected nodes on stack");
      ok2(ancestor.type === "list", "expected list on stack");
      ancestor.start = Number.parseInt(
        this.sliceSerialize(token2),
        constants2.numericBaseDecimal
      );
      setData("expectingFirstListItemValue");
    }
  }
  function onexitcodefencedfenceinfo() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "code", "expected code on stack");
    node4.lang = data2;
  }
  function onexitcodefencedfencemeta() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "code", "expected code on stack");
    node4.meta = data2;
  }
  function onexitcodefencedfence() {
    if (getData("flowCodeInside"))
      return;
    this.buffer();
    setData("flowCodeInside", true);
  }
  function onexitcodefenced() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "code", "expected code on stack");
    node4.value = data2.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, "");
    setData("flowCodeInside");
  }
  function onexitcodeindented() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "code", "expected code on stack");
    node4.value = data2.replace(/(\r?\n|\r)$/g, "");
  }
  function onexitdefinitionlabelstring(token2) {
    const label = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "definition", "expected definition on stack");
    node4.label = label;
    node4.identifier = normalizeIdentifier(
      this.sliceSerialize(token2)
    ).toLowerCase();
  }
  function onexitdefinitiontitlestring() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "definition", "expected definition on stack");
    node4.title = data2;
  }
  function onexitdefinitiondestinationstring() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "definition", "expected definition on stack");
    node4.url = data2;
  }
  function onexitatxheadingsequence(token2) {
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "heading", "expected heading on stack");
    if (!node4.depth) {
      const depth = this.sliceSerialize(token2).length;
      ok2(
        depth === 1 || depth === 2 || depth === 3 || depth === 4 || depth === 5 || depth === 6,
        "expected `depth` between `1` and `6`"
      );
      node4.depth = depth;
    }
  }
  function onexitsetextheadingtext() {
    setData("setextHeadingSlurpLineEnding", true);
  }
  function onexitsetextheadinglinesequence(token2) {
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "heading", "expected heading on stack");
    node4.depth = this.sliceSerialize(token2).charCodeAt(0) === codes.equalsTo ? 1 : 2;
  }
  function onexitsetextheading() {
    setData("setextHeadingSlurpLineEnding");
  }
  function onenterdata(token2) {
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2("children" in node4, "expected parent on stack");
    let tail = node4.children[node4.children.length - 1];
    if (!tail || tail.type !== "text") {
      tail = text10();
      tail.position = { start: point3(token2.start) };
      node4.children.push(tail);
    }
    this.stack.push(tail);
  }
  function onexitdata(token2) {
    const tail = this.stack.pop();
    ok2(tail, "expected a `node` to be on the stack");
    ok2("value" in tail, "expected a `literal` to be on the stack");
    ok2(tail.position, "expected `node` to have an open position");
    tail.value += this.sliceSerialize(token2);
    tail.position.end = point3(token2.end);
  }
  function onexitlineending(token2) {
    const context = this.stack[this.stack.length - 1];
    ok2(context, "expected `node`");
    if (getData("atHardBreak")) {
      ok2("children" in context, "expected `parent`");
      const tail = context.children[context.children.length - 1];
      ok2(tail.position, "expected tail to have a starting position");
      tail.position.end = point3(token2.end);
      setData("atHardBreak");
      return;
    }
    if (!getData("setextHeadingSlurpLineEnding") && config.canContainEols.includes(context.type)) {
      onenterdata.call(this, token2);
      onexitdata.call(this, token2);
    }
  }
  function onexithardbreak() {
    setData("atHardBreak", true);
  }
  function onexithtmlflow() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "html", "expected html on stack");
    node4.value = data2;
  }
  function onexithtmltext() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "html", "expected html on stack");
    node4.value = data2;
  }
  function onexitcodetext() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "inlineCode", "expected inline code on stack");
    node4.value = data2;
  }
  function onexitlink() {
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "link", "expected link on stack");
    if (getData("inReference")) {
      const referenceType = getData("referenceType") || "shortcut";
      node4.type += "Reference";
      node4.referenceType = referenceType;
      delete node4.url;
      delete node4.title;
    } else {
      delete node4.identifier;
      delete node4.label;
    }
    setData("referenceType");
  }
  function onexitimage() {
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "image", "expected image on stack");
    if (getData("inReference")) {
      const referenceType = getData("referenceType") || "shortcut";
      node4.type += "Reference";
      node4.referenceType = referenceType;
      delete node4.url;
      delete node4.title;
    } else {
      delete node4.identifier;
      delete node4.label;
    }
    setData("referenceType");
  }
  function onexitlabeltext(token2) {
    const string3 = this.sliceSerialize(token2);
    const ancestor = this.stack[this.stack.length - 2];
    ok2(ancestor, "expected ancestor on stack");
    ok2(
      ancestor.type === "image" || ancestor.type === "link",
      "expected image or link on stack"
    );
    ancestor.label = decodeString(string3);
    ancestor.identifier = normalizeIdentifier(string3).toLowerCase();
  }
  function onexitlabel() {
    const fragment = this.stack[this.stack.length - 1];
    ok2(fragment, "expected node on stack");
    ok2(fragment.type === "fragment", "expected fragment on stack");
    const value = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(
      node4.type === "image" || node4.type === "link",
      "expected image or link on stack"
    );
    setData("inReference", true);
    if (node4.type === "link") {
      const children = fragment.children;
      node4.children = children;
    } else {
      node4.alt = value;
    }
  }
  function onexitresourcedestinationstring() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(
      node4.type === "image" || node4.type === "link",
      "expected image or link on stack"
    );
    node4.url = data2;
  }
  function onexitresourcetitlestring() {
    const data2 = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(
      node4.type === "image" || node4.type === "link",
      "expected image or link on stack"
    );
    node4.title = data2;
  }
  function onexitresource() {
    setData("inReference");
  }
  function onenterreference() {
    setData("referenceType", "collapsed");
  }
  function onexitreferencestring(token2) {
    const label = this.resume();
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(
      node4.type === "image" || node4.type === "link",
      "expected image reference or link reference on stack"
    );
    node4.label = label;
    node4.identifier = normalizeIdentifier(
      this.sliceSerialize(token2)
    ).toLowerCase();
    setData("referenceType", "full");
  }
  function onexitcharacterreferencemarker(token2) {
    ok2(
      token2.type === "characterReferenceMarkerNumeric" || token2.type === "characterReferenceMarkerHexadecimal"
    );
    setData("characterReferenceType", token2.type);
  }
  function onexitcharacterreferencevalue(token2) {
    const data2 = this.sliceSerialize(token2);
    const type = getData("characterReferenceType");
    let value;
    if (type) {
      value = decodeNumericCharacterReference(
        data2,
        type === types.characterReferenceMarkerNumeric ? constants2.numericBaseDecimal : constants2.numericBaseHexadecimal
      );
      setData("characterReferenceType");
    } else {
      const result = decodeNamedCharacterReference(data2);
      ok2(result !== false, "expected reference to decode");
      value = result;
    }
    const tail = this.stack.pop();
    ok2(tail, "expected `node`");
    ok2(tail.position, "expected `node.position`");
    ok2("value" in tail, "expected `node.value`");
    tail.value += value;
    tail.position.end = point3(token2.end);
  }
  function onexitautolinkprotocol(token2) {
    onexitdata.call(this, token2);
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "link", "expected link on stack");
    node4.url = this.sliceSerialize(token2);
  }
  function onexitautolinkemail(token2) {
    onexitdata.call(this, token2);
    const node4 = this.stack[this.stack.length - 1];
    ok2(node4, "expected node on stack");
    ok2(node4.type === "link", "expected link on stack");
    node4.url = "mailto:" + this.sliceSerialize(token2);
  }
  function blockQuote2() {
    return { type: "blockquote", children: [] };
  }
  function codeFlow() {
    return { type: "code", lang: null, meta: null, value: "" };
  }
  function codeText2() {
    return { type: "inlineCode", value: "" };
  }
  function definition3() {
    return {
      type: "definition",
      identifier: "",
      label: null,
      title: null,
      url: ""
    };
  }
  function emphasis3() {
    return { type: "emphasis", children: [] };
  }
  function heading4() {
    return { type: "heading", depth: void 0, children: [] };
  }
  function hardBreak3() {
    return { type: "break" };
  }
  function html7() {
    return { type: "html", value: "" };
  }
  function image3() {
    return { type: "image", title: null, url: "", alt: null };
  }
  function link3() {
    return { type: "link", title: null, url: "", children: [] };
  }
  function list6(token2) {
    return {
      type: "list",
      ordered: token2.type === "listOrdered",
      start: null,
      // @ts-expect-error Patched.
      spread: token2._spread,
      children: []
    };
  }
  function listItem3(token2) {
    return {
      type: "listItem",
      // @ts-expect-error Patched.
      spread: token2._spread,
      checked: null,
      children: []
    };
  }
  function paragraph3() {
    return { type: "paragraph", children: [] };
  }
  function strong4() {
    return { type: "strong", children: [] };
  }
  function text10() {
    return { type: "text", value: "" };
  }
  function thematicBreak4() {
    return { type: "thematicBreak" };
  }
}
function point3(d) {
  return { line: d.line, column: d.column, offset: d.offset };
}
function configure(combined, extensions2) {
  let index7 = -1;
  while (++index7 < extensions2.length) {
    const value = extensions2[index7];
    if (Array.isArray(value)) {
      configure(combined, value);
    } else {
      extension(combined, value);
    }
  }
}
function extension(combined, extension2) {
  let key2;
  for (key2 in extension2) {
    if (own11.call(extension2, key2)) {
      if (key2 === "canContainEols") {
        const right2 = extension2[key2];
        if (right2) {
          combined[key2].push(...right2);
        }
      } else if (key2 === "transforms") {
        const right2 = extension2[key2];
        if (right2) {
          combined[key2].push(...right2);
        }
      } else if (key2 === "enter" || key2 === "exit") {
        const right2 = extension2[key2];
        if (right2) {
          Object.assign(combined[key2], right2);
        }
      }
    }
  }
}
function defaultOnError(left2, right2) {
  if (left2) {
    throw new Error(
      "Cannot close `" + left2.type + "` (" + stringifyPosition({ start: left2.start, end: left2.end }) + "): a different token (`" + right2.type + "`, " + stringifyPosition({ start: right2.start, end: right2.end }) + ") is open"
    );
  } else {
    throw new Error(
      "Cannot close document, a token (`" + right2.type + "`, " + stringifyPosition({ start: right2.start, end: right2.end }) + ") is still open"
    );
  }
}

// node_modules/remark-parse/lib/index.js
function remarkParse(options2) {
  const parser = (doc4) => {
    const settings = (
      /** @type {Options} */
      this.data("settings")
    );
    return fromMarkdown(
      doc4,
      Object.assign({}, settings, options2, {
        // Note: these options are not in the readme.
        // The goal is for them to be set by plugins on `data` instead of being
        // passed by users.
        extensions: this.data("micromarkExtensions") || [],
        mdastExtensions: this.data("fromMarkdownExtensions") || []
      })
    );
  };
  Object.assign(this, { Parser: parser });
}

// node_modules/mdast-util-to-hast/lib/handlers/blockquote.js
function blockquote2(state, node4) {
  const result = {
    type: "element",
    tagName: "blockquote",
    properties: {},
    children: state.wrap(state.all(node4), true)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/break.js
function hardBreak(state, node4) {
  const result = { type: "element", tagName: "br", properties: {}, children: [] };
  state.patch(node4, result);
  return [state.applyData(node4, result), { type: "text", value: "\n" }];
}

// node_modules/mdast-util-to-hast/lib/handlers/code.js
function code3(state, node4) {
  const value = node4.value ? node4.value + "\n" : "";
  const lang = node4.lang ? node4.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
  const properties = {};
  if (lang) {
    properties.className = ["language-" + lang];
  }
  let result = {
    type: "element",
    tagName: "code",
    properties,
    children: [{ type: "text", value }]
  };
  if (node4.meta) {
    result.data = { meta: node4.meta };
  }
  state.patch(node4, result);
  result = state.applyData(node4, result);
  result = { type: "element", tagName: "pre", properties: {}, children: [result] };
  state.patch(node4, result);
  return result;
}

// node_modules/mdast-util-to-hast/lib/handlers/delete.js
function strikethrough(state, node4) {
  const result = {
    type: "element",
    tagName: "del",
    properties: {},
    children: state.all(node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/emphasis.js
function emphasis(state, node4) {
  const result = {
    type: "element",
    tagName: "em",
    properties: {},
    children: state.all(node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js
function footnoteReference2(state, node4) {
  const id2 = String(node4.identifier).toUpperCase();
  const safeId = normalizeUri(id2.toLowerCase());
  const index7 = state.footnoteOrder.indexOf(id2);
  let counter;
  if (index7 === -1) {
    state.footnoteOrder.push(id2);
    state.footnoteCounts[id2] = 1;
    counter = state.footnoteOrder.length;
  } else {
    state.footnoteCounts[id2]++;
    counter = index7 + 1;
  }
  const reuseCounter = state.footnoteCounts[id2];
  const link3 = {
    type: "element",
    tagName: "a",
    properties: {
      href: "#" + state.clobberPrefix + "fn-" + safeId,
      id: state.clobberPrefix + "fnref-" + safeId + (reuseCounter > 1 ? "-" + reuseCounter : ""),
      dataFootnoteRef: true,
      ariaDescribedBy: ["footnote-label"]
    },
    children: [{ type: "text", value: String(counter) }]
  };
  state.patch(node4, link3);
  const sup = {
    type: "element",
    tagName: "sup",
    properties: {},
    children: [link3]
  };
  state.patch(node4, sup);
  return state.applyData(node4, sup);
}

// node_modules/mdast-util-to-hast/lib/handlers/footnote.js
function footnote(state, node4) {
  const footnoteById = state.footnoteById;
  let no2 = 1;
  while (no2 in footnoteById)
    no2++;
  const identifier3 = String(no2);
  footnoteById[identifier3] = {
    type: "footnoteDefinition",
    identifier: identifier3,
    children: [{ type: "paragraph", children: node4.children }],
    position: node4.position
  };
  return footnoteReference2(state, {
    type: "footnoteReference",
    identifier: identifier3,
    position: node4.position
  });
}

// node_modules/mdast-util-to-hast/lib/handlers/heading.js
function heading2(state, node4) {
  const result = {
    type: "element",
    tagName: "h" + node4.depth,
    properties: {},
    children: state.all(node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/html.js
function html5(state, node4) {
  if (state.dangerous) {
    const result = { type: "raw", value: node4.value };
    state.patch(node4, result);
    return state.applyData(node4, result);
  }
  return null;
}

// node_modules/mdast-util-to-hast/lib/revert.js
function revert(state, node4) {
  const subtype = node4.referenceType;
  let suffix = "]";
  if (subtype === "collapsed") {
    suffix += "[]";
  } else if (subtype === "full") {
    suffix += "[" + (node4.label || node4.identifier) + "]";
  }
  if (node4.type === "imageReference") {
    return { type: "text", value: "![" + node4.alt + suffix };
  }
  const contents = state.all(node4);
  const head2 = contents[0];
  if (head2 && head2.type === "text") {
    head2.value = "[" + head2.value;
  } else {
    contents.unshift({ type: "text", value: "[" });
  }
  const tail = contents[contents.length - 1];
  if (tail && tail.type === "text") {
    tail.value += suffix;
  } else {
    contents.push({ type: "text", value: suffix });
  }
  return contents;
}

// node_modules/mdast-util-to-hast/lib/handlers/image-reference.js
function imageReference(state, node4) {
  const def = state.definition(node4.identifier);
  if (!def) {
    return revert(state, node4);
  }
  const properties = { src: normalizeUri(def.url || ""), alt: node4.alt };
  if (def.title !== null && def.title !== void 0) {
    properties.title = def.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/image.js
function image(state, node4) {
  const properties = { src: normalizeUri(node4.url) };
  if (node4.alt !== null && node4.alt !== void 0) {
    properties.alt = node4.alt;
  }
  if (node4.title !== null && node4.title !== void 0) {
    properties.title = node4.title;
  }
  const result = { type: "element", tagName: "img", properties, children: [] };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/inline-code.js
function inlineCode3(state, node4) {
  const text10 = { type: "text", value: node4.value.replace(/\r?\n|\r/g, " ") };
  state.patch(node4, text10);
  const result = {
    type: "element",
    tagName: "code",
    properties: {},
    children: [text10]
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link-reference.js
function linkReference(state, node4) {
  const def = state.definition(node4.identifier);
  if (!def) {
    return revert(state, node4);
  }
  const properties = { href: normalizeUri(def.url || "") };
  if (def.title !== null && def.title !== void 0) {
    properties.title = def.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/link.js
function link(state, node4) {
  const properties = { href: normalizeUri(node4.url) };
  if (node4.title !== null && node4.title !== void 0) {
    properties.title = node4.title;
  }
  const result = {
    type: "element",
    tagName: "a",
    properties,
    children: state.all(node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/list-item.js
function listItem2(state, node4, parent) {
  const results = state.all(node4);
  const loose = parent ? listLoose(parent) : listItemLoose(node4);
  const properties = {};
  const children = [];
  if (typeof node4.checked === "boolean") {
    const head2 = results[0];
    let paragraph3;
    if (head2 && head2.type === "element" && head2.tagName === "p") {
      paragraph3 = head2;
    } else {
      paragraph3 = { type: "element", tagName: "p", properties: {}, children: [] };
      results.unshift(paragraph3);
    }
    if (paragraph3.children.length > 0) {
      paragraph3.children.unshift({ type: "text", value: " " });
    }
    paragraph3.children.unshift({
      type: "element",
      tagName: "input",
      properties: { type: "checkbox", checked: node4.checked, disabled: true },
      children: []
    });
    properties.className = ["task-list-item"];
  }
  let index7 = -1;
  while (++index7 < results.length) {
    const child = results[index7];
    if (loose || index7 !== 0 || child.type !== "element" || child.tagName !== "p") {
      children.push({ type: "text", value: "\n" });
    }
    if (child.type === "element" && child.tagName === "p" && !loose) {
      children.push(...child.children);
    } else {
      children.push(child);
    }
  }
  const tail = results[results.length - 1];
  if (tail && (loose || tail.type !== "element" || tail.tagName !== "p")) {
    children.push({ type: "text", value: "\n" });
  }
  const result = { type: "element", tagName: "li", properties, children };
  state.patch(node4, result);
  return state.applyData(node4, result);
}
function listLoose(node4) {
  let loose = false;
  if (node4.type === "list") {
    loose = node4.spread || false;
    const children = node4.children;
    let index7 = -1;
    while (!loose && ++index7 < children.length) {
      loose = listItemLoose(children[index7]);
    }
  }
  return loose;
}
function listItemLoose(node4) {
  const spread = node4.spread;
  return spread === void 0 || spread === null ? node4.children.length > 1 : spread;
}

// node_modules/mdast-util-to-hast/lib/handlers/list.js
function list4(state, node4) {
  const properties = {};
  const results = state.all(node4);
  let index7 = -1;
  if (typeof node4.start === "number" && node4.start !== 1) {
    properties.start = node4.start;
  }
  while (++index7 < results.length) {
    const child = results[index7];
    if (child.type === "element" && child.tagName === "li" && child.properties && Array.isArray(child.properties.className) && child.properties.className.includes("task-list-item")) {
      properties.className = ["contains-task-list"];
      break;
    }
  }
  const result = {
    type: "element",
    tagName: node4.ordered ? "ol" : "ul",
    properties,
    children: state.wrap(results, true)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/paragraph.js
function paragraph(state, node4) {
  const result = {
    type: "element",
    tagName: "p",
    properties: {},
    children: state.all(node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/root.js
function root3(state, node4) {
  const result = { type: "root", children: state.wrap(state.all(node4)) };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/strong.js
function strong2(state, node4) {
  const result = {
    type: "element",
    tagName: "strong",
    properties: {},
    children: state.all(node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/unist-util-position/lib/index.js
var pointStart = point4("start");
var pointEnd = point4("end");
function position4(node4) {
  return { start: pointStart(node4), end: pointEnd(node4) };
}
function point4(type) {
  return point5;
  function point5(node4) {
    const point6 = node4 && node4.position && node4.position[type] || {};
    return {
      // @ts-expect-error: in practice, null is allowed.
      line: point6.line || null,
      // @ts-expect-error: in practice, null is allowed.
      column: point6.column || null,
      // @ts-expect-error: in practice, null is allowed.
      offset: point6.offset > -1 ? point6.offset : null
    };
  }
}

// node_modules/mdast-util-to-hast/lib/handlers/table.js
function table2(state, node4) {
  const rows = state.all(node4);
  const firstRow = rows.shift();
  const tableContent = [];
  if (firstRow) {
    const head2 = {
      type: "element",
      tagName: "thead",
      properties: {},
      children: state.wrap([firstRow], true)
    };
    state.patch(node4.children[0], head2);
    tableContent.push(head2);
  }
  if (rows.length > 0) {
    const body3 = {
      type: "element",
      tagName: "tbody",
      properties: {},
      children: state.wrap(rows, true)
    };
    const start2 = pointStart(node4.children[1]);
    const end2 = pointEnd(node4.children[node4.children.length - 1]);
    if (start2.line && end2.line)
      body3.position = { start: start2, end: end2 };
    tableContent.push(body3);
  }
  const result = {
    type: "element",
    tagName: "table",
    properties: {},
    children: state.wrap(tableContent, true)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-row.js
function tableRow2(state, node4, parent) {
  const siblings2 = parent ? parent.children : void 0;
  const rowIndex = siblings2 ? siblings2.indexOf(node4) : 1;
  const tagName = rowIndex === 0 ? "th" : "td";
  const align = parent && parent.type === "table" ? parent.align : void 0;
  const length4 = align ? align.length : node4.children.length;
  let cellIndex = -1;
  const cells2 = [];
  while (++cellIndex < length4) {
    const cell3 = node4.children[cellIndex];
    const properties = {};
    const alignValue = align ? align[cellIndex] : void 0;
    if (alignValue) {
      properties.align = alignValue;
    }
    let result2 = { type: "element", tagName, properties, children: [] };
    if (cell3) {
      result2.children = state.all(cell3);
      state.patch(cell3, result2);
      result2 = state.applyData(node4, result2);
    }
    cells2.push(result2);
  }
  const result = {
    type: "element",
    tagName: "tr",
    properties: {},
    children: state.wrap(cells2, true)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/table-cell.js
function tableCell2(state, node4) {
  const result = {
    type: "element",
    tagName: "td",
    // Assume body cell.
    properties: {},
    children: state.all(node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/trim-lines/index.js
var tab = 9;
var space = 32;
function trimLines(value) {
  const source2 = String(value);
  const search3 = /\r?\n|\r/g;
  let match2 = search3.exec(source2);
  let last2 = 0;
  const lines2 = [];
  while (match2) {
    lines2.push(
      trimLine(source2.slice(last2, match2.index), last2 > 0, true),
      match2[0]
    );
    last2 = match2.index + match2[0].length;
    match2 = search3.exec(source2);
  }
  lines2.push(trimLine(source2.slice(last2), last2 > 0, false));
  return lines2.join("");
}
function trimLine(value, start2, end2) {
  let startIndex = 0;
  let endIndex = value.length;
  if (start2) {
    let code5 = value.codePointAt(startIndex);
    while (code5 === tab || code5 === space) {
      startIndex++;
      code5 = value.codePointAt(startIndex);
    }
  }
  if (end2) {
    let code5 = value.codePointAt(endIndex - 1);
    while (code5 === tab || code5 === space) {
      endIndex--;
      code5 = value.codePointAt(endIndex - 1);
    }
  }
  return endIndex > startIndex ? value.slice(startIndex, endIndex) : "";
}

// node_modules/mdast-util-to-hast/lib/handlers/text.js
function text6(state, node4) {
  const result = { type: "text", value: trimLines(String(node4.value)) };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js
function thematicBreak2(state, node4) {
  const result = {
    type: "element",
    tagName: "hr",
    properties: {},
    children: []
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}

// node_modules/mdast-util-to-hast/lib/handlers/index.js
var handlers3 = {
  blockquote: blockquote2,
  break: hardBreak,
  code: code3,
  delete: strikethrough,
  emphasis,
  footnoteReference: footnoteReference2,
  footnote,
  heading: heading2,
  html: html5,
  imageReference,
  image,
  inlineCode: inlineCode3,
  linkReference,
  link,
  listItem: listItem2,
  list: list4,
  paragraph,
  root: root3,
  strong: strong2,
  table: table2,
  tableCell: tableCell2,
  tableRow: tableRow2,
  text: text6,
  thematicBreak: thematicBreak2,
  toml: ignore2,
  yaml: ignore2,
  definition: ignore2,
  footnoteDefinition: ignore2
};
function ignore2() {
  return null;
}

// node_modules/unist-util-generated/lib/index.js
function generated(node4) {
  return !node4 || !node4.position || !node4.position.start || !node4.position.start.line || !node4.position.start.column || !node4.position.end || !node4.position.end.line || !node4.position.end.column;
}

// node_modules/mdast-util-definitions/lib/index.js
var own12 = {}.hasOwnProperty;
function definitions(tree) {
  const cache = /* @__PURE__ */ Object.create(null);
  if (!tree || !tree.type) {
    throw new Error("mdast-util-definitions expected node");
  }
  visit(tree, "definition", (definition4) => {
    const id2 = clean2(definition4.identifier);
    if (id2 && !own12.call(cache, id2)) {
      cache[id2] = definition4;
    }
  });
  return definition3;
  function definition3(identifier3) {
    const id2 = clean2(identifier3);
    return id2 && own12.call(cache, id2) ? cache[id2] : null;
  }
}
function clean2(value) {
  return String(value || "").toUpperCase();
}

// node_modules/mdast-util-to-hast/lib/state.js
var own13 = {}.hasOwnProperty;
function createState(tree, options2) {
  const settings = options2 || {};
  const dangerous2 = settings.allowDangerousHtml || false;
  const footnoteById = {};
  state.dangerous = dangerous2;
  state.clobberPrefix = settings.clobberPrefix === void 0 || settings.clobberPrefix === null ? "user-content-" : settings.clobberPrefix;
  state.footnoteLabel = settings.footnoteLabel || "Footnotes";
  state.footnoteLabelTagName = settings.footnoteLabelTagName || "h2";
  state.footnoteLabelProperties = settings.footnoteLabelProperties || {
    className: ["sr-only"]
  };
  state.footnoteBackLabel = settings.footnoteBackLabel || "Back to content";
  state.unknownHandler = settings.unknownHandler;
  state.passThrough = settings.passThrough;
  state.handlers = { ...handlers3, ...settings.handlers };
  state.definition = definitions(tree);
  state.footnoteById = footnoteById;
  state.footnoteOrder = [];
  state.footnoteCounts = {};
  state.patch = patch2;
  state.applyData = applyData;
  state.one = oneBound;
  state.all = allBound;
  state.wrap = wrap3;
  state.augment = augment;
  visit(tree, "footnoteDefinition", (definition3) => {
    const id2 = String(definition3.identifier).toUpperCase();
    if (!own13.call(footnoteById, id2)) {
      footnoteById[id2] = definition3;
    }
  });
  return state;
  function augment(left2, right2) {
    if (left2 && "data" in left2 && left2.data) {
      const data = left2.data;
      if (data.hName) {
        if (right2.type !== "element") {
          right2 = {
            type: "element",
            tagName: "",
            properties: {},
            children: []
          };
        }
        right2.tagName = data.hName;
      }
      if (right2.type === "element" && data.hProperties) {
        right2.properties = { ...right2.properties, ...data.hProperties };
      }
      if ("children" in right2 && right2.children && data.hChildren) {
        right2.children = data.hChildren;
      }
    }
    if (left2) {
      const ctx = "type" in left2 ? left2 : { position: left2 };
      if (!generated(ctx)) {
        right2.position = { start: pointStart(ctx), end: pointEnd(ctx) };
      }
    }
    return right2;
  }
  function state(node4, tagName, props, children) {
    if (Array.isArray(props)) {
      children = props;
      props = {};
    }
    return augment(node4, {
      type: "element",
      tagName,
      properties: props || {},
      children: children || []
    });
  }
  function oneBound(node4, parent) {
    return one5(state, node4, parent);
  }
  function allBound(parent) {
    return all6(state, parent);
  }
}
function patch2(from5, to3) {
  if (from5.position)
    to3.position = position4(from5);
}
function applyData(from5, to3) {
  let result = to3;
  if (from5 && from5.data) {
    const hName = from5.data.hName;
    const hChildren = from5.data.hChildren;
    const hProperties = from5.data.hProperties;
    if (typeof hName === "string") {
      if (result.type === "element") {
        result.tagName = hName;
      } else {
        result = {
          type: "element",
          tagName: hName,
          properties: {},
          children: []
        };
      }
    }
    if (result.type === "element" && hProperties) {
      result.properties = { ...result.properties, ...hProperties };
    }
    if ("children" in result && result.children && hChildren !== null && hChildren !== void 0) {
      result.children = hChildren;
    }
  }
  return result;
}
function one5(state, node4, parent) {
  const type = node4 && node4.type;
  if (!type) {
    throw new Error("Expected node, got `" + node4 + "`");
  }
  if (own13.call(state.handlers, type)) {
    return state.handlers[type](state, node4, parent);
  }
  if (state.passThrough && state.passThrough.includes(type)) {
    return "children" in node4 ? { ...node4, children: all6(state, node4) } : node4;
  }
  if (state.unknownHandler) {
    return state.unknownHandler(state, node4, parent);
  }
  return defaultUnknownHandler(state, node4);
}
function all6(state, parent) {
  const values2 = [];
  if ("children" in parent) {
    const nodes = parent.children;
    let index7 = -1;
    while (++index7 < nodes.length) {
      const result = one5(state, nodes[index7], parent);
      if (result) {
        if (index7 && nodes[index7 - 1].type === "break") {
          if (!Array.isArray(result) && result.type === "text") {
            result.value = result.value.replace(/^\s+/, "");
          }
          if (!Array.isArray(result) && result.type === "element") {
            const head2 = result.children[0];
            if (head2 && head2.type === "text") {
              head2.value = head2.value.replace(/^\s+/, "");
            }
          }
        }
        if (Array.isArray(result)) {
          values2.push(...result);
        } else {
          values2.push(result);
        }
      }
    }
  }
  return values2;
}
function defaultUnknownHandler(state, node4) {
  const data = node4.data || {};
  const result = "value" in node4 && !(own13.call(data, "hProperties") || own13.call(data, "hChildren")) ? { type: "text", value: node4.value } : {
    type: "element",
    tagName: "div",
    properties: {},
    children: all6(state, node4)
  };
  state.patch(node4, result);
  return state.applyData(node4, result);
}
function wrap3(nodes, loose) {
  const result = [];
  let index7 = -1;
  if (loose) {
    result.push({ type: "text", value: "\n" });
  }
  while (++index7 < nodes.length) {
    if (index7)
      result.push({ type: "text", value: "\n" });
    result.push(nodes[index7]);
  }
  if (loose && nodes.length > 0) {
    result.push({ type: "text", value: "\n" });
  }
  return result;
}

// node_modules/mdast-util-to-hast/lib/footer.js
function footer(state) {
  const listItems = [];
  let index7 = -1;
  while (++index7 < state.footnoteOrder.length) {
    const def = state.footnoteById[state.footnoteOrder[index7]];
    if (!def) {
      continue;
    }
    const content5 = state.all(def);
    const id2 = String(def.identifier).toUpperCase();
    const safeId = normalizeUri(id2.toLowerCase());
    let referenceIndex = 0;
    const backReferences = [];
    while (++referenceIndex <= state.footnoteCounts[id2]) {
      const backReference = {
        type: "element",
        tagName: "a",
        properties: {
          href: "#" + state.clobberPrefix + "fnref-" + safeId + (referenceIndex > 1 ? "-" + referenceIndex : ""),
          dataFootnoteBackref: true,
          className: ["data-footnote-backref"],
          ariaLabel: state.footnoteBackLabel
        },
        children: [{ type: "text", value: "↩" }]
      };
      if (referenceIndex > 1) {
        backReference.children.push({
          type: "element",
          tagName: "sup",
          children: [{ type: "text", value: String(referenceIndex) }]
        });
      }
      if (backReferences.length > 0) {
        backReferences.push({ type: "text", value: " " });
      }
      backReferences.push(backReference);
    }
    const tail = content5[content5.length - 1];
    if (tail && tail.type === "element" && tail.tagName === "p") {
      const tailTail = tail.children[tail.children.length - 1];
      if (tailTail && tailTail.type === "text") {
        tailTail.value += " ";
      } else {
        tail.children.push({ type: "text", value: " " });
      }
      tail.children.push(...backReferences);
    } else {
      content5.push(...backReferences);
    }
    const listItem3 = {
      type: "element",
      tagName: "li",
      properties: { id: state.clobberPrefix + "fn-" + safeId },
      children: state.wrap(content5, true)
    };
    state.patch(def, listItem3);
    listItems.push(listItem3);
  }
  if (listItems.length === 0) {
    return;
  }
  return {
    type: "element",
    tagName: "section",
    properties: { dataFootnotes: true, className: ["footnotes"] },
    children: [
      {
        type: "element",
        tagName: state.footnoteLabelTagName,
        properties: {
          // To do: use structured clone.
          ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),
          id: "footnote-label"
        },
        children: [{ type: "text", value: state.footnoteLabel }]
      },
      { type: "text", value: "\n" },
      {
        type: "element",
        tagName: "ol",
        properties: {},
        children: state.wrap(listItems, true)
      },
      { type: "text", value: "\n" }
    ]
  };
}

// node_modules/mdast-util-to-hast/lib/index.js
function toHast(tree, options2) {
  const state = createState(tree, options2);
  const node4 = state.one(tree, null);
  const foot = footer(state);
  if (foot) {
    node4.children.push({ type: "text", value: "\n" }, foot);
  }
  return Array.isArray(node4) ? { type: "root", children: node4 } : node4;
}

// node_modules/remark-rehype/lib/index.js
var remarkRehype = (
  /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */
  function(destination, options2) {
    return destination && "run" in destination ? bridge2(destination, options2) : mutate2(destination || options2);
  }
);
var lib_default2 = remarkRehype;
function bridge2(destination, options2) {
  return (node4, file, next2) => {
    destination.run(toHast(node4, options2), file, (error) => {
      next2(error);
    });
  };
}
function mutate2(options2) {
  return (node4) => toHast(node4, options2);
}

// node_modules/mdast-util-to-markdown/lib/configure.js
function configure2(base5, extension2) {
  let index7 = -1;
  let key2;
  if (extension2.extensions) {
    while (++index7 < extension2.extensions.length) {
      configure2(base5, extension2.extensions[index7]);
    }
  }
  for (key2 in extension2) {
    if (key2 === "extensions") {
    } else if (key2 === "unsafe" || key2 === "join") {
      base5[key2] = [...base5[key2] || [], ...extension2[key2] || []];
    } else if (key2 === "handlers") {
      base5[key2] = Object.assign(base5[key2], extension2[key2] || {});
    } else {
      base5.options[key2] = extension2[key2];
    }
  }
  return base5;
}

// node_modules/mdast-util-to-markdown/lib/handle/blockquote.js
function blockquote3(node4, _2, state, info) {
  const exit3 = state.enter("blockquote");
  const tracker = state.createTracker(info);
  tracker.move("> ");
  tracker.shift(2);
  const value = state.indentLines(
    state.containerFlow(node4, tracker.current()),
    map2
  );
  exit3();
  return value;
}
function map2(line3, _2, blank) {
  return ">" + (blank ? "" : " ") + line3;
}

// node_modules/mdast-util-to-markdown/lib/handle/break.js
function hardBreak2(_2, _1, state, info) {
  let index7 = -1;
  while (++index7 < state.unsafe.length) {
    if (state.unsafe[index7].character === "\n" && patternInScope(state.stack, state.unsafe[index7])) {
      return /[ \t]/.test(info.before) ? "" : " ";
    }
  }
  return "\\\n";
}

// node_modules/longest-streak/index.js
function longestStreak(value, substring) {
  const source2 = String(value);
  let index7 = source2.indexOf(substring);
  let expected = index7;
  let count2 = 0;
  let max5 = 0;
  if (typeof substring !== "string") {
    throw new TypeError("Expected substring");
  }
  while (index7 !== -1) {
    if (index7 === expected) {
      if (++count2 > max5) {
        max5 = count2;
      }
    } else {
      count2 = 1;
    }
    expected = index7 + substring.length;
    index7 = source2.indexOf(substring, expected);
  }
  return max5;
}

// node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js
function formatCodeAsIndented(node4, state) {
  return Boolean(
    !state.options.fences && node4.value && // If there’s no info…
    !node4.lang && // And there’s a non-whitespace character…
    /[^ \r\n]/.test(node4.value) && // And the value doesn’t start or end in a blank…
    !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node4.value)
  );
}

// node_modules/mdast-util-to-markdown/lib/util/check-fence.js
function checkFence(state) {
  const marker = state.options.fence || "`";
  if (marker !== "`" && marker !== "~") {
    throw new Error(
      "Cannot serialize code with `" + marker + "` for `options.fence`, expected `` ` `` or `~`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/code.js
function code4(node4, _2, state, info) {
  const marker = checkFence(state);
  const raw2 = node4.value || "";
  const suffix = marker === "`" ? "GraveAccent" : "Tilde";
  if (formatCodeAsIndented(node4, state)) {
    const exit4 = state.enter("codeIndented");
    const value2 = state.indentLines(raw2, map3);
    exit4();
    return value2;
  }
  const tracker = state.createTracker(info);
  const sequence = marker.repeat(Math.max(longestStreak(raw2, marker) + 1, 3));
  const exit3 = state.enter("codeFenced");
  let value = tracker.move(sequence);
  if (node4.lang) {
    const subexit = state.enter(`codeFencedLang${suffix}`);
    value += tracker.move(
      state.safe(node4.lang, {
        before: value,
        after: " ",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  if (node4.lang && node4.meta) {
    const subexit = state.enter(`codeFencedMeta${suffix}`);
    value += tracker.move(" ");
    value += tracker.move(
      state.safe(node4.meta, {
        before: value,
        after: "\n",
        encode: ["`"],
        ...tracker.current()
      })
    );
    subexit();
  }
  value += tracker.move("\n");
  if (raw2) {
    value += tracker.move(raw2 + "\n");
  }
  value += tracker.move(sequence);
  exit3();
  return value;
}
function map3(line3, _2, blank) {
  return (blank ? "" : "    ") + line3;
}

// node_modules/mdast-util-to-markdown/lib/util/check-quote.js
function checkQuote(state) {
  const marker = state.options.quote || '"';
  if (marker !== '"' && marker !== "'") {
    throw new Error(
      "Cannot serialize title with `" + marker + "` for `options.quote`, expected `\"`, or `'`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/definition.js
function definition2(node4, _2, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit3 = state.enter("definition");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  value += tracker.move(
    state.safe(state.associationId(node4), {
      before: value,
      after: "]",
      ...tracker.current()
    })
  );
  value += tracker.move("]: ");
  subexit();
  if (
    // If there’s no url, or…
    !node4.url || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node4.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node4.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node4.url, {
        before: value,
        after: node4.title ? " " : "\n",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node4.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node4.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js
function checkEmphasis(state) {
  const marker = state.options.emphasis || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize emphasis with `" + marker + "` for `options.emphasis`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/emphasis.js
emphasis2.peek = emphasisPeek;
function emphasis2(node4, _2, state, info) {
  const marker = checkEmphasis(state);
  const exit3 = state.enter("emphasis");
  const tracker = state.createTracker(info);
  let value = tracker.move(marker);
  value += tracker.move(
    state.containerPhrasing(node4, {
      before: value,
      after: marker,
      ...tracker.current()
    })
  );
  value += tracker.move(marker);
  exit3();
  return value;
}
function emphasisPeek(_2, _1, state) {
  return state.options.emphasis || "*";
}

// node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js
function formatHeadingAsSetext(node4, state) {
  let literalWithBreak = false;
  visit(node4, (node5) => {
    if ("value" in node5 && /\r?\n|\r/.test(node5.value) || node5.type === "break") {
      literalWithBreak = true;
      return EXIT;
    }
  });
  return Boolean(
    (!node4.depth || node4.depth < 3) && toString(node4) && (state.options.setext || literalWithBreak)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/heading.js
function heading3(node4, _2, state, info) {
  const rank = Math.max(Math.min(6, node4.depth || 1), 1);
  const tracker = state.createTracker(info);
  if (formatHeadingAsSetext(node4, state)) {
    const exit4 = state.enter("headingSetext");
    const subexit2 = state.enter("phrasing");
    const value2 = state.containerPhrasing(node4, {
      ...tracker.current(),
      before: "\n",
      after: "\n"
    });
    subexit2();
    exit4();
    return value2 + "\n" + (rank === 1 ? "=" : "-").repeat(
      // The whole size…
      value2.length - // Minus the position of the character after the last EOL (or
      // 0 if there is none)…
      (Math.max(value2.lastIndexOf("\r"), value2.lastIndexOf("\n")) + 1)
    );
  }
  const sequence = "#".repeat(rank);
  const exit3 = state.enter("headingAtx");
  const subexit = state.enter("phrasing");
  tracker.move(sequence + " ");
  let value = state.containerPhrasing(node4, {
    before: "# ",
    after: "\n",
    ...tracker.current()
  });
  if (/^[\t ]/.test(value)) {
    value = "&#x" + value.charCodeAt(0).toString(16).toUpperCase() + ";" + value.slice(1);
  }
  value = value ? sequence + " " + value : sequence;
  if (state.options.closeAtx) {
    value += " " + sequence;
  }
  subexit();
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/handle/html.js
html6.peek = htmlPeek;
function html6(node4) {
  return node4.value || "";
}
function htmlPeek() {
  return "<";
}

// node_modules/mdast-util-to-markdown/lib/handle/image.js
image2.peek = imagePeek;
function image2(node4, _2, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const exit3 = state.enter("image");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  value += tracker.move(
    state.safe(node4.alt, { before: value, after: "]", ...tracker.current() })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node4.url && node4.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node4.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node4.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node4.url, {
        before: value,
        after: node4.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node4.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node4.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit3();
  return value;
}
function imagePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/handle/image-reference.js
imageReference2.peek = imageReferencePeek;
function imageReference2(node4, _2, state, info) {
  const type = node4.referenceType;
  const exit3 = state.enter("imageReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("![");
  const alt = state.safe(node4.alt, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(alt + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference2 = state.safe(state.associationId(node4), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit3();
  if (type === "full" || !alt || alt !== reference2) {
    value += tracker.move(reference2 + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function imageReferencePeek() {
  return "!";
}

// node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js
function formatLinkAsAutolink(node4, state) {
  const raw2 = toString(node4);
  return Boolean(
    !state.options.resourceLink && // If there’s a url…
    node4.url && // And there’s a no title…
    !node4.title && // And the content of `node` is a single text node…
    node4.children && node4.children.length === 1 && node4.children[0].type === "text" && // And if the url is the same as the content…
    (raw2 === node4.url || "mailto:" + raw2 === node4.url) && // And that starts w/ a protocol…
    /^[a-z][a-z+.-]+:/i.test(node4.url) && // And that doesn’t contain ASCII control codes (character escapes and
    // references don’t work), space, or angle brackets…
    !/[\0- <>\u007F]/.test(node4.url)
  );
}

// node_modules/mdast-util-to-markdown/lib/handle/link.js
link2.peek = linkPeek;
function link2(node4, _2, state, info) {
  const quote = checkQuote(state);
  const suffix = quote === '"' ? "Quote" : "Apostrophe";
  const tracker = state.createTracker(info);
  let exit3;
  let subexit;
  if (formatLinkAsAutolink(node4, state)) {
    const stack = state.stack;
    state.stack = [];
    exit3 = state.enter("autolink");
    let value2 = tracker.move("<");
    value2 += tracker.move(
      state.containerPhrasing(node4, {
        before: value2,
        after: ">",
        ...tracker.current()
      })
    );
    value2 += tracker.move(">");
    exit3();
    state.stack = stack;
    return value2;
  }
  exit3 = state.enter("link");
  subexit = state.enter("label");
  let value = tracker.move("[");
  value += tracker.move(
    state.containerPhrasing(node4, {
      before: value,
      after: "](",
      ...tracker.current()
    })
  );
  value += tracker.move("](");
  subexit();
  if (
    // If there’s no url but there is a title…
    !node4.url && node4.title || // If there are control characters or whitespace.
    /[\0- \u007F]/.test(node4.url)
  ) {
    subexit = state.enter("destinationLiteral");
    value += tracker.move("<");
    value += tracker.move(
      state.safe(node4.url, { before: value, after: ">", ...tracker.current() })
    );
    value += tracker.move(">");
  } else {
    subexit = state.enter("destinationRaw");
    value += tracker.move(
      state.safe(node4.url, {
        before: value,
        after: node4.title ? " " : ")",
        ...tracker.current()
      })
    );
  }
  subexit();
  if (node4.title) {
    subexit = state.enter(`title${suffix}`);
    value += tracker.move(" " + quote);
    value += tracker.move(
      state.safe(node4.title, {
        before: value,
        after: quote,
        ...tracker.current()
      })
    );
    value += tracker.move(quote);
    subexit();
  }
  value += tracker.move(")");
  exit3();
  return value;
}
function linkPeek(node4, _2, state) {
  return formatLinkAsAutolink(node4, state) ? "<" : "[";
}

// node_modules/mdast-util-to-markdown/lib/handle/link-reference.js
linkReference2.peek = linkReferencePeek;
function linkReference2(node4, _2, state, info) {
  const type = node4.referenceType;
  const exit3 = state.enter("linkReference");
  let subexit = state.enter("label");
  const tracker = state.createTracker(info);
  let value = tracker.move("[");
  const text10 = state.containerPhrasing(node4, {
    before: value,
    after: "]",
    ...tracker.current()
  });
  value += tracker.move(text10 + "][");
  subexit();
  const stack = state.stack;
  state.stack = [];
  subexit = state.enter("reference");
  const reference2 = state.safe(state.associationId(node4), {
    before: value,
    after: "]",
    ...tracker.current()
  });
  subexit();
  state.stack = stack;
  exit3();
  if (type === "full" || !text10 || text10 !== reference2) {
    value += tracker.move(reference2 + "]");
  } else if (type === "shortcut") {
    value = value.slice(0, -1);
  } else {
    value += tracker.move("]");
  }
  return value;
}
function linkReferencePeek() {
  return "[";
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js
function checkBulletOther(state) {
  const bullet = checkBullet(state);
  const bulletOther = state.options.bulletOther;
  if (!bulletOther) {
    return bullet === "*" ? "-" : "*";
  }
  if (bulletOther !== "*" && bulletOther !== "+" && bulletOther !== "-") {
    throw new Error(
      "Cannot serialize items with `" + bulletOther + "` for `options.bulletOther`, expected `*`, `+`, or `-`"
    );
  }
  if (bulletOther === bullet) {
    throw new Error(
      "Expected `bullet` (`" + bullet + "`) and `bulletOther` (`" + bulletOther + "`) to be different"
    );
  }
  return bulletOther;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js
function checkBulletOrdered(state) {
  const marker = state.options.bulletOrdered || ".";
  if (marker !== "." && marker !== ")") {
    throw new Error(
      "Cannot serialize items with `" + marker + "` for `options.bulletOrdered`, expected `.` or `)`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered-other.js
function checkBulletOrderedOther(state) {
  const bulletOrdered = checkBulletOrdered(state);
  const bulletOrderedOther = state.options.bulletOrderedOther;
  if (!bulletOrderedOther) {
    return bulletOrdered === "." ? ")" : ".";
  }
  if (bulletOrderedOther !== "." && bulletOrderedOther !== ")") {
    throw new Error(
      "Cannot serialize items with `" + bulletOrderedOther + "` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`"
    );
  }
  if (bulletOrderedOther === bulletOrdered) {
    throw new Error(
      "Expected `bulletOrdered` (`" + bulletOrdered + "`) and `bulletOrderedOther` (`" + bulletOrderedOther + "`) to be different"
    );
  }
  return bulletOrderedOther;
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule.js
function checkRule(state) {
  const marker = state.options.rule || "*";
  if (marker !== "*" && marker !== "-" && marker !== "_") {
    throw new Error(
      "Cannot serialize rules with `" + marker + "` for `options.rule`, expected `*`, `-`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/list.js
function list5(node4, parent, state, info) {
  const exit3 = state.enter("list");
  const bulletCurrent = state.bulletCurrent;
  let bullet = node4.ordered ? checkBulletOrdered(state) : checkBullet(state);
  const bulletOther = node4.ordered ? checkBulletOrderedOther(state) : checkBulletOther(state);
  const bulletLastUsed = state.bulletLastUsed;
  let useDifferentMarker = false;
  if (parent && // Explicit `other` set.
  (node4.ordered ? state.options.bulletOrderedOther : state.options.bulletOther) && bulletLastUsed && bullet === bulletLastUsed) {
    useDifferentMarker = true;
  }
  if (!node4.ordered) {
    const firstListItem = node4.children ? node4.children[0] : void 0;
    if (
      // Bullet could be used as a thematic break marker:
      (bullet === "*" || bullet === "-") && // Empty first list item:
      firstListItem && (!firstListItem.children || !firstListItem.children[0]) && // Directly in two other list items:
      state.stack[state.stack.length - 1] === "list" && state.stack[state.stack.length - 2] === "listItem" && state.stack[state.stack.length - 3] === "list" && state.stack[state.stack.length - 4] === "listItem" && // That are each the first child.
      state.indexStack[state.indexStack.length - 1] === 0 && state.indexStack[state.indexStack.length - 2] === 0 && state.indexStack[state.indexStack.length - 3] === 0
    ) {
      useDifferentMarker = true;
    }
    if (checkRule(state) === bullet && firstListItem) {
      let index7 = -1;
      while (++index7 < node4.children.length) {
        const item = node4.children[index7];
        if (item && item.type === "listItem" && item.children && item.children[0] && item.children[0].type === "thematicBreak") {
          useDifferentMarker = true;
          break;
        }
      }
    }
  }
  if (useDifferentMarker) {
    bullet = bulletOther;
  }
  state.bulletCurrent = bullet;
  const value = state.containerFlow(node4, info);
  state.bulletLastUsed = bullet;
  state.bulletCurrent = bulletCurrent;
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/handle/paragraph.js
function paragraph2(node4, _2, state, info) {
  const exit3 = state.enter("paragraph");
  const subexit = state.enter("phrasing");
  const value = state.containerPhrasing(node4, info);
  subexit();
  exit3();
  return value;
}

// node_modules/mdast-util-to-markdown/lib/handle/root.js
function root4(node4, _2, state, info) {
  const hasPhrasing = node4.children.some((d) => phrasing2(d));
  const fn3 = hasPhrasing ? state.containerPhrasing : state.containerFlow;
  return fn3.call(state, node4, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-strong.js
function checkStrong(state) {
  const marker = state.options.strong || "*";
  if (marker !== "*" && marker !== "_") {
    throw new Error(
      "Cannot serialize strong with `" + marker + "` for `options.strong`, expected `*`, or `_`"
    );
  }
  return marker;
}

// node_modules/mdast-util-to-markdown/lib/handle/strong.js
strong3.peek = strongPeek;
function strong3(node4, _2, state, info) {
  const marker = checkStrong(state);
  const exit3 = state.enter("strong");
  const tracker = state.createTracker(info);
  let value = tracker.move(marker + marker);
  value += tracker.move(
    state.containerPhrasing(node4, {
      before: value,
      after: marker,
      ...tracker.current()
    })
  );
  value += tracker.move(marker + marker);
  exit3();
  return value;
}
function strongPeek(_2, _1, state) {
  return state.options.strong || "*";
}

// node_modules/mdast-util-to-markdown/lib/handle/text.js
function text7(node4, _2, state, info) {
  return state.safe(node4.value, info);
}

// node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js
function checkRuleRepetition(state) {
  const repetition = state.options.ruleRepetition || 3;
  if (repetition < 3) {
    throw new Error(
      "Cannot serialize rules with repetition `" + repetition + "` for `options.ruleRepetition`, expected `3` or more"
    );
  }
  return repetition;
}

// node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js
function thematicBreak3(_2, _1, state) {
  const value = (checkRule(state) + (state.options.ruleSpaces ? " " : "")).repeat(checkRuleRepetition(state));
  return state.options.ruleSpaces ? value.slice(0, -1) : value;
}

// node_modules/mdast-util-to-markdown/lib/handle/index.js
var handle3 = {
  blockquote: blockquote3,
  break: hardBreak2,
  code: code4,
  definition: definition2,
  emphasis: emphasis2,
  hardBreak: hardBreak2,
  heading: heading3,
  html: html6,
  image: image2,
  imageReference: imageReference2,
  inlineCode: inlineCode2,
  link: link2,
  linkReference: linkReference2,
  list: list5,
  listItem,
  paragraph: paragraph2,
  root: root4,
  strong: strong3,
  text: text7,
  thematicBreak: thematicBreak3
};

// node_modules/mdast-util-to-markdown/lib/join.js
var join3 = [joinDefaults];
function joinDefaults(left2, right2, parent, state) {
  if (right2.type === "code" && formatCodeAsIndented(right2, state) && (left2.type === "list" || left2.type === right2.type && formatCodeAsIndented(left2, state))) {
    return false;
  }
  if (left2.type === "list" && left2.type === right2.type && Boolean(left2.ordered) === Boolean(right2.ordered) && !(left2.ordered ? state.options.bulletOrderedOther : state.options.bulletOther)) {
    return false;
  }
  if ("spread" in parent && typeof parent.spread === "boolean") {
    if (left2.type === "paragraph" && // Two paragraphs.
    (left2.type === right2.type || right2.type === "definition" || // Paragraph followed by a setext heading.
    right2.type === "heading" && formatHeadingAsSetext(right2, state))) {
      return;
    }
    return parent.spread ? 1 : 0;
  }
}

// node_modules/mdast-util-to-markdown/lib/unsafe.js
var fullPhrasingSpans = [
  "autolink",
  "destinationLiteral",
  "destinationRaw",
  "reference",
  "titleQuote",
  "titleApostrophe"
];
var unsafe = [
  { character: "	", after: "[\\r\\n]", inConstruct: "phrasing" },
  { character: "	", before: "[\\r\\n]", inConstruct: "phrasing" },
  {
    character: "	",
    inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"]
  },
  {
    character: "\r",
    inConstruct: [
      "codeFencedLangGraveAccent",
      "codeFencedLangTilde",
      "codeFencedMetaGraveAccent",
      "codeFencedMetaTilde",
      "destinationLiteral",
      "headingAtx"
    ]
  },
  {
    character: "\n",
    inConstruct: [
      "codeFencedLangGraveAccent",
      "codeFencedLangTilde",
      "codeFencedMetaGraveAccent",
      "codeFencedMetaTilde",
      "destinationLiteral",
      "headingAtx"
    ]
  },
  { character: " ", after: "[\\r\\n]", inConstruct: "phrasing" },
  { character: " ", before: "[\\r\\n]", inConstruct: "phrasing" },
  {
    character: " ",
    inConstruct: ["codeFencedLangGraveAccent", "codeFencedLangTilde"]
  },
  // An exclamation mark can start an image, if it is followed by a link or
  // a link reference.
  {
    character: "!",
    after: "\\[",
    inConstruct: "phrasing",
    notInConstruct: fullPhrasingSpans
  },
  // A quote can break out of a title.
  { character: '"', inConstruct: "titleQuote" },
  // A number sign could start an ATX heading if it starts a line.
  { atBreak: true, character: "#" },
  { character: "#", inConstruct: "headingAtx", after: "(?:[\r\n]|$)" },
  // Dollar sign and percentage are not used in markdown.
  // An ampersand could start a character reference.
  { character: "&", after: "[#A-Za-z]", inConstruct: "phrasing" },
  // An apostrophe can break out of a title.
  { character: "'", inConstruct: "titleApostrophe" },
  // A left paren could break out of a destination raw.
  { character: "(", inConstruct: "destinationRaw" },
  // A left paren followed by `]` could make something into a link or image.
  {
    before: "\\]",
    character: "(",
    inConstruct: "phrasing",
    notInConstruct: fullPhrasingSpans
  },
  // A right paren could start a list item or break out of a destination
  // raw.
  { atBreak: true, before: "\\d+", character: ")" },
  { character: ")", inConstruct: "destinationRaw" },
  // An asterisk can start thematic breaks, list items, emphasis, strong.
  { atBreak: true, character: "*", after: "(?:[ 	\r\n*])" },
  { character: "*", inConstruct: "phrasing", notInConstruct: fullPhrasingSpans },
  // A plus sign could start a list item.
  { atBreak: true, character: "+", after: "(?:[ 	\r\n])" },
  // A dash can start thematic breaks, list items, and setext heading
  // underlines.
  { atBreak: true, character: "-", after: "(?:[ 	\r\n-])" },
  // A dot could start a list item.
  { atBreak: true, before: "\\d+", character: ".", after: "(?:[ 	\r\n]|$)" },
  // Slash, colon, and semicolon are not used in markdown for constructs.
  // A less than can start html (flow or text) or an autolink.
  // HTML could start with an exclamation mark (declaration, cdata, comment),
  // slash (closing tag), question mark (instruction), or a letter (tag).
  // An autolink also starts with a letter.
  // Finally, it could break out of a destination literal.
  { atBreak: true, character: "<", after: "[!/?A-Za-z]" },
  {
    character: "<",
    after: "[!/?A-Za-z]",
    inConstruct: "phrasing",
    notInConstruct: fullPhrasingSpans
  },
  { character: "<", inConstruct: "destinationLiteral" },
  // An equals to can start setext heading underlines.
  { atBreak: true, character: "=" },
  // A greater than can start block quotes and it can break out of a
  // destination literal.
  { atBreak: true, character: ">" },
  { character: ">", inConstruct: "destinationLiteral" },
  // Question mark and at sign are not used in markdown for constructs.
  // A left bracket can start definitions, references, labels,
  { atBreak: true, character: "[" },
  { character: "[", inConstruct: "phrasing", notInConstruct: fullPhrasingSpans },
  { character: "[", inConstruct: ["label", "reference"] },
  // A backslash can start an escape (when followed by punctuation) or a
  // hard break (when followed by an eol).
  // Note: typical escapes are handled in `safe`!
  { character: "\\", after: "[\\r\\n]", inConstruct: "phrasing" },
  // A right bracket can exit labels.
  { character: "]", inConstruct: ["label", "reference"] },
  // Caret is not used in markdown for constructs.
  // An underscore can start emphasis, strong, or a thematic break.
  { atBreak: true, character: "_" },
  { character: "_", inConstruct: "phrasing", notInConstruct: fullPhrasingSpans },
  // A grave accent can start code (fenced or text), or it can break out of
  // a grave accent code fence.
  { atBreak: true, character: "`" },
  {
    character: "`",
    inConstruct: ["codeFencedLangGraveAccent", "codeFencedMetaGraveAccent"]
  },
  { character: "`", inConstruct: "phrasing", notInConstruct: fullPhrasingSpans },
  // Left brace, vertical bar, right brace are not used in markdown for
  // constructs.
  // A tilde can start code (fenced).
  { atBreak: true, character: "~" }
];

// node_modules/mdast-util-to-markdown/lib/index.js
function toMarkdown(tree, options2 = {}) {
  const state = {
    enter: enter2,
    indentLines,
    associationId: association,
    containerPhrasing: containerPhrasingBound,
    containerFlow: containerFlowBound,
    createTracker: track,
    safe: safeBound,
    stack: [],
    unsafe: [],
    join: [],
    // @ts-expect-error: we’ll fill it next.
    handlers: {},
    options: {},
    indexStack: [],
    // @ts-expect-error: we’ll add `handle` later.
    handle: void 0
  };
  configure2(state, { unsafe, join: join3, handlers: handle3 });
  configure2(state, options2);
  if (state.options.tightDefinitions) {
    configure2(state, { join: [joinDefinition] });
  }
  state.handle = zwitch("type", {
    invalid: invalid2,
    unknown: unknown3,
    handlers: state.handlers
  });
  let result = state.handle(tree, void 0, state, {
    before: "\n",
    after: "\n",
    now: { line: 1, column: 1 },
    lineShift: 0
  });
  if (result && result.charCodeAt(result.length - 1) !== 10 && result.charCodeAt(result.length - 1) !== 13) {
    result += "\n";
  }
  return result;
  function enter2(name) {
    state.stack.push(name);
    return exit3;
    function exit3() {
      state.stack.pop();
    }
  }
}
function invalid2(value) {
  throw new Error("Cannot handle value `" + value + "`, expected node");
}
function unknown3(node4) {
  throw new Error("Cannot handle unknown node `" + node4.type + "`");
}
function joinDefinition(left2, right2) {
  if (left2.type === "definition" && left2.type === right2.type) {
    return 0;
  }
}
function containerPhrasingBound(parent, info) {
  return containerPhrasing(parent, this, info);
}
function containerFlowBound(parent, info) {
  return containerFlow(parent, this, info);
}
function safeBound(value, config) {
  return safe(this, value, config);
}

// node_modules/remark-stringify/lib/index.js
function remarkStringify(options2) {
  const compiler2 = (tree) => {
    const settings = (
      /** @type {Options} */
      this.data("settings")
    );
    return toMarkdown(
      tree,
      Object.assign({}, settings, options2, {
        // Note: this option is not in the readme.
        // The goal is for it to be set by plugins on `data` instead of being
        // passed by users.
        extensions: (
          /** @type {ToMarkdownOptions['extensions']} */
          this.data("toMarkdownExtensions") || []
        )
      })
    );
  };
  Object.assign(this, { Compiler: compiler2 });
}

// node_modules/bail/index.js
function bail(error) {
  if (error) {
    throw error;
  }
}

// node_modules/unified/lib/index.js
var import_is_buffer2 = __toESM(require_is_buffer(), 1);
var import_extend2 = __toESM(require_extend(), 1);

// node_modules/is-plain-obj/index.js
function isPlainObject2(value) {
  if (typeof value !== "object" || value === null) {
    return false;
  }
  const prototype = Object.getPrototypeOf(value);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
}

// node_modules/trough/index.js
function trough() {
  const fns2 = [];
  const pipeline = { run: run4, use };
  return pipeline;
  function run4(...values2) {
    let middlewareIndex = -1;
    const callback = values2.pop();
    if (typeof callback !== "function") {
      throw new TypeError("Expected function as last argument, not " + callback);
    }
    next2(null, ...values2);
    function next2(error, ...output) {
      const fn3 = fns2[++middlewareIndex];
      let index7 = -1;
      if (error) {
        callback(error);
        return;
      }
      while (++index7 < values2.length) {
        if (output[index7] === null || output[index7] === void 0) {
          output[index7] = values2[index7];
        }
      }
      values2 = output;
      if (fn3) {
        wrap4(fn3, next2)(...output);
      } else {
        callback(null, ...output);
      }
    }
  }
  function use(middelware) {
    if (typeof middelware !== "function") {
      throw new TypeError(
        "Expected `middelware` to be a function, not " + middelware
      );
    }
    fns2.push(middelware);
    return pipeline;
  }
}
function wrap4(middleware2, callback) {
  let called;
  return wrapped;
  function wrapped(...parameters) {
    const fnExpectsCallback = middleware2.length > parameters.length;
    let result;
    if (fnExpectsCallback) {
      parameters.push(done);
    }
    try {
      result = middleware2.apply(this, parameters);
    } catch (error) {
      const exception = (
        /** @type {Error} */
        error
      );
      if (fnExpectsCallback && called) {
        throw exception;
      }
      return done(exception);
    }
    if (!fnExpectsCallback) {
      if (result instanceof Promise) {
        result.then(then, done);
      } else if (result instanceof Error) {
        done(result);
      } else {
        then(result);
      }
    }
  }
  function done(error, ...output) {
    if (!called) {
      called = true;
      callback(error, ...output);
    }
  }
  function then(value) {
    done(null, value);
  }
}

// node_modules/vfile/lib/index.js
var import_is_buffer = __toESM(require_is_buffer(), 1);

// node_modules/vfile-message/lib/index.js
var VFileMessage = class extends Error {
  /**
   * Create a message for `reason` at `place` from `origin`.
   *
   * When an error is passed in as `reason`, the `stack` is copied.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   *
   *   > 👉 **Note**: you should use markdown.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns
   *   Instance of `VFileMessage`.
   */
  // To do: next major: expose `undefined` everywhere instead of `null`.
  constructor(reason, place, origin) {
    const parts = [null, null];
    let position5 = {
      // @ts-expect-error: we always follows the structure of `position`.
      start: { line: null, column: null },
      // @ts-expect-error: "
      end: { line: null, column: null }
    };
    super();
    if (typeof place === "string") {
      origin = place;
      place = void 0;
    }
    if (typeof origin === "string") {
      const index7 = origin.indexOf(":");
      if (index7 === -1) {
        parts[1] = origin;
      } else {
        parts[0] = origin.slice(0, index7);
        parts[1] = origin.slice(index7 + 1);
      }
    }
    if (place) {
      if ("type" in place || "position" in place) {
        if (place.position) {
          position5 = place.position;
        }
      } else if ("start" in place || "end" in place) {
        position5 = place;
      } else if ("line" in place || "column" in place) {
        position5.start = place;
      }
    }
    this.name = stringifyPosition(place) || "1:1";
    this.message = typeof reason === "object" ? reason.message : reason;
    this.stack = "";
    if (typeof reason === "object" && reason.stack) {
      this.stack = reason.stack;
    }
    this.reason = this.message;
    this.fatal;
    this.line = position5.start.line;
    this.column = position5.start.column;
    this.position = position5;
    this.source = parts[0];
    this.ruleId = parts[1];
    this.file;
    this.actual;
    this.expected;
    this.url;
    this.note;
  }
};
VFileMessage.prototype.file = "";
VFileMessage.prototype.name = "";
VFileMessage.prototype.reason = "";
VFileMessage.prototype.message = "";
VFileMessage.prototype.stack = "";
VFileMessage.prototype.fatal = null;
VFileMessage.prototype.column = null;
VFileMessage.prototype.line = null;
VFileMessage.prototype.source = null;
VFileMessage.prototype.ruleId = null;
VFileMessage.prototype.position = null;

// node_modules/vfile/lib/minpath.browser.js
var path2 = { basename, dirname, extname, join: join4, sep: "/" };
function basename(path3, ext) {
  if (ext !== void 0 && typeof ext !== "string") {
    throw new TypeError('"ext" argument must be a string');
  }
  assertPath(path3);
  let start2 = 0;
  let end2 = -1;
  let index7 = path3.length;
  let seenNonSlash;
  if (ext === void 0 || ext.length === 0 || ext.length > path3.length) {
    while (index7--) {
      if (path3.charCodeAt(index7) === 47) {
        if (seenNonSlash) {
          start2 = index7 + 1;
          break;
        }
      } else if (end2 < 0) {
        seenNonSlash = true;
        end2 = index7 + 1;
      }
    }
    return end2 < 0 ? "" : path3.slice(start2, end2);
  }
  if (ext === path3) {
    return "";
  }
  let firstNonSlashEnd = -1;
  let extIndex = ext.length - 1;
  while (index7--) {
    if (path3.charCodeAt(index7) === 47) {
      if (seenNonSlash) {
        start2 = index7 + 1;
        break;
      }
    } else {
      if (firstNonSlashEnd < 0) {
        seenNonSlash = true;
        firstNonSlashEnd = index7 + 1;
      }
      if (extIndex > -1) {
        if (path3.charCodeAt(index7) === ext.charCodeAt(extIndex--)) {
          if (extIndex < 0) {
            end2 = index7;
          }
        } else {
          extIndex = -1;
          end2 = firstNonSlashEnd;
        }
      }
    }
  }
  if (start2 === end2) {
    end2 = firstNonSlashEnd;
  } else if (end2 < 0) {
    end2 = path3.length;
  }
  return path3.slice(start2, end2);
}
function dirname(path3) {
  assertPath(path3);
  if (path3.length === 0) {
    return ".";
  }
  let end2 = -1;
  let index7 = path3.length;
  let unmatchedSlash;
  while (--index7) {
    if (path3.charCodeAt(index7) === 47) {
      if (unmatchedSlash) {
        end2 = index7;
        break;
      }
    } else if (!unmatchedSlash) {
      unmatchedSlash = true;
    }
  }
  return end2 < 0 ? path3.charCodeAt(0) === 47 ? "/" : "." : end2 === 1 && path3.charCodeAt(0) === 47 ? "//" : path3.slice(0, end2);
}
function extname(path3) {
  assertPath(path3);
  let index7 = path3.length;
  let end2 = -1;
  let startPart = 0;
  let startDot = -1;
  let preDotState = 0;
  let unmatchedSlash;
  while (index7--) {
    const code5 = path3.charCodeAt(index7);
    if (code5 === 47) {
      if (unmatchedSlash) {
        startPart = index7 + 1;
        break;
      }
      continue;
    }
    if (end2 < 0) {
      unmatchedSlash = true;
      end2 = index7 + 1;
    }
    if (code5 === 46) {
      if (startDot < 0) {
        startDot = index7;
      } else if (preDotState !== 1) {
        preDotState = 1;
      }
    } else if (startDot > -1) {
      preDotState = -1;
    }
  }
  if (startDot < 0 || end2 < 0 || // We saw a non-dot character immediately before the dot.
  preDotState === 0 || // The (right-most) trimmed path component is exactly `..`.
  preDotState === 1 && startDot === end2 - 1 && startDot === startPart + 1) {
    return "";
  }
  return path3.slice(startDot, end2);
}
function join4(...segments) {
  let index7 = -1;
  let joined;
  while (++index7 < segments.length) {
    assertPath(segments[index7]);
    if (segments[index7]) {
      joined = joined === void 0 ? segments[index7] : joined + "/" + segments[index7];
    }
  }
  return joined === void 0 ? "." : normalize3(joined);
}
function normalize3(path3) {
  assertPath(path3);
  const absolute = path3.charCodeAt(0) === 47;
  let value = normalizeString(path3, !absolute);
  if (value.length === 0 && !absolute) {
    value = ".";
  }
  if (value.length > 0 && path3.charCodeAt(path3.length - 1) === 47) {
    value += "/";
  }
  return absolute ? "/" + value : value;
}
function normalizeString(path3, allowAboveRoot) {
  let result = "";
  let lastSegmentLength = 0;
  let lastSlash = -1;
  let dots = 0;
  let index7 = -1;
  let code5;
  let lastSlashIndex;
  while (++index7 <= path3.length) {
    if (index7 < path3.length) {
      code5 = path3.charCodeAt(index7);
    } else if (code5 === 47) {
      break;
    } else {
      code5 = 47;
    }
    if (code5 === 47) {
      if (lastSlash === index7 - 1 || dots === 1) {
      } else if (lastSlash !== index7 - 1 && dots === 2) {
        if (result.length < 2 || lastSegmentLength !== 2 || result.charCodeAt(result.length - 1) !== 46 || result.charCodeAt(result.length - 2) !== 46) {
          if (result.length > 2) {
            lastSlashIndex = result.lastIndexOf("/");
            if (lastSlashIndex !== result.length - 1) {
              if (lastSlashIndex < 0) {
                result = "";
                lastSegmentLength = 0;
              } else {
                result = result.slice(0, lastSlashIndex);
                lastSegmentLength = result.length - 1 - result.lastIndexOf("/");
              }
              lastSlash = index7;
              dots = 0;
              continue;
            }
          } else if (result.length > 0) {
            result = "";
            lastSegmentLength = 0;
            lastSlash = index7;
            dots = 0;
            continue;
          }
        }
        if (allowAboveRoot) {
          result = result.length > 0 ? result + "/.." : "..";
          lastSegmentLength = 2;
        }
      } else {
        if (result.length > 0) {
          result += "/" + path3.slice(lastSlash + 1, index7);
        } else {
          result = path3.slice(lastSlash + 1, index7);
        }
        lastSegmentLength = index7 - lastSlash - 1;
      }
      lastSlash = index7;
      dots = 0;
    } else if (code5 === 46 && dots > -1) {
      dots++;
    } else {
      dots = -1;
    }
  }
  return result;
}
function assertPath(path3) {
  if (typeof path3 !== "string") {
    throw new TypeError(
      "Path must be a string. Received " + JSON.stringify(path3)
    );
  }
}

// node_modules/vfile/lib/minproc.browser.js
var proc = { cwd };
function cwd() {
  return "/";
}

// node_modules/vfile/lib/minurl.shared.js
function isUrl(fileUrlOrPath) {
  return fileUrlOrPath !== null && typeof fileUrlOrPath === "object" && // @ts-expect-error: indexable.
  fileUrlOrPath.href && // @ts-expect-error: indexable.
  fileUrlOrPath.origin;
}

// node_modules/vfile/lib/minurl.browser.js
function urlToPath(path3) {
  if (typeof path3 === "string") {
    path3 = new URL(path3);
  } else if (!isUrl(path3)) {
    const error = new TypeError(
      'The "path" argument must be of type string or an instance of URL. Received `' + path3 + "`"
    );
    error.code = "ERR_INVALID_ARG_TYPE";
    throw error;
  }
  if (path3.protocol !== "file:") {
    const error = new TypeError("The URL must be of scheme file");
    error.code = "ERR_INVALID_URL_SCHEME";
    throw error;
  }
  return getPathFromURLPosix(path3);
}
function getPathFromURLPosix(url) {
  if (url.hostname !== "") {
    const error = new TypeError(
      'File URL host must be "localhost" or empty on darwin'
    );
    error.code = "ERR_INVALID_FILE_URL_HOST";
    throw error;
  }
  const pathname = url.pathname;
  let index7 = -1;
  while (++index7 < pathname.length) {
    if (pathname.charCodeAt(index7) === 37 && pathname.charCodeAt(index7 + 1) === 50) {
      const third = pathname.charCodeAt(index7 + 2);
      if (third === 70 || third === 102) {
        const error = new TypeError(
          "File URL path must not include encoded / characters"
        );
        error.code = "ERR_INVALID_FILE_URL_PATH";
        throw error;
      }
    }
  }
  return decodeURIComponent(pathname);
}

// node_modules/vfile/lib/index.js
var order2 = ["history", "path", "basename", "stem", "extname", "dirname"];
var VFile = class {
  /**
   * Create a new virtual file.
   *
   * `options` is treated as:
   *
   * *   `string` or `Buffer` — `{value: options}`
   * *   `URL` — `{path: options}`
   * *   `VFile` — shallow copies its data over to the new file
   * *   `object` — all fields are shallow copied over to the new file
   *
   * Path related fields are set in the following order (least specific to
   * most specific): `history`, `path`, `basename`, `stem`, `extname`,
   * `dirname`.
   *
   * You cannot set `dirname` or `extname` without setting either `history`,
   * `path`, `basename`, or `stem` too.
   *
   * @param {Compatible | null | undefined} [value]
   *   File value.
   * @returns
   *   New instance.
   */
  constructor(value) {
    let options2;
    if (!value) {
      options2 = {};
    } else if (typeof value === "string" || buffer(value)) {
      options2 = { value };
    } else if (isUrl(value)) {
      options2 = { path: value };
    } else {
      options2 = value;
    }
    this.data = {};
    this.messages = [];
    this.history = [];
    this.cwd = proc.cwd();
    this.value;
    this.stored;
    this.result;
    this.map;
    let index7 = -1;
    while (++index7 < order2.length) {
      const prop2 = order2[index7];
      if (prop2 in options2 && options2[prop2] !== void 0 && options2[prop2] !== null) {
        this[prop2] = prop2 === "history" ? [...options2[prop2]] : options2[prop2];
      }
    }
    let prop;
    for (prop in options2) {
      if (!order2.includes(prop)) {
        this[prop] = options2[prop];
      }
    }
  }
  /**
   * Get the full path (example: `'~/index.min.js'`).
   *
   * @returns {string}
   */
  get path() {
    return this.history[this.history.length - 1];
  }
  /**
   * Set the full path (example: `'~/index.min.js'`).
   *
   * Cannot be nullified.
   * You can set a file URL (a `URL` object with a `file:` protocol) which will
   * be turned into a path with `url.fileURLToPath`.
   *
   * @param {string | URL} path
   */
  set path(path3) {
    if (isUrl(path3)) {
      path3 = urlToPath(path3);
    }
    assertNonEmpty(path3, "path");
    if (this.path !== path3) {
      this.history.push(path3);
    }
  }
  /**
   * Get the parent path (example: `'~'`).
   */
  get dirname() {
    return typeof this.path === "string" ? path2.dirname(this.path) : void 0;
  }
  /**
   * Set the parent path (example: `'~'`).
   *
   * Cannot be set if there’s no `path` yet.
   */
  set dirname(dirname2) {
    assertPath2(this.basename, "dirname");
    this.path = path2.join(dirname2 || "", this.basename);
  }
  /**
   * Get the basename (including extname) (example: `'index.min.js'`).
   */
  get basename() {
    return typeof this.path === "string" ? path2.basename(this.path) : void 0;
  }
  /**
   * Set basename (including extname) (`'index.min.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set basename(basename2) {
    assertNonEmpty(basename2, "basename");
    assertPart(basename2, "basename");
    this.path = path2.join(this.dirname || "", basename2);
  }
  /**
   * Get the extname (including dot) (example: `'.js'`).
   */
  get extname() {
    return typeof this.path === "string" ? path2.extname(this.path) : void 0;
  }
  /**
   * Set the extname (including dot) (example: `'.js'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be set if there’s no `path` yet.
   */
  set extname(extname2) {
    assertPart(extname2, "extname");
    assertPath2(this.dirname, "extname");
    if (extname2) {
      if (extname2.charCodeAt(0) !== 46) {
        throw new Error("`extname` must start with `.`");
      }
      if (extname2.includes(".", 1)) {
        throw new Error("`extname` cannot contain multiple dots");
      }
    }
    this.path = path2.join(this.dirname, this.stem + (extname2 || ""));
  }
  /**
   * Get the stem (basename w/o extname) (example: `'index.min'`).
   */
  get stem() {
    return typeof this.path === "string" ? path2.basename(this.path, this.extname) : void 0;
  }
  /**
   * Set the stem (basename w/o extname) (example: `'index.min'`).
   *
   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
   * on windows).
   * Cannot be nullified (use `file.path = file.dirname` instead).
   */
  set stem(stem) {
    assertNonEmpty(stem, "stem");
    assertPart(stem, "stem");
    this.path = path2.join(this.dirname || "", stem + (this.extname || ""));
  }
  /**
   * Serialize the file.
   *
   * @param {BufferEncoding | null | undefined} [encoding='utf8']
   *   Character encoding to understand `value` as when it’s a `Buffer`
   *   (default: `'utf8'`).
   * @returns {string}
   *   Serialized file.
   */
  toString(encoding) {
    return (this.value || "").toString(encoding || void 0);
  }
  /**
   * Create a warning message associated with the file.
   *
   * Its `fatal` is set to `false` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  message(reason, place, origin) {
    const message = new VFileMessage(reason, place, origin);
    if (this.path) {
      message.name = this.path + ":" + message.name;
      message.file = this.path;
    }
    message.fatal = false;
    this.messages.push(message);
    return message;
  }
  /**
   * Create an info message associated with the file.
   *
   * Its `fatal` is set to `null` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {VFileMessage}
   *   Message.
   */
  info(reason, place, origin) {
    const message = this.message(reason, place, origin);
    message.fatal = null;
    return message;
  }
  /**
   * Create a fatal error associated with the file.
   *
   * Its `fatal` is set to `true` and `file` is set to the current file path.
   * Its added to `file.messages`.
   *
   * > 👉 **Note**: a fatal error means that a file is no longer processable.
   *
   * @param {string | Error | VFileMessage} reason
   *   Reason for message, uses the stack and message of the error if given.
   * @param {Node | NodeLike | Position | Point | null | undefined} [place]
   *   Place in file where the message occurred.
   * @param {string | null | undefined} [origin]
   *   Place in code where the message originates (example:
   *   `'my-package:my-rule'` or `'my-rule'`).
   * @returns {never}
   *   Message.
   * @throws {VFileMessage}
   *   Message.
   */
  fail(reason, place, origin) {
    const message = this.message(reason, place, origin);
    message.fatal = true;
    throw message;
  }
};
function assertPart(part, name) {
  if (part && part.includes(path2.sep)) {
    throw new Error(
      "`" + name + "` cannot be a path: did not expect `" + path2.sep + "`"
    );
  }
}
function assertNonEmpty(part, name) {
  if (!part) {
    throw new Error("`" + name + "` cannot be empty");
  }
}
function assertPath2(path3, name) {
  if (!path3) {
    throw new Error("Setting `" + name + "` requires `path` to be set too");
  }
}
function buffer(value) {
  return (0, import_is_buffer.default)(value);
}

// node_modules/unified/lib/index.js
var unified = base4().freeze();
var own14 = {}.hasOwnProperty;
function base4() {
  const transformers = trough();
  const attachers = [];
  let namespace = {};
  let frozen;
  let freezeIndex = -1;
  processor.data = data;
  processor.Parser = void 0;
  processor.Compiler = void 0;
  processor.freeze = freeze;
  processor.attachers = attachers;
  processor.use = use;
  processor.parse = parse6;
  processor.stringify = stringify7;
  processor.run = run4;
  processor.runSync = runSync;
  processor.process = process2;
  processor.processSync = processSync;
  return processor;
  function processor() {
    const destination = base4();
    let index7 = -1;
    while (++index7 < attachers.length) {
      destination.use(...attachers[index7]);
    }
    destination.data((0, import_extend2.default)(true, {}, namespace));
    return destination;
  }
  function data(key2, value) {
    if (typeof key2 === "string") {
      if (arguments.length === 2) {
        assertUnfrozen("data", frozen);
        namespace[key2] = value;
        return processor;
      }
      return own14.call(namespace, key2) && namespace[key2] || null;
    }
    if (key2) {
      assertUnfrozen("data", frozen);
      namespace = key2;
      return processor;
    }
    return namespace;
  }
  function freeze() {
    if (frozen) {
      return processor;
    }
    while (++freezeIndex < attachers.length) {
      const [attacher, ...options2] = attachers[freezeIndex];
      if (options2[0] === false) {
        continue;
      }
      if (options2[0] === true) {
        options2[0] = void 0;
      }
      const transformer = attacher.call(processor, ...options2);
      if (typeof transformer === "function") {
        transformers.use(transformer);
      }
    }
    frozen = true;
    freezeIndex = Number.POSITIVE_INFINITY;
    return processor;
  }
  function use(value, ...options2) {
    let settings;
    assertUnfrozen("use", frozen);
    if (value === null || value === void 0) {
    } else if (typeof value === "function") {
      addPlugin(value, ...options2);
    } else if (typeof value === "object") {
      if (Array.isArray(value)) {
        addList(value);
      } else {
        addPreset(value);
      }
    } else {
      throw new TypeError("Expected usable value, not `" + value + "`");
    }
    if (settings) {
      namespace.settings = Object.assign(namespace.settings || {}, settings);
    }
    return processor;
    function add(value2) {
      if (typeof value2 === "function") {
        addPlugin(value2);
      } else if (typeof value2 === "object") {
        if (Array.isArray(value2)) {
          const [plugin, ...options3] = value2;
          addPlugin(plugin, ...options3);
        } else {
          addPreset(value2);
        }
      } else {
        throw new TypeError("Expected usable value, not `" + value2 + "`");
      }
    }
    function addPreset(result) {
      addList(result.plugins);
      if (result.settings) {
        settings = Object.assign(settings || {}, result.settings);
      }
    }
    function addList(plugins) {
      let index7 = -1;
      if (plugins === null || plugins === void 0) {
      } else if (Array.isArray(plugins)) {
        while (++index7 < plugins.length) {
          const thing = plugins[index7];
          add(thing);
        }
      } else {
        throw new TypeError("Expected a list of plugins, not `" + plugins + "`");
      }
    }
    function addPlugin(plugin, value2) {
      let index7 = -1;
      let entry;
      while (++index7 < attachers.length) {
        if (attachers[index7][0] === plugin) {
          entry = attachers[index7];
          break;
        }
      }
      if (entry) {
        if (isPlainObject2(entry[1]) && isPlainObject2(value2)) {
          value2 = (0, import_extend2.default)(true, entry[1], value2);
        }
        entry[1] = value2;
      } else {
        attachers.push([...arguments]);
      }
    }
  }
  function parse6(doc4) {
    processor.freeze();
    const file = vfile(doc4);
    const Parser = processor.Parser;
    assertParser("parse", Parser);
    if (newable(Parser, "parse")) {
      return new Parser(String(file), file).parse();
    }
    return Parser(String(file), file);
  }
  function stringify7(node4, doc4) {
    processor.freeze();
    const file = vfile(doc4);
    const Compiler = processor.Compiler;
    assertCompiler("stringify", Compiler);
    assertNode(node4);
    if (newable(Compiler, "compile")) {
      return new Compiler(node4, file).compile();
    }
    return Compiler(node4, file);
  }
  function run4(node4, doc4, callback) {
    assertNode(node4);
    processor.freeze();
    if (!callback && typeof doc4 === "function") {
      callback = doc4;
      doc4 = void 0;
    }
    if (!callback) {
      return new Promise(executor);
    }
    executor(null, callback);
    function executor(resolve2, reject) {
      transformers.run(node4, vfile(doc4), done);
      function done(error, tree, file) {
        tree = tree || node4;
        if (error) {
          reject(error);
        } else if (resolve2) {
          resolve2(tree);
        } else {
          callback(null, tree, file);
        }
      }
    }
  }
  function runSync(node4, file) {
    let result;
    let complete;
    processor.run(node4, file, done);
    assertDone("runSync", "run", complete);
    return result;
    function done(error, tree) {
      bail(error);
      result = tree;
      complete = true;
    }
  }
  function process2(doc4, callback) {
    processor.freeze();
    assertParser("process", processor.Parser);
    assertCompiler("process", processor.Compiler);
    if (!callback) {
      return new Promise(executor);
    }
    executor(null, callback);
    function executor(resolve2, reject) {
      const file = vfile(doc4);
      processor.run(processor.parse(file), file, (error, tree, file2) => {
        if (error || !tree || !file2) {
          done(error);
        } else {
          const result = processor.stringify(tree, file2);
          if (result === void 0 || result === null) {
          } else if (looksLikeAVFileValue(result)) {
            file2.value = result;
          } else {
            file2.result = result;
          }
          done(error, file2);
        }
      });
      function done(error, file2) {
        if (error || !file2) {
          reject(error);
        } else if (resolve2) {
          resolve2(file2);
        } else {
          callback(null, file2);
        }
      }
    }
  }
  function processSync(doc4) {
    let complete;
    processor.freeze();
    assertParser("processSync", processor.Parser);
    assertCompiler("processSync", processor.Compiler);
    const file = vfile(doc4);
    processor.process(file, done);
    assertDone("processSync", "process", complete);
    return file;
    function done(error) {
      complete = true;
      bail(error);
    }
  }
}
function newable(value, name) {
  return typeof value === "function" && // Prototypes do exist.
  // type-coverage:ignore-next-line
  value.prototype && // A function with keys in its prototype is probably a constructor.
  // Classes’ prototype methods are not enumerable, so we check if some value
  // exists in the prototype.
  // type-coverage:ignore-next-line
  (keys3(value.prototype) || name in value.prototype);
}
function keys3(value) {
  let key2;
  for (key2 in value) {
    if (own14.call(value, key2)) {
      return true;
    }
  }
  return false;
}
function assertParser(name, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name + "` without `Parser`");
  }
}
function assertCompiler(name, value) {
  if (typeof value !== "function") {
    throw new TypeError("Cannot `" + name + "` without `Compiler`");
  }
}
function assertUnfrozen(name, frozen) {
  if (frozen) {
    throw new Error(
      "Cannot call `" + name + "` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`."
    );
  }
}
function assertNode(node4) {
  if (!isPlainObject2(node4) || typeof node4.type !== "string") {
    throw new TypeError("Expected node, got `" + node4 + "`");
  }
}
function assertDone(name, asyncName, complete) {
  if (!complete) {
    throw new Error(
      "`" + name + "` finished async. Use `" + asyncName + "` instead"
    );
  }
}
function vfile(value) {
  return looksLikeAVFile(value) ? value : new VFile(value);
}
function looksLikeAVFile(value) {
  return Boolean(
    value && typeof value === "object" && "message" in value && "messages" in value
  );
}
function looksLikeAVFileValue(value) {
  return typeof value === "string" || (0, import_is_buffer2.default)(value);
}

// node_modules/hast-util-from-dom/lib/index.js
function fromDom(tree, options2) {
  const result = tree ? transform(tree, options2 || {}) : void 0;
  return result || { type: "root", children: [] };
}
function transform(node4, options2) {
  const transformed = one6(node4, options2);
  if (transformed && options2.afterTransform)
    options2.afterTransform(node4, transformed);
  return transformed;
}
function one6(node4, options2) {
  switch (node4.nodeType) {
    case 1: {
      return element5(node4, options2);
    }
    case 3: {
      return text8(node4);
    }
    case 8: {
      return comment4(node4);
    }
    case 9: {
      return root5(node4, options2);
    }
    case 10: {
      return doctype2();
    }
    case 11: {
      return root5(node4, options2);
    }
    default: {
      return void 0;
    }
  }
}
function root5(node4, options2) {
  return { type: "root", children: all7(node4, options2) };
}
function doctype2() {
  return { type: "doctype" };
}
function text8(node4) {
  return { type: "text", value: node4.nodeValue || "" };
}
function comment4(node4) {
  return { type: "comment", value: node4.nodeValue || "" };
}
function element5(node4, options2) {
  const space2 = node4.namespaceURI;
  const fn3 = space2 === webNamespaces.svg ? s : h;
  const tagName = space2 === webNamespaces.html ? node4.tagName.toLowerCase() : node4.tagName;
  const content5 = (
    // @ts-expect-error Types are wrong.
    space2 === webNamespaces.html && tagName === "template" ? node4.content : node4
  );
  const attributes = node4.getAttributeNames();
  const props = {};
  let index7 = -1;
  while (++index7 < attributes.length) {
    props[attributes[index7]] = node4.getAttribute(attributes[index7]) || "";
  }
  return fn3(tagName, props, all7(content5, options2));
}
function all7(node4, options2) {
  const nodes = node4.childNodes;
  const children = [];
  let index7 = -1;
  while (++index7 < nodes.length) {
    const child = transform(nodes[index7], options2);
    if (child !== void 0) {
      children.push(child);
    }
  }
  return children;
}

// node_modules/@tiptap/extension-bold/dist/index.js
var starInputRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/;
var starPasteRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/g;
var underscoreInputRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))$/;
var underscorePasteRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))/g;
var Bold = Mark2.create({
  name: "bold",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "strong"
      },
      {
        tag: "b",
        getAttrs: (node4) => node4.style.fontWeight !== "normal" && null
      },
      {
        style: "font-weight",
        getAttrs: (value) => /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["strong", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setBold: () => ({ commands: commands2 }) => {
        return commands2.setMark(this.name);
      },
      toggleBold: () => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name);
      },
      unsetBold: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-b": () => this.editor.commands.toggleBold(),
      "Mod-B": () => this.editor.commands.toggleBold()
    };
  },
  addInputRules() {
    return [
      markInputRule({
        find: starInputRegex,
        type: this.type
      }),
      markInputRule({
        find: underscoreInputRegex,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: starPasteRegex,
        type: this.type
      }),
      markPasteRule({
        find: underscorePasteRegex,
        type: this.type
      })
    ];
  }
});

// node_modules/@tiptap/extension-code/dist/index.js
var inputRegex = /(?:^|\s)((?:`)((?:[^`]+))(?:`))$/;
var pasteRegex = /(?:^|\s)((?:`)((?:[^`]+))(?:`))/g;
var Code2 = Mark2.create({
  name: "code",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  excludes: "_",
  code: true,
  exitable: true,
  parseHTML() {
    return [
      { tag: "code" }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["code", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setCode: () => ({ commands: commands2 }) => {
        return commands2.setMark(this.name);
      },
      toggleCode: () => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name);
      },
      unsetCode: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-e": () => this.editor.commands.toggleCode()
    };
  },
  addInputRules() {
    return [
      markInputRule({
        find: inputRegex,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: pasteRegex,
        type: this.type
      })
    ];
  }
});

// node_modules/lib0/map.js
var create2 = () => /* @__PURE__ */ new Map();
var copy3 = (m) => {
  const r = create2();
  m.forEach((v, k) => {
    r.set(k, v);
  });
  return r;
};
var setIfUndefined = (map6, key2, createT) => {
  let set = map6.get(key2);
  if (set === void 0) {
    map6.set(key2, set = createT());
  }
  return set;
};
var map4 = (m, f2) => {
  const res = [];
  for (const [key2, value] of m) {
    res.push(f2(value, key2));
  }
  return res;
};
var any = (m, f2) => {
  for (const [key2, value] of m) {
    if (f2(value, key2)) {
      return true;
    }
  }
  return false;
};

// node_modules/lib0/set.js
var create3 = () => /* @__PURE__ */ new Set();

// node_modules/lib0/array.js
var last = (arr) => arr[arr.length - 1];
var appendTo = (dest, src) => {
  for (let i = 0; i < src.length; i++) {
    dest.push(src[i]);
  }
};
var from3 = Array.from;
var some = (arr, f2) => {
  for (let i = 0; i < arr.length; i++) {
    if (f2(arr[i], i, arr)) {
      return true;
    }
  }
  return false;
};
var isArray = Array.isArray;

// node_modules/lib0/observable.js
var Observable = class {
  constructor() {
    this._observers = create2();
  }
  /**
   * @param {N} name
   * @param {function} f
   */
  on(name, f2) {
    setIfUndefined(this._observers, name, create3).add(f2);
  }
  /**
   * @param {N} name
   * @param {function} f
   */
  once(name, f2) {
    const _f = (...args2) => {
      this.off(name, _f);
      f2(...args2);
    };
    this.on(name, _f);
  }
  /**
   * @param {N} name
   * @param {function} f
   */
  off(name, f2) {
    const observers = this._observers.get(name);
    if (observers !== void 0) {
      observers.delete(f2);
      if (observers.size === 0) {
        this._observers.delete(name);
      }
    }
  }
  /**
   * Emit a named event. All registered event listeners that listen to the
   * specified name will receive the event.
   *
   * @todo This should catch exceptions
   *
   * @param {N} name The event name.
   * @param {Array<any>} args The arguments that are applied to the event listener.
   */
  emit(name, args2) {
    return from3((this._observers.get(name) || create2()).values()).forEach((f2) => f2(...args2));
  }
  destroy() {
    this._observers = create2();
  }
};

// node_modules/lib0/math.js
var floor = Math.floor;
var abs2 = Math.abs;
var min4 = (a2, b2) => a2 < b2 ? a2 : b2;
var max4 = (a2, b2) => a2 > b2 ? a2 : b2;
var isNaN2 = Number.isNaN;
var isNegativeZero = (n) => n !== 0 ? n < 0 : 1 / n < 0;

// node_modules/lib0/string.js
var fromCharCode = String.fromCharCode;
var fromCodePoint = String.fromCodePoint;
var toLowerCase = (s2) => s2.toLowerCase();
var trimLeftRegex = /^\s*/g;
var trimLeft = (s2) => s2.replace(trimLeftRegex, "");
var fromCamelCaseRegex = /([A-Z])/g;
var fromCamelCase = (s2, separator) => trimLeft(s2.replace(fromCamelCaseRegex, (match2) => `${separator}${toLowerCase(match2)}`));
var _encodeUtf8Polyfill = (str) => {
  const encodedString = unescape(encodeURIComponent(str));
  const len = encodedString.length;
  const buf = new Uint8Array(len);
  for (let i = 0; i < len; i++) {
    buf[i] = /** @type {number} */
    encodedString.codePointAt(i);
  }
  return buf;
};
var utf8TextEncoder = (
  /** @type {TextEncoder} */
  typeof TextEncoder !== "undefined" ? new TextEncoder() : null
);
var _encodeUtf8Native = (str) => utf8TextEncoder.encode(str);
var encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;
var utf8TextDecoder = typeof TextDecoder === "undefined" ? null : new TextDecoder("utf-8", { fatal: true, ignoreBOM: true });
if (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {
  utf8TextDecoder = null;
}

// node_modules/lib0/conditions.js
var undefinedToNull = (v) => v === void 0 ? null : v;

// node_modules/lib0/storage.js
var VarStoragePolyfill = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  /**
   * @param {string} key
   * @param {any} newValue
   */
  setItem(key2, newValue) {
    this.map.set(key2, newValue);
  }
  /**
   * @param {string} key
   */
  getItem(key2) {
    return this.map.get(key2);
  }
};
var _localStorage = new VarStoragePolyfill();
var usePolyfill = true;
try {
  if (typeof localStorage !== "undefined") {
    _localStorage = localStorage;
    usePolyfill = false;
  }
} catch (e) {
}
var varStorage = _localStorage;

// node_modules/lib0/object.js
var assign2 = Object.assign;
var keys4 = Object.keys;
var forEach2 = (obj, f2) => {
  for (const key2 in obj) {
    f2(obj[key2], key2);
  }
};
var length2 = (obj) => keys4(obj).length;
var isEmpty = (obj) => {
  for (const _k in obj) {
    return false;
  }
  return true;
};
var every = (obj, f2) => {
  for (const key2 in obj) {
    if (!f2(obj[key2], key2)) {
      return false;
    }
  }
  return true;
};
var hasProperty2 = (obj, key2) => Object.prototype.hasOwnProperty.call(obj, key2);
var equalFlat = (a2, b2) => a2 === b2 || length2(a2) === length2(b2) && every(a2, (val, key2) => (val !== void 0 || hasProperty2(b2, key2)) && b2[key2] === val);

// node_modules/lib0/function.js
var callAll = (fs, args2, i = 0) => {
  try {
    for (; i < fs.length; i++) {
      fs[i](...args2);
    }
  } finally {
    if (i < fs.length) {
      callAll(fs, args2, i + 1);
    }
  }
};
var isOneOf = (value, options2) => options2.includes(value);

// node_modules/lib0/environment.js
var isNode3 = typeof process !== "undefined" && process.release && /node|io\.js/.test(process.release.name);
var isBrowser5 = typeof window !== "undefined" && typeof document !== "undefined" && !isNode3;
var isMac2 = typeof navigator !== "undefined" ? /Mac/.test(navigator.platform) : false;
var params;
var args = [];
var computeParams = () => {
  if (params === void 0) {
    if (isNode3) {
      params = create2();
      const pargs = process.argv;
      let currParamName = null;
      for (let i = 0; i < pargs.length; i++) {
        const parg = pargs[i];
        if (parg[0] === "-") {
          if (currParamName !== null) {
            params.set(currParamName, "");
          }
          currParamName = parg;
        } else {
          if (currParamName !== null) {
            params.set(currParamName, parg);
            currParamName = null;
          } else {
            args.push(parg);
          }
        }
      }
      if (currParamName !== null) {
        params.set(currParamName, "");
      }
    } else if (typeof location === "object") {
      params = create2();
      (location.search || "?").slice(1).split("&").forEach((kv) => {
        if (kv.length !== 0) {
          const [key2, value] = kv.split("=");
          params.set(`--${fromCamelCase(key2, "-")}`, value);
          params.set(`-${fromCamelCase(key2, "-")}`, value);
        }
      });
    } else {
      params = create2();
    }
  }
  return params;
};
var hasParam = (name) => computeParams().has(name);
var getVariable = (name) => isNode3 ? undefinedToNull(process.env[name.toUpperCase()]) : undefinedToNull(varStorage.getItem(name));
var hasConf = (name) => hasParam("--" + name) || getVariable(name) !== null;
var production = hasConf("production");
var forceColor = isNode3 && isOneOf(process.env.FORCE_COLOR, ["true", "1", "2"]);
var supportsColor = !hasParam("no-colors") && (!isNode3 || process.stdout.isTTY || forceColor) && (!isNode3 || hasParam("color") || forceColor || getVariable("COLORTERM") !== null || (getVariable("TERM") || "").includes("color"));

// node_modules/lib0/binary.js
var BIT1 = 1;
var BIT2 = 2;
var BIT3 = 4;
var BIT4 = 8;
var BIT6 = 32;
var BIT7 = 64;
var BIT8 = 128;
var BIT18 = 1 << 17;
var BIT19 = 1 << 18;
var BIT20 = 1 << 19;
var BIT21 = 1 << 20;
var BIT22 = 1 << 21;
var BIT23 = 1 << 22;
var BIT24 = 1 << 23;
var BIT25 = 1 << 24;
var BIT26 = 1 << 25;
var BIT27 = 1 << 26;
var BIT28 = 1 << 27;
var BIT29 = 1 << 28;
var BIT30 = 1 << 29;
var BIT31 = 1 << 30;
var BIT32 = 1 << 31;
var BITS5 = 31;
var BITS6 = 63;
var BITS7 = 127;
var BITS17 = BIT18 - 1;
var BITS18 = BIT19 - 1;
var BITS19 = BIT20 - 1;
var BITS20 = BIT21 - 1;
var BITS21 = BIT22 - 1;
var BITS22 = BIT23 - 1;
var BITS23 = BIT24 - 1;
var BITS24 = BIT25 - 1;
var BITS25 = BIT26 - 1;
var BITS26 = BIT27 - 1;
var BITS27 = BIT28 - 1;
var BITS28 = BIT29 - 1;
var BITS29 = BIT30 - 1;
var BITS30 = BIT31 - 1;
var BITS31 = 2147483647;

// node_modules/lib0/number.js
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;
var MIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER;
var LOWEST_INT32 = 1 << 31;
var isInteger = Number.isInteger || ((num) => typeof num === "number" && isFinite(num) && floor(num) === num);
var isNaN3 = Number.isNaN;
var parseInt2 = Number.parseInt;

// node_modules/lib0/error.js
var create4 = (s2) => new Error(s2);
var methodUnimplemented = () => {
  throw create4("Method unimplemented");
};
var unexpectedCase = () => {
  throw create4("Unexpected case");
};

// node_modules/lib0/decoding.js
var errorUnexpectedEndOfArray = create4("Unexpected end of array");
var errorIntegerOutOfRange = create4("Integer out of Range");

// node_modules/lib0/buffer.js
var createUint8ArrayViewFromArrayBuffer = (buffer2, byteOffset, length4) => new Uint8Array(buffer2, byteOffset, length4);

// node_modules/lib0/encoding.js
var Encoder = class {
  constructor() {
    this.cpos = 0;
    this.cbuf = new Uint8Array(100);
    this.bufs = [];
  }
};
var createEncoder = () => new Encoder();
var length3 = (encoder) => {
  let len = encoder.cpos;
  for (let i = 0; i < encoder.bufs.length; i++) {
    len += encoder.bufs[i].length;
  }
  return len;
};
var toUint8Array = (encoder) => {
  const uint8arr = new Uint8Array(length3(encoder));
  let curPos = 0;
  for (let i = 0; i < encoder.bufs.length; i++) {
    const d = encoder.bufs[i];
    uint8arr.set(d, curPos);
    curPos += d.length;
  }
  uint8arr.set(createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos), curPos);
  return uint8arr;
};
var verifyLen = (encoder, len) => {
  const bufferLen = encoder.cbuf.length;
  if (bufferLen - encoder.cpos < len) {
    encoder.bufs.push(createUint8ArrayViewFromArrayBuffer(encoder.cbuf.buffer, 0, encoder.cpos));
    encoder.cbuf = new Uint8Array(max4(bufferLen, len) * 2);
    encoder.cpos = 0;
  }
};
var write2 = (encoder, num) => {
  const bufferLen = encoder.cbuf.length;
  if (encoder.cpos === bufferLen) {
    encoder.bufs.push(encoder.cbuf);
    encoder.cbuf = new Uint8Array(bufferLen * 2);
    encoder.cpos = 0;
  }
  encoder.cbuf[encoder.cpos++] = num;
};
var writeUint8 = write2;
var writeVarUint = (encoder, num) => {
  while (num > BITS7) {
    write2(encoder, BIT8 | BITS7 & num);
    num = floor(num / 128);
  }
  write2(encoder, BITS7 & num);
};
var writeVarInt = (encoder, num) => {
  const isNegative = isNegativeZero(num);
  if (isNegative) {
    num = -num;
  }
  write2(encoder, (num > BITS6 ? BIT8 : 0) | (isNegative ? BIT7 : 0) | BITS6 & num);
  num = floor(num / 64);
  while (num > 0) {
    write2(encoder, (num > BITS7 ? BIT8 : 0) | BITS7 & num);
    num = floor(num / 128);
  }
};
var _strBuffer = new Uint8Array(3e4);
var _maxStrBSize = _strBuffer.length / 3;
var _writeVarStringNative = (encoder, str) => {
  if (str.length < _maxStrBSize) {
    const written = utf8TextEncoder.encodeInto(str, _strBuffer).written || 0;
    writeVarUint(encoder, written);
    for (let i = 0; i < written; i++) {
      write2(encoder, _strBuffer[i]);
    }
  } else {
    writeVarUint8Array(encoder, encodeUtf8(str));
  }
};
var _writeVarStringPolyfill = (encoder, str) => {
  const encodedString = unescape(encodeURIComponent(str));
  const len = encodedString.length;
  writeVarUint(encoder, len);
  for (let i = 0; i < len; i++) {
    write2(
      encoder,
      /** @type {number} */
      encodedString.codePointAt(i)
    );
  }
};
var writeVarString = utf8TextEncoder && /** @type {any} */
utf8TextEncoder.encodeInto ? _writeVarStringNative : _writeVarStringPolyfill;
var writeUint8Array = (encoder, uint8Array) => {
  const bufferLen = encoder.cbuf.length;
  const cpos = encoder.cpos;
  const leftCopyLen = min4(bufferLen - cpos, uint8Array.length);
  const rightCopyLen = uint8Array.length - leftCopyLen;
  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);
  encoder.cpos += leftCopyLen;
  if (rightCopyLen > 0) {
    encoder.bufs.push(encoder.cbuf);
    encoder.cbuf = new Uint8Array(max4(bufferLen * 2, rightCopyLen));
    encoder.cbuf.set(uint8Array.subarray(leftCopyLen));
    encoder.cpos = rightCopyLen;
  }
};
var writeVarUint8Array = (encoder, uint8Array) => {
  writeVarUint(encoder, uint8Array.byteLength);
  writeUint8Array(encoder, uint8Array);
};
var writeOnDataView = (encoder, len) => {
  verifyLen(encoder, len);
  const dview = new DataView(encoder.cbuf.buffer, encoder.cpos, len);
  encoder.cpos += len;
  return dview;
};
var writeFloat32 = (encoder, num) => writeOnDataView(encoder, 4).setFloat32(0, num, false);
var writeFloat64 = (encoder, num) => writeOnDataView(encoder, 8).setFloat64(0, num, false);
var writeBigInt64 = (encoder, num) => (
  /** @type {any} */
  writeOnDataView(encoder, 8).setBigInt64(0, num, false)
);
var floatTestBed = new DataView(new ArrayBuffer(4));
var isFloat32 = (num) => {
  floatTestBed.setFloat32(0, num);
  return floatTestBed.getFloat32(0) === num;
};
var writeAny = (encoder, data) => {
  switch (typeof data) {
    case "string":
      write2(encoder, 119);
      writeVarString(encoder, data);
      break;
    case "number":
      if (isInteger(data) && abs2(data) <= BITS31) {
        write2(encoder, 125);
        writeVarInt(encoder, data);
      } else if (isFloat32(data)) {
        write2(encoder, 124);
        writeFloat32(encoder, data);
      } else {
        write2(encoder, 123);
        writeFloat64(encoder, data);
      }
      break;
    case "bigint":
      write2(encoder, 122);
      writeBigInt64(encoder, data);
      break;
    case "object":
      if (data === null) {
        write2(encoder, 126);
      } else if (isArray(data)) {
        write2(encoder, 117);
        writeVarUint(encoder, data.length);
        for (let i = 0; i < data.length; i++) {
          writeAny(encoder, data[i]);
        }
      } else if (data instanceof Uint8Array) {
        write2(encoder, 116);
        writeVarUint8Array(encoder, data);
      } else {
        write2(encoder, 118);
        const keys5 = Object.keys(data);
        writeVarUint(encoder, keys5.length);
        for (let i = 0; i < keys5.length; i++) {
          const key2 = keys5[i];
          writeVarString(encoder, key2);
          writeAny(encoder, data[key2]);
        }
      }
      break;
    case "boolean":
      write2(encoder, data ? 120 : 121);
      break;
    default:
      write2(encoder, 127);
  }
};
var RleEncoder = class extends Encoder {
  /**
   * @param {function(Encoder, T):void} writer
   */
  constructor(writer) {
    super();
    this.w = writer;
    this.s = null;
    this.count = 0;
  }
  /**
   * @param {T} v
   */
  write(v) {
    if (this.s === v) {
      this.count++;
    } else {
      if (this.count > 0) {
        writeVarUint(this, this.count - 1);
      }
      this.count = 1;
      this.w(this, v);
      this.s = v;
    }
  }
};
var flushUintOptRleEncoder = (encoder) => {
  if (encoder.count > 0) {
    writeVarInt(encoder.encoder, encoder.count === 1 ? encoder.s : -encoder.s);
    if (encoder.count > 1) {
      writeVarUint(encoder.encoder, encoder.count - 2);
    }
  }
};
var UintOptRleEncoder = class {
  constructor() {
    this.encoder = new Encoder();
    this.s = 0;
    this.count = 0;
  }
  /**
   * @param {number} v
   */
  write(v) {
    if (this.s === v) {
      this.count++;
    } else {
      flushUintOptRleEncoder(this);
      this.count = 1;
      this.s = v;
    }
  }
  toUint8Array() {
    flushUintOptRleEncoder(this);
    return toUint8Array(this.encoder);
  }
};
var flushIntDiffOptRleEncoder = (encoder) => {
  if (encoder.count > 0) {
    const encodedDiff = encoder.diff * 2 + (encoder.count === 1 ? 0 : 1);
    writeVarInt(encoder.encoder, encodedDiff);
    if (encoder.count > 1) {
      writeVarUint(encoder.encoder, encoder.count - 2);
    }
  }
};
var IntDiffOptRleEncoder = class {
  constructor() {
    this.encoder = new Encoder();
    this.s = 0;
    this.count = 0;
    this.diff = 0;
  }
  /**
   * @param {number} v
   */
  write(v) {
    if (this.diff === v - this.s) {
      this.s = v;
      this.count++;
    } else {
      flushIntDiffOptRleEncoder(this);
      this.count = 1;
      this.diff = v - this.s;
      this.s = v;
    }
  }
  toUint8Array() {
    flushIntDiffOptRleEncoder(this);
    return toUint8Array(this.encoder);
  }
};
var StringEncoder = class {
  constructor() {
    this.sarr = [];
    this.s = "";
    this.lensE = new UintOptRleEncoder();
  }
  /**
   * @param {string} string
   */
  write(string3) {
    this.s += string3;
    if (this.s.length > 19) {
      this.sarr.push(this.s);
      this.s = "";
    }
    this.lensE.write(string3.length);
  }
  toUint8Array() {
    const encoder = new Encoder();
    this.sarr.push(this.s);
    this.s = "";
    writeVarString(encoder, this.sarr.join(""));
    writeUint8Array(encoder, this.lensE.toUint8Array());
    return toUint8Array(encoder);
  }
};

// node_modules/lib0/webcrypto.js
var subtle = crypto.subtle;
var getRandomValues2 = crypto.getRandomValues.bind(crypto);

// node_modules/lib0/random.js
var rand = Math.random;
var uint32 = () => getRandomValues2(new Uint32Array(1))[0];
var oneOf = (arr) => arr[floor(rand() * arr.length)];
var uuidv4Template = [1e7] + -1e3 + -4e3 + -8e3 + -1e11;
var uuidv4 = () => uuidv4Template.replace(
  /[018]/g,
  /** @param {number} c */
  (c) => (c ^ uint32() & 15 >> c / 4).toString(16)
);

// node_modules/lib0/time.js
var getUnixTime = Date.now;

// node_modules/lib0/promise.js
var create5 = (f2) => (
  /** @type {Promise<T>} */
  new Promise(f2)
);
var all8 = Promise.all.bind(Promise);

// node_modules/lib0/pair.js
var Pair = class {
  /**
   * @param {L} left
   * @param {R} right
   */
  constructor(left2, right2) {
    this.left = left2;
    this.right = right2;
  }
};
var create6 = (left2, right2) => new Pair(left2, right2);

// node_modules/lib0/dom.js
var doc3 = (
  /** @type {Document} */
  typeof document !== "undefined" ? document : {}
);
var domParser = (
  /** @type {DOMParser} */
  typeof DOMParser !== "undefined" ? new DOMParser() : null
);
var mapToStyleString = (m) => map4(m, (value, key2) => `${key2}:${value};`).join("");
var ELEMENT_NODE = doc3.ELEMENT_NODE;
var TEXT_NODE = doc3.TEXT_NODE;
var CDATA_SECTION_NODE = doc3.CDATA_SECTION_NODE;
var COMMENT_NODE = doc3.COMMENT_NODE;
var DOCUMENT_NODE = doc3.DOCUMENT_NODE;
var DOCUMENT_TYPE_NODE = doc3.DOCUMENT_TYPE_NODE;
var DOCUMENT_FRAGMENT_NODE = doc3.DOCUMENT_FRAGMENT_NODE;

// node_modules/lib0/eventloop.js
var createTimeoutClass = (clearFunction) => class TT {
  /**
   * @param {number} timeoutId
   */
  constructor(timeoutId2) {
    this._ = timeoutId2;
  }
  destroy() {
    clearFunction(this._);
  }
};
var Timeout = createTimeoutClass(clearTimeout);
var timeout = (timeout2, callback) => new Timeout(setTimeout(callback, timeout2));
var Interval = createTimeoutClass(clearInterval);
var Animation = createTimeoutClass((arg) => typeof requestAnimationFrame !== "undefined" && cancelAnimationFrame(arg));
var Idle = createTimeoutClass((arg) => typeof cancelIdleCallback !== "undefined" && cancelIdleCallback(arg));

// node_modules/lib0/symbol.js
var create7 = Symbol;

// node_modules/lib0/logging.common.js
var BOLD = create7();
var UNBOLD = create7();
var BLUE = create7();
var GREY = create7();
var GREEN = create7();
var RED = create7();
var PURPLE = create7();
var ORANGE = create7();
var UNCOLOR = create7();
var computeNoColorLoggingArgs = (args2) => {
  const strBuilder = [];
  const logArgs = [];
  let i = 0;
  for (; i < args2.length; i++) {
    const arg = args2[i];
    if (arg.constructor === String || arg.constructor === Number) {
      strBuilder.push(arg);
    } else if (arg.constructor === Object) {
      logArgs.push(JSON.stringify(arg));
    }
  }
  return logArgs;
};
var lastLoggingTime = getUnixTime();

// node_modules/lib0/logging.js
var _browserStyleMap = {
  [BOLD]: create6("font-weight", "bold"),
  [UNBOLD]: create6("font-weight", "normal"),
  [BLUE]: create6("color", "blue"),
  [GREEN]: create6("color", "green"),
  [GREY]: create6("color", "grey"),
  [RED]: create6("color", "red"),
  [PURPLE]: create6("color", "purple"),
  [ORANGE]: create6("color", "orange"),
  // not well supported in chrome when debugging node with inspector - TODO: deprecate
  [UNCOLOR]: create6("color", "black")
};
var computeBrowserLoggingArgs = (args2) => {
  const strBuilder = [];
  const styles2 = [];
  const currentStyle = create2();
  let logArgs = [];
  let i = 0;
  for (; i < args2.length; i++) {
    const arg = args2[i];
    const style3 = _browserStyleMap[arg];
    if (style3 !== void 0) {
      currentStyle.set(style3.left, style3.right);
    } else {
      if (arg.constructor === String || arg.constructor === Number) {
        const style4 = mapToStyleString(currentStyle);
        if (i > 0 || style4.length > 0) {
          strBuilder.push("%c" + arg);
          styles2.push(style4);
        } else {
          strBuilder.push(arg);
        }
      } else {
        break;
      }
    }
  }
  if (i > 0) {
    logArgs = styles2;
    logArgs.unshift(strBuilder.join(""));
  }
  for (; i < args2.length; i++) {
    const arg = args2[i];
    if (!(arg instanceof Symbol)) {
      logArgs.push(arg);
    }
  }
  return logArgs;
};
var computeLoggingArgs = supportsColor ? computeBrowserLoggingArgs : computeNoColorLoggingArgs;
var print = (...args2) => {
  console.log(...computeLoggingArgs(args2));
  vconsoles.forEach((vc) => vc.print(args2));
};
var vconsoles = create3();

// node_modules/lib0/iterator.js
var createIterator = (next2) => ({
  /**
   * @return {IterableIterator<T>}
   */
  [Symbol.iterator]() {
    return this;
  },
  // @ts-ignore
  next: next2
});
var iteratorFilter = (iterator, filter) => createIterator(() => {
  let res;
  do {
    res = iterator.next();
  } while (!res.done && !filter(res.value));
  return res;
});
var iteratorMap = (iterator, fmap) => createIterator(() => {
  const { done, value } = iterator.next();
  return { done, value: done ? void 0 : fmap(value) };
});

// node_modules/yjs/dist/yjs.mjs
var DeleteItem = class {
  /**
   * @param {number} clock
   * @param {number} len
   */
  constructor(clock, len) {
    this.clock = clock;
    this.len = len;
  }
};
var DeleteSet = class {
  constructor() {
    this.clients = /* @__PURE__ */ new Map();
  }
};
var iterateDeletedStructs = (transaction, ds, f2) => ds.clients.forEach((deletes, clientid) => {
  const structs = (
    /** @type {Array<GC|Item>} */
    transaction.doc.store.clients.get(clientid)
  );
  for (let i = 0; i < deletes.length; i++) {
    const del3 = deletes[i];
    iterateStructs(transaction, structs, del3.clock, del3.len, f2);
  }
});
var findIndexDS = (dis, clock) => {
  let left2 = 0;
  let right2 = dis.length - 1;
  while (left2 <= right2) {
    const midindex = floor((left2 + right2) / 2);
    const mid = dis[midindex];
    const midclock = mid.clock;
    if (midclock <= clock) {
      if (clock < midclock + mid.len) {
        return midindex;
      }
      left2 = midindex + 1;
    } else {
      right2 = midindex - 1;
    }
  }
  return null;
};
var isDeleted = (ds, id2) => {
  const dis = ds.clients.get(id2.client);
  return dis !== void 0 && findIndexDS(dis, id2.clock) !== null;
};
var sortAndMergeDeleteSet = (ds) => {
  ds.clients.forEach((dels) => {
    dels.sort((a2, b2) => a2.clock - b2.clock);
    let i, j;
    for (i = 1, j = 1; i < dels.length; i++) {
      const left2 = dels[j - 1];
      const right2 = dels[i];
      if (left2.clock + left2.len >= right2.clock) {
        left2.len = max4(left2.len, right2.clock + right2.len - left2.clock);
      } else {
        if (j < i) {
          dels[j] = right2;
        }
        j++;
      }
    }
    dels.length = j;
  });
};
var mergeDeleteSets = (dss) => {
  const merged = new DeleteSet();
  for (let dssI = 0; dssI < dss.length; dssI++) {
    dss[dssI].clients.forEach((delsLeft, client) => {
      if (!merged.clients.has(client)) {
        const dels = delsLeft.slice();
        for (let i = dssI + 1; i < dss.length; i++) {
          appendTo(dels, dss[i].clients.get(client) || []);
        }
        merged.clients.set(client, dels);
      }
    });
  }
  sortAndMergeDeleteSet(merged);
  return merged;
};
var addToDeleteSet = (ds, client, clock, length4) => {
  setIfUndefined(ds.clients, client, () => (
    /** @type {Array<DeleteItem>} */
    []
  )).push(new DeleteItem(clock, length4));
};
var createDeleteSet = () => new DeleteSet();
var createDeleteSetFromStructStore = (ss) => {
  const ds = createDeleteSet();
  ss.clients.forEach((structs, client) => {
    const dsitems = [];
    for (let i = 0; i < structs.length; i++) {
      const struct = structs[i];
      if (struct.deleted) {
        const clock = struct.id.clock;
        let len = struct.length;
        if (i + 1 < structs.length) {
          for (let next2 = structs[i + 1]; i + 1 < structs.length && next2.deleted; next2 = structs[++i + 1]) {
            len += next2.length;
          }
        }
        dsitems.push(new DeleteItem(clock, len));
      }
    }
    if (dsitems.length > 0) {
      ds.clients.set(client, dsitems);
    }
  });
  return ds;
};
var writeDeleteSet = (encoder, ds) => {
  writeVarUint(encoder.restEncoder, ds.clients.size);
  from3(ds.clients.entries()).sort((a2, b2) => b2[0] - a2[0]).forEach(([client, dsitems]) => {
    encoder.resetDsCurVal();
    writeVarUint(encoder.restEncoder, client);
    const len = dsitems.length;
    writeVarUint(encoder.restEncoder, len);
    for (let i = 0; i < len; i++) {
      const item = dsitems[i];
      encoder.writeDsClock(item.clock);
      encoder.writeDsLen(item.len);
    }
  });
};
var generateNewClientId = uint32;
var Doc = class extends Observable {
  /**
   * @param {DocOpts} opts configuration
   */
  constructor({ guid = uuidv4(), collectionid = null, gc = true, gcFilter = () => true, meta: meta2 = null, autoLoad = false, shouldLoad = true } = {}) {
    super();
    this.gc = gc;
    this.gcFilter = gcFilter;
    this.clientID = generateNewClientId();
    this.guid = guid;
    this.collectionid = collectionid;
    this.share = /* @__PURE__ */ new Map();
    this.store = new StructStore();
    this._transaction = null;
    this._transactionCleanups = [];
    this.subdocs = /* @__PURE__ */ new Set();
    this._item = null;
    this.shouldLoad = shouldLoad;
    this.autoLoad = autoLoad;
    this.meta = meta2;
    this.isLoaded = false;
    this.isSynced = false;
    this.whenLoaded = create5((resolve2) => {
      this.on("load", () => {
        this.isLoaded = true;
        resolve2(this);
      });
    });
    const provideSyncedPromise = () => create5((resolve2) => {
      const eventHandler = (isSynced) => {
        if (isSynced === void 0 || isSynced === true) {
          this.off("sync", eventHandler);
          resolve2();
        }
      };
      this.on("sync", eventHandler);
    });
    this.on("sync", (isSynced) => {
      if (isSynced === false && this.isSynced) {
        this.whenSynced = provideSyncedPromise();
      }
      this.isSynced = isSynced === void 0 || isSynced === true;
      if (!this.isLoaded) {
        this.emit("load", []);
      }
    });
    this.whenSynced = provideSyncedPromise();
  }
  /**
   * Notify the parent document that you request to load data into this subdocument (if it is a subdocument).
   *
   * `load()` might be used in the future to request any provider to load the most current data.
   *
   * It is safe to call `load()` multiple times.
   */
  load() {
    const item = this._item;
    if (item !== null && !this.shouldLoad) {
      transact(
        /** @type {any} */
        item.parent.doc,
        (transaction) => {
          transaction.subdocsLoaded.add(this);
        },
        null,
        true
      );
    }
    this.shouldLoad = true;
  }
  getSubdocs() {
    return this.subdocs;
  }
  getSubdocGuids() {
    return new Set(from3(this.subdocs).map((doc4) => doc4.guid));
  }
  /**
   * Changes that happen inside of a transaction are bundled. This means that
   * the observer fires _after_ the transaction is finished and that all changes
   * that happened inside of the transaction are sent as one message to the
   * other peers.
   *
   * @template T
   * @param {function(Transaction):T} f The function that should be executed as a transaction
   * @param {any} [origin] Origin of who started the transaction. Will be stored on transaction.origin
   * @return T
   *
   * @public
   */
  transact(f2, origin = null) {
    return transact(this, f2, origin);
  }
  /**
   * Define a shared data type.
   *
   * Multiple calls of `y.get(name, TypeConstructor)` yield the same result
   * and do not overwrite each other. I.e.
   * `y.define(name, Y.Array) === y.define(name, Y.Array)`
   *
   * After this method is called, the type is also available on `y.share.get(name)`.
   *
   * *Best Practices:*
   * Define all types right after the Yjs instance is created and store them in a separate object.
   * Also use the typed methods `getText(name)`, `getArray(name)`, ..
   *
   * @example
   *   const y = new Y(..)
   *   const appState = {
   *     document: y.getText('document')
   *     comments: y.getArray('comments')
   *   }
   *
   * @param {string} name
   * @param {Function} TypeConstructor The constructor of the type definition. E.g. Y.Text, Y.Array, Y.Map, ...
   * @return {AbstractType<any>} The created type. Constructed with TypeConstructor
   *
   * @public
   */
  get(name, TypeConstructor = AbstractType) {
    const type = setIfUndefined(this.share, name, () => {
      const t = new TypeConstructor();
      t._integrate(this, null);
      return t;
    });
    const Constr = type.constructor;
    if (TypeConstructor !== AbstractType && Constr !== TypeConstructor) {
      if (Constr === AbstractType) {
        const t = new TypeConstructor();
        t._map = type._map;
        type._map.forEach(
          /** @param {Item?} n */
          (n) => {
            for (; n !== null; n = n.left) {
              n.parent = t;
            }
          }
        );
        t._start = type._start;
        for (let n = t._start; n !== null; n = n.right) {
          n.parent = t;
        }
        t._length = type._length;
        this.share.set(name, t);
        t._integrate(this, null);
        return t;
      } else {
        throw new Error(`Type with the name ${name} has already been defined with a different constructor`);
      }
    }
    return type;
  }
  /**
   * @template T
   * @param {string} [name]
   * @return {YArray<T>}
   *
   * @public
   */
  getArray(name = "") {
    return this.get(name, YArray);
  }
  /**
   * @param {string} [name]
   * @return {YText}
   *
   * @public
   */
  getText(name = "") {
    return this.get(name, YText);
  }
  /**
   * @template T
   * @param {string} [name]
   * @return {YMap<T>}
   *
   * @public
   */
  getMap(name = "") {
    return this.get(name, YMap);
  }
  /**
   * @param {string} [name]
   * @return {YXmlFragment}
   *
   * @public
   */
  getXmlFragment(name = "") {
    return this.get(name, YXmlFragment);
  }
  /**
   * Converts the entire document into a js object, recursively traversing each yjs type
   * Doesn't log types that have not been defined (using ydoc.getType(..)).
   *
   * @deprecated Do not use this method and rather call toJSON directly on the shared types.
   *
   * @return {Object<string, any>}
   */
  toJSON() {
    const doc4 = {};
    this.share.forEach((value, key2) => {
      doc4[key2] = value.toJSON();
    });
    return doc4;
  }
  /**
   * Emit `destroy` event and unregister all event handlers.
   */
  destroy() {
    from3(this.subdocs).forEach((subdoc) => subdoc.destroy());
    const item = this._item;
    if (item !== null) {
      this._item = null;
      const content5 = (
        /** @type {ContentDoc} */
        item.content
      );
      content5.doc = new Doc({ guid: this.guid, ...content5.opts, shouldLoad: false });
      content5.doc._item = item;
      transact(
        /** @type {any} */
        item.parent.doc,
        (transaction) => {
          const doc4 = content5.doc;
          if (!item.deleted) {
            transaction.subdocsAdded.add(doc4);
          }
          transaction.subdocsRemoved.add(this);
        },
        null,
        true
      );
    }
    this.emit("destroyed", [true]);
    this.emit("destroy", [this]);
    super.destroy();
  }
  /**
   * @param {string} eventName
   * @param {function(...any):any} f
   */
  on(eventName, f2) {
    super.on(eventName, f2);
  }
  /**
   * @param {string} eventName
   * @param {function} f
   */
  off(eventName, f2) {
    super.off(eventName, f2);
  }
};
var DSEncoderV1 = class {
  constructor() {
    this.restEncoder = createEncoder();
  }
  toUint8Array() {
    return toUint8Array(this.restEncoder);
  }
  resetDsCurVal() {
  }
  /**
   * @param {number} clock
   */
  writeDsClock(clock) {
    writeVarUint(this.restEncoder, clock);
  }
  /**
   * @param {number} len
   */
  writeDsLen(len) {
    writeVarUint(this.restEncoder, len);
  }
};
var UpdateEncoderV1 = class extends DSEncoderV1 {
  /**
   * @param {ID} id
   */
  writeLeftID(id2) {
    writeVarUint(this.restEncoder, id2.client);
    writeVarUint(this.restEncoder, id2.clock);
  }
  /**
   * @param {ID} id
   */
  writeRightID(id2) {
    writeVarUint(this.restEncoder, id2.client);
    writeVarUint(this.restEncoder, id2.clock);
  }
  /**
   * Use writeClient and writeClock instead of writeID if possible.
   * @param {number} client
   */
  writeClient(client) {
    writeVarUint(this.restEncoder, client);
  }
  /**
   * @param {number} info An unsigned 8-bit integer
   */
  writeInfo(info) {
    writeUint8(this.restEncoder, info);
  }
  /**
   * @param {string} s
   */
  writeString(s2) {
    writeVarString(this.restEncoder, s2);
  }
  /**
   * @param {boolean} isYKey
   */
  writeParentInfo(isYKey) {
    writeVarUint(this.restEncoder, isYKey ? 1 : 0);
  }
  /**
   * @param {number} info An unsigned 8-bit integer
   */
  writeTypeRef(info) {
    writeVarUint(this.restEncoder, info);
  }
  /**
   * Write len of a struct - well suited for Opt RLE encoder.
   *
   * @param {number} len
   */
  writeLen(len) {
    writeVarUint(this.restEncoder, len);
  }
  /**
   * @param {any} any
   */
  writeAny(any2) {
    writeAny(this.restEncoder, any2);
  }
  /**
   * @param {Uint8Array} buf
   */
  writeBuf(buf) {
    writeVarUint8Array(this.restEncoder, buf);
  }
  /**
   * @param {any} embed
   */
  writeJSON(embed) {
    writeVarString(this.restEncoder, JSON.stringify(embed));
  }
  /**
   * @param {string} key
   */
  writeKey(key2) {
    writeVarString(this.restEncoder, key2);
  }
};
var DSEncoderV2 = class {
  constructor() {
    this.restEncoder = createEncoder();
    this.dsCurrVal = 0;
  }
  toUint8Array() {
    return toUint8Array(this.restEncoder);
  }
  resetDsCurVal() {
    this.dsCurrVal = 0;
  }
  /**
   * @param {number} clock
   */
  writeDsClock(clock) {
    const diff2 = clock - this.dsCurrVal;
    this.dsCurrVal = clock;
    writeVarUint(this.restEncoder, diff2);
  }
  /**
   * @param {number} len
   */
  writeDsLen(len) {
    if (len === 0) {
      unexpectedCase();
    }
    writeVarUint(this.restEncoder, len - 1);
    this.dsCurrVal += len;
  }
};
var UpdateEncoderV2 = class extends DSEncoderV2 {
  constructor() {
    super();
    this.keyMap = /* @__PURE__ */ new Map();
    this.keyClock = 0;
    this.keyClockEncoder = new IntDiffOptRleEncoder();
    this.clientEncoder = new UintOptRleEncoder();
    this.leftClockEncoder = new IntDiffOptRleEncoder();
    this.rightClockEncoder = new IntDiffOptRleEncoder();
    this.infoEncoder = new RleEncoder(writeUint8);
    this.stringEncoder = new StringEncoder();
    this.parentInfoEncoder = new RleEncoder(writeUint8);
    this.typeRefEncoder = new UintOptRleEncoder();
    this.lenEncoder = new UintOptRleEncoder();
  }
  toUint8Array() {
    const encoder = createEncoder();
    writeVarUint(encoder, 0);
    writeVarUint8Array(encoder, this.keyClockEncoder.toUint8Array());
    writeVarUint8Array(encoder, this.clientEncoder.toUint8Array());
    writeVarUint8Array(encoder, this.leftClockEncoder.toUint8Array());
    writeVarUint8Array(encoder, this.rightClockEncoder.toUint8Array());
    writeVarUint8Array(encoder, toUint8Array(this.infoEncoder));
    writeVarUint8Array(encoder, this.stringEncoder.toUint8Array());
    writeVarUint8Array(encoder, toUint8Array(this.parentInfoEncoder));
    writeVarUint8Array(encoder, this.typeRefEncoder.toUint8Array());
    writeVarUint8Array(encoder, this.lenEncoder.toUint8Array());
    writeUint8Array(encoder, toUint8Array(this.restEncoder));
    return toUint8Array(encoder);
  }
  /**
   * @param {ID} id
   */
  writeLeftID(id2) {
    this.clientEncoder.write(id2.client);
    this.leftClockEncoder.write(id2.clock);
  }
  /**
   * @param {ID} id
   */
  writeRightID(id2) {
    this.clientEncoder.write(id2.client);
    this.rightClockEncoder.write(id2.clock);
  }
  /**
   * @param {number} client
   */
  writeClient(client) {
    this.clientEncoder.write(client);
  }
  /**
   * @param {number} info An unsigned 8-bit integer
   */
  writeInfo(info) {
    this.infoEncoder.write(info);
  }
  /**
   * @param {string} s
   */
  writeString(s2) {
    this.stringEncoder.write(s2);
  }
  /**
   * @param {boolean} isYKey
   */
  writeParentInfo(isYKey) {
    this.parentInfoEncoder.write(isYKey ? 1 : 0);
  }
  /**
   * @param {number} info An unsigned 8-bit integer
   */
  writeTypeRef(info) {
    this.typeRefEncoder.write(info);
  }
  /**
   * Write len of a struct - well suited for Opt RLE encoder.
   *
   * @param {number} len
   */
  writeLen(len) {
    this.lenEncoder.write(len);
  }
  /**
   * @param {any} any
   */
  writeAny(any2) {
    writeAny(this.restEncoder, any2);
  }
  /**
   * @param {Uint8Array} buf
   */
  writeBuf(buf) {
    writeVarUint8Array(this.restEncoder, buf);
  }
  /**
   * This is mainly here for legacy purposes.
   *
   * Initial we incoded objects using JSON. Now we use the much faster lib0/any-encoder. This method mainly exists for legacy purposes for the v1 encoder.
   *
   * @param {any} embed
   */
  writeJSON(embed) {
    writeAny(this.restEncoder, embed);
  }
  /**
   * Property keys are often reused. For example, in y-prosemirror the key `bold` might
   * occur very often. For a 3d application, the key `position` might occur very often.
   *
   * We cache these keys in a Map and refer to them via a unique number.
   *
   * @param {string} key
   */
  writeKey(key2) {
    const clock = this.keyMap.get(key2);
    if (clock === void 0) {
      this.keyClockEncoder.write(this.keyClock++);
      this.stringEncoder.write(key2);
    } else {
      this.keyClockEncoder.write(clock);
    }
  }
};
var writeStructs = (encoder, structs, client, clock) => {
  clock = max4(clock, structs[0].id.clock);
  const startNewStructs = findIndexSS(structs, clock);
  writeVarUint(encoder.restEncoder, structs.length - startNewStructs);
  encoder.writeClient(client);
  writeVarUint(encoder.restEncoder, clock);
  const firstStruct = structs[startNewStructs];
  firstStruct.write(encoder, clock - firstStruct.id.clock);
  for (let i = startNewStructs + 1; i < structs.length; i++) {
    structs[i].write(encoder, 0);
  }
};
var writeClientsStructs = (encoder, store, _sm) => {
  const sm = /* @__PURE__ */ new Map();
  _sm.forEach((clock, client) => {
    if (getState(store, client) > clock) {
      sm.set(client, clock);
    }
  });
  getStateVector(store).forEach((clock, client) => {
    if (!_sm.has(client)) {
      sm.set(client, 0);
    }
  });
  writeVarUint(encoder.restEncoder, sm.size);
  from3(sm.entries()).sort((a2, b2) => b2[0] - a2[0]).forEach(([client, clock]) => {
    writeStructs(encoder, store.clients.get(client), client, clock);
  });
};
var writeStructsFromTransaction = (encoder, transaction) => writeClientsStructs(encoder, transaction.doc.store, transaction.beforeState);
var EventHandler = class {
  constructor() {
    this.l = [];
  }
};
var createEventHandler2 = () => new EventHandler();
var addEventHandlerListener = (eventHandler, f2) => eventHandler.l.push(f2);
var removeEventHandlerListener = (eventHandler, f2) => {
  const l = eventHandler.l;
  const len = l.length;
  eventHandler.l = l.filter((g2) => f2 !== g2);
  if (len === eventHandler.l.length) {
    console.error("[yjs] Tried to remove event handler that doesn't exist.");
  }
};
var callEventHandlerListeners = (eventHandler, arg0, arg1) => callAll(eventHandler.l, [arg0, arg1]);
var ID = class {
  /**
   * @param {number} client client id
   * @param {number} clock unique per client id, continuous number
   */
  constructor(client, clock) {
    this.client = client;
    this.clock = clock;
  }
};
var compareIDs = (a2, b2) => a2 === b2 || a2 !== null && b2 !== null && a2.client === b2.client && a2.clock === b2.clock;
var createID = (client, clock) => new ID(client, clock);
var findRootTypeKey = (type) => {
  for (const [key2, value] of type.doc.share.entries()) {
    if (value === type) {
      return key2;
    }
  }
  throw unexpectedCase();
};
var isParentOf = (parent, child) => {
  while (child !== null) {
    if (child.parent === parent) {
      return true;
    }
    child = /** @type {AbstractType<any>} */
    child.parent._item;
  }
  return false;
};
var RelativePosition = class {
  /**
   * @param {ID|null} type
   * @param {string|null} tname
   * @param {ID|null} item
   * @param {number} assoc
   */
  constructor(type, tname, item, assoc = 0) {
    this.type = type;
    this.tname = tname;
    this.item = item;
    this.assoc = assoc;
  }
};
var createRelativePositionFromJSON = (json) => new RelativePosition(json.type == null ? null : createID(json.type.client, json.type.clock), json.tname || null, json.item == null ? null : createID(json.item.client, json.item.clock), json.assoc == null ? 0 : json.assoc);
var AbsolutePosition = class {
  /**
   * @param {AbstractType<any>} type
   * @param {number} index
   * @param {number} [assoc]
   */
  constructor(type, index7, assoc = 0) {
    this.type = type;
    this.index = index7;
    this.assoc = assoc;
  }
};
var createAbsolutePosition = (type, index7, assoc = 0) => new AbsolutePosition(type, index7, assoc);
var createRelativePosition = (type, item, assoc) => {
  let typeid = null;
  let tname = null;
  if (type._item === null) {
    tname = findRootTypeKey(type);
  } else {
    typeid = createID(type._item.id.client, type._item.id.clock);
  }
  return new RelativePosition(typeid, tname, item, assoc);
};
var createRelativePositionFromTypeIndex = (type, index7, assoc = 0) => {
  let t = type._start;
  if (assoc < 0) {
    if (index7 === 0) {
      return createRelativePosition(type, null, assoc);
    }
    index7--;
  }
  while (t !== null) {
    if (!t.deleted && t.countable) {
      if (t.length > index7) {
        return createRelativePosition(type, createID(t.id.client, t.id.clock + index7), assoc);
      }
      index7 -= t.length;
    }
    if (t.right === null && assoc < 0) {
      return createRelativePosition(type, t.lastId, assoc);
    }
    t = t.right;
  }
  return createRelativePosition(type, null, assoc);
};
var createAbsolutePositionFromRelativePosition = (rpos, doc4) => {
  const store = doc4.store;
  const rightID = rpos.item;
  const typeID = rpos.type;
  const tname = rpos.tname;
  const assoc = rpos.assoc;
  let type = null;
  let index7 = 0;
  if (rightID !== null) {
    if (getState(store, rightID.client) <= rightID.clock) {
      return null;
    }
    const res = followRedone(store, rightID);
    const right2 = res.item;
    if (!(right2 instanceof Item)) {
      return null;
    }
    type = /** @type {AbstractType<any>} */
    right2.parent;
    if (type._item === null || !type._item.deleted) {
      index7 = right2.deleted || !right2.countable ? 0 : res.diff + (assoc >= 0 ? 0 : 1);
      let n = right2.left;
      while (n !== null) {
        if (!n.deleted && n.countable) {
          index7 += n.length;
        }
        n = n.left;
      }
    }
  } else {
    if (tname !== null) {
      type = doc4.get(tname);
    } else if (typeID !== null) {
      if (getState(store, typeID.client) <= typeID.clock) {
        return null;
      }
      const { item } = followRedone(store, typeID);
      if (item instanceof Item && item.content instanceof ContentType) {
        type = item.content.type;
      } else {
        return null;
      }
    } else {
      throw unexpectedCase();
    }
    if (assoc >= 0) {
      index7 = type._length;
    } else {
      index7 = 0;
    }
  }
  return createAbsolutePosition(type, index7, rpos.assoc);
};
var compareRelativePositions = (a2, b2) => a2 === b2 || a2 !== null && b2 !== null && a2.tname === b2.tname && compareIDs(a2.item, b2.item) && compareIDs(a2.type, b2.type) && a2.assoc === b2.assoc;
var Snapshot = class {
  /**
   * @param {DeleteSet} ds
   * @param {Map<number,number>} sv state map
   */
  constructor(ds, sv2) {
    this.ds = ds;
    this.sv = sv2;
  }
};
var createSnapshot = (ds, sm) => new Snapshot(ds, sm);
var emptySnapshot = createSnapshot(createDeleteSet(), /* @__PURE__ */ new Map());
var snapshot = (doc4) => createSnapshot(createDeleteSetFromStructStore(doc4.store), getStateVector(doc4.store));
var isVisible = (item, snapshot2) => snapshot2 === void 0 ? !item.deleted : snapshot2.sv.has(item.id.client) && (snapshot2.sv.get(item.id.client) || 0) > item.id.clock && !isDeleted(snapshot2.ds, item.id);
var splitSnapshotAffectedStructs = (transaction, snapshot2) => {
  const meta2 = setIfUndefined(transaction.meta, splitSnapshotAffectedStructs, create3);
  const store = transaction.doc.store;
  if (!meta2.has(snapshot2)) {
    snapshot2.sv.forEach((clock, client) => {
      if (clock < getState(store, client)) {
        getItemCleanStart(transaction, createID(client, clock));
      }
    });
    iterateDeletedStructs(transaction, snapshot2.ds, (item) => {
    });
    meta2.add(snapshot2);
  }
};
var StructStore = class {
  constructor() {
    this.clients = /* @__PURE__ */ new Map();
    this.pendingStructs = null;
    this.pendingDs = null;
  }
};
var getStateVector = (store) => {
  const sm = /* @__PURE__ */ new Map();
  store.clients.forEach((structs, client) => {
    const struct = structs[structs.length - 1];
    sm.set(client, struct.id.clock + struct.length);
  });
  return sm;
};
var getState = (store, client) => {
  const structs = store.clients.get(client);
  if (structs === void 0) {
    return 0;
  }
  const lastStruct = structs[structs.length - 1];
  return lastStruct.id.clock + lastStruct.length;
};
var addStruct = (store, struct) => {
  let structs = store.clients.get(struct.id.client);
  if (structs === void 0) {
    structs = [];
    store.clients.set(struct.id.client, structs);
  } else {
    const lastStruct = structs[structs.length - 1];
    if (lastStruct.id.clock + lastStruct.length !== struct.id.clock) {
      throw unexpectedCase();
    }
  }
  structs.push(struct);
};
var findIndexSS = (structs, clock) => {
  let left2 = 0;
  let right2 = structs.length - 1;
  let mid = structs[right2];
  let midclock = mid.id.clock;
  if (midclock === clock) {
    return right2;
  }
  let midindex = floor(clock / (midclock + mid.length - 1) * right2);
  while (left2 <= right2) {
    mid = structs[midindex];
    midclock = mid.id.clock;
    if (midclock <= clock) {
      if (clock < midclock + mid.length) {
        return midindex;
      }
      left2 = midindex + 1;
    } else {
      right2 = midindex - 1;
    }
    midindex = floor((left2 + right2) / 2);
  }
  throw unexpectedCase();
};
var find3 = (store, id2) => {
  const structs = store.clients.get(id2.client);
  return structs[findIndexSS(structs, id2.clock)];
};
var getItem = (
  /** @type {function(StructStore,ID):Item} */
  find3
);
var findIndexCleanStart = (transaction, structs, clock) => {
  const index7 = findIndexSS(structs, clock);
  const struct = structs[index7];
  if (struct.id.clock < clock && struct instanceof Item) {
    structs.splice(index7 + 1, 0, splitItem(transaction, struct, clock - struct.id.clock));
    return index7 + 1;
  }
  return index7;
};
var getItemCleanStart = (transaction, id2) => {
  const structs = (
    /** @type {Array<Item>} */
    transaction.doc.store.clients.get(id2.client)
  );
  return structs[findIndexCleanStart(transaction, structs, id2.clock)];
};
var getItemCleanEnd = (transaction, store, id2) => {
  const structs = store.clients.get(id2.client);
  const index7 = findIndexSS(structs, id2.clock);
  const struct = structs[index7];
  if (id2.clock !== struct.id.clock + struct.length - 1 && struct.constructor !== GC) {
    structs.splice(index7 + 1, 0, splitItem(transaction, struct, id2.clock - struct.id.clock + 1));
  }
  return struct;
};
var replaceStruct = (store, struct, newStruct) => {
  const structs = (
    /** @type {Array<GC|Item>} */
    store.clients.get(struct.id.client)
  );
  structs[findIndexSS(structs, struct.id.clock)] = newStruct;
};
var iterateStructs = (transaction, structs, clockStart, len, f2) => {
  if (len === 0) {
    return;
  }
  const clockEnd = clockStart + len;
  let index7 = findIndexCleanStart(transaction, structs, clockStart);
  let struct;
  do {
    struct = structs[index7++];
    if (clockEnd < struct.id.clock + struct.length) {
      findIndexCleanStart(transaction, structs, clockEnd);
    }
    f2(struct);
  } while (index7 < structs.length && structs[index7].id.clock < clockEnd);
};
var Transaction2 = class {
  /**
   * @param {Doc} doc
   * @param {any} origin
   * @param {boolean} local
   */
  constructor(doc4, origin, local) {
    this.doc = doc4;
    this.deleteSet = new DeleteSet();
    this.beforeState = getStateVector(doc4.store);
    this.afterState = /* @__PURE__ */ new Map();
    this.changed = /* @__PURE__ */ new Map();
    this.changedParentTypes = /* @__PURE__ */ new Map();
    this._mergeStructs = [];
    this.origin = origin;
    this.meta = /* @__PURE__ */ new Map();
    this.local = local;
    this.subdocsAdded = /* @__PURE__ */ new Set();
    this.subdocsRemoved = /* @__PURE__ */ new Set();
    this.subdocsLoaded = /* @__PURE__ */ new Set();
  }
};
var writeUpdateMessageFromTransaction = (encoder, transaction) => {
  if (transaction.deleteSet.clients.size === 0 && !any(transaction.afterState, (clock, client) => transaction.beforeState.get(client) !== clock)) {
    return false;
  }
  sortAndMergeDeleteSet(transaction.deleteSet);
  writeStructsFromTransaction(encoder, transaction);
  writeDeleteSet(encoder, transaction.deleteSet);
  return true;
};
var addChangedTypeToTransaction = (transaction, type, parentSub) => {
  const item = type._item;
  if (item === null || item.id.clock < (transaction.beforeState.get(item.id.client) || 0) && !item.deleted) {
    setIfUndefined(transaction.changed, type, create3).add(parentSub);
  }
};
var tryToMergeWithLeft = (structs, pos) => {
  const left2 = structs[pos - 1];
  const right2 = structs[pos];
  if (left2.deleted === right2.deleted && left2.constructor === right2.constructor) {
    if (left2.mergeWith(right2)) {
      structs.splice(pos, 1);
      if (right2 instanceof Item && right2.parentSub !== null && /** @type {AbstractType<any>} */
      right2.parent._map.get(right2.parentSub) === right2) {
        right2.parent._map.set(
          right2.parentSub,
          /** @type {Item} */
          left2
        );
      }
    }
  }
};
var tryGcDeleteSet = (ds, store, gcFilter) => {
  for (const [client, deleteItems] of ds.clients.entries()) {
    const structs = (
      /** @type {Array<GC|Item>} */
      store.clients.get(client)
    );
    for (let di = deleteItems.length - 1; di >= 0; di--) {
      const deleteItem = deleteItems[di];
      const endDeleteItemClock = deleteItem.clock + deleteItem.len;
      for (let si = findIndexSS(structs, deleteItem.clock), struct = structs[si]; si < structs.length && struct.id.clock < endDeleteItemClock; struct = structs[++si]) {
        const struct2 = structs[si];
        if (deleteItem.clock + deleteItem.len <= struct2.id.clock) {
          break;
        }
        if (struct2 instanceof Item && struct2.deleted && !struct2.keep && gcFilter(struct2)) {
          struct2.gc(store, false);
        }
      }
    }
  }
};
var tryMergeDeleteSet = (ds, store) => {
  ds.clients.forEach((deleteItems, client) => {
    const structs = (
      /** @type {Array<GC|Item>} */
      store.clients.get(client)
    );
    for (let di = deleteItems.length - 1; di >= 0; di--) {
      const deleteItem = deleteItems[di];
      const mostRightIndexToCheck = min4(structs.length - 1, 1 + findIndexSS(structs, deleteItem.clock + deleteItem.len - 1));
      for (let si = mostRightIndexToCheck, struct = structs[si]; si > 0 && struct.id.clock >= deleteItem.clock; struct = structs[--si]) {
        tryToMergeWithLeft(structs, si);
      }
    }
  });
};
var cleanupTransactions = (transactionCleanups, i) => {
  if (i < transactionCleanups.length) {
    const transaction = transactionCleanups[i];
    const doc4 = transaction.doc;
    const store = doc4.store;
    const ds = transaction.deleteSet;
    const mergeStructs = transaction._mergeStructs;
    try {
      sortAndMergeDeleteSet(ds);
      transaction.afterState = getStateVector(transaction.doc.store);
      doc4.emit("beforeObserverCalls", [transaction, doc4]);
      const fs = [];
      transaction.changed.forEach(
        (subs, itemtype) => fs.push(() => {
          if (itemtype._item === null || !itemtype._item.deleted) {
            itemtype._callObserver(transaction, subs);
          }
        })
      );
      fs.push(() => {
        transaction.changedParentTypes.forEach(
          (events, type) => fs.push(() => {
            if (type._item === null || !type._item.deleted) {
              events = events.filter(
                (event) => event.target._item === null || !event.target._item.deleted
              );
              events.forEach((event) => {
                event.currentTarget = type;
              });
              events.sort((event1, event2) => event1.path.length - event2.path.length);
              callEventHandlerListeners(type._dEH, events, transaction);
            }
          })
        );
        fs.push(() => doc4.emit("afterTransaction", [transaction, doc4]));
      });
      callAll(fs, []);
    } finally {
      if (doc4.gc) {
        tryGcDeleteSet(ds, store, doc4.gcFilter);
      }
      tryMergeDeleteSet(ds, store);
      transaction.afterState.forEach((clock, client) => {
        const beforeClock = transaction.beforeState.get(client) || 0;
        if (beforeClock !== clock) {
          const structs = (
            /** @type {Array<GC|Item>} */
            store.clients.get(client)
          );
          const firstChangePos = max4(findIndexSS(structs, beforeClock), 1);
          for (let i2 = structs.length - 1; i2 >= firstChangePos; i2--) {
            tryToMergeWithLeft(structs, i2);
          }
        }
      });
      for (let i2 = 0; i2 < mergeStructs.length; i2++) {
        const { client, clock } = mergeStructs[i2].id;
        const structs = (
          /** @type {Array<GC|Item>} */
          store.clients.get(client)
        );
        const replacedStructPos = findIndexSS(structs, clock);
        if (replacedStructPos + 1 < structs.length) {
          tryToMergeWithLeft(structs, replacedStructPos + 1);
        }
        if (replacedStructPos > 0) {
          tryToMergeWithLeft(structs, replacedStructPos);
        }
      }
      if (!transaction.local && transaction.afterState.get(doc4.clientID) !== transaction.beforeState.get(doc4.clientID)) {
        print(ORANGE, BOLD, "[yjs] ", UNBOLD, RED, "Changed the client-id because another client seems to be using it.");
        doc4.clientID = generateNewClientId();
      }
      doc4.emit("afterTransactionCleanup", [transaction, doc4]);
      if (doc4._observers.has("update")) {
        const encoder = new UpdateEncoderV1();
        const hasContent2 = writeUpdateMessageFromTransaction(encoder, transaction);
        if (hasContent2) {
          doc4.emit("update", [encoder.toUint8Array(), transaction.origin, doc4, transaction]);
        }
      }
      if (doc4._observers.has("updateV2")) {
        const encoder = new UpdateEncoderV2();
        const hasContent2 = writeUpdateMessageFromTransaction(encoder, transaction);
        if (hasContent2) {
          doc4.emit("updateV2", [encoder.toUint8Array(), transaction.origin, doc4, transaction]);
        }
      }
      const { subdocsAdded, subdocsLoaded, subdocsRemoved } = transaction;
      if (subdocsAdded.size > 0 || subdocsRemoved.size > 0 || subdocsLoaded.size > 0) {
        subdocsAdded.forEach((subdoc) => {
          subdoc.clientID = doc4.clientID;
          if (subdoc.collectionid == null) {
            subdoc.collectionid = doc4.collectionid;
          }
          doc4.subdocs.add(subdoc);
        });
        subdocsRemoved.forEach((subdoc) => doc4.subdocs.delete(subdoc));
        doc4.emit("subdocs", [{ loaded: subdocsLoaded, added: subdocsAdded, removed: subdocsRemoved }, doc4, transaction]);
        subdocsRemoved.forEach((subdoc) => subdoc.destroy());
      }
      if (transactionCleanups.length <= i + 1) {
        doc4._transactionCleanups = [];
        doc4.emit("afterAllTransactions", [doc4, transactionCleanups]);
      } else {
        cleanupTransactions(transactionCleanups, i + 1);
      }
    }
  }
};
var transact = (doc4, f2, origin = null, local = true) => {
  const transactionCleanups = doc4._transactionCleanups;
  let initialCall = false;
  let result = null;
  if (doc4._transaction === null) {
    initialCall = true;
    doc4._transaction = new Transaction2(doc4, origin, local);
    transactionCleanups.push(doc4._transaction);
    if (transactionCleanups.length === 1) {
      doc4.emit("beforeAllTransactions", [doc4]);
    }
    doc4.emit("beforeTransaction", [doc4._transaction, doc4]);
  }
  try {
    result = f2(doc4._transaction);
  } finally {
    if (initialCall) {
      const finishCleanup = doc4._transaction === transactionCleanups[0];
      doc4._transaction = null;
      if (finishCleanup) {
        cleanupTransactions(transactionCleanups, 0);
      }
    }
  }
  return result;
};
var StackItem = class {
  /**
   * @param {DeleteSet} deletions
   * @param {DeleteSet} insertions
   */
  constructor(deletions, insertions) {
    this.insertions = insertions;
    this.deletions = deletions;
    this.meta = /* @__PURE__ */ new Map();
  }
};
var clearUndoManagerStackItem = (tr4, um, stackItem) => {
  iterateDeletedStructs(tr4, stackItem.deletions, (item) => {
    if (item instanceof Item && um.scope.some((type) => isParentOf(type, item))) {
      keepItem(item, false);
    }
  });
};
var popStackItem = (undoManager, stack, eventType) => {
  let result = null;
  let _tr = null;
  const doc4 = undoManager.doc;
  const scope = undoManager.scope;
  transact(doc4, (transaction) => {
    while (stack.length > 0 && result === null) {
      const store = doc4.store;
      const stackItem = (
        /** @type {StackItem} */
        stack.pop()
      );
      const itemsToRedo = /* @__PURE__ */ new Set();
      const itemsToDelete = [];
      let performedChange = false;
      iterateDeletedStructs(transaction, stackItem.insertions, (struct) => {
        if (struct instanceof Item) {
          if (struct.redone !== null) {
            let { item, diff: diff2 } = followRedone(store, struct.id);
            if (diff2 > 0) {
              item = getItemCleanStart(transaction, createID(item.id.client, item.id.clock + diff2));
            }
            struct = item;
          }
          if (!struct.deleted && scope.some((type) => isParentOf(
            type,
            /** @type {Item} */
            struct
          ))) {
            itemsToDelete.push(struct);
          }
        }
      });
      iterateDeletedStructs(transaction, stackItem.deletions, (struct) => {
        if (struct instanceof Item && scope.some((type) => isParentOf(type, struct)) && // Never redo structs in stackItem.insertions because they were created and deleted in the same capture interval.
        !isDeleted(stackItem.insertions, struct.id)) {
          itemsToRedo.add(struct);
        }
      });
      itemsToRedo.forEach((struct) => {
        performedChange = redoItem(transaction, struct, itemsToRedo, stackItem.insertions, undoManager.ignoreRemoteMapChanges, undoManager) !== null || performedChange;
      });
      for (let i = itemsToDelete.length - 1; i >= 0; i--) {
        const item = itemsToDelete[i];
        if (undoManager.deleteFilter(item)) {
          item.delete(transaction);
          performedChange = true;
        }
      }
      result = performedChange ? stackItem : null;
    }
    transaction.changed.forEach((subProps, type) => {
      if (subProps.has(null) && type._searchMarker) {
        type._searchMarker.length = 0;
      }
    });
    _tr = transaction;
  }, undoManager);
  if (result != null) {
    const changedParentTypes = _tr.changedParentTypes;
    undoManager.emit("stack-item-popped", [{ stackItem: result, type: eventType, changedParentTypes }, undoManager]);
  }
  return result;
};
var UndoManager = class extends Observable {
  /**
   * @param {AbstractType<any>|Array<AbstractType<any>>} typeScope Accepts either a single type, or an array of types
   * @param {UndoManagerOptions} options
   */
  constructor(typeScope, {
    captureTimeout = 500,
    captureTransaction = (_tr) => true,
    deleteFilter = () => true,
    trackedOrigins = /* @__PURE__ */ new Set([null]),
    ignoreRemoteMapChanges = false,
    doc: doc4 = (
      /** @type {Doc} */
      isArray(typeScope) ? typeScope[0].doc : typeScope.doc
    )
  } = {}) {
    super();
    this.scope = [];
    this.addToScope(typeScope);
    this.deleteFilter = deleteFilter;
    trackedOrigins.add(this);
    this.trackedOrigins = trackedOrigins;
    this.captureTransaction = captureTransaction;
    this.undoStack = [];
    this.redoStack = [];
    this.undoing = false;
    this.redoing = false;
    this.doc = doc4;
    this.lastChange = 0;
    this.ignoreRemoteMapChanges = ignoreRemoteMapChanges;
    this.captureTimeout = captureTimeout;
    this.afterTransactionHandler = (transaction) => {
      if (!this.captureTransaction(transaction) || !this.scope.some((type) => transaction.changedParentTypes.has(type)) || !this.trackedOrigins.has(transaction.origin) && (!transaction.origin || !this.trackedOrigins.has(transaction.origin.constructor))) {
        return;
      }
      const undoing = this.undoing;
      const redoing = this.redoing;
      const stack = undoing ? this.redoStack : this.undoStack;
      if (undoing) {
        this.stopCapturing();
      } else if (!redoing) {
        this.clear(false, true);
      }
      const insertions = new DeleteSet();
      transaction.afterState.forEach((endClock, client) => {
        const startClock = transaction.beforeState.get(client) || 0;
        const len = endClock - startClock;
        if (len > 0) {
          addToDeleteSet(insertions, client, startClock, len);
        }
      });
      const now = getUnixTime();
      let didAdd = false;
      if (this.lastChange > 0 && now - this.lastChange < this.captureTimeout && stack.length > 0 && !undoing && !redoing) {
        const lastOp = stack[stack.length - 1];
        lastOp.deletions = mergeDeleteSets([lastOp.deletions, transaction.deleteSet]);
        lastOp.insertions = mergeDeleteSets([lastOp.insertions, insertions]);
      } else {
        stack.push(new StackItem(transaction.deleteSet, insertions));
        didAdd = true;
      }
      if (!undoing && !redoing) {
        this.lastChange = now;
      }
      iterateDeletedStructs(
        transaction,
        transaction.deleteSet,
        /** @param {Item|GC} item */
        (item) => {
          if (item instanceof Item && this.scope.some((type) => isParentOf(type, item))) {
            keepItem(item, true);
          }
        }
      );
      const changeEvent = [{ stackItem: stack[stack.length - 1], origin: transaction.origin, type: undoing ? "redo" : "undo", changedParentTypes: transaction.changedParentTypes }, this];
      if (didAdd) {
        this.emit("stack-item-added", changeEvent);
      } else {
        this.emit("stack-item-updated", changeEvent);
      }
    };
    this.doc.on("afterTransaction", this.afterTransactionHandler);
    this.doc.on("destroy", () => {
      this.destroy();
    });
  }
  /**
   * @param {Array<AbstractType<any>> | AbstractType<any>} ytypes
   */
  addToScope(ytypes) {
    ytypes = isArray(ytypes) ? ytypes : [ytypes];
    ytypes.forEach((ytype) => {
      if (this.scope.every((yt2) => yt2 !== ytype)) {
        this.scope.push(ytype);
      }
    });
  }
  /**
   * @param {any} origin
   */
  addTrackedOrigin(origin) {
    this.trackedOrigins.add(origin);
  }
  /**
   * @param {any} origin
   */
  removeTrackedOrigin(origin) {
    this.trackedOrigins.delete(origin);
  }
  clear(clearUndoStack = true, clearRedoStack = true) {
    if (clearUndoStack && this.canUndo() || clearRedoStack && this.canRedo()) {
      this.doc.transact((tr4) => {
        if (clearUndoStack) {
          this.undoStack.forEach((item) => clearUndoManagerStackItem(tr4, this, item));
          this.undoStack = [];
        }
        if (clearRedoStack) {
          this.redoStack.forEach((item) => clearUndoManagerStackItem(tr4, this, item));
          this.redoStack = [];
        }
        this.emit("stack-cleared", [{ undoStackCleared: clearUndoStack, redoStackCleared: clearRedoStack }]);
      });
    }
  }
  /**
   * UndoManager merges Undo-StackItem if they are created within time-gap
   * smaller than `options.captureTimeout`. Call `um.stopCapturing()` so that the next
   * StackItem won't be merged.
   *
   *
   * @example
   *     // without stopCapturing
   *     ytext.insert(0, 'a')
   *     ytext.insert(1, 'b')
   *     um.undo()
   *     ytext.toString() // => '' (note that 'ab' was removed)
   *     // with stopCapturing
   *     ytext.insert(0, 'a')
   *     um.stopCapturing()
   *     ytext.insert(0, 'b')
   *     um.undo()
   *     ytext.toString() // => 'a' (note that only 'b' was removed)
   *
   */
  stopCapturing() {
    this.lastChange = 0;
  }
  /**
   * Undo last changes on type.
   *
   * @return {StackItem?} Returns StackItem if a change was applied
   */
  undo() {
    this.undoing = true;
    let res;
    try {
      res = popStackItem(this, this.undoStack, "undo");
    } finally {
      this.undoing = false;
    }
    return res;
  }
  /**
   * Redo last undo operation.
   *
   * @return {StackItem?} Returns StackItem if a change was applied
   */
  redo() {
    this.redoing = true;
    let res;
    try {
      res = popStackItem(this, this.redoStack, "redo");
    } finally {
      this.redoing = false;
    }
    return res;
  }
  /**
   * Are undo steps available?
   *
   * @return {boolean} `true` if undo is possible
   */
  canUndo() {
    return this.undoStack.length > 0;
  }
  /**
   * Are redo steps available?
   *
   * @return {boolean} `true` if redo is possible
   */
  canRedo() {
    return this.redoStack.length > 0;
  }
  destroy() {
    this.trackedOrigins.delete(this);
    this.doc.off("afterTransaction", this.afterTransactionHandler);
    super.destroy();
  }
};
var YEvent = class {
  /**
   * @param {T} target The changed type.
   * @param {Transaction} transaction
   */
  constructor(target, transaction) {
    this.target = target;
    this.currentTarget = target;
    this.transaction = transaction;
    this._changes = null;
    this._keys = null;
    this._delta = null;
  }
  /**
   * Computes the path from `y` to the changed type.
   *
   * @todo v14 should standardize on path: Array<{parent, index}> because that is easier to work with.
   *
   * The following property holds:
   * @example
   *   let type = y
   *   event.path.forEach(dir => {
   *     type = type.get(dir)
   *   })
   *   type === event.target // => true
   */
  get path() {
    return getPathTo(this.currentTarget, this.target);
  }
  /**
   * Check if a struct is deleted by this event.
   *
   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.
   *
   * @param {AbstractStruct} struct
   * @return {boolean}
   */
  deletes(struct) {
    return isDeleted(this.transaction.deleteSet, struct.id);
  }
  /**
   * @type {Map<string, { action: 'add' | 'update' | 'delete', oldValue: any, newValue: any }>}
   */
  get keys() {
    if (this._keys === null) {
      const keys5 = /* @__PURE__ */ new Map();
      const target = this.target;
      const changed = (
        /** @type Set<string|null> */
        this.transaction.changed.get(target)
      );
      changed.forEach((key2) => {
        if (key2 !== null) {
          const item = (
            /** @type {Item} */
            target._map.get(key2)
          );
          let action;
          let oldValue;
          if (this.adds(item)) {
            let prev2 = item.left;
            while (prev2 !== null && this.adds(prev2)) {
              prev2 = prev2.left;
            }
            if (this.deletes(item)) {
              if (prev2 !== null && this.deletes(prev2)) {
                action = "delete";
                oldValue = last(prev2.content.getContent());
              } else {
                return;
              }
            } else {
              if (prev2 !== null && this.deletes(prev2)) {
                action = "update";
                oldValue = last(prev2.content.getContent());
              } else {
                action = "add";
                oldValue = void 0;
              }
            }
          } else {
            if (this.deletes(item)) {
              action = "delete";
              oldValue = last(
                /** @type {Item} */
                item.content.getContent()
              );
            } else {
              return;
            }
          }
          keys5.set(key2, { action, oldValue });
        }
      });
      this._keys = keys5;
    }
    return this._keys;
  }
  /**
   * This is a computed property. Note that this can only be safely computed during the
   * event call. Computing this property after other changes happened might result in
   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes
   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.
   *
   * @type {Array<{insert?: string | Array<any> | object | AbstractType<any>, retain?: number, delete?: number, attributes?: Object<string, any>}>}
   */
  get delta() {
    return this.changes.delta;
  }
  /**
   * Check if a struct is added by this event.
   *
   * In contrast to change.deleted, this method also returns true if the struct was added and then deleted.
   *
   * @param {AbstractStruct} struct
   * @return {boolean}
   */
  adds(struct) {
    return struct.id.clock >= (this.transaction.beforeState.get(struct.id.client) || 0);
  }
  /**
   * This is a computed property. Note that this can only be safely computed during the
   * event call. Computing this property after other changes happened might result in
   * unexpected behavior (incorrect computation of deltas). A safe way to collect changes
   * is to store the `changes` or the `delta` object. Avoid storing the `transaction` object.
   *
   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}
   */
  get changes() {
    let changes = this._changes;
    if (changes === null) {
      const target = this.target;
      const added = create3();
      const deleted = create3();
      const delta = [];
      changes = {
        added,
        deleted,
        delta,
        keys: this.keys
      };
      const changed = (
        /** @type Set<string|null> */
        this.transaction.changed.get(target)
      );
      if (changed.has(null)) {
        let lastOp = null;
        const packOp = () => {
          if (lastOp) {
            delta.push(lastOp);
          }
        };
        for (let item = target._start; item !== null; item = item.right) {
          if (item.deleted) {
            if (this.deletes(item) && !this.adds(item)) {
              if (lastOp === null || lastOp.delete === void 0) {
                packOp();
                lastOp = { delete: 0 };
              }
              lastOp.delete += item.length;
              deleted.add(item);
            }
          } else {
            if (this.adds(item)) {
              if (lastOp === null || lastOp.insert === void 0) {
                packOp();
                lastOp = { insert: [] };
              }
              lastOp.insert = lastOp.insert.concat(item.content.getContent());
              added.add(item);
            } else {
              if (lastOp === null || lastOp.retain === void 0) {
                packOp();
                lastOp = { retain: 0 };
              }
              lastOp.retain += item.length;
            }
          }
        }
        if (lastOp !== null && lastOp.retain === void 0) {
          packOp();
        }
      }
      this._changes = changes;
    }
    return (
      /** @type {any} */
      changes
    );
  }
};
var getPathTo = (parent, child) => {
  const path3 = [];
  while (child._item !== null && child !== parent) {
    if (child._item.parentSub !== null) {
      path3.unshift(child._item.parentSub);
    } else {
      let i = 0;
      let c = (
        /** @type {AbstractType<any>} */
        child._item.parent._start
      );
      while (c !== child._item && c !== null) {
        if (!c.deleted) {
          i++;
        }
        c = c.right;
      }
      path3.unshift(i);
    }
    child = /** @type {AbstractType<any>} */
    child._item.parent;
  }
  return path3;
};
var maxSearchMarker = 80;
var globalSearchMarkerTimestamp = 0;
var ArraySearchMarker = class {
  /**
   * @param {Item} p
   * @param {number} index
   */
  constructor(p5, index7) {
    p5.marker = true;
    this.p = p5;
    this.index = index7;
    this.timestamp = globalSearchMarkerTimestamp++;
  }
};
var refreshMarkerTimestamp = (marker) => {
  marker.timestamp = globalSearchMarkerTimestamp++;
};
var overwriteMarker = (marker, p5, index7) => {
  marker.p.marker = false;
  marker.p = p5;
  p5.marker = true;
  marker.index = index7;
  marker.timestamp = globalSearchMarkerTimestamp++;
};
var markPosition = (searchMarker, p5, index7) => {
  if (searchMarker.length >= maxSearchMarker) {
    const marker = searchMarker.reduce((a2, b2) => a2.timestamp < b2.timestamp ? a2 : b2);
    overwriteMarker(marker, p5, index7);
    return marker;
  } else {
    const pm = new ArraySearchMarker(p5, index7);
    searchMarker.push(pm);
    return pm;
  }
};
var findMarker = (yarray, index7) => {
  if (yarray._start === null || index7 === 0 || yarray._searchMarker === null) {
    return null;
  }
  const marker = yarray._searchMarker.length === 0 ? null : yarray._searchMarker.reduce((a2, b2) => abs2(index7 - a2.index) < abs2(index7 - b2.index) ? a2 : b2);
  let p5 = yarray._start;
  let pindex = 0;
  if (marker !== null) {
    p5 = marker.p;
    pindex = marker.index;
    refreshMarkerTimestamp(marker);
  }
  while (p5.right !== null && pindex < index7) {
    if (!p5.deleted && p5.countable) {
      if (index7 < pindex + p5.length) {
        break;
      }
      pindex += p5.length;
    }
    p5 = p5.right;
  }
  while (p5.left !== null && pindex > index7) {
    p5 = p5.left;
    if (!p5.deleted && p5.countable) {
      pindex -= p5.length;
    }
  }
  while (p5.left !== null && p5.left.id.client === p5.id.client && p5.left.id.clock + p5.left.length === p5.id.clock) {
    p5 = p5.left;
    if (!p5.deleted && p5.countable) {
      pindex -= p5.length;
    }
  }
  if (marker !== null && abs2(marker.index - pindex) < /** @type {YText|YArray<any>} */
  p5.parent.length / maxSearchMarker) {
    overwriteMarker(marker, p5, pindex);
    return marker;
  } else {
    return markPosition(yarray._searchMarker, p5, pindex);
  }
};
var updateMarkerChanges = (searchMarker, index7, len) => {
  for (let i = searchMarker.length - 1; i >= 0; i--) {
    const m = searchMarker[i];
    if (len > 0) {
      let p5 = m.p;
      p5.marker = false;
      while (p5 && (p5.deleted || !p5.countable)) {
        p5 = p5.left;
        if (p5 && !p5.deleted && p5.countable) {
          m.index -= p5.length;
        }
      }
      if (p5 === null || p5.marker === true) {
        searchMarker.splice(i, 1);
        continue;
      }
      m.p = p5;
      p5.marker = true;
    }
    if (index7 < m.index || len > 0 && index7 === m.index) {
      m.index = max4(index7, m.index + len);
    }
  }
};
var callTypeObservers = (type, transaction, event) => {
  const changedType = type;
  const changedParentTypes = transaction.changedParentTypes;
  while (true) {
    setIfUndefined(changedParentTypes, type, () => []).push(event);
    if (type._item === null) {
      break;
    }
    type = /** @type {AbstractType<any>} */
    type._item.parent;
  }
  callEventHandlerListeners(changedType._eH, event, transaction);
};
var AbstractType = class {
  constructor() {
    this._item = null;
    this._map = /* @__PURE__ */ new Map();
    this._start = null;
    this.doc = null;
    this._length = 0;
    this._eH = createEventHandler2();
    this._dEH = createEventHandler2();
    this._searchMarker = null;
  }
  /**
   * @return {AbstractType<any>|null}
   */
  get parent() {
    return this._item ? (
      /** @type {AbstractType<any>} */
      this._item.parent
    ) : null;
  }
  /**
   * Integrate this type into the Yjs instance.
   *
   * * Save this struct in the os
   * * This type is sent to other client
   * * Observer functions are fired
   *
   * @param {Doc} y The Yjs instance
   * @param {Item|null} item
   */
  _integrate(y, item) {
    this.doc = y;
    this._item = item;
  }
  /**
   * @return {AbstractType<EventType>}
   */
  _copy() {
    throw methodUnimplemented();
  }
  /**
   * @return {AbstractType<EventType>}
   */
  clone() {
    throw methodUnimplemented();
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} _encoder
   */
  _write(_encoder) {
  }
  /**
   * The first non-deleted item
   */
  get _first() {
    let n = this._start;
    while (n !== null && n.deleted) {
      n = n.right;
    }
    return n;
  }
  /**
   * Creates YEvent and calls all type observers.
   * Must be implemented by each type.
   *
   * @param {Transaction} transaction
   * @param {Set<null|string>} _parentSubs Keys changed on this type. `null` if list was modified.
   */
  _callObserver(transaction, _parentSubs) {
    if (!transaction.local && this._searchMarker) {
      this._searchMarker.length = 0;
    }
  }
  /**
   * Observe all events that are created on this type.
   *
   * @param {function(EventType, Transaction):void} f Observer function
   */
  observe(f2) {
    addEventHandlerListener(this._eH, f2);
  }
  /**
   * Observe all events that are created by this type and its children.
   *
   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function
   */
  observeDeep(f2) {
    addEventHandlerListener(this._dEH, f2);
  }
  /**
   * Unregister an observer function.
   *
   * @param {function(EventType,Transaction):void} f Observer function
   */
  unobserve(f2) {
    removeEventHandlerListener(this._eH, f2);
  }
  /**
   * Unregister an observer function.
   *
   * @param {function(Array<YEvent<any>>,Transaction):void} f Observer function
   */
  unobserveDeep(f2) {
    removeEventHandlerListener(this._dEH, f2);
  }
  /**
   * @abstract
   * @return {any}
   */
  toJSON() {
  }
};
var typeListSlice = (type, start2, end2) => {
  if (start2 < 0) {
    start2 = type._length + start2;
  }
  if (end2 < 0) {
    end2 = type._length + end2;
  }
  let len = end2 - start2;
  const cs = [];
  let n = type._start;
  while (n !== null && len > 0) {
    if (n.countable && !n.deleted) {
      const c = n.content.getContent();
      if (c.length <= start2) {
        start2 -= c.length;
      } else {
        for (let i = start2; i < c.length && len > 0; i++) {
          cs.push(c[i]);
          len--;
        }
        start2 = 0;
      }
    }
    n = n.right;
  }
  return cs;
};
var typeListToArray = (type) => {
  const cs = [];
  let n = type._start;
  while (n !== null) {
    if (n.countable && !n.deleted) {
      const c = n.content.getContent();
      for (let i = 0; i < c.length; i++) {
        cs.push(c[i]);
      }
    }
    n = n.right;
  }
  return cs;
};
var typeListToArraySnapshot = (type, snapshot2) => {
  const cs = [];
  let n = type._start;
  while (n !== null) {
    if (n.countable && isVisible(n, snapshot2)) {
      const c = n.content.getContent();
      for (let i = 0; i < c.length; i++) {
        cs.push(c[i]);
      }
    }
    n = n.right;
  }
  return cs;
};
var typeListForEach = (type, f2) => {
  let index7 = 0;
  let n = type._start;
  while (n !== null) {
    if (n.countable && !n.deleted) {
      const c = n.content.getContent();
      for (let i = 0; i < c.length; i++) {
        f2(c[i], index7++, type);
      }
    }
    n = n.right;
  }
};
var typeListMap = (type, f2) => {
  const result = [];
  typeListForEach(type, (c, i) => {
    result.push(f2(c, i, type));
  });
  return result;
};
var typeListCreateIterator = (type) => {
  let n = type._start;
  let currentContent = null;
  let currentContentIndex = 0;
  return {
    [Symbol.iterator]() {
      return this;
    },
    next: () => {
      if (currentContent === null) {
        while (n !== null && n.deleted) {
          n = n.right;
        }
        if (n === null) {
          return {
            done: true,
            value: void 0
          };
        }
        currentContent = n.content.getContent();
        currentContentIndex = 0;
        n = n.right;
      }
      const value = currentContent[currentContentIndex++];
      if (currentContent.length <= currentContentIndex) {
        currentContent = null;
      }
      return {
        done: false,
        value
      };
    }
  };
};
var typeListGet = (type, index7) => {
  const marker = findMarker(type, index7);
  let n = type._start;
  if (marker !== null) {
    n = marker.p;
    index7 -= marker.index;
  }
  for (; n !== null; n = n.right) {
    if (!n.deleted && n.countable) {
      if (index7 < n.length) {
        return n.content.getContent()[index7];
      }
      index7 -= n.length;
    }
  }
};
var typeListInsertGenericsAfter = (transaction, parent, referenceItem, content5) => {
  let left2 = referenceItem;
  const doc4 = transaction.doc;
  const ownClientId = doc4.clientID;
  const store = doc4.store;
  const right2 = referenceItem === null ? parent._start : referenceItem.right;
  let jsonContent = [];
  const packJsonContent = () => {
    if (jsonContent.length > 0) {
      left2 = new Item(createID(ownClientId, getState(store, ownClientId)), left2, left2 && left2.lastId, right2, right2 && right2.id, parent, null, new ContentAny(jsonContent));
      left2.integrate(transaction, 0);
      jsonContent = [];
    }
  };
  content5.forEach((c) => {
    if (c === null) {
      jsonContent.push(c);
    } else {
      switch (c.constructor) {
        case Number:
        case Object:
        case Boolean:
        case Array:
        case String:
          jsonContent.push(c);
          break;
        default:
          packJsonContent();
          switch (c.constructor) {
            case Uint8Array:
            case ArrayBuffer:
              left2 = new Item(createID(ownClientId, getState(store, ownClientId)), left2, left2 && left2.lastId, right2, right2 && right2.id, parent, null, new ContentBinary(new Uint8Array(
                /** @type {Uint8Array} */
                c
              )));
              left2.integrate(transaction, 0);
              break;
            case Doc:
              left2 = new Item(createID(ownClientId, getState(store, ownClientId)), left2, left2 && left2.lastId, right2, right2 && right2.id, parent, null, new ContentDoc(
                /** @type {Doc} */
                c
              ));
              left2.integrate(transaction, 0);
              break;
            default:
              if (c instanceof AbstractType) {
                left2 = new Item(createID(ownClientId, getState(store, ownClientId)), left2, left2 && left2.lastId, right2, right2 && right2.id, parent, null, new ContentType(c));
                left2.integrate(transaction, 0);
              } else {
                throw new Error("Unexpected content type in insert operation");
              }
          }
      }
    }
  });
  packJsonContent();
};
var lengthExceeded = create4("Length exceeded!");
var typeListInsertGenerics = (transaction, parent, index7, content5) => {
  if (index7 > parent._length) {
    throw lengthExceeded;
  }
  if (index7 === 0) {
    if (parent._searchMarker) {
      updateMarkerChanges(parent._searchMarker, index7, content5.length);
    }
    return typeListInsertGenericsAfter(transaction, parent, null, content5);
  }
  const startIndex = index7;
  const marker = findMarker(parent, index7);
  let n = parent._start;
  if (marker !== null) {
    n = marker.p;
    index7 -= marker.index;
    if (index7 === 0) {
      n = n.prev;
      index7 += n && n.countable && !n.deleted ? n.length : 0;
    }
  }
  for (; n !== null; n = n.right) {
    if (!n.deleted && n.countable) {
      if (index7 <= n.length) {
        if (index7 < n.length) {
          getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index7));
        }
        break;
      }
      index7 -= n.length;
    }
  }
  if (parent._searchMarker) {
    updateMarkerChanges(parent._searchMarker, startIndex, content5.length);
  }
  return typeListInsertGenericsAfter(transaction, parent, n, content5);
};
var typeListPushGenerics = (transaction, parent, content5) => {
  const marker = (parent._searchMarker || []).reduce((maxMarker, currMarker) => currMarker.index > maxMarker.index ? currMarker : maxMarker, { index: 0, p: parent._start });
  let n = marker.p;
  if (n) {
    while (n.right) {
      n = n.right;
    }
  }
  return typeListInsertGenericsAfter(transaction, parent, n, content5);
};
var typeListDelete = (transaction, parent, index7, length4) => {
  if (length4 === 0) {
    return;
  }
  const startIndex = index7;
  const startLength = length4;
  const marker = findMarker(parent, index7);
  let n = parent._start;
  if (marker !== null) {
    n = marker.p;
    index7 -= marker.index;
  }
  for (; n !== null && index7 > 0; n = n.right) {
    if (!n.deleted && n.countable) {
      if (index7 < n.length) {
        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + index7));
      }
      index7 -= n.length;
    }
  }
  while (length4 > 0 && n !== null) {
    if (!n.deleted) {
      if (length4 < n.length) {
        getItemCleanStart(transaction, createID(n.id.client, n.id.clock + length4));
      }
      n.delete(transaction);
      length4 -= n.length;
    }
    n = n.right;
  }
  if (length4 > 0) {
    throw lengthExceeded;
  }
  if (parent._searchMarker) {
    updateMarkerChanges(
      parent._searchMarker,
      startIndex,
      -startLength + length4
      /* in case we remove the above exception */
    );
  }
};
var typeMapDelete = (transaction, parent, key2) => {
  const c = parent._map.get(key2);
  if (c !== void 0) {
    c.delete(transaction);
  }
};
var typeMapSet = (transaction, parent, key2, value) => {
  const left2 = parent._map.get(key2) || null;
  const doc4 = transaction.doc;
  const ownClientId = doc4.clientID;
  let content5;
  if (value == null) {
    content5 = new ContentAny([value]);
  } else {
    switch (value.constructor) {
      case Number:
      case Object:
      case Boolean:
      case Array:
      case String:
        content5 = new ContentAny([value]);
        break;
      case Uint8Array:
        content5 = new ContentBinary(
          /** @type {Uint8Array} */
          value
        );
        break;
      case Doc:
        content5 = new ContentDoc(
          /** @type {Doc} */
          value
        );
        break;
      default:
        if (value instanceof AbstractType) {
          content5 = new ContentType(value);
        } else {
          throw new Error("Unexpected content type");
        }
    }
  }
  new Item(createID(ownClientId, getState(doc4.store, ownClientId)), left2, left2 && left2.lastId, null, null, parent, key2, content5).integrate(transaction, 0);
};
var typeMapGet = (parent, key2) => {
  const val = parent._map.get(key2);
  return val !== void 0 && !val.deleted ? val.content.getContent()[val.length - 1] : void 0;
};
var typeMapGetAll = (parent) => {
  const res = {};
  parent._map.forEach((value, key2) => {
    if (!value.deleted) {
      res[key2] = value.content.getContent()[value.length - 1];
    }
  });
  return res;
};
var typeMapHas = (parent, key2) => {
  const val = parent._map.get(key2);
  return val !== void 0 && !val.deleted;
};
var createMapIterator = (map6) => iteratorFilter(
  map6.entries(),
  /** @param {any} entry */
  (entry) => !entry[1].deleted
);
var YArrayEvent = class extends YEvent {
  /**
   * @param {YArray<T>} yarray The changed type
   * @param {Transaction} transaction The transaction object
   */
  constructor(yarray, transaction) {
    super(yarray, transaction);
    this._transaction = transaction;
  }
};
var YArray = class extends AbstractType {
  constructor() {
    super();
    this._prelimContent = [];
    this._searchMarker = [];
  }
  /**
   * Construct a new YArray containing the specified items.
   * @template {Object<string,any>|Array<any>|number|null|string|Uint8Array} T
   * @param {Array<T>} items
   * @return {YArray<T>}
   */
  static from(items) {
    const a2 = new YArray();
    a2.push(items);
    return a2;
  }
  /**
   * Integrate this type into the Yjs instance.
   *
   * * Save this struct in the os
   * * This type is sent to other client
   * * Observer functions are fired
   *
   * @param {Doc} y The Yjs instance
   * @param {Item} item
   */
  _integrate(y, item) {
    super._integrate(y, item);
    this.insert(
      0,
      /** @type {Array<any>} */
      this._prelimContent
    );
    this._prelimContent = null;
  }
  /**
   * @return {YArray<T>}
   */
  _copy() {
    return new YArray();
  }
  /**
   * @return {YArray<T>}
   */
  clone() {
    const arr = new YArray();
    arr.insert(0, this.toArray().map(
      (el) => el instanceof AbstractType ? (
        /** @type {typeof el} */
        el.clone()
      ) : el
    ));
    return arr;
  }
  get length() {
    return this._prelimContent === null ? this._length : this._prelimContent.length;
  }
  /**
   * Creates YArrayEvent and calls observers.
   *
   * @param {Transaction} transaction
   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.
   */
  _callObserver(transaction, parentSubs) {
    super._callObserver(transaction, parentSubs);
    callTypeObservers(this, transaction, new YArrayEvent(this, transaction));
  }
  /**
   * Inserts new content at an index.
   *
   * Important: This function expects an array of content. Not just a content
   * object. The reason for this "weirdness" is that inserting several elements
   * is very efficient when it is done as a single operation.
   *
   * @example
   *  // Insert character 'a' at position 0
   *  yarray.insert(0, ['a'])
   *  // Insert numbers 1, 2 at position 1
   *  yarray.insert(1, [1, 2])
   *
   * @param {number} index The index to insert content at.
   * @param {Array<T>} content The array of content
   */
  insert(index7, content5) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeListInsertGenerics(
          transaction,
          this,
          index7,
          /** @type {any} */
          content5
        );
      });
    } else {
      this._prelimContent.splice(index7, 0, ...content5);
    }
  }
  /**
   * Appends content to this YArray.
   *
   * @param {Array<T>} content Array of content to append.
   *
   * @todo Use the following implementation in all types.
   */
  push(content5) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeListPushGenerics(
          transaction,
          this,
          /** @type {any} */
          content5
        );
      });
    } else {
      this._prelimContent.push(...content5);
    }
  }
  /**
   * Preppends content to this YArray.
   *
   * @param {Array<T>} content Array of content to preppend.
   */
  unshift(content5) {
    this.insert(0, content5);
  }
  /**
   * Deletes elements starting from an index.
   *
   * @param {number} index Index at which to start deleting elements
   * @param {number} length The number of elements to remove. Defaults to 1.
   */
  delete(index7, length4 = 1) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeListDelete(transaction, this, index7, length4);
      });
    } else {
      this._prelimContent.splice(index7, length4);
    }
  }
  /**
   * Returns the i-th element from a YArray.
   *
   * @param {number} index The index of the element to return from the YArray
   * @return {T}
   */
  get(index7) {
    return typeListGet(this, index7);
  }
  /**
   * Transforms this YArray to a JavaScript Array.
   *
   * @return {Array<T>}
   */
  toArray() {
    return typeListToArray(this);
  }
  /**
   * Transforms this YArray to a JavaScript Array.
   *
   * @param {number} [start]
   * @param {number} [end]
   * @return {Array<T>}
   */
  slice(start2 = 0, end2 = this.length) {
    return typeListSlice(this, start2, end2);
  }
  /**
   * Transforms this Shared Type to a JSON object.
   *
   * @return {Array<any>}
   */
  toJSON() {
    return this.map((c) => c instanceof AbstractType ? c.toJSON() : c);
  }
  /**
   * Returns an Array with the result of calling a provided function on every
   * element of this YArray.
   *
   * @template M
   * @param {function(T,number,YArray<T>):M} f Function that produces an element of the new Array
   * @return {Array<M>} A new array with each element being the result of the
   *                 callback function
   */
  map(f2) {
    return typeListMap(
      this,
      /** @type {any} */
      f2
    );
  }
  /**
   * Executes a provided function once on overy element of this YArray.
   *
   * @param {function(T,number,YArray<T>):void} f A function to execute on every element of this YArray.
   */
  forEach(f2) {
    typeListForEach(this, f2);
  }
  /**
   * @return {IterableIterator<T>}
   */
  [Symbol.iterator]() {
    return typeListCreateIterator(this);
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   */
  _write(encoder) {
    encoder.writeTypeRef(YArrayRefID);
  }
};
var YMapEvent = class extends YEvent {
  /**
   * @param {YMap<T>} ymap The YArray that changed.
   * @param {Transaction} transaction
   * @param {Set<any>} subs The keys that changed.
   */
  constructor(ymap, transaction, subs) {
    super(ymap, transaction);
    this.keysChanged = subs;
  }
};
var YMap = class extends AbstractType {
  /**
   *
   * @param {Iterable<readonly [string, any]>=} entries - an optional iterable to initialize the YMap
   */
  constructor(entries) {
    super();
    this._prelimContent = null;
    if (entries === void 0) {
      this._prelimContent = /* @__PURE__ */ new Map();
    } else {
      this._prelimContent = new Map(entries);
    }
  }
  /**
   * Integrate this type into the Yjs instance.
   *
   * * Save this struct in the os
   * * This type is sent to other client
   * * Observer functions are fired
   *
   * @param {Doc} y The Yjs instance
   * @param {Item} item
   */
  _integrate(y, item) {
    super._integrate(y, item);
    this._prelimContent.forEach((value, key2) => {
      this.set(key2, value);
    });
    this._prelimContent = null;
  }
  /**
   * @return {YMap<MapType>}
   */
  _copy() {
    return new YMap();
  }
  /**
   * @return {YMap<MapType>}
   */
  clone() {
    const map6 = new YMap();
    this.forEach((value, key2) => {
      map6.set(key2, value instanceof AbstractType ? (
        /** @type {typeof value} */
        value.clone()
      ) : value);
    });
    return map6;
  }
  /**
   * Creates YMapEvent and calls observers.
   *
   * @param {Transaction} transaction
   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.
   */
  _callObserver(transaction, parentSubs) {
    callTypeObservers(this, transaction, new YMapEvent(this, transaction, parentSubs));
  }
  /**
   * Transforms this Shared Type to a JSON object.
   *
   * @return {Object<string,any>}
   */
  toJSON() {
    const map6 = {};
    this._map.forEach((item, key2) => {
      if (!item.deleted) {
        const v = item.content.getContent()[item.length - 1];
        map6[key2] = v instanceof AbstractType ? v.toJSON() : v;
      }
    });
    return map6;
  }
  /**
   * Returns the size of the YMap (count of key/value pairs)
   *
   * @return {number}
   */
  get size() {
    return [...createMapIterator(this._map)].length;
  }
  /**
   * Returns the keys for each element in the YMap Type.
   *
   * @return {IterableIterator<string>}
   */
  keys() {
    return iteratorMap(
      createMapIterator(this._map),
      /** @param {any} v */
      (v) => v[0]
    );
  }
  /**
   * Returns the values for each element in the YMap Type.
   *
   * @return {IterableIterator<any>}
   */
  values() {
    return iteratorMap(
      createMapIterator(this._map),
      /** @param {any} v */
      (v) => v[1].content.getContent()[v[1].length - 1]
    );
  }
  /**
   * Returns an Iterator of [key, value] pairs
   *
   * @return {IterableIterator<any>}
   */
  entries() {
    return iteratorMap(
      createMapIterator(this._map),
      /** @param {any} v */
      (v) => [v[0], v[1].content.getContent()[v[1].length - 1]]
    );
  }
  /**
   * Executes a provided function on once on every key-value pair.
   *
   * @param {function(MapType,string,YMap<MapType>):void} f A function to execute on every element of this YArray.
   */
  forEach(f2) {
    this._map.forEach((item, key2) => {
      if (!item.deleted) {
        f2(item.content.getContent()[item.length - 1], key2, this);
      }
    });
  }
  /**
   * Returns an Iterator of [key, value] pairs
   *
   * @return {IterableIterator<any>}
   */
  [Symbol.iterator]() {
    return this.entries();
  }
  /**
   * Remove a specified element from this YMap.
   *
   * @param {string} key The key of the element to remove.
   */
  delete(key2) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeMapDelete(transaction, this, key2);
      });
    } else {
      this._prelimContent.delete(key2);
    }
  }
  /**
   * Adds or updates an element with a specified key and value.
   * @template {MapType} VAL
   *
   * @param {string} key The key of the element to add to this YMap
   * @param {VAL} value The value of the element to add
   * @return {VAL}
   */
  set(key2, value) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeMapSet(
          transaction,
          this,
          key2,
          /** @type {any} */
          value
        );
      });
    } else {
      this._prelimContent.set(key2, value);
    }
    return value;
  }
  /**
   * Returns a specified element from this YMap.
   *
   * @param {string} key
   * @return {MapType|undefined}
   */
  get(key2) {
    return (
      /** @type {any} */
      typeMapGet(this, key2)
    );
  }
  /**
   * Returns a boolean indicating whether the specified key exists or not.
   *
   * @param {string} key The key to test.
   * @return {boolean}
   */
  has(key2) {
    return typeMapHas(this, key2);
  }
  /**
   * Removes all elements from this YMap.
   */
  clear() {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        this.forEach(function(_value, key2, map6) {
          typeMapDelete(transaction, map6, key2);
        });
      });
    } else {
      this._prelimContent.clear();
    }
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   */
  _write(encoder) {
    encoder.writeTypeRef(YMapRefID);
  }
};
var equalAttrs = (a2, b2) => a2 === b2 || typeof a2 === "object" && typeof b2 === "object" && a2 && b2 && equalFlat(a2, b2);
var ItemTextListPosition = class {
  /**
   * @param {Item|null} left
   * @param {Item|null} right
   * @param {number} index
   * @param {Map<string,any>} currentAttributes
   */
  constructor(left2, right2, index7, currentAttributes) {
    this.left = left2;
    this.right = right2;
    this.index = index7;
    this.currentAttributes = currentAttributes;
  }
  /**
   * Only call this if you know that this.right is defined
   */
  forward() {
    if (this.right === null) {
      unexpectedCase();
    }
    switch (this.right.content.constructor) {
      case ContentFormat:
        if (!this.right.deleted) {
          updateCurrentAttributes(
            this.currentAttributes,
            /** @type {ContentFormat} */
            this.right.content
          );
        }
        break;
      default:
        if (!this.right.deleted) {
          this.index += this.right.length;
        }
        break;
    }
    this.left = this.right;
    this.right = this.right.right;
  }
};
var findNextPosition = (transaction, pos, count2) => {
  while (pos.right !== null && count2 > 0) {
    switch (pos.right.content.constructor) {
      case ContentFormat:
        if (!pos.right.deleted) {
          updateCurrentAttributes(
            pos.currentAttributes,
            /** @type {ContentFormat} */
            pos.right.content
          );
        }
        break;
      default:
        if (!pos.right.deleted) {
          if (count2 < pos.right.length) {
            getItemCleanStart(transaction, createID(pos.right.id.client, pos.right.id.clock + count2));
          }
          pos.index += pos.right.length;
          count2 -= pos.right.length;
        }
        break;
    }
    pos.left = pos.right;
    pos.right = pos.right.right;
  }
  return pos;
};
var findPosition = (transaction, parent, index7) => {
  const currentAttributes = /* @__PURE__ */ new Map();
  const marker = findMarker(parent, index7);
  if (marker) {
    const pos = new ItemTextListPosition(marker.p.left, marker.p, marker.index, currentAttributes);
    return findNextPosition(transaction, pos, index7 - marker.index);
  } else {
    const pos = new ItemTextListPosition(null, parent._start, 0, currentAttributes);
    return findNextPosition(transaction, pos, index7);
  }
};
var insertNegatedAttributes = (transaction, parent, currPos, negatedAttributes) => {
  while (currPos.right !== null && (currPos.right.deleted === true || currPos.right.content.constructor === ContentFormat && equalAttrs(
    negatedAttributes.get(
      /** @type {ContentFormat} */
      currPos.right.content.key
    ),
    /** @type {ContentFormat} */
    currPos.right.content.value
  ))) {
    if (!currPos.right.deleted) {
      negatedAttributes.delete(
        /** @type {ContentFormat} */
        currPos.right.content.key
      );
    }
    currPos.forward();
  }
  const doc4 = transaction.doc;
  const ownClientId = doc4.clientID;
  negatedAttributes.forEach((val, key2) => {
    const left2 = currPos.left;
    const right2 = currPos.right;
    const nextFormat = new Item(createID(ownClientId, getState(doc4.store, ownClientId)), left2, left2 && left2.lastId, right2, right2 && right2.id, parent, null, new ContentFormat(key2, val));
    nextFormat.integrate(transaction, 0);
    currPos.right = nextFormat;
    currPos.forward();
  });
};
var updateCurrentAttributes = (currentAttributes, format) => {
  const { key: key2, value } = format;
  if (value === null) {
    currentAttributes.delete(key2);
  } else {
    currentAttributes.set(key2, value);
  }
};
var minimizeAttributeChanges = (currPos, attributes) => {
  while (true) {
    if (currPos.right === null) {
      break;
    } else if (currPos.right.deleted || currPos.right.content.constructor === ContentFormat && equalAttrs(
      attributes[
        /** @type {ContentFormat} */
        currPos.right.content.key
      ] || null,
      /** @type {ContentFormat} */
      currPos.right.content.value
    ))
      ;
    else {
      break;
    }
    currPos.forward();
  }
};
var insertAttributes = (transaction, parent, currPos, attributes) => {
  const doc4 = transaction.doc;
  const ownClientId = doc4.clientID;
  const negatedAttributes = /* @__PURE__ */ new Map();
  for (const key2 in attributes) {
    const val = attributes[key2];
    const currentVal = currPos.currentAttributes.get(key2) || null;
    if (!equalAttrs(currentVal, val)) {
      negatedAttributes.set(key2, currentVal);
      const { left: left2, right: right2 } = currPos;
      currPos.right = new Item(createID(ownClientId, getState(doc4.store, ownClientId)), left2, left2 && left2.lastId, right2, right2 && right2.id, parent, null, new ContentFormat(key2, val));
      currPos.right.integrate(transaction, 0);
      currPos.forward();
    }
  }
  return negatedAttributes;
};
var insertText = (transaction, parent, currPos, text10, attributes) => {
  currPos.currentAttributes.forEach((_val, key2) => {
    if (attributes[key2] === void 0) {
      attributes[key2] = null;
    }
  });
  const doc4 = transaction.doc;
  const ownClientId = doc4.clientID;
  minimizeAttributeChanges(currPos, attributes);
  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);
  const content5 = text10.constructor === String ? new ContentString(
    /** @type {string} */
    text10
  ) : text10 instanceof AbstractType ? new ContentType(text10) : new ContentEmbed(text10);
  let { left: left2, right: right2, index: index7 } = currPos;
  if (parent._searchMarker) {
    updateMarkerChanges(parent._searchMarker, currPos.index, content5.getLength());
  }
  right2 = new Item(createID(ownClientId, getState(doc4.store, ownClientId)), left2, left2 && left2.lastId, right2, right2 && right2.id, parent, null, content5);
  right2.integrate(transaction, 0);
  currPos.right = right2;
  currPos.index = index7;
  currPos.forward();
  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);
};
var formatText = (transaction, parent, currPos, length4, attributes) => {
  const doc4 = transaction.doc;
  const ownClientId = doc4.clientID;
  minimizeAttributeChanges(currPos, attributes);
  const negatedAttributes = insertAttributes(transaction, parent, currPos, attributes);
  iterationLoop:
    while (currPos.right !== null && (length4 > 0 || negatedAttributes.size > 0 && (currPos.right.deleted || currPos.right.content.constructor === ContentFormat))) {
      if (!currPos.right.deleted) {
        switch (currPos.right.content.constructor) {
          case ContentFormat: {
            const { key: key2, value } = (
              /** @type {ContentFormat} */
              currPos.right.content
            );
            const attr = attributes[key2];
            if (attr !== void 0) {
              if (equalAttrs(attr, value)) {
                negatedAttributes.delete(key2);
              } else {
                if (length4 === 0) {
                  break iterationLoop;
                }
                negatedAttributes.set(key2, value);
              }
              currPos.right.delete(transaction);
            } else {
              currPos.currentAttributes.set(key2, value);
            }
            break;
          }
          default:
            if (length4 < currPos.right.length) {
              getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length4));
            }
            length4 -= currPos.right.length;
            break;
        }
      }
      currPos.forward();
    }
  if (length4 > 0) {
    let newlines = "";
    for (; length4 > 0; length4--) {
      newlines += "\n";
    }
    currPos.right = new Item(createID(ownClientId, getState(doc4.store, ownClientId)), currPos.left, currPos.left && currPos.left.lastId, currPos.right, currPos.right && currPos.right.id, parent, null, new ContentString(newlines));
    currPos.right.integrate(transaction, 0);
    currPos.forward();
  }
  insertNegatedAttributes(transaction, parent, currPos, negatedAttributes);
};
var cleanupFormattingGap = (transaction, start2, curr, startAttributes, currAttributes) => {
  let end2 = start2;
  const endFormats = create2();
  while (end2 && (!end2.countable || end2.deleted)) {
    if (!end2.deleted && end2.content.constructor === ContentFormat) {
      const cf = (
        /** @type {ContentFormat} */
        end2.content
      );
      endFormats.set(cf.key, cf);
    }
    end2 = end2.right;
  }
  let cleanups = 0;
  let reachedCurr = false;
  while (start2 !== end2) {
    if (curr === start2) {
      reachedCurr = true;
    }
    if (!start2.deleted) {
      const content5 = start2.content;
      switch (content5.constructor) {
        case ContentFormat: {
          const { key: key2, value } = (
            /** @type {ContentFormat} */
            content5
          );
          const startAttrValue = startAttributes.get(key2) || null;
          if (endFormats.get(key2) !== content5 || startAttrValue === value) {
            start2.delete(transaction);
            cleanups++;
            if (!reachedCurr && (currAttributes.get(key2) || null) === value && startAttrValue !== value) {
              if (startAttrValue === null) {
                currAttributes.delete(key2);
              } else {
                currAttributes.set(key2, startAttrValue);
              }
            }
          }
          if (!reachedCurr && !start2.deleted) {
            updateCurrentAttributes(
              currAttributes,
              /** @type {ContentFormat} */
              content5
            );
          }
          break;
        }
      }
    }
    start2 = /** @type {Item} */
    start2.right;
  }
  return cleanups;
};
var cleanupContextlessFormattingGap = (transaction, item) => {
  while (item && item.right && (item.right.deleted || !item.right.countable)) {
    item = item.right;
  }
  const attrs = /* @__PURE__ */ new Set();
  while (item && (item.deleted || !item.countable)) {
    if (!item.deleted && item.content.constructor === ContentFormat) {
      const key2 = (
        /** @type {ContentFormat} */
        item.content.key
      );
      if (attrs.has(key2)) {
        item.delete(transaction);
      } else {
        attrs.add(key2);
      }
    }
    item = item.left;
  }
};
var cleanupYTextFormatting = (type) => {
  let res = 0;
  transact(
    /** @type {Doc} */
    type.doc,
    (transaction) => {
      let start2 = (
        /** @type {Item} */
        type._start
      );
      let end2 = type._start;
      let startAttributes = create2();
      const currentAttributes = copy3(startAttributes);
      while (end2) {
        if (end2.deleted === false) {
          switch (end2.content.constructor) {
            case ContentFormat:
              updateCurrentAttributes(
                currentAttributes,
                /** @type {ContentFormat} */
                end2.content
              );
              break;
            default:
              res += cleanupFormattingGap(transaction, start2, end2, startAttributes, currentAttributes);
              startAttributes = copy3(currentAttributes);
              start2 = end2;
              break;
          }
        }
        end2 = end2.right;
      }
    }
  );
  return res;
};
var deleteText = (transaction, currPos, length4) => {
  const startLength = length4;
  const startAttrs = copy3(currPos.currentAttributes);
  const start2 = currPos.right;
  while (length4 > 0 && currPos.right !== null) {
    if (currPos.right.deleted === false) {
      switch (currPos.right.content.constructor) {
        case ContentType:
        case ContentEmbed:
        case ContentString:
          if (length4 < currPos.right.length) {
            getItemCleanStart(transaction, createID(currPos.right.id.client, currPos.right.id.clock + length4));
          }
          length4 -= currPos.right.length;
          currPos.right.delete(transaction);
          break;
      }
    }
    currPos.forward();
  }
  if (start2) {
    cleanupFormattingGap(transaction, start2, currPos.right, startAttrs, currPos.currentAttributes);
  }
  const parent = (
    /** @type {AbstractType<any>} */
    /** @type {Item} */
    (currPos.left || currPos.right).parent
  );
  if (parent._searchMarker) {
    updateMarkerChanges(parent._searchMarker, currPos.index, -startLength + length4);
  }
  return currPos;
};
var YTextEvent = class extends YEvent {
  /**
   * @param {YText} ytext
   * @param {Transaction} transaction
   * @param {Set<any>} subs The keys that changed
   */
  constructor(ytext, transaction, subs) {
    super(ytext, transaction);
    this.childListChanged = false;
    this.keysChanged = /* @__PURE__ */ new Set();
    subs.forEach((sub) => {
      if (sub === null) {
        this.childListChanged = true;
      } else {
        this.keysChanged.add(sub);
      }
    });
  }
  /**
   * @type {{added:Set<Item>,deleted:Set<Item>,keys:Map<string,{action:'add'|'update'|'delete',oldValue:any}>,delta:Array<{insert?:Array<any>|string, delete?:number, retain?:number}>}}
   */
  get changes() {
    if (this._changes === null) {
      const changes = {
        keys: this.keys,
        delta: this.delta,
        added: /* @__PURE__ */ new Set(),
        deleted: /* @__PURE__ */ new Set()
      };
      this._changes = changes;
    }
    return (
      /** @type {any} */
      this._changes
    );
  }
  /**
   * Compute the changes in the delta format.
   * A {@link https://quilljs.com/docs/delta/|Quill Delta}) that represents the changes on the document.
   *
   * @type {Array<{insert?:string|object|AbstractType<any>, delete?:number, retain?:number, attributes?: Object<string,any>}>}
   *
   * @public
   */
  get delta() {
    if (this._delta === null) {
      const y = (
        /** @type {Doc} */
        this.target.doc
      );
      const delta = [];
      transact(y, (transaction) => {
        const currentAttributes = /* @__PURE__ */ new Map();
        const oldAttributes = /* @__PURE__ */ new Map();
        let item = this.target._start;
        let action = null;
        const attributes = {};
        let insert = "";
        let retain = 0;
        let deleteLen = 0;
        const addOp = () => {
          if (action !== null) {
            let op = null;
            switch (action) {
              case "delete":
                if (deleteLen > 0) {
                  op = { delete: deleteLen };
                }
                deleteLen = 0;
                break;
              case "insert":
                if (typeof insert === "object" || insert.length > 0) {
                  op = { insert };
                  if (currentAttributes.size > 0) {
                    op.attributes = {};
                    currentAttributes.forEach((value, key2) => {
                      if (value !== null) {
                        op.attributes[key2] = value;
                      }
                    });
                  }
                }
                insert = "";
                break;
              case "retain":
                if (retain > 0) {
                  op = { retain };
                  if (!isEmpty(attributes)) {
                    op.attributes = assign2({}, attributes);
                  }
                }
                retain = 0;
                break;
            }
            if (op)
              delta.push(op);
            action = null;
          }
        };
        while (item !== null) {
          switch (item.content.constructor) {
            case ContentType:
            case ContentEmbed:
              if (this.adds(item)) {
                if (!this.deletes(item)) {
                  addOp();
                  action = "insert";
                  insert = item.content.getContent()[0];
                  addOp();
                }
              } else if (this.deletes(item)) {
                if (action !== "delete") {
                  addOp();
                  action = "delete";
                }
                deleteLen += 1;
              } else if (!item.deleted) {
                if (action !== "retain") {
                  addOp();
                  action = "retain";
                }
                retain += 1;
              }
              break;
            case ContentString:
              if (this.adds(item)) {
                if (!this.deletes(item)) {
                  if (action !== "insert") {
                    addOp();
                    action = "insert";
                  }
                  insert += /** @type {ContentString} */
                  item.content.str;
                }
              } else if (this.deletes(item)) {
                if (action !== "delete") {
                  addOp();
                  action = "delete";
                }
                deleteLen += item.length;
              } else if (!item.deleted) {
                if (action !== "retain") {
                  addOp();
                  action = "retain";
                }
                retain += item.length;
              }
              break;
            case ContentFormat: {
              const { key: key2, value } = (
                /** @type {ContentFormat} */
                item.content
              );
              if (this.adds(item)) {
                if (!this.deletes(item)) {
                  const curVal = currentAttributes.get(key2) || null;
                  if (!equalAttrs(curVal, value)) {
                    if (action === "retain") {
                      addOp();
                    }
                    if (equalAttrs(value, oldAttributes.get(key2) || null)) {
                      delete attributes[key2];
                    } else {
                      attributes[key2] = value;
                    }
                  } else if (value !== null) {
                    item.delete(transaction);
                  }
                }
              } else if (this.deletes(item)) {
                oldAttributes.set(key2, value);
                const curVal = currentAttributes.get(key2) || null;
                if (!equalAttrs(curVal, value)) {
                  if (action === "retain") {
                    addOp();
                  }
                  attributes[key2] = curVal;
                }
              } else if (!item.deleted) {
                oldAttributes.set(key2, value);
                const attr = attributes[key2];
                if (attr !== void 0) {
                  if (!equalAttrs(attr, value)) {
                    if (action === "retain") {
                      addOp();
                    }
                    if (value === null) {
                      delete attributes[key2];
                    } else {
                      attributes[key2] = value;
                    }
                  } else if (attr !== null) {
                    item.delete(transaction);
                  }
                }
              }
              if (!item.deleted) {
                if (action === "insert") {
                  addOp();
                }
                updateCurrentAttributes(
                  currentAttributes,
                  /** @type {ContentFormat} */
                  item.content
                );
              }
              break;
            }
          }
          item = item.right;
        }
        addOp();
        while (delta.length > 0) {
          const lastOp = delta[delta.length - 1];
          if (lastOp.retain !== void 0 && lastOp.attributes === void 0) {
            delta.pop();
          } else {
            break;
          }
        }
      });
      this._delta = delta;
    }
    return (
      /** @type {any} */
      this._delta
    );
  }
};
var YText = class extends AbstractType {
  /**
   * @param {String} [string] The initial value of the YText.
   */
  constructor(string3) {
    super();
    this._pending = string3 !== void 0 ? [() => this.insert(0, string3)] : [];
    this._searchMarker = [];
  }
  /**
   * Number of characters of this text type.
   *
   * @type {number}
   */
  get length() {
    return this._length;
  }
  /**
   * @param {Doc} y
   * @param {Item} item
   */
  _integrate(y, item) {
    super._integrate(y, item);
    try {
      this._pending.forEach((f2) => f2());
    } catch (e) {
      console.error(e);
    }
    this._pending = null;
  }
  _copy() {
    return new YText();
  }
  /**
   * @return {YText}
   */
  clone() {
    const text10 = new YText();
    text10.applyDelta(this.toDelta());
    return text10;
  }
  /**
   * Creates YTextEvent and calls observers.
   *
   * @param {Transaction} transaction
   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.
   */
  _callObserver(transaction, parentSubs) {
    super._callObserver(transaction, parentSubs);
    const event = new YTextEvent(this, transaction, parentSubs);
    const doc4 = transaction.doc;
    callTypeObservers(this, transaction, event);
    if (!transaction.local) {
      let foundFormattingItem = false;
      for (const [client, afterClock] of transaction.afterState.entries()) {
        const clock = transaction.beforeState.get(client) || 0;
        if (afterClock === clock) {
          continue;
        }
        iterateStructs(
          transaction,
          /** @type {Array<Item|GC>} */
          doc4.store.clients.get(client),
          clock,
          afterClock,
          (item) => {
            if (!item.deleted && /** @type {Item} */
            item.content.constructor === ContentFormat) {
              foundFormattingItem = true;
            }
          }
        );
        if (foundFormattingItem) {
          break;
        }
      }
      if (!foundFormattingItem) {
        iterateDeletedStructs(transaction, transaction.deleteSet, (item) => {
          if (item instanceof GC || foundFormattingItem) {
            return;
          }
          if (item.parent === this && item.content.constructor === ContentFormat) {
            foundFormattingItem = true;
          }
        });
      }
      transact(doc4, (t) => {
        if (foundFormattingItem) {
          cleanupYTextFormatting(this);
        } else {
          iterateDeletedStructs(t, t.deleteSet, (item) => {
            if (item instanceof GC) {
              return;
            }
            if (item.parent === this) {
              cleanupContextlessFormattingGap(t, item);
            }
          });
        }
      });
    }
  }
  /**
   * Returns the unformatted string representation of this YText type.
   *
   * @public
   */
  toString() {
    let str = "";
    let n = this._start;
    while (n !== null) {
      if (!n.deleted && n.countable && n.content.constructor === ContentString) {
        str += /** @type {ContentString} */
        n.content.str;
      }
      n = n.right;
    }
    return str;
  }
  /**
   * Returns the unformatted string representation of this YText type.
   *
   * @return {string}
   * @public
   */
  toJSON() {
    return this.toString();
  }
  /**
   * Apply a {@link Delta} on this shared YText type.
   *
   * @param {any} delta The changes to apply on this element.
   * @param {object}  opts
   * @param {boolean} [opts.sanitize] Sanitize input delta. Removes ending newlines if set to true.
   *
   *
   * @public
   */
  applyDelta(delta, { sanitize = true } = {}) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        const currPos = new ItemTextListPosition(null, this._start, 0, /* @__PURE__ */ new Map());
        for (let i = 0; i < delta.length; i++) {
          const op = delta[i];
          if (op.insert !== void 0) {
            const ins = !sanitize && typeof op.insert === "string" && i === delta.length - 1 && currPos.right === null && op.insert.slice(-1) === "\n" ? op.insert.slice(0, -1) : op.insert;
            if (typeof ins !== "string" || ins.length > 0) {
              insertText(transaction, this, currPos, ins, op.attributes || {});
            }
          } else if (op.retain !== void 0) {
            formatText(transaction, this, currPos, op.retain, op.attributes || {});
          } else if (op.delete !== void 0) {
            deleteText(transaction, currPos, op.delete);
          }
        }
      });
    } else {
      this._pending.push(() => this.applyDelta(delta));
    }
  }
  /**
   * Returns the Delta representation of this YText type.
   *
   * @param {Snapshot} [snapshot]
   * @param {Snapshot} [prevSnapshot]
   * @param {function('removed' | 'added', ID):any} [computeYChange]
   * @return {any} The Delta representation of this type.
   *
   * @public
   */
  toDelta(snapshot2, prevSnapshot, computeYChange) {
    const ops = [];
    const currentAttributes = /* @__PURE__ */ new Map();
    const doc4 = (
      /** @type {Doc} */
      this.doc
    );
    let str = "";
    let n = this._start;
    function packStr() {
      if (str.length > 0) {
        const attributes = {};
        let addAttributes = false;
        currentAttributes.forEach((value, key2) => {
          addAttributes = true;
          attributes[key2] = value;
        });
        const op = { insert: str };
        if (addAttributes) {
          op.attributes = attributes;
        }
        ops.push(op);
        str = "";
      }
    }
    const computeDelta = () => {
      while (n !== null) {
        if (isVisible(n, snapshot2) || prevSnapshot !== void 0 && isVisible(n, prevSnapshot)) {
          switch (n.content.constructor) {
            case ContentString: {
              const cur = currentAttributes.get("ychange");
              if (snapshot2 !== void 0 && !isVisible(n, snapshot2)) {
                if (cur === void 0 || cur.user !== n.id.client || cur.type !== "removed") {
                  packStr();
                  currentAttributes.set("ychange", computeYChange ? computeYChange("removed", n.id) : { type: "removed" });
                }
              } else if (prevSnapshot !== void 0 && !isVisible(n, prevSnapshot)) {
                if (cur === void 0 || cur.user !== n.id.client || cur.type !== "added") {
                  packStr();
                  currentAttributes.set("ychange", computeYChange ? computeYChange("added", n.id) : { type: "added" });
                }
              } else if (cur !== void 0) {
                packStr();
                currentAttributes.delete("ychange");
              }
              str += /** @type {ContentString} */
              n.content.str;
              break;
            }
            case ContentType:
            case ContentEmbed: {
              packStr();
              const op = {
                insert: n.content.getContent()[0]
              };
              if (currentAttributes.size > 0) {
                const attrs = (
                  /** @type {Object<string,any>} */
                  {}
                );
                op.attributes = attrs;
                currentAttributes.forEach((value, key2) => {
                  attrs[key2] = value;
                });
              }
              ops.push(op);
              break;
            }
            case ContentFormat:
              if (isVisible(n, snapshot2)) {
                packStr();
                updateCurrentAttributes(
                  currentAttributes,
                  /** @type {ContentFormat} */
                  n.content
                );
              }
              break;
          }
        }
        n = n.right;
      }
      packStr();
    };
    if (snapshot2 || prevSnapshot) {
      transact(doc4, (transaction) => {
        if (snapshot2) {
          splitSnapshotAffectedStructs(transaction, snapshot2);
        }
        if (prevSnapshot) {
          splitSnapshotAffectedStructs(transaction, prevSnapshot);
        }
        computeDelta();
      }, "cleanup");
    } else {
      computeDelta();
    }
    return ops;
  }
  /**
   * Insert text at a given index.
   *
   * @param {number} index The index at which to start inserting.
   * @param {String} text The text to insert at the specified position.
   * @param {TextAttributes} [attributes] Optionally define some formatting
   *                                    information to apply on the inserted
   *                                    Text.
   * @public
   */
  insert(index7, text10, attributes) {
    if (text10.length <= 0) {
      return;
    }
    const y = this.doc;
    if (y !== null) {
      transact(y, (transaction) => {
        const pos = findPosition(transaction, this, index7);
        if (!attributes) {
          attributes = {};
          pos.currentAttributes.forEach((v, k) => {
            attributes[k] = v;
          });
        }
        insertText(transaction, this, pos, text10, attributes);
      });
    } else {
      this._pending.push(() => this.insert(index7, text10, attributes));
    }
  }
  /**
   * Inserts an embed at a index.
   *
   * @param {number} index The index to insert the embed at.
   * @param {Object | AbstractType<any>} embed The Object that represents the embed.
   * @param {TextAttributes} attributes Attribute information to apply on the
   *                                    embed
   *
   * @public
   */
  insertEmbed(index7, embed, attributes = {}) {
    const y = this.doc;
    if (y !== null) {
      transact(y, (transaction) => {
        const pos = findPosition(transaction, this, index7);
        insertText(transaction, this, pos, embed, attributes);
      });
    } else {
      this._pending.push(() => this.insertEmbed(index7, embed, attributes));
    }
  }
  /**
   * Deletes text starting from an index.
   *
   * @param {number} index Index at which to start deleting.
   * @param {number} length The number of characters to remove. Defaults to 1.
   *
   * @public
   */
  delete(index7, length4) {
    if (length4 === 0) {
      return;
    }
    const y = this.doc;
    if (y !== null) {
      transact(y, (transaction) => {
        deleteText(transaction, findPosition(transaction, this, index7), length4);
      });
    } else {
      this._pending.push(() => this.delete(index7, length4));
    }
  }
  /**
   * Assigns properties to a range of text.
   *
   * @param {number} index The position where to start formatting.
   * @param {number} length The amount of characters to assign properties to.
   * @param {TextAttributes} attributes Attribute information to apply on the
   *                                    text.
   *
   * @public
   */
  format(index7, length4, attributes) {
    if (length4 === 0) {
      return;
    }
    const y = this.doc;
    if (y !== null) {
      transact(y, (transaction) => {
        const pos = findPosition(transaction, this, index7);
        if (pos.right === null) {
          return;
        }
        formatText(transaction, this, pos, length4, attributes);
      });
    } else {
      this._pending.push(() => this.format(index7, length4, attributes));
    }
  }
  /**
   * Removes an attribute.
   *
   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.
   *
   * @param {String} attributeName The attribute name that is to be removed.
   *
   * @public
   */
  removeAttribute(attributeName) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeMapDelete(transaction, this, attributeName);
      });
    } else {
      this._pending.push(() => this.removeAttribute(attributeName));
    }
  }
  /**
   * Sets or updates an attribute.
   *
   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.
   *
   * @param {String} attributeName The attribute name that is to be set.
   * @param {any} attributeValue The attribute value that is to be set.
   *
   * @public
   */
  setAttribute(attributeName, attributeValue) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeMapSet(transaction, this, attributeName, attributeValue);
      });
    } else {
      this._pending.push(() => this.setAttribute(attributeName, attributeValue));
    }
  }
  /**
   * Returns an attribute value that belongs to the attribute name.
   *
   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.
   *
   * @param {String} attributeName The attribute name that identifies the
   *                               queried value.
   * @return {any} The queried attribute value.
   *
   * @public
   */
  getAttribute(attributeName) {
    return (
      /** @type {any} */
      typeMapGet(this, attributeName)
    );
  }
  /**
   * Returns all attribute name/value pairs in a JSON Object.
   *
   * @note Xml-Text nodes don't have attributes. You can use this feature to assign properties to complete text-blocks.
   *
   * @return {Object<string, any>} A JSON Object that describes the attributes.
   *
   * @public
   */
  getAttributes() {
    return typeMapGetAll(this);
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   */
  _write(encoder) {
    encoder.writeTypeRef(YTextRefID);
  }
};
var YXmlTreeWalker = class {
  /**
   * @param {YXmlFragment | YXmlElement} root
   * @param {function(AbstractType<any>):boolean} [f]
   */
  constructor(root6, f2 = () => true) {
    this._filter = f2;
    this._root = root6;
    this._currentNode = /** @type {Item} */
    root6._start;
    this._firstCall = true;
  }
  [Symbol.iterator]() {
    return this;
  }
  /**
   * Get the next node.
   *
   * @return {IteratorResult<YXmlElement|YXmlText|YXmlHook>} The next node.
   *
   * @public
   */
  next() {
    let n = this._currentNode;
    let type = n && n.content && /** @type {any} */
    n.content.type;
    if (n !== null && (!this._firstCall || n.deleted || !this._filter(type))) {
      do {
        type = /** @type {any} */
        n.content.type;
        if (!n.deleted && (type.constructor === YXmlElement || type.constructor === YXmlFragment) && type._start !== null) {
          n = type._start;
        } else {
          while (n !== null) {
            if (n.right !== null) {
              n = n.right;
              break;
            } else if (n.parent === this._root) {
              n = null;
            } else {
              n = /** @type {AbstractType<any>} */
              n.parent._item;
            }
          }
        }
      } while (n !== null && (n.deleted || !this._filter(
        /** @type {ContentType} */
        n.content.type
      )));
    }
    this._firstCall = false;
    if (n === null) {
      return { value: void 0, done: true };
    }
    this._currentNode = n;
    return { value: (
      /** @type {any} */
      n.content.type
    ), done: false };
  }
};
var YXmlFragment = class extends AbstractType {
  constructor() {
    super();
    this._prelimContent = [];
  }
  /**
   * @type {YXmlElement|YXmlText|null}
   */
  get firstChild() {
    const first2 = this._first;
    return first2 ? first2.content.getContent()[0] : null;
  }
  /**
   * Integrate this type into the Yjs instance.
   *
   * * Save this struct in the os
   * * This type is sent to other client
   * * Observer functions are fired
   *
   * @param {Doc} y The Yjs instance
   * @param {Item} item
   */
  _integrate(y, item) {
    super._integrate(y, item);
    this.insert(
      0,
      /** @type {Array<any>} */
      this._prelimContent
    );
    this._prelimContent = null;
  }
  _copy() {
    return new YXmlFragment();
  }
  /**
   * @return {YXmlFragment}
   */
  clone() {
    const el = new YXmlFragment();
    el.insert(0, this.toArray().map((item) => item instanceof AbstractType ? item.clone() : item));
    return el;
  }
  get length() {
    return this._prelimContent === null ? this._length : this._prelimContent.length;
  }
  /**
   * Create a subtree of childNodes.
   *
   * @example
   * const walker = elem.createTreeWalker(dom => dom.nodeName === 'div')
   * for (let node in walker) {
   *   // `node` is a div node
   *   nop(node)
   * }
   *
   * @param {function(AbstractType<any>):boolean} filter Function that is called on each child element and
   *                          returns a Boolean indicating whether the child
   *                          is to be included in the subtree.
   * @return {YXmlTreeWalker} A subtree and a position within it.
   *
   * @public
   */
  createTreeWalker(filter) {
    return new YXmlTreeWalker(this, filter);
  }
  /**
   * Returns the first YXmlElement that matches the query.
   * Similar to DOM's {@link querySelector}.
   *
   * Query support:
   *   - tagname
   * TODO:
   *   - id
   *   - attribute
   *
   * @param {CSS_Selector} query The query on the children.
   * @return {YXmlElement|YXmlText|YXmlHook|null} The first element that matches the query or null.
   *
   * @public
   */
  querySelector(query) {
    query = query.toUpperCase();
    const iterator = new YXmlTreeWalker(this, (element7) => element7.nodeName && element7.nodeName.toUpperCase() === query);
    const next2 = iterator.next();
    if (next2.done) {
      return null;
    } else {
      return next2.value;
    }
  }
  /**
   * Returns all YXmlElements that match the query.
   * Similar to Dom's {@link querySelectorAll}.
   *
   * @todo Does not yet support all queries. Currently only query by tagName.
   *
   * @param {CSS_Selector} query The query on the children
   * @return {Array<YXmlElement|YXmlText|YXmlHook|null>} The elements that match this query.
   *
   * @public
   */
  querySelectorAll(query) {
    query = query.toUpperCase();
    return from3(new YXmlTreeWalker(this, (element7) => element7.nodeName && element7.nodeName.toUpperCase() === query));
  }
  /**
   * Creates YXmlEvent and calls observers.
   *
   * @param {Transaction} transaction
   * @param {Set<null|string>} parentSubs Keys changed on this type. `null` if list was modified.
   */
  _callObserver(transaction, parentSubs) {
    callTypeObservers(this, transaction, new YXmlEvent(this, parentSubs, transaction));
  }
  /**
   * Get the string representation of all the children of this YXmlFragment.
   *
   * @return {string} The string representation of all children.
   */
  toString() {
    return typeListMap(this, (xml2) => xml2.toString()).join("");
  }
  /**
   * @return {string}
   */
  toJSON() {
    return this.toString();
  }
  /**
   * Creates a Dom Element that mirrors this YXmlElement.
   *
   * @param {Document} [_document=document] The document object (you must define
   *                                        this when calling this method in
   *                                        nodejs)
   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks
   *                                             are presented in the DOM
   * @param {any} [binding] You should not set this property. This is
   *                               used if DomBinding wants to create a
   *                               association to the created DOM type.
   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
   *
   * @public
   */
  toDOM(_document = document, hooks = {}, binding) {
    const fragment = _document.createDocumentFragment();
    if (binding !== void 0) {
      binding._createAssociation(fragment, this);
    }
    typeListForEach(this, (xmlType) => {
      fragment.insertBefore(xmlType.toDOM(_document, hooks, binding), null);
    });
    return fragment;
  }
  /**
   * Inserts new content at an index.
   *
   * @example
   *  // Insert character 'a' at position 0
   *  xml.insert(0, [new Y.XmlText('text')])
   *
   * @param {number} index The index to insert content at
   * @param {Array<YXmlElement|YXmlText>} content The array of content
   */
  insert(index7, content5) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeListInsertGenerics(transaction, this, index7, content5);
      });
    } else {
      this._prelimContent.splice(index7, 0, ...content5);
    }
  }
  /**
   * Inserts new content at an index.
   *
   * @example
   *  // Insert character 'a' at position 0
   *  xml.insert(0, [new Y.XmlText('text')])
   *
   * @param {null|Item|YXmlElement|YXmlText} ref The index to insert content at
   * @param {Array<YXmlElement|YXmlText>} content The array of content
   */
  insertAfter(ref, content5) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        const refItem = ref && ref instanceof AbstractType ? ref._item : ref;
        typeListInsertGenericsAfter(transaction, this, refItem, content5);
      });
    } else {
      const pc = (
        /** @type {Array<any>} */
        this._prelimContent
      );
      const index7 = ref === null ? 0 : pc.findIndex((el) => el === ref) + 1;
      if (index7 === 0 && ref !== null) {
        throw create4("Reference item not found");
      }
      pc.splice(index7, 0, ...content5);
    }
  }
  /**
   * Deletes elements starting from an index.
   *
   * @param {number} index Index at which to start deleting elements
   * @param {number} [length=1] The number of elements to remove. Defaults to 1.
   */
  delete(index7, length4 = 1) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeListDelete(transaction, this, index7, length4);
      });
    } else {
      this._prelimContent.splice(index7, length4);
    }
  }
  /**
   * Transforms this YArray to a JavaScript Array.
   *
   * @return {Array<YXmlElement|YXmlText|YXmlHook>}
   */
  toArray() {
    return typeListToArray(this);
  }
  /**
   * Appends content to this YArray.
   *
   * @param {Array<YXmlElement|YXmlText>} content Array of content to append.
   */
  push(content5) {
    this.insert(this.length, content5);
  }
  /**
   * Preppends content to this YArray.
   *
   * @param {Array<YXmlElement|YXmlText>} content Array of content to preppend.
   */
  unshift(content5) {
    this.insert(0, content5);
  }
  /**
   * Returns the i-th element from a YArray.
   *
   * @param {number} index The index of the element to return from the YArray
   * @return {YXmlElement|YXmlText}
   */
  get(index7) {
    return typeListGet(this, index7);
  }
  /**
   * Transforms this YArray to a JavaScript Array.
   *
   * @param {number} [start]
   * @param {number} [end]
   * @return {Array<YXmlElement|YXmlText>}
   */
  slice(start2 = 0, end2 = this.length) {
    return typeListSlice(this, start2, end2);
  }
  /**
   * Executes a provided function on once on overy child element.
   *
   * @param {function(YXmlElement|YXmlText,number, typeof self):void} f A function to execute on every element of this YArray.
   */
  forEach(f2) {
    typeListForEach(this, f2);
  }
  /**
   * Transform the properties of this type to binary and write it to an
   * BinaryEncoder.
   *
   * This is called when this Item is sent to a remote peer.
   *
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
   */
  _write(encoder) {
    encoder.writeTypeRef(YXmlFragmentRefID);
  }
};
var YXmlElement = class extends YXmlFragment {
  constructor(nodeName = "UNDEFINED") {
    super();
    this.nodeName = nodeName;
    this._prelimAttrs = /* @__PURE__ */ new Map();
  }
  /**
   * @type {YXmlElement|YXmlText|null}
   */
  get nextSibling() {
    const n = this._item ? this._item.next : null;
    return n ? (
      /** @type {YXmlElement|YXmlText} */
      /** @type {ContentType} */
      n.content.type
    ) : null;
  }
  /**
   * @type {YXmlElement|YXmlText|null}
   */
  get prevSibling() {
    const n = this._item ? this._item.prev : null;
    return n ? (
      /** @type {YXmlElement|YXmlText} */
      /** @type {ContentType} */
      n.content.type
    ) : null;
  }
  /**
   * Integrate this type into the Yjs instance.
   *
   * * Save this struct in the os
   * * This type is sent to other client
   * * Observer functions are fired
   *
   * @param {Doc} y The Yjs instance
   * @param {Item} item
   */
  _integrate(y, item) {
    super._integrate(y, item);
    /** @type {Map<string, any>} */
    this._prelimAttrs.forEach((value, key2) => {
      this.setAttribute(key2, value);
    });
    this._prelimAttrs = null;
  }
  /**
   * Creates an Item with the same effect as this Item (without position effect)
   *
   * @return {YXmlElement}
   */
  _copy() {
    return new YXmlElement(this.nodeName);
  }
  /**
   * @return {YXmlElement<KV>}
   */
  clone() {
    const el = new YXmlElement(this.nodeName);
    const attrs = this.getAttributes();
    forEach2(attrs, (value, key2) => {
      if (typeof value === "string") {
        el.setAttribute(key2, value);
      }
    });
    el.insert(0, this.toArray().map((item) => item instanceof AbstractType ? item.clone() : item));
    return el;
  }
  /**
   * Returns the XML serialization of this YXmlElement.
   * The attributes are ordered by attribute-name, so you can easily use this
   * method to compare YXmlElements
   *
   * @return {string} The string representation of this type.
   *
   * @public
   */
  toString() {
    const attrs = this.getAttributes();
    const stringBuilder = [];
    const keys5 = [];
    for (const key2 in attrs) {
      keys5.push(key2);
    }
    keys5.sort();
    const keysLen = keys5.length;
    for (let i = 0; i < keysLen; i++) {
      const key2 = keys5[i];
      stringBuilder.push(key2 + '="' + attrs[key2] + '"');
    }
    const nodeName = this.nodeName.toLocaleLowerCase();
    const attrsString = stringBuilder.length > 0 ? " " + stringBuilder.join(" ") : "";
    return `<${nodeName}${attrsString}>${super.toString()}</${nodeName}>`;
  }
  /**
   * Removes an attribute from this YXmlElement.
   *
   * @param {string} attributeName The attribute name that is to be removed.
   *
   * @public
   */
  removeAttribute(attributeName) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeMapDelete(transaction, this, attributeName);
      });
    } else {
      this._prelimAttrs.delete(attributeName);
    }
  }
  /**
   * Sets or updates an attribute.
   *
   * @template {keyof KV & string} KEY
   *
   * @param {KEY} attributeName The attribute name that is to be set.
   * @param {KV[KEY]} attributeValue The attribute value that is to be set.
   *
   * @public
   */
  setAttribute(attributeName, attributeValue) {
    if (this.doc !== null) {
      transact(this.doc, (transaction) => {
        typeMapSet(transaction, this, attributeName, attributeValue);
      });
    } else {
      this._prelimAttrs.set(attributeName, attributeValue);
    }
  }
  /**
   * Returns an attribute value that belongs to the attribute name.
   *
   * @template {keyof KV & string} KEY
   *
   * @param {KEY} attributeName The attribute name that identifies the
   *                               queried value.
   * @return {KV[KEY]|undefined} The queried attribute value.
   *
   * @public
   */
  getAttribute(attributeName) {
    return (
      /** @type {any} */
      typeMapGet(this, attributeName)
    );
  }
  /**
   * Returns whether an attribute exists
   *
   * @param {string} attributeName The attribute name to check for existence.
   * @return {boolean} whether the attribute exists.
   *
   * @public
   */
  hasAttribute(attributeName) {
    return (
      /** @type {any} */
      typeMapHas(this, attributeName)
    );
  }
  /**
   * Returns all attribute name/value pairs in a JSON Object.
   *
   * @return {{ [Key in Extract<keyof KV,string>]?: KV[Key]}} A JSON Object that describes the attributes.
   *
   * @public
   */
  getAttributes() {
    return (
      /** @type {any} */
      typeMapGetAll(this)
    );
  }
  /**
   * Creates a Dom Element that mirrors this YXmlElement.
   *
   * @param {Document} [_document=document] The document object (you must define
   *                                        this when calling this method in
   *                                        nodejs)
   * @param {Object<string, any>} [hooks={}] Optional property to customize how hooks
   *                                             are presented in the DOM
   * @param {any} [binding] You should not set this property. This is
   *                               used if DomBinding wants to create a
   *                               association to the created DOM type.
   * @return {Node} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
   *
   * @public
   */
  toDOM(_document = document, hooks = {}, binding) {
    const dom = _document.createElement(this.nodeName);
    const attrs = this.getAttributes();
    for (const key2 in attrs) {
      const value = attrs[key2];
      if (typeof value === "string") {
        dom.setAttribute(key2, value);
      }
    }
    typeListForEach(this, (yxml) => {
      dom.appendChild(yxml.toDOM(_document, hooks, binding));
    });
    if (binding !== void 0) {
      binding._createAssociation(dom, this);
    }
    return dom;
  }
  /**
   * Transform the properties of this type to binary and write it to an
   * BinaryEncoder.
   *
   * This is called when this Item is sent to a remote peer.
   *
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
   */
  _write(encoder) {
    encoder.writeTypeRef(YXmlElementRefID);
    encoder.writeKey(this.nodeName);
  }
};
var YXmlEvent = class extends YEvent {
  /**
   * @param {YXmlElement|YXmlText|YXmlFragment} target The target on which the event is created.
   * @param {Set<string|null>} subs The set of changed attributes. `null` is included if the
   *                   child list changed.
   * @param {Transaction} transaction The transaction instance with wich the
   *                                  change was created.
   */
  constructor(target, subs, transaction) {
    super(target, transaction);
    this.childListChanged = false;
    this.attributesChanged = /* @__PURE__ */ new Set();
    subs.forEach((sub) => {
      if (sub === null) {
        this.childListChanged = true;
      } else {
        this.attributesChanged.add(sub);
      }
    });
  }
};
var YXmlText = class extends YText {
  /**
   * @type {YXmlElement|YXmlText|null}
   */
  get nextSibling() {
    const n = this._item ? this._item.next : null;
    return n ? (
      /** @type {YXmlElement|YXmlText} */
      /** @type {ContentType} */
      n.content.type
    ) : null;
  }
  /**
   * @type {YXmlElement|YXmlText|null}
   */
  get prevSibling() {
    const n = this._item ? this._item.prev : null;
    return n ? (
      /** @type {YXmlElement|YXmlText} */
      /** @type {ContentType} */
      n.content.type
    ) : null;
  }
  _copy() {
    return new YXmlText();
  }
  /**
   * @return {YXmlText}
   */
  clone() {
    const text10 = new YXmlText();
    text10.applyDelta(this.toDelta());
    return text10;
  }
  /**
   * Creates a Dom Element that mirrors this YXmlText.
   *
   * @param {Document} [_document=document] The document object (you must define
   *                                        this when calling this method in
   *                                        nodejs)
   * @param {Object<string, any>} [hooks] Optional property to customize how hooks
   *                                             are presented in the DOM
   * @param {any} [binding] You should not set this property. This is
   *                               used if DomBinding wants to create a
   *                               association to the created DOM type.
   * @return {Text} The {@link https://developer.mozilla.org/en-US/docs/Web/API/Element|Dom Element}
   *
   * @public
   */
  toDOM(_document = document, hooks, binding) {
    const dom = _document.createTextNode(this.toString());
    if (binding !== void 0) {
      binding._createAssociation(dom, this);
    }
    return dom;
  }
  toString() {
    return this.toDelta().map((delta) => {
      const nestedNodes = [];
      for (const nodeName in delta.attributes) {
        const attrs = [];
        for (const key2 in delta.attributes[nodeName]) {
          attrs.push({ key: key2, value: delta.attributes[nodeName][key2] });
        }
        attrs.sort((a2, b2) => a2.key < b2.key ? -1 : 1);
        nestedNodes.push({ nodeName, attrs });
      }
      nestedNodes.sort((a2, b2) => a2.nodeName < b2.nodeName ? -1 : 1);
      let str = "";
      for (let i = 0; i < nestedNodes.length; i++) {
        const node4 = nestedNodes[i];
        str += `<${node4.nodeName}`;
        for (let j = 0; j < node4.attrs.length; j++) {
          const attr = node4.attrs[j];
          str += ` ${attr.key}="${attr.value}"`;
        }
        str += ">";
      }
      str += delta.insert;
      for (let i = nestedNodes.length - 1; i >= 0; i--) {
        str += `</${nestedNodes[i].nodeName}>`;
      }
      return str;
    }).join("");
  }
  /**
   * @return {string}
   */
  toJSON() {
    return this.toString();
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   */
  _write(encoder) {
    encoder.writeTypeRef(YXmlTextRefID);
  }
};
var AbstractStruct = class {
  /**
   * @param {ID} id
   * @param {number} length
   */
  constructor(id2, length4) {
    this.id = id2;
    this.length = length4;
  }
  /**
   * @type {boolean}
   */
  get deleted() {
    throw methodUnimplemented();
  }
  /**
   * Merge this struct with the item to the right.
   * This method is already assuming that `this.id.clock + this.length === this.id.clock`.
   * Also this method does *not* remove right from StructStore!
   * @param {AbstractStruct} right
   * @return {boolean} wether this merged with right
   */
  mergeWith(right2) {
    return false;
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
   * @param {number} offset
   * @param {number} encodingRef
   */
  write(encoder, offset3, encodingRef) {
    throw methodUnimplemented();
  }
  /**
   * @param {Transaction} transaction
   * @param {number} offset
   */
  integrate(transaction, offset3) {
    throw methodUnimplemented();
  }
};
var structGCRefNumber = 0;
var GC = class extends AbstractStruct {
  get deleted() {
    return true;
  }
  delete() {
  }
  /**
   * @param {GC} right
   * @return {boolean}
   */
  mergeWith(right2) {
    if (this.constructor !== right2.constructor) {
      return false;
    }
    this.length += right2.length;
    return true;
  }
  /**
   * @param {Transaction} transaction
   * @param {number} offset
   */
  integrate(transaction, offset3) {
    if (offset3 > 0) {
      this.id.clock += offset3;
      this.length -= offset3;
    }
    addStruct(transaction.doc.store, this);
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    encoder.writeInfo(structGCRefNumber);
    encoder.writeLen(this.length - offset3);
  }
  /**
   * @param {Transaction} transaction
   * @param {StructStore} store
   * @return {null | number}
   */
  getMissing(transaction, store) {
    return null;
  }
};
var ContentBinary = class {
  /**
   * @param {Uint8Array} content
   */
  constructor(content5) {
    this.content = content5;
  }
  /**
   * @return {number}
   */
  getLength() {
    return 1;
  }
  /**
   * @return {Array<any>}
   */
  getContent() {
    return [this.content];
  }
  /**
   * @return {boolean}
   */
  isCountable() {
    return true;
  }
  /**
   * @return {ContentBinary}
   */
  copy() {
    return new ContentBinary(this.content);
  }
  /**
   * @param {number} offset
   * @return {ContentBinary}
   */
  splice(offset3) {
    throw methodUnimplemented();
  }
  /**
   * @param {ContentBinary} right
   * @return {boolean}
   */
  mergeWith(right2) {
    return false;
  }
  /**
   * @param {Transaction} transaction
   * @param {Item} item
   */
  integrate(transaction, item) {
  }
  /**
   * @param {Transaction} transaction
   */
  delete(transaction) {
  }
  /**
   * @param {StructStore} store
   */
  gc(store) {
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    encoder.writeBuf(this.content);
  }
  /**
   * @return {number}
   */
  getRef() {
    return 3;
  }
};
var ContentDeleted = class {
  /**
   * @param {number} len
   */
  constructor(len) {
    this.len = len;
  }
  /**
   * @return {number}
   */
  getLength() {
    return this.len;
  }
  /**
   * @return {Array<any>}
   */
  getContent() {
    return [];
  }
  /**
   * @return {boolean}
   */
  isCountable() {
    return false;
  }
  /**
   * @return {ContentDeleted}
   */
  copy() {
    return new ContentDeleted(this.len);
  }
  /**
   * @param {number} offset
   * @return {ContentDeleted}
   */
  splice(offset3) {
    const right2 = new ContentDeleted(this.len - offset3);
    this.len = offset3;
    return right2;
  }
  /**
   * @param {ContentDeleted} right
   * @return {boolean}
   */
  mergeWith(right2) {
    this.len += right2.len;
    return true;
  }
  /**
   * @param {Transaction} transaction
   * @param {Item} item
   */
  integrate(transaction, item) {
    addToDeleteSet(transaction.deleteSet, item.id.client, item.id.clock, this.len);
    item.markDeleted();
  }
  /**
   * @param {Transaction} transaction
   */
  delete(transaction) {
  }
  /**
   * @param {StructStore} store
   */
  gc(store) {
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    encoder.writeLen(this.len - offset3);
  }
  /**
   * @return {number}
   */
  getRef() {
    return 1;
  }
};
var createDocFromOpts = (guid, opts) => new Doc({ guid, ...opts, shouldLoad: opts.shouldLoad || opts.autoLoad || false });
var ContentDoc = class {
  /**
   * @param {Doc} doc
   */
  constructor(doc4) {
    if (doc4._item) {
      console.error("This document was already integrated as a sub-document. You should create a second instance instead with the same guid.");
    }
    this.doc = doc4;
    const opts = {};
    this.opts = opts;
    if (!doc4.gc) {
      opts.gc = false;
    }
    if (doc4.autoLoad) {
      opts.autoLoad = true;
    }
    if (doc4.meta !== null) {
      opts.meta = doc4.meta;
    }
  }
  /**
   * @return {number}
   */
  getLength() {
    return 1;
  }
  /**
   * @return {Array<any>}
   */
  getContent() {
    return [this.doc];
  }
  /**
   * @return {boolean}
   */
  isCountable() {
    return true;
  }
  /**
   * @return {ContentDoc}
   */
  copy() {
    return new ContentDoc(createDocFromOpts(this.doc.guid, this.opts));
  }
  /**
   * @param {number} offset
   * @return {ContentDoc}
   */
  splice(offset3) {
    throw methodUnimplemented();
  }
  /**
   * @param {ContentDoc} right
   * @return {boolean}
   */
  mergeWith(right2) {
    return false;
  }
  /**
   * @param {Transaction} transaction
   * @param {Item} item
   */
  integrate(transaction, item) {
    this.doc._item = item;
    transaction.subdocsAdded.add(this.doc);
    if (this.doc.shouldLoad) {
      transaction.subdocsLoaded.add(this.doc);
    }
  }
  /**
   * @param {Transaction} transaction
   */
  delete(transaction) {
    if (transaction.subdocsAdded.has(this.doc)) {
      transaction.subdocsAdded.delete(this.doc);
    } else {
      transaction.subdocsRemoved.add(this.doc);
    }
  }
  /**
   * @param {StructStore} store
   */
  gc(store) {
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    encoder.writeString(this.doc.guid);
    encoder.writeAny(this.opts);
  }
  /**
   * @return {number}
   */
  getRef() {
    return 9;
  }
};
var ContentEmbed = class {
  /**
   * @param {Object} embed
   */
  constructor(embed) {
    this.embed = embed;
  }
  /**
   * @return {number}
   */
  getLength() {
    return 1;
  }
  /**
   * @return {Array<any>}
   */
  getContent() {
    return [this.embed];
  }
  /**
   * @return {boolean}
   */
  isCountable() {
    return true;
  }
  /**
   * @return {ContentEmbed}
   */
  copy() {
    return new ContentEmbed(this.embed);
  }
  /**
   * @param {number} offset
   * @return {ContentEmbed}
   */
  splice(offset3) {
    throw methodUnimplemented();
  }
  /**
   * @param {ContentEmbed} right
   * @return {boolean}
   */
  mergeWith(right2) {
    return false;
  }
  /**
   * @param {Transaction} transaction
   * @param {Item} item
   */
  integrate(transaction, item) {
  }
  /**
   * @param {Transaction} transaction
   */
  delete(transaction) {
  }
  /**
   * @param {StructStore} store
   */
  gc(store) {
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    encoder.writeJSON(this.embed);
  }
  /**
   * @return {number}
   */
  getRef() {
    return 5;
  }
};
var ContentFormat = class {
  /**
   * @param {string} key
   * @param {Object} value
   */
  constructor(key2, value) {
    this.key = key2;
    this.value = value;
  }
  /**
   * @return {number}
   */
  getLength() {
    return 1;
  }
  /**
   * @return {Array<any>}
   */
  getContent() {
    return [];
  }
  /**
   * @return {boolean}
   */
  isCountable() {
    return false;
  }
  /**
   * @return {ContentFormat}
   */
  copy() {
    return new ContentFormat(this.key, this.value);
  }
  /**
   * @param {number} offset
   * @return {ContentFormat}
   */
  splice(offset3) {
    throw methodUnimplemented();
  }
  /**
   * @param {ContentFormat} right
   * @return {boolean}
   */
  mergeWith(right2) {
    return false;
  }
  /**
   * @param {Transaction} transaction
   * @param {Item} item
   */
  integrate(transaction, item) {
    item.parent._searchMarker = null;
  }
  /**
   * @param {Transaction} transaction
   */
  delete(transaction) {
  }
  /**
   * @param {StructStore} store
   */
  gc(store) {
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    encoder.writeKey(this.key);
    encoder.writeJSON(this.value);
  }
  /**
   * @return {number}
   */
  getRef() {
    return 6;
  }
};
var ContentAny = class {
  /**
   * @param {Array<any>} arr
   */
  constructor(arr) {
    this.arr = arr;
  }
  /**
   * @return {number}
   */
  getLength() {
    return this.arr.length;
  }
  /**
   * @return {Array<any>}
   */
  getContent() {
    return this.arr;
  }
  /**
   * @return {boolean}
   */
  isCountable() {
    return true;
  }
  /**
   * @return {ContentAny}
   */
  copy() {
    return new ContentAny(this.arr);
  }
  /**
   * @param {number} offset
   * @return {ContentAny}
   */
  splice(offset3) {
    const right2 = new ContentAny(this.arr.slice(offset3));
    this.arr = this.arr.slice(0, offset3);
    return right2;
  }
  /**
   * @param {ContentAny} right
   * @return {boolean}
   */
  mergeWith(right2) {
    this.arr = this.arr.concat(right2.arr);
    return true;
  }
  /**
   * @param {Transaction} transaction
   * @param {Item} item
   */
  integrate(transaction, item) {
  }
  /**
   * @param {Transaction} transaction
   */
  delete(transaction) {
  }
  /**
   * @param {StructStore} store
   */
  gc(store) {
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    const len = this.arr.length;
    encoder.writeLen(len - offset3);
    for (let i = offset3; i < len; i++) {
      const c = this.arr[i];
      encoder.writeAny(c);
    }
  }
  /**
   * @return {number}
   */
  getRef() {
    return 8;
  }
};
var ContentString = class {
  /**
   * @param {string} str
   */
  constructor(str) {
    this.str = str;
  }
  /**
   * @return {number}
   */
  getLength() {
    return this.str.length;
  }
  /**
   * @return {Array<any>}
   */
  getContent() {
    return this.str.split("");
  }
  /**
   * @return {boolean}
   */
  isCountable() {
    return true;
  }
  /**
   * @return {ContentString}
   */
  copy() {
    return new ContentString(this.str);
  }
  /**
   * @param {number} offset
   * @return {ContentString}
   */
  splice(offset3) {
    const right2 = new ContentString(this.str.slice(offset3));
    this.str = this.str.slice(0, offset3);
    const firstCharCode = this.str.charCodeAt(offset3 - 1);
    if (firstCharCode >= 55296 && firstCharCode <= 56319) {
      this.str = this.str.slice(0, offset3 - 1) + "�";
      right2.str = "�" + right2.str.slice(1);
    }
    return right2;
  }
  /**
   * @param {ContentString} right
   * @return {boolean}
   */
  mergeWith(right2) {
    this.str += right2.str;
    return true;
  }
  /**
   * @param {Transaction} transaction
   * @param {Item} item
   */
  integrate(transaction, item) {
  }
  /**
   * @param {Transaction} transaction
   */
  delete(transaction) {
  }
  /**
   * @param {StructStore} store
   */
  gc(store) {
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    encoder.writeString(offset3 === 0 ? this.str : this.str.slice(offset3));
  }
  /**
   * @return {number}
   */
  getRef() {
    return 4;
  }
};
var YArrayRefID = 0;
var YMapRefID = 1;
var YTextRefID = 2;
var YXmlElementRefID = 3;
var YXmlFragmentRefID = 4;
var YXmlTextRefID = 6;
var ContentType = class {
  /**
   * @param {AbstractType<any>} type
   */
  constructor(type) {
    this.type = type;
  }
  /**
   * @return {number}
   */
  getLength() {
    return 1;
  }
  /**
   * @return {Array<any>}
   */
  getContent() {
    return [this.type];
  }
  /**
   * @return {boolean}
   */
  isCountable() {
    return true;
  }
  /**
   * @return {ContentType}
   */
  copy() {
    return new ContentType(this.type._copy());
  }
  /**
   * @param {number} offset
   * @return {ContentType}
   */
  splice(offset3) {
    throw methodUnimplemented();
  }
  /**
   * @param {ContentType} right
   * @return {boolean}
   */
  mergeWith(right2) {
    return false;
  }
  /**
   * @param {Transaction} transaction
   * @param {Item} item
   */
  integrate(transaction, item) {
    this.type._integrate(transaction.doc, item);
  }
  /**
   * @param {Transaction} transaction
   */
  delete(transaction) {
    let item = this.type._start;
    while (item !== null) {
      if (!item.deleted) {
        item.delete(transaction);
      } else {
        transaction._mergeStructs.push(item);
      }
      item = item.right;
    }
    this.type._map.forEach((item2) => {
      if (!item2.deleted) {
        item2.delete(transaction);
      } else {
        transaction._mergeStructs.push(item2);
      }
    });
    transaction.changed.delete(this.type);
  }
  /**
   * @param {StructStore} store
   */
  gc(store) {
    let item = this.type._start;
    while (item !== null) {
      item.gc(store, true);
      item = item.right;
    }
    this.type._start = null;
    this.type._map.forEach(
      /** @param {Item | null} item */
      (item2) => {
        while (item2 !== null) {
          item2.gc(store, true);
          item2 = item2.left;
        }
      }
    );
    this.type._map = /* @__PURE__ */ new Map();
  }
  /**
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder
   * @param {number} offset
   */
  write(encoder, offset3) {
    this.type._write(encoder);
  }
  /**
   * @return {number}
   */
  getRef() {
    return 7;
  }
};
var followRedone = (store, id2) => {
  let nextID = id2;
  let diff2 = 0;
  let item;
  do {
    if (diff2 > 0) {
      nextID = createID(nextID.client, nextID.clock + diff2);
    }
    item = getItem(store, nextID);
    diff2 = nextID.clock - item.id.clock;
    nextID = item.redone;
  } while (nextID !== null && item instanceof Item);
  return {
    item,
    diff: diff2
  };
};
var keepItem = (item, keep) => {
  while (item !== null && item.keep !== keep) {
    item.keep = keep;
    item = /** @type {AbstractType<any>} */
    item.parent._item;
  }
};
var splitItem = (transaction, leftItem, diff2) => {
  const { client, clock } = leftItem.id;
  const rightItem = new Item(
    createID(client, clock + diff2),
    leftItem,
    createID(client, clock + diff2 - 1),
    leftItem.right,
    leftItem.rightOrigin,
    leftItem.parent,
    leftItem.parentSub,
    leftItem.content.splice(diff2)
  );
  if (leftItem.deleted) {
    rightItem.markDeleted();
  }
  if (leftItem.keep) {
    rightItem.keep = true;
  }
  if (leftItem.redone !== null) {
    rightItem.redone = createID(leftItem.redone.client, leftItem.redone.clock + diff2);
  }
  leftItem.right = rightItem;
  if (rightItem.right !== null) {
    rightItem.right.left = rightItem;
  }
  transaction._mergeStructs.push(rightItem);
  if (rightItem.parentSub !== null && rightItem.right === null) {
    rightItem.parent._map.set(rightItem.parentSub, rightItem);
  }
  leftItem.length = diff2;
  return rightItem;
};
var isDeletedByUndoStack = (stack, id2) => some(
  stack,
  /** @param {StackItem} s */
  (s2) => isDeleted(s2.deletions, id2)
);
var redoItem = (transaction, item, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) => {
  const doc4 = transaction.doc;
  const store = doc4.store;
  const ownClientID = doc4.clientID;
  const redone = item.redone;
  if (redone !== null) {
    return getItemCleanStart(transaction, redone);
  }
  let parentItem = (
    /** @type {AbstractType<any>} */
    item.parent._item
  );
  let left2 = null;
  let right2;
  if (parentItem !== null && parentItem.deleted === true) {
    if (parentItem.redone === null && (!redoitems.has(parentItem) || redoItem(transaction, parentItem, redoitems, itemsToDelete, ignoreRemoteMapChanges, um) === null)) {
      return null;
    }
    while (parentItem.redone !== null) {
      parentItem = getItemCleanStart(transaction, parentItem.redone);
    }
  }
  const parentType = parentItem === null ? (
    /** @type {AbstractType<any>} */
    item.parent
  ) : (
    /** @type {ContentType} */
    parentItem.content.type
  );
  if (item.parentSub === null) {
    left2 = item.left;
    right2 = item;
    while (left2 !== null) {
      let leftTrace = left2;
      while (leftTrace !== null && /** @type {AbstractType<any>} */
      leftTrace.parent._item !== parentItem) {
        leftTrace = leftTrace.redone === null ? null : getItemCleanStart(transaction, leftTrace.redone);
      }
      if (leftTrace !== null && /** @type {AbstractType<any>} */
      leftTrace.parent._item === parentItem) {
        left2 = leftTrace;
        break;
      }
      left2 = left2.left;
    }
    while (right2 !== null) {
      let rightTrace = right2;
      while (rightTrace !== null && /** @type {AbstractType<any>} */
      rightTrace.parent._item !== parentItem) {
        rightTrace = rightTrace.redone === null ? null : getItemCleanStart(transaction, rightTrace.redone);
      }
      if (rightTrace !== null && /** @type {AbstractType<any>} */
      rightTrace.parent._item === parentItem) {
        right2 = rightTrace;
        break;
      }
      right2 = right2.right;
    }
  } else {
    right2 = null;
    if (item.right && !ignoreRemoteMapChanges) {
      left2 = item;
      while (left2 !== null && left2.right !== null && (left2.right.redone || isDeleted(itemsToDelete, left2.right.id) || isDeletedByUndoStack(um.undoStack, left2.right.id) || isDeletedByUndoStack(um.redoStack, left2.right.id))) {
        left2 = left2.right;
        while (left2.redone)
          left2 = getItemCleanStart(transaction, left2.redone);
      }
      if (left2 && left2.right !== null) {
        return null;
      }
    } else {
      left2 = parentType._map.get(item.parentSub) || null;
    }
  }
  const nextClock = getState(store, ownClientID);
  const nextId = createID(ownClientID, nextClock);
  const redoneItem = new Item(
    nextId,
    left2,
    left2 && left2.lastId,
    right2,
    right2 && right2.id,
    parentType,
    item.parentSub,
    item.content.copy()
  );
  item.redone = nextId;
  keepItem(redoneItem, true);
  redoneItem.integrate(transaction, 0);
  return redoneItem;
};
var Item = class extends AbstractStruct {
  /**
   * @param {ID} id
   * @param {Item | null} left
   * @param {ID | null} origin
   * @param {Item | null} right
   * @param {ID | null} rightOrigin
   * @param {AbstractType<any>|ID|null} parent Is a type if integrated, is null if it is possible to copy parent from left or right, is ID before integration to search for it.
   * @param {string | null} parentSub
   * @param {AbstractContent} content
   */
  constructor(id2, left2, origin, right2, rightOrigin, parent, parentSub, content5) {
    super(id2, content5.getLength());
    this.origin = origin;
    this.left = left2;
    this.right = right2;
    this.rightOrigin = rightOrigin;
    this.parent = parent;
    this.parentSub = parentSub;
    this.redone = null;
    this.content = content5;
    this.info = this.content.isCountable() ? BIT2 : 0;
  }
  /**
   * This is used to mark the item as an indexed fast-search marker
   *
   * @type {boolean}
   */
  set marker(isMarked) {
    if ((this.info & BIT4) > 0 !== isMarked) {
      this.info ^= BIT4;
    }
  }
  get marker() {
    return (this.info & BIT4) > 0;
  }
  /**
   * If true, do not garbage collect this Item.
   */
  get keep() {
    return (this.info & BIT1) > 0;
  }
  set keep(doKeep) {
    if (this.keep !== doKeep) {
      this.info ^= BIT1;
    }
  }
  get countable() {
    return (this.info & BIT2) > 0;
  }
  /**
   * Whether this item was deleted or not.
   * @type {Boolean}
   */
  get deleted() {
    return (this.info & BIT3) > 0;
  }
  set deleted(doDelete) {
    if (this.deleted !== doDelete) {
      this.info ^= BIT3;
    }
  }
  markDeleted() {
    this.info |= BIT3;
  }
  /**
   * Return the creator clientID of the missing op or define missing items and return null.
   *
   * @param {Transaction} transaction
   * @param {StructStore} store
   * @return {null | number}
   */
  getMissing(transaction, store) {
    if (this.origin && this.origin.client !== this.id.client && this.origin.clock >= getState(store, this.origin.client)) {
      return this.origin.client;
    }
    if (this.rightOrigin && this.rightOrigin.client !== this.id.client && this.rightOrigin.clock >= getState(store, this.rightOrigin.client)) {
      return this.rightOrigin.client;
    }
    if (this.parent && this.parent.constructor === ID && this.id.client !== this.parent.client && this.parent.clock >= getState(store, this.parent.client)) {
      return this.parent.client;
    }
    if (this.origin) {
      this.left = getItemCleanEnd(transaction, store, this.origin);
      this.origin = this.left.lastId;
    }
    if (this.rightOrigin) {
      this.right = getItemCleanStart(transaction, this.rightOrigin);
      this.rightOrigin = this.right.id;
    }
    if (this.left && this.left.constructor === GC || this.right && this.right.constructor === GC) {
      this.parent = null;
    }
    if (!this.parent) {
      if (this.left && this.left.constructor === Item) {
        this.parent = this.left.parent;
        this.parentSub = this.left.parentSub;
      }
      if (this.right && this.right.constructor === Item) {
        this.parent = this.right.parent;
        this.parentSub = this.right.parentSub;
      }
    } else if (this.parent.constructor === ID) {
      const parentItem = getItem(store, this.parent);
      if (parentItem.constructor === GC) {
        this.parent = null;
      } else {
        this.parent = /** @type {ContentType} */
        parentItem.content.type;
      }
    }
    return null;
  }
  /**
   * @param {Transaction} transaction
   * @param {number} offset
   */
  integrate(transaction, offset3) {
    if (offset3 > 0) {
      this.id.clock += offset3;
      this.left = getItemCleanEnd(transaction, transaction.doc.store, createID(this.id.client, this.id.clock - 1));
      this.origin = this.left.lastId;
      this.content = this.content.splice(offset3);
      this.length -= offset3;
    }
    if (this.parent) {
      if (!this.left && (!this.right || this.right.left !== null) || this.left && this.left.right !== this.right) {
        let left2 = this.left;
        let o;
        if (left2 !== null) {
          o = left2.right;
        } else if (this.parentSub !== null) {
          o = /** @type {AbstractType<any>} */
          this.parent._map.get(this.parentSub) || null;
          while (o !== null && o.left !== null) {
            o = o.left;
          }
        } else {
          o = /** @type {AbstractType<any>} */
          this.parent._start;
        }
        const conflictingItems = /* @__PURE__ */ new Set();
        const itemsBeforeOrigin = /* @__PURE__ */ new Set();
        while (o !== null && o !== this.right) {
          itemsBeforeOrigin.add(o);
          conflictingItems.add(o);
          if (compareIDs(this.origin, o.origin)) {
            if (o.id.client < this.id.client) {
              left2 = o;
              conflictingItems.clear();
            } else if (compareIDs(this.rightOrigin, o.rightOrigin)) {
              break;
            }
          } else if (o.origin !== null && itemsBeforeOrigin.has(getItem(transaction.doc.store, o.origin))) {
            if (!conflictingItems.has(getItem(transaction.doc.store, o.origin))) {
              left2 = o;
              conflictingItems.clear();
            }
          } else {
            break;
          }
          o = o.right;
        }
        this.left = left2;
      }
      if (this.left !== null) {
        const right2 = this.left.right;
        this.right = right2;
        this.left.right = this;
      } else {
        let r;
        if (this.parentSub !== null) {
          r = /** @type {AbstractType<any>} */
          this.parent._map.get(this.parentSub) || null;
          while (r !== null && r.left !== null) {
            r = r.left;
          }
        } else {
          r = /** @type {AbstractType<any>} */
          this.parent._start;
          this.parent._start = this;
        }
        this.right = r;
      }
      if (this.right !== null) {
        this.right.left = this;
      } else if (this.parentSub !== null) {
        this.parent._map.set(this.parentSub, this);
        if (this.left !== null) {
          this.left.delete(transaction);
        }
      }
      if (this.parentSub === null && this.countable && !this.deleted) {
        this.parent._length += this.length;
      }
      addStruct(transaction.doc.store, this);
      this.content.integrate(transaction, this);
      addChangedTypeToTransaction(
        transaction,
        /** @type {AbstractType<any>} */
        this.parent,
        this.parentSub
      );
      if (
        /** @type {AbstractType<any>} */
        this.parent._item !== null && /** @type {AbstractType<any>} */
        this.parent._item.deleted || this.parentSub !== null && this.right !== null
      ) {
        this.delete(transaction);
      }
    } else {
      new GC(this.id, this.length).integrate(transaction, 0);
    }
  }
  /**
   * Returns the next non-deleted item
   */
  get next() {
    let n = this.right;
    while (n !== null && n.deleted) {
      n = n.right;
    }
    return n;
  }
  /**
   * Returns the previous non-deleted item
   */
  get prev() {
    let n = this.left;
    while (n !== null && n.deleted) {
      n = n.left;
    }
    return n;
  }
  /**
   * Computes the last content address of this Item.
   */
  get lastId() {
    return this.length === 1 ? this.id : createID(this.id.client, this.id.clock + this.length - 1);
  }
  /**
   * Try to merge two items
   *
   * @param {Item} right
   * @return {boolean}
   */
  mergeWith(right2) {
    if (this.constructor === right2.constructor && compareIDs(right2.origin, this.lastId) && this.right === right2 && compareIDs(this.rightOrigin, right2.rightOrigin) && this.id.client === right2.id.client && this.id.clock + this.length === right2.id.clock && this.deleted === right2.deleted && this.redone === null && right2.redone === null && this.content.constructor === right2.content.constructor && this.content.mergeWith(right2.content)) {
      const searchMarker = (
        /** @type {AbstractType<any>} */
        this.parent._searchMarker
      );
      if (searchMarker) {
        searchMarker.forEach((marker) => {
          if (marker.p === right2) {
            marker.p = this;
            if (!this.deleted && this.countable) {
              marker.index -= this.length;
            }
          }
        });
      }
      if (right2.keep) {
        this.keep = true;
      }
      this.right = right2.right;
      if (this.right !== null) {
        this.right.left = this;
      }
      this.length += right2.length;
      return true;
    }
    return false;
  }
  /**
   * Mark this Item as deleted.
   *
   * @param {Transaction} transaction
   */
  delete(transaction) {
    if (!this.deleted) {
      const parent = (
        /** @type {AbstractType<any>} */
        this.parent
      );
      if (this.countable && this.parentSub === null) {
        parent._length -= this.length;
      }
      this.markDeleted();
      addToDeleteSet(transaction.deleteSet, this.id.client, this.id.clock, this.length);
      addChangedTypeToTransaction(transaction, parent, this.parentSub);
      this.content.delete(transaction);
    }
  }
  /**
   * @param {StructStore} store
   * @param {boolean} parentGCd
   */
  gc(store, parentGCd) {
    if (!this.deleted) {
      throw unexpectedCase();
    }
    this.content.gc(store);
    if (parentGCd) {
      replaceStruct(store, this, new GC(this.id, this.length));
    } else {
      this.content = new ContentDeleted(this.length);
    }
  }
  /**
   * Transform the properties of this type to binary and write it to an
   * BinaryEncoder.
   *
   * This is called when this Item is sent to a remote peer.
   *
   * @param {UpdateEncoderV1 | UpdateEncoderV2} encoder The encoder to write data to.
   * @param {number} offset
   */
  write(encoder, offset3) {
    const origin = offset3 > 0 ? createID(this.id.client, this.id.clock + offset3 - 1) : this.origin;
    const rightOrigin = this.rightOrigin;
    const parentSub = this.parentSub;
    const info = this.content.getRef() & BITS5 | (origin === null ? 0 : BIT8) | // origin is defined
    (rightOrigin === null ? 0 : BIT7) | // right origin is defined
    (parentSub === null ? 0 : BIT6);
    encoder.writeInfo(info);
    if (origin !== null) {
      encoder.writeLeftID(origin);
    }
    if (rightOrigin !== null) {
      encoder.writeRightID(rightOrigin);
    }
    if (origin === null && rightOrigin === null) {
      const parent = (
        /** @type {AbstractType<any>} */
        this.parent
      );
      if (parent._item !== void 0) {
        const parentItem = parent._item;
        if (parentItem === null) {
          const ykey = findRootTypeKey(parent);
          encoder.writeParentInfo(true);
          encoder.writeString(ykey);
        } else {
          encoder.writeParentInfo(false);
          encoder.writeLeftID(parentItem.id);
        }
      } else if (parent.constructor === String) {
        encoder.writeParentInfo(true);
        encoder.writeString(parent);
      } else if (parent.constructor === ID) {
        encoder.writeParentInfo(false);
        encoder.writeLeftID(parent);
      } else {
        unexpectedCase();
      }
      if (parentSub !== null) {
        encoder.writeString(parentSub);
      }
    }
    this.content.write(encoder, offset3);
  }
};
var glo = (
  /** @type {any} */
  typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : {}
);
var importIdentifier = "__ $YJS$ __";
if (glo[importIdentifier] === true) {
  console.error("Yjs was already imported. This breaks constructor checks and will lead to issues! - https://github.com/yjs/yjs/issues/438");
}
glo[importIdentifier] = true;

// node_modules/lib0/mutex.js
var createMutex = () => {
  let token2 = true;
  return (f2, g2) => {
    if (token2) {
      token2 = false;
      try {
        f2();
      } finally {
        token2 = true;
      }
    } else if (g2 !== void 0) {
      g2();
    }
  };
};

// node_modules/lib0/diff.js
var highSurrogateRegex = /[\uD800-\uDBFF]/;
var lowSurrogateRegex = /[\uDC00-\uDFFF]/;
var simpleDiffString = (a2, b2) => {
  let left2 = 0;
  let right2 = 0;
  while (left2 < a2.length && left2 < b2.length && a2[left2] === b2[left2]) {
    left2++;
  }
  if (left2 > 0 && highSurrogateRegex.test(a2[left2 - 1]))
    left2--;
  while (right2 + left2 < a2.length && right2 + left2 < b2.length && a2[a2.length - right2 - 1] === b2[b2.length - right2 - 1]) {
    right2++;
  }
  if (right2 > 0 && lowSurrogateRegex.test(a2[a2.length - right2]))
    right2--;
  return {
    index: left2,
    remove: a2.length - left2 - right2,
    insert: b2.slice(left2, b2.length - right2)
  };
};
var simpleDiff = simpleDiffString;

// node_modules/y-prosemirror/src/plugins/keys.js
var ySyncPluginKey = new PluginKey("y-sync");
var yUndoPluginKey = new PluginKey("y-undo");
var yCursorPluginKey = new PluginKey("yjs-cursor");

// node_modules/y-prosemirror/src/plugins/sync-plugin.js
var isVisible2 = (item, snapshot2) => snapshot2 === void 0 ? !item.deleted : snapshot2.sv.has(item.id.client) && /** @type {number} */
snapshot2.sv.get(item.id.client) > item.id.clock && !isDeleted(snapshot2.ds, item.id);
var defaultColors = [{ light: "#ecd44433", dark: "#ecd444" }];
var getUserColor = (colorMapping, colors2, user) => {
  if (!colorMapping.has(user)) {
    if (colorMapping.size < colors2.length) {
      const usedColors = create3();
      colorMapping.forEach((color2) => usedColors.add(color2));
      colors2 = colors2.filter((color2) => !usedColors.has(color2));
    }
    colorMapping.set(user, oneOf(colors2));
  }
  return (
    /** @type {ColorDef} */
    colorMapping.get(user)
  );
};
var ySyncPlugin = (yXmlFragment, {
  colors: colors2 = defaultColors,
  colorMapping = /* @__PURE__ */ new Map(),
  permanentUserData = null,
  onFirstRender = () => {
  }
} = {}) => {
  let changedInitialContent = false;
  let rerenderTimeoutId;
  const plugin = new Plugin({
    props: {
      editable: (state) => {
        const syncState = ySyncPluginKey.getState(state);
        return syncState.snapshot == null && syncState.prevSnapshot == null;
      }
    },
    key: ySyncPluginKey,
    state: {
      init: (initargs, state) => {
        return {
          type: yXmlFragment,
          doc: yXmlFragment.doc,
          binding: null,
          snapshot: null,
          prevSnapshot: null,
          isChangeOrigin: false,
          colors: colors2,
          colorMapping,
          permanentUserData
        };
      },
      apply: (tr4, pluginState) => {
        const change = tr4.getMeta(ySyncPluginKey);
        if (change !== void 0) {
          pluginState = Object.assign({}, pluginState);
          for (const key2 in change) {
            pluginState[key2] = change[key2];
          }
        }
        pluginState.isChangeOrigin = change !== void 0 && !!change.isChangeOrigin;
        if (pluginState.binding !== null) {
          if (change !== void 0 && (change.snapshot != null || change.prevSnapshot != null)) {
            timeout(0, () => {
              if (pluginState.binding == null || pluginState.binding.isDestroyed) {
                return;
              }
              if (change.restore == null) {
                pluginState.binding._renderSnapshot(change.snapshot, change.prevSnapshot, pluginState);
              } else {
                pluginState.binding._renderSnapshot(change.snapshot, change.snapshot, pluginState);
                delete pluginState.restore;
                delete pluginState.snapshot;
                delete pluginState.prevSnapshot;
                pluginState.binding._prosemirrorChanged(pluginState.binding.prosemirrorView.state.doc);
              }
            });
          }
        }
        return pluginState;
      }
    },
    view: (view) => {
      const binding = new ProsemirrorBinding(yXmlFragment, view);
      if (rerenderTimeoutId != null) {
        clearTimeout(rerenderTimeoutId);
      }
      rerenderTimeoutId = timeout(0, () => {
        binding._forceRerender();
        view.dispatch(view.state.tr.setMeta(ySyncPluginKey, { binding }));
        onFirstRender();
      });
      return {
        update: () => {
          const pluginState = plugin.getState(view.state);
          if (pluginState.snapshot == null && pluginState.prevSnapshot == null) {
            if (changedInitialContent || view.state.doc.content.findDiffStart(view.state.doc.type.createAndFill().content) !== null) {
              changedInitialContent = true;
              binding._prosemirrorChanged(view.state.doc);
            }
          }
        },
        destroy: () => {
          clearTimeout(rerenderTimeoutId);
          binding.destroy();
        }
      };
    }
  });
  return plugin;
};
var restoreRelativeSelection = (tr4, relSel, binding) => {
  if (relSel !== null && relSel.anchor !== null && relSel.head !== null) {
    const anchor = relativePositionToAbsolutePosition(binding.doc, binding.type, relSel.anchor, binding.mapping);
    const head2 = relativePositionToAbsolutePosition(binding.doc, binding.type, relSel.head, binding.mapping);
    if (anchor !== null && head2 !== null) {
      tr4 = tr4.setSelection(TextSelection.create(tr4.doc, anchor, head2));
    }
  }
};
var getRelativeSelection = (pmbinding, state) => ({
  anchor: absolutePositionToRelativePosition(state.selection.anchor, pmbinding.type, pmbinding.mapping),
  head: absolutePositionToRelativePosition(state.selection.head, pmbinding.type, pmbinding.mapping)
});
var ProsemirrorBinding = class {
  /**
   * @param {Y.XmlFragment} yXmlFragment The bind source
   * @param {any} prosemirrorView The target binding
   */
  constructor(yXmlFragment, prosemirrorView) {
    this.type = yXmlFragment;
    this.prosemirrorView = prosemirrorView;
    this.mux = createMutex();
    this.isDestroyed = false;
    this.mapping = /* @__PURE__ */ new Map();
    this._observeFunction = this._typeChanged.bind(this);
    this.doc = yXmlFragment.doc;
    this.beforeTransactionSelection = null;
    this.beforeAllTransactions = () => {
      if (this.beforeTransactionSelection === null) {
        this.beforeTransactionSelection = getRelativeSelection(this, prosemirrorView.state);
      }
    };
    this.afterAllTransactions = () => {
      this.beforeTransactionSelection = null;
    };
    this.doc.on("beforeAllTransactions", this.beforeAllTransactions);
    this.doc.on("afterAllTransactions", this.afterAllTransactions);
    yXmlFragment.observeDeep(this._observeFunction);
    this._domSelectionInView = null;
  }
  /**
   * Create a transaction for changing the prosemirror state.
   *
   * @returns
   */
  get _tr() {
    return this.prosemirrorView.state.tr.setMeta("addToHistory", false);
  }
  _isLocalCursorInView() {
    if (!this.prosemirrorView.hasFocus())
      return false;
    if (isBrowser5 && this._domSelectionInView === null) {
      timeout(0, () => {
        this._domSelectionInView = null;
      });
      this._domSelectionInView = this._isDomSelectionInView();
    }
    return this._domSelectionInView;
  }
  _isDomSelectionInView() {
    const selection = this.prosemirrorView._root.getSelection();
    const range2 = this.prosemirrorView._root.createRange();
    range2.setStart(selection.anchorNode, selection.anchorOffset);
    range2.setEnd(selection.focusNode, selection.focusOffset);
    const rects = range2.getClientRects();
    if (rects.length === 0) {
      if (range2.startContainer && range2.collapsed) {
        range2.selectNodeContents(range2.startContainer);
      }
    }
    const bounding = range2.getBoundingClientRect();
    const documentElement = doc3.documentElement;
    return bounding.bottom >= 0 && bounding.right >= 0 && bounding.left <= (window.innerWidth || documentElement.clientWidth || 0) && bounding.top <= (window.innerHeight || documentElement.clientHeight || 0);
  }
  renderSnapshot(snapshot2, prevSnapshot) {
    if (!prevSnapshot) {
      prevSnapshot = createSnapshot(createDeleteSet(), /* @__PURE__ */ new Map());
    }
    this.prosemirrorView.dispatch(this._tr.setMeta(ySyncPluginKey, { snapshot: snapshot2, prevSnapshot }));
  }
  unrenderSnapshot() {
    this.mapping = /* @__PURE__ */ new Map();
    this.mux(() => {
      const fragmentContent = this.type.toArray().map((t) => createNodeFromYElement(
        /** @type {Y.XmlElement} */
        t,
        this.prosemirrorView.state.schema,
        this.mapping
      )).filter((n) => n !== null);
      const tr4 = this._tr.replace(0, this.prosemirrorView.state.doc.content.size, new Slice(new Fragment(fragmentContent), 0, 0));
      tr4.setMeta(ySyncPluginKey, { snapshot: null, prevSnapshot: null });
      this.prosemirrorView.dispatch(tr4);
    });
  }
  _forceRerender() {
    this.mapping = /* @__PURE__ */ new Map();
    this.mux(() => {
      const fragmentContent = this.type.toArray().map((t) => createNodeFromYElement(
        /** @type {Y.XmlElement} */
        t,
        this.prosemirrorView.state.schema,
        this.mapping
      )).filter((n) => n !== null);
      const tr4 = this._tr.replace(0, this.prosemirrorView.state.doc.content.size, new Slice(new Fragment(fragmentContent), 0, 0));
      this.prosemirrorView.dispatch(tr4.setMeta(ySyncPluginKey, { isChangeOrigin: true }));
    });
  }
  /**
   * @param {Y.Snapshot} snapshot
   * @param {Y.Snapshot} prevSnapshot
   * @param {Object} pluginState
   */
  _renderSnapshot(snapshot2, prevSnapshot, pluginState) {
    if (!snapshot2) {
      snapshot2 = snapshot(this.doc);
    }
    this.mapping = /* @__PURE__ */ new Map();
    this.mux(() => {
      this.doc.transact((transaction) => {
        const pud = pluginState.permanentUserData;
        if (pud) {
          pud.dss.forEach((ds) => {
            iterateDeletedStructs(transaction, ds, (item) => {
            });
          });
        }
        const computeYChange = (type, id2) => {
          const user = type === "added" ? pud.getUserByClientId(id2.client) : pud.getUserByDeletedId(id2);
          return {
            user,
            type,
            color: getUserColor(pluginState.colorMapping, pluginState.colors, user)
          };
        };
        const fragmentContent = typeListToArraySnapshot(this.type, new Snapshot(prevSnapshot.ds, snapshot2.sv)).map((t) => {
          if (!t._item.deleted || isVisible2(t._item, snapshot2) || isVisible2(t._item, prevSnapshot)) {
            return createNodeFromYElement(t, this.prosemirrorView.state.schema, /* @__PURE__ */ new Map(), snapshot2, prevSnapshot, computeYChange);
          } else {
            return null;
          }
        }).filter((n) => n !== null);
        const tr4 = this._tr.replace(0, this.prosemirrorView.state.doc.content.size, new Slice(new Fragment(fragmentContent), 0, 0));
        this.prosemirrorView.dispatch(tr4.setMeta(ySyncPluginKey, { isChangeOrigin: true }));
      }, ySyncPluginKey);
    });
  }
  /**
   * @param {Array<Y.YEvent<any>>} events
   * @param {Y.Transaction} transaction
   */
  _typeChanged(events, transaction) {
    const syncState = ySyncPluginKey.getState(this.prosemirrorView.state);
    if (events.length === 0 || syncState.snapshot != null || syncState.prevSnapshot != null) {
      this.renderSnapshot(syncState.snapshot, syncState.prevSnapshot);
      return;
    }
    this.mux(() => {
      const delType = (_2, type) => this.mapping.delete(type);
      iterateDeletedStructs(transaction, transaction.deleteSet, (struct) => struct.constructor === Item && this.mapping.delete(
        /** @type {Y.ContentType} */
        /** @type {Y.Item} */
        struct.content.type
      ));
      transaction.changed.forEach(delType);
      transaction.changedParentTypes.forEach(delType);
      const fragmentContent = this.type.toArray().map((t) => createNodeIfNotExists(
        /** @type {Y.XmlElement | Y.XmlHook} */
        t,
        this.prosemirrorView.state.schema,
        this.mapping
      )).filter((n) => n !== null);
      let tr4 = this._tr.replace(0, this.prosemirrorView.state.doc.content.size, new Slice(new Fragment(fragmentContent), 0, 0));
      restoreRelativeSelection(tr4, this.beforeTransactionSelection, this);
      tr4 = tr4.setMeta(ySyncPluginKey, { isChangeOrigin: true });
      if (this.beforeTransactionSelection !== null && this._isLocalCursorInView()) {
        tr4.scrollIntoView();
      }
      this.prosemirrorView.dispatch(tr4);
    });
  }
  _prosemirrorChanged(doc4) {
    this.mux(() => {
      this.doc.transact(() => {
        updateYFragment(this.doc, this.type, doc4, this.mapping);
        this.beforeTransactionSelection = getRelativeSelection(this, this.prosemirrorView.state);
      }, ySyncPluginKey);
    });
  }
  destroy() {
    this.isDestroyed = true;
    this.type.unobserveDeep(this._observeFunction);
    this.doc.off("beforeAllTransactions", this.beforeAllTransactions);
    this.doc.off("afterAllTransactions", this.afterAllTransactions);
  }
};
var createNodeIfNotExists = (el, schema, mapping, snapshot2, prevSnapshot, computeYChange) => {
  const node4 = (
    /** @type {PModel.Node} */
    mapping.get(el)
  );
  if (node4 === void 0) {
    if (el instanceof YXmlElement) {
      return createNodeFromYElement(el, schema, mapping, snapshot2, prevSnapshot, computeYChange);
    } else {
      throw methodUnimplemented();
    }
  }
  return node4;
};
var createNodeFromYElement = (el, schema, mapping, snapshot2, prevSnapshot, computeYChange) => {
  const children = [];
  const createChildren = (type) => {
    if (type.constructor === YXmlElement) {
      const n = createNodeIfNotExists(type, schema, mapping, snapshot2, prevSnapshot, computeYChange);
      if (n !== null) {
        children.push(n);
      }
    } else {
      const ns = createTextNodesFromYText(type, schema, mapping, snapshot2, prevSnapshot, computeYChange);
      if (ns !== null) {
        ns.forEach((textchild) => {
          if (textchild !== null) {
            children.push(textchild);
          }
        });
      }
    }
  };
  if (snapshot2 === void 0 || prevSnapshot === void 0) {
    el.toArray().forEach(createChildren);
  } else {
    typeListToArraySnapshot(el, new Snapshot(prevSnapshot.ds, snapshot2.sv)).forEach(createChildren);
  }
  try {
    const attrs = el.getAttributes(snapshot2);
    if (snapshot2 !== void 0) {
      if (!isVisible2(
        /** @type {Y.Item} */
        el._item,
        snapshot2
      )) {
        attrs.ychange = computeYChange ? computeYChange(
          "removed",
          /** @type {Y.Item} */
          el._item.id
        ) : { type: "removed" };
      } else if (!isVisible2(
        /** @type {Y.Item} */
        el._item,
        prevSnapshot
      )) {
        attrs.ychange = computeYChange ? computeYChange(
          "added",
          /** @type {Y.Item} */
          el._item.id
        ) : { type: "added" };
      }
    }
    const node4 = schema.node(el.nodeName, attrs, children);
    mapping.set(el, node4);
    return node4;
  } catch (e) {
    el.doc.transact((transaction) => {
      el._item.delete(transaction);
    }, ySyncPluginKey);
    mapping.delete(el);
    return null;
  }
};
var createTextNodesFromYText = (text10, schema, mapping, snapshot2, prevSnapshot, computeYChange) => {
  const nodes = [];
  const deltas = text10.toDelta(snapshot2, prevSnapshot, computeYChange);
  try {
    for (let i = 0; i < deltas.length; i++) {
      const delta = deltas[i];
      const marks = [];
      for (const markName in delta.attributes) {
        marks.push(schema.mark(markName, delta.attributes[markName]));
      }
      nodes.push(schema.text(delta.insert, marks));
    }
  } catch (e) {
    text10.doc.transact((transaction) => {
      text10._item.delete(transaction);
    }, ySyncPluginKey);
    return null;
  }
  return nodes;
};
var createTypeFromTextNodes = (nodes, mapping) => {
  const type = new YXmlText();
  const delta = nodes.map((node4) => ({
    // @ts-ignore
    insert: node4.text,
    attributes: marksToAttributes(node4.marks)
  }));
  type.applyDelta(delta);
  mapping.set(type, nodes);
  return type;
};
var createTypeFromElementNode = (node4, mapping) => {
  const type = new YXmlElement(node4.type.name);
  for (const key2 in node4.attrs) {
    const val = node4.attrs[key2];
    if (val !== null && key2 !== "ychange") {
      type.setAttribute(key2, val);
    }
  }
  type.insert(0, normalizePNodeContent(node4).map((n) => createTypeFromTextOrElementNode(n, mapping)));
  mapping.set(type, node4);
  return type;
};
var createTypeFromTextOrElementNode = (node4, mapping) => node4 instanceof Array ? createTypeFromTextNodes(node4, mapping) : createTypeFromElementNode(node4, mapping);
var isObject = (val) => typeof val === "object" && val !== null;
var equalAttrs2 = (pattrs, yattrs) => {
  const keys5 = Object.keys(pattrs).filter((key2) => pattrs[key2] !== null);
  let eq = keys5.length === Object.keys(yattrs).filter((key2) => yattrs[key2] !== null).length;
  for (let i = 0; i < keys5.length && eq; i++) {
    const key2 = keys5[i];
    const l = pattrs[key2];
    const r = yattrs[key2];
    eq = key2 === "ychange" || l === r || isObject(l) && isObject(r) && equalAttrs2(l, r);
  }
  return eq;
};
var normalizePNodeContent = (pnode) => {
  const c = pnode.content.content;
  const res = [];
  for (let i = 0; i < c.length; i++) {
    const n = c[i];
    if (n.isText) {
      const textNodes = [];
      for (let tnode = c[i]; i < c.length && tnode.isText; tnode = c[++i]) {
        textNodes.push(tnode);
      }
      i--;
      res.push(textNodes);
    } else {
      res.push(n);
    }
  }
  return res;
};
var equalYTextPText = (ytext, ptexts) => {
  const delta = ytext.toDelta();
  return delta.length === ptexts.length && delta.every((d, i) => d.insert === /** @type {any} */
  ptexts[i].text && keys4(d.attributes || {}).length === ptexts[i].marks.length && ptexts[i].marks.every((mark2) => equalAttrs2(d.attributes[mark2.type.name] || {}, mark2.attrs)));
};
var equalYTypePNode = (ytype, pnode) => {
  if (ytype instanceof YXmlElement && !(pnode instanceof Array) && matchNodeName(ytype, pnode)) {
    const normalizedContent = normalizePNodeContent(pnode);
    return ytype._length === normalizedContent.length && equalAttrs2(ytype.getAttributes(), pnode.attrs) && ytype.toArray().every((ychild, i) => equalYTypePNode(ychild, normalizedContent[i]));
  }
  return ytype instanceof YXmlText && pnode instanceof Array && equalYTextPText(ytype, pnode);
};
var mappedIdentity = (mapped, pcontent) => mapped === pcontent || mapped instanceof Array && pcontent instanceof Array && mapped.length === pcontent.length && mapped.every((a2, i) => pcontent[i] === a2);
var computeChildEqualityFactor = (ytype, pnode, mapping) => {
  const yChildren = ytype.toArray();
  const pChildren = normalizePNodeContent(pnode);
  const pChildCnt = pChildren.length;
  const yChildCnt = yChildren.length;
  const minCnt = min4(yChildCnt, pChildCnt);
  let left2 = 0;
  let right2 = 0;
  let foundMappedChild = false;
  for (; left2 < minCnt; left2++) {
    const leftY = yChildren[left2];
    const leftP = pChildren[left2];
    if (mappedIdentity(mapping.get(leftY), leftP)) {
      foundMappedChild = true;
    } else if (!equalYTypePNode(leftY, leftP)) {
      break;
    }
  }
  for (; left2 + right2 < minCnt; right2++) {
    const rightY = yChildren[yChildCnt - right2 - 1];
    const rightP = pChildren[pChildCnt - right2 - 1];
    if (mappedIdentity(mapping.get(rightY), rightP)) {
      foundMappedChild = true;
    } else if (!equalYTypePNode(rightY, rightP)) {
      break;
    }
  }
  return {
    equalityFactor: left2 + right2,
    foundMappedChild
  };
};
var ytextTrans = (ytext) => {
  let str = "";
  let n = ytext._start;
  const nAttrs = {};
  while (n !== null) {
    if (!n.deleted) {
      if (n.countable && n.content instanceof ContentString) {
        str += n.content.str;
      } else if (n.content instanceof ContentFormat) {
        nAttrs[n.content.key] = null;
      }
    }
    n = n.right;
  }
  return {
    str,
    nAttrs
  };
};
var updateYText = (ytext, ptexts, mapping) => {
  mapping.set(ytext, ptexts);
  const { nAttrs, str } = ytextTrans(ytext);
  const content5 = ptexts.map((p5) => ({ insert: (
    /** @type {any} */
    p5.text
  ), attributes: Object.assign({}, nAttrs, marksToAttributes(p5.marks)) }));
  const { insert, remove, index: index7 } = simpleDiff(str, content5.map((c) => c.insert).join(""));
  ytext.delete(index7, remove);
  ytext.insert(index7, insert);
  ytext.applyDelta(content5.map((c) => ({ retain: c.insert.length, attributes: c.attributes })));
};
var marksToAttributes = (marks) => {
  const pattrs = {};
  marks.forEach((mark2) => {
    if (mark2.type.name !== "ychange") {
      pattrs[mark2.type.name] = mark2.attrs;
    }
  });
  return pattrs;
};
var updateYFragment = (y, yDomFragment, pNode, mapping) => {
  if (yDomFragment instanceof YXmlElement && yDomFragment.nodeName !== pNode.type.name) {
    throw new Error("node name mismatch!");
  }
  mapping.set(yDomFragment, pNode);
  if (yDomFragment instanceof YXmlElement) {
    const yDomAttrs = yDomFragment.getAttributes();
    const pAttrs = pNode.attrs;
    for (const key2 in pAttrs) {
      if (pAttrs[key2] !== null) {
        if (yDomAttrs[key2] !== pAttrs[key2] && key2 !== "ychange") {
          yDomFragment.setAttribute(key2, pAttrs[key2]);
        }
      } else {
        yDomFragment.removeAttribute(key2);
      }
    }
    for (const key2 in yDomAttrs) {
      if (pAttrs[key2] === void 0) {
        yDomFragment.removeAttribute(key2);
      }
    }
  }
  const pChildren = normalizePNodeContent(pNode);
  const pChildCnt = pChildren.length;
  const yChildren = yDomFragment.toArray();
  const yChildCnt = yChildren.length;
  const minCnt = min4(pChildCnt, yChildCnt);
  let left2 = 0;
  let right2 = 0;
  for (; left2 < minCnt; left2++) {
    const leftY = yChildren[left2];
    const leftP = pChildren[left2];
    if (!mappedIdentity(mapping.get(leftY), leftP)) {
      if (equalYTypePNode(leftY, leftP)) {
        mapping.set(leftY, leftP);
      } else {
        break;
      }
    }
  }
  for (; right2 + left2 + 1 < minCnt; right2++) {
    const rightY = yChildren[yChildCnt - right2 - 1];
    const rightP = pChildren[pChildCnt - right2 - 1];
    if (!mappedIdentity(mapping.get(rightY), rightP)) {
      if (equalYTypePNode(rightY, rightP)) {
        mapping.set(rightY, rightP);
      } else {
        break;
      }
    }
  }
  y.transact(() => {
    while (yChildCnt - left2 - right2 > 0 && pChildCnt - left2 - right2 > 0) {
      const leftY = yChildren[left2];
      const leftP = pChildren[left2];
      const rightY = yChildren[yChildCnt - right2 - 1];
      const rightP = pChildren[pChildCnt - right2 - 1];
      if (leftY instanceof YXmlText && leftP instanceof Array) {
        if (!equalYTextPText(leftY, leftP)) {
          updateYText(leftY, leftP, mapping);
        }
        left2 += 1;
      } else {
        let updateLeft = leftY instanceof YXmlElement && matchNodeName(leftY, leftP);
        let updateRight = rightY instanceof YXmlElement && matchNodeName(rightY, rightP);
        if (updateLeft && updateRight) {
          const equalityLeft = computeChildEqualityFactor(
            /** @type {Y.XmlElement} */
            leftY,
            /** @type {PModel.Node} */
            leftP,
            mapping
          );
          const equalityRight = computeChildEqualityFactor(
            /** @type {Y.XmlElement} */
            rightY,
            /** @type {PModel.Node} */
            rightP,
            mapping
          );
          if (equalityLeft.foundMappedChild && !equalityRight.foundMappedChild) {
            updateRight = false;
          } else if (!equalityLeft.foundMappedChild && equalityRight.foundMappedChild) {
            updateLeft = false;
          } else if (equalityLeft.equalityFactor < equalityRight.equalityFactor) {
            updateLeft = false;
          } else {
            updateRight = false;
          }
        }
        if (updateLeft) {
          updateYFragment(
            y,
            /** @type {Y.XmlFragment} */
            leftY,
            /** @type {PModel.Node} */
            leftP,
            mapping
          );
          left2 += 1;
        } else if (updateRight) {
          updateYFragment(
            y,
            /** @type {Y.XmlFragment} */
            rightY,
            /** @type {PModel.Node} */
            rightP,
            mapping
          );
          right2 += 1;
        } else {
          yDomFragment.delete(left2, 1);
          yDomFragment.insert(left2, [createTypeFromTextOrElementNode(leftP, mapping)]);
          left2 += 1;
        }
      }
    }
    const yDelLen = yChildCnt - left2 - right2;
    if (yChildCnt === 1 && pChildCnt === 0 && yChildren[0] instanceof YXmlText) {
      yChildren[0].delete(0, yChildren[0].length);
    } else if (yDelLen > 0) {
      yDomFragment.delete(left2, yDelLen);
    }
    if (left2 + right2 < pChildCnt) {
      const ins = [];
      for (let i = left2; i < pChildCnt - right2; i++) {
        ins.push(createTypeFromTextOrElementNode(pChildren[i], mapping));
      }
      yDomFragment.insert(left2, ins);
    }
  }, ySyncPluginKey);
};
var matchNodeName = (yElement, pNode) => !(pNode instanceof Array) && yElement.nodeName === pNode.type.name;

// node_modules/y-prosemirror/src/lib.js
var viewsToUpdate = null;
var updateMetas = () => {
  const ups = (
    /** @type {Map<EditorView, Map<any, any>>} */
    viewsToUpdate
  );
  viewsToUpdate = null;
  ups.forEach((metas, view) => {
    const tr4 = view.state.tr;
    const syncState = ySyncPluginKey.getState(view.state);
    if (syncState && syncState.binding && !syncState.binding.isDestroyed) {
      metas.forEach((val, key2) => {
        tr4.setMeta(key2, val);
      });
      view.dispatch(tr4);
    }
  });
};
var setMeta2 = (view, key2, value) => {
  if (!viewsToUpdate) {
    viewsToUpdate = /* @__PURE__ */ new Map();
    timeout(0, updateMetas);
  }
  setIfUndefined(viewsToUpdate, view, create2).set(key2, value);
};
var absolutePositionToRelativePosition = (pos, type, mapping) => {
  if (pos === 0) {
    return createRelativePositionFromTypeIndex(type, 0);
  }
  let n = type._first === null ? null : (
    /** @type {Y.ContentType} */
    type._first.content.type
  );
  while (n !== null && type !== n) {
    if (n instanceof YXmlText) {
      if (n._length >= pos) {
        return createRelativePositionFromTypeIndex(n, pos);
      } else {
        pos -= n._length;
      }
      if (n._item !== null && n._item.next !== null) {
        n = /** @type {Y.ContentType} */
        n._item.next.content.type;
      } else {
        do {
          n = n._item === null ? null : n._item.parent;
          pos--;
        } while (n !== type && n !== null && n._item !== null && n._item.next === null);
        if (n !== null && n !== type) {
          n = n._item === null ? null : (
            /** @type {Y.ContentType} */
            /** @type Y.Item */
            n._item.next.content.type
          );
        }
      }
    } else {
      const pNodeSize = (
        /** @type {any} */
        (mapping.get(n) || { nodeSize: 0 }).nodeSize
      );
      if (n._first !== null && pos < pNodeSize) {
        n = /** @type {Y.ContentType} */
        n._first.content.type;
        pos--;
      } else {
        if (pos === 1 && n._length === 0 && pNodeSize > 1) {
          return new RelativePosition(n._item === null ? null : n._item.id, n._item === null ? findRootTypeKey(n) : null, null);
        }
        pos -= pNodeSize;
        if (n._item !== null && n._item.next !== null) {
          n = /** @type {Y.ContentType} */
          n._item.next.content.type;
        } else {
          if (pos === 0) {
            n = n._item === null ? n : n._item.parent;
            return new RelativePosition(n._item === null ? null : n._item.id, n._item === null ? findRootTypeKey(n) : null, null);
          }
          do {
            n = /** @type {Y.Item} */
            n._item.parent;
            pos--;
          } while (n !== type && /** @type {Y.Item} */
          n._item.next === null);
          if (n !== type) {
            n = /** @type {Y.ContentType} */
            /** @type {Y.Item} */
            /** @type {Y.Item} */
            n._item.next.content.type;
          }
        }
      }
    }
    if (n === null) {
      throw unexpectedCase();
    }
    if (pos === 0 && n.constructor !== YXmlText && n !== type) {
      return createRelativePosition2(n._item.parent, n._item);
    }
  }
  return createRelativePositionFromTypeIndex(type, type._length);
};
var createRelativePosition2 = (type, item) => {
  let typeid = null;
  let tname = null;
  if (type._item === null) {
    tname = findRootTypeKey(type);
  } else {
    typeid = createID(type._item.id.client, type._item.id.clock);
  }
  return new RelativePosition(typeid, tname, item.id);
};
var relativePositionToAbsolutePosition = (y, documentType, relPos, mapping) => {
  const decodedPos = createAbsolutePositionFromRelativePosition(relPos, y);
  if (decodedPos === null || decodedPos.type !== documentType && !isParentOf(documentType, decodedPos.type._item)) {
    return null;
  }
  let type = decodedPos.type;
  let pos = 0;
  if (type.constructor === YXmlText) {
    pos = decodedPos.index;
  } else if (type._item === null || !type._item.deleted) {
    let n = type._first;
    let i = 0;
    while (i < type._length && i < decodedPos.index && n !== null) {
      if (!n.deleted) {
        const t = (
          /** @type {Y.ContentType} */
          n.content.type
        );
        i++;
        if (t instanceof YXmlText) {
          pos += t._length;
        } else {
          pos += /** @type {any} */
          mapping.get(t).nodeSize;
        }
      }
      n = /** @type {Y.Item} */
      n.right;
    }
    pos += 1;
  }
  while (type !== documentType && type._item !== null) {
    const parent = type._item.parent;
    if (parent._item === null || !parent._item.deleted) {
      pos += 1;
      let n = (
        /** @type {Y.AbstractType} */
        parent._first
      );
      while (n !== null) {
        const contentType = (
          /** @type {Y.ContentType} */
          n.content.type
        );
        if (contentType === type) {
          break;
        }
        if (!n.deleted) {
          if (contentType instanceof YXmlText) {
            pos += contentType._length;
          } else {
            pos += /** @type {any} */
            mapping.get(contentType).nodeSize;
          }
        }
        n = n.right;
      }
    }
    type = /** @type {Y.AbstractType} */
    parent;
  }
  return pos - 1;
};

// node_modules/y-prosemirror/src/plugins/cursor-plugin.js
var defaultCursorBuilder = (user) => {
  const cursor2 = document.createElement("span");
  cursor2.classList.add("ProseMirror-yjs-cursor");
  cursor2.setAttribute("style", `border-color: ${user.color}`);
  const userDiv = document.createElement("div");
  userDiv.setAttribute("style", `background-color: ${user.color}`);
  userDiv.insertBefore(document.createTextNode(user.name), null);
  const nonbreakingSpace1 = document.createTextNode("⁠");
  const nonbreakingSpace2 = document.createTextNode("⁠");
  cursor2.insertBefore(nonbreakingSpace1, null);
  cursor2.insertBefore(userDiv, null);
  cursor2.insertBefore(nonbreakingSpace2, null);
  return cursor2;
};
var defaultSelectionBuilder = (user) => {
  return {
    style: `background-color: ${user.color}70`,
    class: `ProseMirror-yjs-selection`
  };
};
var rxValidColor = /^#[0-9a-fA-F]{6}$/;
var createDecorations = (state, awareness, createCursor, createSelection) => {
  const ystate = ySyncPluginKey.getState(state);
  const y = ystate.doc;
  const decorations = [];
  if (ystate.snapshot != null || ystate.prevSnapshot != null || ystate.binding === null) {
    return DecorationSet.create(state.doc, []);
  }
  awareness.getStates().forEach((aw, clientId) => {
    if (clientId === y.clientID) {
      return;
    }
    if (aw.cursor != null) {
      const user = aw.user || {};
      if (user.color == null) {
        user.color = "#ffa500";
      } else if (!rxValidColor.test(user.color)) {
        console.warn("A user uses an unsupported color format", user);
      }
      if (user.name == null) {
        user.name = `User: ${clientId}`;
      }
      let anchor = relativePositionToAbsolutePosition(y, ystate.type, createRelativePositionFromJSON(aw.cursor.anchor), ystate.binding.mapping);
      let head2 = relativePositionToAbsolutePosition(y, ystate.type, createRelativePositionFromJSON(aw.cursor.head), ystate.binding.mapping);
      if (anchor !== null && head2 !== null) {
        const maxsize = max4(state.doc.content.size - 1, 0);
        anchor = min4(anchor, maxsize);
        head2 = min4(head2, maxsize);
        decorations.push(Decoration.widget(head2, () => createCursor(user), { key: clientId + "", side: 10 }));
        const from5 = min4(anchor, head2);
        const to3 = max4(anchor, head2);
        decorations.push(Decoration.inline(from5, to3, createSelection(user), { inclusiveEnd: true, inclusiveStart: false }));
      }
    }
  });
  return DecorationSet.create(state.doc, decorations);
};
var yCursorPlugin = (awareness, { cursorBuilder = defaultCursorBuilder, selectionBuilder = defaultSelectionBuilder, getSelection: getSelection2 = (state) => state.selection } = {}, cursorStateField = "cursor") => new Plugin({
  key: yCursorPluginKey,
  state: {
    init(_2, state) {
      return createDecorations(state, awareness, cursorBuilder, selectionBuilder);
    },
    apply(tr4, prevState, oldState, newState) {
      const ystate = ySyncPluginKey.getState(newState);
      const yCursorState = tr4.getMeta(yCursorPluginKey);
      if (ystate && ystate.isChangeOrigin || yCursorState && yCursorState.awarenessUpdated) {
        return createDecorations(newState, awareness, cursorBuilder, selectionBuilder);
      }
      return prevState.map(tr4.mapping, tr4.doc);
    }
  },
  props: {
    decorations: (state) => {
      return yCursorPluginKey.getState(state);
    }
  },
  view: (view) => {
    const awarenessListener = () => {
      if (view.docView) {
        setMeta2(view, yCursorPluginKey, { awarenessUpdated: true });
      }
    };
    const updateCursorInfo = () => {
      const ystate = ySyncPluginKey.getState(view.state);
      const current = awareness.getLocalState() || {};
      if (ystate.binding == null) {
        return;
      }
      if (view.hasFocus()) {
        const selection = getSelection2(view.state);
        const anchor = absolutePositionToRelativePosition(selection.anchor, ystate.type, ystate.binding.mapping);
        const head2 = absolutePositionToRelativePosition(selection.head, ystate.type, ystate.binding.mapping);
        if (current.cursor == null || !compareRelativePositions(createRelativePositionFromJSON(current.cursor.anchor), anchor) || !compareRelativePositions(createRelativePositionFromJSON(current.cursor.head), head2)) {
          awareness.setLocalStateField(cursorStateField, {
            anchor,
            head: head2
          });
        }
      } else if (current.cursor != null && relativePositionToAbsolutePosition(ystate.doc, ystate.type, createRelativePositionFromJSON(current.cursor.anchor), ystate.binding.mapping) !== null) {
        awareness.setLocalStateField(cursorStateField, null);
      }
    };
    awareness.on("change", awarenessListener);
    view.dom.addEventListener("focusin", updateCursorInfo);
    view.dom.addEventListener("focusout", updateCursorInfo);
    return {
      update: updateCursorInfo,
      destroy: () => {
        view.dom.removeEventListener("focusin", updateCursorInfo);
        view.dom.removeEventListener("focusout", updateCursorInfo);
        awareness.off("change", awarenessListener);
        awareness.setLocalStateField(cursorStateField, null);
      }
    };
  }
});

// node_modules/y-prosemirror/src/plugins/undo-plugin.js
var undo = (state) => {
  const undoManager = yUndoPluginKey.getState(state).undoManager;
  if (undoManager != null) {
    undoManager.undo();
    return true;
  }
};
var redo = (state) => {
  const undoManager = yUndoPluginKey.getState(state).undoManager;
  if (undoManager != null) {
    undoManager.redo();
    return true;
  }
};
var defaultProtectedNodes = /* @__PURE__ */ new Set(["paragraph"]);
var defaultDeleteFilter = (item, protectedNodes) => !(item instanceof Item) || !(item.content instanceof ContentType) || !(item.content.type instanceof YText || item.content.type instanceof YXmlElement && protectedNodes.has(item.content.type.nodeName)) || item.content.type._length === 0;
var yUndoPlugin = ({ protectedNodes = defaultProtectedNodes, trackedOrigins = [], undoManager = null } = {}) => new Plugin({
  key: yUndoPluginKey,
  state: {
    init: (initargs, state) => {
      const ystate = ySyncPluginKey.getState(state);
      const _undoManager = undoManager || new UndoManager(ystate.type, {
        trackedOrigins: new Set([ySyncPluginKey].concat(trackedOrigins)),
        deleteFilter: (item) => defaultDeleteFilter(item, protectedNodes)
      });
      return {
        undoManager: _undoManager,
        prevSel: null,
        hasUndoOps: _undoManager.undoStack.length > 0,
        hasRedoOps: _undoManager.redoStack.length > 0
      };
    },
    apply: (tr4, val, oldState, state) => {
      const binding = ySyncPluginKey.getState(state).binding;
      const undoManager2 = val.undoManager;
      const hasUndoOps = undoManager2.undoStack.length > 0;
      const hasRedoOps = undoManager2.redoStack.length > 0;
      if (binding) {
        return {
          undoManager: undoManager2,
          prevSel: getRelativeSelection(binding, oldState),
          hasUndoOps,
          hasRedoOps
        };
      } else {
        if (hasUndoOps !== val.hasUndoOps || hasRedoOps !== val.hasRedoOps) {
          return Object.assign({}, val, {
            hasUndoOps: undoManager2.undoStack.length > 0,
            hasRedoOps: undoManager2.redoStack.length > 0
          });
        } else {
          return val;
        }
      }
    }
  },
  view: (view) => {
    const ystate = ySyncPluginKey.getState(view.state);
    const undoManager2 = yUndoPluginKey.getState(view.state).undoManager;
    undoManager2.on("stack-item-added", ({ stackItem }) => {
      const binding = ystate.binding;
      if (binding) {
        stackItem.meta.set(binding, yUndoPluginKey.getState(view.state).prevSel);
      }
    });
    undoManager2.on("stack-item-popped", ({ stackItem }) => {
      const binding = ystate.binding;
      if (binding) {
        binding.beforeTransactionSelection = stackItem.meta.get(binding) || binding.beforeTransactionSelection;
      }
    });
    return {
      destroy: () => {
        undoManager2.destroy();
      }
    };
  }
});

// node_modules/@tiptap/extension-collaboration/dist/index.js
var Collaboration = Extension.create({
  name: "collaboration",
  priority: 1e3,
  addOptions() {
    return {
      document: null,
      field: "default",
      fragment: null
    };
  },
  onCreate() {
    if (this.editor.extensionManager.extensions.find((extension2) => extension2.name === "history")) {
      console.warn('[tiptap warn]: "@tiptap/extension-collaboration" comes with its own history support and is not compatible with "@tiptap/extension-history".');
    }
  },
  addCommands() {
    return {
      undo: () => ({ tr: tr4, state, dispatch }) => {
        tr4.setMeta("preventDispatch", true);
        const undoManager = yUndoPluginKey.getState(state).undoManager;
        if (undoManager.undoStack.length === 0) {
          return false;
        }
        if (!dispatch) {
          return true;
        }
        return undo(state);
      },
      redo: () => ({ tr: tr4, state, dispatch }) => {
        tr4.setMeta("preventDispatch", true);
        const undoManager = yUndoPluginKey.getState(state).undoManager;
        if (undoManager.redoStack.length === 0) {
          return false;
        }
        if (!dispatch) {
          return true;
        }
        return redo(state);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Mod-y": () => this.editor.commands.redo(),
      "Shift-Mod-z": () => this.editor.commands.redo()
    };
  },
  addProseMirrorPlugins() {
    const fragment = this.options.fragment ? this.options.fragment : this.options.document.getXmlFragment(this.options.field);
    const yUndoPluginInstance = yUndoPlugin();
    const originalUndoPluginView = yUndoPluginInstance.spec.view;
    yUndoPluginInstance.spec.view = (view) => {
      const { undoManager } = yUndoPluginKey.getState(view.state);
      if (undoManager.restore) {
        undoManager.restore();
        undoManager.restore = () => {
        };
      }
      const viewRet = originalUndoPluginView(view);
      return {
        destroy: () => {
          const hasUndoManSelf = undoManager.trackedOrigins.has(undoManager);
          const observers = undoManager._observers;
          undoManager.restore = () => {
            if (hasUndoManSelf) {
              undoManager.trackedOrigins.add(undoManager);
            }
            undoManager.doc.on("afterTransaction", undoManager.afterTransactionHandler);
            undoManager._observers = observers;
          };
          viewRet.destroy();
        }
      };
    };
    return [ySyncPlugin(fragment), yUndoPluginInstance];
  }
});

// node_modules/@tiptap/extension-collaboration-cursor/dist/index.js
var awarenessStatesToArray = (states) => {
  return Array.from(states.entries()).map(([key2, value]) => {
    return {
      clientId: key2,
      ...value.user
    };
  });
};
var defaultOnUpdate = () => null;
var CollaborationCursor = Extension.create({
  name: "collaborationCursor",
  addOptions() {
    return {
      provider: null,
      user: {
        name: null,
        color: null
      },
      render: (user) => {
        const cursor2 = document.createElement("span");
        cursor2.classList.add("collaboration-cursor__caret");
        cursor2.setAttribute("style", `border-color: ${user.color}`);
        const label = document.createElement("div");
        label.classList.add("collaboration-cursor__label");
        label.setAttribute("style", `background-color: ${user.color}`);
        label.insertBefore(document.createTextNode(user.name), null);
        cursor2.insertBefore(label, null);
        return cursor2;
      },
      onUpdate: defaultOnUpdate
    };
  },
  onCreate() {
    if (this.options.onUpdate !== defaultOnUpdate) {
      console.warn('[tiptap warn]: DEPRECATED: The "onUpdate" option is deprecated. Please use `editor.storage.collaborationCursor.users` instead. Read more: https://tiptap.dev/api/extensions/collaboration-cursor');
    }
  },
  addStorage() {
    return {
      users: []
    };
  },
  addCommands() {
    return {
      updateUser: (attributes) => () => {
        this.options.user = attributes;
        this.options.provider.awareness.setLocalStateField("user", this.options.user);
        return true;
      },
      user: (attributes) => ({ editor }) => {
        console.warn('[tiptap warn]: DEPRECATED: The "user" command is deprecated. Please use "updateUser" instead. Read more: https://tiptap.dev/api/extensions/collaboration-cursor');
        return editor.commands.updateUser(attributes);
      }
    };
  },
  addProseMirrorPlugins() {
    return [
      yCursorPlugin(
        (() => {
          this.options.provider.awareness.setLocalStateField("user", this.options.user);
          this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states);
          this.options.provider.awareness.on("update", () => {
            this.storage.users = awarenessStatesToArray(this.options.provider.awareness.states);
          });
          return this.options.provider.awareness;
        })(),
        // @ts-ignore
        {
          cursorBuilder: this.options.render
        }
      )
    ];
  }
});

// node_modules/prosemirror-dropcursor/dist/index.js
function dropCursor(options2 = {}) {
  return new Plugin({
    view(editorView) {
      return new DropCursorView(editorView, options2);
    }
  });
}
var DropCursorView = class {
  constructor(editorView, options2) {
    var _a;
    this.editorView = editorView;
    this.cursorPos = null;
    this.element = null;
    this.timeout = -1;
    this.width = (_a = options2.width) !== null && _a !== void 0 ? _a : 1;
    this.color = options2.color === false ? void 0 : options2.color || "black";
    this.class = options2.class;
    this.handlers = ["dragover", "dragend", "drop", "dragleave"].map((name) => {
      let handler = (e) => {
        this[name](e);
      };
      editorView.dom.addEventListener(name, handler);
      return { name, handler };
    });
  }
  destroy() {
    this.handlers.forEach(({ name, handler }) => this.editorView.dom.removeEventListener(name, handler));
  }
  update(editorView, prevState) {
    if (this.cursorPos != null && prevState.doc != editorView.state.doc) {
      if (this.cursorPos > editorView.state.doc.content.size)
        this.setCursor(null);
      else
        this.updateOverlay();
    }
  }
  setCursor(pos) {
    if (pos == this.cursorPos)
      return;
    this.cursorPos = pos;
    if (pos == null) {
      this.element.parentNode.removeChild(this.element);
      this.element = null;
    } else {
      this.updateOverlay();
    }
  }
  updateOverlay() {
    let $pos = this.editorView.state.doc.resolve(this.cursorPos);
    let isBlock = !$pos.parent.inlineContent, rect;
    if (isBlock) {
      let before = $pos.nodeBefore, after = $pos.nodeAfter;
      if (before || after) {
        let node4 = this.editorView.nodeDOM(this.cursorPos - (before ? before.nodeSize : 0));
        if (node4) {
          let nodeRect = node4.getBoundingClientRect();
          let top2 = before ? nodeRect.bottom : nodeRect.top;
          if (before && after)
            top2 = (top2 + this.editorView.nodeDOM(this.cursorPos).getBoundingClientRect().top) / 2;
          rect = { left: nodeRect.left, right: nodeRect.right, top: top2 - this.width / 2, bottom: top2 + this.width / 2 };
        }
      }
    }
    if (!rect) {
      let coords = this.editorView.coordsAtPos(this.cursorPos);
      rect = { left: coords.left - this.width / 2, right: coords.left + this.width / 2, top: coords.top, bottom: coords.bottom };
    }
    let parent = this.editorView.dom.offsetParent;
    if (!this.element) {
      this.element = parent.appendChild(document.createElement("div"));
      if (this.class)
        this.element.className = this.class;
      this.element.style.cssText = "position: absolute; z-index: 50; pointer-events: none;";
      if (this.color) {
        this.element.style.backgroundColor = this.color;
      }
    }
    this.element.classList.toggle("prosemirror-dropcursor-block", isBlock);
    this.element.classList.toggle("prosemirror-dropcursor-inline", !isBlock);
    let parentLeft, parentTop;
    if (!parent || parent == document.body && getComputedStyle(parent).position == "static") {
      parentLeft = -pageXOffset;
      parentTop = -pageYOffset;
    } else {
      let rect2 = parent.getBoundingClientRect();
      parentLeft = rect2.left - parent.scrollLeft;
      parentTop = rect2.top - parent.scrollTop;
    }
    this.element.style.left = rect.left - parentLeft + "px";
    this.element.style.top = rect.top - parentTop + "px";
    this.element.style.width = rect.right - rect.left + "px";
    this.element.style.height = rect.bottom - rect.top + "px";
  }
  scheduleRemoval(timeout2) {
    clearTimeout(this.timeout);
    this.timeout = setTimeout(() => this.setCursor(null), timeout2);
  }
  dragover(event) {
    if (!this.editorView.editable)
      return;
    let pos = this.editorView.posAtCoords({ left: event.clientX, top: event.clientY });
    let node4 = pos && pos.inside >= 0 && this.editorView.state.doc.nodeAt(pos.inside);
    let disableDropCursor = node4 && node4.type.spec.disableDropCursor;
    let disabled = typeof disableDropCursor == "function" ? disableDropCursor(this.editorView, pos, event) : disableDropCursor;
    if (pos && !disabled) {
      let target = pos.pos;
      if (this.editorView.dragging && this.editorView.dragging.slice) {
        let point5 = dropPoint(this.editorView.state.doc, target, this.editorView.dragging.slice);
        if (point5 != null)
          target = point5;
      }
      this.setCursor(target);
      this.scheduleRemoval(5e3);
    }
  }
  dragend() {
    this.scheduleRemoval(20);
  }
  drop() {
    this.scheduleRemoval(20);
  }
  dragleave(event) {
    if (event.target == this.editorView.dom || !this.editorView.dom.contains(event.relatedTarget))
      this.setCursor(null);
  }
};

// node_modules/@tiptap/extension-dropcursor/dist/index.js
var Dropcursor = Extension.create({
  name: "dropCursor",
  addOptions() {
    return {
      color: "currentColor",
      width: 1,
      class: void 0
    };
  },
  addProseMirrorPlugins() {
    return [
      dropCursor(this.options)
    ];
  }
});

// node_modules/prosemirror-gapcursor/dist/index.js
var GapCursor = class extends Selection {
  /**
  Create a gap cursor.
  */
  constructor($pos) {
    super($pos, $pos);
  }
  map(doc4, mapping) {
    let $pos = doc4.resolve(mapping.map(this.head));
    return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
  }
  content() {
    return Slice.empty;
  }
  eq(other) {
    return other instanceof GapCursor && other.head == this.head;
  }
  toJSON() {
    return { type: "gapcursor", pos: this.head };
  }
  /**
  @internal
  */
  static fromJSON(doc4, json) {
    if (typeof json.pos != "number")
      throw new RangeError("Invalid input for GapCursor.fromJSON");
    return new GapCursor(doc4.resolve(json.pos));
  }
  /**
  @internal
  */
  getBookmark() {
    return new GapBookmark(this.anchor);
  }
  /**
  @internal
  */
  static valid($pos) {
    let parent = $pos.parent;
    if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))
      return false;
    let override = parent.type.spec.allowGapCursor;
    if (override != null)
      return override;
    let deflt = parent.contentMatchAt($pos.index()).defaultType;
    return deflt && deflt.isTextblock;
  }
  /**
  @internal
  */
  static findGapCursorFrom($pos, dir, mustMove = false) {
    search:
      for (; ; ) {
        if (!mustMove && GapCursor.valid($pos))
          return $pos;
        let pos = $pos.pos, next2 = null;
        for (let d = $pos.depth; ; d--) {
          let parent = $pos.node(d);
          if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
            next2 = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
            break;
          } else if (d == 0) {
            return null;
          }
          pos += dir;
          let $cur = $pos.doc.resolve(pos);
          if (GapCursor.valid($cur))
            return $cur;
        }
        for (; ; ) {
          let inside = dir > 0 ? next2.firstChild : next2.lastChild;
          if (!inside) {
            if (next2.isAtom && !next2.isText && !NodeSelection.isSelectable(next2)) {
              $pos = $pos.doc.resolve(pos + next2.nodeSize * dir);
              mustMove = false;
              continue search;
            }
            break;
          }
          next2 = inside;
          pos += dir;
          let $cur = $pos.doc.resolve(pos);
          if (GapCursor.valid($cur))
            return $cur;
        }
        return null;
      }
  }
};
GapCursor.prototype.visible = false;
GapCursor.findFrom = GapCursor.findGapCursorFrom;
Selection.jsonID("gapcursor", GapCursor);
var GapBookmark = class {
  constructor(pos) {
    this.pos = pos;
  }
  map(mapping) {
    return new GapBookmark(mapping.map(this.pos));
  }
  resolve(doc4) {
    let $pos = doc4.resolve(this.pos);
    return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
  }
};
function closedBefore($pos) {
  for (let d = $pos.depth; d >= 0; d--) {
    let index7 = $pos.index(d), parent = $pos.node(d);
    if (index7 == 0) {
      if (parent.type.spec.isolating)
        return true;
      continue;
    }
    for (let before = parent.child(index7 - 1); ; before = before.lastChild) {
      if (before.childCount == 0 && !before.inlineContent || before.isAtom || before.type.spec.isolating)
        return true;
      if (before.inlineContent)
        return false;
    }
  }
  return true;
}
function closedAfter($pos) {
  for (let d = $pos.depth; d >= 0; d--) {
    let index7 = $pos.indexAfter(d), parent = $pos.node(d);
    if (index7 == parent.childCount) {
      if (parent.type.spec.isolating)
        return true;
      continue;
    }
    for (let after = parent.child(index7); ; after = after.firstChild) {
      if (after.childCount == 0 && !after.inlineContent || after.isAtom || after.type.spec.isolating)
        return true;
      if (after.inlineContent)
        return false;
    }
  }
  return true;
}
function gapCursor() {
  return new Plugin({
    props: {
      decorations: drawGapCursor,
      createSelectionBetween(_view, $anchor, $head) {
        return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
      },
      handleClick,
      handleKeyDown,
      handleDOMEvents: { beforeinput }
    }
  });
}
var handleKeyDown = keydownHandler({
  "ArrowLeft": arrow4("horiz", -1),
  "ArrowRight": arrow4("horiz", 1),
  "ArrowUp": arrow4("vert", -1),
  "ArrowDown": arrow4("vert", 1)
});
function arrow4(axis, dir) {
  const dirStr = axis == "vert" ? dir > 0 ? "down" : "up" : dir > 0 ? "right" : "left";
  return function(state, dispatch, view) {
    let sel = state.selection;
    let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;
    if (sel instanceof TextSelection) {
      if (!view.endOfTextblock(dirStr) || $start.depth == 0)
        return false;
      mustMove = false;
      $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
    }
    let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
    if (!$found)
      return false;
    if (dispatch)
      dispatch(state.tr.setSelection(new GapCursor($found)));
    return true;
  };
}
function handleClick(view, pos, event) {
  if (!view || !view.editable)
    return false;
  let $pos = view.state.doc.resolve(pos);
  if (!GapCursor.valid($pos))
    return false;
  let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });
  if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))
    return false;
  view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
  return true;
}
function beforeinput(view, event) {
  if (event.inputType != "insertCompositionText" || !(view.state.selection instanceof GapCursor))
    return false;
  let { $from } = view.state.selection;
  let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
  if (!insert)
    return false;
  let frag = Fragment.empty;
  for (let i = insert.length - 1; i >= 0; i--)
    frag = Fragment.from(insert[i].createAndFill(null, frag));
  let tr4 = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));
  tr4.setSelection(TextSelection.near(tr4.doc.resolve($from.pos + 1)));
  view.dispatch(tr4);
  return false;
}
function drawGapCursor(state) {
  if (!(state.selection instanceof GapCursor))
    return null;
  let node4 = document.createElement("div");
  node4.className = "ProseMirror-gapcursor";
  return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node4, { key: "gapcursor" })]);
}

// node_modules/@tiptap/extension-gapcursor/dist/index.js
var Gapcursor = Extension.create({
  name: "gapCursor",
  addProseMirrorPlugins() {
    return [
      gapCursor()
    ];
  },
  extendNodeSchema(extension2) {
    var _a;
    const context = {
      name: extension2.name,
      options: extension2.options,
      storage: extension2.storage
    };
    return {
      allowGapCursor: (_a = callOrReturn(getExtensionField(extension2, "allowGapCursor", context))) !== null && _a !== void 0 ? _a : null
    };
  }
});

// node_modules/@tiptap/extension-hard-break/dist/index.js
var HardBreak = Node2.create({
  name: "hardBreak",
  addOptions() {
    return {
      keepMarks: true,
      HTMLAttributes: {}
    };
  },
  inline: true,
  group: "inline",
  selectable: false,
  parseHTML() {
    return [
      { tag: "br" }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["br", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];
  },
  renderText() {
    return "\n";
  },
  addCommands() {
    return {
      setHardBreak: () => ({ commands: commands2, chain: chain2, state, editor }) => {
        return commands2.first([
          () => commands2.exitCode(),
          () => commands2.command(() => {
            const { selection, storedMarks } = state;
            if (selection.$from.parent.type.spec.isolating) {
              return false;
            }
            const { keepMarks } = this.options;
            const { splittableMarks } = editor.extensionManager;
            const marks = storedMarks || selection.$to.parentOffset && selection.$from.marks();
            return chain2().insertContent({ type: this.name }).command(({ tr: tr4, dispatch }) => {
              if (dispatch && marks && keepMarks) {
                const filteredMarks = marks.filter((mark2) => splittableMarks.includes(mark2.type.name));
                tr4.ensureMarks(filteredMarks);
              }
              return true;
            }).run();
          })
        ]);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Enter": () => this.editor.commands.setHardBreak(),
      "Shift-Enter": () => this.editor.commands.setHardBreak()
    };
  }
});

// node_modules/rope-sequence/dist/index.js
var GOOD_LEAF_SIZE = 200;
var RopeSequence = function RopeSequence2() {
};
RopeSequence.prototype.append = function append3(other) {
  if (!other.length) {
    return this;
  }
  other = RopeSequence.from(other);
  return !this.length && other || other.length < GOOD_LEAF_SIZE && this.leafAppend(other) || this.length < GOOD_LEAF_SIZE && other.leafPrepend(this) || this.appendInner(other);
};
RopeSequence.prototype.prepend = function prepend(other) {
  if (!other.length) {
    return this;
  }
  return RopeSequence.from(other).append(this);
};
RopeSequence.prototype.appendInner = function appendInner(other) {
  return new Append(this, other);
};
RopeSequence.prototype.slice = function slice2(from5, to3) {
  if (from5 === void 0)
    from5 = 0;
  if (to3 === void 0)
    to3 = this.length;
  if (from5 >= to3) {
    return RopeSequence.empty;
  }
  return this.sliceInner(Math.max(0, from5), Math.min(this.length, to3));
};
RopeSequence.prototype.get = function get(i) {
  if (i < 0 || i >= this.length) {
    return void 0;
  }
  return this.getInner(i);
};
RopeSequence.prototype.forEach = function forEach4(f2, from5, to3) {
  if (from5 === void 0)
    from5 = 0;
  if (to3 === void 0)
    to3 = this.length;
  if (from5 <= to3) {
    this.forEachInner(f2, from5, to3, 0);
  } else {
    this.forEachInvertedInner(f2, from5, to3, 0);
  }
};
RopeSequence.prototype.map = function map5(f2, from5, to3) {
  if (from5 === void 0)
    from5 = 0;
  if (to3 === void 0)
    to3 = this.length;
  var result = [];
  this.forEach(function(elt, i) {
    return result.push(f2(elt, i));
  }, from5, to3);
  return result;
};
RopeSequence.from = function from4(values2) {
  if (values2 instanceof RopeSequence) {
    return values2;
  }
  return values2 && values2.length ? new Leaf(values2) : RopeSequence.empty;
};
var Leaf = function(RopeSequence3) {
  function Leaf2(values2) {
    RopeSequence3.call(this);
    this.values = values2;
  }
  if (RopeSequence3)
    Leaf2.__proto__ = RopeSequence3;
  Leaf2.prototype = Object.create(RopeSequence3 && RopeSequence3.prototype);
  Leaf2.prototype.constructor = Leaf2;
  var prototypeAccessors = { length: { configurable: true }, depth: { configurable: true } };
  Leaf2.prototype.flatten = function flatten2() {
    return this.values;
  };
  Leaf2.prototype.sliceInner = function sliceInner(from5, to3) {
    if (from5 == 0 && to3 == this.length) {
      return this;
    }
    return new Leaf2(this.values.slice(from5, to3));
  };
  Leaf2.prototype.getInner = function getInner(i) {
    return this.values[i];
  };
  Leaf2.prototype.forEachInner = function forEachInner(f2, from5, to3, start2) {
    for (var i = from5; i < to3; i++) {
      if (f2(this.values[i], start2 + i) === false) {
        return false;
      }
    }
  };
  Leaf2.prototype.forEachInvertedInner = function forEachInvertedInner(f2, from5, to3, start2) {
    for (var i = from5 - 1; i >= to3; i--) {
      if (f2(this.values[i], start2 + i) === false) {
        return false;
      }
    }
  };
  Leaf2.prototype.leafAppend = function leafAppend(other) {
    if (this.length + other.length <= GOOD_LEAF_SIZE) {
      return new Leaf2(this.values.concat(other.flatten()));
    }
  };
  Leaf2.prototype.leafPrepend = function leafPrepend(other) {
    if (this.length + other.length <= GOOD_LEAF_SIZE) {
      return new Leaf2(other.flatten().concat(this.values));
    }
  };
  prototypeAccessors.length.get = function() {
    return this.values.length;
  };
  prototypeAccessors.depth.get = function() {
    return 0;
  };
  Object.defineProperties(Leaf2.prototype, prototypeAccessors);
  return Leaf2;
}(RopeSequence);
RopeSequence.empty = new Leaf([]);
var Append = function(RopeSequence3) {
  function Append2(left2, right2) {
    RopeSequence3.call(this);
    this.left = left2;
    this.right = right2;
    this.length = left2.length + right2.length;
    this.depth = Math.max(left2.depth, right2.depth) + 1;
  }
  if (RopeSequence3)
    Append2.__proto__ = RopeSequence3;
  Append2.prototype = Object.create(RopeSequence3 && RopeSequence3.prototype);
  Append2.prototype.constructor = Append2;
  Append2.prototype.flatten = function flatten2() {
    return this.left.flatten().concat(this.right.flatten());
  };
  Append2.prototype.getInner = function getInner(i) {
    return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length);
  };
  Append2.prototype.forEachInner = function forEachInner(f2, from5, to3, start2) {
    var leftLen = this.left.length;
    if (from5 < leftLen && this.left.forEachInner(f2, from5, Math.min(to3, leftLen), start2) === false) {
      return false;
    }
    if (to3 > leftLen && this.right.forEachInner(f2, Math.max(from5 - leftLen, 0), Math.min(this.length, to3) - leftLen, start2 + leftLen) === false) {
      return false;
    }
  };
  Append2.prototype.forEachInvertedInner = function forEachInvertedInner(f2, from5, to3, start2) {
    var leftLen = this.left.length;
    if (from5 > leftLen && this.right.forEachInvertedInner(f2, from5 - leftLen, Math.max(to3, leftLen) - leftLen, start2 + leftLen) === false) {
      return false;
    }
    if (to3 < leftLen && this.left.forEachInvertedInner(f2, Math.min(from5, leftLen), to3, start2) === false) {
      return false;
    }
  };
  Append2.prototype.sliceInner = function sliceInner(from5, to3) {
    if (from5 == 0 && to3 == this.length) {
      return this;
    }
    var leftLen = this.left.length;
    if (to3 <= leftLen) {
      return this.left.slice(from5, to3);
    }
    if (from5 >= leftLen) {
      return this.right.slice(from5 - leftLen, to3 - leftLen);
    }
    return this.left.slice(from5, leftLen).append(this.right.slice(0, to3 - leftLen));
  };
  Append2.prototype.leafAppend = function leafAppend(other) {
    var inner = this.right.leafAppend(other);
    if (inner) {
      return new Append2(this.left, inner);
    }
  };
  Append2.prototype.leafPrepend = function leafPrepend(other) {
    var inner = this.left.leafPrepend(other);
    if (inner) {
      return new Append2(inner, this.right);
    }
  };
  Append2.prototype.appendInner = function appendInner2(other) {
    if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1) {
      return new Append2(this.left, new Append2(this.right, other));
    }
    return new Append2(this, other);
  };
  return Append2;
}(RopeSequence);
var dist_default2 = RopeSequence;

// node_modules/prosemirror-history/dist/index.js
var max_empty_items = 500;
var Branch = class {
  constructor(items, eventCount) {
    this.items = items;
    this.eventCount = eventCount;
  }
  // Pop the latest event off the branch's history and apply it
  // to a document transform.
  popEvent(state, preserveItems) {
    if (this.eventCount == 0)
      return null;
    let end2 = this.items.length;
    for (; ; end2--) {
      let next2 = this.items.get(end2 - 1);
      if (next2.selection) {
        --end2;
        break;
      }
    }
    let remap, mapFrom;
    if (preserveItems) {
      remap = this.remapping(end2, this.items.length);
      mapFrom = remap.maps.length;
    }
    let transform2 = state.tr;
    let selection, remaining;
    let addAfter = [], addBefore = [];
    this.items.forEach((item, i) => {
      if (!item.step) {
        if (!remap) {
          remap = this.remapping(end2, i + 1);
          mapFrom = remap.maps.length;
        }
        mapFrom--;
        addBefore.push(item);
        return;
      }
      if (remap) {
        addBefore.push(new Item2(item.map));
        let step = item.step.map(remap.slice(mapFrom)), map6;
        if (step && transform2.maybeStep(step).doc) {
          map6 = transform2.mapping.maps[transform2.mapping.maps.length - 1];
          addAfter.push(new Item2(map6, void 0, void 0, addAfter.length + addBefore.length));
        }
        mapFrom--;
        if (map6)
          remap.appendMap(map6, mapFrom);
      } else {
        transform2.maybeStep(item.step);
      }
      if (item.selection) {
        selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
        remaining = new Branch(this.items.slice(0, end2).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
        return false;
      }
    }, this.items.length, 0);
    return { remaining, transform: transform2, selection };
  }
  // Create a new branch with the given transform added.
  addTransform(transform2, selection, histOptions, preserveItems) {
    let newItems = [], eventCount = this.eventCount;
    let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
    for (let i = 0; i < transform2.steps.length; i++) {
      let step = transform2.steps[i].invert(transform2.docs[i]);
      let item = new Item2(transform2.mapping.maps[i], step, selection), merged;
      if (merged = lastItem && lastItem.merge(item)) {
        item = merged;
        if (i)
          newItems.pop();
        else
          oldItems = oldItems.slice(0, oldItems.length - 1);
      }
      newItems.push(item);
      if (selection) {
        eventCount++;
        selection = void 0;
      }
      if (!preserveItems)
        lastItem = item;
    }
    let overflow = eventCount - histOptions.depth;
    if (overflow > DEPTH_OVERFLOW) {
      oldItems = cutOffEvents(oldItems, overflow);
      eventCount -= overflow;
    }
    return new Branch(oldItems.append(newItems), eventCount);
  }
  remapping(from5, to3) {
    let maps = new Mapping();
    this.items.forEach((item, i) => {
      let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from5 ? maps.maps.length - item.mirrorOffset : void 0;
      maps.appendMap(item.map, mirrorPos);
    }, from5, to3);
    return maps;
  }
  addMaps(array) {
    if (this.eventCount == 0)
      return this;
    return new Branch(this.items.append(array.map((map6) => new Item2(map6))), this.eventCount);
  }
  // When the collab module receives remote changes, the history has
  // to know about those, so that it can adjust the steps that were
  // rebased on top of the remote changes, and include the position
  // maps for the remote changes in its array of items.
  rebased(rebasedTransform, rebasedCount) {
    if (!this.eventCount)
      return this;
    let rebasedItems = [], start2 = Math.max(0, this.items.length - rebasedCount);
    let mapping = rebasedTransform.mapping;
    let newUntil = rebasedTransform.steps.length;
    let eventCount = this.eventCount;
    this.items.forEach((item) => {
      if (item.selection)
        eventCount--;
    }, start2);
    let iRebased = rebasedCount;
    this.items.forEach((item) => {
      let pos = mapping.getMirror(--iRebased);
      if (pos == null)
        return;
      newUntil = Math.min(newUntil, pos);
      let map6 = mapping.maps[pos];
      if (item.step) {
        let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
        let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
        if (selection)
          eventCount++;
        rebasedItems.push(new Item2(map6, step, selection));
      } else {
        rebasedItems.push(new Item2(map6));
      }
    }, start2);
    let newMaps = [];
    for (let i = rebasedCount; i < newUntil; i++)
      newMaps.push(new Item2(mapping.maps[i]));
    let items = this.items.slice(0, start2).append(newMaps).append(rebasedItems);
    let branch = new Branch(items, eventCount);
    if (branch.emptyItemCount() > max_empty_items)
      branch = branch.compress(this.items.length - rebasedItems.length);
    return branch;
  }
  emptyItemCount() {
    let count2 = 0;
    this.items.forEach((item) => {
      if (!item.step)
        count2++;
    });
    return count2;
  }
  // Compressing a branch means rewriting it to push the air (map-only
  // items) out. During collaboration, these naturally accumulate
  // because each remote change adds one. The `upto` argument is used
  // to ensure that only the items below a given level are compressed,
  // because `rebased` relies on a clean, untouched set of items in
  // order to associate old items with rebased steps.
  compress(upto = this.items.length) {
    let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
    let items = [], events = 0;
    this.items.forEach((item, i) => {
      if (i >= upto) {
        items.push(item);
        if (item.selection)
          events++;
      } else if (item.step) {
        let step = item.step.map(remap.slice(mapFrom)), map6 = step && step.getMap();
        mapFrom--;
        if (map6)
          remap.appendMap(map6, mapFrom);
        if (step) {
          let selection = item.selection && item.selection.map(remap.slice(mapFrom));
          if (selection)
            events++;
          let newItem = new Item2(map6.invert(), step, selection), merged, last2 = items.length - 1;
          if (merged = items.length && items[last2].merge(newItem))
            items[last2] = merged;
          else
            items.push(newItem);
        }
      } else if (item.map) {
        mapFrom--;
      }
    }, this.items.length, 0);
    return new Branch(dist_default2.from(items.reverse()), events);
  }
};
Branch.empty = new Branch(dist_default2.empty, 0);
function cutOffEvents(items, n) {
  let cutPoint;
  items.forEach((item, i) => {
    if (item.selection && n-- == 0) {
      cutPoint = i;
      return false;
    }
  });
  return items.slice(cutPoint);
}
var Item2 = class {
  constructor(map6, step, selection, mirrorOffset) {
    this.map = map6;
    this.step = step;
    this.selection = selection;
    this.mirrorOffset = mirrorOffset;
  }
  merge(other) {
    if (this.step && other.step && !other.selection) {
      let step = other.step.merge(this.step);
      if (step)
        return new Item2(step.getMap().invert(), step, this.selection);
    }
  }
};
var HistoryState = class {
  constructor(done, undone, prevRanges, prevTime, prevComposition) {
    this.done = done;
    this.undone = undone;
    this.prevRanges = prevRanges;
    this.prevTime = prevTime;
    this.prevComposition = prevComposition;
  }
};
var DEPTH_OVERFLOW = 20;
function applyTransaction(history2, state, tr4, options2) {
  let historyTr = tr4.getMeta(historyKey), rebased;
  if (historyTr)
    return historyTr.historyState;
  if (tr4.getMeta(closeHistoryKey))
    history2 = new HistoryState(history2.done, history2.undone, null, 0, -1);
  let appended = tr4.getMeta("appendedTransaction");
  if (tr4.steps.length == 0) {
    return history2;
  } else if (appended && appended.getMeta(historyKey)) {
    if (appended.getMeta(historyKey).redo)
      return new HistoryState(history2.done.addTransform(tr4, void 0, options2, mustPreserveItems(state)), history2.undone, rangesFor(tr4.mapping.maps[tr4.steps.length - 1]), history2.prevTime, history2.prevComposition);
    else
      return new HistoryState(history2.done, history2.undone.addTransform(tr4, void 0, options2, mustPreserveItems(state)), null, history2.prevTime, history2.prevComposition);
  } else if (tr4.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
    let composition = tr4.getMeta("composition");
    let newGroup = history2.prevTime == 0 || !appended && history2.prevComposition != composition && (history2.prevTime < (tr4.time || 0) - options2.newGroupDelay || !isAdjacentTo(tr4, history2.prevRanges));
    let prevRanges = appended ? mapRanges(history2.prevRanges, tr4.mapping) : rangesFor(tr4.mapping.maps[tr4.steps.length - 1]);
    return new HistoryState(history2.done.addTransform(tr4, newGroup ? state.selection.getBookmark() : void 0, options2, mustPreserveItems(state)), Branch.empty, prevRanges, tr4.time, composition == null ? history2.prevComposition : composition);
  } else if (rebased = tr4.getMeta("rebased")) {
    return new HistoryState(history2.done.rebased(tr4, rebased), history2.undone.rebased(tr4, rebased), mapRanges(history2.prevRanges, tr4.mapping), history2.prevTime, history2.prevComposition);
  } else {
    return new HistoryState(history2.done.addMaps(tr4.mapping.maps), history2.undone.addMaps(tr4.mapping.maps), mapRanges(history2.prevRanges, tr4.mapping), history2.prevTime, history2.prevComposition);
  }
}
function isAdjacentTo(transform2, prevRanges) {
  if (!prevRanges)
    return false;
  if (!transform2.docChanged)
    return true;
  let adjacent = false;
  transform2.mapping.maps[0].forEach((start2, end2) => {
    for (let i = 0; i < prevRanges.length; i += 2)
      if (start2 <= prevRanges[i + 1] && end2 >= prevRanges[i])
        adjacent = true;
  });
  return adjacent;
}
function rangesFor(map6) {
  let result = [];
  map6.forEach((_from, _to, from5, to3) => result.push(from5, to3));
  return result;
}
function mapRanges(ranges, mapping) {
  if (!ranges)
    return null;
  let result = [];
  for (let i = 0; i < ranges.length; i += 2) {
    let from5 = mapping.map(ranges[i], 1), to3 = mapping.map(ranges[i + 1], -1);
    if (from5 <= to3)
      result.push(from5, to3);
  }
  return result;
}
function histTransaction(history2, state, dispatch, redo3) {
  let preserveItems = mustPreserveItems(state);
  let histOptions = historyKey.get(state).spec.config;
  let pop = (redo3 ? history2.undone : history2.done).popEvent(state, preserveItems);
  if (!pop)
    return;
  let selection = pop.selection.resolve(pop.transform.doc);
  let added = (redo3 ? history2.done : history2.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
  let newHist = new HistoryState(redo3 ? added : pop.remaining, redo3 ? pop.remaining : added, null, 0, -1);
  dispatch(pop.transform.setSelection(selection).setMeta(historyKey, { redo: redo3, historyState: newHist }).scrollIntoView());
}
var cachedPreserveItems = false;
var cachedPreserveItemsPlugins = null;
function mustPreserveItems(state) {
  let plugins = state.plugins;
  if (cachedPreserveItemsPlugins != plugins) {
    cachedPreserveItems = false;
    cachedPreserveItemsPlugins = plugins;
    for (let i = 0; i < plugins.length; i++)
      if (plugins[i].spec.historyPreserveItems) {
        cachedPreserveItems = true;
        break;
      }
  }
  return cachedPreserveItems;
}
var historyKey = new PluginKey("history");
var closeHistoryKey = new PluginKey("closeHistory");
function history(config = {}) {
  config = {
    depth: config.depth || 100,
    newGroupDelay: config.newGroupDelay || 500
  };
  return new Plugin({
    key: historyKey,
    state: {
      init() {
        return new HistoryState(Branch.empty, Branch.empty, null, 0, -1);
      },
      apply(tr4, hist, state) {
        return applyTransaction(hist, state, tr4, config);
      }
    },
    config,
    props: {
      handleDOMEvents: {
        beforeinput(view, e) {
          let inputType = e.inputType;
          let command2 = inputType == "historyUndo" ? undo2 : inputType == "historyRedo" ? redo2 : null;
          if (!command2)
            return false;
          e.preventDefault();
          return command2(view.state, view.dispatch);
        }
      }
    }
  });
}
var undo2 = (state, dispatch) => {
  let hist = historyKey.getState(state);
  if (!hist || hist.done.eventCount == 0)
    return false;
  if (dispatch)
    histTransaction(hist, state, dispatch, false);
  return true;
};
var redo2 = (state, dispatch) => {
  let hist = historyKey.getState(state);
  if (!hist || hist.undone.eventCount == 0)
    return false;
  if (dispatch)
    histTransaction(hist, state, dispatch, true);
  return true;
};

// node_modules/@tiptap/extension-history/dist/index.js
var History = Extension.create({
  name: "history",
  addOptions() {
    return {
      depth: 100,
      newGroupDelay: 500
    };
  },
  addCommands() {
    return {
      undo: () => ({ state, dispatch }) => {
        return undo2(state, dispatch);
      },
      redo: () => ({ state, dispatch }) => {
        return redo2(state, dispatch);
      }
    };
  },
  addProseMirrorPlugins() {
    return [
      history(this.options)
    ];
  },
  addKeyboardShortcuts() {
    return {
      "Mod-z": () => this.editor.commands.undo(),
      "Mod-y": () => this.editor.commands.redo(),
      "Shift-Mod-z": () => this.editor.commands.redo(),
      // Russian keyboard layouts
      "Mod-я": () => this.editor.commands.undo(),
      "Shift-Mod-я": () => this.editor.commands.redo()
    };
  }
});

// node_modules/@tiptap/extension-italic/dist/index.js
var starInputRegex2 = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))$/;
var starPasteRegex2 = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))/g;
var underscoreInputRegex2 = /(?:^|\s)((?:_)((?:[^_]+))(?:_))$/;
var underscorePasteRegex2 = /(?:^|\s)((?:_)((?:[^_]+))(?:_))/g;
var Italic = Mark2.create({
  name: "italic",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "em"
      },
      {
        tag: "i",
        getAttrs: (node4) => node4.style.fontStyle !== "normal" && null
      },
      {
        style: "font-style=italic"
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["em", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setItalic: () => ({ commands: commands2 }) => {
        return commands2.setMark(this.name);
      },
      toggleItalic: () => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name);
      },
      unsetItalic: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-i": () => this.editor.commands.toggleItalic(),
      "Mod-I": () => this.editor.commands.toggleItalic()
    };
  },
  addInputRules() {
    return [
      markInputRule({
        find: starInputRegex2,
        type: this.type
      }),
      markInputRule({
        find: underscoreInputRegex2,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: starPasteRegex2,
        type: this.type
      }),
      markPasteRule({
        find: underscorePasteRegex2,
        type: this.type
      })
    ];
  }
});

// node_modules/linkifyjs/dist/linkify.es.js
var encodedTlds = "aaa1rp3barth4b0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0faromeo7ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re2s2c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y0eats7k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking0channel11l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t0isalat7u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0at2delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d0network8tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntdoor4ier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5gtv3iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0eles2s3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1nder2le4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster5ia3d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4de2k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0cys3drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7serati6ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic3tual5v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rthwesternmutual14on4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3ssagens7y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cher3ks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w0time7i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ffany5ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0channel7ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lkswagen7vo3te1ing3o2yage5u0elos6wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2";
var encodedUtlds = "ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5تصالات6رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2";
var assign3 = (target, properties) => {
  for (const key2 in properties) {
    target[key2] = properties[key2];
  }
  return target;
};
var numeric = "numeric";
var ascii = "ascii";
var alpha = "alpha";
var asciinumeric = "asciinumeric";
var alphanumeric = "alphanumeric";
var domain2 = "domain";
var emoji = "emoji";
var scheme = "scheme";
var slashscheme = "slashscheme";
var whitespace3 = "whitespace";
function registerGroup(name, groups) {
  if (!(name in groups)) {
    groups[name] = [];
  }
  return groups[name];
}
function addToGroups(t, flags, groups) {
  if (flags[numeric]) {
    flags[asciinumeric] = true;
    flags[alphanumeric] = true;
  }
  if (flags[ascii]) {
    flags[asciinumeric] = true;
    flags[alpha] = true;
  }
  if (flags[asciinumeric]) {
    flags[alphanumeric] = true;
  }
  if (flags[alpha]) {
    flags[alphanumeric] = true;
  }
  if (flags[alphanumeric]) {
    flags[domain2] = true;
  }
  if (flags[emoji]) {
    flags[domain2] = true;
  }
  for (const k in flags) {
    const group = registerGroup(k, groups);
    if (group.indexOf(t) < 0) {
      group.push(t);
    }
  }
}
function flagsForToken(t, groups) {
  const result = {};
  for (const c in groups) {
    if (groups[c].indexOf(t) >= 0) {
      result[c] = true;
    }
  }
  return result;
}
function State(token2) {
  if (token2 === void 0) {
    token2 = null;
  }
  this.j = {};
  this.jr = [];
  this.jd = null;
  this.t = token2;
}
State.groups = {};
State.prototype = {
  accepts() {
    return !!this.t;
  },
  /**
   * Follow an existing transition from the given input to the next state.
   * Does not mutate.
   * @param {string} input character or token type to transition on
   * @returns {?State<T>} the next state, if any
   */
  go(input3) {
    const state = this;
    const nextState = state.j[input3];
    if (nextState) {
      return nextState;
    }
    for (let i = 0; i < state.jr.length; i++) {
      const regex = state.jr[i][0];
      const nextState2 = state.jr[i][1];
      if (nextState2 && regex.test(input3)) {
        return nextState2;
      }
    }
    return state.jd;
  },
  /**
   * Whether the state has a transition for the given input. Set the second
   * argument to true to only look for an exact match (and not a default or
   * regular-expression-based transition)
   * @param {string} input
   * @param {boolean} exactOnly
   */
  has(input3, exactOnly) {
    if (exactOnly === void 0) {
      exactOnly = false;
    }
    return exactOnly ? input3 in this.j : !!this.go(input3);
  },
  /**
   * Short for "transition all"; create a transition from the array of items
   * in the given list to the same final resulting state.
   * @param {string | string[]} inputs Group of inputs to transition on
   * @param {Transition<T> | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   */
  ta(inputs, next2, flags, groups) {
    for (let i = 0; i < inputs.length; i++) {
      this.tt(inputs[i], next2, flags, groups);
    }
  },
  /**
   * Short for "take regexp transition"; defines a transition for this state
   * when it encounters a token which matches the given regular expression
   * @param {RegExp} regexp Regular expression transition (populate first)
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  tr(regexp2, next2, flags, groups) {
    groups = groups || State.groups;
    let nextState;
    if (next2 && next2.j) {
      nextState = next2;
    } else {
      nextState = new State(next2);
      if (flags && groups) {
        addToGroups(next2, flags, groups);
      }
    }
    this.jr.push([regexp2, nextState]);
    return nextState;
  },
  /**
   * Short for "take transitions", will take as many sequential transitions as
   * the length of the given input and returns the
   * resulting final state.
   * @param {string | string[]} input
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of token groups
   * @returns {State<T>} taken after the given input
   */
  ts(input3, next2, flags, groups) {
    let state = this;
    const len = input3.length;
    if (!len) {
      return state;
    }
    for (let i = 0; i < len - 1; i++) {
      state = state.tt(input3[i]);
    }
    return state.tt(input3[len - 1], next2, flags, groups);
  },
  /**
   * Short for "take transition", this is a method for building/working with
   * state machines.
   *
   * If a state already exists for the given input, returns it.
   *
   * If a token is specified, that state will emit that token when reached by
   * the linkify engine.
   *
   * If no state exists, it will be initialized with some default transitions
   * that resemble existing default transitions.
   *
   * If a state is given for the second argument, that state will be
   * transitioned to on the given input regardless of what that input
   * previously did.
   *
   * Specify a token group flags to define groups that this token belongs to.
   * The token will be added to corresponding entires in the given groups
   * object.
   *
   * @param {string} input character, token type to transition on
   * @param {T | State<T>} [next] Transition options
   * @param {Flags} [flags] Collections flags to add token to
   * @param {Collections<T>} [groups] Master list of groups
   * @returns {State<T>} taken after the given input
   */
  tt(input3, next2, flags, groups) {
    groups = groups || State.groups;
    const state = this;
    if (next2 && next2.j) {
      state.j[input3] = next2;
      return next2;
    }
    const t = next2;
    let nextState, templateState = state.go(input3);
    if (templateState) {
      nextState = new State();
      assign3(nextState.j, templateState.j);
      nextState.jr.push.apply(nextState.jr, templateState.jr);
      nextState.jd = templateState.jd;
      nextState.t = templateState.t;
    } else {
      nextState = new State();
    }
    if (t) {
      if (groups) {
        if (nextState.t && typeof nextState.t === "string") {
          const allFlags = assign3(flagsForToken(nextState.t, groups), flags);
          addToGroups(t, allFlags, groups);
        } else if (flags) {
          addToGroups(t, flags, groups);
        }
      }
      nextState.t = t;
    }
    state.j[input3] = nextState;
    return nextState;
  }
};
var ta = (state, input3, next2, flags, groups) => state.ta(input3, next2, flags, groups);
var tr3 = (state, regexp2, next2, flags, groups) => state.tr(regexp2, next2, flags, groups);
var ts = (state, input3, next2, flags, groups) => state.ts(input3, next2, flags, groups);
var tt = (state, input3, next2, flags, groups) => state.tt(input3, next2, flags, groups);
var WORD = "WORD";
var UWORD = "UWORD";
var LOCALHOST = "LOCALHOST";
var TLD = "TLD";
var UTLD = "UTLD";
var SCHEME = "SCHEME";
var SLASH_SCHEME = "SLASH_SCHEME";
var NUM = "NUM";
var WS = "WS";
var NL$1 = "NL";
var OPENBRACE = "OPENBRACE";
var OPENBRACKET = "OPENBRACKET";
var OPENANGLEBRACKET = "OPENANGLEBRACKET";
var OPENPAREN = "OPENPAREN";
var CLOSEBRACE = "CLOSEBRACE";
var CLOSEBRACKET = "CLOSEBRACKET";
var CLOSEANGLEBRACKET = "CLOSEANGLEBRACKET";
var CLOSEPAREN = "CLOSEPAREN";
var AMPERSAND = "AMPERSAND";
var APOSTROPHE = "APOSTROPHE";
var ASTERISK = "ASTERISK";
var AT = "AT";
var BACKSLASH = "BACKSLASH";
var BACKTICK = "BACKTICK";
var CARET = "CARET";
var COLON = "COLON";
var COMMA = "COMMA";
var DOLLAR = "DOLLAR";
var DOT = "DOT";
var EQUALS = "EQUALS";
var EXCLAMATION = "EXCLAMATION";
var HYPHEN = "HYPHEN";
var PERCENT = "PERCENT";
var PIPE = "PIPE";
var PLUS = "PLUS";
var POUND = "POUND";
var QUERY = "QUERY";
var QUOTE = "QUOTE";
var SEMI = "SEMI";
var SLASH = "SLASH";
var TILDE = "TILDE";
var UNDERSCORE = "UNDERSCORE";
var EMOJI$1 = "EMOJI";
var SYM = "SYM";
var tk = Object.freeze({
  __proto__: null,
  WORD,
  UWORD,
  LOCALHOST,
  TLD,
  UTLD,
  SCHEME,
  SLASH_SCHEME,
  NUM,
  WS,
  NL: NL$1,
  OPENBRACE,
  OPENBRACKET,
  OPENANGLEBRACKET,
  OPENPAREN,
  CLOSEBRACE,
  CLOSEBRACKET,
  CLOSEANGLEBRACKET,
  CLOSEPAREN,
  AMPERSAND,
  APOSTROPHE,
  ASTERISK,
  AT,
  BACKSLASH,
  BACKTICK,
  CARET,
  COLON,
  COMMA,
  DOLLAR,
  DOT,
  EQUALS,
  EXCLAMATION,
  HYPHEN,
  PERCENT,
  PIPE,
  PLUS,
  POUND,
  QUERY,
  QUOTE,
  SEMI,
  SLASH,
  TILDE,
  UNDERSCORE,
  EMOJI: EMOJI$1,
  SYM
});
var ASCII_LETTER = /[a-z]/;
var LETTER = /\p{L}/u;
var EMOJI = /\p{Emoji}/u;
var EMOJI_VARIATION$1 = /\ufe0f/;
var DIGIT = /\d/;
var SPACE2 = /\s/;
var regexp = Object.freeze({
  __proto__: null,
  ASCII_LETTER,
  LETTER,
  EMOJI,
  EMOJI_VARIATION: EMOJI_VARIATION$1,
  DIGIT,
  SPACE: SPACE2
});
var NL2 = "\n";
var EMOJI_VARIATION = "️";
var EMOJI_JOINER = "‍";
var tlds = null;
var utlds = null;
function init$2(customSchemes) {
  if (customSchemes === void 0) {
    customSchemes = [];
  }
  const groups = {};
  State.groups = groups;
  const Start = new State();
  if (tlds == null) {
    tlds = decodeTlds(encodedTlds);
  }
  if (utlds == null) {
    utlds = decodeTlds(encodedUtlds);
  }
  tt(Start, "'", APOSTROPHE);
  tt(Start, "{", OPENBRACE);
  tt(Start, "[", OPENBRACKET);
  tt(Start, "<", OPENANGLEBRACKET);
  tt(Start, "(", OPENPAREN);
  tt(Start, "}", CLOSEBRACE);
  tt(Start, "]", CLOSEBRACKET);
  tt(Start, ">", CLOSEANGLEBRACKET);
  tt(Start, ")", CLOSEPAREN);
  tt(Start, "&", AMPERSAND);
  tt(Start, "*", ASTERISK);
  tt(Start, "@", AT);
  tt(Start, "`", BACKTICK);
  tt(Start, "^", CARET);
  tt(Start, ":", COLON);
  tt(Start, ",", COMMA);
  tt(Start, "$", DOLLAR);
  tt(Start, ".", DOT);
  tt(Start, "=", EQUALS);
  tt(Start, "!", EXCLAMATION);
  tt(Start, "-", HYPHEN);
  tt(Start, "%", PERCENT);
  tt(Start, "|", PIPE);
  tt(Start, "+", PLUS);
  tt(Start, "#", POUND);
  tt(Start, "?", QUERY);
  tt(Start, '"', QUOTE);
  tt(Start, "/", SLASH);
  tt(Start, ";", SEMI);
  tt(Start, "~", TILDE);
  tt(Start, "_", UNDERSCORE);
  tt(Start, "\\", BACKSLASH);
  const Num = tr3(Start, DIGIT, NUM, {
    [numeric]: true
  });
  tr3(Num, DIGIT, Num);
  const Word = tr3(Start, ASCII_LETTER, WORD, {
    [ascii]: true
  });
  tr3(Word, ASCII_LETTER, Word);
  const UWord = tr3(Start, LETTER, UWORD, {
    [alpha]: true
  });
  tr3(UWord, ASCII_LETTER);
  tr3(UWord, LETTER, UWord);
  const Ws = tr3(Start, SPACE2, WS, {
    [whitespace3]: true
  });
  tt(Start, NL2, NL$1, {
    [whitespace3]: true
  });
  tt(Ws, NL2);
  tr3(Ws, SPACE2, Ws);
  const Emoji = tr3(Start, EMOJI, EMOJI$1, {
    [emoji]: true
  });
  tr3(Emoji, EMOJI, Emoji);
  tt(Emoji, EMOJI_VARIATION, Emoji);
  const EmojiJoiner = tt(Emoji, EMOJI_JOINER);
  tr3(EmojiJoiner, EMOJI, Emoji);
  const wordjr = [[ASCII_LETTER, Word]];
  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord]];
  for (let i = 0; i < tlds.length; i++) {
    fastts(Start, tlds[i], TLD, WORD, wordjr);
  }
  for (let i = 0; i < utlds.length; i++) {
    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);
  }
  addToGroups(TLD, {
    tld: true,
    ascii: true
  }, groups);
  addToGroups(UTLD, {
    utld: true,
    alpha: true
  }, groups);
  fastts(Start, "file", SCHEME, WORD, wordjr);
  fastts(Start, "mailto", SCHEME, WORD, wordjr);
  fastts(Start, "http", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "https", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftp", SLASH_SCHEME, WORD, wordjr);
  fastts(Start, "ftps", SLASH_SCHEME, WORD, wordjr);
  addToGroups(SCHEME, {
    scheme: true,
    ascii: true
  }, groups);
  addToGroups(SLASH_SCHEME, {
    slashscheme: true,
    ascii: true
  }, groups);
  customSchemes = customSchemes.sort((a2, b2) => a2[0] > b2[0] ? 1 : -1);
  for (let i = 0; i < customSchemes.length; i++) {
    const sch = customSchemes[i][0];
    const optionalSlashSlash = customSchemes[i][1];
    const flags = optionalSlashSlash ? {
      [scheme]: true
    } : {
      [slashscheme]: true
    };
    if (sch.indexOf("-") >= 0) {
      flags[domain2] = true;
    } else if (!ASCII_LETTER.test(sch)) {
      flags[numeric] = true;
    } else if (DIGIT.test(sch)) {
      flags[asciinumeric] = true;
    } else {
      flags[ascii] = true;
    }
    ts(Start, sch, sch, flags);
  }
  ts(Start, "localhost", LOCALHOST, {
    ascii: true
  });
  Start.jd = new State(SYM);
  return {
    start: Start,
    tokens: assign3({
      groups
    }, tk)
  };
}
function run$12(start2, str) {
  const iterable = stringToArray(str.replace(/[A-Z]/g, (c) => c.toLowerCase()));
  const charCount = iterable.length;
  const tokens = [];
  let cursor2 = 0;
  let charCursor = 0;
  while (charCursor < charCount) {
    let state = start2;
    let nextState = null;
    let tokenLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    let charsSinceAccepts = -1;
    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        charsSinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts += iterable[charCursor].length;
        charsSinceAccepts++;
      }
      tokenLength += iterable[charCursor].length;
      cursor2 += iterable[charCursor].length;
      charCursor++;
    }
    cursor2 -= sinceAccepts;
    charCursor -= charsSinceAccepts;
    tokenLength -= sinceAccepts;
    tokens.push({
      t: latestAccepting.t,
      // token type/name
      v: str.slice(cursor2 - tokenLength, cursor2),
      // string value
      s: cursor2 - tokenLength,
      // start index
      e: cursor2
      // end index (excluding)
    });
  }
  return tokens;
}
function stringToArray(str) {
  const result = [];
  const len = str.length;
  let index7 = 0;
  while (index7 < len) {
    let first2 = str.charCodeAt(index7);
    let second;
    let char2 = first2 < 55296 || first2 > 56319 || index7 + 1 === len || (second = str.charCodeAt(index7 + 1)) < 56320 || second > 57343 ? str[index7] : str.slice(index7, index7 + 2);
    result.push(char2);
    index7 += char2.length;
  }
  return result;
}
function fastts(state, input3, t, defaultt, jr) {
  let next2;
  const len = input3.length;
  for (let i = 0; i < len - 1; i++) {
    const char2 = input3[i];
    if (state.j[char2]) {
      next2 = state.j[char2];
    } else {
      next2 = new State(defaultt);
      next2.jr = jr.slice();
      state.j[char2] = next2;
    }
    state = next2;
  }
  next2 = new State(t);
  next2.jr = jr.slice();
  state.j[input3[len - 1]] = next2;
  return next2;
}
function decodeTlds(encoded) {
  const words = [];
  const stack = [];
  let i = 0;
  let digits = "0123456789";
  while (i < encoded.length) {
    let popDigitCount = 0;
    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {
      popDigitCount++;
    }
    if (popDigitCount > 0) {
      words.push(stack.join(""));
      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {
        stack.pop();
      }
      i += popDigitCount;
    } else {
      stack.push(encoded[i]);
      i++;
    }
  }
  return words;
}
var defaults = {
  defaultProtocol: "http",
  events: null,
  format: noop4,
  formatHref: noop4,
  nl2br: false,
  tagName: "a",
  target: null,
  rel: null,
  validate: true,
  truncate: Infinity,
  className: null,
  attributes: null,
  ignoreTags: [],
  render: null
};
function Options(opts, defaultRender) {
  if (defaultRender === void 0) {
    defaultRender = null;
  }
  let o = assign3({}, defaults);
  if (opts) {
    o = assign3(o, opts instanceof Options ? opts.o : opts);
  }
  const ignoredTags = o.ignoreTags;
  const uppercaseIgnoredTags = [];
  for (let i = 0; i < ignoredTags.length; i++) {
    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());
  }
  this.o = o;
  if (defaultRender) {
    this.defaultRender = defaultRender;
  }
  this.ignoreTags = uppercaseIgnoredTags;
}
Options.prototype = {
  o: defaults,
  /**
   * @type string[]
   */
  ignoreTags: [],
  /**
   * @param {IntermediateRepresentation} ir
   * @returns {any}
   */
  defaultRender(ir) {
    return ir;
  },
  /**
   * Returns true or false based on whether a token should be displayed as a
   * link based on the user options.
   * @param {MultiToken} token
   * @returns {boolean}
   */
  check(token2) {
    return this.get("validate", token2.toString(), token2);
  },
  // Private methods
  /**
   * Resolve an option's value based on the value of the option and the given
   * params. If operator and token are specified and the target option is
   * callable, automatically calls the function with the given argument.
   * @template {keyof Opts} K
   * @param {K} key Name of option to use
   * @param {string} [operator] will be passed to the target option if it's a
   * function. If not specified, RAW function value gets returned
   * @param {MultiToken} [token] The token from linkify.tokenize
   * @returns {Opts[K] | any}
   */
  get(key2, operator, token2) {
    const isCallable = operator != null;
    let option3 = this.o[key2];
    if (!option3) {
      return option3;
    }
    if (typeof option3 === "object") {
      option3 = token2.t in option3 ? option3[token2.t] : defaults[key2];
      if (typeof option3 === "function" && isCallable) {
        option3 = option3(operator, token2);
      }
    } else if (typeof option3 === "function" && isCallable) {
      option3 = option3(operator, token2.t, token2);
    }
    return option3;
  },
  /**
   * @template {keyof Opts} L
   * @param {L} key Name of options object to use
   * @param {string} [operator]
   * @param {MultiToken} [token]
   * @returns {Opts[L] | any}
   */
  getObj(key2, operator, token2) {
    let obj = this.o[key2];
    if (typeof obj === "function" && operator != null) {
      obj = obj(operator, token2.t, token2);
    }
    return obj;
  },
  /**
   * Convert the given token to a rendered element that may be added to the
   * calling-interface's DOM
   * @param {MultiToken} token Token to render to an HTML element
   * @returns {any} Render result; e.g., HTML string, DOM element, React
   *   Component, etc.
   */
  render(token2) {
    const ir = token2.render(this);
    const renderFn = this.get("render", null, token2) || this.defaultRender;
    return renderFn(ir, token2.t, token2);
  }
};
function noop4(val) {
  return val;
}
var options = Object.freeze({
  __proto__: null,
  defaults,
  Options,
  assign: assign3
});
function MultiToken(value, tokens) {
  this.t = "token";
  this.v = value;
  this.tk = tokens;
}
MultiToken.prototype = {
  isLink: false,
  /**
   * Return the string this token represents.
   * @return {string}
   */
  toString() {
    return this.v;
  },
  /**
   * What should the value for this token be in the `href` HTML attribute?
   * Returns the `.toString` value by default.
   * @param {string} [scheme]
   * @return {string}
  */
  toHref(scheme2) {
    return this.toString();
  },
  /**
   * @param {Options} options Formatting options
   * @returns {string}
   */
  toFormattedString(options2) {
    const val = this.toString();
    const truncate = options2.get("truncate", val, this);
    const formatted = options2.get("format", val, this);
    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + "…" : formatted;
  },
  /**
   *
   * @param {Options} options
   * @returns {string}
   */
  toFormattedHref(options2) {
    return options2.get("formatHref", this.toHref(options2.get("defaultProtocol")), this);
  },
  /**
   * The start index of this token in the original input string
   * @returns {number}
   */
  startIndex() {
    return this.tk[0].s;
  },
  /**
   * The end index of this token in the original input string (up to this
   * index but not including it)
   * @returns {number}
   */
  endIndex() {
    return this.tk[this.tk.length - 1].e;
  },
  /**
  	Returns an object  of relevant values for this token, which includes keys
  	* type - Kind of token ('url', 'email', etc.)
  	* value - Original text
  	* href - The value that should be added to the anchor tag's href
  		attribute
  		@method toObject
  	@param {string} [protocol] `'http'` by default
  */
  toObject(protocol) {
    if (protocol === void 0) {
      protocol = defaults.defaultProtocol;
    }
    return {
      type: this.t,
      value: this.toString(),
      isLink: this.isLink,
      href: this.toHref(protocol),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   *
   * @param {Options} options Formatting option
   */
  toFormattedObject(options2) {
    return {
      type: this.t,
      value: this.toFormattedString(options2),
      isLink: this.isLink,
      href: this.toFormattedHref(options2),
      start: this.startIndex(),
      end: this.endIndex()
    };
  },
  /**
   * Whether this token should be rendered as a link according to the given options
   * @param {Options} options
   * @returns {boolean}
   */
  validate(options2) {
    return options2.get("validate", this.toString(), this);
  },
  /**
   * Return an object that represents how this link should be rendered.
   * @param {Options} options Formattinng options
   */
  render(options2) {
    const token2 = this;
    const href = this.toHref(options2.get("defaultProtocol"));
    const formattedHref = options2.get("formatHref", href, this);
    const tagName = options2.get("tagName", href, token2);
    const content5 = this.toFormattedString(options2);
    const attributes = {};
    const className = options2.get("className", href, token2);
    const target = options2.get("target", href, token2);
    const rel = options2.get("rel", href, token2);
    const attrs = options2.getObj("attributes", href, token2);
    const eventListeners = options2.getObj("events", href, token2);
    attributes.href = formattedHref;
    if (className) {
      attributes.class = className;
    }
    if (target) {
      attributes.target = target;
    }
    if (rel) {
      attributes.rel = rel;
    }
    if (attrs) {
      assign3(attributes, attrs);
    }
    return {
      tagName,
      attributes,
      content: content5,
      eventListeners
    };
  }
};
function createTokenClass(type, props) {
  class Token extends MultiToken {
    constructor(value, tokens) {
      super(value, tokens);
      this.t = type;
    }
  }
  for (const p5 in props) {
    Token.prototype[p5] = props[p5];
  }
  Token.t = type;
  return Token;
}
var Email = createTokenClass("email", {
  isLink: true,
  toHref() {
    return "mailto:" + this.toString();
  }
});
var Text2 = createTokenClass("text");
var Nl = createTokenClass("nl");
var Url = createTokenClass("url", {
  isLink: true,
  /**
  	Lowercases relevant parts of the domain and adds the protocol if
  	required. Note that this will not escape unsafe HTML characters in the
  	URL.
  		@param {string} [scheme] default scheme (e.g., 'https')
  	@return {string} the full href
  */
  toHref(scheme2) {
    if (scheme2 === void 0) {
      scheme2 = defaults.defaultProtocol;
    }
    return this.hasProtocol() ? this.v : `${scheme2}://${this.v}`;
  },
  /**
   * Check whether this URL token has a protocol
   * @return {boolean}
   */
  hasProtocol() {
    const tokens = this.tk;
    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;
  }
});
var multi = Object.freeze({
  __proto__: null,
  MultiToken,
  Base: MultiToken,
  createTokenClass,
  Email,
  Text: Text2,
  Nl,
  Url
});
var makeState = (arg) => new State(arg);
function init$1(_ref) {
  let {
    groups
  } = _ref;
  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);
  const qsNonAccepting = [APOSTROPHE, CLOSEANGLEBRACKET, CLOSEBRACE, CLOSEBRACKET, CLOSEPAREN, COLON, COMMA, DOT, EXCLAMATION, OPENANGLEBRACKET, OPENBRACE, OPENBRACKET, OPENPAREN, QUERY, QUOTE, SEMI];
  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, CLOSEBRACE, DOLLAR, EQUALS, HYPHEN, OPENBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];
  const Start = makeState();
  const Localpart = tt(Start, TILDE);
  ta(Localpart, localpartAccepting, Localpart);
  ta(Localpart, groups.domain, Localpart);
  const Domain = makeState(), Scheme = makeState(), SlashScheme = makeState();
  ta(Start, groups.domain, Domain);
  ta(Start, groups.scheme, Scheme);
  ta(Start, groups.slashscheme, SlashScheme);
  ta(Domain, localpartAccepting, Localpart);
  ta(Domain, groups.domain, Domain);
  const LocalpartAt = tt(Domain, AT);
  tt(Localpart, AT, LocalpartAt);
  tt(Scheme, AT, LocalpartAt);
  tt(SlashScheme, AT, LocalpartAt);
  const LocalpartDot = tt(Localpart, DOT);
  ta(LocalpartDot, localpartAccepting, Localpart);
  ta(LocalpartDot, groups.domain, Localpart);
  const EmailDomain = makeState();
  ta(LocalpartAt, groups.domain, EmailDomain);
  ta(EmailDomain, groups.domain, EmailDomain);
  const EmailDomainDot = tt(EmailDomain, DOT);
  ta(EmailDomainDot, groups.domain, EmailDomain);
  const Email$1 = makeState(Email);
  ta(EmailDomainDot, groups.tld, Email$1);
  ta(EmailDomainDot, groups.utld, Email$1);
  tt(LocalpartAt, LOCALHOST, Email$1);
  const EmailDomainHyphen = tt(EmailDomain, HYPHEN);
  ta(EmailDomainHyphen, groups.domain, EmailDomain);
  ta(Email$1, groups.domain, EmailDomain);
  tt(Email$1, DOT, EmailDomainDot);
  tt(Email$1, HYPHEN, EmailDomainHyphen);
  const EmailColon = tt(Email$1, COLON);
  ta(EmailColon, groups.numeric, Email);
  const DomainHyphen = tt(Domain, HYPHEN);
  const DomainDot = tt(Domain, DOT);
  ta(DomainHyphen, groups.domain, Domain);
  ta(DomainDot, localpartAccepting, Localpart);
  ta(DomainDot, groups.domain, Domain);
  const DomainDotTld = makeState(Url);
  ta(DomainDot, groups.tld, DomainDotTld);
  ta(DomainDot, groups.utld, DomainDotTld);
  ta(DomainDotTld, groups.domain, Domain);
  ta(DomainDotTld, localpartAccepting, Localpart);
  tt(DomainDotTld, DOT, DomainDot);
  tt(DomainDotTld, HYPHEN, DomainHyphen);
  tt(DomainDotTld, AT, LocalpartAt);
  const DomainDotTldColon = tt(DomainDotTld, COLON);
  const DomainDotTldColonPort = makeState(Url);
  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);
  const Url$1 = makeState(Url);
  const UrlNonaccept = makeState();
  ta(Url$1, qsAccepting, Url$1);
  ta(Url$1, qsNonAccepting, UrlNonaccept);
  ta(UrlNonaccept, qsAccepting, Url$1);
  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);
  tt(DomainDotTld, SLASH, Url$1);
  tt(DomainDotTldColonPort, SLASH, Url$1);
  const SchemeColon = tt(Scheme, COLON);
  const SlashSchemeColon = tt(SlashScheme, COLON);
  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH);
  const UriPrefix = tt(SlashSchemeColonSlash, SLASH);
  ta(Scheme, groups.domain, Domain);
  tt(Scheme, DOT, DomainDot);
  tt(Scheme, HYPHEN, DomainHyphen);
  ta(SlashScheme, groups.domain, Domain);
  tt(SlashScheme, DOT, DomainDot);
  tt(SlashScheme, HYPHEN, DomainHyphen);
  ta(SchemeColon, groups.domain, Url$1);
  tt(SchemeColon, SLASH, Url$1);
  ta(UriPrefix, groups.domain, Url$1);
  ta(UriPrefix, qsAccepting, Url$1);
  tt(UriPrefix, SLASH, Url$1);
  const UrlOpenbrace = tt(Url$1, OPENBRACE);
  const UrlOpenbracket = tt(Url$1, OPENBRACKET);
  const UrlOpenanglebracket = tt(Url$1, OPENANGLEBRACKET);
  const UrlOpenparen = tt(Url$1, OPENPAREN);
  tt(UrlNonaccept, OPENBRACE, UrlOpenbrace);
  tt(UrlNonaccept, OPENBRACKET, UrlOpenbracket);
  tt(UrlNonaccept, OPENANGLEBRACKET, UrlOpenanglebracket);
  tt(UrlNonaccept, OPENPAREN, UrlOpenparen);
  tt(UrlOpenbrace, CLOSEBRACE, Url$1);
  tt(UrlOpenbracket, CLOSEBRACKET, Url$1);
  tt(UrlOpenanglebracket, CLOSEANGLEBRACKET, Url$1);
  tt(UrlOpenparen, CLOSEPAREN, Url$1);
  tt(UrlOpenbrace, CLOSEBRACE, Url$1);
  const UrlOpenbraceQ = makeState(Url);
  const UrlOpenbracketQ = makeState(Url);
  const UrlOpenanglebracketQ = makeState(Url);
  const UrlOpenparenQ = makeState(Url);
  ta(UrlOpenbrace, qsAccepting, UrlOpenbraceQ);
  ta(UrlOpenbracket, qsAccepting, UrlOpenbracketQ);
  ta(UrlOpenanglebracket, qsAccepting, UrlOpenanglebracketQ);
  ta(UrlOpenparen, qsAccepting, UrlOpenparenQ);
  const UrlOpenbraceSyms = makeState();
  const UrlOpenbracketSyms = makeState();
  const UrlOpenanglebracketSyms = makeState();
  const UrlOpenparenSyms = makeState();
  ta(UrlOpenbrace, qsNonAccepting);
  ta(UrlOpenbracket, qsNonAccepting);
  ta(UrlOpenanglebracket, qsNonAccepting);
  ta(UrlOpenparen, qsNonAccepting);
  ta(UrlOpenbraceQ, qsAccepting, UrlOpenbraceQ);
  ta(UrlOpenbracketQ, qsAccepting, UrlOpenbracketQ);
  ta(UrlOpenanglebracketQ, qsAccepting, UrlOpenanglebracketQ);
  ta(UrlOpenparenQ, qsAccepting, UrlOpenparenQ);
  ta(UrlOpenbraceQ, qsNonAccepting, UrlOpenbraceQ);
  ta(UrlOpenbracketQ, qsNonAccepting, UrlOpenbracketQ);
  ta(UrlOpenanglebracketQ, qsNonAccepting, UrlOpenanglebracketQ);
  ta(UrlOpenparenQ, qsNonAccepting, UrlOpenparenQ);
  ta(UrlOpenbraceSyms, qsAccepting, UrlOpenbraceSyms);
  ta(UrlOpenbracketSyms, qsAccepting, UrlOpenbracketQ);
  ta(UrlOpenanglebracketSyms, qsAccepting, UrlOpenanglebracketQ);
  ta(UrlOpenparenSyms, qsAccepting, UrlOpenparenQ);
  ta(UrlOpenbraceSyms, qsNonAccepting, UrlOpenbraceSyms);
  ta(UrlOpenbracketSyms, qsNonAccepting, UrlOpenbracketSyms);
  ta(UrlOpenanglebracketSyms, qsNonAccepting, UrlOpenanglebracketSyms);
  ta(UrlOpenparenSyms, qsNonAccepting, UrlOpenparenSyms);
  tt(UrlOpenbracketQ, CLOSEBRACKET, Url$1);
  tt(UrlOpenanglebracketQ, CLOSEANGLEBRACKET, Url$1);
  tt(UrlOpenparenQ, CLOSEPAREN, Url$1);
  tt(UrlOpenbraceQ, CLOSEBRACE, Url$1);
  tt(UrlOpenbracketSyms, CLOSEBRACKET, Url$1);
  tt(UrlOpenanglebracketSyms, CLOSEANGLEBRACKET, Url$1);
  tt(UrlOpenparenSyms, CLOSEPAREN, Url$1);
  tt(UrlOpenbraceSyms, CLOSEPAREN, Url$1);
  tt(Start, LOCALHOST, DomainDotTld);
  tt(Start, NL$1, Nl);
  return {
    start: Start,
    tokens: tk
  };
}
function run3(start2, input3, tokens) {
  let len = tokens.length;
  let cursor2 = 0;
  let multis = [];
  let textTokens = [];
  while (cursor2 < len) {
    let state = start2;
    let secondState = null;
    let nextState = null;
    let multiLength = 0;
    let latestAccepting = null;
    let sinceAccepts = -1;
    while (cursor2 < len && !(secondState = state.go(tokens[cursor2].t))) {
      textTokens.push(tokens[cursor2++]);
    }
    while (cursor2 < len && (nextState = secondState || state.go(tokens[cursor2].t))) {
      secondState = null;
      state = nextState;
      if (state.accepts()) {
        sinceAccepts = 0;
        latestAccepting = state;
      } else if (sinceAccepts >= 0) {
        sinceAccepts++;
      }
      cursor2++;
      multiLength++;
    }
    if (sinceAccepts < 0) {
      cursor2 -= multiLength;
      if (cursor2 < len) {
        textTokens.push(tokens[cursor2]);
        cursor2++;
      }
    } else {
      if (textTokens.length > 0) {
        multis.push(initMultiToken(Text2, input3, textTokens));
        textTokens = [];
      }
      cursor2 -= sinceAccepts;
      multiLength -= sinceAccepts;
      const Multi = latestAccepting.t;
      const subtokens = tokens.slice(cursor2 - multiLength, cursor2);
      multis.push(initMultiToken(Multi, input3, subtokens));
    }
  }
  if (textTokens.length > 0) {
    multis.push(initMultiToken(Text2, input3, textTokens));
  }
  return multis;
}
function initMultiToken(Multi, input3, tokens) {
  const startIdx = tokens[0].s;
  const endIdx = tokens[tokens.length - 1].e;
  const value = input3.slice(startIdx, endIdx);
  return new Multi(value, tokens);
}
var warn = typeof console !== "undefined" && console && console.warn || (() => {
});
var warnAdvice = "until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.";
var INIT = {
  scanner: null,
  parser: null,
  tokenQueue: [],
  pluginQueue: [],
  customSchemes: [],
  initialized: false
};
function reset() {
  State.groups = {};
  INIT.scanner = null;
  INIT.parser = null;
  INIT.tokenQueue = [];
  INIT.pluginQueue = [];
  INIT.customSchemes = [];
  INIT.initialized = false;
}
function registerCustomProtocol(scheme2, optionalSlashSlash) {
  if (optionalSlashSlash === void 0) {
    optionalSlashSlash = false;
  }
  if (INIT.initialized) {
    warn(`linkifyjs: already initialized - will not register custom scheme "${scheme2}" ${warnAdvice}`);
  }
  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme2)) {
    throw new Error('linkifyjs: incorrect scheme format.\n 1. Must only contain digits, lowercase ASCII letters or "-"\n 2. Cannot start or end with "-"\n 3. "-" cannot repeat');
  }
  INIT.customSchemes.push([scheme2, optionalSlashSlash]);
}
function init2() {
  INIT.scanner = init$2(INIT.customSchemes);
  for (let i = 0; i < INIT.tokenQueue.length; i++) {
    INIT.tokenQueue[i][1]({
      scanner: INIT.scanner
    });
  }
  INIT.parser = init$1(INIT.scanner.tokens);
  for (let i = 0; i < INIT.pluginQueue.length; i++) {
    INIT.pluginQueue[i][1]({
      scanner: INIT.scanner,
      parser: INIT.parser
    });
  }
  INIT.initialized = true;
}
function tokenize3(str) {
  if (!INIT.initialized) {
    init2();
  }
  return run3(INIT.parser.start, str, run$12(INIT.scanner.start, str));
}
function find4(str, type, opts) {
  if (type === void 0) {
    type = null;
  }
  if (opts === void 0) {
    opts = null;
  }
  if (type && typeof type === "object") {
    if (opts) {
      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);
    }
    opts = type;
    type = null;
  }
  const options2 = new Options(opts);
  const tokens = tokenize3(str);
  const filtered = [];
  for (let i = 0; i < tokens.length; i++) {
    const token2 = tokens[i];
    if (token2.isLink && (!type || token2.t === type)) {
      filtered.push(token2.toFormattedObject(options2));
    }
  }
  return filtered;
}
function test(str, type) {
  if (type === void 0) {
    type = null;
  }
  const tokens = tokenize3(str);
  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);
}

// node_modules/@tiptap/extension-link/dist/index.js
function autolink2(options2) {
  return new Plugin({
    key: new PluginKey("autolink"),
    appendTransaction: (transactions, oldState, newState) => {
      const docChanges = transactions.some((transaction) => transaction.docChanged) && !oldState.doc.eq(newState.doc);
      const preventAutolink = transactions.some((transaction) => transaction.getMeta("preventAutolink"));
      if (!docChanges || preventAutolink) {
        return;
      }
      const { tr: tr4 } = newState;
      const transform2 = combineTransactionSteps(oldState.doc, [...transactions]);
      const { mapping } = transform2;
      const changes = getChangedRanges(transform2);
      changes.forEach(({ oldRange, newRange }) => {
        getMarksBetween(oldRange.from, oldRange.to, oldState.doc).filter((item) => item.mark.type === options2.type).forEach((oldMark) => {
          const newFrom = mapping.map(oldMark.from);
          const newTo = mapping.map(oldMark.to);
          const newMarks = getMarksBetween(newFrom, newTo, newState.doc).filter((item) => item.mark.type === options2.type);
          if (!newMarks.length) {
            return;
          }
          const newMark = newMarks[0];
          const oldLinkText = oldState.doc.textBetween(oldMark.from, oldMark.to, void 0, " ");
          const newLinkText = newState.doc.textBetween(newMark.from, newMark.to, void 0, " ");
          const wasLink = test(oldLinkText);
          const isLink = test(newLinkText);
          if (wasLink && !isLink) {
            tr4.removeMark(newMark.from, newMark.to, options2.type);
          }
        });
        const nodesInChangedRanges = findChildrenInRange(newState.doc, newRange, (node4) => node4.isTextblock);
        let textBlock;
        let textBeforeWhitespace;
        if (nodesInChangedRanges.length > 1) {
          textBlock = nodesInChangedRanges[0];
          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, void 0, " ");
        } else if (nodesInChangedRanges.length && newState.doc.textBetween(newRange.from, newRange.to, " ", " ").endsWith(" ")) {
          textBlock = nodesInChangedRanges[0];
          textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, void 0, " ");
        }
        if (textBlock && textBeforeWhitespace) {
          const wordsBeforeWhitespace = textBeforeWhitespace.split(" ").filter((s2) => s2 !== "");
          if (wordsBeforeWhitespace.length <= 0) {
            return false;
          }
          const lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];
          const lastWordAndBlockOffset = textBlock.pos + textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);
          if (!lastWordBeforeSpace) {
            return false;
          }
          find4(lastWordBeforeSpace).filter((link3) => link3.isLink).filter((link3) => {
            if (options2.validate) {
              return options2.validate(link3.value);
            }
            return true;
          }).map((link3) => ({
            ...link3,
            from: lastWordAndBlockOffset + link3.start + 1,
            to: lastWordAndBlockOffset + link3.end + 1
          })).forEach((link3) => {
            tr4.addMark(link3.from, link3.to, options2.type.create({
              href: link3.href
            }));
          });
        }
      });
      if (!tr4.steps.length) {
        return;
      }
      return tr4;
    }
  });
}
function clickHandler(options2) {
  return new Plugin({
    key: new PluginKey("handleClickLink"),
    props: {
      handleClick: (view, pos, event) => {
        var _a, _b, _c;
        if (event.button !== 0) {
          return false;
        }
        const attrs = getAttributes(view.state, options2.type.name);
        const link3 = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest("a");
        const href = (_b = link3 === null || link3 === void 0 ? void 0 : link3.href) !== null && _b !== void 0 ? _b : attrs.href;
        const target = (_c = link3 === null || link3 === void 0 ? void 0 : link3.target) !== null && _c !== void 0 ? _c : attrs.target;
        if (link3 && href) {
          window.open(href, target);
          return true;
        }
        return false;
      }
    }
  });
}
function pasteHandler(options2) {
  return new Plugin({
    key: new PluginKey("handlePasteLink"),
    props: {
      handlePaste: (view, event, slice3) => {
        const { state } = view;
        const { selection } = state;
        const { empty: empty2 } = selection;
        if (empty2) {
          return false;
        }
        let textContent = "";
        slice3.content.forEach((node4) => {
          textContent += node4.textContent;
        });
        const link3 = find4(textContent).find((item) => item.isLink && item.value === textContent);
        if (!textContent || !link3) {
          return false;
        }
        options2.editor.commands.setMark(options2.type, {
          href: link3.href
        });
        return true;
      }
    }
  });
}
var Link = Mark2.create({
  name: "link",
  priority: 1e3,
  keepOnSplit: false,
  onCreate() {
    this.options.protocols.forEach((protocol) => {
      if (typeof protocol === "string") {
        registerCustomProtocol(protocol);
        return;
      }
      registerCustomProtocol(protocol.scheme, protocol.optionalSlashes);
    });
  },
  onDestroy() {
    reset();
  },
  inclusive() {
    return this.options.autolink;
  },
  addOptions() {
    return {
      openOnClick: true,
      linkOnPaste: true,
      autolink: true,
      protocols: [],
      HTMLAttributes: {
        target: "_blank",
        rel: "noopener noreferrer nofollow",
        class: null
      },
      validate: void 0
    };
  },
  addAttributes() {
    return {
      href: {
        default: null
      },
      target: {
        default: this.options.HTMLAttributes.target
      },
      class: {
        default: this.options.HTMLAttributes.class
      }
    };
  },
  parseHTML() {
    return [{ tag: 'a[href]:not([href *= "javascript:" i])' }];
  },
  renderHTML({ HTMLAttributes }) {
    return ["a", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setLink: (attributes) => ({ chain: chain2 }) => {
        return chain2().setMark(this.name, attributes).setMeta("preventAutolink", true).run();
      },
      toggleLink: (attributes) => ({ chain: chain2 }) => {
        return chain2().toggleMark(this.name, attributes, { extendEmptyMarkRange: true }).setMeta("preventAutolink", true).run();
      },
      unsetLink: () => ({ chain: chain2 }) => {
        return chain2().unsetMark(this.name, { extendEmptyMarkRange: true }).setMeta("preventAutolink", true).run();
      }
    };
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: (text10) => find4(text10).filter((link3) => {
          if (this.options.validate) {
            return this.options.validate(link3.value);
          }
          return true;
        }).filter((link3) => link3.isLink).map((link3) => ({
          text: link3.value,
          index: link3.start,
          data: link3
        })),
        type: this.type,
        getAttributes: (match2) => {
          var _a;
          return {
            href: (_a = match2.data) === null || _a === void 0 ? void 0 : _a.href
          };
        }
      })
    ];
  },
  addProseMirrorPlugins() {
    const plugins = [];
    if (this.options.autolink) {
      plugins.push(autolink2({
        type: this.type,
        validate: this.options.validate
      }));
    }
    if (this.options.openOnClick) {
      plugins.push(clickHandler({
        type: this.type
      }));
    }
    if (this.options.linkOnPaste) {
      plugins.push(pasteHandler({
        editor: this.editor,
        type: this.type
      }));
    }
    return plugins;
  }
});

// node_modules/@tiptap/extension-strike/dist/index.js
var inputRegex2 = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))$/;
var pasteRegex2 = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))/g;
var Strike = Mark2.create({
  name: "strike",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "s"
      },
      {
        tag: "del"
      },
      {
        tag: "strike"
      },
      {
        style: "text-decoration",
        consuming: false,
        getAttrs: (style3) => style3.includes("line-through") ? {} : false
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["s", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setStrike: () => ({ commands: commands2 }) => {
        return commands2.setMark(this.name);
      },
      toggleStrike: () => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name);
      },
      unsetStrike: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-Shift-x": () => this.editor.commands.toggleStrike()
    };
  },
  addInputRules() {
    return [
      markInputRule({
        find: inputRegex2,
        type: this.type
      })
    ];
  },
  addPasteRules() {
    return [
      markPasteRule({
        find: pasteRegex2,
        type: this.type
      })
    ];
  }
});

// node_modules/@tiptap/extension-text/dist/index.js
var Text3 = Node2.create({
  name: "text",
  group: "inline"
});

// node_modules/@tiptap/extension-underline/dist/index.js
var Underline = Mark2.create({
  name: "underline",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "u"
      },
      {
        style: "text-decoration",
        consuming: false,
        getAttrs: (style3) => style3.includes("underline") ? {} : false
      }
    ];
  },
  renderHTML({ HTMLAttributes }) {
    return ["u", mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
  },
  addCommands() {
    return {
      setUnderline: () => ({ commands: commands2 }) => {
        return commands2.setMark(this.name);
      },
      toggleUnderline: () => ({ commands: commands2 }) => {
        return commands2.toggleMark(this.name);
      },
      unsetUnderline: () => ({ commands: commands2 }) => {
        return commands2.unsetMark(this.name);
      }
    };
  },
  addKeyboardShortcuts() {
    return {
      "Mod-u": () => this.editor.commands.toggleUnderline(),
      "Mod-U": () => this.editor.commands.toggleUnderline()
    };
  }
});

// node_modules/@blocknote/core/dist/blocknote.js
var Et = Object.defineProperty;
var Ct = (o, t, e) => t in o ? Et(o, t, { enumerable: true, configurable: true, writable: true, value: e }) : o[t] = e;
var u = (o, t, e) => (Ct(o, typeof t != "symbol" ? t + "" : t, e), e);
var O = [
  "backgroundColor",
  "textColor",
  "textAlignment"
];
var tt2 = {
  paragraph: /* @__PURE__ */ new Set([...O]),
  heading: /* @__PURE__ */ new Set([
    ...O,
    "level"
  ]),
  numberedListItem: /* @__PURE__ */ new Set([
    ...O
  ]),
  bulletListItem: /* @__PURE__ */ new Set([...O])
};
function g(o, t) {
  if (t < 0 || t > o.nodeSize)
    return;
  const e = o.resolve(t), r = e.depth;
  let n = e.node(r), i = r;
  for (; ; ) {
    if (i < 0)
      return;
    if (n.type.name === "blockContainer")
      break;
    i -= 1, n = e.node(i);
  }
  const a2 = n.attrs.id, s2 = n.firstChild, l = s2.type, d = n.childCount === 2 ? n.lastChild.childCount : 0, c = e.start(i), h2 = e.end(i);
  return {
    id: a2,
    node: n,
    contentNode: s2,
    contentType: l,
    numChildBlocks: d,
    startPos: c,
    endPos: h2,
    depth: i
  };
}
function Xt(o, t = JSON.stringify) {
  const e = {};
  return o.filter((r) => {
    const n = t(r);
    return Object.prototype.hasOwnProperty.call(e, n) ? false : e[n] = true;
  });
}
function Qt(o) {
  const t = o.filter(
    (r, n) => o.indexOf(r) !== n
  );
  return Xt(t);
}
var Y = Extension.create({
  name: "uniqueID",
  // we’ll set a very high priority to make sure this runs first
  // and is compatible with `appendTransaction` hooks of other extensions
  priority: 1e4,
  addOptions() {
    return {
      attributeName: "id",
      types: [],
      generateID: () => window.__TEST_OPTIONS ? (window.__TEST_OPTIONS.mockID === void 0 ? window.__TEST_OPTIONS.mockID = 0 : window.__TEST_OPTIONS.mockID++, window.__TEST_OPTIONS.mockID.toString()) : v4_default(),
      filterTransaction: null
    };
  },
  addGlobalAttributes() {
    return [
      {
        types: this.options.types,
        attributes: {
          [this.options.attributeName]: {
            default: null,
            parseHTML: (o) => o.getAttribute(`data-${this.options.attributeName}`),
            renderHTML: (o) => ({
              [`data-${this.options.attributeName}`]: o[this.options.attributeName]
            })
          }
        }
      }
    ];
  },
  // check initial content for missing ids
  onCreate() {
    if (this.editor.extensionManager.extensions.find(
      (l) => l.name === "collaboration"
    ))
      return;
    const { view: o, state: t } = this.editor, { tr: e, doc: r } = t, { types: n, attributeName: i, generateID: a2 } = this.options;
    findChildren(r, (l) => n.includes(l.type.name) && l.attrs[i] === null).forEach(({ node: l, pos: d }) => {
      e.setNodeMarkup(d, void 0, {
        ...l.attrs,
        [i]: a2()
      });
    }), e.setMeta("addToHistory", false), o.dispatch(e);
  },
  addProseMirrorPlugins() {
    let o = null, t = false;
    return [
      new Plugin({
        key: new PluginKey("uniqueID"),
        appendTransaction: (e, r, n) => {
          const i = e.some((m) => m.docChanged) && !r.doc.eq(n.doc), a2 = this.options.filterTransaction && e.some((m) => {
            var y, k;
            return !(!((k = (y = this.options).filterTransaction) === null || k === void 0) && k.call(y, m));
          });
          if (!i || a2)
            return;
          const { tr: s2 } = n, { types: l, attributeName: d, generateID: c } = this.options, h2 = combineTransactionSteps(
            r.doc,
            e
          ), { mapping: f2 } = h2;
          if (getChangedRanges(h2).forEach(({ newRange: m }) => {
            const y = findChildrenInRange(
              n.doc,
              m,
              (M) => l.includes(M.type.name)
            ), k = y.map(({ node: M }) => M.attrs[d]).filter((M) => M !== null), z = Qt(k);
            y.forEach(({ node: M, pos: H }) => {
              var U;
              const J = (U = s2.doc.nodeAt(H)) === null || U === void 0 ? void 0 : U.attrs[d];
              if (J === null) {
                s2.setNodeMarkup(H, void 0, {
                  ...M.attrs,
                  [d]: c()
                });
                return;
              }
              const { deleted: vt } = f2.invert().mapResult(H);
              vt && z.includes(J) && s2.setNodeMarkup(H, void 0, {
                ...M.attrs,
                [d]: c()
              });
            });
          }), !!s2.steps.length)
            return s2;
        },
        // we register a global drag handler to track the current drag source element
        view(e) {
          const r = (n) => {
            var i;
            o = !((i = e.dom.parentElement) === null || i === void 0) && i.contains(n.target) ? e.dom.parentElement : null;
          };
          return window.addEventListener("dragstart", r), {
            destroy() {
              window.removeEventListener("dragstart", r);
            }
          };
        },
        props: {
          // `handleDOMEvents` is called before `transformPasted`
          // so we can do some checks before
          handleDOMEvents: {
            // only create new ids for dropped content while holding `alt`
            // or content is dragged from another editor
            drop: (e, r) => {
              var n;
              return (o !== e.dom.parentElement || ((n = r.dataTransfer) === null || n === void 0 ? void 0 : n.effectAllowed) === "copy") && (o = null, t = true), false;
            },
            // always create new ids on pasted content
            paste: () => (t = true, false)
          },
          // we’ll remove ids for every pasted node
          // so we can create a new one within `appendTransaction`
          transformPasted: (e) => {
            if (!t)
              return e;
            const { types: r, attributeName: n } = this.options, i = (a2) => {
              const s2 = [];
              return a2.forEach((l) => {
                if (l.isText) {
                  s2.push(l);
                  return;
                }
                if (!r.includes(l.type.name)) {
                  s2.push(l.copy(i(l.content)));
                  return;
                }
                const d = l.type.create(
                  {
                    ...l.attrs,
                    [n]: null
                  },
                  i(l.content),
                  l.marks
                );
                s2.push(d);
              }), Fragment.from(s2);
            };
            return t = false, new Slice(
              i(e.content),
              e.openStart,
              e.openEnd
            );
          }
        }
      })
    ];
  }
});
var Zt = class extends Error {
  constructor(t) {
    super(`Unreachable case: ${t}`);
  }
};
var dt3 = /* @__PURE__ */ new Set([
  "bold",
  "italic",
  "underline",
  "strike",
  "code"
]);
var ct = /* @__PURE__ */ new Set(["textColor", "backgroundColor"]);
function te(o, t) {
  const e = [];
  for (const [r, n] of Object.entries(o.styles))
    dt3.has(r) ? e.push(t.mark(r)) : ct.has(r) && e.push(t.mark(r, { color: n }));
  return t.text(o.text, e);
}
function ee(o, t) {
  const e = t.marks.link.create({
    href: o.href
  });
  return ut(o.content, t).map((r) => r.mark([...r.marks, e]));
}
function ut(o, t) {
  let e = [];
  if (typeof o == "string")
    return e.push(t.text(o)), e;
  for (const r of o)
    e.push(te(r, t));
  return e;
}
function ht(o, t) {
  let e = [];
  for (const r of o)
    if (r.type === "link")
      e.push(...ee(r, t));
    else if (r.type === "text")
      e.push(...ut([r], t));
    else
      throw new Zt(r);
  return e;
}
function R(o, t) {
  let e = o.id;
  e === void 0 && (e = Y.options.generateID());
  let r = o.type;
  r === void 0 && (r = "paragraph");
  let n;
  if (!o.content)
    n = t.nodes[r].create(o.props);
  else if (typeof o.content == "string")
    n = t.nodes[r].create(
      o.props,
      t.text(o.content)
    );
  else {
    const s2 = ht(o.content, t);
    n = t.nodes[r].create(o.props, s2);
  }
  const i = [];
  if (o.children)
    for (const s2 of o.children)
      i.push(R(s2, t));
  const a2 = t.nodes.blockGroup.create({}, i);
  return t.nodes.blockContainer.create(
    {
      id: e,
      ...o.props
    },
    i.length > 0 ? [n, a2] : n
  );
}
function oe(o) {
  const t = [];
  let e;
  return o.content.forEach((r) => {
    const n = {};
    let i;
    for (const a2 of r.marks)
      if (a2.type.name === "link")
        i = a2;
      else if (dt3.has(a2.type.name))
        n[a2.type.name] = true;
      else if (ct.has(a2.type.name))
        n[a2.type.name] = a2.attrs.color;
      else
        throw Error("Mark is of an unrecognized type: " + a2.type.name);
    i && e && i.attrs.href === e.href ? e.content.push({
      type: "text",
      text: r.textContent,
      styles: n
    }) : i ? (e = {
      type: "link",
      href: i.attrs.href,
      content: [
        {
          type: "text",
          text: r.textContent,
          styles: n
        }
      ]
    }, t.push(e)) : (t.push({
      type: "text",
      text: r.textContent,
      styles: n
    }), e = void 0);
  }), t;
}
function B(o, t) {
  if (o.type.name !== "blockContainer")
    throw Error(
      "Node must be of type blockContainer, but is of type" + o.type.name + "."
    );
  const e = t == null ? void 0 : t.get(o);
  if (e)
    return e;
  const r = g(o, 0);
  let n = r.id;
  n === null && (n = Y.options.generateID());
  const i = {};
  for (const [d, c] of Object.entries({
    ...r.node.attrs,
    ...r.contentNode.attrs
  })) {
    if (!(r.contentType.name in tt2))
      throw Error(
        "Block is of an unrecognized type: " + r.contentType.name
      );
    tt2[r.contentType.name].has(d) && (i[d] = c);
  }
  const a2 = oe(r.contentNode), s2 = [];
  for (let d = 0; d < r.numChildBlocks; d++)
    s2.push(B(r.node.lastChild.child(d)));
  const l = {
    id: n,
    type: r.contentType.name,
    props: i,
    content: a2,
    children: s2
  };
  return t == null || t.set(o, l), l;
}
function K(o, t) {
  let e, r;
  if (t.firstChild.descendants((n, i) => e ? false : n.type.name !== "blockContainer" || n.attrs.id !== o ? true : (e = n, r = i + 1, false)), e === void 0 || r === void 0)
    throw Error("Could not find block in the editor with matching ID.");
  return {
    node: e,
    posBeforeNode: r
  };
}
function pt(o, t, e = "before", r) {
  const n = typeof t == "string" ? t : t.id, i = [];
  for (const d of o)
    i.push(R(d, r.schema));
  let a2 = -1;
  const { node: s2, posBeforeNode: l } = K(n, r.state.doc);
  if (e === "before" && (a2 = l), e === "after" && (a2 = l + s2.nodeSize), e === "nested") {
    if (s2.childCount < 2) {
      a2 = l + s2.firstChild.nodeSize + 1;
      const d = r.state.schema.nodes.blockGroup.create(
        {},
        i
      );
      r.view.dispatch(
        r.state.tr.insert(a2, d)
      );
      return;
    }
    a2 = l + s2.firstChild.nodeSize + 2;
  }
  r.view.dispatch(r.state.tr.insert(a2, i));
}
function re(o, t, e) {
  const r = typeof o == "string" ? o : o.id, { posBeforeNode: n } = K(r, e.state.doc);
  e.commands.BNUpdateBlock(n + 1, t);
}
function ft(o, t) {
  const e = new Set(
    o.map(
      (n) => typeof n == "string" ? n : n.id
    )
  );
  let r = 0;
  if (t.state.doc.descendants((n, i) => {
    if (e.size === 0)
      return false;
    if (n.type.name !== "blockContainer" || !e.has(n.attrs.id))
      return true;
    e.delete(n.attrs.id);
    const a2 = t.state.doc.nodeSize;
    t.commands.BNDeleteBlock(i - r + 1);
    const s2 = t.state.doc.nodeSize;
    return r += a2 - s2, false;
  }), e.size > 0) {
    let n = [...e].join(`
`);
    throw Error(
      "Blocks with the following IDs could not be found in the editor: " + n
    );
  }
}
function ne(o, t, e) {
  pt(t, o[0], "before", e), ft(o, e);
}
function ie3() {
  const o = (t) => {
    let e = t.children.length;
    for (let r = 0; r < e; r++) {
      const n = t.children[r];
      if (n.type === "element" && (o(n), n.tagName === "u"))
        if (n.children.length > 0) {
          t.children.splice(r, 1, ...n.children);
          const i = n.children.length - 1;
          e += i, r += i;
        } else
          t.children.splice(r, 1), e--, r--;
    }
  };
  return o;
}
function se(o) {
  const t = /* @__PURE__ */ new Set([
    ...o.orderedListItemBlockTypes,
    ...o.unorderedListItemBlockTypes
  ]), e = (r) => {
    let n = r.children.length, i;
    for (let a2 = 0; a2 < n; a2++) {
      const l = r.children[a2].children[0], d = l.children[0], c = l.children.length === 2 ? l.children[1] : null, h2 = t.has(
        d.properties.dataContentType
      ), f2 = h2 ? o.orderedListItemBlockTypes.has(
        d.properties.dataContentType
      ) ? "ol" : "ul" : null;
      if (c !== null && e(c), i && i.tagName !== f2) {
        r.children.splice(
          a2 - i.children.length,
          i.children.length,
          i
        );
        const p5 = i.children.length - 1;
        a2 -= p5, n -= p5, i = void 0;
      }
      if (h2) {
        i || (i = fromDom(
          document.createElement(f2)
        ));
        const p5 = fromDom(
          document.createElement("li")
        );
        p5.children.push(d.children[0]), c !== null && p5.children.push(...c.children), i.children.push(p5);
      } else if (c !== null) {
        r.children.splice(a2 + 1, 0, ...c.children), r.children[a2] = d.children[0];
        const p5 = c.children.length;
        a2 += p5, n += p5;
      } else
        r.children[a2] = d.children[0];
    }
    i && r.children.splice(
      n - i.children.length,
      i.children.length,
      i
    );
  };
  return e;
}
async function mt(o, t) {
  const e = document.createElement("div"), r = DOMSerializer.fromSchema(t);
  for (const i of o) {
    const a2 = R(i, t), s2 = r.serializeNode(a2);
    e.appendChild(s2);
  }
  return (await unified().use(rehypeParse, { fragment: true }).use(se, {
    orderedListItemBlockTypes: /* @__PURE__ */ new Set(["numberedListItem"]),
    unorderedListItemBlockTypes: /* @__PURE__ */ new Set(["bulletListItem"])
  }).use(rehypeStringify).process(e.innerHTML)).value;
}
async function gt(o, t) {
  const e = document.createElement("div");
  e.innerHTML = o.trim();
  const n = DOMParser2.fromSchema(t).parse(e), i = [];
  for (let a2 = 0; a2 < n.firstChild.childCount; a2++)
    i.push(B(n.firstChild.child(a2)));
  return i;
}
async function ae(o, t) {
  return (await unified().use(rehypeParse, { fragment: true }).use(ie3).use(lib_default).use(remarkGfm).use(remarkStringify).process(await mt(o, t))).value;
}
async function le(o, t) {
  const e = await unified().use(remarkParse).use(remarkGfm).use(lib_default2).use(rehypeStringify).process(o);
  return gt(e.value, t);
}
var de = "_bnEditor_ywyu7_3";
var ce = "_bnRoot_ywyu7_20";
var ue = "_defaultStyles_ywyu7_35";
var he = "_dragPreview_ywyu7_69";
var _ = {
  bnEditor: de,
  bnRoot: ce,
  defaultStyles: ue,
  dragPreview: he,
  "collaboration-cursor__caret": "_collaboration-cursor__caret_ywyu7_75",
  "collaboration-cursor__label": "_collaboration-cursor__label_ywyu7_86"
};
var pe = Extension.create({
  name: "blockBackgroundColor",
  addGlobalAttributes() {
    return [
      {
        types: ["blockContainer"],
        attributes: {
          backgroundColor: {
            default: "default",
            parseHTML: (o) => o.hasAttribute("data-background-color") ? o.getAttribute("data-background-color") : "default",
            renderHTML: (o) => o.backgroundColor !== "default" && {
              "data-background-color": o.backgroundColor
            }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setBlockBackgroundColor: (o, t) => ({ state: e, view: r }) => {
        const n = g(e.doc, o);
        return n === void 0 ? false : (e.tr.setNodeAttribute(
          n.startPos - 1,
          "backgroundColor",
          t
        ), r.focus(), true);
      }
    };
  }
});
var fe = Mark2.create({
  name: "backgroundColor",
  addAttributes() {
    return {
      color: {
        default: void 0,
        parseHTML: (o) => o.getAttribute("data-background-color"),
        renderHTML: (o) => ({
          "data-background-color": o.color
        })
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (o) => typeof o == "string" ? false : o.hasAttribute("data-background-color") ? { color: o.getAttribute("data-background-color") } : false
      }
    ];
  },
  renderHTML({ HTMLAttributes: o }) {
    return ["span", o, 0];
  },
  addCommands() {
    return {
      setBackgroundColor: (o) => ({ commands: t }) => o !== "default" ? t.setMark(this.name, { color: o }) : t.unsetMark(this.name)
    };
  }
});
var et = new PluginKey("previous-blocks");
var me = {
  // Numbered List Items
  index: "index",
  // Headings
  level: "level",
  // All Blocks
  type: "type",
  depth: "depth",
  "depth-change": "depth-change"
};
var ge = () => {
  let o;
  return new Plugin({
    key: et,
    view(t) {
      return {
        update: async (e, r) => {
          var n;
          ((n = this.key) == null ? void 0 : n.getState(e.state).updatedBlocks.size) > 0 && (o = setTimeout(() => {
            e.dispatch(
              e.state.tr.setMeta(et, { clearUpdate: true })
            );
          }, 0));
        },
        destroy: () => {
          o && clearTimeout(o);
        }
      };
    },
    state: {
      init() {
        return {
          // Block attributes, by block ID, from just before the previous transaction.
          prevTransactionOldBlockAttrs: {},
          // Block attributes, by block ID, from just before the current transaction.
          currentTransactionOldBlockAttrs: {},
          // Set of IDs of blocks whose attributes changed from the current transaction.
          updatedBlocks: /* @__PURE__ */ new Set()
        };
      },
      apply(t, e, r, n) {
        if (e.currentTransactionOldBlockAttrs = {}, e.updatedBlocks.clear(), !t.docChanged || r.doc.eq(n.doc))
          return e;
        const i = {}, a2 = findChildren(r.doc, (d) => d.attrs.id), s2 = new Map(
          a2.map((d) => [d.node.attrs.id, d])
        ), l = findChildren(n.doc, (d) => d.attrs.id);
        for (let d of l) {
          const c = s2.get(d.node.attrs.id), h2 = c == null ? void 0 : c.node.firstChild, f2 = d.node.firstChild;
          if (c && h2 && f2) {
            const p5 = {
              index: f2.attrs.index,
              level: f2.attrs.level,
              type: f2.type.name,
              depth: n.doc.resolve(d.pos).depth
            };
            let m = {
              index: h2.attrs.index,
              level: h2.attrs.level,
              type: h2.type.name,
              depth: r.doc.resolve(c.pos).depth
            };
            i[d.node.attrs.id] = m, t.getMeta("numberedListIndexing") && (d.node.attrs.id in e.prevTransactionOldBlockAttrs && (m = e.prevTransactionOldBlockAttrs[d.node.attrs.id]), p5.type === "numberedListItem" && (m.index = p5.index)), e.currentTransactionOldBlockAttrs[d.node.attrs.id] = m, JSON.stringify(m) !== JSON.stringify(p5) && (m["depth-change"] = m.depth - p5.depth, e.updatedBlocks.add(d.node.attrs.id));
          }
        }
        return e.prevTransactionOldBlockAttrs = i, e;
      }
    },
    props: {
      decorations(t) {
        const e = this.getState(t);
        if (e.updatedBlocks.size === 0)
          return;
        const r = [];
        return t.doc.descendants((n, i) => {
          if (!n.attrs.id || !e.updatedBlocks.has(n.attrs.id))
            return;
          const a2 = e.currentTransactionOldBlockAttrs[n.attrs.id], s2 = {};
          for (let [d, c] of Object.entries(a2))
            s2["data-prev-" + me[d]] = c || "none";
          const l = Decoration.node(i, i + n.nodeSize, {
            ...s2
          });
          r.push(l);
        }), DecorationSet.create(t.doc, r);
      }
    }
  });
};
var ke = "_blockOuter_1qj38_5";
var ye = "_blockContent_1qj38_10";
var be = "_blockGroup_1qj38_30";
var ve = "_block_1qj38_5";
var Ee = "_isEmpty_1qj38_228";
var Ce = "_isFilter_1qj38_229";
var Me = "_hasAnchor_1qj38_251";
var b = {
  blockOuter: ke,
  blockContent: ye,
  blockGroup: be,
  block: ve,
  isEmpty: Ee,
  isFilter: Ce,
  hasAnchor: Me
};
var Be = {
  blockColor: "data-block-color",
  blockStyle: "data-block-style",
  id: "data-id",
  depth: "data-depth",
  depthChange: "data-depth-change"
};
var Te = Node2.create({
  name: "blockContainer",
  group: "blockContainer",
  // A block always contains content, and optionally a blockGroup which contains nested blocks
  content: "blockContent blockGroup?",
  // Ensures content-specific keyboard handlers trigger first.
  priority: 50,
  defining: true,
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "div",
        getAttrs: (o) => {
          if (typeof o == "string")
            return false;
          const t = {};
          for (let [e, r] of Object.entries(Be))
            o.getAttribute(r) && (t[e] = o.getAttribute(r));
          return o.getAttribute("data-node-type") === "blockContainer" ? t : false;
        }
      }
    ];
  },
  renderHTML({ HTMLAttributes: o }) {
    return [
      "div",
      mergeAttributes(o, {
        class: b.blockOuter,
        "data-node-type": "block-outer"
      }),
      [
        "div",
        mergeAttributes(o, {
          // TODO: maybe remove html attributes from inner block
          class: b.block,
          "data-node-type": this.name
        }),
        0
      ]
    ];
  },
  addCommands() {
    return {
      // Creates a new text block at a given position.
      BNCreateBlock: (o) => ({ state: t, dispatch: e }) => {
        const r = t.schema.nodes.blockContainer.createAndFill();
        return e && t.tr.insert(o, r), true;
      },
      // Deletes a block at a given position.
      BNDeleteBlock: (o) => ({ state: t, dispatch: e }) => {
        const r = g(t.doc, o);
        if (r === void 0)
          return false;
        const { startPos: n, endPos: i } = r;
        return e && t.tr.deleteRange(n, i), true;
      },
      // Updates a block at a given position.
      BNUpdateBlock: (o, t) => ({ state: e, dispatch: r }) => {
        const n = g(e.doc, o);
        if (n === void 0)
          return false;
        const { startPos: i, endPos: a2, node: s2, contentNode: l } = n;
        if (r) {
          if (t.children !== void 0) {
            const d = [];
            for (const c of t.children)
              d.push(R(c, e.schema));
            s2.childCount === 2 ? e.tr.replace(
              i + l.nodeSize + 1,
              a2 - 1,
              new Slice(Fragment.from(d), 0, 0)
            ) : e.tr.insert(
              i + l.nodeSize,
              e.schema.nodes.blockGroup.create({}, d)
            );
          }
          if (t.content !== void 0) {
            let d = [];
            typeof t.content == "string" ? d.push(e.schema.text(t.content)) : d = ht(t.content, e.schema), e.tr.replace(
              i + 1,
              i + l.nodeSize - 1,
              new Slice(Fragment.from(d), 0, 0)
            );
          }
          e.tr.setNodeMarkup(
            i,
            t.type === void 0 ? void 0 : e.schema.nodes[t.type],
            {
              ...l.attrs,
              ...t.props
            }
          ), e.tr.setNodeMarkup(i - 1, void 0, {
            ...s2.attrs,
            ...t.props
          });
        }
        return true;
      },
      // Appends the text contents of a block to the nearest previous block, given a position between them. Children of
      // the merged block are moved out of it first, rather than also being merged.
      //
      // In the example below, the position passed into the function is between Block1 and Block2.
      //
      // Block1
      //    Block2
      // Block3
      //    Block4
      //        Block5
      //
      // Becomes:
      //
      // Block1
      //    Block2Block3
      // Block4
      //     Block5
      BNMergeBlocks: (o) => ({ state: t, dispatch: e }) => {
        const r = t.doc.resolve(o + 1).node().type.name === "blockContainer", n = t.doc.resolve(o - 1).node().type.name === "blockContainer";
        if (!r || !n)
          return false;
        const i = g(
          t.doc,
          o + 1
        ), { node: a2, contentNode: s2, startPos: l, endPos: d, depth: c } = i;
        if (a2.childCount === 2) {
          const p5 = t.doc.resolve(
            l + s2.nodeSize + 1
          ), m = t.doc.resolve(d - 1), y = p5.blockRange(m);
          e && t.tr.lift(y, c - 1);
        }
        let h2 = o - 1, f2 = g(t.doc, h2);
        for (; f2.numChildBlocks > 0; )
          if (h2--, f2 = g(t.doc, h2), f2 === void 0)
            return false;
        return e && (t.tr.deleteRange(l, l + s2.nodeSize), t.tr.insertText(s2.textContent, h2 - 1), t.tr.setSelection(
          new TextSelection(t.doc.resolve(h2 - 1))
        )), true;
      },
      // Splits a block at a given position. Content after the position is moved to a new block below, at the same
      // nesting level.
      BNSplitBlock: (o, t) => ({ state: e, dispatch: r }) => {
        const n = g(e.doc, o);
        if (n === void 0)
          return false;
        const { contentNode: i, contentType: a2, startPos: s2, endPos: l, depth: d } = n, c = e.doc.cut(s2 + 1, o), h2 = e.doc.cut(o, l - 1), f2 = e.schema.nodes.blockContainer.createAndFill(), p5 = l + 1, m = p5 + 2;
        return r && (e.tr.insert(p5, f2), e.tr.replace(
          m,
          m + 1,
          h2.content.size > 0 ? new Slice(
            Fragment.from(h2),
            d + 2,
            d + 2
          ) : void 0
        ), t && e.tr.setBlockType(
          m,
          m,
          e.schema.node(a2).type,
          i.attrs
        ), e.tr.setSelection(
          new TextSelection(e.doc.resolve(m))
        ), e.tr.replace(
          s2 + 1,
          l - 1,
          c.content.size > 0 ? new Slice(
            Fragment.from(c),
            d + 2,
            d + 2
          ) : void 0
        )), true;
      }
    };
  },
  addProseMirrorPlugins() {
    return [ge()];
  },
  addKeyboardShortcuts() {
    return {
      Backspace: () => this.editor.commands.first(({ commands: e }) => [
        // Deletes the selection if it's not empty.
        () => e.deleteSelection(),
        // Undoes an input rule if one was triggered in the last editor state change.
        () => e.undoInputRule(),
        // Reverts block content type to a paragraph if the selection is at the start of the block.
        () => e.command(({ state: r }) => {
          const { contentType: n } = g(
            r.doc,
            r.selection.from
          ), i = r.selection.$anchor.parentOffset === 0, a2 = n.name === "paragraph";
          return i && !a2 ? e.BNUpdateBlock(r.selection.from, {
            type: "paragraph",
            props: {}
          }) : false;
        }),
        // Removes a level of nesting if the block is indented if the selection is at the start of the block.
        () => e.command(({ state: r }) => r.selection.$anchor.parentOffset === 0 ? e.liftListItem("blockContainer") : false),
        // Merges block with the previous one if it isn't indented, isn't the first block in the doc, and the selection
        // is at the start of the block.
        () => e.command(({ state: r }) => {
          const { depth: n, startPos: i } = g(
            r.doc,
            r.selection.from
          ), a2 = r.selection.$anchor.parentOffset === 0, s2 = r.selection.anchor === r.selection.head, l = i === 2, d = i - 1;
          return !l && a2 && s2 && n === 2 ? e.BNMergeBlocks(d) : false;
        })
      ]),
      Enter: () => this.editor.commands.first(({ commands: e }) => [
        // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start
        // of the block.
        () => e.command(({ state: r }) => {
          const { node: n, depth: i } = g(
            r.doc,
            r.selection.from
          ), a2 = r.selection.$anchor.parentOffset === 0, s2 = r.selection.anchor === r.selection.head, l = n.textContent.length === 0, d = i > 2;
          return a2 && s2 && l && d ? e.liftListItem("blockContainer") : false;
        }),
        // Creates a new block and moves the selection to it if the current one is empty, while the selection is also
        // empty & at the start of the block.
        () => e.command(({ state: r, chain: n }) => {
          const { node: i, endPos: a2 } = g(
            r.doc,
            r.selection.from
          ), s2 = r.selection.$anchor.parentOffset === 0, l = r.selection.anchor === r.selection.head, d = i.textContent.length === 0;
          if (s2 && l && d) {
            const c = a2 + 1, h2 = c + 2;
            return n().BNCreateBlock(c).setTextSelection(h2).run(), true;
          }
          return false;
        }),
        // Splits the current block, moving content inside that's after the cursor to a new text block below. Also
        // deletes the selection beforehand, if it's not empty.
        () => e.command(({ state: r, chain: n }) => {
          const { node: i } = g(
            r.doc,
            r.selection.from
          );
          return i.textContent.length === 0 ? false : (n().deleteSelection().BNSplitBlock(r.selection.from, false).run(), true);
        })
      ]),
      // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the
      // editor since the browser will try to use tab for keyboard navigation.
      Tab: () => (this.editor.commands.sinkListItem("blockContainer"), true),
      "Shift-Tab": () => (this.editor.commands.liftListItem("blockContainer"), true),
      "Mod-Alt-0": () => this.editor.commands.BNCreateBlock(
        this.editor.state.selection.anchor + 2
      ),
      "Mod-Alt-1": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {
        type: "heading",
        props: {
          level: "1"
        }
      }),
      "Mod-Alt-2": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {
        type: "heading",
        props: {
          level: "2"
        }
      }),
      "Mod-Alt-3": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {
        type: "heading",
        props: {
          level: "3"
        }
      }),
      "Mod-Shift-7": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {
        type: "bulletListItem",
        props: {}
      }),
      "Mod-Shift-8": () => this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {
        type: "numberedListItem",
        props: {}
      })
    };
  }
});
var we = Node2.create({
  name: "blockGroup",
  group: "blockGroup",
  content: "blockContainer+",
  addOptions() {
    return {
      HTMLAttributes: {}
    };
  },
  parseHTML() {
    return [
      {
        tag: "div",
        getAttrs: (o) => typeof o == "string" ? false : o.getAttribute("data-node-type") === "blockGroup" ? null : false
      }
    ];
  },
  renderHTML({ HTMLAttributes: o }) {
    return [
      "div",
      mergeAttributes(this.options.HTMLAttributes, o, {
        class: b.blockGroup,
        "data-node-type": "blockGroup"
      }),
      0
    ];
  }
});
var Se = Node2.create({
  name: "paragraph",
  group: "blockContent",
  content: "inline*",
  parseHTML() {
    return [
      {
        tag: "p",
        priority: 200,
        node: "paragraph"
      }
    ];
  },
  renderHTML({ HTMLAttributes: o }) {
    return [
      "div",
      mergeAttributes(o, {
        class: b.blockContent,
        "data-content-type": this.name
      }),
      ["p", 0]
    ];
  }
});
var xe = Node2.create({
  name: "heading",
  group: "blockContent",
  content: "inline*",
  addAttributes() {
    return {
      level: {
        default: "1",
        // instead of "level" attributes, use "data-level"
        parseHTML: (o) => o.getAttribute("data-level"),
        renderHTML: (o) => ({
          "data-level": o.level
        })
      }
    };
  },
  addInputRules() {
    return [
      ...["1", "2", "3"].map((o) => new InputRule({
        find: new RegExp(`^(#{${parseInt(o)}})\\s$`),
        handler: ({ state: t, chain: e, range: r }) => {
          e().BNUpdateBlock(t.selection.from, {
            type: "heading",
            props: {
              level: o
            }
          }).deleteRange({ from: r.from, to: r.to });
        }
      }))
    ];
  },
  parseHTML() {
    return [
      {
        tag: "h1",
        attrs: { level: "1" },
        node: "heading"
      },
      {
        tag: "h2",
        attrs: { level: "2" },
        node: "heading"
      },
      {
        tag: "h3",
        attrs: { level: "3" },
        node: "heading"
      }
    ];
  },
  renderHTML({ node: o, HTMLAttributes: t }) {
    return [
      "div",
      mergeAttributes(t, {
        class: b.blockContent,
        "data-content-type": this.name
      }),
      ["h" + o.attrs.level, 0]
    ];
  }
});
var kt = (o) => {
  const { node: t, contentType: e } = g(
    o.state.doc,
    o.state.selection.from
  ), r = o.state.selection.anchor === o.state.selection.head;
  return !e.name.endsWith("ListItem") || !r ? false : o.commands.first(({ state: n, chain: i, commands: a2 }) => [
    () => (
      // Changes list item block to a text block if the content is empty.
      a2.command(() => t.textContent.length === 0 ? a2.BNUpdateBlock(n.selection.from, {
        type: "paragraph",
        props: {}
      }) : false)
    ),
    () => (
      // Splits the current block, moving content inside that's after the cursor to a new block of the same type
      // below.
      a2.command(() => t.textContent.length > 0 ? (i().deleteSelection().BNSplitBlock(n.selection.from, true).run(), true) : false)
    )
  ]);
};
var Ie = Node2.create({
  name: "bulletListItem",
  group: "blockContent",
  content: "inline*",
  addInputRules() {
    return [
      // Creates an unordered list when starting with "-", "+", or "*".
      new InputRule({
        find: new RegExp("^[-+*]\\s$"),
        handler: ({ state: o, chain: t, range: e }) => {
          t().BNUpdateBlock(o.selection.from, {
            type: "bulletListItem",
            props: {}
          }).deleteRange({ from: e.from, to: e.to });
        }
      })
    ];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => kt(this.editor)
    };
  },
  parseHTML() {
    return [
      // Case for regular HTML list structure.
      {
        tag: "li",
        getAttrs: (o) => {
          if (typeof o == "string")
            return false;
          const t = o.parentElement;
          return t === null ? false : t.tagName === "UL" ? {} : false;
        },
        node: "bulletListItem"
      },
      // Case for BlockNote list structure.
      {
        tag: "p",
        getAttrs: (o) => {
          if (typeof o == "string")
            return false;
          const t = o.parentElement;
          return t === null ? false : t.getAttribute("data-content-type") === "bulletListItem" ? {} : false;
        },
        priority: 300,
        node: "bulletListItem"
      }
    ];
  },
  renderHTML({ HTMLAttributes: o }) {
    return [
      "div",
      mergeAttributes(o, {
        class: b.blockContent,
        "data-content-type": this.name
      }),
      ["p", 0]
    ];
  }
});
var Pe = new PluginKey("numbered-list-indexing");
var Le = () => new Plugin({
  key: Pe,
  appendTransaction: (o, t, e) => {
    const r = e.tr;
    r.setMeta("numberedListIndexing", true);
    let n = false;
    return e.doc.descendants((i, a2) => {
      if (i.type.name === "blockContainer" && i.firstChild.type.name === "numberedListItem") {
        let s2 = "1";
        const l = a2 === 1, d = g(r.doc, a2 + 1);
        if (d === void 0)
          return;
        if (!l) {
          const f2 = g(r.doc, a2 - 2);
          if (f2 === void 0)
            return;
          if (!(d.depth !== f2.depth)) {
            const m = f2.contentNode;
            if (f2.contentType.name === "numberedListItem") {
              const z = m.attrs.index;
              s2 = (parseInt(z) + 1).toString();
            }
          }
        }
        d.contentNode.attrs.index !== s2 && (n = true, r.setNodeMarkup(a2 + 1, void 0, {
          index: s2
        }));
      }
    }), n ? r : null;
  }
});
var _e = Node2.create({
  name: "numberedListItem",
  group: "blockContent",
  content: "inline*",
  addAttributes() {
    return {
      index: {
        default: null,
        parseHTML: (o) => o.getAttribute("data-index"),
        renderHTML: (o) => ({
          "data-index": o.index
        })
      }
    };
  },
  addInputRules() {
    return [
      // Creates an ordered list when starting with "1.".
      new InputRule({
        find: new RegExp("^1\\.\\s$"),
        handler: ({ state: o, chain: t, range: e }) => {
          t().BNUpdateBlock(o.selection.from, {
            type: "numberedListItem",
            props: {}
          }).deleteRange({ from: e.from, to: e.to });
        }
      })
    ];
  },
  addKeyboardShortcuts() {
    return {
      Enter: () => kt(this.editor)
    };
  },
  addProseMirrorPlugins() {
    return [Le()];
  },
  parseHTML() {
    return [
      // Case for regular HTML list structure.
      // (e.g.: when pasting from other apps)
      {
        tag: "li",
        getAttrs: (o) => {
          if (typeof o == "string")
            return false;
          const t = o.parentElement;
          return t === null ? false : t.tagName === "OL" ? {} : false;
        },
        node: "numberedListItem"
      },
      // Case for BlockNote list structure.
      // (e.g.: when pasting from blocknote)
      {
        tag: "p",
        getAttrs: (o) => {
          if (typeof o == "string")
            return false;
          const t = o.parentElement;
          return t === null ? false : t.getAttribute("data-content-type") === "numberedListItem" ? {} : false;
        },
        priority: 300,
        node: "numberedListItem"
      }
    ];
  },
  renderHTML({ HTMLAttributes: o }) {
    return [
      "div",
      mergeAttributes(o, {
        class: b.blockContent,
        "data-content-type": this.name
      }),
      // we use a <p> tag, because for <li> tags we'd need to add a <ul> parent for around siblings to be semantically correct,
      // which would be quite cumbersome
      ["p", 0]
    ];
  }
});
var Ae = [
  Se,
  xe,
  Ie,
  _e,
  Te,
  we,
  Node2.create({
    name: "doc",
    topNode: true,
    content: "blockGroup"
  })
];
var Ne = findParentNode(
  (o) => o.type.name === "blockContainer"
);
function q2() {
  return {
    active: false,
    triggerCharacter: void 0,
    queryStartPos: void 0,
    items: [],
    keyboardHoveredItemIndex: void 0,
    notFoundCount: 0,
    decorationId: void 0
  };
}
var He = class {
  constructor({
    editor: t,
    pluginKey: e,
    onSelectItem: r = () => {
    },
    suggestionsMenuFactory: n
  }) {
    u(this, "editor");
    u(this, "pluginKey");
    u(this, "suggestionsMenu");
    u(this, "pluginState");
    u(this, "itemCallback");
    u(this, "handleScroll", () => {
      this.pluginKey.getState(this.editor._tiptapEditor.state).active && this.suggestionsMenu.render(this.getDynamicParams(), false);
    });
    this.editor = t, this.pluginKey = e, this.pluginState = q2(), this.itemCallback = (i) => {
      t._tiptapEditor.chain().focus().deleteRange({
        from: this.pluginState.queryStartPos - this.pluginState.triggerCharacter.length,
        to: t._tiptapEditor.state.selection.from
      }).run(), r({
        item: i,
        editor: t
      });
    }, this.suggestionsMenu = n(this.getStaticParams()), document.addEventListener("scroll", this.handleScroll);
  }
  update(t, e) {
    const r = this.pluginKey.getState(e), n = this.pluginKey.getState(t.state), i = !r.active && n.active, a2 = r.active && !n.active, s2 = r.active && n.active;
    !i && !s2 && !a2 || (this.pluginState = a2 ? r : n, (a2 || !this.editor.isEditable) && (this.suggestionsMenu.hide(), this.suggestionsMenu.element.removeEventListener(
      "mousedown",
      (l) => l.preventDefault()
    )), s2 && this.suggestionsMenu.render(this.getDynamicParams(), false), i && this.editor.isEditable && (this.suggestionsMenu.render(this.getDynamicParams(), true), this.suggestionsMenu.element.addEventListener(
      "mousedown",
      (l) => l.preventDefault()
    )));
  }
  destroy() {
    document.removeEventListener("scroll", this.handleScroll);
  }
  getStaticParams() {
    return {
      itemCallback: (t) => this.itemCallback(t)
    };
  }
  getDynamicParams() {
    const t = document.querySelector(
      `[data-decoration-id="${this.pluginState.decorationId}"]`
    );
    return {
      items: this.pluginState.items,
      keyboardHoveredItemIndex: this.pluginState.keyboardHoveredItemIndex,
      referenceRect: t.getBoundingClientRect()
    };
  }
};
function Oe({
  pluginKey: o,
  editor: t,
  defaultTriggerCharacter: e,
  suggestionsMenuFactory: r,
  onSelectItem: n = () => {
  },
  items: i = () => []
}) {
  if (e.length !== 1)
    throw new Error("'char' should be a single character");
  const a2 = (s2) => {
    s2.dispatch(s2.state.tr.setMeta(o, { deactivate: true }));
  };
  return new Plugin({
    key: o,
    view: (s2) => new He({
      editor: t,
      pluginKey: o,
      onSelectItem: (l) => {
        a2(s2), n(l);
      },
      suggestionsMenuFactory: r
    }),
    state: {
      // Initialize the plugin's internal state.
      init() {
        return q2();
      },
      // Apply changes to the plugin state from an editor transaction.
      apply(s2, l, d, c) {
        var f2, p5, m, y;
        if (s2.getMeta("orderedListIndexing") !== void 0)
          return l;
        if ((f2 = s2.getMeta(o)) != null && f2.activate)
          return {
            active: true,
            triggerCharacter: ((p5 = s2.getMeta(o)) == null ? void 0 : p5.triggerCharacter) || "",
            queryStartPos: c.selection.from,
            items: i(""),
            keyboardHoveredItemIndex: 0,
            // TODO: Maybe should be 1 if the menu has no possible items? Probably redundant since a menu with no items
            //  is useless in practice.
            notFoundCount: 0,
            decorationId: `id_${Math.floor(Math.random() * 4294967295)}`
          };
        if (!l.active)
          return l;
        const h2 = { ...l };
        if (h2.items = i(
          c.doc.textBetween(l.queryStartPos, c.selection.from)
        ), h2.notFoundCount = 0, h2.items.length === 0 && (h2.notFoundCount = Math.max(
          0,
          l.notFoundCount + (c.selection.from - d.selection.from)
        )), // Highlighting text should hide the menu.
        c.selection.from !== c.selection.to || // Transactions with plugin metadata {deactivate: true} should hide the menu.
        (m = s2.getMeta(o)) != null && m.deactivate || // Certain mouse events should hide the menu.
        // TODO: Change to global mousedown listener.
        s2.getMeta("focus") || s2.getMeta("blur") || s2.getMeta("pointer") || // Moving the caret before the character which triggered the menu should hide it.
        l.active && c.selection.from < l.queryStartPos || // Entering more than 3 characters, after the last query that matched with at least 1 menu item, should hide
        // the menu.
        h2.notFoundCount > 3)
          return q2();
        if (((y = s2.getMeta(o)) == null ? void 0 : y.selectedItemIndexChanged) !== void 0) {
          let k = s2.getMeta(o).selectedItemIndexChanged;
          k < 0 ? k = l.items.length - 1 : k >= l.items.length && (k = 0), h2.keyboardHoveredItemIndex = k;
        }
        return h2;
      }
    },
    props: {
      handleKeyDown(s2, l) {
        const d = this.getState(s2.state).active;
        if (l.key === e && !d)
          return s2.dispatch(
            s2.state.tr.insertText(e).scrollIntoView().setMeta(o, {
              activate: true,
              triggerCharacter: e
            })
          ), true;
        if (!d)
          return false;
        const {
          triggerCharacter: c,
          queryStartPos: h2,
          items: f2,
          keyboardHoveredItemIndex: p5
        } = o.getState(s2.state);
        return l.key === "ArrowUp" ? (s2.dispatch(
          s2.state.tr.setMeta(o, {
            selectedItemIndexChanged: p5 - 1
          })
        ), true) : l.key === "ArrowDown" ? (s2.dispatch(
          s2.state.tr.setMeta(o, {
            selectedItemIndexChanged: p5 + 1
          })
        ), true) : l.key === "Enter" ? (a2(s2), t._tiptapEditor.chain().focus().deleteRange({
          from: h2 - c.length,
          to: t._tiptapEditor.state.selection.from
        }).run(), n({
          item: f2[p5],
          editor: t
        }), true) : l.key === "Escape" ? (a2(s2), true) : false;
      },
      // Hides menu in cases where mouse click does not cause an editor state change.
      handleClick(s2) {
        a2(s2);
      },
      // Setup decorator on the currently active suggestion.
      decorations(s2) {
        const { active: l, decorationId: d, queryStartPos: c, triggerCharacter: h2 } = this.getState(s2);
        if (!l)
          return null;
        if (h2 === "") {
          const f2 = Ne(s2.selection);
          if (f2)
            return DecorationSet.create(s2.doc, [
              Decoration.node(
                f2.pos,
                f2.pos + f2.node.nodeSize,
                {
                  nodeName: "span",
                  class: "suggestion-decorator",
                  "data-decoration-id": d
                }
              )
            ]);
        }
        return DecorationSet.create(s2.doc, [
          Decoration.inline(
            c - h2.length,
            c,
            {
              nodeName: "span",
              class: "suggestion-decorator",
              "data-decoration-id": d
            }
          )
        ]);
      }
    }
  });
}
var V = new PluginKey("suggestions-slash-commands");
var De = Extension.create({
  name: "slash-command",
  addOptions() {
    return {
      editor: void 0,
      commands: void 0,
      slashMenuFactory: void 0
    };
  },
  addProseMirrorPlugins() {
    if (!this.options.slashMenuFactory || !this.options.commands)
      throw new Error("required args not defined for SlashMenuExtension");
    const o = this.options.commands;
    return [
      Oe({
        pluginKey: V,
        editor: this.options.editor,
        defaultTriggerCharacter: "/",
        suggestionsMenuFactory: this.options.slashMenuFactory,
        items: (t) => o.filter((e) => e.match(t)),
        onSelectItem: ({ item: t, editor: e }) => {
          t.execute(e);
        }
      })
    ];
  }
});
var A = class extends Selection {
  constructor(e, r) {
    super(e, r);
    u(this, "nodes");
    const n = e.node();
    this.nodes = [], e.doc.nodesBetween(e.pos, r.pos, (i, a2, s2) => {
      if (s2 !== null && s2.eq(n))
        return this.nodes.push(i), false;
    });
  }
  static create(e, r, n = r) {
    return new A(e.resolve(r), e.resolve(n));
  }
  content() {
    return new Slice(Fragment.from(this.nodes), 0, 0);
  }
  eq(e) {
    if (!(e instanceof A) || this.nodes.length !== e.nodes.length || this.from !== e.from || this.to !== e.to)
      return false;
    for (let r = 0; r < this.nodes.length; r++)
      if (!this.nodes[r].eq(e.nodes[r]))
        return false;
    return true;
  }
  map(e, r) {
    let n = r.mapResult(this.from), i = r.mapResult(this.to);
    return i.deleted ? Selection.near(e.resolve(n.pos)) : n.deleted ? Selection.near(e.resolve(i.pos)) : new A(
      e.resolve(n.pos),
      e.resolve(i.pos)
    );
  }
  toJSON() {
    return { type: "node", anchor: this.anchor, head: this.head };
  }
};
var Fe = __serializeForClipboard;
var T;
function yt(o, t) {
  var n;
  if (!t.dom.isConnected)
    return;
  let e = t.posAtCoords(o);
  if (!e)
    return;
  let r = t.domAtPos(e.pos).node;
  if (r !== t.dom) {
    for (; r && r.parentNode && r.parentNode !== t.dom && !((n = r.hasAttribute) != null && n.call(r, "data-id")); )
      r = r.parentNode;
    if (r)
      return { node: r, id: r.getAttribute("data-id") };
  }
}
function Re(o, t) {
  let e = yt(o, t);
  if (e && e.node.nodeType === 1) {
    const r = t.docView;
    let n = r.nearestDesc(e.node, true);
    return !n || n === r ? null : n.posBefore;
  }
  return null;
}
function ze(o, t) {
  let e, r;
  const n = t.resolve(o.from).node().type.spec.group === "blockContent", i = t.resolve(o.to).node().type.spec.group === "blockContent", a2 = Math.min(o.$anchor.depth, o.$head.depth);
  if (n && i) {
    const s2 = o.$from.start(a2 - 1), l = o.$to.end(a2 - 1);
    e = t.resolve(s2 - 1).pos, r = t.resolve(l + 1).pos;
  } else
    e = o.from, r = o.to;
  return { from: e, to: r };
}
function ot(o, t, e = t) {
  t === e && (e += o.state.doc.resolve(t + 1).node().nodeSize);
  const r = o.domAtPos(t).node.cloneNode(true), n = o.domAtPos(t).node, i = (c, h2) => Array.prototype.indexOf.call(c.children, h2), a2 = i(
    n,
    // Expects from position to be just before the first selected block.
    o.domAtPos(t + 1).node.parentElement
  ), s2 = i(
    n,
    // Expects to position to be just after the last selected block.
    o.domAtPos(e - 1).node.parentElement
  );
  for (let c = n.childElementCount - 1; c >= 0; c--)
    (c > s2 || c < a2) && r.removeChild(r.children[c]);
  bt(), T = r;
  const d = o.dom.className.split(" ").filter(
    (c) => !c.includes("bn") && !c.includes("ProseMirror") && !c.includes("editor")
  ).join(" ");
  T.className = T.className + " " + _.dragPreview + " " + d, document.body.appendChild(T);
}
function bt() {
  T !== void 0 && (document.body.removeChild(T), T = void 0);
}
function Ue(o, t) {
  if (!o.dataTransfer)
    return;
  const e = t.dom.getBoundingClientRect();
  let r = {
    left: e.left + e.width / 2,
    // take middle of editor
    top: o.clientY
  }, n = Re(r, t);
  if (n != null) {
    const i = t.state.selection, a2 = t.state.doc, { from: s2, to: l } = ze(i, a2), d = s2 <= n && n < l, c = i.$anchor.node() !== i.$head.node() || i instanceof A;
    d && c ? (t.dispatch(
      t.state.tr.setSelection(A.create(a2, s2, l))
    ), ot(t, s2, l)) : (t.dispatch(
      t.state.tr.setSelection(NodeSelection.create(t.state.doc, n))
    ), ot(t, n));
    let h2 = t.state.selection.content(), { dom: f2, text: p5 } = Fe(t, h2);
    o.dataTransfer.clearData(), o.dataTransfer.setData("text/html", f2.innerHTML), o.dataTransfer.setData("text/plain", p5), o.dataTransfer.effectAllowed = "move", o.dataTransfer.setDragImage(T, 0, 0), t.dragging = { slice: h2, move: true };
  }
}
var $e = class {
  constructor({
    tiptapEditor: t,
    editor: e,
    blockMenuFactory: r,
    horizontalPosAnchoredAtRoot: n
  }) {
    u(this, "editor");
    u(this, "ttEditor");
    u(this, "horizontalPosAnchoredAtRoot");
    u(this, "horizontalPosAnchor");
    u(this, "blockMenu");
    u(this, "hoveredBlock");
    u(this, "isDragging", false);
    u(this, "menuOpen", false);
    u(this, "menuFrozen", false);
    u(this, "onDragStart", () => {
      this.isDragging = true;
    });
    u(this, "onDrop", (t2) => {
      if (t2.synthetic || !this.isDragging)
        return;
      let e2 = this.ttEditor.view.posAtCoords({
        left: t2.clientX,
        top: t2.clientY
      });
      if (this.isDragging = false, !e2 || e2.inside === -1) {
        const r2 = new Event("drop", t2), n2 = this.ttEditor.view.dom.firstChild.getBoundingClientRect();
        r2.clientX = n2.left + n2.width / 2, r2.clientY = t2.clientY, r2.dataTransfer = t2.dataTransfer, r2.preventDefault = () => t2.preventDefault(), r2.synthetic = true, this.ttEditor.view.dom.dispatchEvent(r2);
      }
    });
    u(this, "onDragOver", (t2) => {
      if (t2.synthetic || !this.isDragging)
        return;
      let e2 = this.ttEditor.view.posAtCoords({
        left: t2.clientX,
        top: t2.clientY
      });
      if (!e2 || e2.inside === -1) {
        const r2 = new Event("dragover", t2), n2 = this.ttEditor.view.dom.firstChild.getBoundingClientRect();
        r2.clientX = n2.left + n2.width / 2, r2.clientY = t2.clientY, r2.dataTransfer = t2.dataTransfer, r2.preventDefault = () => t2.preventDefault(), r2.synthetic = true, this.ttEditor.view.dom.dispatchEvent(r2);
      }
    });
    u(this, "onKeyDown", (t2) => {
      this.menuOpen && (this.menuOpen = false, this.blockMenu.hide()), this.menuFrozen = false;
    });
    u(this, "onMouseDown", (t2) => {
      var e2;
      (e2 = this.blockMenu.element) != null && e2.contains(t2.target) || (this.menuOpen && (this.menuOpen = false, this.blockMenu.hide()), this.menuFrozen = false);
    });
    u(this, "onMouseMove", (t2) => {
      var a2, s2;
      if (this.menuFrozen)
        return;
      const e2 = this.ttEditor.view.dom.firstChild.getBoundingClientRect();
      this.horizontalPosAnchor = e2.x;
      const r2 = {
        left: e2.left + e2.width / 2,
        // take middle of editor
        top: t2.clientY
      }, n2 = yt(r2, this.ttEditor.view);
      if (!n2 || !this.editor.isEditable) {
        this.menuOpen && (this.menuOpen = false, this.blockMenu.hide());
        return;
      }
      this.menuOpen && ((a2 = this.hoveredBlock) != null && a2.hasAttribute("data-id")) && ((s2 = this.hoveredBlock) == null ? void 0 : s2.getAttribute("data-id")) === n2.id || (this.hoveredBlock = n2.node, !n2.node.firstChild) || this.editor.isEditable && (this.menuOpen ? this.blockMenu.render(this.getDynamicParams(), false) : (this.menuOpen = true, this.blockMenu.render(this.getDynamicParams(), true)));
    });
    u(this, "onScroll", () => {
      this.menuOpen && this.blockMenu.render(this.getDynamicParams(), false);
    });
    this.editor = e, this.ttEditor = t, this.horizontalPosAnchoredAtRoot = n, this.horizontalPosAnchor = this.ttEditor.view.dom.firstChild.getBoundingClientRect().x, this.blockMenu = r(this.getStaticParams()), document.body.addEventListener("drop", this.onDrop, true), document.body.addEventListener("dragover", this.onDragOver), this.ttEditor.view.dom.addEventListener("dragstart", this.onDragStart), document.body.addEventListener("mousemove", this.onMouseMove, true), document.addEventListener("scroll", this.onScroll), document.body.addEventListener("mousedown", this.onMouseDown, true), document.body.addEventListener("keydown", this.onKeyDown, true);
  }
  destroy() {
    this.menuOpen && (this.menuOpen = false, this.blockMenu.hide()), document.body.removeEventListener("mousemove", this.onMouseMove), document.body.removeEventListener("dragover", this.onDragOver), this.ttEditor.view.dom.removeEventListener("dragstart", this.onDragStart), document.body.removeEventListener("drop", this.onDrop), document.body.removeEventListener("mousedown", this.onMouseDown), document.removeEventListener("scroll", this.onScroll), document.body.removeEventListener("keydown", this.onKeyDown);
  }
  addBlock() {
    this.menuOpen = false, this.menuFrozen = true, this.blockMenu.hide();
    const e = this.hoveredBlock.firstChild.getBoundingClientRect(), r = this.ttEditor.view.posAtCoords({
      left: e.left + e.width / 2,
      top: e.top + e.height / 2
    });
    if (!r)
      return;
    const n = g(this.ttEditor.state.doc, r.pos);
    if (n === void 0)
      return;
    const { contentNode: i, endPos: a2 } = n;
    if (i.textContent.length !== 0) {
      const s2 = a2 + 1, l = s2 + 2;
      this.ttEditor.chain().BNCreateBlock(s2).BNUpdateBlock(l, { type: "paragraph", props: {} }).setTextSelection(l).run();
    } else
      this.ttEditor.commands.setTextSelection(a2);
    this.ttEditor.view.focus(), this.ttEditor.view.dispatch(
      this.ttEditor.view.state.tr.scrollIntoView().setMeta(V, {
        // TODO import suggestion plugin key
        activate: true,
        type: "drag"
      })
    );
  }
  getStaticParams() {
    return {
      editor: this.editor,
      addBlock: () => this.addBlock(),
      blockDragStart: (t) => {
        this.isDragging = true, Ue(t, this.ttEditor.view);
      },
      blockDragEnd: () => bt(),
      freezeMenu: () => {
        this.menuFrozen = true;
      },
      unfreezeMenu: () => {
        this.menuFrozen = false;
      }
    };
  }
  getDynamicParams() {
    const e = this.hoveredBlock.firstChild.getBoundingClientRect();
    return {
      block: this.editor.getBlock(this.hoveredBlock.getAttribute("data-id")),
      referenceRect: new DOMRect(
        this.horizontalPosAnchoredAtRoot ? this.horizontalPosAnchor : e.x,
        e.y,
        e.width,
        e.height
      )
    };
  }
};
var Ge = (o) => new Plugin({
  key: new PluginKey("DraggableBlocksPlugin"),
  view: () => new $e({
    tiptapEditor: o.tiptapEditor,
    editor: o.editor,
    blockMenuFactory: o.blockSideMenuFactory,
    horizontalPosAnchoredAtRoot: true
  })
});
var qe = Extension.create({
  name: "DraggableBlocksExtension",
  priority: 1e3,
  // Need to be high, in order to hide menu when typing slash
  addProseMirrorPlugins() {
    if (!this.options.blockSideMenuFactory)
      throw new Error(
        "UI Element factory not defined for DraggableBlocksExtension"
      );
    return [
      Ge({
        tiptapEditor: this.editor,
        editor: this.options.editor,
        blockSideMenuFactory: this.options.blockSideMenuFactory
      })
    ];
  }
});
var je = class {
  constructor({
    editor: t,
    tiptapEditor: e,
    formattingToolbarFactory: r,
    view: n,
    shouldShow: i
  }) {
    u(this, "editor");
    u(this, "ttEditor");
    u(this, "view");
    u(this, "formattingToolbar");
    u(this, "preventHide", false);
    u(this, "preventShow", false);
    u(this, "toolbarIsOpen", false);
    u(this, "prevWasEditable", null);
    u(this, "shouldShow", ({ view: t2, state: e2, from: r2, to: n2 }) => {
      const { doc: i2, selection: a2 } = e2, { empty: s2 } = a2, l = !i2.textBetween(r2, n2).length && isTextSelection(e2.selection);
      return !(!t2.hasFocus() || s2 || l);
    });
    u(this, "viewMousedownHandler", () => {
      this.preventShow = true;
    });
    u(this, "viewMouseupHandler", () => {
      this.preventShow = false, setTimeout(() => this.update(this.ttEditor.view));
    });
    u(this, "dragstartHandler", () => {
      this.formattingToolbar.hide(), this.toolbarIsOpen = false;
    });
    u(this, "focusHandler", () => {
      setTimeout(() => this.update(this.ttEditor.view));
    });
    u(this, "blurHandler", ({ event: t2 }) => {
      var e2, r2;
      if (this.preventHide) {
        this.preventHide = false;
        return;
      }
      t2 != null && t2.relatedTarget && ((r2 = (e2 = this.formattingToolbar.element) == null ? void 0 : e2.parentNode) != null && r2.contains(
        t2.relatedTarget
      )) || this.toolbarIsOpen && (this.formattingToolbar.hide(), this.toolbarIsOpen = false);
    });
    u(this, "scrollHandler", () => {
      this.toolbarIsOpen && this.formattingToolbar.render(this.getDynamicParams(), false);
    });
    this.editor = t, this.ttEditor = e, this.view = n, this.formattingToolbar = r(this.getStaticParams()), i && (this.shouldShow = i), this.view.dom.addEventListener("mousedown", this.viewMousedownHandler), this.view.dom.addEventListener("mouseup", this.viewMouseupHandler), this.view.dom.addEventListener("dragstart", this.dragstartHandler), this.ttEditor.on("focus", this.focusHandler), this.ttEditor.on("blur", this.blurHandler), document.addEventListener("scroll", this.scrollHandler);
  }
  update(t, e) {
    var f2;
    const { state: r, composing: n } = t, { doc: i, selection: a2 } = r, s2 = e && e.doc.eq(i) && e.selection.eq(a2);
    if ((this.prevWasEditable === null || this.prevWasEditable === this.editor.isEditable) && (n || s2))
      return;
    this.prevWasEditable = this.editor.isEditable;
    const { ranges: l } = a2, d = Math.min(...l.map((p5) => p5.$from.pos)), c = Math.max(...l.map((p5) => p5.$to.pos)), h2 = (f2 = this.shouldShow) == null ? void 0 : f2.call(this, {
      editor: this.editor,
      view: t,
      state: r,
      oldState: e,
      from: d,
      to: c
    });
    if (this.editor.isEditable && !this.toolbarIsOpen && !this.preventShow && (h2 || this.preventHide)) {
      this.formattingToolbar.render(this.getDynamicParams(), true), this.toolbarIsOpen = true, this.formattingToolbar.element.addEventListener(
        "mousedown",
        (p5) => p5.preventDefault()
      );
      return;
    }
    if (this.toolbarIsOpen && !this.preventShow && (h2 || this.preventHide)) {
      this.formattingToolbar.render(this.getDynamicParams(), false);
      return;
    }
    if (this.toolbarIsOpen && !this.preventHide && (!h2 || this.preventShow || !this.editor.isEditable)) {
      this.formattingToolbar.hide(), this.toolbarIsOpen = false, this.formattingToolbar.element.removeEventListener(
        "mousedown",
        (p5) => p5.preventDefault()
      );
      return;
    }
  }
  destroy() {
    this.view.dom.removeEventListener("mousedown", this.viewMousedownHandler), this.view.dom.removeEventListener("mouseup", this.viewMouseupHandler), this.view.dom.removeEventListener("dragstart", this.dragstartHandler), this.ttEditor.off("focus", this.focusHandler), this.ttEditor.off("blur", this.blurHandler), document.removeEventListener("scroll", this.scrollHandler);
  }
  getSelectionBoundingBox() {
    const { state: t } = this.ttEditor.view, { selection: e } = t, { ranges: r } = e, n = Math.min(...r.map((a2) => a2.$from.pos)), i = Math.max(...r.map((a2) => a2.$to.pos));
    if (isNodeSelection(e)) {
      const a2 = this.ttEditor.view.nodeDOM(n);
      if (a2)
        return a2.getBoundingClientRect();
    }
    return posToDOMRect(this.ttEditor.view, n, i);
  }
  getStaticParams() {
    return {
      editor: this.editor
    };
  }
  getDynamicParams() {
    return {
      referenceRect: this.getSelectionBoundingBox()
    };
  }
};
var We = (o) => new Plugin({
  key: new PluginKey("FormattingToolbarPlugin"),
  view: (t) => new je({ view: t, ...o })
});
var Ye = Extension.create({
  name: "FormattingToolbarExtension",
  addProseMirrorPlugins() {
    if (!this.options.formattingToolbarFactory || !this.options.editor)
      throw new Error(
        "required args not defined for FormattingToolbarExtension"
      );
    return [
      We({
        tiptapEditor: this.editor,
        editor: this.options.editor,
        formattingToolbarFactory: this.options.formattingToolbarFactory,
        pluginKey: new PluginKey("FormattingToolbarPlugin")
      })
    ];
  }
});
var Ke = new PluginKey("HyperlinkToolbarPlugin");
var Ve = class {
  constructor({ editor: t, hyperlinkToolbarFactory: e }) {
    u(this, "editor");
    u(this, "hyperlinkToolbar");
    u(this, "menuUpdateTimer");
    u(this, "startMenuUpdateTimer");
    u(this, "stopMenuUpdateTimer");
    u(this, "mouseHoveredHyperlinkMark");
    u(this, "mouseHoveredHyperlinkMarkRange");
    u(this, "keyboardHoveredHyperlinkMark");
    u(this, "keyboardHoveredHyperlinkMarkRange");
    u(this, "hyperlinkMark");
    u(this, "hyperlinkMarkRange");
    u(this, "mouseOverHandler", (t2) => {
      if (this.mouseHoveredHyperlinkMark = void 0, this.mouseHoveredHyperlinkMarkRange = void 0, this.stopMenuUpdateTimer(), t2.target instanceof HTMLAnchorElement && t2.target.nodeName === "A") {
        const e2 = t2.target, r = this.editor.view.posAtDOM(e2, 0) + 1, n = this.editor.state.doc.resolve(
          r
        ), i = n.marks();
        for (const a2 of i)
          if (a2.type.name === this.editor.schema.mark("link").type.name) {
            this.mouseHoveredHyperlinkMark = a2, this.mouseHoveredHyperlinkMarkRange = getMarkRange(
              n,
              a2.type,
              a2.attrs
            ) || void 0;
            break;
          }
      }
      return this.startMenuUpdateTimer(), false;
    });
    u(this, "scrollHandler", () => {
      this.hyperlinkMark !== void 0 && this.hyperlinkToolbar.render(this.getDynamicParams(), false);
    });
    this.editor = t, this.hyperlinkToolbar = e(this.getStaticParams()), this.startMenuUpdateTimer = () => {
      this.menuUpdateTimer = setTimeout(() => {
        this.update();
      }, 250);
    }, this.stopMenuUpdateTimer = () => (this.menuUpdateTimer && (clearTimeout(this.menuUpdateTimer), this.menuUpdateTimer = void 0), false), this.editor.view.dom.addEventListener("mouseover", this.mouseOverHandler), document.addEventListener("scroll", this.scrollHandler);
  }
  update() {
    var e, r, n, i;
    if (!this.editor.view.hasFocus())
      return;
    const t = this.hyperlinkMark;
    if (this.hyperlinkMark = void 0, this.hyperlinkMarkRange = void 0, this.keyboardHoveredHyperlinkMark = void 0, this.keyboardHoveredHyperlinkMarkRange = void 0, this.editor.state.selection.empty) {
      const a2 = this.editor.state.selection.$from.marks();
      for (const s2 of a2)
        if (s2.type.name === this.editor.schema.mark("link").type.name) {
          this.keyboardHoveredHyperlinkMark = s2, this.keyboardHoveredHyperlinkMarkRange = getMarkRange(
            this.editor.state.selection.$from,
            s2.type,
            s2.attrs
          ) || void 0;
          break;
        }
    }
    if (this.mouseHoveredHyperlinkMark && (this.hyperlinkMark = this.mouseHoveredHyperlinkMark, this.hyperlinkMarkRange = this.mouseHoveredHyperlinkMarkRange), this.keyboardHoveredHyperlinkMark && (this.hyperlinkMark = this.keyboardHoveredHyperlinkMark, this.hyperlinkMarkRange = this.keyboardHoveredHyperlinkMarkRange), this.hyperlinkMark && this.editor.isEditable) {
      if (this.getDynamicParams(), !t) {
        this.hyperlinkToolbar.render(this.getDynamicParams(), true), (e = this.hyperlinkToolbar.element) == null || e.addEventListener(
          "mouseleave",
          this.startMenuUpdateTimer
        ), (r = this.hyperlinkToolbar.element) == null || r.addEventListener(
          "mouseenter",
          this.stopMenuUpdateTimer
        );
        return;
      }
      this.hyperlinkToolbar.render(this.getDynamicParams(), false);
      return;
    }
    if (t && (!this.hyperlinkMark || !this.editor.isEditable)) {
      (n = this.hyperlinkToolbar.element) == null || n.removeEventListener(
        "mouseleave",
        this.startMenuUpdateTimer
      ), (i = this.hyperlinkToolbar.element) == null || i.removeEventListener(
        "mouseenter",
        this.stopMenuUpdateTimer
      ), this.hyperlinkToolbar.hide();
      return;
    }
  }
  destroy() {
    this.editor.view.dom.removeEventListener(
      "mouseover",
      this.mouseOverHandler
    ), document.removeEventListener("scroll", this.scrollHandler);
  }
  getStaticParams() {
    return {
      editHyperlink: (t, e) => {
        const r = this.editor.view.state.tr.insertText(
          e,
          this.hyperlinkMarkRange.from,
          this.hyperlinkMarkRange.to
        );
        r.addMark(
          this.hyperlinkMarkRange.from,
          this.hyperlinkMarkRange.from + e.length,
          this.editor.schema.mark("link", { href: t })
        ), this.editor.view.dispatch(r), this.editor.view.focus(), this.hyperlinkToolbar.hide();
      },
      deleteHyperlink: () => {
        this.editor.view.dispatch(
          this.editor.view.state.tr.removeMark(
            this.hyperlinkMarkRange.from,
            this.hyperlinkMarkRange.to,
            this.hyperlinkMark.type
          ).setMeta("preventAutolink", true)
        ), this.editor.view.focus(), this.hyperlinkToolbar.hide();
      }
    };
  }
  getDynamicParams() {
    return {
      url: this.hyperlinkMark.attrs.href,
      text: this.editor.view.state.doc.textBetween(
        this.hyperlinkMarkRange.from,
        this.hyperlinkMarkRange.to
      ),
      referenceRect: posToDOMRect(
        this.editor.view,
        this.hyperlinkMarkRange.from,
        this.hyperlinkMarkRange.to
      )
    };
  }
};
var Je = (o, t) => new Plugin({
  key: Ke,
  view: () => new Ve({
    editor: o,
    hyperlinkToolbarFactory: t.hyperlinkToolbarFactory
  })
});
var Xe = Link.extend({
  priority: 500,
  addProseMirrorPlugins() {
    var o;
    if (!this.options.hyperlinkToolbarFactory)
      throw new Error("UI Element factory not defined for HyperlinkMark");
    return [
      ...((o = this.parent) == null ? void 0 : o.call(this)) || [],
      Je(this.editor, {
        hyperlinkToolbarFactory: this.options.hyperlinkToolbarFactory
      })
    ];
  }
});
var Qe = new PluginKey("blocknote-placeholder");
var Ze = Extension.create({
  name: "placeholder",
  addOptions() {
    return {
      emptyEditorClass: "is-editor-empty",
      emptyNodeClass: "is-empty",
      isFilterClass: "is-filter",
      hasAnchorClass: "has-anchor",
      placeholder: "Write something …",
      showOnlyWhenEditable: true,
      showOnlyCurrent: true,
      includeChildren: false
    };
  },
  addProseMirrorPlugins() {
    return [
      new Plugin({
        key: Qe,
        props: {
          decorations: (o) => {
            const { doc: t, selection: e } = o, r = V.getState(o), n = this.editor.isEditable || !this.options.showOnlyWhenEditable, { anchor: i } = e, a2 = [];
            if (n)
              return t.descendants((s2, l) => {
                const d = i >= l && i <= l + s2.nodeSize, c = !s2.isLeaf && !s2.childCount;
                if ((d || !this.options.showOnlyCurrent) && c) {
                  const h2 = [this.options.emptyNodeClass];
                  this.editor.isEmpty && h2.push(this.options.emptyEditorClass), d && h2.push(this.options.hasAnchorClass), (r == null ? void 0 : r.triggerCharacter) === "" && (r != null && r.active) && h2.push(this.options.isFilterClass);
                  const f2 = Decoration.node(l, l + s2.nodeSize, {
                    class: h2.join(" ")
                  });
                  a2.push(f2);
                }
                return this.options.includeChildren;
              }), DecorationSet.create(t, a2);
          }
        }
      })
    ];
  }
});
var to = class {
  constructor(t, e) {
    this.name = t, this.match = e;
  }
};
var x = class extends to {
  /**
   * Constructs a new slash-command.
   *
   * @param name The name of the command
   * @param execute The callback for creating a new node
   * @param aliases Aliases for this command
   */
  constructor(t, e, r = []) {
    super(t, (n) => this.name.toLowerCase().startsWith(n.toLowerCase()) || this.aliases.filter(
      (i) => i.toLowerCase().startsWith(n.toLowerCase())
    ).length !== 0), this.name = t, this.execute = e, this.aliases = r;
  }
};
function I(o, t) {
  const e = o.getTextCursorPosition().block;
  e.content.length === 1 && e.content[0].type === "text" && e.content[0].text === "/" || e.content.length === 0 ? o.updateBlock(e, t) : (o.insertBlocks([t], e, "after"), o.setTextCursorPosition(o.getTextCursorPosition().nextBlock));
}
var eo = [
  // Command for creating a level 1 heading
  new x(
    "Heading",
    (o) => I(o, {
      type: "heading",
      props: { level: "1" }
    }),
    ["h", "heading1", "h1"]
  ),
  // Command for creating a level 2 heading
  new x(
    "Heading 2",
    (o) => I(o, {
      type: "heading",
      props: { level: "2" }
    }),
    ["h2", "heading2", "subheading"]
  ),
  // Command for creating a level 3 heading
  new x(
    "Heading 3",
    (o) => I(o, {
      type: "heading",
      props: { level: "3" }
    }),
    ["h3", "heading3", "subheading"]
  ),
  // Command for creating an ordered list
  new x(
    "Numbered List",
    (o) => I(o, {
      type: "numberedListItem"
    }),
    ["li", "list", "numberedlist", "numbered list"]
  ),
  // Command for creating a bullet list
  new x(
    "Bullet List",
    (o) => I(o, {
      type: "bulletListItem"
    }),
    ["ul", "list", "bulletlist", "bullet list"]
  ),
  // Command for creating a paragraph (pretty useless)
  new x(
    "Paragraph",
    (o) => I(o, {
      type: "paragraph"
    }),
    ["p"]
  )
  //     replaceRangeWithNode(editor, range, node);
  //     return true;
  //   },
  //   ["ol", "orderedlist"],
  //   OrderedListIcon,
  //   "Used to display an ordered (enumerated) list item"
  // ),
  // Command for creating a blockquote
  // blockquote: new SlashCommand(
  //   "Block Quote",
  //   CommandGroup.BASIC_BLOCKS,
  //   (editor, range) => {
  //     const paragraph = editor.schema.node("paragraph");
  //     const node = editor.schema.node(
  //       "blockquote",
  //       { "block-id": uniqueId.generate() },
  //       paragraph
  //     );
  //     replaceRangeWithNode(editor, range, node);
  //     return true;
  //   },
  //   ["quote", "blockquote"],
  //   QuoteIcon,
  //   "Used to make a quote stand out",
  //   "Ctrl+Shift+B"
  // ),
  // Command for creating a horizontal rule
  // horizontalRule: new SlashCommand(
  //   "Horizontal Rule",
  //   CommandGroup.BASIC_BLOCKS,
  //   (editor, range) => {
  //     const node = editor.schema.node("horizontalRule", {
  //       "block-id": uniqueId.generate(),
  //     });
  //     // insert horizontal rule, create a new block after the horizontal rule if applicable
  //     // and put the cursor in the block after the horizontal rule.
  //     editor
  //       .chain()
  //       .focus()
  //       .replaceRangeAndUpdateSelection(range, node)
  //       .command(({ tr, dispatch }) => {
  //         if (dispatch) {
  //           // the node immediately after the cursor
  //           const nodeAfter = tr.selection.$to.nodeAfter;
  //           // the position of the cursor
  //           const cursorPos = tr.selection.$to.pos;
  //           // check if there is no node after the cursor (end of document)
  //           if (!nodeAfter) {
  //             // create a new block of the default type (probably paragraph) after the cursor
  //             const { parent } = tr.selection.$to;
  //             const node = parent.type.contentMatch.defaultType?.create();
  //             if (node) {
  //               tr.insert(cursorPos, node);
  //             }
  //           }
  //           // try to put the cursor at the start of the node directly after the inserted horizontal rule
  //           tr.doc.nodesBetween(cursorPos, cursorPos + 1, (node, pos) => {
  //             if (node.type.name !== "horizontalRule") {
  //               tr.setSelection(TextSelection.create(tr.doc, pos));
  //             }
  //           });
  //         }
  //         return true;
  //       })
  //       .scrollIntoView()
  //       .run();
  //     return true;
  //   },
  //   ["hr", "horizontalrule"],
  //   SeparatorIcon,
  //   "Used to separate sections with a horizontal line"
  // ),
  // Command for creating a table
  // table: new SlashCommand(
  //   "Table",
  //   CommandGroup.BASIC_BLOCKS,
  //   (editor, range) => {
  //     editor.chain().focus().deleteRange(range).run();
  //     // TODO: add blockid, pending https://github.com/ueberdosis/tiptap/pull/1469
  //     editor
  //       .chain()
  //       .focus()
  //       .insertTable({ rows: 1, cols: 2, withHeaderRow: false })
  //       .scrollIntoView()
  //       .run();
  //     return true;
  //   },
  //   ["table", "database"],
  //   TableIcon,
  //   "Used to create a simple table"
  // ),
];
var oo = Extension.create({
  name: "textAlignment",
  addGlobalAttributes() {
    return [
      {
        // Attribute is applied to block content instead of container so that child blocks don't inherit the text
        // alignment styling.
        types: ["paragraph", "heading", "bulletListItem", "numberedListItem"],
        attributes: {
          textAlignment: {
            default: "left",
            parseHTML: (o) => o.getAttribute("data-text-alignment"),
            renderHTML: (o) => o.textAlignment !== "left" && {
              "data-text-alignment": o.textAlignment
            }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setTextAlignment: (o) => ({ state: t }) => {
        const e = [], r = g(
          t.doc,
          t.selection.from
        );
        if (r === void 0)
          return false;
        let n = r.startPos;
        for (; n < t.selection.to; )
          t.doc.resolve(n).node().type.spec.group === "blockContent" ? (e.push(n - 1), n += t.doc.resolve(n).node().nodeSize - 1) : n += 1;
        for (const i of e)
          t.tr.setNodeAttribute(i, "textAlignment", o);
        return true;
      }
    };
  }
});
var ro = Extension.create({
  name: "blockTextColor",
  addGlobalAttributes() {
    return [
      {
        types: ["blockContainer"],
        attributes: {
          textColor: {
            default: "default",
            parseHTML: (o) => o.hasAttribute("data-text-color") ? o.getAttribute("data-text-color") : "default",
            renderHTML: (o) => o.textColor !== "default" && {
              "data-text-color": o.textColor
            }
          }
        }
      }
    ];
  },
  addCommands() {
    return {
      setBlockTextColor: (o, t) => ({ state: e, view: r }) => {
        const n = g(e.doc, o);
        return n === void 0 ? false : (e.tr.setNodeAttribute(n.startPos - 1, "textColor", t), r.focus(), true);
      }
    };
  }
});
var no = Mark2.create({
  name: "textColor",
  addAttributes() {
    return {
      color: {
        default: void 0,
        parseHTML: (o) => o.getAttribute("data-text-color"),
        renderHTML: (o) => ({
          "data-text-color": o.color
        })
      }
    };
  },
  parseHTML() {
    return [
      {
        tag: "span",
        getAttrs: (o) => typeof o == "string" ? false : o.hasAttribute("data-text-color") ? { color: o.getAttribute("data-text-color") } : false
      }
    ];
  },
  renderHTML({ HTMLAttributes: o }) {
    return ["span", o, 0];
  },
  addCommands() {
    return {
      setTextColor: (o) => ({ commands: t }) => o !== "default" ? t.setMark(this.name, { color: o }) : t.unsetMark(this.name)
    };
  }
});
var io = Extension.create({
  name: "trailingNode",
  addProseMirrorPlugins() {
    const o = new PluginKey(this.name);
    return [
      new Plugin({
        key: o,
        appendTransaction: (t, e, r) => {
          const { doc: n, tr: i, schema: a2 } = r, s2 = o.getState(r), l = n.content.size - 2, d = a2.nodes.blockContainer, c = a2.nodes.paragraph;
          if (s2)
            return i.insert(
              l,
              d.create(void 0, c.create())
            );
        },
        state: {
          init: (t, e) => {
          },
          apply: (t, e) => {
            if (!t.docChanged)
              return e;
            let r = t.doc.lastChild;
            if (!r || r.type.name !== "blockGroup")
              throw new Error("Expected blockGroup");
            if (r = r.lastChild, !r || r.type.name !== "blockContainer")
              throw new Error("Expected blockContainer");
            return r.nodeSize > 4;
          }
        }
      })
    ];
  }
});
var so = (o) => {
  const t = [
    extensions.ClipboardTextSerializer,
    extensions.Commands,
    extensions.Editable,
    extensions.FocusEvents,
    extensions.Tabindex,
    // DevTools,
    Gapcursor,
    // DropCursor,
    Ze.configure({
      emptyNodeClass: b.isEmpty,
      hasAnchorClass: b.hasAnchor,
      isFilterClass: b.isFilter,
      includeChildren: true,
      showOnlyCurrent: false
    }),
    Y.configure({
      types: ["blockContainer"]
    }),
    HardBreak,
    // Comments,
    // basics:
    Text3,
    // marks:
    Bold,
    Code2,
    Italic,
    Strike,
    Underline,
    no,
    ro,
    fe,
    pe,
    oo,
    // custom blocks:
    ...Ae,
    Dropcursor.configure({ width: 5, color: "#ddeeff" }),
    // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),
    // should be handled before Enter handlers in other components like splitListItem
    io
  ];
  if (o.collaboration) {
    t.push(
      Collaboration.configure({
        fragment: o.collaboration.fragment
      })
    );
    const e = (r) => {
      const n = document.createElement("span");
      n.classList.add(_["collaboration-cursor__caret"]), n.setAttribute("style", `border-color: ${r.color}`);
      const i = document.createElement("span");
      i.classList.add(_["collaboration-cursor__label"]), i.setAttribute("style", `background-color: ${r.color}`), i.insertBefore(document.createTextNode(r.name), null);
      const a2 = document.createTextNode("⁠"), s2 = document.createTextNode("⁠");
      return n.insertBefore(a2, null), n.insertBefore(i, null), n.insertBefore(s2, null), n;
    };
    t.push(
      CollaborationCursor.configure({
        user: o.collaboration.user,
        render: o.collaboration.renderCursor || e,
        provider: o.collaboration.provider
      })
    );
  } else
    t.push(History);
  return o.uiFactories.blockSideMenuFactory && t.push(
    qe.configure({
      editor: o.editor,
      blockSideMenuFactory: o.uiFactories.blockSideMenuFactory
    })
  ), o.uiFactories.formattingToolbarFactory && t.push(
    Ye.configure({
      editor: o.editor,
      formattingToolbarFactory: o.uiFactories.formattingToolbarFactory
    })
  ), o.uiFactories.hyperlinkToolbarFactory ? t.push(
    Xe.configure({
      hyperlinkToolbarFactory: o.uiFactories.hyperlinkToolbarFactory
    })
  ) : t.push(Link), o.uiFactories.slashMenuFactory && t.push(
    De.configure({
      editor: o.editor,
      commands: o.slashCommands,
      slashMenuFactory: o.uiFactories.slashMenuFactory
    })
  ), t;
};
var ao = {
  enableInputRules: true,
  enablePasteRules: true,
  enableCoreExtensions: false
};
var Fo = class {
  constructor(t = {}) {
    u(this, "_tiptapEditor");
    u(this, "blockCache", /* @__PURE__ */ new WeakMap());
    var n, i, a2;
    this.options = t, t = {
      defaultStyles: true,
      ...t
    };
    const e = so({
      editor: this,
      uiFactories: t.uiFactories || {},
      slashCommands: t.slashCommands || eo,
      collaboration: t.collaboration
    }), r = {
      // TODO: This approach to setting initial content is "cleaner" but requires the PM editor schema, which is only
      //  created after initializing the TipTap editor. Not sure it's feasible.
      // content:
      //   options.initialContent &&
      //   options.initialContent.map((block) =>
      //     blockToNode(block, this._tiptapEditor.schema).toJSON()
      //   ),
      ...ao,
      ...t._tiptapOptions,
      onCreate: () => {
        var s2;
        (s2 = t.onEditorReady) == null || s2.call(t, this), t.initialContent && this.replaceBlocks(this.topLevelBlocks, t.initialContent);
      },
      onUpdate: () => {
        var s2;
        (s2 = t.onEditorContentChange) == null || s2.call(t, this);
      },
      onSelectionUpdate: () => {
        var s2;
        (s2 = t.onTextCursorPositionChange) == null || s2.call(t, this);
      },
      editable: t.editable === void 0 ? true : t.editable,
      extensions: t.enableBlockNoteExtensions === false ? (n = t._tiptapOptions) == null ? void 0 : n.extensions : [...((i = t._tiptapOptions) == null ? void 0 : i.extensions) || [], ...e],
      editorProps: {
        attributes: {
          "data-theme": t.theme || "light",
          ...t.editorDOMAttributes || {},
          class: [
            _.bnEditor,
            _.bnRoot,
            t.defaultStyles ? _.defaultStyles : "",
            ((a2 = t.editorDOMAttributes) == null ? void 0 : a2.class) || ""
          ].join(" ")
        }
      }
    };
    t.parentElement && (r.element = t.parentElement), this._tiptapEditor = new Editor(r);
  }
  get domElement() {
    return this._tiptapEditor.view.dom;
  }
  focus() {
    this._tiptapEditor.view.focus();
  }
  /**
   * Gets a snapshot of all top-level (non-nested) blocks in the editor.
   * @returns A snapshot of all top-level (non-nested) blocks in the editor.
   */
  get topLevelBlocks() {
    const t = [];
    return this._tiptapEditor.state.doc.firstChild.descendants((e) => (t.push(B(e, this.blockCache)), false)), t;
  }
  /**
   * Gets a snapshot of an existing block from the editor.
   * @param blockIdentifier The identifier of an existing block that should be retrieved.
   * @returns The block that matches the identifier, or `undefined` if no matching block was found.
   */
  getBlock(t) {
    const e = typeof t == "string" ? t : t.id;
    let r;
    return this._tiptapEditor.state.doc.firstChild.descendants((n) => typeof r < "u" ? false : n.type.name !== "blockContainer" || n.attrs.id !== e ? true : (r = B(n, this.blockCache), false)), r;
  }
  /**
   * Traverses all blocks in the editor depth-first, and executes a callback for each.
   * @param callback The callback to execute for each block. Returning `false` stops the traversal.
   * @param reverse Whether the blocks should be traversed in reverse order.
   */
  forEachBlock(t, e = false) {
    const r = this.topLevelBlocks.slice();
    e && r.reverse();
    function n(i) {
      for (const a2 of i) {
        if (!t(a2))
          return false;
        const s2 = e ? a2.children.slice().reverse() : a2.children;
        if (!n(s2))
          return false;
      }
      return true;
    }
    n(r);
  }
  /**
   * Gets a snapshot of the current text cursor position.
   * @returns A snapshot of the current text cursor position.
   */
  getTextCursorPosition() {
    const { node: t, depth: e, startPos: r, endPos: n } = g(
      this._tiptapEditor.state.doc,
      this._tiptapEditor.state.selection.from
    ), i = this._tiptapEditor.state.doc.resolve(n).index(e - 1), a2 = this._tiptapEditor.state.doc.resolve(n + 1).node().childCount;
    let s2;
    i > 0 && (s2 = this._tiptapEditor.state.doc.resolve(r - 2).node());
    let l;
    return i < a2 - 1 && (l = this._tiptapEditor.state.doc.resolve(n + 2).node()), {
      block: B(t, this.blockCache),
      prevBlock: s2 === void 0 ? void 0 : B(s2, this.blockCache),
      nextBlock: l === void 0 ? void 0 : B(l, this.blockCache)
    };
  }
  /**
   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could
   * not be found.
   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.
   * @param placement Whether the text cursor should be placed at the start or end of the block.
   */
  setTextCursorPosition(t, e = "start") {
    const r = typeof t == "string" ? t : t.id, { posBeforeNode: n } = K(r, this._tiptapEditor.state.doc), { startPos: i, contentNode: a2 } = g(
      this._tiptapEditor.state.doc,
      n + 2
    );
    e === "start" ? this._tiptapEditor.commands.setTextSelection(i + 1) : this._tiptapEditor.commands.setTextSelection(
      i + a2.nodeSize - 1
    );
  }
  /**
   * Gets a snapshot of the current selection.
   */
  getSelection() {
    if (this._tiptapEditor.state.selection.from === this._tiptapEditor.state.selection.to)
      return;
    const t = [];
    return this._tiptapEditor.state.doc.descendants((e, r) => e.type.spec.group !== "blockContent" || r + e.nodeSize < this._tiptapEditor.state.selection.from || r > this._tiptapEditor.state.selection.to ? true : (t.push(
      B(
        this._tiptapEditor.state.doc.resolve(r).node(),
        this.blockCache
      )
    ), false)), { blocks: t };
  }
  /**
   * Checks if the editor is currently editable, or if it's locked.
   * @returns True if the editor is editable, false otherwise.
   */
  get isEditable() {
    return this._tiptapEditor.isEditable;
  }
  /**
   * Makes the editor editable or locks it, depending on the argument passed.
   * @param editable True to make the editor editable, or false to lock it.
   */
  set isEditable(t) {
    this._tiptapEditor.setEditable(t);
  }
  /**
   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an
   * error if the reference block could not be found.
   * @param blocksToInsert An array of partial blocks that should be inserted.
   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.
   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the
   * `referenceBlock`. Inserts the blocks at the start of the existing block's children if "nested" is used.
   */
  insertBlocks(t, e, r = "before") {
    pt(t, e, r, this._tiptapEditor);
  }
  /**
   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be
   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could
   * not be found.
   * @param blockToUpdate The block that should be updated.
   * @param update A partial block which defines how the existing block should be changed.
   */
  updateBlock(t, e) {
    re(t, e, this._tiptapEditor);
  }
  /**
   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.
   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.
   */
  removeBlocks(t) {
    ft(t, this._tiptapEditor);
  }
  /**
   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or
   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in
   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.
   * @param blocksToRemove An array of blocks that should be replaced.
   * @param blocksToInsert An array of partial blocks to replace the old ones with.
   */
  replaceBlocks(t, e) {
    ne(t, e, this._tiptapEditor);
  }
  /**
   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.
   */
  getActiveStyles() {
    const t = {}, e = this._tiptapEditor.state.selection.$to.marks(), r = /* @__PURE__ */ new Set([
      "bold",
      "italic",
      "underline",
      "strike",
      "code"
    ]), n = /* @__PURE__ */ new Set(["textColor", "backgroundColor"]);
    for (const i of e)
      r.has(i.type.name) ? t[i.type.name] = true : n.has(i.type.name) && (t[i.type.name] = i.attrs.color);
    return t;
  }
  /**
   * Adds styles to the currently selected content.
   * @param styles The styles to add.
   */
  addStyles(t) {
    const e = /* @__PURE__ */ new Set([
      "bold",
      "italic",
      "underline",
      "strike",
      "code"
    ]), r = /* @__PURE__ */ new Set(["textColor", "backgroundColor"]);
    for (const [n, i] of Object.entries(t))
      e.has(n) ? this._tiptapEditor.commands.setMark(n) : r.has(n) && this._tiptapEditor.commands.setMark(n, { color: i });
  }
  /**
   * Removes styles from the currently selected content.
   * @param styles The styles to remove.
   */
  removeStyles(t) {
    for (const e of Object.keys(t))
      this._tiptapEditor.commands.unsetMark(e);
  }
  /**
   * Toggles styles on the currently selected content.
   * @param styles The styles to toggle.
   */
  toggleStyles(t) {
    const e = /* @__PURE__ */ new Set([
      "bold",
      "italic",
      "underline",
      "strike",
      "code"
    ]), r = /* @__PURE__ */ new Set(["textColor", "backgroundColor"]);
    for (const [n, i] of Object.entries(t))
      e.has(n) ? this._tiptapEditor.commands.toggleMark(n) : r.has(n) && this._tiptapEditor.commands.toggleMark(n, { color: i });
  }
  /**
   * Gets the currently selected text.
   */
  getSelectedText() {
    return this._tiptapEditor.state.doc.textBetween(
      this._tiptapEditor.state.selection.from,
      this._tiptapEditor.state.selection.to
    );
  }
  /**
   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.
   */
  getSelectedLinkUrl() {
    return this._tiptapEditor.getAttributes("link").href;
  }
  /**
   * Creates a new link to replace the selected content.
   * @param url The link URL.
   * @param text The text to display the link with.
   */
  createLink(t, e) {
    if (t === "")
      return;
    let { from: r, to: n } = this._tiptapEditor.state.selection;
    e || (e = this._tiptapEditor.state.doc.textBetween(r, n));
    const i = this._tiptapEditor.schema.mark("link", { href: t });
    this._tiptapEditor.view.dispatch(
      this._tiptapEditor.view.state.tr.insertText(e, r, n).addMark(r, r + e.length, i)
    );
  }
  /**
   * Checks if the block containing the text cursor can be nested.
   */
  canNestBlock() {
    const { startPos: t, depth: e } = g(
      this._tiptapEditor.state.doc,
      this._tiptapEditor.state.selection.from
    );
    return this._tiptapEditor.state.doc.resolve(t).index(e - 1) > 0;
  }
  /**
   * Nests the block containing the text cursor into the block above it.
   */
  nestBlock() {
    this._tiptapEditor.commands.sinkListItem("blockContainer");
  }
  /**
   * Checks if the block containing the text cursor is nested.
   */
  canUnnestBlock() {
    const { depth: t } = g(
      this._tiptapEditor.state.doc,
      this._tiptapEditor.state.selection.from
    );
    return t > 2;
  }
  /**
   * Lifts the block containing the text cursor out of its parent.
   */
  unnestBlock() {
    this._tiptapEditor.commands.liftListItem("blockContainer");
  }
  /**
   * Serializes blocks into an HTML string. To better conform to HTML standards, children of blocks which aren't list
   * items are un-nested in the output HTML.
   * @param blocks An array of blocks that should be serialized into HTML.
   * @returns The blocks, serialized as an HTML string.
   */
  async blocksToHTML(t) {
    return mt(t, this._tiptapEditor.schema);
  }
  /**
   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and
   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote
   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.
   * @param html The HTML string to parse blocks from.
   * @returns The blocks parsed from the HTML string.
   */
  async HTMLToBlocks(t) {
    return gt(t, this._tiptapEditor.schema);
  }
  /**
   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of
   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.
   * @param blocks An array of blocks that should be serialized into Markdown.
   * @returns The blocks, serialized as a Markdown string.
   */
  async blocksToMarkdown(t) {
    return ae(t, this._tiptapEditor.schema);
  }
  /**
   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on
   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it
   * as text.
   * @param markdown The Markdown string to parse blocks from.
   * @returns The blocks parsed from the Markdown string.
   */
  async markdownToBlocks(t) {
    return le(t, this._tiptapEditor.schema);
  }
  /**
   * Updates the user info for the current user that's shown to other collaborators.
   */
  updateCollaborationUserInfo(t) {
    if (!this.options.collaboration)
      throw new Error(
        "Cannot update collaboration user info when collaboration is disabled."
      );
    this._tiptapEditor.commands.updateUser(t);
  }
};

// node_modules/@blocknote/react/dist/blocknote-react.js
var hr2 = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
var Ku = { exports: {} };
var vr = {};
var Ml;
function p0() {
  return Ml || (Ml = 1, function() {
    var u2 = import_react291.default, g2 = Symbol.for("react.element"), a2 = Symbol.for("react.portal"), b2 = Symbol.for("react.fragment"), T2 = Symbol.for("react.strict_mode"), B2 = Symbol.for("react.profiler"), C = Symbol.for("react.provider"), V2 = Symbol.for("react.context"), D = Symbol.for("react.forward_ref"), hn = Symbol.for("react.suspense"), Q = Symbol.for("react.suspense_list"), un = Symbol.for("react.memo"), Vn = Symbol.for("react.lazy"), kn = Symbol.for("react.offscreen"), be2 = Symbol.iterator, gt2 = "@@iterator";
    function Sn(c) {
      if (c === null || typeof c != "object")
        return null;
      var w = be2 && c[be2] || c[gt2];
      return typeof w == "function" ? w : null;
    }
    var An = u2.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
    function pn(c) {
      {
        for (var w = arguments.length, E = new Array(w > 1 ? w - 1 : 0), O2 = 1; O2 < w; O2++)
          E[O2 - 1] = arguments[O2];
        Yn("error", c, E);
      }
    }
    function Yn(c, w, E) {
      {
        var O2 = An.ReactDebugCurrentFrame, q3 = O2.getStackAddendum();
        q3 !== "" && (w += "%s", E = E.concat([q3]));
        var Z = E.map(function(N) {
          return String(N);
        });
        Z.unshift("Warning: " + w), Function.prototype.apply.call(console[c], console, Z);
      }
    }
    var ze2 = false, Kn = false, Fe2 = false, ue2 = false, je2 = false, vt;
    vt = Symbol.for("react.module.reference");
    function Ti(c) {
      return !!(typeof c == "string" || typeof c == "function" || c === b2 || c === B2 || je2 || c === T2 || c === hn || c === Q || ue2 || c === kn || ze2 || Kn || Fe2 || typeof c == "object" && c !== null && (c.$$typeof === Vn || c.$$typeof === un || c.$$typeof === C || c.$$typeof === V2 || c.$$typeof === D || // This needs to include all possible module reference object
      // types supported by any Flight configuration anywhere since
      // we don't know which Flight build this will end up being used
      // with.
      c.$$typeof === vt || c.getModuleId !== void 0));
    }
    function Si(c, w, E) {
      var O2 = c.displayName;
      if (O2)
        return O2;
      var q3 = w.displayName || w.name || "";
      return q3 !== "" ? E + "(" + q3 + ")" : E;
    }
    function _r(c) {
      return c.displayName || "Context";
    }
    function oe2(c) {
      if (c == null)
        return null;
      if (typeof c.tag == "number" && pn("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), typeof c == "function")
        return c.displayName || c.name || null;
      if (typeof c == "string")
        return c;
      switch (c) {
        case b2:
          return "Fragment";
        case a2:
          return "Portal";
        case B2:
          return "Profiler";
        case T2:
          return "StrictMode";
        case hn:
          return "Suspense";
        case Q:
          return "SuspenseList";
      }
      if (typeof c == "object")
        switch (c.$$typeof) {
          case V2:
            var w = c;
            return _r(w) + ".Consumer";
          case C:
            var E = c;
            return _r(E._context) + ".Provider";
          case D:
            return Si(c, c.render, "ForwardRef");
          case un:
            var O2 = c.displayName || null;
            return O2 !== null ? O2 : oe2(c.type) || "Memo";
          case Vn: {
            var q3 = c, Z = q3._payload, N = q3._init;
            try {
              return oe2(N(Z));
            } catch {
              return null;
            }
          }
        }
      return null;
    }
    var ge2 = Object.assign, nt = 0, mr, ve2, ae2, xr, et2, Pn, yr;
    function wr() {
    }
    wr.__reactDisabledLog = true;
    function Ai() {
      {
        if (nt === 0) {
          mr = console.log, ve2 = console.info, ae2 = console.warn, xr = console.error, et2 = console.group, Pn = console.groupCollapsed, yr = console.groupEnd;
          var c = {
            configurable: true,
            enumerable: true,
            value: wr,
            writable: true
          };
          Object.defineProperties(console, {
            info: c,
            log: c,
            warn: c,
            error: c,
            group: c,
            groupCollapsed: c,
            groupEnd: c
          });
        }
        nt++;
      }
    }
    function De2() {
      {
        if (nt--, nt === 0) {
          var c = {
            configurable: true,
            enumerable: true,
            writable: true
          };
          Object.defineProperties(console, {
            log: ge2({}, c, {
              value: mr
            }),
            info: ge2({}, c, {
              value: ve2
            }),
            warn: ge2({}, c, {
              value: ae2
            }),
            error: ge2({}, c, {
              value: xr
            }),
            group: ge2({}, c, {
              value: et2
            }),
            groupCollapsed: ge2({}, c, {
              value: Pn
            }),
            groupEnd: ge2({}, c, {
              value: yr
            })
          });
        }
        nt < 0 && pn("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
      }
    }
    var Ue2 = An.ReactCurrentDispatcher, Ut;
    function pe2(c, w, E) {
      {
        if (Ut === void 0)
          try {
            throw Error();
          } catch (q3) {
            var O2 = q3.stack.trim().match(/\n( *(at )?)/);
            Ut = O2 && O2[1] || "";
          }
        return `
` + Ut + c;
      }
    }
    var Ce2 = false, pt2;
    {
      var _t = typeof WeakMap == "function" ? WeakMap : Map;
      pt2 = new _t();
    }
    function tt3(c, w) {
      if (!c || Ce2)
        return "";
      {
        var E = pt2.get(c);
        if (E !== void 0)
          return E;
      }
      var O2;
      Ce2 = true;
      var q3 = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var Z;
      Z = Ue2.current, Ue2.current = null, Ai();
      try {
        if (w) {
          var N = function() {
            throw Error();
          };
          if (Object.defineProperty(N.prototype, "props", {
            set: function() {
              throw Error();
            }
          }), typeof Reflect == "object" && Reflect.construct) {
            try {
              Reflect.construct(N, []);
            } catch (Mn) {
              O2 = Mn;
            }
            Reflect.construct(c, [], N);
          } else {
            try {
              N.call();
            } catch (Mn) {
              O2 = Mn;
            }
            c.call(N.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (Mn) {
            O2 = Mn;
          }
          c();
        }
      } catch (Mn) {
        if (Mn && O2 && typeof Mn.stack == "string") {
          for (var U = Mn.stack.split(`
`), mn = O2.stack.split(`
`), on = U.length - 1, fn3 = mn.length - 1; on >= 1 && fn3 >= 0 && U[on] !== mn[fn3]; )
            fn3--;
          for (; on >= 1 && fn3 >= 0; on--, fn3--)
            if (U[on] !== mn[fn3]) {
              if (on !== 1 || fn3 !== 1)
                do
                  if (on--, fn3--, fn3 < 0 || U[on] !== mn[fn3]) {
                    var In = `
` + U[on].replace(" at new ", " at ");
                    return c.displayName && In.includes("<anonymous>") && (In = In.replace("<anonymous>", c.displayName)), typeof c == "function" && pt2.set(c, In), In;
                  }
                while (on >= 1 && fn3 >= 0);
              break;
            }
        }
      } finally {
        Ce2 = false, Ue2.current = Z, De2(), Error.prepareStackTrace = q3;
      }
      var fe2 = c ? c.displayName || c.name : "", Lr = fe2 ? pe2(fe2) : "";
      return typeof c == "function" && pt2.set(c, Lr), Lr;
    }
    function br3(c, w, E) {
      return tt3(c, false);
    }
    function zn(c) {
      var w = c.prototype;
      return !!(w && w.isReactComponent);
    }
    function _e2(c, w, E) {
      if (c == null)
        return "";
      if (typeof c == "function")
        return tt3(c, zn(c));
      if (typeof c == "string")
        return pe2(c);
      switch (c) {
        case hn:
          return pe2("Suspense");
        case Q:
          return pe2("SuspenseList");
      }
      if (typeof c == "object")
        switch (c.$$typeof) {
          case D:
            return br3(c.render);
          case un:
            return _e2(c.type, w, E);
          case Vn: {
            var O2 = c, q3 = O2._payload, Z = O2._init;
            try {
              return _e2(Z(q3), w, E);
            } catch {
            }
          }
        }
      return "";
    }
    var mt2 = Object.prototype.hasOwnProperty, Zn = {}, Wt = An.ReactDebugCurrentFrame;
    function xt(c) {
      if (c) {
        var w = c._owner, E = _e2(c.type, c._source, w ? w.type : null);
        Wt.setExtraStackFrame(E);
      } else
        Wt.setExtraStackFrame(null);
    }
    function rt(c, w, E, O2, q3) {
      {
        var Z = Function.call.bind(mt2);
        for (var N in c)
          if (Z(c, N)) {
            var U = void 0;
            try {
              if (typeof c[N] != "function") {
                var mn = Error((O2 || "React class") + ": " + E + " type `" + N + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof c[N] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                throw mn.name = "Invariant Violation", mn;
              }
              U = c[N](w, N, O2, E, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
            } catch (on) {
              U = on;
            }
            U && !(U instanceof Error) && (xt(q3), pn("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", O2 || "React class", E, N, typeof U), xt(null)), U instanceof Error && !(U.message in Zn) && (Zn[U.message] = true, xt(q3), pn("Failed %s type: %s", E, U.message), xt(null));
          }
      }
    }
    var Fn = Array.isArray;
    function Ee2(c) {
      return Fn(c);
    }
    function yt2(c) {
      {
        var w = typeof Symbol == "function" && Symbol.toStringTag, E = w && c[Symbol.toStringTag] || c.constructor.name || "Object";
        return E;
      }
    }
    function Ii(c) {
      try {
        return We2(c), false;
      } catch {
        return true;
      }
    }
    function We2(c) {
      return "" + c;
    }
    function Cr(c) {
      if (Ii(c))
        return pn("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", yt2(c)), We2(c);
    }
    var le2 = An.ReactCurrentOwner, Ne2 = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    }, wt, bt2, it;
    it = {};
    function Nt(c) {
      if (mt2.call(c, "ref")) {
        var w = Object.getOwnPropertyDescriptor(c, "ref").get;
        if (w && w.isReactWarning)
          return false;
      }
      return c.ref !== void 0;
    }
    function $t(c) {
      if (mt2.call(c, "key")) {
        var w = Object.getOwnPropertyDescriptor(c, "key").get;
        if (w && w.isReactWarning)
          return false;
      }
      return c.key !== void 0;
    }
    function Gt(c, w) {
      if (typeof c.ref == "string" && le2.current && w && le2.current.stateNode !== w) {
        var E = oe2(le2.current.type);
        it[E] || (pn('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', oe2(le2.current.type), c.ref), it[E] = true);
      }
    }
    function qt(c, w) {
      {
        var E = function() {
          wt || (wt = true, pn("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", w));
        };
        E.isReactWarning = true, Object.defineProperty(c, "key", {
          get: E,
          configurable: true
        });
      }
    }
    function Vt(c, w) {
      {
        var E = function() {
          bt2 || (bt2 = true, pn("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", w));
        };
        E.isReactWarning = true, Object.defineProperty(c, "ref", {
          get: E,
          configurable: true
        });
      }
    }
    var Yt = function(c, w, E, O2, q3, Z, N) {
      var U = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: g2,
        // Built-in properties that belong on the element
        type: c,
        key: w,
        ref: E,
        props: N,
        // Record the component responsible for creating this element.
        _owner: Z
      };
      return U._store = {}, Object.defineProperty(U._store, "validated", {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      }), Object.defineProperty(U, "_self", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: O2
      }), Object.defineProperty(U, "_source", {
        configurable: false,
        enumerable: false,
        writable: false,
        value: q3
      }), Object.freeze && (Object.freeze(U.props), Object.freeze(U)), U;
    };
    function Mi(c, w, E, O2, q3) {
      {
        var Z, N = {}, U = null, mn = null;
        E !== void 0 && (Cr(E), U = "" + E), $t(w) && (Cr(w.key), U = "" + w.key), Nt(w) && (mn = w.ref, Gt(w, q3));
        for (Z in w)
          mt2.call(w, Z) && !Ne2.hasOwnProperty(Z) && (N[Z] = w[Z]);
        if (c && c.defaultProps) {
          var on = c.defaultProps;
          for (Z in on)
            N[Z] === void 0 && (N[Z] = on[Z]);
        }
        if (U || mn) {
          var fn3 = typeof c == "function" ? c.displayName || c.name || "Unknown" : c;
          U && qt(N, fn3), mn && Vt(N, fn3);
        }
        return Yt(c, U, mn, q3, O2, le2.current, N);
      }
    }
    var Kt = An.ReactCurrentOwner, Er = An.ReactDebugCurrentFrame;
    function Re2(c) {
      if (c) {
        var w = c._owner, E = _e2(c.type, c._source, w ? w.type : null);
        Er.setExtraStackFrame(E);
      } else
        Er.setExtraStackFrame(null);
    }
    var Ct2;
    Ct2 = false;
    function Zt2(c) {
      return typeof c == "object" && c !== null && c.$$typeof === g2;
    }
    function Rr() {
      {
        if (Kt.current) {
          var c = oe2(Kt.current.type);
          if (c)
            return `

Check the render method of \`` + c + "`.";
        }
        return "";
      }
    }
    function Li(c) {
      {
        if (c !== void 0) {
          var w = c.fileName.replace(/^.*[\\\/]/, ""), E = c.lineNumber;
          return `

Check your code at ` + w + ":" + E + ".";
        }
        return "";
      }
    }
    var Tr = {};
    function Sr(c) {
      {
        var w = Rr();
        if (!w) {
          var E = typeof c == "string" ? c : c.displayName || c.name;
          E && (w = `

Check the top-level render call using <` + E + ">.");
        }
        return w;
      }
    }
    function Ar(c, w) {
      {
        if (!c._store || c._store.validated || c.key != null)
          return;
        c._store.validated = true;
        var E = Sr(w);
        if (Tr[E])
          return;
        Tr[E] = true;
        var O2 = "";
        c && c._owner && c._owner !== Kt.current && (O2 = " It was passed a child from " + oe2(c._owner.type) + "."), Re2(c), pn('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', E, O2), Re2(null);
      }
    }
    function Ir(c, w) {
      {
        if (typeof c != "object")
          return;
        if (Ee2(c))
          for (var E = 0; E < c.length; E++) {
            var O2 = c[E];
            Zt2(O2) && Ar(O2, w);
          }
        else if (Zt2(c))
          c._store && (c._store.validated = true);
        else if (c) {
          var q3 = Sn(c);
          if (typeof q3 == "function" && q3 !== c.entries)
            for (var Z = q3.call(c), N; !(N = Z.next()).done; )
              Zt2(N.value) && Ar(N.value, w);
        }
      }
    }
    function Oi(c) {
      {
        var w = c.type;
        if (w == null || typeof w == "string")
          return;
        var E;
        if (typeof w == "function")
          E = w.propTypes;
        else if (typeof w == "object" && (w.$$typeof === D || // Note: Memo only checks outer props here.
        // Inner props are checked in the reconciler.
        w.$$typeof === un))
          E = w.propTypes;
        else
          return;
        if (E) {
          var O2 = oe2(w);
          rt(E, c.props, "prop", O2, c);
        } else if (w.PropTypes !== void 0 && !Ct2) {
          Ct2 = true;
          var q3 = oe2(w);
          pn("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", q3 || "Unknown");
        }
        typeof w.getDefaultProps == "function" && !w.getDefaultProps.isReactClassApproved && pn("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
      }
    }
    function Jt(c) {
      {
        for (var w = Object.keys(c.props), E = 0; E < w.length; E++) {
          var O2 = w[E];
          if (O2 !== "children" && O2 !== "key") {
            Re2(c), pn("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", O2), Re2(null);
            break;
          }
        }
        c.ref !== null && (Re2(c), pn("Invalid attribute `ref` supplied to `React.Fragment`."), Re2(null));
      }
    }
    function Mr(c, w, E, O2, q3, Z) {
      {
        var N = Ti(c);
        if (!N) {
          var U = "";
          (c === void 0 || typeof c == "object" && c !== null && Object.keys(c).length === 0) && (U += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");
          var mn = Li(q3);
          mn ? U += mn : U += Rr();
          var on;
          c === null ? on = "null" : Ee2(c) ? on = "array" : c !== void 0 && c.$$typeof === g2 ? (on = "<" + (oe2(c.type) || "Unknown") + " />", U = " Did you accidentally export a JSX literal instead of a component?") : on = typeof c, pn("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", on, U);
        }
        var fn3 = Mi(c, w, E, q3, Z);
        if (fn3 == null)
          return fn3;
        if (N) {
          var In = w.children;
          if (In !== void 0)
            if (O2)
              if (Ee2(In)) {
                for (var fe2 = 0; fe2 < In.length; fe2++)
                  Ir(In[fe2], c);
                Object.freeze && Object.freeze(In);
              } else
                pn("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else
              Ir(In, c);
        }
        return c === b2 ? Jt(fn3) : Oi(fn3), fn3;
      }
    }
    function Xt2(c, w, E) {
      return Mr(c, w, E, true);
    }
    function Bi(c, w, E) {
      return Mr(c, w, E, false);
    }
    var Hi = Bi, ki = Xt2;
    vr.Fragment = b2, vr.jsx = Hi, vr.jsxs = ki;
  }()), vr;
}
false ? Ku.exports = v0() : Ku.exports = p0();
var eo2 = Ku.exports;
var _0 = eo2.Fragment;
var x2 = eo2.jsx;
var Tn = eo2.jsxs;
function wv(u2) {
  var g2;
  return (
    // TODO: Should we wrap editor in MantineProvider? Otherwise we have to duplicate color hex values.
    // <MantineProvider theme={BlockNoteTheme}>
    x2(EditorContent, { editor: ((g2 = u2.editor) == null ? void 0 : g2._tiptapEditor) || null })
  );
}
var Fl = {
  color: void 0,
  size: void 0,
  className: void 0,
  style: void 0,
  attr: void 0
};
var Ll = import_react291.default.createContext && import_react291.default.createContext(Fl);
var Qe2 = globalThis && globalThis.__assign || function() {
  return Qe2 = Object.assign || function(u2) {
    for (var g2, a2 = 1, b2 = arguments.length; a2 < b2; a2++) {
      g2 = arguments[a2];
      for (var T2 in g2)
        Object.prototype.hasOwnProperty.call(g2, T2) && (u2[T2] = g2[T2]);
    }
    return u2;
  }, Qe2.apply(this, arguments);
};
var m0 = globalThis && globalThis.__rest || function(u2, g2) {
  var a2 = {};
  for (var b2 in u2)
    Object.prototype.hasOwnProperty.call(u2, b2) && g2.indexOf(b2) < 0 && (a2[b2] = u2[b2]);
  if (u2 != null && typeof Object.getOwnPropertySymbols == "function")
    for (var T2 = 0, b2 = Object.getOwnPropertySymbols(u2); T2 < b2.length; T2++)
      g2.indexOf(b2[T2]) < 0 && Object.prototype.propertyIsEnumerable.call(u2, b2[T2]) && (a2[b2[T2]] = u2[b2[T2]]);
  return a2;
};
function Dl(u2) {
  return u2 && u2.map(function(g2, a2) {
    return import_react291.default.createElement(g2.tag, Qe2({
      key: a2
    }, g2.attr), Dl(g2.child));
  });
}
function tn(u2) {
  return function(g2) {
    return import_react291.default.createElement(x0, Qe2({
      attr: Qe2({}, u2.attr)
    }, g2), Dl(u2.child));
  };
}
function x0(u2) {
  var g2 = function(a2) {
    var b2 = u2.attr, T2 = u2.size, B2 = u2.title, C = m0(u2, ["attr", "size", "title"]), V2 = T2 || a2.size || "1em", D;
    return a2.className && (D = a2.className), u2.className && (D = (D ? D + " " : "") + u2.className), import_react291.default.createElement("svg", Qe2({
      stroke: "currentColor",
      fill: "currentColor",
      strokeWidth: "0"
    }, a2.attr, b2, C, {
      className: D,
      style: Qe2(Qe2({
        color: u2.color || a2.color
      }, a2.style), u2.style),
      height: V2,
      width: V2,
      xmlns: "http://www.w3.org/2000/svg"
    }), B2 && import_react291.default.createElement("title", null, B2), u2.children);
  };
  return Ll !== void 0 ? import_react291.default.createElement(Ll.Consumer, null, function(a2) {
    return g2(a2);
  }) : g2(Fl);
}
function y0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0V0z" } }, { tag: "path", attr: { d: "M11 18c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2zm-2-8c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm6 4c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z" } }] })(u2);
}
function Zu(u2) {
  return tn({ tag: "svg", attr: { version: "1.2", baseProfile: "tiny", viewBox: "0 0 24 24" }, child: [{ tag: "path", attr: { d: "M16.972 6.251c-.967-.538-2.185-.188-2.72.777l-3.713 6.682-2.125-2.125c-.781-.781-2.047-.781-2.828 0-.781.781-.781 2.047 0 2.828l4 4c.378.379.888.587 1.414.587l.277-.02c.621-.087 1.166-.46 1.471-1.009l5-9c.537-.966.189-2.183-.776-2.72z" } }] })(u2);
}
function w0(u2) {
  return tn({ tag: "svg", attr: { t: "1551322312294", style: "", viewBox: "0 0 1024 1024", version: "1.1" }, child: [{ tag: "defs", attr: {}, child: [] }, { tag: "path", attr: { d: "M474 152m8 0l60 0q8 0 8 8l0 704q0 8-8 8l-60 0q-8 0-8-8l0-704q0-8 8-8Z" } }, { tag: "path", attr: { d: "M168 474m8 0l672 0q8 0 8 8l0 60q0 8-8 8l-672 0q-8 0-8-8l0-60q0-8 8-8Z" } }] })(u2);
}
function b0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M23 12l-7.071 7.071-1.414-1.414L20.172 12l-5.657-5.657 1.414-1.414L23 12zM3.828 12l5.657 5.657-1.414 1.414L1 12l7.071-7.071 1.414 1.414L3.828 12z" } }] }] })(u2);
}
function C0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M3 4h18v2H3V4zm2 15h14v2H5v-2zm-2-5h18v2H3v-2zm2-5h14v2H5V9z" } }] }] })(u2);
}
function E0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M3 4h18v2H3V4zm0 15h18v2H3v-2zm0-5h18v2H3v-2zm0-5h18v2H3V9z" } }] }] })(u2);
}
function R0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M3 4h18v2H3V4zm0 15h14v2H3v-2zm0-5h18v2H3v-2zm0-5h14v2H3V9z" } }] }] })(u2);
}
function T0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M3 4h18v2H3V4zm4 15h14v2H7v-2zm-4-5h18v2H3v-2zm4-5h14v2H7V9z" } }] }] })(u2);
}
function S0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M8 11h4.5a2.5 2.5 0 1 0 0-5H8v5zm10 4.5a4.5 4.5 0 0 1-4.5 4.5H6V4h6.5a4.5 4.5 0 0 1 3.256 7.606A4.498 4.498 0 0 1 18 15.5zM8 13v5h5.5a2.5 2.5 0 1 0 0-5H8z" } }] }] })(u2);
}
function Ul(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0H24V24H0z" } }, { tag: "path", attr: { d: "M13 20h-2v-7H4v7H2V4h2v7h7V4h2v16zm8-12v12h-2v-9.796l-2 .536V8.67L19.5 8H21z" } }] }] })(u2);
}
function Wl(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0H24V24H0z" } }, { tag: "path", attr: { d: "M4 4v7h7V4h2v16h-2v-7H4v7H2V4h2zm14.5 4c2.071 0 3.75 1.679 3.75 3.75 0 .857-.288 1.648-.772 2.28l-.148.18L18.034 18H22v2h-7v-1.556l4.82-5.546c.268-.307.43-.709.43-1.148 0-.966-.784-1.75-1.75-1.75-.918 0-1.671.707-1.744 1.606l-.006.144h-2C14.75 9.679 16.429 8 18.5 8z" } }] }] })(u2);
}
function Nl2(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0H24V24H0z" } }, { tag: "path", attr: { d: "M22 8l-.002 2-2.505 2.883c1.59.435 2.757 1.89 2.757 3.617 0 2.071-1.679 3.75-3.75 3.75-1.826 0-3.347-1.305-3.682-3.033l1.964-.382c.156.806.866 1.415 1.718 1.415.966 0 1.75-.784 1.75-1.75s-.784-1.75-1.75-1.75c-.286 0-.556.069-.794.19l-1.307-1.547L19.35 10H15V8h7zM4 4v7h7V4h2v16h-2v-7H4v7H2V4h2z" } }] }] })(u2);
}
function A0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M3 4h18v2H3V4zm0 15h18v2H3v-2zm8-5h10v2H11v-2zm0-5h10v2H11V9zm-8 3.5L7 9v7l-4-3.5z" } }] }] })(u2);
}
function I0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M3 4h18v2H3V4zm0 15h18v2H3v-2zm8-5h10v2H11v-2zm0-5h10v2H11V9zm-4 3.5L3 16V9l4 3.5z" } }] }] })(u2);
}
function M0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M15 20H7v-2h2.927l2.116-12H9V4h8v2h-2.927l-2.116 12H15z" } }] }] })(u2);
}
function L0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M17 17h5v2h-3v3h-2v-5zM7 7H2V5h3V2h2v5zm11.364 8.536L16.95 14.12l1.414-1.414a5 5 0 1 0-7.071-7.071L9.879 7.05 8.464 5.636 9.88 4.222a7 7 0 0 1 9.9 9.9l-1.415 1.414zm-2.828 2.828l-1.415 1.414a7 7 0 0 1-9.9-9.9l1.415-1.414L7.05 9.88l-1.414 1.414a5 5 0 1 0 7.071 7.071l1.414-1.414 1.415 1.414zm-.708-10.607l1.415 1.415-7.071 7.07-1.415-1.414 7.071-7.07z" } }] }] })(u2);
}
function $l(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M18.364 15.536L16.95 14.12l1.414-1.414a5 5 0 1 0-7.071-7.071L9.879 7.05 8.464 5.636 9.88 4.222a7 7 0 0 1 9.9 9.9l-1.415 1.414zm-2.828 2.828l-1.415 1.414a7 7 0 0 1-9.9-9.9l1.415-1.414L7.05 9.88l-1.414 1.414a5 5 0 1 0 7.071 7.071l1.414-1.414 1.415 1.414zm-.708-10.607l1.415 1.415-7.071 7.07-1.415-1.414 7.071-7.07z" } }] }] })(u2);
}
function Gl(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M8 4h13v2H8V4zM5 3v3h1v1H3V6h1V4H3V3h2zM3 14v-2.5h2V11H3v-1h3v2.5H4v.5h2v1H3zm2 5.5H3v-1h2V18H3v-1h3v4H3v-1h2v-.5zM8 11h13v2H8v-2zm0 7h13v2H8v-2z" } }] }] })(u2);
}
function ql(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M8 4h13v2H8V4zM4.5 6.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 7a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zm0 6.9a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3zM8 11h13v2H8v-2zm0 7h13v2H8v-2z" } }] }] })(u2);
}
function O0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M17.154 14c.23.516.346 1.09.346 1.72 0 1.342-.524 2.392-1.571 3.147C14.88 19.622 13.433 20 11.586 20c-1.64 0-3.263-.381-4.87-1.144V16.6c1.52.877 3.075 1.316 4.666 1.316 2.551 0 3.83-.732 3.839-2.197a2.21 2.21 0 0 0-.648-1.603l-.12-.117H3v-2h18v2h-3.846zm-4.078-3H7.629a4.086 4.086 0 0 1-.481-.522C6.716 9.92 6.5 9.246 6.5 8.452c0-1.236.466-2.287 1.397-3.153C8.83 4.433 10.271 4 12.222 4c1.471 0 2.879.328 4.222.984v2.152c-1.2-.687-2.515-1.03-3.946-1.03-2.48 0-3.719.782-3.719 2.346 0 .42.218.786.654 1.099.436.313.974.562 1.613.75.62.18 1.297.414 2.03.699z" } }] }] })(u2);
}
function to2(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M13 6v15h-2V6H5V4h14v2z" } }] }] })(u2);
}
function B0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M8 3v9a4 4 0 1 0 8 0V3h2v9a6 6 0 1 1-12 0V3h2zM4 20h16v2H4v-2z" } }] }] })(u2);
}
function H0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 24 24" }, child: [{ tag: "g", attr: {}, child: [{ tag: "path", attr: { fill: "none", d: "M0 0h24v24H0z" } }, { tag: "path", attr: { d: "M10 6v2H5v11h11v-5h2v6a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm11-3v9l-3.794-3.793-5.999 6-1.414-1.414 5.999-6L12 3h9z" } }] }] })(u2);
}
function k0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 20 20", fill: "currentColor", "aria-hidden": "true" }, child: [{ tag: "path", attr: { fillRule: "evenodd", d: "M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z", clipRule: "evenodd" } }] })(u2);
}
function P0(u2) {
  return tn({ tag: "svg", attr: { viewBox: "0 0 20 20", fill: "currentColor", "aria-hidden": "true" }, child: [{ tag: "path", attr: { fillRule: "evenodd", d: "M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z", clipRule: "evenodd" } }] })(u2);
}
var z0 = (u2) => {
  const { classes: g2 } = createStyles({ root: {} })(void 0, {
    name: "DragHandleMenu"
  });
  return x2(Menu.Dropdown, { className: g2.root, children: u2.children });
};
var Vl = (u2) => x2(
  Menu.Item,
  {
    ...u2,
    onClick: (g2) => {
      var a2;
      u2.closeMenu(), (a2 = u2.onClick) == null || a2.call(u2, g2);
    },
    children: u2.children
  }
);
var F0 = (u2) => x2(
  Vl,
  {
    closeMenu: u2.closeMenu,
    onClick: () => u2.editor.removeBlocks([u2.block]),
    children: u2.children
  }
);
var Ju = (u2) => {
  const g2 = u2.textColor || "default", a2 = u2.backgroundColor || "default", b2 = u2.size || 16;
  return x2(
    Box,
    {
      sx: (T2) => ({
        backgroundColor: T2.colors.backgroundColors[T2.other.colors.indexOf(a2)],
        border: "solid #D3D3D3 1px",
        borderRadius: (b2 * 0.25).toString() + "px",
        color: T2.colors.textColors[T2.other.colors.indexOf(g2)],
        fontSize: (b2 * 0.75).toString() + "px",
        height: b2.toString() + "px",
        lineHeight: b2.toString() + "px",
        textAlign: "center",
        width: b2.toString() + "px"
      }),
      children: "A"
    }
  );
};
var Yl = (u2) => Tn(_0, { children: [
  x2(Menu.Label, { children: "Text" }),
  [
    "default",
    "gray",
    "brown",
    "red",
    "orange",
    "yellow",
    "green",
    "blue",
    "purple",
    "pink"
  ].map((g2) => x2(
    Menu.Item,
    {
      onClick: () => {
        u2.onClick && u2.onClick(), u2.setTextColor(g2);
      },
      component: "div",
      "data-test": "text-color-" + g2,
      icon: x2(Ju, { textColor: g2, size: u2.iconSize }),
      rightSection: u2.textColor === g2 ? x2(Zu, { size: 16, style: { paddingLeft: "8px" } }) : x2("div", { style: { width: "24px", padding: "0" } }),
      children: g2.charAt(0).toUpperCase() + g2.slice(1)
    },
    "text-color-" + g2
  )),
  x2(Menu.Label, { children: "Background" }),
  [
    "default",
    "gray",
    "brown",
    "red",
    "orange",
    "yellow",
    "green",
    "blue",
    "purple",
    "pink"
  ].map((g2) => x2(
    Menu.Item,
    {
      onClick: () => {
        u2.onClick && u2.onClick(), u2.setBackgroundColor(g2);
      },
      component: "div",
      "data-test": "background-color-" + g2,
      icon: x2(Ju, { backgroundColor: g2, size: u2.iconSize }),
      rightSection: u2.backgroundColor === g2 ? x2(Zu, { size: 16, style: { paddingLeft: "8px" } }) : x2("div", { style: { width: "24px", padding: "0" } }),
      children: g2.charAt(0).toUpperCase() + g2.slice(1)
    },
    "background-color-" + g2
  ))
] });
var D0 = (u2) => {
  const [g2, a2] = (0, import_react291.useState)(false), b2 = (0, import_react291.useRef)(), T2 = (0, import_react291.useCallback)(() => {
    b2.current && clearTimeout(b2.current), b2.current = setTimeout(() => {
      a2(false);
    }, 250);
  }, []), B2 = (0, import_react291.useCallback)(() => {
    b2.current && clearTimeout(b2.current), a2(true);
  }, []);
  return x2(
    Vl,
    {
      closeMenu: u2.closeMenu,
      onMouseLeave: T2,
      onMouseOver: B2,
      children: Tn(Menu, { opened: g2, position: "right", children: [
        x2(Menu.Target, { children: Tn("div", { style: { display: "flex", alignItems: "center" }, children: [
          x2("div", { style: { flex: 1 }, children: u2.children }),
          x2(Box, { style: { display: "flex", alignItems: "center" }, children: x2(P0, { size: 15 }) })
        ] }) }),
        x2(
          Menu.Dropdown,
          {
            onMouseLeave: T2,
            onMouseOver: B2,
            style: { marginLeft: "5px" },
            children: x2(
              Yl,
              {
                iconSize: 18,
                textColor: u2.block.props.textColor || "default",
                backgroundColor: u2.block.props.backgroundColor || "default",
                setTextColor: (C) => u2.editor.updateBlock(u2.block, {
                  props: { textColor: C }
                }),
                setBackgroundColor: (C) => u2.editor.updateBlock(u2.block, {
                  props: { backgroundColor: C }
                })
              }
            )
          }
        )
      ] })
    }
  );
};
var Kl = (u2) => Tn(z0, { children: [
  x2(F0, { ...u2, children: "Delete" }),
  x2(D0, { ...u2, children: "Colors" })
] });
var U0 = (u2) => {
  const [g2, a2] = (0, import_react291.useState)(false), b2 = (0, import_react291.useRef)(null);
  (0, import_react291.useEffect)(() => {
    const C = b2.current;
    if (C instanceof HTMLDivElement)
      return C.addEventListener("dragstart", u2.blockDragStart), C.addEventListener("dragend", u2.blockDragEnd), () => {
        C.removeEventListener("dragstart", u2.blockDragStart), C.removeEventListener("dragend", u2.blockDragEnd);
      };
  }, [u2.blockDragEnd, u2.blockDragStart]);
  const T2 = () => {
    a2(false), u2.unfreezeMenu();
  }, B2 = u2.dragHandleMenu || Kl;
  return Tn(Group, { spacing: 0, children: [
    x2(ActionIcon, { size: 24, "data-test": "dragHandleAdd", children: x2(
      w0,
      {
        size: 24,
        onClick: () => {
          u2.addBlock();
        }
      }
    ) }),
    Tn(Menu, { opened: g2, width: 100, position: "left", children: [
      x2(Menu.Target, { children: x2("div", { draggable: "true", ref: b2, children: x2(
        ActionIcon,
        {
          onClick: () => {
            a2(true), u2.freezeMenu();
          },
          size: 24,
          "data-test": "dragHandle",
          children: x2(y0, { size: 24 })
        }
      ) }) }),
      x2(
        B2,
        {
          editor: u2.editor,
          block: u2.block,
          closeMenu: T2
        }
      )
    ] })
  ] });
};
var Xu;
var mi = import_react_dom10.default;
if (false)
  Xu = mi.createRoot, mi.hydrateRoot;
else {
  Ol = mi.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
  Xu = function(u2, g2) {
    Ol.usingClientEntryPoint = true;
    try {
      return mi.createRoot(u2, g2);
    } finally {
      Ol.usingClientEntryPoint = false;
    }
  };
}
var Ol;
function Bl(u2) {
  const g2 = u2.editorElementComponent, [a2, b2] = (0, import_react291.useState)(false), T2 = (0, import_react291.useCallback)(
    () => u2.dynamicParams.referenceRect,
    [u2.dynamicParams]
  ), B2 = (0, import_react291.useCallback)(() => {
    b2(false), document.body.appendChild(u2.rootElement);
  }, [u2.rootElement]), C = (0, import_react291.useCallback)(() => {
    u2.rootElement.remove(), b2(true);
  }, [u2.rootElement]);
  return x2(MantineProvider, { theme: u2.theme, children: x2(
    tippy_react_esm_default,
    {
      appendTo: u2.rootElement,
      content: a2 ? void 0 : x2(
        g2,
        {
          ...u2.staticParams,
          ...u2.dynamicParams
        }
      ),
      getReferenceClientRect: a2 ? void 0 : T2,
      interactive: true,
      onShow: B2,
      onHidden: C,
      visible: u2.isOpen,
      ...u2.tippyProps
    }
  ) });
}
var Ri = (u2, g2, a2, b2) => {
  const T2 = document.createElement("div"), B2 = Xu(T2);
  let C;
  return {
    element: T2,
    render: (V2, D) => {
      C = V2, B2.render(
        x2(
          Bl,
          {
            rootElement: T2,
            isOpen: true,
            staticParams: u2,
            dynamicParams: V2,
            editorElementComponent: g2,
            theme: a2,
            tippyProps: b2
          }
        )
      );
    },
    hide: () => {
      B2.render(
        x2(
          Bl,
          {
            rootElement: T2,
            isOpen: false,
            staticParams: u2,
            dynamicParams: C,
            editorElementComponent: g2,
            theme: a2,
            tippyProps: b2
          }
        )
      );
    }
  };
};
var W0 = (u2, g2 = Kl) => {
  const a2 = g2, b2 = (T2) => x2(U0, { ...T2, dragHandleMenu: a2 });
  return (T2) => Ri(
    T2,
    b2,
    u2,
    {
      animation: "fade",
      offset: [0, 0],
      placement: "left"
    }
  );
};
var Zl = (u2) => {
  const { classes: g2 } = createStyles({ root: {} })(void 0, {
    name: "Toolbar"
  });
  return x2(Group, { className: g2.root, children: u2.children });
};
function N0(u2) {
  const g2 = u2.icon;
  return x2(
    Menu.Item,
    {
      onClick: u2.onClick,
      icon: g2 && x2(g2, { size: 16 }),
      rightSection: u2.isSelected ? x2(Zu, { size: 16 }) : (
        // Ensures space for tick even if item isn't currently selected.
        x2("div", { style: { width: "16px", padding: "0" } })
      ),
      disabled: u2.isDisabled,
      children: u2.text
    },
    u2.text
  );
}
var $0 = (0, import_react291.forwardRef)((u2, g2) => {
  const { text: a2, icon: b2, isDisabled: T2, ...B2 } = u2, C = u2.icon;
  return x2(
    Button,
    {
      leftIcon: C && x2(C, { size: 16 }),
      rightIcon: x2(k0, {}),
      size: "xs",
      variant: "subtle",
      disabled: u2.isDisabled,
      ref: g2,
      ...B2,
      children: u2.text
    }
  );
});
function G0(u2) {
  const g2 = u2.items.filter((a2) => a2.isSelected)[0];
  return Tn(Menu, { exitTransitionDuration: 0, disabled: u2.isDisabled, children: [
    x2(Menu.Target, { children: x2($0, { ...g2 }) }),
    x2(Menu.Dropdown, { children: u2.items.map((a2) => x2(N0, { ...a2 }, a2.text)) })
  ] });
}
var q0 = (u2) => {
  const [g2, a2] = (0, import_react291.useState)(
    u2.editor.getTextCursorPosition().block
  );
  return (0, import_react291.useEffect)(
    () => a2(u2.editor.getTextCursorPosition().block),
    [u2]
  ), x2(
    G0,
    {
      items: [
        {
          onClick: () => {
            u2.editor.focus(), u2.editor.updateBlock(g2, {
              type: "paragraph",
              props: {}
            });
          },
          text: "Paragraph",
          icon: to2,
          isSelected: g2.type === "paragraph"
        },
        {
          onClick: () => {
            u2.editor.focus(), u2.editor.updateBlock(g2, {
              type: "heading",
              props: { level: "1" }
            });
          },
          text: "Heading 1",
          icon: Ul,
          isSelected: g2.type === "heading" && g2.props.level === "1"
        },
        {
          onClick: () => {
            u2.editor.focus(), u2.editor.updateBlock(g2, {
              type: "heading",
              props: { level: "2" }
            });
          },
          text: "Heading 2",
          icon: Wl,
          isSelected: g2.type === "heading" && g2.props.level === "2"
        },
        {
          onClick: () => {
            u2.editor.focus(), u2.editor.updateBlock(g2, {
              type: "heading",
              props: { level: "3" }
            });
          },
          text: "Heading 3",
          icon: Nl2,
          isSelected: g2.type === "heading" && g2.props.level === "3"
        },
        {
          onClick: () => {
            u2.editor.focus(), u2.editor.updateBlock(g2, {
              type: "bulletListItem",
              props: {}
            });
          },
          text: "Bullet List",
          icon: ql,
          isSelected: g2.type === "bulletListItem"
        },
        {
          onClick: () => {
            u2.editor.focus(), u2.editor.updateBlock(g2, {
              type: "numberedListItem",
              props: {}
            });
          },
          text: "Numbered List",
          icon: Gl,
          isSelected: g2.type === "numberedListItem"
        }
      ]
    }
  );
};
var Jl = (u2) => {
  const { classes: g2 } = createStyles({ root: {} })(void 0, {
    name: "Tooltip"
  });
  return Tn(Stack, { spacing: 0, className: g2.root, children: [
    x2(Text, { size: "sm", children: u2.mainTooltip }),
    u2.secondaryTooltip && x2(Text, { size: "xs", children: u2.secondaryTooltip })
  ] });
};
var Pe2 = (0, import_react291.forwardRef)(
  (u2, g2) => {
    const a2 = u2.icon;
    return x2(
      tippy_react_esm_default,
      {
        content: x2(
          Jl,
          {
            mainTooltip: u2.mainTooltip,
            secondaryTooltip: u2.secondaryTooltip
          }
        ),
        trigger: "mouseenter",
        children: u2.children ? Tn(
          Button,
          {
            onClick: u2.onClick,
            "data-selected": u2.isSelected ? "true" : void 0,
            "data-test": u2.mainTooltip.slice(0, 1).toLowerCase() + u2.mainTooltip.replace(/\s+/g, "").slice(1),
            size: "xs",
            disabled: u2.isDisabled || false,
            ref: g2,
            children: [
              a2 && x2(a2, {}),
              u2.children
            ]
          }
        ) : x2(
          ActionIcon,
          {
            onClick: u2.onClick,
            "data-selected": u2.isSelected ? "true" : void 0,
            "data-test": u2.mainTooltip.slice(0, 1).toLowerCase() + u2.mainTooltip.replace(/\s+/g, "").slice(1),
            size: 30,
            disabled: u2.isDisabled || false,
            ref: g2,
            children: a2 && x2(a2, {})
          }
        )
      }
    );
  }
);
var V0 = () => typeof navigator < "u" && (/Mac/.test(navigator.platform) || /AppleWebKit/.test(navigator.userAgent) && /Mobile\/\w+/.test(navigator.userAgent));
function we2(u2) {
  return V0() ? u2.replace("Mod", "⌘") : u2.replace("Mod", "Ctrl");
}
var Y0 = {
  bold: "Mod+B",
  italic: "Mod+I",
  underline: "Mod+U",
  strike: "Mod+Shift+X",
  code: ""
};
var K0 = {
  bold: S0,
  italic: M0,
  underline: B0,
  strike: O0,
  code: b0
};
var xi = (u2) => {
  const g2 = (a2) => {
    u2.editor.focus(), u2.editor.toggleStyles({ [a2]: true });
  };
  return x2(
    Pe2,
    {
      onClick: () => g2(u2.toggledStyle),
      isSelected: u2.toggledStyle in u2.editor.getActiveStyles(),
      mainTooltip: u2.toggledStyle.slice(0, 1).toUpperCase() + u2.toggledStyle.slice(1),
      secondaryTooltip: we2(Y0[u2.toggledStyle]),
      icon: K0[u2.toggledStyle]
    }
  );
};
var Z0 = {
  left: R0,
  center: C0,
  right: T0,
  justify: E0
};
var Vu = (u2) => {
  const g2 = (0, import_react291.useCallback)(
    (a2) => {
      u2.editor.focus();
      const b2 = u2.editor.getSelection();
      if (b2)
        for (const T2 of b2.blocks)
          u2.editor.updateBlock(T2, {
            props: { textAlignment: a2 }
          });
      else
        u2.editor.updateBlock(u2.editor.getTextCursorPosition().block, {
          props: { textAlignment: a2 }
        });
    },
    [u2.editor]
  );
  return x2(
    Pe2,
    {
      onClick: () => g2(u2.textAlignment),
      isSelected: u2.editor.getTextCursorPosition().block.props.textAlignment === u2.textAlignment,
      mainTooltip: u2.textAlignment === "justify" ? "Justify Text" : "Align Text " + u2.textAlignment.slice(0, 1).toUpperCase() + u2.textAlignment.slice(1),
      icon: Z0[u2.textAlignment]
    }
  );
};
var J0 = (u2) => {
  const g2 = (0, import_react291.useCallback)(
    (b2) => {
      u2.editor.focus(), b2 === "default" ? u2.editor.removeStyles({ textColor: b2 }) : u2.editor.addStyles({ textColor: b2 });
    },
    [u2.editor]
  ), a2 = (0, import_react291.useCallback)(
    (b2) => {
      u2.editor.focus(), b2 === "default" ? u2.editor.removeStyles({ backgroundColor: b2 }) : u2.editor.addStyles({ backgroundColor: b2 });
    },
    [u2.editor]
  );
  return Tn(Menu, { children: [
    x2(Menu.Target, { children: x2(
      Pe2,
      {
        mainTooltip: "Colors",
        icon: () => x2(
          Ju,
          {
            textColor: u2.editor.getActiveStyles().textColor || "default",
            backgroundColor: u2.editor.getActiveStyles().backgroundColor || "default",
            size: 20
          }
        )
      }
    ) }),
    x2(Menu.Dropdown, { children: x2(
      Yl,
      {
        textColor: u2.editor.getActiveStyles().textColor || "default",
        setTextColor: g2,
        backgroundColor: u2.editor.getActiveStyles().backgroundColor || "default",
        setBackgroundColor: a2
      }
    ) })
  ] });
};
var X0 = (u2) => {
  const g2 = (0, import_react291.useCallback)(() => {
    u2.editor.focus(), u2.editor.nestBlock();
  }, [u2.editor]);
  return x2(
    Pe2,
    {
      onClick: g2,
      isDisabled: !u2.editor.canNestBlock(),
      mainTooltip: "Nest Block",
      secondaryTooltip: we2("Tab"),
      icon: I0
    }
  );
};
var Q0 = (u2) => {
  const g2 = (0, import_react291.useCallback)(() => {
    u2.editor.focus(), u2.editor.unnestBlock();
  }, [u2]);
  return x2(
    Pe2,
    {
      onClick: g2,
      isDisabled: !u2.editor.canUnnestBlock(),
      mainTooltip: "Unnest Block",
      secondaryTooltip: we2("Shift+Tab"),
      icon: A0
    }
  );
};
function j0(u2) {
  const g2 = u2.icon;
  return x2(
    tippy_react_esm_default,
    {
      content: x2(
        Jl,
        {
          mainTooltip: u2.mainTooltip,
          secondaryTooltip: u2.secondaryTooltip
        }
      ),
      placement: "left",
      children: x2(Container, { children: x2(g2, { size: 16 }) })
    }
  );
}
function nv(u2) {
  function g2(a2) {
    a2.key === "Enter" && (a2.preventDefault(), u2.onSubmit());
  }
  return x2(
    TextInput,
    {
      autoFocus: u2.autofocus,
      size: "xs",
      value: u2.value,
      onChange: (a2) => u2.onChange(a2.currentTarget.value),
      onKeyDown: g2,
      placeholder: u2.placeholder
    }
  );
}
function Hl(u2) {
  return Tn(Group, { children: [
    x2(
      j0,
      {
        icon: u2.icon,
        mainTooltip: u2.mainIconTooltip,
        secondaryTooltip: u2.secondaryIconTooltip
      }
    ),
    x2(
      nv,
      {
        autofocus: u2.autofocus,
        placeholder: u2.placeholder,
        value: u2.value,
        onChange: u2.onChange,
        onSubmit: u2.onSubmit
      }
    )
  ] });
}
var Xl = (0, import_react291.forwardRef)((u2, g2) => {
  const { classes: a2 } = createStyles({ root: {} })(void 0, {
    name: "EditHyperlinkMenu"
  }), [b2, T2] = (0, import_react291.useState)(u2.url), [B2, C] = (0, import_react291.useState)(u2.text);
  return Tn(Stack, { className: a2.root, ref: g2, children: [
    x2(
      Hl,
      {
        icon: $l,
        mainIconTooltip: "Edit URL",
        autofocus: true,
        placeholder: "Edit URL",
        value: b2,
        onChange: (V2) => T2(V2),
        onSubmit: () => u2.update(b2, B2)
      }
    ),
    x2(
      Hl,
      {
        icon: to2,
        mainIconTooltip: "Edit Title",
        placeholder: "Edit Title",
        value: B2,
        onChange: (V2) => C(V2),
        onSubmit: () => u2.update(b2, B2)
      }
    )
  ] });
});
var ev = (u2) => {
  const [g2, a2] = (0, import_react291.useState)(), [b2, T2] = (0, import_react291.useState)(false), B2 = (0, import_react291.useRef)(null), C = (0, import_react291.useRef)(null), V2 = (0, import_react291.useCallback)(() => {
    a2(
      x2(
        Xl,
        {
          url: u2.activeHyperlinkUrl,
          text: u2.activeHyperlinkText,
          update: (hn, Q) => {
            u2.setHyperlink(hn, Q), T2(false);
          },
          ref: C
        },
        Math.random() + ""
      )
    );
  }, [u2]), D = (0, import_react291.useCallback)(
    (hn) => {
      var Q, un;
      if ((Q = B2.current) != null && Q.contains(hn.target)) {
        T2(!b2);
        return;
      }
      (un = C.current) != null && un.contains(hn.target) || T2(false);
    },
    [b2]
  );
  return (0, import_react291.useEffect)(() => (document.body.addEventListener("click", D), () => document.body.removeEventListener("click", D)), [D]), x2(
    tippy_react_esm_default,
    {
      appendTo: document.body,
      content: g2,
      onShow: V2,
      interactive: true,
      maxWidth: 500,
      visible: b2,
      children: x2(
        Pe2,
        {
          isSelected: u2.isSelected,
          mainTooltip: u2.mainTooltip,
          secondaryTooltip: u2.secondaryTooltip,
          icon: u2.icon,
          ref: B2
        }
      )
    }
  );
};
var tv = (u2) => {
  const g2 = (0, import_react291.useCallback)(
    (a2, b2) => {
      u2.editor.focus(), u2.editor.createLink(a2, b2);
    },
    [u2.editor]
  );
  return x2(
    ev,
    {
      isSelected: !!u2.editor.getSelectedLinkUrl(),
      mainTooltip: "Link",
      secondaryTooltip: we2("Mod+K"),
      icon: $l,
      hyperlinkIsActive: !!u2.editor.getSelectedLinkUrl(),
      activeHyperlinkUrl: u2.editor.getSelectedLinkUrl() || "",
      activeHyperlinkText: u2.editor.getSelectedText(),
      setHyperlink: g2
    }
  );
};
var rv = (u2) => Tn(Zl, { children: [
  x2(q0, { ...u2 }),
  x2(xi, { editor: u2.editor, toggledStyle: "bold" }),
  x2(xi, { editor: u2.editor, toggledStyle: "italic" }),
  x2(xi, { editor: u2.editor, toggledStyle: "underline" }),
  x2(xi, { editor: u2.editor, toggledStyle: "strike" }),
  x2(Vu, { editor: u2.editor, textAlignment: "left" }),
  x2(Vu, { editor: u2.editor, textAlignment: "center" }),
  x2(Vu, { editor: u2.editor, textAlignment: "right" }),
  x2(J0, { editor: u2.editor }),
  x2(X0, { editor: u2.editor }),
  x2(Q0, { editor: u2.editor }),
  x2(tv, { editor: u2.editor })
] });
var iv = (u2, g2 = rv) => (a2) => Ri(a2, g2, u2, {
  animation: "fade",
  placement: "top-start"
});
var uv = (u2) => {
  const [g2, a2] = (0, import_react291.useState)(false);
  return g2 ? x2(
    Xl,
    {
      url: u2.url,
      text: u2.text,
      update: u2.editHyperlink
    }
  ) : Tn(Zl, { children: [
    x2(
      Pe2,
      {
        mainTooltip: "Edit",
        isSelected: false,
        onClick: () => a2(true),
        children: "Edit Link"
      }
    ),
    x2(
      Pe2,
      {
        mainTooltip: "Open in new tab",
        isSelected: false,
        onClick: () => {
          window.open(u2.url, "_blank");
        },
        icon: H0
      }
    ),
    x2(
      Pe2,
      {
        mainTooltip: "Remove link",
        isSelected: false,
        onClick: u2.deleteHyperlink,
        icon: L0
      }
    )
  ] });
};
var ov = (u2) => (g2) => Ri(g2, uv, u2, {
  animation: "fade",
  placement: "top-start"
});
var Ci = { exports: {} };
Ci.exports;
(function(u2, g2) {
  (function() {
    var a2, b2 = "4.17.21", T2 = 200, B2 = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", C = "Expected a function", V2 = "Invalid `variable` option passed into `_.template`", D = "__lodash_hash_undefined__", hn = 500, Q = "__lodash_placeholder__", un = 1, Vn = 2, kn = 4, be2 = 1, gt2 = 2, Sn = 1, An = 2, pn = 4, Yn = 8, ze2 = 16, Kn = 32, Fe2 = 64, ue2 = 128, je2 = 256, vt = 512, Ti = 30, Si = "...", _r = 800, oe2 = 16, ge2 = 1, nt = 2, mr = 3, ve2 = 1 / 0, ae2 = 9007199254740991, xr = 17976931348623157e292, et2 = 0 / 0, Pn = 4294967295, yr = Pn - 1, wr = Pn >>> 1, Ai = [
      ["ary", ue2],
      ["bind", Sn],
      ["bindKey", An],
      ["curry", Yn],
      ["curryRight", ze2],
      ["flip", vt],
      ["partial", Kn],
      ["partialRight", Fe2],
      ["rearg", je2]
    ], De2 = "[object Arguments]", Ue2 = "[object Array]", Ut = "[object AsyncFunction]", pe2 = "[object Boolean]", Ce2 = "[object Date]", pt2 = "[object DOMException]", _t = "[object Error]", tt3 = "[object Function]", br3 = "[object GeneratorFunction]", zn = "[object Map]", _e2 = "[object Number]", mt2 = "[object Null]", Zn = "[object Object]", Wt = "[object Promise]", xt = "[object Proxy]", rt = "[object RegExp]", Fn = "[object Set]", Ee2 = "[object String]", yt2 = "[object Symbol]", Ii = "[object Undefined]", We2 = "[object WeakMap]", Cr = "[object WeakSet]", le2 = "[object ArrayBuffer]", Ne2 = "[object DataView]", wt = "[object Float32Array]", bt2 = "[object Float64Array]", it = "[object Int8Array]", Nt = "[object Int16Array]", $t = "[object Int32Array]", Gt = "[object Uint8Array]", qt = "[object Uint8ClampedArray]", Vt = "[object Uint16Array]", Yt = "[object Uint32Array]", Mi = /\b__p \+= '';/g, Kt = /\b(__p \+=) '' \+/g, Er = /(__e\(.*?\)|\b__t\)) \+\n'';/g, Re2 = /&(?:amp|lt|gt|quot|#39);/g, Ct2 = /[&<>"']/g, Zt2 = RegExp(Re2.source), Rr = RegExp(Ct2.source), Li = /<%-([\s\S]+?)%>/g, Tr = /<%([\s\S]+?)%>/g, Sr = /<%=([\s\S]+?)%>/g, Ar = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, Ir = /^\w*$/, Oi = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g, Jt = /[\\^$.*+?()[\]{}|]/g, Mr = RegExp(Jt.source), Xt2 = /^\s+/, Bi = /\s/, Hi = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, ki = /\{\n\/\* \[wrapped with (.+)\] \*/, c = /,? & /, w = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g, E = /[()=,{}\[\]\/\s]/, O2 = /\\(\\)?/g, q3 = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g, Z = /\w*$/, N = /^[-+]0x[0-9a-f]+$/i, U = /^0b[01]+$/i, mn = /^\[object .+?Constructor\]$/, on = /^0o[0-7]+$/i, fn3 = /^(?:0|[1-9]\d*)$/, In = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g, fe2 = /($^)/, Lr = /['\n\r\u2028\u2029\\]/g, Mn = "\\ud800-\\udfff", Ql = "\\u0300-\\u036f", jl = "\\ufe20-\\ufe2f", nf = "\\u20d0-\\u20ff", ro2 = Ql + jl + nf, io2 = "\\u2700-\\u27bf", uo = "a-z\\xdf-\\xf6\\xf8-\\xff", ef = "\\xac\\xb1\\xd7\\xf7", tf = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rf = "\\u2000-\\u206f", uf = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", oo2 = "A-Z\\xc0-\\xd6\\xd8-\\xde", ao2 = "\\ufe0e\\ufe0f", lo = ef + tf + rf + uf, Pi = "['’]", of = "[" + Mn + "]", fo = "[" + lo + "]", Or = "[" + ro2 + "]", co = "\\d+", af = "[" + io2 + "]", so2 = "[" + uo + "]", ho = "[^" + Mn + lo + co + io2 + uo + oo2 + "]", zi = "\\ud83c[\\udffb-\\udfff]", lf = "(?:" + Or + "|" + zi + ")", go = "[^" + Mn + "]", Fi = "(?:\\ud83c[\\udde6-\\uddff]){2}", Di = "[\\ud800-\\udbff][\\udc00-\\udfff]", Et2 = "[" + oo2 + "]", vo = "\\u200d", po = "(?:" + so2 + "|" + ho + ")", ff = "(?:" + Et2 + "|" + ho + ")", _o = "(?:" + Pi + "(?:d|ll|m|re|s|t|ve))?", mo = "(?:" + Pi + "(?:D|LL|M|RE|S|T|VE))?", xo = lf + "?", yo = "[" + ao2 + "]?", cf = "(?:" + vo + "(?:" + [go, Fi, Di].join("|") + ")" + yo + xo + ")*", sf = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", df = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", wo = yo + xo + cf, hf = "(?:" + [af, Fi, Di].join("|") + ")" + wo, gf = "(?:" + [go + Or + "?", Or, Fi, Di, of].join("|") + ")", vf = RegExp(Pi, "g"), pf = RegExp(Or, "g"), Ui = RegExp(zi + "(?=" + zi + ")|" + gf + wo, "g"), _f = RegExp([
      Et2 + "?" + so2 + "+" + _o + "(?=" + [fo, Et2, "$"].join("|") + ")",
      ff + "+" + mo + "(?=" + [fo, Et2 + po, "$"].join("|") + ")",
      Et2 + "?" + po + "+" + _o,
      Et2 + "+" + mo,
      df,
      sf,
      co,
      hf
    ].join("|"), "g"), mf = RegExp("[" + vo + Mn + ro2 + ao2 + "]"), xf = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/, yf = [
      "Array",
      "Buffer",
      "DataView",
      "Date",
      "Error",
      "Float32Array",
      "Float64Array",
      "Function",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Map",
      "Math",
      "Object",
      "Promise",
      "RegExp",
      "Set",
      "String",
      "Symbol",
      "TypeError",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "WeakMap",
      "_",
      "clearTimeout",
      "isFinite",
      "parseInt",
      "setTimeout"
    ], wf = -1, en = {};
    en[wt] = en[bt2] = en[it] = en[Nt] = en[$t] = en[Gt] = en[qt] = en[Vt] = en[Yt] = true, en[De2] = en[Ue2] = en[le2] = en[pe2] = en[Ne2] = en[Ce2] = en[_t] = en[tt3] = en[zn] = en[_e2] = en[Zn] = en[rt] = en[Fn] = en[Ee2] = en[We2] = false;
    var nn = {};
    nn[De2] = nn[Ue2] = nn[le2] = nn[Ne2] = nn[pe2] = nn[Ce2] = nn[wt] = nn[bt2] = nn[it] = nn[Nt] = nn[$t] = nn[zn] = nn[_e2] = nn[Zn] = nn[rt] = nn[Fn] = nn[Ee2] = nn[yt2] = nn[Gt] = nn[qt] = nn[Vt] = nn[Yt] = true, nn[_t] = nn[tt3] = nn[We2] = false;
    var bf = {
      // Latin-1 Supplement block.
      À: "A",
      Á: "A",
      Â: "A",
      Ã: "A",
      Ä: "A",
      Å: "A",
      à: "a",
      á: "a",
      â: "a",
      ã: "a",
      ä: "a",
      å: "a",
      Ç: "C",
      ç: "c",
      Ð: "D",
      ð: "d",
      È: "E",
      É: "E",
      Ê: "E",
      Ë: "E",
      è: "e",
      é: "e",
      ê: "e",
      ë: "e",
      Ì: "I",
      Í: "I",
      Î: "I",
      Ï: "I",
      ì: "i",
      í: "i",
      î: "i",
      ï: "i",
      Ñ: "N",
      ñ: "n",
      Ò: "O",
      Ó: "O",
      Ô: "O",
      Õ: "O",
      Ö: "O",
      Ø: "O",
      ò: "o",
      ó: "o",
      ô: "o",
      õ: "o",
      ö: "o",
      ø: "o",
      Ù: "U",
      Ú: "U",
      Û: "U",
      Ü: "U",
      ù: "u",
      ú: "u",
      û: "u",
      ü: "u",
      Ý: "Y",
      ý: "y",
      ÿ: "y",
      Æ: "Ae",
      æ: "ae",
      Þ: "Th",
      þ: "th",
      ß: "ss",
      // Latin Extended-A block.
      Ā: "A",
      Ă: "A",
      Ą: "A",
      ā: "a",
      ă: "a",
      ą: "a",
      Ć: "C",
      Ĉ: "C",
      Ċ: "C",
      Č: "C",
      ć: "c",
      ĉ: "c",
      ċ: "c",
      č: "c",
      Ď: "D",
      Đ: "D",
      ď: "d",
      đ: "d",
      Ē: "E",
      Ĕ: "E",
      Ė: "E",
      Ę: "E",
      Ě: "E",
      ē: "e",
      ĕ: "e",
      ė: "e",
      ę: "e",
      ě: "e",
      Ĝ: "G",
      Ğ: "G",
      Ġ: "G",
      Ģ: "G",
      ĝ: "g",
      ğ: "g",
      ġ: "g",
      ģ: "g",
      Ĥ: "H",
      Ħ: "H",
      ĥ: "h",
      ħ: "h",
      Ĩ: "I",
      Ī: "I",
      Ĭ: "I",
      Į: "I",
      İ: "I",
      ĩ: "i",
      ī: "i",
      ĭ: "i",
      į: "i",
      ı: "i",
      Ĵ: "J",
      ĵ: "j",
      Ķ: "K",
      ķ: "k",
      ĸ: "k",
      Ĺ: "L",
      Ļ: "L",
      Ľ: "L",
      Ŀ: "L",
      Ł: "L",
      ĺ: "l",
      ļ: "l",
      ľ: "l",
      ŀ: "l",
      ł: "l",
      Ń: "N",
      Ņ: "N",
      Ň: "N",
      Ŋ: "N",
      ń: "n",
      ņ: "n",
      ň: "n",
      ŋ: "n",
      Ō: "O",
      Ŏ: "O",
      Ő: "O",
      ō: "o",
      ŏ: "o",
      ő: "o",
      Ŕ: "R",
      Ŗ: "R",
      Ř: "R",
      ŕ: "r",
      ŗ: "r",
      ř: "r",
      Ś: "S",
      Ŝ: "S",
      Ş: "S",
      Š: "S",
      ś: "s",
      ŝ: "s",
      ş: "s",
      š: "s",
      Ţ: "T",
      Ť: "T",
      Ŧ: "T",
      ţ: "t",
      ť: "t",
      ŧ: "t",
      Ũ: "U",
      Ū: "U",
      Ŭ: "U",
      Ů: "U",
      Ű: "U",
      Ų: "U",
      ũ: "u",
      ū: "u",
      ŭ: "u",
      ů: "u",
      ű: "u",
      ų: "u",
      Ŵ: "W",
      ŵ: "w",
      Ŷ: "Y",
      ŷ: "y",
      Ÿ: "Y",
      Ź: "Z",
      Ż: "Z",
      Ž: "Z",
      ź: "z",
      ż: "z",
      ž: "z",
      Ĳ: "IJ",
      ĳ: "ij",
      Œ: "Oe",
      œ: "oe",
      ŉ: "'n",
      ſ: "s"
    }, Cf = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    }, Ef = {
      "&amp;": "&",
      "&lt;": "<",
      "&gt;": ">",
      "&quot;": '"',
      "&#39;": "'"
    }, Rf = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    }, Tf = parseFloat, Sf = parseInt, bo = typeof hr2 == "object" && hr2 && hr2.Object === Object && hr2, Af = typeof self == "object" && self && self.Object === Object && self, xn = bo || Af || Function("return this")(), Wi = g2 && !g2.nodeType && g2, ut2 = Wi && true && u2 && !u2.nodeType && u2, Co = ut2 && ut2.exports === Wi, Ni = Co && bo.process, Jn = function() {
      try {
        var d = ut2 && ut2.require && ut2.require("util").types;
        return d || Ni && Ni.binding && Ni.binding("util");
      } catch {
      }
    }(), Eo = Jn && Jn.isArrayBuffer, Ro = Jn && Jn.isDate, To = Jn && Jn.isMap, So = Jn && Jn.isRegExp, Ao = Jn && Jn.isSet, Io = Jn && Jn.isTypedArray;
    function Dn(d, p5, v) {
      switch (v.length) {
        case 0:
          return d.call(p5);
        case 1:
          return d.call(p5, v[0]);
        case 2:
          return d.call(p5, v[0], v[1]);
        case 3:
          return d.call(p5, v[0], v[1], v[2]);
      }
      return d.apply(p5, v);
    }
    function If(d, p5, v, S) {
      for (var H = -1, K2 = d == null ? 0 : d.length; ++H < K2; ) {
        var gn = d[H];
        p5(S, gn, v(gn), d);
      }
      return S;
    }
    function Xn(d, p5) {
      for (var v = -1, S = d == null ? 0 : d.length; ++v < S && p5(d[v], v, d) !== false; )
        ;
      return d;
    }
    function Mf(d, p5) {
      for (var v = d == null ? 0 : d.length; v-- && p5(d[v], v, d) !== false; )
        ;
      return d;
    }
    function Mo(d, p5) {
      for (var v = -1, S = d == null ? 0 : d.length; ++v < S; )
        if (!p5(d[v], v, d))
          return false;
      return true;
    }
    function $e2(d, p5) {
      for (var v = -1, S = d == null ? 0 : d.length, H = 0, K2 = []; ++v < S; ) {
        var gn = d[v];
        p5(gn, v, d) && (K2[H++] = gn);
      }
      return K2;
    }
    function Br(d, p5) {
      var v = d == null ? 0 : d.length;
      return !!v && Rt(d, p5, 0) > -1;
    }
    function $i(d, p5, v) {
      for (var S = -1, H = d == null ? 0 : d.length; ++S < H; )
        if (v(p5, d[S]))
          return true;
      return false;
    }
    function rn(d, p5) {
      for (var v = -1, S = d == null ? 0 : d.length, H = Array(S); ++v < S; )
        H[v] = p5(d[v], v, d);
      return H;
    }
    function Ge2(d, p5) {
      for (var v = -1, S = p5.length, H = d.length; ++v < S; )
        d[H + v] = p5[v];
      return d;
    }
    function Gi(d, p5, v, S) {
      var H = -1, K2 = d == null ? 0 : d.length;
      for (S && K2 && (v = d[++H]); ++H < K2; )
        v = p5(v, d[H], H, d);
      return v;
    }
    function Lf(d, p5, v, S) {
      var H = d == null ? 0 : d.length;
      for (S && H && (v = d[--H]); H--; )
        v = p5(v, d[H], H, d);
      return v;
    }
    function qi(d, p5) {
      for (var v = -1, S = d == null ? 0 : d.length; ++v < S; )
        if (p5(d[v], v, d))
          return true;
      return false;
    }
    var Of = Vi("length");
    function Bf(d) {
      return d.split("");
    }
    function Hf(d) {
      return d.match(w) || [];
    }
    function Lo(d, p5, v) {
      var S;
      return v(d, function(H, K2, gn) {
        if (p5(H, K2, gn))
          return S = K2, false;
      }), S;
    }
    function Hr(d, p5, v, S) {
      for (var H = d.length, K2 = v + (S ? 1 : -1); S ? K2-- : ++K2 < H; )
        if (p5(d[K2], K2, d))
          return K2;
      return -1;
    }
    function Rt(d, p5, v) {
      return p5 === p5 ? Vf(d, p5, v) : Hr(d, Oo, v);
    }
    function kf(d, p5, v, S) {
      for (var H = v - 1, K2 = d.length; ++H < K2; )
        if (S(d[H], p5))
          return H;
      return -1;
    }
    function Oo(d) {
      return d !== d;
    }
    function Bo(d, p5) {
      var v = d == null ? 0 : d.length;
      return v ? Ki(d, p5) / v : et2;
    }
    function Vi(d) {
      return function(p5) {
        return p5 == null ? a2 : p5[d];
      };
    }
    function Yi(d) {
      return function(p5) {
        return d == null ? a2 : d[p5];
      };
    }
    function Ho(d, p5, v, S, H) {
      return H(d, function(K2, gn, j) {
        v = S ? (S = false, K2) : p5(v, K2, gn, j);
      }), v;
    }
    function Pf(d, p5) {
      var v = d.length;
      for (d.sort(p5); v--; )
        d[v] = d[v].value;
      return d;
    }
    function Ki(d, p5) {
      for (var v, S = -1, H = d.length; ++S < H; ) {
        var K2 = p5(d[S]);
        K2 !== a2 && (v = v === a2 ? K2 : v + K2);
      }
      return v;
    }
    function Zi(d, p5) {
      for (var v = -1, S = Array(d); ++v < d; )
        S[v] = p5(v);
      return S;
    }
    function zf(d, p5) {
      return rn(p5, function(v) {
        return [v, d[v]];
      });
    }
    function ko(d) {
      return d && d.slice(0, Do(d) + 1).replace(Xt2, "");
    }
    function Un(d) {
      return function(p5) {
        return d(p5);
      };
    }
    function Ji(d, p5) {
      return rn(p5, function(v) {
        return d[v];
      });
    }
    function Qt2(d, p5) {
      return d.has(p5);
    }
    function Po(d, p5) {
      for (var v = -1, S = d.length; ++v < S && Rt(p5, d[v], 0) > -1; )
        ;
      return v;
    }
    function zo(d, p5) {
      for (var v = d.length; v-- && Rt(p5, d[v], 0) > -1; )
        ;
      return v;
    }
    function Ff(d, p5) {
      for (var v = d.length, S = 0; v--; )
        d[v] === p5 && ++S;
      return S;
    }
    var Df = Yi(bf), Uf = Yi(Cf);
    function Wf(d) {
      return "\\" + Rf[d];
    }
    function Nf(d, p5) {
      return d == null ? a2 : d[p5];
    }
    function Tt(d) {
      return mf.test(d);
    }
    function $f(d) {
      return xf.test(d);
    }
    function Gf(d) {
      for (var p5, v = []; !(p5 = d.next()).done; )
        v.push(p5.value);
      return v;
    }
    function Xi(d) {
      var p5 = -1, v = Array(d.size);
      return d.forEach(function(S, H) {
        v[++p5] = [H, S];
      }), v;
    }
    function Fo2(d, p5) {
      return function(v) {
        return d(p5(v));
      };
    }
    function qe2(d, p5) {
      for (var v = -1, S = d.length, H = 0, K2 = []; ++v < S; ) {
        var gn = d[v];
        (gn === p5 || gn === Q) && (d[v] = Q, K2[H++] = v);
      }
      return K2;
    }
    function kr(d) {
      var p5 = -1, v = Array(d.size);
      return d.forEach(function(S) {
        v[++p5] = S;
      }), v;
    }
    function qf(d) {
      var p5 = -1, v = Array(d.size);
      return d.forEach(function(S) {
        v[++p5] = [S, S];
      }), v;
    }
    function Vf(d, p5, v) {
      for (var S = v - 1, H = d.length; ++S < H; )
        if (d[S] === p5)
          return S;
      return -1;
    }
    function Yf(d, p5, v) {
      for (var S = v + 1; S--; )
        if (d[S] === p5)
          return S;
      return S;
    }
    function St(d) {
      return Tt(d) ? Zf(d) : Of(d);
    }
    function ce2(d) {
      return Tt(d) ? Jf(d) : Bf(d);
    }
    function Do(d) {
      for (var p5 = d.length; p5-- && Bi.test(d.charAt(p5)); )
        ;
      return p5;
    }
    var Kf = Yi(Ef);
    function Zf(d) {
      for (var p5 = Ui.lastIndex = 0; Ui.test(d); )
        ++p5;
      return p5;
    }
    function Jf(d) {
      return d.match(Ui) || [];
    }
    function Xf(d) {
      return d.match(_f) || [];
    }
    var Qf = function d(p5) {
      p5 = p5 == null ? xn : At.defaults(xn.Object(), p5, At.pick(xn, yf));
      var v = p5.Array, S = p5.Date, H = p5.Error, K2 = p5.Function, gn = p5.Math, j = p5.Object, Qi = p5.RegExp, jf = p5.String, Qn = p5.TypeError, Pr = v.prototype, nc = K2.prototype, It = j.prototype, zr = p5["__core-js_shared__"], Fr = nc.toString, X = It.hasOwnProperty, ec = 0, Uo = function() {
        var n = /[^.]+$/.exec(zr && zr.keys && zr.keys.IE_PROTO || "");
        return n ? "Symbol(src)_1." + n : "";
      }(), Dr = It.toString, tc = Fr.call(j), rc = xn._, ic = Qi(
        "^" + Fr.call(X).replace(Jt, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
      ), Ur = Co ? p5.Buffer : a2, Ve2 = p5.Symbol, Wr = p5.Uint8Array, Wo = Ur ? Ur.allocUnsafe : a2, Nr = Fo2(j.getPrototypeOf, j), No = j.create, $o = It.propertyIsEnumerable, $r = Pr.splice, Go = Ve2 ? Ve2.isConcatSpreadable : a2, jt = Ve2 ? Ve2.iterator : a2, ot2 = Ve2 ? Ve2.toStringTag : a2, Gr = function() {
        try {
          var n = st(j, "defineProperty");
          return n({}, "", {}), n;
        } catch {
        }
      }(), uc = p5.clearTimeout !== xn.clearTimeout && p5.clearTimeout, oc = S && S.now !== xn.Date.now && S.now, ac = p5.setTimeout !== xn.setTimeout && p5.setTimeout, qr = gn.ceil, Vr = gn.floor, ji = j.getOwnPropertySymbols, lc = Ur ? Ur.isBuffer : a2, qo = p5.isFinite, fc = Pr.join, cc = Fo2(j.keys, j), vn = gn.max, wn = gn.min, sc = S.now, dc = p5.parseInt, Vo = gn.random, hc = Pr.reverse, nu = st(p5, "DataView"), nr = st(p5, "Map"), eu = st(p5, "Promise"), Mt = st(p5, "Set"), er = st(p5, "WeakMap"), tr4 = st(j, "create"), Yr = er && new er(), Lt = {}, gc = dt4(nu), vc = dt4(nr), pc = dt4(eu), _c = dt4(Mt), mc = dt4(er), Kr = Ve2 ? Ve2.prototype : a2, rr = Kr ? Kr.valueOf : a2, Yo = Kr ? Kr.toString : a2;
      function o(n) {
        if (cn(n) && !k(n) && !(n instanceof $2)) {
          if (n instanceof jn)
            return n;
          if (X.call(n, "__wrapped__"))
            return Ka(n);
        }
        return new jn(n);
      }
      var Ot = function() {
        function n() {
        }
        return function(e) {
          if (!an(e))
            return {};
          if (No)
            return No(e);
          n.prototype = e;
          var t = new n();
          return n.prototype = a2, t;
        };
      }();
      function Zr() {
      }
      function jn(n, e) {
        this.__wrapped__ = n, this.__actions__ = [], this.__chain__ = !!e, this.__index__ = 0, this.__values__ = a2;
      }
      o.templateSettings = {
        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        escape: Li,
        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        evaluate: Tr,
        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        interpolate: Sr,
        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        variable: "",
        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        imports: {
          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          _: o
        }
      }, o.prototype = Zr.prototype, o.prototype.constructor = o, jn.prototype = Ot(Zr.prototype), jn.prototype.constructor = jn;
      function $2(n) {
        this.__wrapped__ = n, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = false, this.__iteratees__ = [], this.__takeCount__ = Pn, this.__views__ = [];
      }
      function xc() {
        var n = new $2(this.__wrapped__);
        return n.__actions__ = Ln(this.__actions__), n.__dir__ = this.__dir__, n.__filtered__ = this.__filtered__, n.__iteratees__ = Ln(this.__iteratees__), n.__takeCount__ = this.__takeCount__, n.__views__ = Ln(this.__views__), n;
      }
      function yc() {
        if (this.__filtered__) {
          var n = new $2(this);
          n.__dir__ = -1, n.__filtered__ = true;
        } else
          n = this.clone(), n.__dir__ *= -1;
        return n;
      }
      function wc() {
        var n = this.__wrapped__.value(), e = this.__dir__, t = k(n), r = e < 0, i = t ? n.length : 0, l = Bs(0, i, this.__views__), f2 = l.start, s2 = l.end, h2 = s2 - f2, _2 = r ? s2 : f2 - 1, m = this.__iteratees__, y = m.length, R2 = 0, A2 = wn(h2, this.__takeCount__);
        if (!t || !r && i == h2 && A2 == h2)
          return _a(n, this.__actions__);
        var M = [];
        n:
          for (; h2-- && R2 < A2; ) {
            _2 += e;
            for (var z = -1, L = n[_2]; ++z < y; ) {
              var W = m[z], G = W.iteratee, $n = W.type, Rn = G(L);
              if ($n == nt)
                L = Rn;
              else if (!Rn) {
                if ($n == ge2)
                  continue n;
                break n;
              }
            }
            M[R2++] = L;
          }
        return M;
      }
      $2.prototype = Ot(Zr.prototype), $2.prototype.constructor = $2;
      function at(n) {
        var e = -1, t = n == null ? 0 : n.length;
        for (this.clear(); ++e < t; ) {
          var r = n[e];
          this.set(r[0], r[1]);
        }
      }
      function bc() {
        this.__data__ = tr4 ? tr4(null) : {}, this.size = 0;
      }
      function Cc(n) {
        var e = this.has(n) && delete this.__data__[n];
        return this.size -= e ? 1 : 0, e;
      }
      function Ec(n) {
        var e = this.__data__;
        if (tr4) {
          var t = e[n];
          return t === D ? a2 : t;
        }
        return X.call(e, n) ? e[n] : a2;
      }
      function Rc(n) {
        var e = this.__data__;
        return tr4 ? e[n] !== a2 : X.call(e, n);
      }
      function Tc(n, e) {
        var t = this.__data__;
        return this.size += this.has(n) ? 0 : 1, t[n] = tr4 && e === a2 ? D : e, this;
      }
      at.prototype.clear = bc, at.prototype.delete = Cc, at.prototype.get = Ec, at.prototype.has = Rc, at.prototype.set = Tc;
      function Te2(n) {
        var e = -1, t = n == null ? 0 : n.length;
        for (this.clear(); ++e < t; ) {
          var r = n[e];
          this.set(r[0], r[1]);
        }
      }
      function Sc() {
        this.__data__ = [], this.size = 0;
      }
      function Ac(n) {
        var e = this.__data__, t = Jr(e, n);
        if (t < 0)
          return false;
        var r = e.length - 1;
        return t == r ? e.pop() : $r.call(e, t, 1), --this.size, true;
      }
      function Ic(n) {
        var e = this.__data__, t = Jr(e, n);
        return t < 0 ? a2 : e[t][1];
      }
      function Mc(n) {
        return Jr(this.__data__, n) > -1;
      }
      function Lc(n, e) {
        var t = this.__data__, r = Jr(t, n);
        return r < 0 ? (++this.size, t.push([n, e])) : t[r][1] = e, this;
      }
      Te2.prototype.clear = Sc, Te2.prototype.delete = Ac, Te2.prototype.get = Ic, Te2.prototype.has = Mc, Te2.prototype.set = Lc;
      function Se2(n) {
        var e = -1, t = n == null ? 0 : n.length;
        for (this.clear(); ++e < t; ) {
          var r = n[e];
          this.set(r[0], r[1]);
        }
      }
      function Oc() {
        this.size = 0, this.__data__ = {
          hash: new at(),
          map: new (nr || Te2)(),
          string: new at()
        };
      }
      function Bc(n) {
        var e = li3(this, n).delete(n);
        return this.size -= e ? 1 : 0, e;
      }
      function Hc(n) {
        return li3(this, n).get(n);
      }
      function kc(n) {
        return li3(this, n).has(n);
      }
      function Pc(n, e) {
        var t = li3(this, n), r = t.size;
        return t.set(n, e), this.size += t.size == r ? 0 : 1, this;
      }
      Se2.prototype.clear = Oc, Se2.prototype.delete = Bc, Se2.prototype.get = Hc, Se2.prototype.has = kc, Se2.prototype.set = Pc;
      function lt(n) {
        var e = -1, t = n == null ? 0 : n.length;
        for (this.__data__ = new Se2(); ++e < t; )
          this.add(n[e]);
      }
      function zc(n) {
        return this.__data__.set(n, D), this;
      }
      function Fc(n) {
        return this.__data__.has(n);
      }
      lt.prototype.add = lt.prototype.push = zc, lt.prototype.has = Fc;
      function se2(n) {
        var e = this.__data__ = new Te2(n);
        this.size = e.size;
      }
      function Dc() {
        this.__data__ = new Te2(), this.size = 0;
      }
      function Uc(n) {
        var e = this.__data__, t = e.delete(n);
        return this.size = e.size, t;
      }
      function Wc(n) {
        return this.__data__.get(n);
      }
      function Nc(n) {
        return this.__data__.has(n);
      }
      function $c(n, e) {
        var t = this.__data__;
        if (t instanceof Te2) {
          var r = t.__data__;
          if (!nr || r.length < T2 - 1)
            return r.push([n, e]), this.size = ++t.size, this;
          t = this.__data__ = new Se2(r);
        }
        return t.set(n, e), this.size = t.size, this;
      }
      se2.prototype.clear = Dc, se2.prototype.delete = Uc, se2.prototype.get = Wc, se2.prototype.has = Nc, se2.prototype.set = $c;
      function Ko(n, e) {
        var t = k(n), r = !t && ht2(n), i = !t && !r && Xe2(n), l = !t && !r && !i && Pt(n), f2 = t || r || i || l, s2 = f2 ? Zi(n.length, jf) : [], h2 = s2.length;
        for (var _2 in n)
          (e || X.call(n, _2)) && !(f2 && // Safari 9 has enumerable `arguments.length` in strict mode.
          (_2 == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
          i && (_2 == "offset" || _2 == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
          l && (_2 == "buffer" || _2 == "byteLength" || _2 == "byteOffset") || // Skip index properties.
          Le2(_2, h2))) && s2.push(_2);
        return s2;
      }
      function Zo(n) {
        var e = n.length;
        return e ? n[du(0, e - 1)] : a2;
      }
      function Gc(n, e) {
        return fi(Ln(n), ft2(e, 0, n.length));
      }
      function qc(n) {
        return fi(Ln(n));
      }
      function tu(n, e, t) {
        (t !== a2 && !de2(n[e], t) || t === a2 && !(e in n)) && Ae2(n, e, t);
      }
      function ir(n, e, t) {
        var r = n[e];
        (!(X.call(n, e) && de2(r, t)) || t === a2 && !(e in n)) && Ae2(n, e, t);
      }
      function Jr(n, e) {
        for (var t = n.length; t--; )
          if (de2(n[t][0], e))
            return t;
        return -1;
      }
      function Vc(n, e, t, r) {
        return Ye2(n, function(i, l, f2) {
          e(r, i, t(i), f2);
        }), r;
      }
      function Jo(n, e) {
        return n && xe2(e, _n(e), n);
      }
      function Yc(n, e) {
        return n && xe2(e, Bn(e), n);
      }
      function Ae2(n, e, t) {
        e == "__proto__" && Gr ? Gr(n, e, {
          configurable: true,
          enumerable: true,
          value: t,
          writable: true
        }) : n[e] = t;
      }
      function ru(n, e) {
        for (var t = -1, r = e.length, i = v(r), l = n == null; ++t < r; )
          i[t] = l ? a2 : zu(n, e[t]);
        return i;
      }
      function ft2(n, e, t) {
        return n === n && (t !== a2 && (n = n <= t ? n : t), e !== a2 && (n = n >= e ? n : e)), n;
      }
      function ne2(n, e, t, r, i, l) {
        var f2, s2 = e & un, h2 = e & Vn, _2 = e & kn;
        if (t && (f2 = i ? t(n, r, i, l) : t(n)), f2 !== a2)
          return f2;
        if (!an(n))
          return n;
        var m = k(n);
        if (m) {
          if (f2 = ks(n), !s2)
            return Ln(n, f2);
        } else {
          var y = bn(n), R2 = y == tt3 || y == br3;
          if (Xe2(n))
            return ya(n, s2);
          if (y == Zn || y == De2 || R2 && !i) {
            if (f2 = h2 || R2 ? {} : Da(n), !s2)
              return h2 ? Es(n, Yc(f2, n)) : Cs(n, Jo(f2, n));
          } else {
            if (!nn[y])
              return i ? n : {};
            f2 = Ps(n, y, s2);
          }
        }
        l || (l = new se2());
        var A2 = l.get(n);
        if (A2)
          return A2;
        l.set(n, f2), gl(n) ? n.forEach(function(L) {
          f2.add(ne2(L, e, t, L, n, l));
        }) : dl2(n) && n.forEach(function(L, W) {
          f2.set(W, ne2(L, e, t, W, n, l));
        });
        var M = _2 ? h2 ? Cu : bu : h2 ? Bn : _n, z = m ? a2 : M(n);
        return Xn(z || n, function(L, W) {
          z && (W = L, L = n[W]), ir(f2, W, ne2(L, e, t, W, n, l));
        }), f2;
      }
      function Kc(n) {
        var e = _n(n);
        return function(t) {
          return Xo(t, n, e);
        };
      }
      function Xo(n, e, t) {
        var r = t.length;
        if (n == null)
          return !r;
        for (n = j(n); r--; ) {
          var i = t[r], l = e[i], f2 = n[i];
          if (f2 === a2 && !(i in n) || !l(f2))
            return false;
        }
        return true;
      }
      function Qo(n, e, t) {
        if (typeof n != "function")
          throw new Qn(C);
        return sr(function() {
          n.apply(a2, t);
        }, e);
      }
      function ur(n, e, t, r) {
        var i = -1, l = Br, f2 = true, s2 = n.length, h2 = [], _2 = e.length;
        if (!s2)
          return h2;
        t && (e = rn(e, Un(t))), r ? (l = $i, f2 = false) : e.length >= T2 && (l = Qt2, f2 = false, e = new lt(e));
        n:
          for (; ++i < s2; ) {
            var m = n[i], y = t == null ? m : t(m);
            if (m = r || m !== 0 ? m : 0, f2 && y === y) {
              for (var R2 = _2; R2--; )
                if (e[R2] === y)
                  continue n;
              h2.push(m);
            } else
              l(e, y, r) || h2.push(m);
          }
        return h2;
      }
      var Ye2 = Ra(me2), jo = Ra(uu, true);
      function Zc(n, e) {
        var t = true;
        return Ye2(n, function(r, i, l) {
          return t = !!e(r, i, l), t;
        }), t;
      }
      function Xr(n, e, t) {
        for (var r = -1, i = n.length; ++r < i; ) {
          var l = n[r], f2 = e(l);
          if (f2 != null && (s2 === a2 ? f2 === f2 && !Nn(f2) : t(f2, s2)))
            var s2 = f2, h2 = l;
        }
        return h2;
      }
      function Jc(n, e, t, r) {
        var i = n.length;
        for (t = P(t), t < 0 && (t = -t > i ? 0 : i + t), r = r === a2 || r > i ? i : P(r), r < 0 && (r += i), r = t > r ? 0 : pl(r); t < r; )
          n[t++] = e;
        return n;
      }
      function na(n, e) {
        var t = [];
        return Ye2(n, function(r, i, l) {
          e(r, i, l) && t.push(r);
        }), t;
      }
      function yn(n, e, t, r, i) {
        var l = -1, f2 = n.length;
        for (t || (t = Fs), i || (i = []); ++l < f2; ) {
          var s2 = n[l];
          e > 0 && t(s2) ? e > 1 ? yn(s2, e - 1, t, r, i) : Ge2(i, s2) : r || (i[i.length] = s2);
        }
        return i;
      }
      var iu = Ta(), ea = Ta(true);
      function me2(n, e) {
        return n && iu(n, e, _n);
      }
      function uu(n, e) {
        return n && ea(n, e, _n);
      }
      function Qr(n, e) {
        return $e2(e, function(t) {
          return Oe2(n[t]);
        });
      }
      function ct2(n, e) {
        e = Ze2(e, n);
        for (var t = 0, r = e.length; n != null && t < r; )
          n = n[ye2(e[t++])];
        return t && t == r ? n : a2;
      }
      function ta2(n, e, t) {
        var r = e(n);
        return k(n) ? r : Ge2(r, t(n));
      }
      function Cn(n) {
        return n == null ? n === a2 ? Ii : mt2 : ot2 && ot2 in j(n) ? Os(n) : qs(n);
      }
      function ou(n, e) {
        return n > e;
      }
      function Xc(n, e) {
        return n != null && X.call(n, e);
      }
      function Qc(n, e) {
        return n != null && e in j(n);
      }
      function jc(n, e, t) {
        return n >= wn(e, t) && n < vn(e, t);
      }
      function au(n, e, t) {
        for (var r = t ? $i : Br, i = n[0].length, l = n.length, f2 = l, s2 = v(l), h2 = 1 / 0, _2 = []; f2--; ) {
          var m = n[f2];
          f2 && e && (m = rn(m, Un(e))), h2 = wn(m.length, h2), s2[f2] = !t && (e || i >= 120 && m.length >= 120) ? new lt(f2 && m) : a2;
        }
        m = n[0];
        var y = -1, R2 = s2[0];
        n:
          for (; ++y < i && _2.length < h2; ) {
            var A2 = m[y], M = e ? e(A2) : A2;
            if (A2 = t || A2 !== 0 ? A2 : 0, !(R2 ? Qt2(R2, M) : r(_2, M, t))) {
              for (f2 = l; --f2; ) {
                var z = s2[f2];
                if (!(z ? Qt2(z, M) : r(n[f2], M, t)))
                  continue n;
              }
              R2 && R2.push(M), _2.push(A2);
            }
          }
        return _2;
      }
      function ns(n, e, t, r) {
        return me2(n, function(i, l, f2) {
          e(r, t(i), l, f2);
        }), r;
      }
      function or(n, e, t) {
        e = Ze2(e, n), n = $a(n, e);
        var r = n == null ? n : n[ye2(te2(e))];
        return r == null ? a2 : Dn(r, n, t);
      }
      function ra(n) {
        return cn(n) && Cn(n) == De2;
      }
      function es(n) {
        return cn(n) && Cn(n) == le2;
      }
      function ts2(n) {
        return cn(n) && Cn(n) == Ce2;
      }
      function ar(n, e, t, r, i) {
        return n === e ? true : n == null || e == null || !cn(n) && !cn(e) ? n !== n && e !== e : rs(n, e, t, r, ar, i);
      }
      function rs(n, e, t, r, i, l) {
        var f2 = k(n), s2 = k(e), h2 = f2 ? Ue2 : bn(n), _2 = s2 ? Ue2 : bn(e);
        h2 = h2 == De2 ? Zn : h2, _2 = _2 == De2 ? Zn : _2;
        var m = h2 == Zn, y = _2 == Zn, R2 = h2 == _2;
        if (R2 && Xe2(n)) {
          if (!Xe2(e))
            return false;
          f2 = true, m = false;
        }
        if (R2 && !m)
          return l || (l = new se2()), f2 || Pt(n) ? Pa(n, e, t, r, i, l) : Ms(n, e, h2, t, r, i, l);
        if (!(t & be2)) {
          var A2 = m && X.call(n, "__wrapped__"), M = y && X.call(e, "__wrapped__");
          if (A2 || M) {
            var z = A2 ? n.value() : n, L = M ? e.value() : e;
            return l || (l = new se2()), i(z, L, t, r, l);
          }
        }
        return R2 ? (l || (l = new se2()), Ls(n, e, t, r, i, l)) : false;
      }
      function is3(n) {
        return cn(n) && bn(n) == zn;
      }
      function lu(n, e, t, r) {
        var i = t.length, l = i, f2 = !r;
        if (n == null)
          return !l;
        for (n = j(n); i--; ) {
          var s2 = t[i];
          if (f2 && s2[2] ? s2[1] !== n[s2[0]] : !(s2[0] in n))
            return false;
        }
        for (; ++i < l; ) {
          s2 = t[i];
          var h2 = s2[0], _2 = n[h2], m = s2[1];
          if (f2 && s2[2]) {
            if (_2 === a2 && !(h2 in n))
              return false;
          } else {
            var y = new se2();
            if (r)
              var R2 = r(_2, m, h2, n, e, y);
            if (!(R2 === a2 ? ar(m, _2, be2 | gt2, r, y) : R2))
              return false;
          }
        }
        return true;
      }
      function ia(n) {
        if (!an(n) || Us(n))
          return false;
        var e = Oe2(n) ? ic : mn;
        return e.test(dt4(n));
      }
      function us(n) {
        return cn(n) && Cn(n) == rt;
      }
      function os2(n) {
        return cn(n) && bn(n) == Fn;
      }
      function as(n) {
        return cn(n) && vi2(n.length) && !!en[Cn(n)];
      }
      function ua(n) {
        return typeof n == "function" ? n : n == null ? Hn : typeof n == "object" ? k(n) ? la(n[0], n[1]) : aa(n) : Sl(n);
      }
      function fu(n) {
        if (!cr(n))
          return cc(n);
        var e = [];
        for (var t in j(n))
          X.call(n, t) && t != "constructor" && e.push(t);
        return e;
      }
      function ls(n) {
        if (!an(n))
          return Gs(n);
        var e = cr(n), t = [];
        for (var r in n)
          r == "constructor" && (e || !X.call(n, r)) || t.push(r);
        return t;
      }
      function cu(n, e) {
        return n < e;
      }
      function oa(n, e) {
        var t = -1, r = On(n) ? v(n.length) : [];
        return Ye2(n, function(i, l, f2) {
          r[++t] = e(i, l, f2);
        }), r;
      }
      function aa(n) {
        var e = Ru(n);
        return e.length == 1 && e[0][2] ? Wa(e[0][0], e[0][1]) : function(t) {
          return t === n || lu(t, n, e);
        };
      }
      function la(n, e) {
        return Su(n) && Ua(e) ? Wa(ye2(n), e) : function(t) {
          var r = zu(t, n);
          return r === a2 && r === e ? Fu(t, n) : ar(e, r, be2 | gt2);
        };
      }
      function jr(n, e, t, r, i) {
        n !== e && iu(e, function(l, f2) {
          if (i || (i = new se2()), an(l))
            fs(n, e, f2, t, jr, r, i);
          else {
            var s2 = r ? r(Iu(n, f2), l, f2 + "", n, e, i) : a2;
            s2 === a2 && (s2 = l), tu(n, f2, s2);
          }
        }, Bn);
      }
      function fs(n, e, t, r, i, l, f2) {
        var s2 = Iu(n, t), h2 = Iu(e, t), _2 = f2.get(h2);
        if (_2) {
          tu(n, t, _2);
          return;
        }
        var m = l ? l(s2, h2, t + "", n, e, f2) : a2, y = m === a2;
        if (y) {
          var R2 = k(h2), A2 = !R2 && Xe2(h2), M = !R2 && !A2 && Pt(h2);
          m = h2, R2 || A2 || M ? k(s2) ? m = s2 : sn(s2) ? m = Ln(s2) : A2 ? (y = false, m = ya(h2, true)) : M ? (y = false, m = wa(h2, true)) : m = [] : dr(h2) || ht2(h2) ? (m = s2, ht2(s2) ? m = _l(s2) : (!an(s2) || Oe2(s2)) && (m = Da(h2))) : y = false;
        }
        y && (f2.set(h2, m), i(m, h2, r, l, f2), f2.delete(h2)), tu(n, t, m);
      }
      function fa(n, e) {
        var t = n.length;
        if (t)
          return e += e < 0 ? t : 0, Le2(e, t) ? n[e] : a2;
      }
      function ca(n, e, t) {
        e.length ? e = rn(e, function(l) {
          return k(l) ? function(f2) {
            return ct2(f2, l.length === 1 ? l[0] : l);
          } : l;
        }) : e = [Hn];
        var r = -1;
        e = rn(e, Un(I2()));
        var i = oa(n, function(l, f2, s2) {
          var h2 = rn(e, function(_2) {
            return _2(l);
          });
          return { criteria: h2, index: ++r, value: l };
        });
        return Pf(i, function(l, f2) {
          return bs(l, f2, t);
        });
      }
      function cs(n, e) {
        return sa(n, e, function(t, r) {
          return Fu(n, r);
        });
      }
      function sa(n, e, t) {
        for (var r = -1, i = e.length, l = {}; ++r < i; ) {
          var f2 = e[r], s2 = ct2(n, f2);
          t(s2, f2) && lr(l, Ze2(f2, n), s2);
        }
        return l;
      }
      function ss(n) {
        return function(e) {
          return ct2(e, n);
        };
      }
      function su(n, e, t, r) {
        var i = r ? kf : Rt, l = -1, f2 = e.length, s2 = n;
        for (n === e && (e = Ln(e)), t && (s2 = rn(n, Un(t))); ++l < f2; )
          for (var h2 = 0, _2 = e[l], m = t ? t(_2) : _2; (h2 = i(s2, m, h2, r)) > -1; )
            s2 !== n && $r.call(s2, h2, 1), $r.call(n, h2, 1);
        return n;
      }
      function da(n, e) {
        for (var t = n ? e.length : 0, r = t - 1; t--; ) {
          var i = e[t];
          if (t == r || i !== l) {
            var l = i;
            Le2(i) ? $r.call(n, i, 1) : vu(n, i);
          }
        }
        return n;
      }
      function du(n, e) {
        return n + Vr(Vo() * (e - n + 1));
      }
      function ds(n, e, t, r) {
        for (var i = -1, l = vn(qr((e - n) / (t || 1)), 0), f2 = v(l); l--; )
          f2[r ? l : ++i] = n, n += t;
        return f2;
      }
      function hu(n, e) {
        var t = "";
        if (!n || e < 1 || e > ae2)
          return t;
        do
          e % 2 && (t += n), e = Vr(e / 2), e && (n += n);
        while (e);
        return t;
      }
      function F(n, e) {
        return Mu(Na(n, e, Hn), n + "");
      }
      function hs(n) {
        return Zo(zt(n));
      }
      function gs(n, e) {
        var t = zt(n);
        return fi(t, ft2(e, 0, t.length));
      }
      function lr(n, e, t, r) {
        if (!an(n))
          return n;
        e = Ze2(e, n);
        for (var i = -1, l = e.length, f2 = l - 1, s2 = n; s2 != null && ++i < l; ) {
          var h2 = ye2(e[i]), _2 = t;
          if (h2 === "__proto__" || h2 === "constructor" || h2 === "prototype")
            return n;
          if (i != f2) {
            var m = s2[h2];
            _2 = r ? r(m, h2, s2) : a2, _2 === a2 && (_2 = an(m) ? m : Le2(e[i + 1]) ? [] : {});
          }
          ir(s2, h2, _2), s2 = s2[h2];
        }
        return n;
      }
      var ha = Yr ? function(n, e) {
        return Yr.set(n, e), n;
      } : Hn, vs = Gr ? function(n, e) {
        return Gr(n, "toString", {
          configurable: true,
          enumerable: false,
          value: Uu(e),
          writable: true
        });
      } : Hn;
      function ps(n) {
        return fi(zt(n));
      }
      function ee2(n, e, t) {
        var r = -1, i = n.length;
        e < 0 && (e = -e > i ? 0 : i + e), t = t > i ? i : t, t < 0 && (t += i), i = e > t ? 0 : t - e >>> 0, e >>>= 0;
        for (var l = v(i); ++r < i; )
          l[r] = n[r + e];
        return l;
      }
      function _s(n, e) {
        var t;
        return Ye2(n, function(r, i, l) {
          return t = e(r, i, l), !t;
        }), !!t;
      }
      function ni(n, e, t) {
        var r = 0, i = n == null ? r : n.length;
        if (typeof e == "number" && e === e && i <= wr) {
          for (; r < i; ) {
            var l = r + i >>> 1, f2 = n[l];
            f2 !== null && !Nn(f2) && (t ? f2 <= e : f2 < e) ? r = l + 1 : i = l;
          }
          return i;
        }
        return gu(n, e, Hn, t);
      }
      function gu(n, e, t, r) {
        var i = 0, l = n == null ? 0 : n.length;
        if (l === 0)
          return 0;
        e = t(e);
        for (var f2 = e !== e, s2 = e === null, h2 = Nn(e), _2 = e === a2; i < l; ) {
          var m = Vr((i + l) / 2), y = t(n[m]), R2 = y !== a2, A2 = y === null, M = y === y, z = Nn(y);
          if (f2)
            var L = r || M;
          else
            _2 ? L = M && (r || R2) : s2 ? L = M && R2 && (r || !A2) : h2 ? L = M && R2 && !A2 && (r || !z) : A2 || z ? L = false : L = r ? y <= e : y < e;
          L ? i = m + 1 : l = m;
        }
        return wn(l, yr);
      }
      function ga(n, e) {
        for (var t = -1, r = n.length, i = 0, l = []; ++t < r; ) {
          var f2 = n[t], s2 = e ? e(f2) : f2;
          if (!t || !de2(s2, h2)) {
            var h2 = s2;
            l[i++] = f2 === 0 ? 0 : f2;
          }
        }
        return l;
      }
      function va(n) {
        return typeof n == "number" ? n : Nn(n) ? et2 : +n;
      }
      function Wn(n) {
        if (typeof n == "string")
          return n;
        if (k(n))
          return rn(n, Wn) + "";
        if (Nn(n))
          return Yo ? Yo.call(n) : "";
        var e = n + "";
        return e == "0" && 1 / n == -ve2 ? "-0" : e;
      }
      function Ke2(n, e, t) {
        var r = -1, i = Br, l = n.length, f2 = true, s2 = [], h2 = s2;
        if (t)
          f2 = false, i = $i;
        else if (l >= T2) {
          var _2 = e ? null : As(n);
          if (_2)
            return kr(_2);
          f2 = false, i = Qt2, h2 = new lt();
        } else
          h2 = e ? [] : s2;
        n:
          for (; ++r < l; ) {
            var m = n[r], y = e ? e(m) : m;
            if (m = t || m !== 0 ? m : 0, f2 && y === y) {
              for (var R2 = h2.length; R2--; )
                if (h2[R2] === y)
                  continue n;
              e && h2.push(y), s2.push(m);
            } else
              i(h2, y, t) || (h2 !== s2 && h2.push(y), s2.push(m));
          }
        return s2;
      }
      function vu(n, e) {
        return e = Ze2(e, n), n = $a(n, e), n == null || delete n[ye2(te2(e))];
      }
      function pa(n, e, t, r) {
        return lr(n, e, t(ct2(n, e)), r);
      }
      function ei(n, e, t, r) {
        for (var i = n.length, l = r ? i : -1; (r ? l-- : ++l < i) && e(n[l], l, n); )
          ;
        return t ? ee2(n, r ? 0 : l, r ? l + 1 : i) : ee2(n, r ? l + 1 : 0, r ? i : l);
      }
      function _a(n, e) {
        var t = n;
        return t instanceof $2 && (t = t.value()), Gi(e, function(r, i) {
          return i.func.apply(i.thisArg, Ge2([r], i.args));
        }, t);
      }
      function pu(n, e, t) {
        var r = n.length;
        if (r < 2)
          return r ? Ke2(n[0]) : [];
        for (var i = -1, l = v(r); ++i < r; )
          for (var f2 = n[i], s2 = -1; ++s2 < r; )
            s2 != i && (l[i] = ur(l[i] || f2, n[s2], e, t));
        return Ke2(yn(l, 1), e, t);
      }
      function ma(n, e, t) {
        for (var r = -1, i = n.length, l = e.length, f2 = {}; ++r < i; ) {
          var s2 = r < l ? e[r] : a2;
          t(f2, n[r], s2);
        }
        return f2;
      }
      function _u(n) {
        return sn(n) ? n : [];
      }
      function mu(n) {
        return typeof n == "function" ? n : Hn;
      }
      function Ze2(n, e) {
        return k(n) ? n : Su(n, e) ? [n] : Ya(J(n));
      }
      var ms = F;
      function Je2(n, e, t) {
        var r = n.length;
        return t = t === a2 ? r : t, !e && t >= r ? n : ee2(n, e, t);
      }
      var xa = uc || function(n) {
        return xn.clearTimeout(n);
      };
      function ya(n, e) {
        if (e)
          return n.slice();
        var t = n.length, r = Wo ? Wo(t) : new n.constructor(t);
        return n.copy(r), r;
      }
      function xu(n) {
        var e = new n.constructor(n.byteLength);
        return new Wr(e).set(new Wr(n)), e;
      }
      function xs(n, e) {
        var t = e ? xu(n.buffer) : n.buffer;
        return new n.constructor(t, n.byteOffset, n.byteLength);
      }
      function ys(n) {
        var e = new n.constructor(n.source, Z.exec(n));
        return e.lastIndex = n.lastIndex, e;
      }
      function ws(n) {
        return rr ? j(rr.call(n)) : {};
      }
      function wa(n, e) {
        var t = e ? xu(n.buffer) : n.buffer;
        return new n.constructor(t, n.byteOffset, n.length);
      }
      function ba(n, e) {
        if (n !== e) {
          var t = n !== a2, r = n === null, i = n === n, l = Nn(n), f2 = e !== a2, s2 = e === null, h2 = e === e, _2 = Nn(e);
          if (!s2 && !_2 && !l && n > e || l && f2 && h2 && !s2 && !_2 || r && f2 && h2 || !t && h2 || !i)
            return 1;
          if (!r && !l && !_2 && n < e || _2 && t && i && !r && !l || s2 && t && i || !f2 && i || !h2)
            return -1;
        }
        return 0;
      }
      function bs(n, e, t) {
        for (var r = -1, i = n.criteria, l = e.criteria, f2 = i.length, s2 = t.length; ++r < f2; ) {
          var h2 = ba(i[r], l[r]);
          if (h2) {
            if (r >= s2)
              return h2;
            var _2 = t[r];
            return h2 * (_2 == "desc" ? -1 : 1);
          }
        }
        return n.index - e.index;
      }
      function Ca(n, e, t, r) {
        for (var i = -1, l = n.length, f2 = t.length, s2 = -1, h2 = e.length, _2 = vn(l - f2, 0), m = v(h2 + _2), y = !r; ++s2 < h2; )
          m[s2] = e[s2];
        for (; ++i < f2; )
          (y || i < l) && (m[t[i]] = n[i]);
        for (; _2--; )
          m[s2++] = n[i++];
        return m;
      }
      function Ea(n, e, t, r) {
        for (var i = -1, l = n.length, f2 = -1, s2 = t.length, h2 = -1, _2 = e.length, m = vn(l - s2, 0), y = v(m + _2), R2 = !r; ++i < m; )
          y[i] = n[i];
        for (var A2 = i; ++h2 < _2; )
          y[A2 + h2] = e[h2];
        for (; ++f2 < s2; )
          (R2 || i < l) && (y[A2 + t[f2]] = n[i++]);
        return y;
      }
      function Ln(n, e) {
        var t = -1, r = n.length;
        for (e || (e = v(r)); ++t < r; )
          e[t] = n[t];
        return e;
      }
      function xe2(n, e, t, r) {
        var i = !t;
        t || (t = {});
        for (var l = -1, f2 = e.length; ++l < f2; ) {
          var s2 = e[l], h2 = r ? r(t[s2], n[s2], s2, t, n) : a2;
          h2 === a2 && (h2 = n[s2]), i ? Ae2(t, s2, h2) : ir(t, s2, h2);
        }
        return t;
      }
      function Cs(n, e) {
        return xe2(n, Tu(n), e);
      }
      function Es(n, e) {
        return xe2(n, za(n), e);
      }
      function ti(n, e) {
        return function(t, r) {
          var i = k(t) ? If : Vc, l = e ? e() : {};
          return i(t, n, I2(r, 2), l);
        };
      }
      function Bt(n) {
        return F(function(e, t) {
          var r = -1, i = t.length, l = i > 1 ? t[i - 1] : a2, f2 = i > 2 ? t[2] : a2;
          for (l = n.length > 3 && typeof l == "function" ? (i--, l) : a2, f2 && En(t[0], t[1], f2) && (l = i < 3 ? a2 : l, i = 1), e = j(e); ++r < i; ) {
            var s2 = t[r];
            s2 && n(e, s2, r, l);
          }
          return e;
        });
      }
      function Ra(n, e) {
        return function(t, r) {
          if (t == null)
            return t;
          if (!On(t))
            return n(t, r);
          for (var i = t.length, l = e ? i : -1, f2 = j(t); (e ? l-- : ++l < i) && r(f2[l], l, f2) !== false; )
            ;
          return t;
        };
      }
      function Ta(n) {
        return function(e, t, r) {
          for (var i = -1, l = j(e), f2 = r(e), s2 = f2.length; s2--; ) {
            var h2 = f2[n ? s2 : ++i];
            if (t(l[h2], h2, l) === false)
              break;
          }
          return e;
        };
      }
      function Rs(n, e, t) {
        var r = e & Sn, i = fr(n);
        function l() {
          var f2 = this && this !== xn && this instanceof l ? i : n;
          return f2.apply(r ? t : this, arguments);
        }
        return l;
      }
      function Sa(n) {
        return function(e) {
          e = J(e);
          var t = Tt(e) ? ce2(e) : a2, r = t ? t[0] : e.charAt(0), i = t ? Je2(t, 1).join("") : e.slice(1);
          return r[n]() + i;
        };
      }
      function Ht(n) {
        return function(e) {
          return Gi(Rl(El(e).replace(vf, "")), n, "");
        };
      }
      function fr(n) {
        return function() {
          var e = arguments;
          switch (e.length) {
            case 0:
              return new n();
            case 1:
              return new n(e[0]);
            case 2:
              return new n(e[0], e[1]);
            case 3:
              return new n(e[0], e[1], e[2]);
            case 4:
              return new n(e[0], e[1], e[2], e[3]);
            case 5:
              return new n(e[0], e[1], e[2], e[3], e[4]);
            case 6:
              return new n(e[0], e[1], e[2], e[3], e[4], e[5]);
            case 7:
              return new n(e[0], e[1], e[2], e[3], e[4], e[5], e[6]);
          }
          var t = Ot(n.prototype), r = n.apply(t, e);
          return an(r) ? r : t;
        };
      }
      function Ts(n, e, t) {
        var r = fr(n);
        function i() {
          for (var l = arguments.length, f2 = v(l), s2 = l, h2 = kt2(i); s2--; )
            f2[s2] = arguments[s2];
          var _2 = l < 3 && f2[0] !== h2 && f2[l - 1] !== h2 ? [] : qe2(f2, h2);
          if (l -= _2.length, l < t)
            return Oa(
              n,
              e,
              ri,
              i.placeholder,
              a2,
              f2,
              _2,
              a2,
              a2,
              t - l
            );
          var m = this && this !== xn && this instanceof i ? r : n;
          return Dn(m, this, f2);
        }
        return i;
      }
      function Aa(n) {
        return function(e, t, r) {
          var i = j(e);
          if (!On(e)) {
            var l = I2(t, 3);
            e = _n(e), t = function(s2) {
              return l(i[s2], s2, i);
            };
          }
          var f2 = n(e, t, r);
          return f2 > -1 ? i[l ? e[f2] : f2] : a2;
        };
      }
      function Ia(n) {
        return Me2(function(e) {
          var t = e.length, r = t, i = jn.prototype.thru;
          for (n && e.reverse(); r--; ) {
            var l = e[r];
            if (typeof l != "function")
              throw new Qn(C);
            if (i && !f2 && ai(l) == "wrapper")
              var f2 = new jn([], true);
          }
          for (r = f2 ? r : t; ++r < t; ) {
            l = e[r];
            var s2 = ai(l), h2 = s2 == "wrapper" ? Eu(l) : a2;
            h2 && Au(h2[0]) && h2[1] == (ue2 | Yn | Kn | je2) && !h2[4].length && h2[9] == 1 ? f2 = f2[ai(h2[0])].apply(f2, h2[3]) : f2 = l.length == 1 && Au(l) ? f2[s2]() : f2.thru(l);
          }
          return function() {
            var _2 = arguments, m = _2[0];
            if (f2 && _2.length == 1 && k(m))
              return f2.plant(m).value();
            for (var y = 0, R2 = t ? e[y].apply(this, _2) : m; ++y < t; )
              R2 = e[y].call(this, R2);
            return R2;
          };
        });
      }
      function ri(n, e, t, r, i, l, f2, s2, h2, _2) {
        var m = e & ue2, y = e & Sn, R2 = e & An, A2 = e & (Yn | ze2), M = e & vt, z = R2 ? a2 : fr(n);
        function L() {
          for (var W = arguments.length, G = v(W), $n = W; $n--; )
            G[$n] = arguments[$n];
          if (A2)
            var Rn = kt2(L), Gn = Ff(G, Rn);
          if (r && (G = Ca(G, r, i, A2)), l && (G = Ea(G, l, f2, A2)), W -= Gn, A2 && W < _2) {
            var dn = qe2(G, Rn);
            return Oa(
              n,
              e,
              ri,
              L.placeholder,
              t,
              G,
              dn,
              s2,
              h2,
              _2 - W
            );
          }
          var he2 = y ? t : this, He2 = R2 ? he2[n] : n;
          return W = G.length, s2 ? G = Vs(G, s2) : M && W > 1 && G.reverse(), m && h2 < W && (G.length = h2), this && this !== xn && this instanceof L && (He2 = z || fr(He2)), He2.apply(he2, G);
        }
        return L;
      }
      function Ma(n, e) {
        return function(t, r) {
          return ns(t, n, e(r), {});
        };
      }
      function ii(n, e) {
        return function(t, r) {
          var i;
          if (t === a2 && r === a2)
            return e;
          if (t !== a2 && (i = t), r !== a2) {
            if (i === a2)
              return r;
            typeof t == "string" || typeof r == "string" ? (t = Wn(t), r = Wn(r)) : (t = va(t), r = va(r)), i = n(t, r);
          }
          return i;
        };
      }
      function yu(n) {
        return Me2(function(e) {
          return e = rn(e, Un(I2())), F(function(t) {
            var r = this;
            return n(e, function(i) {
              return Dn(i, r, t);
            });
          });
        });
      }
      function ui(n, e) {
        e = e === a2 ? " " : Wn(e);
        var t = e.length;
        if (t < 2)
          return t ? hu(e, n) : e;
        var r = hu(e, qr(n / St(e)));
        return Tt(e) ? Je2(ce2(r), 0, n).join("") : r.slice(0, n);
      }
      function Ss(n, e, t, r) {
        var i = e & Sn, l = fr(n);
        function f2() {
          for (var s2 = -1, h2 = arguments.length, _2 = -1, m = r.length, y = v(m + h2), R2 = this && this !== xn && this instanceof f2 ? l : n; ++_2 < m; )
            y[_2] = r[_2];
          for (; h2--; )
            y[_2++] = arguments[++s2];
          return Dn(R2, i ? t : this, y);
        }
        return f2;
      }
      function La(n) {
        return function(e, t, r) {
          return r && typeof r != "number" && En(e, t, r) && (t = r = a2), e = Be2(e), t === a2 ? (t = e, e = 0) : t = Be2(t), r = r === a2 ? e < t ? 1 : -1 : Be2(r), ds(e, t, r, n);
        };
      }
      function oi(n) {
        return function(e, t) {
          return typeof e == "string" && typeof t == "string" || (e = re2(e), t = re2(t)), n(e, t);
        };
      }
      function Oa(n, e, t, r, i, l, f2, s2, h2, _2) {
        var m = e & Yn, y = m ? f2 : a2, R2 = m ? a2 : f2, A2 = m ? l : a2, M = m ? a2 : l;
        e |= m ? Kn : Fe2, e &= ~(m ? Fe2 : Kn), e & pn || (e &= ~(Sn | An));
        var z = [
          n,
          e,
          i,
          A2,
          y,
          M,
          R2,
          s2,
          h2,
          _2
        ], L = t.apply(a2, z);
        return Au(n) && Ga(L, z), L.placeholder = r, qa(L, n, e);
      }
      function wu(n) {
        var e = gn[n];
        return function(t, r) {
          if (t = re2(t), r = r == null ? 0 : wn(P(r), 292), r && qo(t)) {
            var i = (J(t) + "e").split("e"), l = e(i[0] + "e" + (+i[1] + r));
            return i = (J(l) + "e").split("e"), +(i[0] + "e" + (+i[1] - r));
          }
          return e(t);
        };
      }
      var As = Mt && 1 / kr(new Mt([, -0]))[1] == ve2 ? function(n) {
        return new Mt(n);
      } : $u;
      function Ba(n) {
        return function(e) {
          var t = bn(e);
          return t == zn ? Xi(e) : t == Fn ? qf(e) : zf(e, n(e));
        };
      }
      function Ie2(n, e, t, r, i, l, f2, s2) {
        var h2 = e & An;
        if (!h2 && typeof n != "function")
          throw new Qn(C);
        var _2 = r ? r.length : 0;
        if (_2 || (e &= ~(Kn | Fe2), r = i = a2), f2 = f2 === a2 ? f2 : vn(P(f2), 0), s2 = s2 === a2 ? s2 : P(s2), _2 -= i ? i.length : 0, e & Fe2) {
          var m = r, y = i;
          r = i = a2;
        }
        var R2 = h2 ? a2 : Eu(n), A2 = [
          n,
          e,
          t,
          r,
          i,
          m,
          y,
          l,
          f2,
          s2
        ];
        if (R2 && $s(A2, R2), n = A2[0], e = A2[1], t = A2[2], r = A2[3], i = A2[4], s2 = A2[9] = A2[9] === a2 ? h2 ? 0 : n.length : vn(A2[9] - _2, 0), !s2 && e & (Yn | ze2) && (e &= ~(Yn | ze2)), !e || e == Sn)
          var M = Rs(n, e, t);
        else
          e == Yn || e == ze2 ? M = Ts(n, e, s2) : (e == Kn || e == (Sn | Kn)) && !i.length ? M = Ss(n, e, t, r) : M = ri.apply(a2, A2);
        var z = R2 ? ha : Ga;
        return qa(z(M, A2), n, e);
      }
      function Ha(n, e, t, r) {
        return n === a2 || de2(n, It[t]) && !X.call(r, t) ? e : n;
      }
      function ka(n, e, t, r, i, l) {
        return an(n) && an(e) && (l.set(e, n), jr(n, e, a2, ka, l), l.delete(e)), n;
      }
      function Is(n) {
        return dr(n) ? a2 : n;
      }
      function Pa(n, e, t, r, i, l) {
        var f2 = t & be2, s2 = n.length, h2 = e.length;
        if (s2 != h2 && !(f2 && h2 > s2))
          return false;
        var _2 = l.get(n), m = l.get(e);
        if (_2 && m)
          return _2 == e && m == n;
        var y = -1, R2 = true, A2 = t & gt2 ? new lt() : a2;
        for (l.set(n, e), l.set(e, n); ++y < s2; ) {
          var M = n[y], z = e[y];
          if (r)
            var L = f2 ? r(z, M, y, e, n, l) : r(M, z, y, n, e, l);
          if (L !== a2) {
            if (L)
              continue;
            R2 = false;
            break;
          }
          if (A2) {
            if (!qi(e, function(W, G) {
              if (!Qt2(A2, G) && (M === W || i(M, W, t, r, l)))
                return A2.push(G);
            })) {
              R2 = false;
              break;
            }
          } else if (!(M === z || i(M, z, t, r, l))) {
            R2 = false;
            break;
          }
        }
        return l.delete(n), l.delete(e), R2;
      }
      function Ms(n, e, t, r, i, l, f2) {
        switch (t) {
          case Ne2:
            if (n.byteLength != e.byteLength || n.byteOffset != e.byteOffset)
              return false;
            n = n.buffer, e = e.buffer;
          case le2:
            return !(n.byteLength != e.byteLength || !l(new Wr(n), new Wr(e)));
          case pe2:
          case Ce2:
          case _e2:
            return de2(+n, +e);
          case _t:
            return n.name == e.name && n.message == e.message;
          case rt:
          case Ee2:
            return n == e + "";
          case zn:
            var s2 = Xi;
          case Fn:
            var h2 = r & be2;
            if (s2 || (s2 = kr), n.size != e.size && !h2)
              return false;
            var _2 = f2.get(n);
            if (_2)
              return _2 == e;
            r |= gt2, f2.set(n, e);
            var m = Pa(s2(n), s2(e), r, i, l, f2);
            return f2.delete(n), m;
          case yt2:
            if (rr)
              return rr.call(n) == rr.call(e);
        }
        return false;
      }
      function Ls(n, e, t, r, i, l) {
        var f2 = t & be2, s2 = bu(n), h2 = s2.length, _2 = bu(e), m = _2.length;
        if (h2 != m && !f2)
          return false;
        for (var y = h2; y--; ) {
          var R2 = s2[y];
          if (!(f2 ? R2 in e : X.call(e, R2)))
            return false;
        }
        var A2 = l.get(n), M = l.get(e);
        if (A2 && M)
          return A2 == e && M == n;
        var z = true;
        l.set(n, e), l.set(e, n);
        for (var L = f2; ++y < h2; ) {
          R2 = s2[y];
          var W = n[R2], G = e[R2];
          if (r)
            var $n = f2 ? r(G, W, R2, e, n, l) : r(W, G, R2, n, e, l);
          if (!($n === a2 ? W === G || i(W, G, t, r, l) : $n)) {
            z = false;
            break;
          }
          L || (L = R2 == "constructor");
        }
        if (z && !L) {
          var Rn = n.constructor, Gn = e.constructor;
          Rn != Gn && "constructor" in n && "constructor" in e && !(typeof Rn == "function" && Rn instanceof Rn && typeof Gn == "function" && Gn instanceof Gn) && (z = false);
        }
        return l.delete(n), l.delete(e), z;
      }
      function Me2(n) {
        return Mu(Na(n, a2, Xa), n + "");
      }
      function bu(n) {
        return ta2(n, _n, Tu);
      }
      function Cu(n) {
        return ta2(n, Bn, za);
      }
      var Eu = Yr ? function(n) {
        return Yr.get(n);
      } : $u;
      function ai(n) {
        for (var e = n.name + "", t = Lt[e], r = X.call(Lt, e) ? t.length : 0; r--; ) {
          var i = t[r], l = i.func;
          if (l == null || l == n)
            return i.name;
        }
        return e;
      }
      function kt2(n) {
        var e = X.call(o, "placeholder") ? o : n;
        return e.placeholder;
      }
      function I2() {
        var n = o.iteratee || Wu;
        return n = n === Wu ? ua : n, arguments.length ? n(arguments[0], arguments[1]) : n;
      }
      function li3(n, e) {
        var t = n.__data__;
        return Ds(e) ? t[typeof e == "string" ? "string" : "hash"] : t.map;
      }
      function Ru(n) {
        for (var e = _n(n), t = e.length; t--; ) {
          var r = e[t], i = n[r];
          e[t] = [r, i, Ua(i)];
        }
        return e;
      }
      function st(n, e) {
        var t = Nf(n, e);
        return ia(t) ? t : a2;
      }
      function Os(n) {
        var e = X.call(n, ot2), t = n[ot2];
        try {
          n[ot2] = a2;
          var r = true;
        } catch {
        }
        var i = Dr.call(n);
        return r && (e ? n[ot2] = t : delete n[ot2]), i;
      }
      var Tu = ji ? function(n) {
        return n == null ? [] : (n = j(n), $e2(ji(n), function(e) {
          return $o.call(n, e);
        }));
      } : Gu, za = ji ? function(n) {
        for (var e = []; n; )
          Ge2(e, Tu(n)), n = Nr(n);
        return e;
      } : Gu, bn = Cn;
      (nu && bn(new nu(new ArrayBuffer(1))) != Ne2 || nr && bn(new nr()) != zn || eu && bn(eu.resolve()) != Wt || Mt && bn(new Mt()) != Fn || er && bn(new er()) != We2) && (bn = function(n) {
        var e = Cn(n), t = e == Zn ? n.constructor : a2, r = t ? dt4(t) : "";
        if (r)
          switch (r) {
            case gc:
              return Ne2;
            case vc:
              return zn;
            case pc:
              return Wt;
            case _c:
              return Fn;
            case mc:
              return We2;
          }
        return e;
      });
      function Bs(n, e, t) {
        for (var r = -1, i = t.length; ++r < i; ) {
          var l = t[r], f2 = l.size;
          switch (l.type) {
            case "drop":
              n += f2;
              break;
            case "dropRight":
              e -= f2;
              break;
            case "take":
              e = wn(e, n + f2);
              break;
            case "takeRight":
              n = vn(n, e - f2);
              break;
          }
        }
        return { start: n, end: e };
      }
      function Hs(n) {
        var e = n.match(ki);
        return e ? e[1].split(c) : [];
      }
      function Fa(n, e, t) {
        e = Ze2(e, n);
        for (var r = -1, i = e.length, l = false; ++r < i; ) {
          var f2 = ye2(e[r]);
          if (!(l = n != null && t(n, f2)))
            break;
          n = n[f2];
        }
        return l || ++r != i ? l : (i = n == null ? 0 : n.length, !!i && vi2(i) && Le2(f2, i) && (k(n) || ht2(n)));
      }
      function ks(n) {
        var e = n.length, t = new n.constructor(e);
        return e && typeof n[0] == "string" && X.call(n, "index") && (t.index = n.index, t.input = n.input), t;
      }
      function Da(n) {
        return typeof n.constructor == "function" && !cr(n) ? Ot(Nr(n)) : {};
      }
      function Ps(n, e, t) {
        var r = n.constructor;
        switch (e) {
          case le2:
            return xu(n);
          case pe2:
          case Ce2:
            return new r(+n);
          case Ne2:
            return xs(n, t);
          case wt:
          case bt2:
          case it:
          case Nt:
          case $t:
          case Gt:
          case qt:
          case Vt:
          case Yt:
            return wa(n, t);
          case zn:
            return new r();
          case _e2:
          case Ee2:
            return new r(n);
          case rt:
            return ys(n);
          case Fn:
            return new r();
          case yt2:
            return ws(n);
        }
      }
      function zs(n, e) {
        var t = e.length;
        if (!t)
          return n;
        var r = t - 1;
        return e[r] = (t > 1 ? "& " : "") + e[r], e = e.join(t > 2 ? ", " : " "), n.replace(Hi, `{
/* [wrapped with ` + e + `] */
`);
      }
      function Fs(n) {
        return k(n) || ht2(n) || !!(Go && n && n[Go]);
      }
      function Le2(n, e) {
        var t = typeof n;
        return e = e ?? ae2, !!e && (t == "number" || t != "symbol" && fn3.test(n)) && n > -1 && n % 1 == 0 && n < e;
      }
      function En(n, e, t) {
        if (!an(t))
          return false;
        var r = typeof e;
        return (r == "number" ? On(t) && Le2(e, t.length) : r == "string" && e in t) ? de2(t[e], n) : false;
      }
      function Su(n, e) {
        if (k(n))
          return false;
        var t = typeof n;
        return t == "number" || t == "symbol" || t == "boolean" || n == null || Nn(n) ? true : Ir.test(n) || !Ar.test(n) || e != null && n in j(e);
      }
      function Ds(n) {
        var e = typeof n;
        return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? n !== "__proto__" : n === null;
      }
      function Au(n) {
        var e = ai(n), t = o[e];
        if (typeof t != "function" || !(e in $2.prototype))
          return false;
        if (n === t)
          return true;
        var r = Eu(t);
        return !!r && n === r[0];
      }
      function Us(n) {
        return !!Uo && Uo in n;
      }
      var Ws = zr ? Oe2 : qu;
      function cr(n) {
        var e = n && n.constructor, t = typeof e == "function" && e.prototype || It;
        return n === t;
      }
      function Ua(n) {
        return n === n && !an(n);
      }
      function Wa(n, e) {
        return function(t) {
          return t == null ? false : t[n] === e && (e !== a2 || n in j(t));
        };
      }
      function Ns(n) {
        var e = hi(n, function(r) {
          return t.size === hn && t.clear(), r;
        }), t = e.cache;
        return e;
      }
      function $s(n, e) {
        var t = n[1], r = e[1], i = t | r, l = i < (Sn | An | ue2), f2 = r == ue2 && t == Yn || r == ue2 && t == je2 && n[7].length <= e[8] || r == (ue2 | je2) && e[7].length <= e[8] && t == Yn;
        if (!(l || f2))
          return n;
        r & Sn && (n[2] = e[2], i |= t & Sn ? 0 : pn);
        var s2 = e[3];
        if (s2) {
          var h2 = n[3];
          n[3] = h2 ? Ca(h2, s2, e[4]) : s2, n[4] = h2 ? qe2(n[3], Q) : e[4];
        }
        return s2 = e[5], s2 && (h2 = n[5], n[5] = h2 ? Ea(h2, s2, e[6]) : s2, n[6] = h2 ? qe2(n[5], Q) : e[6]), s2 = e[7], s2 && (n[7] = s2), r & ue2 && (n[8] = n[8] == null ? e[8] : wn(n[8], e[8])), n[9] == null && (n[9] = e[9]), n[0] = e[0], n[1] = i, n;
      }
      function Gs(n) {
        var e = [];
        if (n != null)
          for (var t in j(n))
            e.push(t);
        return e;
      }
      function qs(n) {
        return Dr.call(n);
      }
      function Na(n, e, t) {
        return e = vn(e === a2 ? n.length - 1 : e, 0), function() {
          for (var r = arguments, i = -1, l = vn(r.length - e, 0), f2 = v(l); ++i < l; )
            f2[i] = r[e + i];
          i = -1;
          for (var s2 = v(e + 1); ++i < e; )
            s2[i] = r[i];
          return s2[e] = t(f2), Dn(n, this, s2);
        };
      }
      function $a(n, e) {
        return e.length < 2 ? n : ct2(n, ee2(e, 0, -1));
      }
      function Vs(n, e) {
        for (var t = n.length, r = wn(e.length, t), i = Ln(n); r--; ) {
          var l = e[r];
          n[r] = Le2(l, t) ? i[l] : a2;
        }
        return n;
      }
      function Iu(n, e) {
        if (!(e === "constructor" && typeof n[e] == "function") && e != "__proto__")
          return n[e];
      }
      var Ga = Va(ha), sr = ac || function(n, e) {
        return xn.setTimeout(n, e);
      }, Mu = Va(vs);
      function qa(n, e, t) {
        var r = e + "";
        return Mu(n, zs(r, Ys(Hs(r), t)));
      }
      function Va(n) {
        var e = 0, t = 0;
        return function() {
          var r = sc(), i = oe2 - (r - t);
          if (t = r, i > 0) {
            if (++e >= _r)
              return arguments[0];
          } else
            e = 0;
          return n.apply(a2, arguments);
        };
      }
      function fi(n, e) {
        var t = -1, r = n.length, i = r - 1;
        for (e = e === a2 ? r : e; ++t < e; ) {
          var l = du(t, i), f2 = n[l];
          n[l] = n[t], n[t] = f2;
        }
        return n.length = e, n;
      }
      var Ya = Ns(function(n) {
        var e = [];
        return n.charCodeAt(0) === 46 && e.push(""), n.replace(Oi, function(t, r, i, l) {
          e.push(i ? l.replace(O2, "$1") : r || t);
        }), e;
      });
      function ye2(n) {
        if (typeof n == "string" || Nn(n))
          return n;
        var e = n + "";
        return e == "0" && 1 / n == -ve2 ? "-0" : e;
      }
      function dt4(n) {
        if (n != null) {
          try {
            return Fr.call(n);
          } catch {
          }
          try {
            return n + "";
          } catch {
          }
        }
        return "";
      }
      function Ys(n, e) {
        return Xn(Ai, function(t) {
          var r = "_." + t[0];
          e & t[1] && !Br(n, r) && n.push(r);
        }), n.sort();
      }
      function Ka(n) {
        if (n instanceof $2)
          return n.clone();
        var e = new jn(n.__wrapped__, n.__chain__);
        return e.__actions__ = Ln(n.__actions__), e.__index__ = n.__index__, e.__values__ = n.__values__, e;
      }
      function Ks(n, e, t) {
        (t ? En(n, e, t) : e === a2) ? e = 1 : e = vn(P(e), 0);
        var r = n == null ? 0 : n.length;
        if (!r || e < 1)
          return [];
        for (var i = 0, l = 0, f2 = v(qr(r / e)); i < r; )
          f2[l++] = ee2(n, i, i += e);
        return f2;
      }
      function Zs(n) {
        for (var e = -1, t = n == null ? 0 : n.length, r = 0, i = []; ++e < t; ) {
          var l = n[e];
          l && (i[r++] = l);
        }
        return i;
      }
      function Js() {
        var n = arguments.length;
        if (!n)
          return [];
        for (var e = v(n - 1), t = arguments[0], r = n; r--; )
          e[r - 1] = arguments[r];
        return Ge2(k(t) ? Ln(t) : [t], yn(e, 1));
      }
      var Xs = F(function(n, e) {
        return sn(n) ? ur(n, yn(e, 1, sn, true)) : [];
      }), Qs = F(function(n, e) {
        var t = te2(e);
        return sn(t) && (t = a2), sn(n) ? ur(n, yn(e, 1, sn, true), I2(t, 2)) : [];
      }), js = F(function(n, e) {
        var t = te2(e);
        return sn(t) && (t = a2), sn(n) ? ur(n, yn(e, 1, sn, true), a2, t) : [];
      });
      function nd(n, e, t) {
        var r = n == null ? 0 : n.length;
        return r ? (e = t || e === a2 ? 1 : P(e), ee2(n, e < 0 ? 0 : e, r)) : [];
      }
      function ed(n, e, t) {
        var r = n == null ? 0 : n.length;
        return r ? (e = t || e === a2 ? 1 : P(e), e = r - e, ee2(n, 0, e < 0 ? 0 : e)) : [];
      }
      function td(n, e) {
        return n && n.length ? ei(n, I2(e, 3), true, true) : [];
      }
      function rd(n, e) {
        return n && n.length ? ei(n, I2(e, 3), true) : [];
      }
      function id2(n, e, t, r) {
        var i = n == null ? 0 : n.length;
        return i ? (t && typeof t != "number" && En(n, e, t) && (t = 0, r = i), Jc(n, e, t, r)) : [];
      }
      function Za(n, e, t) {
        var r = n == null ? 0 : n.length;
        if (!r)
          return -1;
        var i = t == null ? 0 : P(t);
        return i < 0 && (i = vn(r + i, 0)), Hr(n, I2(e, 3), i);
      }
      function Ja(n, e, t) {
        var r = n == null ? 0 : n.length;
        if (!r)
          return -1;
        var i = r - 1;
        return t !== a2 && (i = P(t), i = t < 0 ? vn(r + i, 0) : wn(i, r - 1)), Hr(n, I2(e, 3), i, true);
      }
      function Xa(n) {
        var e = n == null ? 0 : n.length;
        return e ? yn(n, 1) : [];
      }
      function ud(n) {
        var e = n == null ? 0 : n.length;
        return e ? yn(n, ve2) : [];
      }
      function od(n, e) {
        var t = n == null ? 0 : n.length;
        return t ? (e = e === a2 ? 1 : P(e), yn(n, e)) : [];
      }
      function ad(n) {
        for (var e = -1, t = n == null ? 0 : n.length, r = {}; ++e < t; ) {
          var i = n[e];
          r[i[0]] = i[1];
        }
        return r;
      }
      function Qa(n) {
        return n && n.length ? n[0] : a2;
      }
      function ld(n, e, t) {
        var r = n == null ? 0 : n.length;
        if (!r)
          return -1;
        var i = t == null ? 0 : P(t);
        return i < 0 && (i = vn(r + i, 0)), Rt(n, e, i);
      }
      function fd(n) {
        var e = n == null ? 0 : n.length;
        return e ? ee2(n, 0, -1) : [];
      }
      var cd = F(function(n) {
        var e = rn(n, _u);
        return e.length && e[0] === n[0] ? au(e) : [];
      }), sd = F(function(n) {
        var e = te2(n), t = rn(n, _u);
        return e === te2(t) ? e = a2 : t.pop(), t.length && t[0] === n[0] ? au(t, I2(e, 2)) : [];
      }), dd3 = F(function(n) {
        var e = te2(n), t = rn(n, _u);
        return e = typeof e == "function" ? e : a2, e && t.pop(), t.length && t[0] === n[0] ? au(t, a2, e) : [];
      });
      function hd(n, e) {
        return n == null ? "" : fc.call(n, e);
      }
      function te2(n) {
        var e = n == null ? 0 : n.length;
        return e ? n[e - 1] : a2;
      }
      function gd(n, e, t) {
        var r = n == null ? 0 : n.length;
        if (!r)
          return -1;
        var i = r;
        return t !== a2 && (i = P(t), i = i < 0 ? vn(r + i, 0) : wn(i, r - 1)), e === e ? Yf(n, e, i) : Hr(n, Oo, i, true);
      }
      function vd(n, e) {
        return n && n.length ? fa(n, P(e)) : a2;
      }
      var pd = F(ja);
      function ja(n, e) {
        return n && n.length && e && e.length ? su(n, e) : n;
      }
      function _d(n, e, t) {
        return n && n.length && e && e.length ? su(n, e, I2(t, 2)) : n;
      }
      function md(n, e, t) {
        return n && n.length && e && e.length ? su(n, e, a2, t) : n;
      }
      var xd = Me2(function(n, e) {
        var t = n == null ? 0 : n.length, r = ru(n, e);
        return da(n, rn(e, function(i) {
          return Le2(i, t) ? +i : i;
        }).sort(ba)), r;
      });
      function yd(n, e) {
        var t = [];
        if (!(n && n.length))
          return t;
        var r = -1, i = [], l = n.length;
        for (e = I2(e, 3); ++r < l; ) {
          var f2 = n[r];
          e(f2, r, n) && (t.push(f2), i.push(r));
        }
        return da(n, i), t;
      }
      function Lu(n) {
        return n == null ? n : hc.call(n);
      }
      function wd(n, e, t) {
        var r = n == null ? 0 : n.length;
        return r ? (t && typeof t != "number" && En(n, e, t) ? (e = 0, t = r) : (e = e == null ? 0 : P(e), t = t === a2 ? r : P(t)), ee2(n, e, t)) : [];
      }
      function bd(n, e) {
        return ni(n, e);
      }
      function Cd(n, e, t) {
        return gu(n, e, I2(t, 2));
      }
      function Ed(n, e) {
        var t = n == null ? 0 : n.length;
        if (t) {
          var r = ni(n, e);
          if (r < t && de2(n[r], e))
            return r;
        }
        return -1;
      }
      function Rd(n, e) {
        return ni(n, e, true);
      }
      function Td(n, e, t) {
        return gu(n, e, I2(t, 2), true);
      }
      function Sd(n, e) {
        var t = n == null ? 0 : n.length;
        if (t) {
          var r = ni(n, e, true) - 1;
          if (de2(n[r], e))
            return r;
        }
        return -1;
      }
      function Ad(n) {
        return n && n.length ? ga(n) : [];
      }
      function Id(n, e) {
        return n && n.length ? ga(n, I2(e, 2)) : [];
      }
      function Md(n) {
        var e = n == null ? 0 : n.length;
        return e ? ee2(n, 1, e) : [];
      }
      function Ld(n, e, t) {
        return n && n.length ? (e = t || e === a2 ? 1 : P(e), ee2(n, 0, e < 0 ? 0 : e)) : [];
      }
      function Od(n, e, t) {
        var r = n == null ? 0 : n.length;
        return r ? (e = t || e === a2 ? 1 : P(e), e = r - e, ee2(n, e < 0 ? 0 : e, r)) : [];
      }
      function Bd(n, e) {
        return n && n.length ? ei(n, I2(e, 3), false, true) : [];
      }
      function Hd(n, e) {
        return n && n.length ? ei(n, I2(e, 3)) : [];
      }
      var kd = F(function(n) {
        return Ke2(yn(n, 1, sn, true));
      }), Pd = F(function(n) {
        var e = te2(n);
        return sn(e) && (e = a2), Ke2(yn(n, 1, sn, true), I2(e, 2));
      }), zd = F(function(n) {
        var e = te2(n);
        return e = typeof e == "function" ? e : a2, Ke2(yn(n, 1, sn, true), a2, e);
      });
      function Fd(n) {
        return n && n.length ? Ke2(n) : [];
      }
      function Dd(n, e) {
        return n && n.length ? Ke2(n, I2(e, 2)) : [];
      }
      function Ud(n, e) {
        return e = typeof e == "function" ? e : a2, n && n.length ? Ke2(n, a2, e) : [];
      }
      function Ou(n) {
        if (!(n && n.length))
          return [];
        var e = 0;
        return n = $e2(n, function(t) {
          if (sn(t))
            return e = vn(t.length, e), true;
        }), Zi(e, function(t) {
          return rn(n, Vi(t));
        });
      }
      function nl(n, e) {
        if (!(n && n.length))
          return [];
        var t = Ou(n);
        return e == null ? t : rn(t, function(r) {
          return Dn(e, a2, r);
        });
      }
      var Wd = F(function(n, e) {
        return sn(n) ? ur(n, e) : [];
      }), Nd = F(function(n) {
        return pu($e2(n, sn));
      }), $d = F(function(n) {
        var e = te2(n);
        return sn(e) && (e = a2), pu($e2(n, sn), I2(e, 2));
      }), Gd = F(function(n) {
        var e = te2(n);
        return e = typeof e == "function" ? e : a2, pu($e2(n, sn), a2, e);
      }), qd = F(Ou);
      function Vd(n, e) {
        return ma(n || [], e || [], ir);
      }
      function Yd(n, e) {
        return ma(n || [], e || [], lr);
      }
      var Kd = F(function(n) {
        var e = n.length, t = e > 1 ? n[e - 1] : a2;
        return t = typeof t == "function" ? (n.pop(), t) : a2, nl(n, t);
      });
      function el(n) {
        var e = o(n);
        return e.__chain__ = true, e;
      }
      function Zd(n, e) {
        return e(n), n;
      }
      function ci(n, e) {
        return e(n);
      }
      var Jd = Me2(function(n) {
        var e = n.length, t = e ? n[0] : 0, r = this.__wrapped__, i = function(l) {
          return ru(l, n);
        };
        return e > 1 || this.__actions__.length || !(r instanceof $2) || !Le2(t) ? this.thru(i) : (r = r.slice(t, +t + (e ? 1 : 0)), r.__actions__.push({
          func: ci,
          args: [i],
          thisArg: a2
        }), new jn(r, this.__chain__).thru(function(l) {
          return e && !l.length && l.push(a2), l;
        }));
      });
      function Xd() {
        return el(this);
      }
      function Qd() {
        return new jn(this.value(), this.__chain__);
      }
      function jd() {
        this.__values__ === a2 && (this.__values__ = vl(this.value()));
        var n = this.__index__ >= this.__values__.length, e = n ? a2 : this.__values__[this.__index__++];
        return { done: n, value: e };
      }
      function nh() {
        return this;
      }
      function eh(n) {
        for (var e, t = this; t instanceof Zr; ) {
          var r = Ka(t);
          r.__index__ = 0, r.__values__ = a2, e ? i.__wrapped__ = r : e = r;
          var i = r;
          t = t.__wrapped__;
        }
        return i.__wrapped__ = n, e;
      }
      function th() {
        var n = this.__wrapped__;
        if (n instanceof $2) {
          var e = n;
          return this.__actions__.length && (e = new $2(this)), e = e.reverse(), e.__actions__.push({
            func: ci,
            args: [Lu],
            thisArg: a2
          }), new jn(e, this.__chain__);
        }
        return this.thru(Lu);
      }
      function rh() {
        return _a(this.__wrapped__, this.__actions__);
      }
      var ih = ti(function(n, e, t) {
        X.call(n, t) ? ++n[t] : Ae2(n, t, 1);
      });
      function uh(n, e, t) {
        var r = k(n) ? Mo : Zc;
        return t && En(n, e, t) && (e = a2), r(n, I2(e, 3));
      }
      function oh(n, e) {
        var t = k(n) ? $e2 : na;
        return t(n, I2(e, 3));
      }
      var ah = Aa(Za), lh = Aa(Ja);
      function fh(n, e) {
        return yn(si(n, e), 1);
      }
      function ch(n, e) {
        return yn(si(n, e), ve2);
      }
      function sh(n, e, t) {
        return t = t === a2 ? 1 : P(t), yn(si(n, e), t);
      }
      function tl(n, e) {
        var t = k(n) ? Xn : Ye2;
        return t(n, I2(e, 3));
      }
      function rl(n, e) {
        var t = k(n) ? Mf : jo;
        return t(n, I2(e, 3));
      }
      var dh = ti(function(n, e, t) {
        X.call(n, t) ? n[t].push(e) : Ae2(n, t, [e]);
      });
      function hh(n, e, t, r) {
        n = On(n) ? n : zt(n), t = t && !r ? P(t) : 0;
        var i = n.length;
        return t < 0 && (t = vn(i + t, 0)), pi(n) ? t <= i && n.indexOf(e, t) > -1 : !!i && Rt(n, e, t) > -1;
      }
      var gh = F(function(n, e, t) {
        var r = -1, i = typeof e == "function", l = On(n) ? v(n.length) : [];
        return Ye2(n, function(f2) {
          l[++r] = i ? Dn(e, f2, t) : or(f2, e, t);
        }), l;
      }), vh = ti(function(n, e, t) {
        Ae2(n, t, e);
      });
      function si(n, e) {
        var t = k(n) ? rn : oa;
        return t(n, I2(e, 3));
      }
      function ph(n, e, t, r) {
        return n == null ? [] : (k(e) || (e = e == null ? [] : [e]), t = r ? a2 : t, k(t) || (t = t == null ? [] : [t]), ca(n, e, t));
      }
      var _h = ti(function(n, e, t) {
        n[t ? 0 : 1].push(e);
      }, function() {
        return [[], []];
      });
      function mh(n, e, t) {
        var r = k(n) ? Gi : Ho, i = arguments.length < 3;
        return r(n, I2(e, 4), t, i, Ye2);
      }
      function xh(n, e, t) {
        var r = k(n) ? Lf : Ho, i = arguments.length < 3;
        return r(n, I2(e, 4), t, i, jo);
      }
      function yh(n, e) {
        var t = k(n) ? $e2 : na;
        return t(n, gi(I2(e, 3)));
      }
      function wh(n) {
        var e = k(n) ? Zo : hs;
        return e(n);
      }
      function bh(n, e, t) {
        (t ? En(n, e, t) : e === a2) ? e = 1 : e = P(e);
        var r = k(n) ? Gc : gs;
        return r(n, e);
      }
      function Ch(n) {
        var e = k(n) ? qc : ps;
        return e(n);
      }
      function Eh(n) {
        if (n == null)
          return 0;
        if (On(n))
          return pi(n) ? St(n) : n.length;
        var e = bn(n);
        return e == zn || e == Fn ? n.size : fu(n).length;
      }
      function Rh(n, e, t) {
        var r = k(n) ? qi : _s;
        return t && En(n, e, t) && (e = a2), r(n, I2(e, 3));
      }
      var Th = F(function(n, e) {
        if (n == null)
          return [];
        var t = e.length;
        return t > 1 && En(n, e[0], e[1]) ? e = [] : t > 2 && En(e[0], e[1], e[2]) && (e = [e[0]]), ca(n, yn(e, 1), []);
      }), di = oc || function() {
        return xn.Date.now();
      };
      function Sh(n, e) {
        if (typeof e != "function")
          throw new Qn(C);
        return n = P(n), function() {
          if (--n < 1)
            return e.apply(this, arguments);
        };
      }
      function il(n, e, t) {
        return e = t ? a2 : e, e = n && e == null ? n.length : e, Ie2(n, ue2, a2, a2, a2, a2, e);
      }
      function ul(n, e) {
        var t;
        if (typeof e != "function")
          throw new Qn(C);
        return n = P(n), function() {
          return --n > 0 && (t = e.apply(this, arguments)), n <= 1 && (e = a2), t;
        };
      }
      var Bu = F(function(n, e, t) {
        var r = Sn;
        if (t.length) {
          var i = qe2(t, kt2(Bu));
          r |= Kn;
        }
        return Ie2(n, r, e, t, i);
      }), ol2 = F(function(n, e, t) {
        var r = Sn | An;
        if (t.length) {
          var i = qe2(t, kt2(ol2));
          r |= Kn;
        }
        return Ie2(e, r, n, t, i);
      });
      function al(n, e, t) {
        e = t ? a2 : e;
        var r = Ie2(n, Yn, a2, a2, a2, a2, a2, e);
        return r.placeholder = al.placeholder, r;
      }
      function ll(n, e, t) {
        e = t ? a2 : e;
        var r = Ie2(n, ze2, a2, a2, a2, a2, a2, e);
        return r.placeholder = ll.placeholder, r;
      }
      function fl(n, e, t) {
        var r, i, l, f2, s2, h2, _2 = 0, m = false, y = false, R2 = true;
        if (typeof n != "function")
          throw new Qn(C);
        e = re2(e) || 0, an(t) && (m = !!t.leading, y = "maxWait" in t, l = y ? vn(re2(t.maxWait) || 0, e) : l, R2 = "trailing" in t ? !!t.trailing : R2);
        function A2(dn) {
          var he2 = r, He2 = i;
          return r = i = a2, _2 = dn, f2 = n.apply(He2, he2), f2;
        }
        function M(dn) {
          return _2 = dn, s2 = sr(W, e), m ? A2(dn) : f2;
        }
        function z(dn) {
          var he2 = dn - h2, He2 = dn - _2, Al = e - he2;
          return y ? wn(Al, l - He2) : Al;
        }
        function L(dn) {
          var he2 = dn - h2, He2 = dn - _2;
          return h2 === a2 || he2 >= e || he2 < 0 || y && He2 >= l;
        }
        function W() {
          var dn = di();
          if (L(dn))
            return G(dn);
          s2 = sr(W, z(dn));
        }
        function G(dn) {
          return s2 = a2, R2 && r ? A2(dn) : (r = i = a2, f2);
        }
        function $n() {
          s2 !== a2 && xa(s2), _2 = 0, r = h2 = i = s2 = a2;
        }
        function Rn() {
          return s2 === a2 ? f2 : G(di());
        }
        function Gn() {
          var dn = di(), he2 = L(dn);
          if (r = arguments, i = this, h2 = dn, he2) {
            if (s2 === a2)
              return M(h2);
            if (y)
              return xa(s2), s2 = sr(W, e), A2(h2);
          }
          return s2 === a2 && (s2 = sr(W, e)), f2;
        }
        return Gn.cancel = $n, Gn.flush = Rn, Gn;
      }
      var Ah = F(function(n, e) {
        return Qo(n, 1, e);
      }), Ih = F(function(n, e, t) {
        return Qo(n, re2(e) || 0, t);
      });
      function Mh(n) {
        return Ie2(n, vt);
      }
      function hi(n, e) {
        if (typeof n != "function" || e != null && typeof e != "function")
          throw new Qn(C);
        var t = function() {
          var r = arguments, i = e ? e.apply(this, r) : r[0], l = t.cache;
          if (l.has(i))
            return l.get(i);
          var f2 = n.apply(this, r);
          return t.cache = l.set(i, f2) || l, f2;
        };
        return t.cache = new (hi.Cache || Se2)(), t;
      }
      hi.Cache = Se2;
      function gi(n) {
        if (typeof n != "function")
          throw new Qn(C);
        return function() {
          var e = arguments;
          switch (e.length) {
            case 0:
              return !n.call(this);
            case 1:
              return !n.call(this, e[0]);
            case 2:
              return !n.call(this, e[0], e[1]);
            case 3:
              return !n.call(this, e[0], e[1], e[2]);
          }
          return !n.apply(this, e);
        };
      }
      function Lh(n) {
        return ul(2, n);
      }
      var Oh = ms(function(n, e) {
        e = e.length == 1 && k(e[0]) ? rn(e[0], Un(I2())) : rn(yn(e, 1), Un(I2()));
        var t = e.length;
        return F(function(r) {
          for (var i = -1, l = wn(r.length, t); ++i < l; )
            r[i] = e[i].call(this, r[i]);
          return Dn(n, this, r);
        });
      }), Hu = F(function(n, e) {
        var t = qe2(e, kt2(Hu));
        return Ie2(n, Kn, a2, e, t);
      }), cl = F(function(n, e) {
        var t = qe2(e, kt2(cl));
        return Ie2(n, Fe2, a2, e, t);
      }), Bh = Me2(function(n, e) {
        return Ie2(n, je2, a2, a2, a2, e);
      });
      function Hh(n, e) {
        if (typeof n != "function")
          throw new Qn(C);
        return e = e === a2 ? e : P(e), F(n, e);
      }
      function kh(n, e) {
        if (typeof n != "function")
          throw new Qn(C);
        return e = e == null ? 0 : vn(P(e), 0), F(function(t) {
          var r = t[e], i = Je2(t, 0, e);
          return r && Ge2(i, r), Dn(n, this, i);
        });
      }
      function Ph(n, e, t) {
        var r = true, i = true;
        if (typeof n != "function")
          throw new Qn(C);
        return an(t) && (r = "leading" in t ? !!t.leading : r, i = "trailing" in t ? !!t.trailing : i), fl(n, e, {
          leading: r,
          maxWait: e,
          trailing: i
        });
      }
      function zh(n) {
        return il(n, 1);
      }
      function Fh(n, e) {
        return Hu(mu(e), n);
      }
      function Dh() {
        if (!arguments.length)
          return [];
        var n = arguments[0];
        return k(n) ? n : [n];
      }
      function Uh(n) {
        return ne2(n, kn);
      }
      function Wh(n, e) {
        return e = typeof e == "function" ? e : a2, ne2(n, kn, e);
      }
      function Nh(n) {
        return ne2(n, un | kn);
      }
      function $h(n, e) {
        return e = typeof e == "function" ? e : a2, ne2(n, un | kn, e);
      }
      function Gh(n, e) {
        return e == null || Xo(n, e, _n(e));
      }
      function de2(n, e) {
        return n === e || n !== n && e !== e;
      }
      var qh = oi(ou), Vh = oi(function(n, e) {
        return n >= e;
      }), ht2 = ra(function() {
        return arguments;
      }()) ? ra : function(n) {
        return cn(n) && X.call(n, "callee") && !$o.call(n, "callee");
      }, k = v.isArray, Yh = Eo ? Un(Eo) : es;
      function On(n) {
        return n != null && vi2(n.length) && !Oe2(n);
      }
      function sn(n) {
        return cn(n) && On(n);
      }
      function Kh(n) {
        return n === true || n === false || cn(n) && Cn(n) == pe2;
      }
      var Xe2 = lc || qu, Zh = Ro ? Un(Ro) : ts2;
      function Jh(n) {
        return cn(n) && n.nodeType === 1 && !dr(n);
      }
      function Xh(n) {
        if (n == null)
          return true;
        if (On(n) && (k(n) || typeof n == "string" || typeof n.splice == "function" || Xe2(n) || Pt(n) || ht2(n)))
          return !n.length;
        var e = bn(n);
        if (e == zn || e == Fn)
          return !n.size;
        if (cr(n))
          return !fu(n).length;
        for (var t in n)
          if (X.call(n, t))
            return false;
        return true;
      }
      function Qh(n, e) {
        return ar(n, e);
      }
      function jh(n, e, t) {
        t = typeof t == "function" ? t : a2;
        var r = t ? t(n, e) : a2;
        return r === a2 ? ar(n, e, a2, t) : !!r;
      }
      function ku(n) {
        if (!cn(n))
          return false;
        var e = Cn(n);
        return e == _t || e == pt2 || typeof n.message == "string" && typeof n.name == "string" && !dr(n);
      }
      function ng(n) {
        return typeof n == "number" && qo(n);
      }
      function Oe2(n) {
        if (!an(n))
          return false;
        var e = Cn(n);
        return e == tt3 || e == br3 || e == Ut || e == xt;
      }
      function sl(n) {
        return typeof n == "number" && n == P(n);
      }
      function vi2(n) {
        return typeof n == "number" && n > -1 && n % 1 == 0 && n <= ae2;
      }
      function an(n) {
        var e = typeof n;
        return n != null && (e == "object" || e == "function");
      }
      function cn(n) {
        return n != null && typeof n == "object";
      }
      var dl2 = To ? Un(To) : is3;
      function eg(n, e) {
        return n === e || lu(n, e, Ru(e));
      }
      function tg(n, e, t) {
        return t = typeof t == "function" ? t : a2, lu(n, e, Ru(e), t);
      }
      function rg(n) {
        return hl(n) && n != +n;
      }
      function ig(n) {
        if (Ws(n))
          throw new H(B2);
        return ia(n);
      }
      function ug(n) {
        return n === null;
      }
      function og(n) {
        return n == null;
      }
      function hl(n) {
        return typeof n == "number" || cn(n) && Cn(n) == _e2;
      }
      function dr(n) {
        if (!cn(n) || Cn(n) != Zn)
          return false;
        var e = Nr(n);
        if (e === null)
          return true;
        var t = X.call(e, "constructor") && e.constructor;
        return typeof t == "function" && t instanceof t && Fr.call(t) == tc;
      }
      var Pu = So ? Un(So) : us;
      function ag(n) {
        return sl(n) && n >= -ae2 && n <= ae2;
      }
      var gl = Ao ? Un(Ao) : os2;
      function pi(n) {
        return typeof n == "string" || !k(n) && cn(n) && Cn(n) == Ee2;
      }
      function Nn(n) {
        return typeof n == "symbol" || cn(n) && Cn(n) == yt2;
      }
      var Pt = Io ? Un(Io) : as;
      function lg(n) {
        return n === a2;
      }
      function fg(n) {
        return cn(n) && bn(n) == We2;
      }
      function cg(n) {
        return cn(n) && Cn(n) == Cr;
      }
      var sg = oi(cu), dg = oi(function(n, e) {
        return n <= e;
      });
      function vl(n) {
        if (!n)
          return [];
        if (On(n))
          return pi(n) ? ce2(n) : Ln(n);
        if (jt && n[jt])
          return Gf(n[jt]());
        var e = bn(n), t = e == zn ? Xi : e == Fn ? kr : zt;
        return t(n);
      }
      function Be2(n) {
        if (!n)
          return n === 0 ? n : 0;
        if (n = re2(n), n === ve2 || n === -ve2) {
          var e = n < 0 ? -1 : 1;
          return e * xr;
        }
        return n === n ? n : 0;
      }
      function P(n) {
        var e = Be2(n), t = e % 1;
        return e === e ? t ? e - t : e : 0;
      }
      function pl(n) {
        return n ? ft2(P(n), 0, Pn) : 0;
      }
      function re2(n) {
        if (typeof n == "number")
          return n;
        if (Nn(n))
          return et2;
        if (an(n)) {
          var e = typeof n.valueOf == "function" ? n.valueOf() : n;
          n = an(e) ? e + "" : e;
        }
        if (typeof n != "string")
          return n === 0 ? n : +n;
        n = ko(n);
        var t = U.test(n);
        return t || on.test(n) ? Sf(n.slice(2), t ? 2 : 8) : N.test(n) ? et2 : +n;
      }
      function _l(n) {
        return xe2(n, Bn(n));
      }
      function hg(n) {
        return n ? ft2(P(n), -ae2, ae2) : n === 0 ? n : 0;
      }
      function J(n) {
        return n == null ? "" : Wn(n);
      }
      var gg = Bt(function(n, e) {
        if (cr(e) || On(e)) {
          xe2(e, _n(e), n);
          return;
        }
        for (var t in e)
          X.call(e, t) && ir(n, t, e[t]);
      }), ml = Bt(function(n, e) {
        xe2(e, Bn(e), n);
      }), _i = Bt(function(n, e, t, r) {
        xe2(e, Bn(e), n, r);
      }), vg = Bt(function(n, e, t, r) {
        xe2(e, _n(e), n, r);
      }), pg = Me2(ru);
      function _g(n, e) {
        var t = Ot(n);
        return e == null ? t : Jo(t, e);
      }
      var mg = F(function(n, e) {
        n = j(n);
        var t = -1, r = e.length, i = r > 2 ? e[2] : a2;
        for (i && En(e[0], e[1], i) && (r = 1); ++t < r; )
          for (var l = e[t], f2 = Bn(l), s2 = -1, h2 = f2.length; ++s2 < h2; ) {
            var _2 = f2[s2], m = n[_2];
            (m === a2 || de2(m, It[_2]) && !X.call(n, _2)) && (n[_2] = l[_2]);
          }
        return n;
      }), xg = F(function(n) {
        return n.push(a2, ka), Dn(xl, a2, n);
      });
      function yg(n, e) {
        return Lo(n, I2(e, 3), me2);
      }
      function wg(n, e) {
        return Lo(n, I2(e, 3), uu);
      }
      function bg(n, e) {
        return n == null ? n : iu(n, I2(e, 3), Bn);
      }
      function Cg(n, e) {
        return n == null ? n : ea(n, I2(e, 3), Bn);
      }
      function Eg(n, e) {
        return n && me2(n, I2(e, 3));
      }
      function Rg(n, e) {
        return n && uu(n, I2(e, 3));
      }
      function Tg(n) {
        return n == null ? [] : Qr(n, _n(n));
      }
      function Sg(n) {
        return n == null ? [] : Qr(n, Bn(n));
      }
      function zu(n, e, t) {
        var r = n == null ? a2 : ct2(n, e);
        return r === a2 ? t : r;
      }
      function Ag(n, e) {
        return n != null && Fa(n, e, Xc);
      }
      function Fu(n, e) {
        return n != null && Fa(n, e, Qc);
      }
      var Ig = Ma(function(n, e, t) {
        e != null && typeof e.toString != "function" && (e = Dr.call(e)), n[e] = t;
      }, Uu(Hn)), Mg = Ma(function(n, e, t) {
        e != null && typeof e.toString != "function" && (e = Dr.call(e)), X.call(n, e) ? n[e].push(t) : n[e] = [t];
      }, I2), Lg = F(or);
      function _n(n) {
        return On(n) ? Ko(n) : fu(n);
      }
      function Bn(n) {
        return On(n) ? Ko(n, true) : ls(n);
      }
      function Og(n, e) {
        var t = {};
        return e = I2(e, 3), me2(n, function(r, i, l) {
          Ae2(t, e(r, i, l), r);
        }), t;
      }
      function Bg(n, e) {
        var t = {};
        return e = I2(e, 3), me2(n, function(r, i, l) {
          Ae2(t, i, e(r, i, l));
        }), t;
      }
      var Hg = Bt(function(n, e, t) {
        jr(n, e, t);
      }), xl = Bt(function(n, e, t, r) {
        jr(n, e, t, r);
      }), kg = Me2(function(n, e) {
        var t = {};
        if (n == null)
          return t;
        var r = false;
        e = rn(e, function(l) {
          return l = Ze2(l, n), r || (r = l.length > 1), l;
        }), xe2(n, Cu(n), t), r && (t = ne2(t, un | Vn | kn, Is));
        for (var i = e.length; i--; )
          vu(t, e[i]);
        return t;
      });
      function Pg(n, e) {
        return yl(n, gi(I2(e)));
      }
      var zg = Me2(function(n, e) {
        return n == null ? {} : cs(n, e);
      });
      function yl(n, e) {
        if (n == null)
          return {};
        var t = rn(Cu(n), function(r) {
          return [r];
        });
        return e = I2(e), sa(n, t, function(r, i) {
          return e(r, i[0]);
        });
      }
      function Fg(n, e, t) {
        e = Ze2(e, n);
        var r = -1, i = e.length;
        for (i || (i = 1, n = a2); ++r < i; ) {
          var l = n == null ? a2 : n[ye2(e[r])];
          l === a2 && (r = i, l = t), n = Oe2(l) ? l.call(n) : l;
        }
        return n;
      }
      function Dg(n, e, t) {
        return n == null ? n : lr(n, e, t);
      }
      function Ug(n, e, t, r) {
        return r = typeof r == "function" ? r : a2, n == null ? n : lr(n, e, t, r);
      }
      var wl = Ba(_n), bl = Ba(Bn);
      function Wg(n, e, t) {
        var r = k(n), i = r || Xe2(n) || Pt(n);
        if (e = I2(e, 4), t == null) {
          var l = n && n.constructor;
          i ? t = r ? new l() : [] : an(n) ? t = Oe2(l) ? Ot(Nr(n)) : {} : t = {};
        }
        return (i ? Xn : me2)(n, function(f2, s2, h2) {
          return e(t, f2, s2, h2);
        }), t;
      }
      function Ng(n, e) {
        return n == null ? true : vu(n, e);
      }
      function $g(n, e, t) {
        return n == null ? n : pa(n, e, mu(t));
      }
      function Gg(n, e, t, r) {
        return r = typeof r == "function" ? r : a2, n == null ? n : pa(n, e, mu(t), r);
      }
      function zt(n) {
        return n == null ? [] : Ji(n, _n(n));
      }
      function qg(n) {
        return n == null ? [] : Ji(n, Bn(n));
      }
      function Vg(n, e, t) {
        return t === a2 && (t = e, e = a2), t !== a2 && (t = re2(t), t = t === t ? t : 0), e !== a2 && (e = re2(e), e = e === e ? e : 0), ft2(re2(n), e, t);
      }
      function Yg(n, e, t) {
        return e = Be2(e), t === a2 ? (t = e, e = 0) : t = Be2(t), n = re2(n), jc(n, e, t);
      }
      function Kg(n, e, t) {
        if (t && typeof t != "boolean" && En(n, e, t) && (e = t = a2), t === a2 && (typeof e == "boolean" ? (t = e, e = a2) : typeof n == "boolean" && (t = n, n = a2)), n === a2 && e === a2 ? (n = 0, e = 1) : (n = Be2(n), e === a2 ? (e = n, n = 0) : e = Be2(e)), n > e) {
          var r = n;
          n = e, e = r;
        }
        if (t || n % 1 || e % 1) {
          var i = Vo();
          return wn(n + i * (e - n + Tf("1e-" + ((i + "").length - 1))), e);
        }
        return du(n, e);
      }
      var Zg = Ht(function(n, e, t) {
        return e = e.toLowerCase(), n + (t ? Cl(e) : e);
      });
      function Cl(n) {
        return Du(J(n).toLowerCase());
      }
      function El(n) {
        return n = J(n), n && n.replace(In, Df).replace(pf, "");
      }
      function Jg(n, e, t) {
        n = J(n), e = Wn(e);
        var r = n.length;
        t = t === a2 ? r : ft2(P(t), 0, r);
        var i = t;
        return t -= e.length, t >= 0 && n.slice(t, i) == e;
      }
      function Xg(n) {
        return n = J(n), n && Rr.test(n) ? n.replace(Ct2, Uf) : n;
      }
      function Qg(n) {
        return n = J(n), n && Mr.test(n) ? n.replace(Jt, "\\$&") : n;
      }
      var jg = Ht(function(n, e, t) {
        return n + (t ? "-" : "") + e.toLowerCase();
      }), n1 = Ht(function(n, e, t) {
        return n + (t ? " " : "") + e.toLowerCase();
      }), e1 = Sa("toLowerCase");
      function t1(n, e, t) {
        n = J(n), e = P(e);
        var r = e ? St(n) : 0;
        if (!e || r >= e)
          return n;
        var i = (e - r) / 2;
        return ui(Vr(i), t) + n + ui(qr(i), t);
      }
      function r1(n, e, t) {
        n = J(n), e = P(e);
        var r = e ? St(n) : 0;
        return e && r < e ? n + ui(e - r, t) : n;
      }
      function i1(n, e, t) {
        n = J(n), e = P(e);
        var r = e ? St(n) : 0;
        return e && r < e ? ui(e - r, t) + n : n;
      }
      function u1(n, e, t) {
        return t || e == null ? e = 0 : e && (e = +e), dc(J(n).replace(Xt2, ""), e || 0);
      }
      function o1(n, e, t) {
        return (t ? En(n, e, t) : e === a2) ? e = 1 : e = P(e), hu(J(n), e);
      }
      function a1() {
        var n = arguments, e = J(n[0]);
        return n.length < 3 ? e : e.replace(n[1], n[2]);
      }
      var l1 = Ht(function(n, e, t) {
        return n + (t ? "_" : "") + e.toLowerCase();
      });
      function f1(n, e, t) {
        return t && typeof t != "number" && En(n, e, t) && (e = t = a2), t = t === a2 ? Pn : t >>> 0, t ? (n = J(n), n && (typeof e == "string" || e != null && !Pu(e)) && (e = Wn(e), !e && Tt(n)) ? Je2(ce2(n), 0, t) : n.split(e, t)) : [];
      }
      var c1 = Ht(function(n, e, t) {
        return n + (t ? " " : "") + Du(e);
      });
      function s1(n, e, t) {
        return n = J(n), t = t == null ? 0 : ft2(P(t), 0, n.length), e = Wn(e), n.slice(t, t + e.length) == e;
      }
      function d1(n, e, t) {
        var r = o.templateSettings;
        t && En(n, e, t) && (e = a2), n = J(n), e = _i({}, e, r, Ha);
        var i = _i({}, e.imports, r.imports, Ha), l = _n(i), f2 = Ji(i, l), s2, h2, _2 = 0, m = e.interpolate || fe2, y = "__p += '", R2 = Qi(
          (e.escape || fe2).source + "|" + m.source + "|" + (m === Sr ? q3 : fe2).source + "|" + (e.evaluate || fe2).source + "|$",
          "g"
        ), A2 = "//# sourceURL=" + (X.call(e, "sourceURL") ? (e.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++wf + "]") + `
`;
        n.replace(R2, function(L, W, G, $n, Rn, Gn) {
          return G || (G = $n), y += n.slice(_2, Gn).replace(Lr, Wf), W && (s2 = true, y += `' +
__e(` + W + `) +
'`), Rn && (h2 = true, y += `';
` + Rn + `;
__p += '`), G && (y += `' +
((__t = (` + G + `)) == null ? '' : __t) +
'`), _2 = Gn + L.length, L;
        }), y += `';
`;
        var M = X.call(e, "variable") && e.variable;
        if (!M)
          y = `with (obj) {
` + y + `
}
`;
        else if (E.test(M))
          throw new H(V2);
        y = (h2 ? y.replace(Mi, "") : y).replace(Kt, "$1").replace(Er, "$1;"), y = "function(" + (M || "obj") + `) {
` + (M ? "" : `obj || (obj = {});
`) + "var __t, __p = ''" + (s2 ? ", __e = _.escape" : "") + (h2 ? `, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
` : `;
`) + y + `return __p
}`;
        var z = Tl(function() {
          return K2(l, A2 + "return " + y).apply(a2, f2);
        });
        if (z.source = y, ku(z))
          throw z;
        return z;
      }
      function h1(n) {
        return J(n).toLowerCase();
      }
      function g1(n) {
        return J(n).toUpperCase();
      }
      function v1(n, e, t) {
        if (n = J(n), n && (t || e === a2))
          return ko(n);
        if (!n || !(e = Wn(e)))
          return n;
        var r = ce2(n), i = ce2(e), l = Po(r, i), f2 = zo(r, i) + 1;
        return Je2(r, l, f2).join("");
      }
      function p1(n, e, t) {
        if (n = J(n), n && (t || e === a2))
          return n.slice(0, Do(n) + 1);
        if (!n || !(e = Wn(e)))
          return n;
        var r = ce2(n), i = zo(r, ce2(e)) + 1;
        return Je2(r, 0, i).join("");
      }
      function _1(n, e, t) {
        if (n = J(n), n && (t || e === a2))
          return n.replace(Xt2, "");
        if (!n || !(e = Wn(e)))
          return n;
        var r = ce2(n), i = Po(r, ce2(e));
        return Je2(r, i).join("");
      }
      function m1(n, e) {
        var t = Ti, r = Si;
        if (an(e)) {
          var i = "separator" in e ? e.separator : i;
          t = "length" in e ? P(e.length) : t, r = "omission" in e ? Wn(e.omission) : r;
        }
        n = J(n);
        var l = n.length;
        if (Tt(n)) {
          var f2 = ce2(n);
          l = f2.length;
        }
        if (t >= l)
          return n;
        var s2 = t - St(r);
        if (s2 < 1)
          return r;
        var h2 = f2 ? Je2(f2, 0, s2).join("") : n.slice(0, s2);
        if (i === a2)
          return h2 + r;
        if (f2 && (s2 += h2.length - s2), Pu(i)) {
          if (n.slice(s2).search(i)) {
            var _2, m = h2;
            for (i.global || (i = Qi(i.source, J(Z.exec(i)) + "g")), i.lastIndex = 0; _2 = i.exec(m); )
              var y = _2.index;
            h2 = h2.slice(0, y === a2 ? s2 : y);
          }
        } else if (n.indexOf(Wn(i), s2) != s2) {
          var R2 = h2.lastIndexOf(i);
          R2 > -1 && (h2 = h2.slice(0, R2));
        }
        return h2 + r;
      }
      function x1(n) {
        return n = J(n), n && Zt2.test(n) ? n.replace(Re2, Kf) : n;
      }
      var y1 = Ht(function(n, e, t) {
        return n + (t ? " " : "") + e.toUpperCase();
      }), Du = Sa("toUpperCase");
      function Rl(n, e, t) {
        return n = J(n), e = t ? a2 : e, e === a2 ? $f(n) ? Xf(n) : Hf(n) : n.match(e) || [];
      }
      var Tl = F(function(n, e) {
        try {
          return Dn(n, a2, e);
        } catch (t) {
          return ku(t) ? t : new H(t);
        }
      }), w1 = Me2(function(n, e) {
        return Xn(e, function(t) {
          t = ye2(t), Ae2(n, t, Bu(n[t], n));
        }), n;
      });
      function b1(n) {
        var e = n == null ? 0 : n.length, t = I2();
        return n = e ? rn(n, function(r) {
          if (typeof r[1] != "function")
            throw new Qn(C);
          return [t(r[0]), r[1]];
        }) : [], F(function(r) {
          for (var i = -1; ++i < e; ) {
            var l = n[i];
            if (Dn(l[0], this, r))
              return Dn(l[1], this, r);
          }
        });
      }
      function C1(n) {
        return Kc(ne2(n, un));
      }
      function Uu(n) {
        return function() {
          return n;
        };
      }
      function E1(n, e) {
        return n == null || n !== n ? e : n;
      }
      var R1 = Ia(), T1 = Ia(true);
      function Hn(n) {
        return n;
      }
      function Wu(n) {
        return ua(typeof n == "function" ? n : ne2(n, un));
      }
      function S1(n) {
        return aa(ne2(n, un));
      }
      function A1(n, e) {
        return la(n, ne2(e, un));
      }
      var I1 = F(function(n, e) {
        return function(t) {
          return or(t, n, e);
        };
      }), M1 = F(function(n, e) {
        return function(t) {
          return or(n, t, e);
        };
      });
      function Nu(n, e, t) {
        var r = _n(e), i = Qr(e, r);
        t == null && !(an(e) && (i.length || !r.length)) && (t = e, e = n, n = this, i = Qr(e, _n(e)));
        var l = !(an(t) && "chain" in t) || !!t.chain, f2 = Oe2(n);
        return Xn(i, function(s2) {
          var h2 = e[s2];
          n[s2] = h2, f2 && (n.prototype[s2] = function() {
            var _2 = this.__chain__;
            if (l || _2) {
              var m = n(this.__wrapped__), y = m.__actions__ = Ln(this.__actions__);
              return y.push({ func: h2, args: arguments, thisArg: n }), m.__chain__ = _2, m;
            }
            return h2.apply(n, Ge2([this.value()], arguments));
          });
        }), n;
      }
      function L1() {
        return xn._ === this && (xn._ = rc), this;
      }
      function $u() {
      }
      function O1(n) {
        return n = P(n), F(function(e) {
          return fa(e, n);
        });
      }
      var B1 = yu(rn), H1 = yu(Mo), k1 = yu(qi);
      function Sl(n) {
        return Su(n) ? Vi(ye2(n)) : ss(n);
      }
      function P1(n) {
        return function(e) {
          return n == null ? a2 : ct2(n, e);
        };
      }
      var z1 = La(), F1 = La(true);
      function Gu() {
        return [];
      }
      function qu() {
        return false;
      }
      function D1() {
        return {};
      }
      function U1() {
        return "";
      }
      function W1() {
        return true;
      }
      function N1(n, e) {
        if (n = P(n), n < 1 || n > ae2)
          return [];
        var t = Pn, r = wn(n, Pn);
        e = I2(e), n -= Pn;
        for (var i = Zi(r, e); ++t < n; )
          e(t);
        return i;
      }
      function $1(n) {
        return k(n) ? rn(n, ye2) : Nn(n) ? [n] : Ln(Ya(J(n)));
      }
      function G1(n) {
        var e = ++ec;
        return J(n) + e;
      }
      var q1 = ii(function(n, e) {
        return n + e;
      }, 0), V1 = wu("ceil"), Y1 = ii(function(n, e) {
        return n / e;
      }, 1), K1 = wu("floor");
      function Z1(n) {
        return n && n.length ? Xr(n, Hn, ou) : a2;
      }
      function J1(n, e) {
        return n && n.length ? Xr(n, I2(e, 2), ou) : a2;
      }
      function X1(n) {
        return Bo(n, Hn);
      }
      function Q1(n, e) {
        return Bo(n, I2(e, 2));
      }
      function j1(n) {
        return n && n.length ? Xr(n, Hn, cu) : a2;
      }
      function n0(n, e) {
        return n && n.length ? Xr(n, I2(e, 2), cu) : a2;
      }
      var e0 = ii(function(n, e) {
        return n * e;
      }, 1), t0 = wu("round"), r0 = ii(function(n, e) {
        return n - e;
      }, 0);
      function i0(n) {
        return n && n.length ? Ki(n, Hn) : 0;
      }
      function u0(n, e) {
        return n && n.length ? Ki(n, I2(e, 2)) : 0;
      }
      return o.after = Sh, o.ary = il, o.assign = gg, o.assignIn = ml, o.assignInWith = _i, o.assignWith = vg, o.at = pg, o.before = ul, o.bind = Bu, o.bindAll = w1, o.bindKey = ol2, o.castArray = Dh, o.chain = el, o.chunk = Ks, o.compact = Zs, o.concat = Js, o.cond = b1, o.conforms = C1, o.constant = Uu, o.countBy = ih, o.create = _g, o.curry = al, o.curryRight = ll, o.debounce = fl, o.defaults = mg, o.defaultsDeep = xg, o.defer = Ah, o.delay = Ih, o.difference = Xs, o.differenceBy = Qs, o.differenceWith = js, o.drop = nd, o.dropRight = ed, o.dropRightWhile = td, o.dropWhile = rd, o.fill = id2, o.filter = oh, o.flatMap = fh, o.flatMapDeep = ch, o.flatMapDepth = sh, o.flatten = Xa, o.flattenDeep = ud, o.flattenDepth = od, o.flip = Mh, o.flow = R1, o.flowRight = T1, o.fromPairs = ad, o.functions = Tg, o.functionsIn = Sg, o.groupBy = dh, o.initial = fd, o.intersection = cd, o.intersectionBy = sd, o.intersectionWith = dd3, o.invert = Ig, o.invertBy = Mg, o.invokeMap = gh, o.iteratee = Wu, o.keyBy = vh, o.keys = _n, o.keysIn = Bn, o.map = si, o.mapKeys = Og, o.mapValues = Bg, o.matches = S1, o.matchesProperty = A1, o.memoize = hi, o.merge = Hg, o.mergeWith = xl, o.method = I1, o.methodOf = M1, o.mixin = Nu, o.negate = gi, o.nthArg = O1, o.omit = kg, o.omitBy = Pg, o.once = Lh, o.orderBy = ph, o.over = B1, o.overArgs = Oh, o.overEvery = H1, o.overSome = k1, o.partial = Hu, o.partialRight = cl, o.partition = _h, o.pick = zg, o.pickBy = yl, o.property = Sl, o.propertyOf = P1, o.pull = pd, o.pullAll = ja, o.pullAllBy = _d, o.pullAllWith = md, o.pullAt = xd, o.range = z1, o.rangeRight = F1, o.rearg = Bh, o.reject = yh, o.remove = yd, o.rest = Hh, o.reverse = Lu, o.sampleSize = bh, o.set = Dg, o.setWith = Ug, o.shuffle = Ch, o.slice = wd, o.sortBy = Th, o.sortedUniq = Ad, o.sortedUniqBy = Id, o.split = f1, o.spread = kh, o.tail = Md, o.take = Ld, o.takeRight = Od, o.takeRightWhile = Bd, o.takeWhile = Hd, o.tap = Zd, o.throttle = Ph, o.thru = ci, o.toArray = vl, o.toPairs = wl, o.toPairsIn = bl, o.toPath = $1, o.toPlainObject = _l, o.transform = Wg, o.unary = zh, o.union = kd, o.unionBy = Pd, o.unionWith = zd, o.uniq = Fd, o.uniqBy = Dd, o.uniqWith = Ud, o.unset = Ng, o.unzip = Ou, o.unzipWith = nl, o.update = $g, o.updateWith = Gg, o.values = zt, o.valuesIn = qg, o.without = Wd, o.words = Rl, o.wrap = Fh, o.xor = Nd, o.xorBy = $d, o.xorWith = Gd, o.zip = qd, o.zipObject = Vd, o.zipObjectDeep = Yd, o.zipWith = Kd, o.entries = wl, o.entriesIn = bl, o.extend = ml, o.extendWith = _i, Nu(o, o), o.add = q1, o.attempt = Tl, o.camelCase = Zg, o.capitalize = Cl, o.ceil = V1, o.clamp = Vg, o.clone = Uh, o.cloneDeep = Nh, o.cloneDeepWith = $h, o.cloneWith = Wh, o.conformsTo = Gh, o.deburr = El, o.defaultTo = E1, o.divide = Y1, o.endsWith = Jg, o.eq = de2, o.escape = Xg, o.escapeRegExp = Qg, o.every = uh, o.find = ah, o.findIndex = Za, o.findKey = yg, o.findLast = lh, o.findLastIndex = Ja, o.findLastKey = wg, o.floor = K1, o.forEach = tl, o.forEachRight = rl, o.forIn = bg, o.forInRight = Cg, o.forOwn = Eg, o.forOwnRight = Rg, o.get = zu, o.gt = qh, o.gte = Vh, o.has = Ag, o.hasIn = Fu, o.head = Qa, o.identity = Hn, o.includes = hh, o.indexOf = ld, o.inRange = Yg, o.invoke = Lg, o.isArguments = ht2, o.isArray = k, o.isArrayBuffer = Yh, o.isArrayLike = On, o.isArrayLikeObject = sn, o.isBoolean = Kh, o.isBuffer = Xe2, o.isDate = Zh, o.isElement = Jh, o.isEmpty = Xh, o.isEqual = Qh, o.isEqualWith = jh, o.isError = ku, o.isFinite = ng, o.isFunction = Oe2, o.isInteger = sl, o.isLength = vi2, o.isMap = dl2, o.isMatch = eg, o.isMatchWith = tg, o.isNaN = rg, o.isNative = ig, o.isNil = og, o.isNull = ug, o.isNumber = hl, o.isObject = an, o.isObjectLike = cn, o.isPlainObject = dr, o.isRegExp = Pu, o.isSafeInteger = ag, o.isSet = gl, o.isString = pi, o.isSymbol = Nn, o.isTypedArray = Pt, o.isUndefined = lg, o.isWeakMap = fg, o.isWeakSet = cg, o.join = hd, o.kebabCase = jg, o.last = te2, o.lastIndexOf = gd, o.lowerCase = n1, o.lowerFirst = e1, o.lt = sg, o.lte = dg, o.max = Z1, o.maxBy = J1, o.mean = X1, o.meanBy = Q1, o.min = j1, o.minBy = n0, o.stubArray = Gu, o.stubFalse = qu, o.stubObject = D1, o.stubString = U1, o.stubTrue = W1, o.multiply = e0, o.nth = vd, o.noConflict = L1, o.noop = $u, o.now = di, o.pad = t1, o.padEnd = r1, o.padStart = i1, o.parseInt = u1, o.random = Kg, o.reduce = mh, o.reduceRight = xh, o.repeat = o1, o.replace = a1, o.result = Fg, o.round = t0, o.runInContext = d, o.sample = wh, o.size = Eh, o.snakeCase = l1, o.some = Rh, o.sortedIndex = bd, o.sortedIndexBy = Cd, o.sortedIndexOf = Ed, o.sortedLastIndex = Rd, o.sortedLastIndexBy = Td, o.sortedLastIndexOf = Sd, o.startCase = c1, o.startsWith = s1, o.subtract = r0, o.sum = i0, o.sumBy = u0, o.template = d1, o.times = N1, o.toFinite = Be2, o.toInteger = P, o.toLength = pl, o.toLower = h1, o.toNumber = re2, o.toSafeInteger = hg, o.toString = J, o.toUpper = g1, o.trim = v1, o.trimEnd = p1, o.trimStart = _1, o.truncate = m1, o.unescape = x1, o.uniqueId = G1, o.upperCase = y1, o.upperFirst = Du, o.each = tl, o.eachRight = rl, o.first = Qa, Nu(o, function() {
        var n = {};
        return me2(o, function(e, t) {
          X.call(o.prototype, t) || (n[t] = e);
        }), n;
      }(), { chain: false }), o.VERSION = b2, Xn(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(n) {
        o[n].placeholder = o;
      }), Xn(["drop", "take"], function(n, e) {
        $2.prototype[n] = function(t) {
          t = t === a2 ? 1 : vn(P(t), 0);
          var r = this.__filtered__ && !e ? new $2(this) : this.clone();
          return r.__filtered__ ? r.__takeCount__ = wn(t, r.__takeCount__) : r.__views__.push({
            size: wn(t, Pn),
            type: n + (r.__dir__ < 0 ? "Right" : "")
          }), r;
        }, $2.prototype[n + "Right"] = function(t) {
          return this.reverse()[n](t).reverse();
        };
      }), Xn(["filter", "map", "takeWhile"], function(n, e) {
        var t = e + 1, r = t == ge2 || t == mr;
        $2.prototype[n] = function(i) {
          var l = this.clone();
          return l.__iteratees__.push({
            iteratee: I2(i, 3),
            type: t
          }), l.__filtered__ = l.__filtered__ || r, l;
        };
      }), Xn(["head", "last"], function(n, e) {
        var t = "take" + (e ? "Right" : "");
        $2.prototype[n] = function() {
          return this[t](1).value()[0];
        };
      }), Xn(["initial", "tail"], function(n, e) {
        var t = "drop" + (e ? "" : "Right");
        $2.prototype[n] = function() {
          return this.__filtered__ ? new $2(this) : this[t](1);
        };
      }), $2.prototype.compact = function() {
        return this.filter(Hn);
      }, $2.prototype.find = function(n) {
        return this.filter(n).head();
      }, $2.prototype.findLast = function(n) {
        return this.reverse().find(n);
      }, $2.prototype.invokeMap = F(function(n, e) {
        return typeof n == "function" ? new $2(this) : this.map(function(t) {
          return or(t, n, e);
        });
      }), $2.prototype.reject = function(n) {
        return this.filter(gi(I2(n)));
      }, $2.prototype.slice = function(n, e) {
        n = P(n);
        var t = this;
        return t.__filtered__ && (n > 0 || e < 0) ? new $2(t) : (n < 0 ? t = t.takeRight(-n) : n && (t = t.drop(n)), e !== a2 && (e = P(e), t = e < 0 ? t.dropRight(-e) : t.take(e - n)), t);
      }, $2.prototype.takeRightWhile = function(n) {
        return this.reverse().takeWhile(n).reverse();
      }, $2.prototype.toArray = function() {
        return this.take(Pn);
      }, me2($2.prototype, function(n, e) {
        var t = /^(?:filter|find|map|reject)|While$/.test(e), r = /^(?:head|last)$/.test(e), i = o[r ? "take" + (e == "last" ? "Right" : "") : e], l = r || /^find/.test(e);
        i && (o.prototype[e] = function() {
          var f2 = this.__wrapped__, s2 = r ? [1] : arguments, h2 = f2 instanceof $2, _2 = s2[0], m = h2 || k(f2), y = function(W) {
            var G = i.apply(o, Ge2([W], s2));
            return r && R2 ? G[0] : G;
          };
          m && t && typeof _2 == "function" && _2.length != 1 && (h2 = m = false);
          var R2 = this.__chain__, A2 = !!this.__actions__.length, M = l && !R2, z = h2 && !A2;
          if (!l && m) {
            f2 = z ? f2 : new $2(this);
            var L = n.apply(f2, s2);
            return L.__actions__.push({ func: ci, args: [y], thisArg: a2 }), new jn(L, R2);
          }
          return M && z ? n.apply(this, s2) : (L = this.thru(y), M ? r ? L.value()[0] : L.value() : L);
        });
      }), Xn(["pop", "push", "shift", "sort", "splice", "unshift"], function(n) {
        var e = Pr[n], t = /^(?:push|sort|unshift)$/.test(n) ? "tap" : "thru", r = /^(?:pop|shift)$/.test(n);
        o.prototype[n] = function() {
          var i = arguments;
          if (r && !this.__chain__) {
            var l = this.value();
            return e.apply(k(l) ? l : [], i);
          }
          return this[t](function(f2) {
            return e.apply(k(f2) ? f2 : [], i);
          });
        };
      }), me2($2.prototype, function(n, e) {
        var t = o[e];
        if (t) {
          var r = t.name + "";
          X.call(Lt, r) || (Lt[r] = []), Lt[r].push({ name: e, func: t });
        }
      }), Lt[ri(a2, An).name] = [{
        name: "wrapper",
        func: a2
      }], $2.prototype.clone = xc, $2.prototype.reverse = yc, $2.prototype.value = wc, o.prototype.at = Jd, o.prototype.chain = Xd, o.prototype.commit = Qd, o.prototype.next = jd, o.prototype.plant = eh, o.prototype.reverse = th, o.prototype.toJSON = o.prototype.valueOf = o.prototype.value = rh, o.prototype.first = o.prototype.head, jt && (o.prototype[jt] = nh), o;
    }, At = Qf();
    ut2 ? ((ut2.exports = At)._ = At, Wi._ = At) : xn._ = At;
  }).call(hr2);
})(Ci, Ci.exports);
var kl = Ci.exports;
var av = 5;
function lv(u2) {
  const g2 = (0, import_react291.useRef)(null), { classes: a2 } = createStyles({ root: {} })(void 0, {
    name: "SuggestionListItem"
  });
  function b2() {
    var V2;
    const B2 = u2.isSelected, C = (V2 = g2.current) == null ? void 0 : V2.matches(":hover");
    return B2 || C;
  }
  function T2() {
    var B2, C;
    b2() ? (B2 = g2.current) == null || B2.setAttribute("data-hovered", "true") : (C = g2.current) == null || C.removeAttribute("data-hovered");
  }
  return (0, import_react291.useEffect)(() => {
    T2(), b2() && g2.current && g2.current.getBoundingClientRect().left > av && g2.current.scrollIntoView({
      behavior: "smooth",
      block: "nearest"
    });
  }), x2(
    Menu.Item,
    {
      className: a2.root,
      icon: u2.icon,
      onClick: u2.set,
      closeMenuOnClick: false,
      onMouseLeave: () => {
        setTimeout(() => {
          T2();
        }, 1);
      },
      ref: g2,
      rightSection: u2.shortcut && x2(Badge, { size: "xs", children: u2.shortcut }),
      children: Tn(Stack, { children: [
        x2(Text, { size: 14, weight: 500, children: u2.name }),
        x2(Text, { size: 10, children: u2.hint })
      ] })
    }
  );
}
function fv(u2) {
  const { classes: g2 } = createStyles({ root: {} })(void 0, {
    name: "SlashMenu"
  }), a2 = [];
  let b2 = 0;
  const T2 = kl.groupBy(u2.items, (B2) => B2.group);
  return kl.forEach(T2, (B2) => {
    a2.push(
      x2(Menu.Label, { children: B2[0].group }, B2[0].group)
    );
    for (const C of B2)
      a2.push(
        x2(
          lv,
          {
            name: C.name,
            icon: C.icon,
            hint: C.hint,
            shortcut: C.shortcut,
            isSelected: u2.keyboardHoveredItemIndex === b2,
            set: () => u2.itemCallback(C)
          },
          C.name
        )
      ), b2++;
  }), x2(
    Menu,
    {
      defaultOpened: true,
      trigger: "hover",
      closeDelay: 1e7,
      styles: { dropdown: { position: "static" } },
      children: x2(Menu.Dropdown, { className: g2.root, children: a2.length > 0 ? a2 : x2(Menu.Item, { children: "No match found" }) })
    }
  );
}
var cv = (u2) => (g2) => Ri(g2, fv, u2, {
  animation: "fade",
  placement: "bottom-start"
});
var sv = class extends x {
  constructor(g2, a2, b2 = [], T2, B2, C, V2) {
    super(g2, a2, b2), this.name = g2, this.execute = a2, this.aliases = b2, this.group = T2, this.icon = B2, this.hint = C, this.shortcut = V2;
  }
};
var yi = {
  Heading: {
    group: "Headings",
    icon: x2(Ul, { size: 18 }),
    hint: "Used for a top-level heading",
    shortcut: we2("Mod-Alt-1")
  },
  "Heading 2": {
    group: "Headings",
    icon: x2(Wl, { size: 18 }),
    hint: "Used for key sections",
    shortcut: we2("Mod-Alt-2")
  },
  "Heading 3": {
    group: "Headings",
    icon: x2(Nl2, { size: 18 }),
    hint: "Used for subsections and group headings",
    shortcut: we2("Mod-Alt-3")
  },
  "Numbered List": {
    group: "Basic blocks",
    icon: x2(Gl, { size: 18 }),
    hint: "Used to display a numbered list",
    shortcut: we2("Mod-Alt-7")
  },
  "Bullet List": {
    group: "Basic blocks",
    icon: x2(ql, { size: 18 }),
    hint: "Used to display an unordered list",
    shortcut: we2("Mod-Alt-9")
  },
  Paragraph: {
    group: "Basic blocks",
    icon: x2(to2, { size: 18 }),
    hint: "Used for the body of your document",
    shortcut: we2("Mod-Alt-0")
  }
};
var dv = eo.map(
  (u2) => new sv(
    u2.name,
    u2.execute,
    u2.aliases,
    yi[u2.name].group,
    yi[u2.name].icon,
    yi[u2.name].hint,
    yi[u2.name].shortcut
  )
);
var Y2 = [
  "#FFFFFF",
  "#EEEEEE",
  "#DDDDDD",
  "#CCCCCC",
  "#999999",
  "#666666",
  "#444444",
  "#333333",
  "#222222",
  "#111111"
];
var wi = (u2 = false) => {
  const g2 = `0px 4px 8px ${u2 ? Y2[8] : Y2[2]}, 0px 0px 1px ${u2 ? Y2[6] : Y2[1]}`, a2 = `1px solid ${u2 ? Y2[7] : Y2[1]}`, b2 = u2 ? Y2[4] : Y2[3], T2 = u2 ? Y2[6] : Y2[0], B2 = u2 ? Y2[7] : Y2[1], C = u2 ? Y2[2] : Y2[6], V2 = Y2[4], D = u2 ? Y2[7] : Y2[1], hn = u2 ? Y2[2] : Y2[6], Q = u2 ? Y2[8] : Y2[6], un = u2 ? Y2[2] : Y2[0], Vn = u2 ? Y2[7] : Y2[1], kn = u2 ? Y2[5] : Y2[3];
  return {
    activeStyles: {
      // Removes button press effect.
      transform: "none"
    },
    colorScheme: u2 ? "dark" : "light",
    colors: {
      scheme: Y2,
      dark: Y2,
      textColors: [
        // primaryText,
        Y2[6],
        "#9b9a97",
        "#64473a",
        "#e03e3e",
        "#d9730d",
        "#dfab01",
        "#4d6461",
        "#0b6e99",
        "#6940a5",
        "#ad1a72"
      ],
      backgroundColors: [
        // primaryBackground,
        Y2[0],
        "#ebeced",
        "#e9e5e3",
        "#fbe4e4",
        "#f6e9d9",
        "#fbf3db",
        "#ddedea",
        "#ddebf1",
        "#eae4f2",
        "#f4dfeb"
      ]
    },
    components: {
      // Block Side Menu items
      ActionIcon: {
        styles: () => ({
          root: {
            color: b2
          }
        })
      },
      // Slash Menu, Formatting Toolbar dropdown, color picker dropdown
      Menu: {
        styles: () => ({
          dropdown: {
            backgroundColor: T2,
            border: a2,
            borderRadius: "6px",
            boxShadow: g2,
            color: C,
            padding: "2px",
            ".mantine-Menu-item": {
              backgroundColor: T2,
              border: "none",
              color: C
            },
            ".mantine-Menu-item[data-hovered]": {
              backgroundColor: D,
              border: "none",
              color: hn
            }
          }
        })
      },
      DragHandleMenu: {
        styles: () => ({
          root: {
            ".mantine-Menu-item": {
              fontSize: "12px",
              height: "30px"
            }
          }
        })
      },
      EditHyperlinkMenu: {
        styles: () => ({
          root: {
            backgroundColor: T2,
            border: a2,
            borderRadius: "6px",
            boxShadow: g2,
            color: C,
            gap: "4px",
            minWidth: "145px",
            padding: "2px",
            // Row
            ".mantine-Group-root": {
              flexWrap: "nowrap",
              gap: "8px",
              paddingInline: "6px",
              // Row icon
              ".mantine-Container-root": {
                color: C,
                display: "flex",
                justifyContent: "center",
                padding: 0,
                width: "fit-content"
              },
              // Row input field
              ".mantine-TextInput-root": {
                width: "300px",
                ".mantine-TextInput-wrapper": {
                  ".mantine-TextInput-input": {
                    border: "none",
                    color: C,
                    fontSize: "12px",
                    padding: 0
                  }
                }
              }
            }
          }
        })
      },
      Toolbar: {
        styles: () => ({
          root: {
            backgroundColor: T2,
            boxShadow: g2,
            border: a2,
            borderRadius: "6px",
            flexWrap: "nowrap",
            gap: "2px",
            padding: "2px",
            width: "fit-content",
            // Button (including dropdown target)
            ".mantine-UnstyledButton-root": {
              backgroundColor: T2,
              border: "none",
              borderRadius: "4px",
              color: C
            },
            // Hovered button
            ".mantine-UnstyledButton-root:hover": {
              backgroundColor: D,
              border: "none",
              color: hn
            },
            // Selected button
            ".mantine-UnstyledButton-root[data-selected]": {
              backgroundColor: Q,
              border: "none",
              color: un
            },
            // Disabled button
            ".mantine-UnstyledButton-root[data-disabled]": {
              backgroundColor: Vn,
              border: "none",
              color: kn
            },
            // Dropdown
            ".mantine-Menu-dropdown": {
              // Dropdown item
              ".mantine-Menu-item": {
                fontSize: "12px",
                height: "30px",
                ".mantine-Menu-itemRightSection": {
                  paddingLeft: "5px"
                }
              },
              ".mantine-Menu-item:hover": {
                backgroundColor: D
              }
            }
          }
        })
      },
      Tooltip: {
        styles: () => ({
          root: {
            backgroundColor: T2,
            border: a2,
            borderRadius: "6px",
            boxShadow: g2,
            color: C,
            padding: "4px 10px",
            textAlign: "center",
            "div ~ div": {
              color: V2
            }
          }
        })
      },
      SlashMenu: {
        styles: () => ({
          root: {
            ".mantine-Menu-item": {
              // Icon
              ".mantine-Menu-itemIcon": {
                backgroundColor: B2,
                borderRadius: "4px",
                color: C,
                padding: "8px"
              },
              // Text
              ".mantine-Menu-itemLabel": {
                paddingRight: "16px",
                ".mantine-Stack-root": {
                  gap: "0"
                }
              },
              // Badge (keyboard shortcut)
              ".mantine-Menu-itemRightSection": {
                ".mantine-Badge-root": {
                  backgroundColor: B2,
                  color: C
                }
              }
            }
          }
        })
      }
    },
    fontFamily: "Inter",
    other: {
      colors: [
        "default",
        "gray",
        "brown",
        "red",
        "orange",
        "yellow",
        "green",
        "blue",
        "purple",
        "pink"
      ]
    },
    primaryColor: "scheme"
  };
};
function hv() {
  const [, u2] = (0, import_react291.useState)(0);
  return () => u2((g2) => g2 + 1);
}
var bv = (u2 = {}, g2 = []) => {
  const [a2, b2] = (0, import_react291.useState)(null), T2 = hv();
  return (0, import_react291.useEffect)(() => {
    var hn, Q;
    let B2 = true, C = {
      slashCommands: dv,
      ...u2
    }, V2;
    C.customElements && C.uiFactories && console.warn(
      "BlockNote editor initialized with both `customElements` and `uiFactories` options, prioritizing `uiFactories`."
    ), C.uiFactories ? V2 = C.uiFactories : V2 = {
      formattingToolbarFactory: iv(
        wi(C.theme === "dark"),
        (hn = C.customElements) == null ? void 0 : hn.formattingToolbar
      ),
      hyperlinkToolbarFactory: ov(
        wi(C.theme === "dark")
      ),
      slashMenuFactory: cv(
        wi(C.theme === "dark")
      ),
      blockSideMenuFactory: W0(
        wi(C.theme === "dark"),
        (Q = C.customElements) == null ? void 0 : Q.dragHandleMenu
      )
    }, C = {
      ...C,
      uiFactories: V2
    }, console.log("create new blocknote instance");
    const D = new Fo(
      C
    );
    return b2(D), D._tiptapEditor.on("transaction", () => {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          B2 && T2();
        });
      });
    }), () => {
      D._tiptapEditor.destroy(), B2 = false;
    };
  }, g2), a2;
};
function gv() {
  const [, u2] = (0, import_react291.useState)(0);
  return () => u2((g2) => g2 + 1);
}
var Cv = (u2) => {
  const g2 = gv();
  (0, import_react291.useEffect)(() => {
    const a2 = () => {
      requestAnimationFrame(() => {
        requestAnimationFrame(() => {
          g2();
        });
      });
    };
    return u2.on("transaction", a2), () => {
      u2.off("transaction", a2);
    };
  }, [u2]);
};
export {
  D0 as BlockColorsButton,
  wv as BlockNoteView,
  q0 as BlockTypeDropdown,
  J0 as ColorStyleButton,
  tv as CreateLinkButton,
  z0 as DragHandleMenu,
  Vl as DragHandleMenuItem,
  rv as FormattingToolbar,
  X0 as NestBlockButton,
  sv as ReactSlashMenuItem,
  F0 as RemoveBlockButton,
  Vu as TextAlignButton,
  xi as ToggledStyleButton,
  Zl as Toolbar,
  Pe2 as ToolbarButton,
  G0 as ToolbarDropdown,
  Q0 as UnnestBlockButton,
  W0 as createReactBlockSideMenuFactory,
  iv as createReactFormattingToolbarFactory,
  ov as createReactHyperlinkToolbarFactory,
  cv as createReactSlashMenuFactory,
  dv as defaultReactSlashMenuItems,
  bv as useBlockNote,
  Cv as useEditorForceUpdate
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

is-buffer/index.js:
  (*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.1.2
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)

@blocknote/react/dist/blocknote-react.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@blocknote/react/dist/blocknote-react.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)
*/
//# sourceMappingURL=@blocknote_react.js.map
