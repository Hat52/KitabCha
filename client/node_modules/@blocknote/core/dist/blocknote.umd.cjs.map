{"version":3,"file":"blocknote.umd.cjs","sources":["../src/extensions/Blocks/api/blockTypes.ts","../src/extensions/Blocks/helpers/getBlockInfoFromPos.ts","../src/extensions/UniqueID/UniqueID.ts","../src/shared/utils.ts","../src/api/nodeConversions/nodeConversions.ts","../src/api/util/nodeUtil.ts","../src/api/blockManipulation/blockManipulation.ts","../src/api/formatConversions/removeUnderlinesRehypePlugin.ts","../src/api/formatConversions/simplifyBlocksRehypePlugin.ts","../src/api/formatConversions/formatConversions.ts","../src/extensions/BackgroundColor/BackgroundColorExtension.ts","../src/extensions/BackgroundColor/BackgroundColorMark.ts","../src/extensions/Blocks/PreviousBlockTypePlugin.ts","../src/extensions/Blocks/nodes/BlockAttributes.ts","../src/extensions/Blocks/nodes/BlockContainer.ts","../src/extensions/Blocks/nodes/BlockGroup.ts","../src/extensions/Blocks/nodes/BlockContent/ParagraphBlockContent/ParagraphBlockContent.ts","../src/extensions/Blocks/nodes/BlockContent/HeadingBlockContent/HeadingBlockContent.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/ListItemKeyboardShortcuts.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/BulletListItemBlockContent/BulletListItemBlockContent.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListIndexingPlugin.ts","../src/extensions/Blocks/nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListItemBlockContent.ts","../src/extensions/Blocks/index.ts","../src/extensions/Blocks/helpers/findBlock.ts","../src/shared/plugins/suggestion/SuggestionPlugin.ts","../src/extensions/SlashMenu/SlashMenuExtension.ts","../src/extensions/DraggableBlocks/MultipleNodeSelection.ts","../src/extensions/DraggableBlocks/DraggableBlocksPlugin.ts","../src/extensions/DraggableBlocks/DraggableBlocksExtension.ts","../src/extensions/FormattingToolbar/FormattingToolbarPlugin.ts","../src/extensions/FormattingToolbar/FormattingToolbarExtension.ts","../src/extensions/HyperlinkToolbar/HyperlinkToolbarPlugin.ts","../src/extensions/HyperlinkToolbar/HyperlinkMark.ts","../src/extensions/Placeholder/PlaceholderExtension.ts","../src/shared/plugins/suggestion/SuggestionItem.ts","../src/extensions/SlashMenu/BaseSlashMenuItem.ts","../src/extensions/SlashMenu/defaultSlashMenuItems.tsx","../src/extensions/TextAlignment/TextAlignmentExtension.ts","../src/extensions/TextColor/TextColorExtension.ts","../src/extensions/TextColor/TextColorMark.ts","../src/extensions/TrailingNode/TrailingNodeExtension.ts","../src/BlockNoteExtensions.ts","../src/BlockNoteEditor.ts"],"sourcesContent":["/** Define the main block types **/\n\nimport { InlineContent, PartialInlineContent } from \"./inlineContentTypes\";\n\nexport type BlockTemplate<\n  // Type of the block.\n  // Examples might include: \"paragraph\", \"heading\", or \"bulletListItem\".\n  Type extends string,\n  // Changeable props which affect the block's behaviour or appearance.\n  // An example might be: { textAlignment: \"left\" | \"right\" | \"center\" } for a paragraph block.\n  Props extends Record<string, string>\n> = {\n  id: string;\n  type: Type;\n  props: Props;\n  content: InlineContent[];\n  children: Block[];\n};\n\nexport type DefaultBlockProps = {\n  backgroundColor: string;\n  textColor: string;\n  textAlignment: \"left\" | \"center\" | \"right\" | \"justify\";\n};\n\nexport type NumberedListItemBlock = BlockTemplate<\n  \"numberedListItem\",\n  DefaultBlockProps\n>;\n\nexport type BulletListItemBlock = BlockTemplate<\n  \"bulletListItem\",\n  DefaultBlockProps\n>;\n\nexport type HeadingBlock = BlockTemplate<\n  \"heading\",\n  DefaultBlockProps & {\n    level: \"1\" | \"2\" | \"3\";\n  }\n>;\n\nexport type ParagraphBlock = BlockTemplate<\"paragraph\", DefaultBlockProps>;\n\nexport type Block =\n  | ParagraphBlock\n  | HeadingBlock\n  | BulletListItemBlock\n  | NumberedListItemBlock;\n\nexport type BlockIdentifier = string | Block;\n\n/** Define \"Partial Blocks\", these are for updating or creating blocks */\nexport type PartialBlockTemplate<B extends Block> = B extends Block\n  ? Partial<Omit<B, \"props\" | \"children\" | \"content\" | \"type\">> & {\n      type?: B[\"type\"];\n      props?: Partial<B[\"props\"]>;\n      content?: string | PartialInlineContent[];\n      children?: PartialBlock[];\n    }\n  : never;\n\nexport type PartialBlock = PartialBlockTemplate<Block>;\n\nexport type BlockPropsTemplate<Props> = Props extends Block[\"props\"]\n  ? keyof Props\n  : never;\n\n/**\n * Expose blockProps. This is currently not very nice, but it's expected this\n * will change anyway once we allow for custom blocks\n */\n\nexport const globalProps: Array<keyof DefaultBlockProps> = [\n  \"backgroundColor\",\n  \"textColor\",\n  \"textAlignment\",\n];\n\nexport const blockProps: Record<Block[\"type\"], Set<string>> = {\n  paragraph: new Set<keyof ParagraphBlock[\"props\"]>([...globalProps]),\n  heading: new Set<keyof HeadingBlock[\"props\"]>([\n    ...globalProps,\n    \"level\" as const,\n  ]),\n  numberedListItem: new Set<keyof NumberedListItemBlock[\"props\"]>([\n    ...globalProps,\n  ]),\n  bulletListItem: new Set<keyof BulletListItemBlock[\"props\"]>([...globalProps]),\n};\n","import { Node, NodeType } from \"prosemirror-model\";\n\nexport type BlockInfo = {\n  id: string;\n  node: Node;\n  contentNode: Node;\n  contentType: NodeType;\n  numChildBlocks: number;\n  startPos: number;\n  endPos: number;\n  depth: number;\n};\n\n/**\n * Retrieves information regarding the most nested block node in a ProseMirror doc, that a given position lies in.\n * @param doc The ProseMirror doc.\n * @param posInBlock A position somewhere within a block node.\n * @returns A BlockInfo object for the block the given position is in, or undefined if the position is not in a block\n * for the given doc.\n */\nexport function getBlockInfoFromPos(\n  doc: Node,\n  posInBlock: number\n): BlockInfo | undefined {\n  if (posInBlock < 0 || posInBlock > doc.nodeSize) {\n    return undefined;\n  }\n\n  const $pos = doc.resolve(posInBlock);\n\n  const maxDepth = $pos.depth;\n  let node = $pos.node(maxDepth);\n  let depth = maxDepth;\n\n  while (true) {\n    if (depth < 0) {\n      return undefined;\n    }\n\n    if (node.type.name === \"blockContainer\") {\n      break;\n    }\n\n    depth -= 1;\n    node = $pos.node(depth);\n  }\n\n  const id = node.attrs[\"id\"];\n  const contentNode = node.firstChild!;\n  const contentType = contentNode.type;\n  const numChildBlocks = node.childCount === 2 ? node.lastChild!.childCount : 0;\n\n  const startPos = $pos.start(depth);\n  const endPos = $pos.end(depth);\n\n  return {\n    id,\n    node,\n    contentNode,\n    contentType,\n    numChildBlocks,\n    startPos,\n    endPos,\n    depth,\n  };\n}\n","import {\n  combineTransactionSteps,\n  Extension,\n  findChildren,\n  findChildrenInRange,\n  getChangedRanges,\n} from \"@tiptap/core\";\nimport { Fragment, Slice } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { v4 } from \"uuid\";\n\n/**\n * Code from Tiptap UniqueID extension (https://tiptap.dev/api/extensions/unique-id)\n * This extension is licensed under MIT (even though it's part of Tiptap pro).\n *\n * If you're a user of BlockNote, we still recommend to support their awesome work and become a sponsor!\n * https://tiptap.dev/pro\n */\n\n/**\n * Removes duplicated values within an array.\n * Supports numbers, strings and objects.\n */\nfunction removeDuplicates(array: any, by = JSON.stringify) {\n  const seen: any = {};\n  return array.filter((item: any) => {\n    const key = by(item);\n    return Object.prototype.hasOwnProperty.call(seen, key)\n      ? false\n      : (seen[key] = true);\n  });\n}\n\n/**\n * Returns a list of duplicated items within an array.\n */\nfunction findDuplicates(items: any) {\n  const filtered = items.filter(\n    (el: any, index: number) => items.indexOf(el) !== index\n  );\n  const duplicates = removeDuplicates(filtered);\n  return duplicates;\n}\n\nconst UniqueID = Extension.create({\n  name: \"uniqueID\",\n  // we’ll set a very high priority to make sure this runs first\n  // and is compatible with `appendTransaction` hooks of other extensions\n  priority: 10000,\n  addOptions() {\n    return {\n      attributeName: \"id\",\n      types: [],\n      generateID: () => {\n        // Use mock ID if tests are running.\n        if ((window as any).__TEST_OPTIONS) {\n          if ((window as any).__TEST_OPTIONS.mockID === undefined) {\n            (window as any).__TEST_OPTIONS.mockID = 0;\n          } else {\n            (window as any).__TEST_OPTIONS.mockID++;\n          }\n\n          return (window as any).__TEST_OPTIONS.mockID.toString() as string;\n        }\n\n        return v4();\n      },\n      filterTransaction: null,\n    };\n  },\n  addGlobalAttributes() {\n    return [\n      {\n        types: this.options.types,\n        attributes: {\n          [this.options.attributeName]: {\n            default: null,\n            parseHTML: (element) =>\n              element.getAttribute(`data-${this.options.attributeName}`),\n            renderHTML: (attributes) => ({\n              [`data-${this.options.attributeName}`]:\n                attributes[this.options.attributeName],\n            }),\n          },\n        },\n      },\n    ];\n  },\n  // check initial content for missing ids\n  onCreate() {\n    // Don’t do this when the collaboration extension is active\n    // because this may update the content, so Y.js tries to merge these changes.\n    // This leads to empty block nodes.\n    // See: https://github.com/ueberdosis/tiptap/issues/2400\n    if (\n      this.editor.extensionManager.extensions.find(\n        (extension) => extension.name === \"collaboration\"\n      )\n    ) {\n      return;\n    }\n    const { view, state } = this.editor;\n    const { tr, doc } = state;\n    const { types, attributeName, generateID } = this.options;\n    const nodesWithoutId = findChildren(doc, (node) => {\n      return (\n        types.includes(node.type.name) && node.attrs[attributeName] === null\n      );\n    });\n    nodesWithoutId.forEach(({ node, pos }) => {\n      tr.setNodeMarkup(pos, undefined, {\n        ...node.attrs,\n        [attributeName]: generateID(),\n      });\n    });\n    tr.setMeta(\"addToHistory\", false);\n    view.dispatch(tr);\n  },\n  addProseMirrorPlugins() {\n    let dragSourceElement: any = null;\n    let transformPasted = false;\n    return [\n      new Plugin({\n        key: new PluginKey(\"uniqueID\"),\n        appendTransaction: (transactions, oldState, newState) => {\n          // console.log(\"appendTransaction\");\n          const docChanges =\n            transactions.some((transaction) => transaction.docChanged) &&\n            !oldState.doc.eq(newState.doc);\n          const filterTransactions =\n            this.options.filterTransaction &&\n            transactions.some((tr) => {\n              var _a, _b;\n              return !((_b = (_a = this.options).filterTransaction) === null ||\n              _b === void 0\n                ? void 0\n                : _b.call(_a, tr));\n            });\n          if (!docChanges || filterTransactions) {\n            return;\n          }\n          const { tr } = newState;\n          const { types, attributeName, generateID } = this.options;\n          const transform = combineTransactionSteps(\n            oldState.doc,\n            transactions as any\n          );\n          const { mapping } = transform;\n          // get changed ranges based on the old state\n          const changes = getChangedRanges(transform);\n\n          changes.forEach(({ newRange }) => {\n            const newNodes = findChildrenInRange(\n              newState.doc,\n              newRange,\n              (node) => {\n                return types.includes(node.type.name);\n              }\n            );\n            const newIds = newNodes\n              .map(({ node }) => node.attrs[attributeName])\n              .filter((id) => id !== null);\n            const duplicatedNewIds = findDuplicates(newIds);\n            newNodes.forEach(({ node, pos }) => {\n              var _a;\n              // instead of checking `node.attrs[attributeName]` directly\n              // we look at the current state of the node within `tr.doc`.\n              // this helps to prevent adding new ids to the same node\n              // if the node changed multiple times within one transaction\n              const id =\n                (_a = tr.doc.nodeAt(pos)) === null || _a === void 0\n                  ? void 0\n                  : _a.attrs[attributeName];\n              if (id === null) {\n                tr.setNodeMarkup(pos, undefined, {\n                  ...node.attrs,\n                  [attributeName]: generateID(),\n                });\n                return;\n              }\n              // check if the node doesn’t exist in the old state\n              const { deleted } = mapping.invert().mapResult(pos);\n              const newNode = deleted && duplicatedNewIds.includes(id);\n              if (newNode) {\n                tr.setNodeMarkup(pos, undefined, {\n                  ...node.attrs,\n                  [attributeName]: generateID(),\n                });\n              }\n            });\n          });\n          if (!tr.steps.length) {\n            return;\n          }\n          return tr;\n        },\n        // we register a global drag handler to track the current drag source element\n        view(view) {\n          const handleDragstart = (event: any) => {\n            var _a;\n            dragSourceElement = (\n              (_a = view.dom.parentElement) === null || _a === void 0\n                ? void 0\n                : _a.contains(event.target)\n            )\n              ? view.dom.parentElement\n              : null;\n          };\n          window.addEventListener(\"dragstart\", handleDragstart);\n          return {\n            destroy() {\n              window.removeEventListener(\"dragstart\", handleDragstart);\n            },\n          };\n        },\n        props: {\n          // `handleDOMEvents` is called before `transformPasted`\n          // so we can do some checks before\n          handleDOMEvents: {\n            // only create new ids for dropped content while holding `alt`\n            // or content is dragged from another editor\n            drop: (view, event: any) => {\n              var _a;\n              if (\n                dragSourceElement !== view.dom.parentElement ||\n                ((_a = event.dataTransfer) === null || _a === void 0\n                  ? void 0\n                  : _a.effectAllowed) === \"copy\"\n              ) {\n                dragSourceElement = null;\n                transformPasted = true;\n              }\n              return false;\n            },\n            // always create new ids on pasted content\n            paste: () => {\n              transformPasted = true;\n              return false;\n            },\n          },\n          // we’ll remove ids for every pasted node\n          // so we can create a new one within `appendTransaction`\n          transformPasted: (slice) => {\n            if (!transformPasted) {\n              return slice;\n            }\n            const { types, attributeName } = this.options;\n            const removeId = (fragment: any) => {\n              const list: any[] = [];\n              fragment.forEach((node: any) => {\n                // don’t touch text nodes\n                if (node.isText) {\n                  list.push(node);\n                  return;\n                }\n                // check for any other child nodes\n                if (!types.includes(node.type.name)) {\n                  list.push(node.copy(removeId(node.content)));\n                  return;\n                }\n                // remove id\n                const nodeWithoutId = node.type.create(\n                  {\n                    ...node.attrs,\n                    [attributeName]: null,\n                  },\n                  removeId(node.content),\n                  node.marks\n                );\n                list.push(nodeWithoutId);\n              });\n              return Fragment.from(list);\n            };\n            // reset check\n            transformPasted = false;\n            return new Slice(\n              removeId(slice.content),\n              slice.openStart,\n              slice.openEnd\n            );\n          },\n        },\n      }),\n    ];\n  },\n});\n\nexport { UniqueID, UniqueID as default };\n//# sourceMappingURL=tiptap-extension-unique-id.esm.js.map\n","export const isAppleOS = () =>\n  /Mac/.test(navigator.platform) ||\n  (/AppleWebKit/.test(navigator.userAgent) &&\n    /Mobile\\/\\w+/.test(navigator.userAgent));\n\nexport function formatKeyboardShortcut(shortcut: string) {\n  if (isAppleOS()) {\n    return shortcut.replace(\"Mod\", \"⌘\");\n  } else {\n    return shortcut.replace(\"Mod\", \"Ctrl\");\n  }\n}\n\nexport class UnreachableCaseError extends Error {\n  constructor(val: never) {\n    super(`Unreachable case: ${val}`);\n  }\n}\n","import { Mark } from \"@tiptap/pm/model\";\nimport { Node, Schema } from \"prosemirror-model\";\nimport {\n  Block,\n  blockProps,\n  PartialBlock,\n} from \"../../extensions/Blocks/api/blockTypes\";\nimport {\n  ColorStyle,\n  InlineContent,\n  Link,\n  PartialInlineContent,\n  PartialLink,\n  StyledText,\n  Styles,\n  ToggledStyle,\n} from \"../../extensions/Blocks/api/inlineContentTypes\";\nimport { getBlockInfoFromPos } from \"../../extensions/Blocks/helpers/getBlockInfoFromPos\";\nimport UniqueID from \"../../extensions/UniqueID/UniqueID\";\nimport { UnreachableCaseError } from \"../../shared/utils\";\n\nconst toggleStyles = new Set<ToggledStyle>([\n  \"bold\",\n  \"italic\",\n  \"underline\",\n  \"strike\",\n  \"code\",\n]);\nconst colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n/**\n * Convert a StyledText inline element to a\n * prosemirror text node with the appropriate marks\n */\nfunction styledTextToNode(styledText: StyledText, schema: Schema): Node {\n  const marks: Mark[] = [];\n\n  for (const [style, value] of Object.entries(styledText.styles)) {\n    if (toggleStyles.has(style as ToggledStyle)) {\n      marks.push(schema.mark(style));\n    } else if (colorStyles.has(style as ColorStyle)) {\n      marks.push(schema.mark(style, { color: value }));\n    }\n  }\n\n  return schema.text(styledText.text, marks);\n}\n\n/**\n * Converts a Link inline content element to\n * prosemirror text nodes with the appropriate marks\n */\nfunction linkToNodes(link: PartialLink, schema: Schema): Node[] {\n  const linkMark = schema.marks.link.create({\n    href: link.href,\n  });\n\n  return styledTextArrayToNodes(link.content, schema).map((node) => {\n    return node.mark([...node.marks, linkMark]);\n  });\n}\n\n/**\n * Converts an array of StyledText inline content elements to\n * prosemirror text nodes with the appropriate marks\n */\nfunction styledTextArrayToNodes(\n  content: string | StyledText[],\n  schema: Schema\n): Node[] {\n  let nodes: Node[] = [];\n\n  if (typeof content === \"string\") {\n    nodes.push(schema.text(content));\n    return nodes;\n  }\n\n  for (const styledText of content) {\n    nodes.push(styledTextToNode(styledText, schema));\n  }\n  return nodes;\n}\n\n/**\n * converts an array of inline content elements to prosemirror nodes\n */\nexport function inlineContentToNodes(\n  blockContent: PartialInlineContent[],\n  schema: Schema\n): Node[] {\n  let nodes: Node[] = [];\n\n  for (const content of blockContent) {\n    if (content.type === \"link\") {\n      nodes.push(...linkToNodes(content, schema));\n    } else if (content.type === \"text\") {\n      nodes.push(...styledTextArrayToNodes([content], schema));\n    } else {\n      throw new UnreachableCaseError(content);\n    }\n  }\n  return nodes;\n}\n\n/**\n * Converts a BlockNote block to a TipTap node.\n */\nexport function blockToNode(block: PartialBlock, schema: Schema) {\n  let id = block.id;\n\n  if (id === undefined) {\n    id = UniqueID.options.generateID();\n  }\n\n  let type = block.type;\n\n  if (type === undefined) {\n    type = \"paragraph\";\n  }\n\n  let contentNode: Node;\n\n  if (!block.content) {\n    contentNode = schema.nodes[type].create(block.props);\n  } else if (typeof block.content === \"string\") {\n    contentNode = schema.nodes[type].create(\n      block.props,\n      schema.text(block.content)\n    );\n  } else {\n    const nodes = inlineContentToNodes(block.content, schema);\n    contentNode = schema.nodes[type].create(block.props, nodes);\n  }\n\n  const children: Node[] = [];\n\n  if (block.children) {\n    for (const child of block.children) {\n      children.push(blockToNode(child, schema));\n    }\n  }\n\n  const groupNode = schema.nodes[\"blockGroup\"].create({}, children);\n\n  return schema.nodes[\"blockContainer\"].create(\n    {\n      id: id,\n      ...block.props,\n    },\n    children.length > 0 ? [contentNode, groupNode] : contentNode\n  );\n}\n\n/**\n * Converts an internal (prosemirror) content node to a BlockNote InlineContent array.\n */\nfunction contentNodeToInlineContent(contentNode: Node) {\n  const content: InlineContent[] = [];\n\n  let currentLink: Link | undefined = undefined;\n\n  // Most of the logic below is for handling links because in ProseMirror links are marks\n  // while in BlockNote links are a type of inline content\n  contentNode.content.forEach((node) => {\n    const styles: Styles = {};\n\n    let linkMark: Mark | undefined;\n    for (const mark of node.marks) {\n      if (mark.type.name === \"link\") {\n        linkMark = mark;\n      } else if (toggleStyles.has(mark.type.name as ToggledStyle)) {\n        styles[mark.type.name as ToggledStyle] = true;\n      } else if (colorStyles.has(mark.type.name as ColorStyle)) {\n        styles[mark.type.name as ColorStyle] = mark.attrs.color;\n      } else {\n        throw Error(\"Mark is of an unrecognized type: \" + mark.type.name);\n      }\n    }\n\n    if (linkMark && currentLink && linkMark.attrs.href === currentLink.href) {\n      // if the node is a link that matches the current link, add it to the current link\n      currentLink.content.push({\n        type: \"text\",\n        text: node.textContent,\n        styles,\n      });\n    } else if (linkMark) {\n      // if the node is a link that doesn't match the current link, create a new link\n      currentLink = {\n        type: \"link\",\n        href: linkMark.attrs.href,\n        content: [\n          {\n            type: \"text\",\n            text: node.textContent,\n            styles,\n          },\n        ],\n      };\n      content.push(currentLink);\n    } else {\n      // if the node is not a link, add it to the content\n      content.push({\n        type: \"text\",\n        text: node.textContent,\n        styles,\n      });\n      currentLink = undefined;\n    }\n  });\n  return content;\n}\n\n/**\n * Convert a TipTap node to a BlockNote block.\n */\nexport function nodeToBlock(\n  node: Node,\n  blockCache?: WeakMap<Node, Block>\n): Block {\n  if (node.type.name !== \"blockContainer\") {\n    throw Error(\n      \"Node must be of type blockContainer, but is of type\" +\n        node.type.name +\n        \".\"\n    );\n  }\n\n  const cachedBlock = blockCache?.get(node);\n\n  if (cachedBlock) {\n    return cachedBlock;\n  }\n\n  const blockInfo = getBlockInfoFromPos(node, 0)!;\n\n  let id = blockInfo.id;\n\n  // Only used for blocks converted from other formats.\n  if (id === null) {\n    id = UniqueID.options.generateID();\n  }\n\n  const props: any = {};\n  for (const [attr, value] of Object.entries({\n    ...blockInfo.node.attrs,\n    ...blockInfo.contentNode.attrs,\n  })) {\n    if (!(blockInfo.contentType.name in blockProps)) {\n      throw Error(\n        \"Block is of an unrecognized type: \" + blockInfo.contentType.name\n      );\n    }\n\n    const validAttrs = blockProps[blockInfo.contentType.name as Block[\"type\"]];\n\n    if (validAttrs.has(attr)) {\n      props[attr] = value;\n    }\n  }\n\n  const content = contentNodeToInlineContent(blockInfo.contentNode);\n\n  const children: Block[] = [];\n  for (let i = 0; i < blockInfo.numChildBlocks; i++) {\n    children.push(nodeToBlock(blockInfo.node.lastChild!.child(i)));\n  }\n\n  const block: Block = {\n    id,\n    type: blockInfo.contentType.name as Block[\"type\"],\n    props,\n    content,\n    children,\n  };\n\n  blockCache?.set(node, block);\n\n  return block;\n}\n","import { Node } from \"prosemirror-model\";\n\n/**\n * Get a TipTap node by id\n */\nexport function getNodeById(\n  id: string,\n  doc: Node\n): { node: Node; posBeforeNode: number } {\n  let targetNode: Node | undefined = undefined;\n  let posBeforeNode: number | undefined = undefined;\n\n  doc.firstChild!.descendants((node, pos) => {\n    // Skips traversing nodes after node with target ID has been found.\n    if (targetNode) {\n      return false;\n    }\n\n    // Keeps traversing nodes if block with target ID has not been found.\n    if (node.type.name !== \"blockContainer\" || node.attrs.id !== id) {\n      return true;\n    }\n\n    targetNode = node;\n    posBeforeNode = pos + 1;\n\n    return false;\n  });\n\n  if (targetNode === undefined || posBeforeNode === undefined) {\n    throw Error(\"Could not find block in the editor with matching ID.\");\n  }\n\n  return {\n    node: targetNode,\n    posBeforeNode: posBeforeNode,\n  };\n}\n","import { Editor } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\nimport {\n  BlockIdentifier,\n  PartialBlock,\n} from \"../../extensions/Blocks/api/blockTypes\";\nimport { blockToNode } from \"../nodeConversions/nodeConversions\";\nimport { getNodeById } from \"../util/nodeUtil\";\n\nexport function insertBlocks(\n  blocksToInsert: PartialBlock[],\n  referenceBlock: BlockIdentifier,\n  placement: \"before\" | \"after\" | \"nested\" = \"before\",\n  editor: Editor\n): void {\n  const id =\n    typeof referenceBlock === \"string\" ? referenceBlock : referenceBlock.id;\n\n  const nodesToInsert: Node[] = [];\n  for (const blockSpec of blocksToInsert) {\n    nodesToInsert.push(blockToNode(blockSpec, editor.schema));\n  }\n\n  let insertionPos = -1;\n\n  const { node, posBeforeNode } = getNodeById(id, editor.state.doc);\n\n  if (placement === \"before\") {\n    insertionPos = posBeforeNode;\n  }\n\n  if (placement === \"after\") {\n    insertionPos = posBeforeNode + node.nodeSize;\n  }\n\n  if (placement === \"nested\") {\n    // Case if block doesn't already have children.\n    if (node.childCount < 2) {\n      insertionPos = posBeforeNode + node.firstChild!.nodeSize + 1;\n\n      const blockGroupNode = editor.state.schema.nodes[\"blockGroup\"].create(\n        {},\n        nodesToInsert\n      );\n\n      editor.view.dispatch(\n        editor.state.tr.insert(insertionPos, blockGroupNode)\n      );\n\n      return;\n    }\n\n    insertionPos = posBeforeNode + node.firstChild!.nodeSize + 2;\n  }\n\n  editor.view.dispatch(editor.state.tr.insert(insertionPos, nodesToInsert));\n}\n\nexport function updateBlock(\n  blockToUpdate: BlockIdentifier,\n  update: PartialBlock,\n  editor: Editor\n) {\n  const id =\n    typeof blockToUpdate === \"string\" ? blockToUpdate : blockToUpdate.id;\n  const { posBeforeNode } = getNodeById(id, editor.state.doc);\n\n  editor.commands.BNUpdateBlock(posBeforeNode + 1, update);\n}\n\nexport function removeBlocks(\n  blocksToRemove: BlockIdentifier[],\n  editor: Editor\n) {\n  const idsOfBlocksToRemove = new Set<string>(\n    blocksToRemove.map((block) =>\n      typeof block === \"string\" ? block : block.id\n    )\n  );\n\n  let removedSize = 0;\n\n  editor.state.doc.descendants((node, pos) => {\n    // Skips traversing nodes after all target blocks have been removed.\n    if (idsOfBlocksToRemove.size === 0) {\n      return false;\n    }\n\n    // Keeps traversing nodes if block with target ID has not been found.\n    if (\n      node.type.name !== \"blockContainer\" ||\n      !idsOfBlocksToRemove.has(node.attrs.id)\n    ) {\n      return true;\n    }\n\n    idsOfBlocksToRemove.delete(node.attrs.id);\n    const oldDocSize = editor.state.doc.nodeSize;\n\n    editor.commands.BNDeleteBlock(pos - removedSize + 1);\n\n    const newDocSize = editor.state.doc.nodeSize;\n    removedSize += oldDocSize - newDocSize;\n\n    return false;\n  });\n\n  if (idsOfBlocksToRemove.size > 0) {\n    let notFoundIds = [...idsOfBlocksToRemove].join(\"\\n\");\n\n    throw Error(\n      \"Blocks with the following IDs could not be found in the editor: \" +\n        notFoundIds\n    );\n  }\n}\n\nexport function replaceBlocks(\n  blocksToRemove: BlockIdentifier[],\n  blocksToInsert: PartialBlock[],\n  editor: Editor\n) {\n  insertBlocks(blocksToInsert, blocksToRemove[0], \"before\", editor);\n  removeBlocks(blocksToRemove, editor);\n}\n","import { Element as HASTElement, Parent as HASTParent } from \"hast\";\n\n/**\n * Rehype plugin which removes <u> tags. Used to remove underlines before converting HTML to markdown, as Markdown\n * doesn't support underlines.\n */\nexport function removeUnderlines() {\n  const removeUnderlinesHelper = (tree: HASTParent) => {\n    let numChildElements = tree.children.length;\n\n    for (let i = 0; i < numChildElements; i++) {\n      const node = tree.children[i];\n\n      if (node.type === \"element\") {\n        // Recursively removes underlines from child elements.\n        removeUnderlinesHelper(node);\n\n        if ((node as HASTElement).tagName === \"u\") {\n          // Lifts child nodes outside underline element, deletes the underline element, and updates current index &\n          // the number of child elements.\n          if (node.children.length > 0) {\n            tree.children.splice(i, 1, ...node.children);\n\n            const numElementsAdded = node.children.length - 1;\n            numChildElements += numElementsAdded;\n            i += numElementsAdded;\n          } else {\n            tree.children.splice(i, 1);\n\n            numChildElements--;\n            i--;\n          }\n        }\n      }\n    }\n  };\n\n  return removeUnderlinesHelper;\n}\n","import { Element as HASTElement, Parent as HASTParent } from \"hast\";\nimport { fromDom } from \"hast-util-from-dom\";\n\ntype SimplifyBlocksOptions = {\n  orderedListItemBlockTypes: Set<string>;\n  unorderedListItemBlockTypes: Set<string>;\n};\n\n/**\n * Rehype plugin which converts the HTML output string rendered by BlockNote into a simplified structure which better\n * follows HTML standards. It does several things:\n * - Removes all block related div elements, leaving only the actual content inside the block.\n * - Lifts nested blocks to a higher level for all block types that don't represent list items.\n * - Wraps blocks which represent list items in corresponding ul/ol HTML elements and restructures them to comply\n * with HTML list structure.\n * @param options Options for specifying which block types represent ordered and unordered list items.\n */\nexport function simplifyBlocks(options: SimplifyBlocksOptions) {\n  const listItemBlockTypes = new Set<string>([\n    ...options.orderedListItemBlockTypes,\n    ...options.unorderedListItemBlockTypes,\n  ]);\n\n  const simplifyBlocksHelper = (tree: HASTParent) => {\n    let numChildElements = tree.children.length;\n    let activeList: HASTElement | undefined;\n\n    for (let i = 0; i < numChildElements; i++) {\n      const blockOuter = tree.children[i] as HASTElement;\n      const blockContainer = blockOuter.children[0] as HASTElement;\n      const blockContent = blockContainer.children[0] as HASTElement;\n      const blockGroup =\n        blockContainer.children.length === 2\n          ? (blockContainer.children[1] as HASTElement)\n          : null;\n\n      const isListItemBlock = listItemBlockTypes.has(\n        blockContent.properties![\"dataContentType\"] as string\n      );\n\n      const listItemBlockType = isListItemBlock\n        ? options.orderedListItemBlockTypes.has(\n            blockContent.properties![\"dataContentType\"] as string\n          )\n          ? \"ol\"\n          : \"ul\"\n        : null;\n\n      // Plugin runs recursively to process nested blocks.\n      if (blockGroup !== null) {\n        simplifyBlocksHelper(blockGroup);\n      }\n\n      // Checks that there is an active list, but the block can't be added to it as it's of a different type.\n      if (activeList && activeList.tagName !== listItemBlockType) {\n        // Blocks that were copied into the list are removed and the list is inserted in their place.\n        tree.children.splice(\n          i - activeList.children.length,\n          activeList.children.length,\n          activeList\n        );\n\n        // Updates the current index and number of child elements.\n        const numElementsRemoved = activeList.children.length - 1;\n        i -= numElementsRemoved;\n        numChildElements -= numElementsRemoved;\n\n        activeList = undefined;\n      }\n\n      // Checks if the block represents a list item.\n      if (isListItemBlock) {\n        // Checks if a list isn't already active. We don't have to check if the block and the list are of the same\n        // type as this was already done earlier.\n        if (!activeList) {\n          // Creates a new list element to represent an active list.\n          activeList = fromDom(\n            document.createElement(listItemBlockType!)\n          ) as HASTElement;\n        }\n\n        // Creates a new list item element to represent the block.\n        const listItemElement = fromDom(\n          document.createElement(\"li\")\n        ) as HASTElement;\n\n        // Adds only the content inside the block to the active list.\n        listItemElement.children.push(blockContent.children[0]);\n        // Nested blocks have already been processed in the recursive function call, so the resulting elements are\n        // also added to the active list.\n        if (blockGroup !== null) {\n          listItemElement.children.push(...blockGroup.children);\n        }\n\n        // Adds the list item representing the block to the active list.\n        activeList.children.push(listItemElement);\n      } else if (blockGroup !== null) {\n        // Lifts all children out of the current block, as only list items should allow nesting.\n        tree.children.splice(i + 1, 0, ...blockGroup.children);\n        // Replaces the block with only the content inside it.\n        tree.children[i] = blockContent.children[0];\n\n        // Updates the current index and number of child elements.\n        const numElementsAdded = blockGroup.children.length;\n        i += numElementsAdded;\n        numChildElements += numElementsAdded;\n      } else {\n        // Replaces the block with only the content inside it.\n        tree.children[i] = blockContent.children[0];\n      }\n    }\n\n    // Since the active list is only inserted after encountering a block which can't be added to it, there are cases\n    // where it remains un-inserted after processing all blocks, which are handled here.\n    if (activeList) {\n      tree.children.splice(\n        numChildElements - activeList.children.length,\n        activeList.children.length,\n        activeList\n      );\n    }\n  };\n\n  return simplifyBlocksHelper;\n}\n","import { DOMParser, DOMSerializer, Schema } from \"prosemirror-model\";\nimport rehypeParse from \"rehype-parse\";\nimport rehypeRemark from \"rehype-remark\";\nimport rehypeStringify from \"rehype-stringify\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkParse from \"remark-parse\";\nimport remarkRehype from \"remark-rehype\";\nimport remarkStringify from \"remark-stringify\";\nimport { unified } from \"unified\";\nimport { Block } from \"../../extensions/Blocks/api/blockTypes\";\nimport { blockToNode, nodeToBlock } from \"../nodeConversions/nodeConversions\";\nimport { removeUnderlines } from \"./removeUnderlinesRehypePlugin\";\nimport { simplifyBlocks } from \"./simplifyBlocksRehypePlugin\";\n\nexport async function blocksToHTML(\n  blocks: Block[],\n  schema: Schema\n): Promise<string> {\n  const htmlParentElement = document.createElement(\"div\");\n  const serializer = DOMSerializer.fromSchema(schema);\n\n  for (const block of blocks) {\n    const node = blockToNode(block, schema);\n    const htmlNode = serializer.serializeNode(node);\n    htmlParentElement.appendChild(htmlNode);\n  }\n\n  const htmlString = await unified()\n    .use(rehypeParse, { fragment: true })\n    .use(simplifyBlocks, {\n      orderedListItemBlockTypes: new Set<string>([\"numberedListItem\"]),\n      unorderedListItemBlockTypes: new Set<string>([\"bulletListItem\"]),\n    })\n    .use(rehypeStringify)\n    .process(htmlParentElement.innerHTML);\n\n  return htmlString.value as string;\n}\n\nexport async function HTMLToBlocks(\n  html: string,\n  schema: Schema\n): Promise<Block[]> {\n  const htmlNode = document.createElement(\"div\");\n  htmlNode.innerHTML = html.trim();\n\n  const parser = DOMParser.fromSchema(schema);\n  const parentNode = parser.parse(htmlNode);\n\n  const blocks: Block[] = [];\n\n  for (let i = 0; i < parentNode.firstChild!.childCount; i++) {\n    blocks.push(nodeToBlock(parentNode.firstChild!.child(i)));\n  }\n\n  return blocks;\n}\n\nexport async function blocksToMarkdown(\n  blocks: Block[],\n  schema: Schema\n): Promise<string> {\n  const markdownString = await unified()\n    .use(rehypeParse, { fragment: true })\n    .use(removeUnderlines)\n    .use(rehypeRemark)\n    .use(remarkGfm)\n    .use(remarkStringify)\n    .process(await blocksToHTML(blocks, schema));\n\n  return markdownString.value as string;\n}\n\nexport async function markdownToBlocks(\n  markdown: string,\n  schema: Schema\n): Promise<Block[]> {\n  const htmlString = await unified()\n    .use(remarkParse)\n    .use(remarkGfm)\n    .use(remarkRehype)\n    .use(rehypeStringify)\n    .process(markdown);\n\n  return HTMLToBlocks(htmlString.value as string, schema);\n}\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    blockBackgroundColor: {\n      setBlockBackgroundColor: (\n        posInBlock: number,\n        color: string\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const BackgroundColorExtension = Extension.create({\n  name: \"blockBackgroundColor\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          backgroundColor: {\n            default: \"default\",\n            parseHTML: (element) =>\n              element.hasAttribute(\"data-background-color\")\n                ? element.getAttribute(\"data-background-color\")\n                : \"default\",\n            renderHTML: (attributes) =>\n              attributes.backgroundColor !== \"default\" && {\n                \"data-background-color\": attributes.backgroundColor,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setBlockBackgroundColor:\n        (posInBlock, color) =>\n        ({ state, view }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          state.tr.setNodeAttribute(\n            blockInfo.startPos - 1,\n            \"backgroundColor\",\n            color\n          );\n\n          view.focus();\n\n          return true;\n        },\n    };\n  },\n});\n","import { Mark } from \"@tiptap/core\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    backgroundColor: {\n      setBackgroundColor: (color: string) => ReturnType;\n    };\n  }\n}\n\nexport const BackgroundColorMark = Mark.create({\n  name: \"backgroundColor\",\n\n  addAttributes() {\n    return {\n      color: {\n        default: undefined,\n        parseHTML: (element) => element.getAttribute(\"data-background-color\"),\n        renderHTML: (attributes) => ({\n          \"data-background-color\": attributes.color,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.hasAttribute(\"data-background-color\")) {\n            return { color: element.getAttribute(\"data-background-color\") };\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"span\", HTMLAttributes, 0];\n  },\n\n  addCommands() {\n    return {\n      setBackgroundColor:\n        (color) =>\n        ({ commands }) => {\n          if (color !== \"default\") {\n            return commands.setMark(this.name, { color: color });\n          }\n\n          return commands.unsetMark(this.name);\n        },\n    };\n  },\n});\n","import { findChildren } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\n\nconst PLUGIN_KEY = new PluginKey(`previous-blocks`);\n\nconst nodeAttributes: Record<string, string> = {\n  // Numbered List Items\n  index: \"index\",\n  // Headings\n  level: \"level\",\n  // All Blocks\n  type: \"type\",\n  depth: \"depth\",\n  \"depth-change\": \"depth-change\",\n};\n\n/**\n * This plugin tracks transformation of Block node attributes, so we can support CSS transitions.\n *\n * Problem it solves: ProseMirror recreates the DOM when transactions happen. So when a transaction changes a Node attribute,\n * it results in a completely new DOM element. This means CSS transitions don't work.\n *\n * Solution: When attributes change on a node, this plugin sets a data-* attribute with the \"previous\" value. This way we can still use CSS transitions. (See block.module.css)\n */\nexport const PreviousBlockTypePlugin = () => {\n  let timeout: any;\n  return new Plugin({\n    key: PLUGIN_KEY,\n    view(_editorView) {\n      return {\n        update: async (view, _prevState) => {\n          if (this.key?.getState(view.state).updatedBlocks.size > 0) {\n            // use setTimeout 0 to clear the decorations so that at least\n            // for one DOM-render the decorations have been applied\n            timeout = setTimeout(() => {\n              view.dispatch(\n                view.state.tr.setMeta(PLUGIN_KEY, { clearUpdate: true })\n              );\n            }, 0);\n          }\n        },\n        destroy: () => {\n          if (timeout) {\n            clearTimeout(timeout);\n          }\n        },\n      };\n    },\n    state: {\n      init() {\n        return {\n          // Block attributes, by block ID, from just before the previous transaction.\n          prevTransactionOldBlockAttrs: {} as any,\n          // Block attributes, by block ID, from just before the current transaction.\n          currentTransactionOldBlockAttrs: {} as any,\n          // Set of IDs of blocks whose attributes changed from the current transaction.\n          updatedBlocks: new Set<string>(),\n        };\n      },\n\n      apply(transaction, prev, oldState, newState) {\n        prev.currentTransactionOldBlockAttrs = {};\n        prev.updatedBlocks.clear();\n\n        if (!transaction.docChanged || oldState.doc.eq(newState.doc)) {\n          return prev;\n        }\n\n        // TODO: Instead of iterating through the entire document, only check nodes affected by the transactions. Will\n        //  also probably require checking nodes affected by the previous transaction too.\n        // We didn't get this to work yet:\n        // const transform = combineTransactionSteps(oldState.doc, [transaction]);\n        // // const { mapping } = transform;\n        // const changes = getChangedRanges(transform);\n        //\n        // changes.forEach(({ oldRange, newRange }) => {\n        // const oldNodes = findChildrenInRange(\n        //   oldState.doc,\n        //   oldRange,\n        //   (node) => node.attrs.id\n        // );\n        //\n        // const newNodes = findChildrenInRange(\n        //   newState.doc,\n        //   newRange,\n        //   (node) => node.attrs.id\n        // );\n\n        const currentTransactionOriginalOldBlockAttrs = {} as any;\n\n        const oldNodes = findChildren(oldState.doc, (node) => node.attrs.id);\n        const oldNodesById = new Map(\n          oldNodes.map((node) => [node.node.attrs.id, node])\n        );\n        const newNodes = findChildren(newState.doc, (node) => node.attrs.id);\n\n        // Traverses all block containers in the new editor state.\n        for (let node of newNodes) {\n          const oldNode = oldNodesById.get(node.node.attrs.id);\n\n          const oldContentNode = oldNode?.node.firstChild;\n          const newContentNode = node.node.firstChild;\n\n          if (oldNode && oldContentNode && newContentNode) {\n            const newAttrs = {\n              index: newContentNode.attrs.index,\n              level: newContentNode.attrs.level,\n              type: newContentNode.type.name,\n              depth: newState.doc.resolve(node.pos).depth,\n            };\n\n            let oldAttrs = {\n              index: oldContentNode.attrs.index,\n              level: oldContentNode.attrs.level,\n              type: oldContentNode.type.name,\n              depth: oldState.doc.resolve(oldNode.pos).depth,\n            };\n\n            currentTransactionOriginalOldBlockAttrs[node.node.attrs.id] =\n              oldAttrs;\n\n            // Whenever a transaction is appended by the OrderedListItemIndexPlugin, it's given the metadata:\n            // { \"orderedListIndexing\": true }\n            // These appended transactions happen immediately after any transaction which causes ordered list item\n            // indices to require updating, including those which trigger animations. Therefore, these animations are\n            // immediately overridden when the PreviousBlockTypePlugin processes the appended transaction, despite only\n            // the listItemIndex attribute changing. To solve this, oldAttrs must be edited for transactions with the\n            // \"orderedListIndexing\" metadata, so the correct animation can be re-triggered.\n            if (transaction.getMeta(\"numberedListIndexing\")) {\n              // If the block existed before the transaction, gets the attributes from before the previous transaction\n              // (i.e. the transaction that caused list item indices to need updating).\n              if (node.node.attrs.id in prev.prevTransactionOldBlockAttrs) {\n                oldAttrs =\n                  prev.prevTransactionOldBlockAttrs[node.node.attrs.id];\n              }\n\n              // Stops list item indices themselves being animated (looks smoother), unless the block's content type is\n              // changing from a numbered list item to something else.\n              if (newAttrs.type === \"numberedListItem\") {\n                oldAttrs.index = newAttrs.index;\n              }\n            }\n\n            prev.currentTransactionOldBlockAttrs[node.node.attrs.id] = oldAttrs;\n\n            // TODO: faster deep equal?\n            if (JSON.stringify(oldAttrs) !== JSON.stringify(newAttrs)) {\n              (oldAttrs as any)[\"depth-change\"] =\n                oldAttrs.depth - newAttrs.depth;\n\n              // for debugging:\n              // console.log(\n              //   \"id:\",\n              //   node.node.attrs.id,\n              //   \"previousBlockTypePlugin changes detected, oldAttrs\",\n              //   oldAttrs,\n              //   \"new\",\n              //   newAttrs\n              // );\n\n              prev.updatedBlocks.add(node.node.attrs.id);\n            }\n          }\n        }\n\n        prev.prevTransactionOldBlockAttrs =\n          currentTransactionOriginalOldBlockAttrs;\n\n        return prev;\n      },\n    },\n    props: {\n      decorations(state) {\n        const pluginState = (this as Plugin).getState(state);\n        if (pluginState.updatedBlocks.size === 0) {\n          return undefined;\n        }\n\n        const decorations: Decoration[] = [];\n\n        state.doc.descendants((node, pos) => {\n          if (!node.attrs.id) {\n            return;\n          }\n\n          if (!pluginState.updatedBlocks.has(node.attrs.id)) {\n            return;\n          }\n\n          const prevAttrs =\n            pluginState.currentTransactionOldBlockAttrs[node.attrs.id];\n          const decorationAttrs: any = {};\n\n          for (let [nodeAttr, val] of Object.entries(prevAttrs)) {\n            decorationAttrs[\"data-prev-\" + nodeAttributes[nodeAttr]] =\n              val || \"none\";\n          }\n\n          // for debugging:\n          // console.log(\n          //   \"previousBlockTypePlugin committing decorations\",\n          //   decorationAttrs\n          // );\n\n          const decoration = Decoration.node(pos, pos + node.nodeSize, {\n            ...decorationAttrs,\n          });\n\n          decorations.push(decoration);\n        });\n\n        return DecorationSet.create(state.doc, decorations);\n      },\n    },\n  });\n};\n","// Object containing all possible block attributes.\nconst BlockAttributes: Record<string, string> = {\n  blockColor: \"data-block-color\",\n  blockStyle: \"data-block-style\",\n  id: \"data-id\",\n  depth: \"data-depth\",\n  depthChange: \"data-depth-change\",\n};\n\nexport default BlockAttributes;\n","import { mergeAttributes, Node } from \"@tiptap/core\";\nimport { Fragment, Node as PMNode, Slice } from \"prosemirror-model\";\nimport { TextSelection } from \"prosemirror-state\";\nimport {\n  blockToNode,\n  inlineContentToNodes,\n} from \"../../../api/nodeConversions/nodeConversions\";\nimport { PartialBlock } from \"../api/blockTypes\";\nimport { getBlockInfoFromPos } from \"../helpers/getBlockInfoFromPos\";\nimport { PreviousBlockTypePlugin } from \"../PreviousBlockTypePlugin\";\nimport styles from \"./Block.module.css\";\nimport BlockAttributes from \"./BlockAttributes\";\n\n// TODO\nexport interface IBlock {\n  HTMLAttributes: Record<string, any>;\n}\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    block: {\n      BNCreateBlock: (pos: number) => ReturnType;\n      BNDeleteBlock: (posInBlock: number) => ReturnType;\n      BNMergeBlocks: (posBetweenBlocks: number) => ReturnType;\n      BNSplitBlock: (posInBlock: number, keepType: boolean) => ReturnType;\n      BNUpdateBlock: (posInBlock: number, block: PartialBlock) => ReturnType;\n      BNCreateOrUpdateBlock: (\n        posInBlock: number,\n        block: PartialBlock\n      ) => ReturnType;\n    };\n  }\n}\n\n/**\n * The main \"Block node\" documents consist of\n */\nexport const BlockContainer = Node.create<IBlock>({\n  name: \"blockContainer\",\n  group: \"blockContainer\",\n  // A block always contains content, and optionally a blockGroup which contains nested blocks\n  content: \"blockContent blockGroup?\",\n  // Ensures content-specific keyboard handlers trigger first.\n  priority: 50,\n  defining: true,\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const attrs: Record<string, string> = {};\n          for (let [nodeAttr, HTMLAttr] of Object.entries(BlockAttributes)) {\n            if (element.getAttribute(HTMLAttr)) {\n              attrs[nodeAttr] = element.getAttribute(HTMLAttr)!;\n            }\n          }\n\n          if (element.getAttribute(\"data-node-type\") === \"blockContainer\") {\n            return attrs;\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockOuter,\n        \"data-node-type\": \"block-outer\",\n      }),\n      [\n        \"div\",\n        mergeAttributes(HTMLAttributes, {\n          // TODO: maybe remove html attributes from inner block\n          class: styles.block,\n          \"data-node-type\": this.name,\n        }),\n        0,\n      ],\n    ];\n  },\n\n  addCommands() {\n    return {\n      // Creates a new text block at a given position.\n      BNCreateBlock:\n        (pos) =>\n        ({ state, dispatch }) => {\n          const newBlock =\n            state.schema.nodes[\"blockContainer\"].createAndFill()!;\n\n          if (dispatch) {\n            state.tr.insert(pos, newBlock);\n          }\n\n          return true;\n        },\n      // Deletes a block at a given position.\n      BNDeleteBlock:\n        (posInBlock) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { startPos, endPos } = blockInfo;\n\n          if (dispatch) {\n            state.tr.deleteRange(startPos, endPos);\n          }\n\n          return true;\n        },\n      // Updates a block at a given position.\n      BNUpdateBlock:\n        (posInBlock, block) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { startPos, endPos, node, contentNode } = blockInfo;\n\n          if (dispatch) {\n            // Adds blockGroup node with child blocks if necessary.\n            if (block.children !== undefined) {\n              const childNodes = [];\n\n              // Creates ProseMirror nodes for each child block, including their descendants.\n              for (const child of block.children) {\n                childNodes.push(blockToNode(child, state.schema));\n              }\n\n              // Checks if a blockGroup node already exists.\n              if (node.childCount === 2) {\n                // Replaces all child nodes in the existing blockGroup with the ones created earlier.\n                state.tr.replace(\n                  startPos + contentNode.nodeSize + 1,\n                  endPos - 1,\n                  new Slice(Fragment.from(childNodes), 0, 0)\n                );\n              } else {\n                // Inserts a new blockGroup containing the child nodes created earlier.\n                state.tr.insert(\n                  startPos + contentNode.nodeSize,\n                  state.schema.nodes[\"blockGroup\"].create({}, childNodes)\n                );\n              }\n            }\n\n            // Replaces the blockContent node's content if necessary.\n            if (block.content !== undefined) {\n              let content: PMNode[] = [];\n\n              // Checks if the provided content is a string or InlineContent[] type.\n              if (typeof block.content === \"string\") {\n                // Adds a single text node with no marks to the content.\n                content.push(state.schema.text(block.content));\n              } else {\n                // Adds a text node with the provided styles converted into marks to the content, for each InlineContent\n                // object.\n                content = inlineContentToNodes(block.content, state.schema);\n              }\n\n              // Replaces the contents of the blockContent node with the previously created text node(s).\n              state.tr.replace(\n                startPos + 1,\n                startPos + contentNode.nodeSize - 1,\n                new Slice(Fragment.from(content), 0, 0)\n              );\n            }\n\n            // Changes the blockContent node type and adds the provided props as attributes. Also preserves all existing\n            // attributes that are compatible with the new type.\n            state.tr.setNodeMarkup(\n              startPos,\n              block.type === undefined\n                ? undefined\n                : state.schema.nodes[block.type],\n              {\n                ...contentNode.attrs,\n                ...block.props,\n              }\n            );\n\n            // Adds all provided props as attributes to the parent blockContainer node too, and also preserves existing\n            // attributes.\n            state.tr.setNodeMarkup(startPos - 1, undefined, {\n              ...node.attrs,\n              ...block.props,\n            });\n          }\n\n          return true;\n        },\n      // Appends the text contents of a block to the nearest previous block, given a position between them. Children of\n      // the merged block are moved out of it first, rather than also being merged.\n      //\n      // In the example below, the position passed into the function is between Block1 and Block2.\n      //\n      // Block1\n      //    Block2\n      // Block3\n      //    Block4\n      //        Block5\n      //\n      // Becomes:\n      //\n      // Block1\n      //    Block2Block3\n      // Block4\n      //     Block5\n      BNMergeBlocks:\n        (posBetweenBlocks) =>\n        ({ state, dispatch }) => {\n          const nextNodeIsBlock =\n            state.doc.resolve(posBetweenBlocks + 1).node().type.name ===\n            \"blockContainer\";\n          const prevNodeIsBlock =\n            state.doc.resolve(posBetweenBlocks - 1).node().type.name ===\n            \"blockContainer\";\n\n          if (!nextNodeIsBlock || !prevNodeIsBlock) {\n            return false;\n          }\n\n          const nextBlockInfo = getBlockInfoFromPos(\n            state.doc,\n            posBetweenBlocks + 1\n          );\n\n          const { node, contentNode, startPos, endPos, depth } = nextBlockInfo!;\n\n          // Removes a level of nesting all children of the next block by 1 level, if it contains both content and block\n          // group nodes.\n          if (node.childCount === 2) {\n            const childBlocksStart = state.doc.resolve(\n              startPos + contentNode.nodeSize + 1\n            );\n            const childBlocksEnd = state.doc.resolve(endPos - 1);\n            const childBlocksRange =\n              childBlocksStart.blockRange(childBlocksEnd);\n\n            // Moves the block group node inside the block into the block group node that the current block is in.\n            if (dispatch) {\n              state.tr.lift(childBlocksRange!, depth - 1);\n            }\n          }\n\n          let prevBlockEndPos = posBetweenBlocks - 1;\n          let prevBlockInfo = getBlockInfoFromPos(state.doc, prevBlockEndPos);\n\n          // Finds the nearest previous block, regardless of nesting level.\n          while (prevBlockInfo!.numChildBlocks > 0) {\n            prevBlockEndPos--;\n            prevBlockInfo = getBlockInfoFromPos(state.doc, prevBlockEndPos);\n            if (prevBlockInfo === undefined) {\n              return false;\n            }\n          }\n\n          // Deletes next block and adds its text content to the nearest previous block.\n          // TODO: Use slices.\n          if (dispatch) {\n            state.tr.deleteRange(startPos, startPos + contentNode.nodeSize);\n            state.tr.insertText(contentNode.textContent, prevBlockEndPos - 1);\n            state.tr.setSelection(\n              new TextSelection(state.doc.resolve(prevBlockEndPos - 1))\n            );\n          }\n\n          return true;\n        },\n      // Splits a block at a given position. Content after the position is moved to a new block below, at the same\n      // nesting level.\n      BNSplitBlock:\n        (posInBlock, keepType) =>\n        ({ state, dispatch }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          const { contentNode, contentType, startPos, endPos, depth } =\n            blockInfo;\n\n          const originalBlockContent = state.doc.cut(startPos + 1, posInBlock);\n          const newBlockContent = state.doc.cut(posInBlock, endPos - 1);\n\n          const newBlock =\n            state.schema.nodes[\"blockContainer\"].createAndFill()!;\n\n          const newBlockInsertionPos = endPos + 1;\n          const newBlockContentPos = newBlockInsertionPos + 2;\n\n          if (dispatch) {\n            // Creates a new block. Since the schema requires it to have a content node, a paragraph node is created\n            // automatically, spanning newBlockContentPos to newBlockContentPos + 1.\n            state.tr.insert(newBlockInsertionPos, newBlock);\n\n            // Replaces the content of the newly created block's content node. Doesn't replace the whole content node so\n            // its type doesn't change.\n            state.tr.replace(\n              newBlockContentPos,\n              newBlockContentPos + 1,\n              newBlockContent.content.size > 0\n                ? new Slice(\n                    Fragment.from(newBlockContent),\n                    depth + 2,\n                    depth + 2\n                  )\n                : undefined\n            );\n\n            // Changes the type of the content node. The range doesn't matter as long as both from and to positions are\n            // within the content node.\n            if (keepType) {\n              state.tr.setBlockType(\n                newBlockContentPos,\n                newBlockContentPos,\n                state.schema.node(contentType).type,\n                contentNode.attrs\n              );\n            }\n\n            // Sets the selection to the start of the new block's content node.\n            state.tr.setSelection(\n              new TextSelection(state.doc.resolve(newBlockContentPos))\n            );\n\n            // Replaces the content of the original block's content node. Doesn't replace the whole content node so its\n            // type doesn't change.\n            state.tr.replace(\n              startPos + 1,\n              endPos - 1,\n              originalBlockContent.content.size > 0\n                ? new Slice(\n                    Fragment.from(originalBlockContent),\n                    depth + 2,\n                    depth + 2\n                  )\n                : undefined\n            );\n          }\n\n          return true;\n        },\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [PreviousBlockTypePlugin()];\n  },\n\n  addKeyboardShortcuts() {\n    // handleBackspace is partially adapted from https://github.com/ueberdosis/tiptap/blob/ed56337470efb4fd277128ab7ef792b37cfae992/packages/core/src/extensions/keymap.ts\n    const handleBackspace = () =>\n      this.editor.commands.first(({ commands }) => [\n        // Deletes the selection if it's not empty.\n        () => commands.deleteSelection(),\n        // Undoes an input rule if one was triggered in the last editor state change.\n        () => commands.undoInputRule(),\n        // Reverts block content type to a paragraph if the selection is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { contentType } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const isParagraph = contentType.name === \"paragraph\";\n\n            if (selectionAtBlockStart && !isParagraph) {\n              return commands.BNUpdateBlock(state.selection.from, {\n                type: \"paragraph\",\n                props: {},\n              });\n            }\n\n            return false;\n          }),\n        // Removes a level of nesting if the block is indented if the selection is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n\n            if (selectionAtBlockStart) {\n              return commands.liftListItem(\"blockContainer\");\n            }\n\n            return false;\n          }),\n        // Merges block with the previous one if it isn't indented, isn't the first block in the doc, and the selection\n        // is at the start of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { depth, startPos } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockAtDocStart = startPos === 2;\n\n            const posBetweenBlocks = startPos - 1;\n\n            if (\n              !blockAtDocStart &&\n              selectionAtBlockStart &&\n              selectionEmpty &&\n              depth === 2\n            ) {\n              return commands.BNMergeBlocks(posBetweenBlocks);\n            }\n\n            return false;\n          }),\n      ]);\n\n    const handleEnter = () =>\n      this.editor.commands.first(({ commands }) => [\n        // Removes a level of nesting if the block is empty & indented, while the selection is also empty & at the start\n        // of the block.\n        () =>\n          commands.command(({ state }) => {\n            const { node, depth } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockEmpty = node.textContent.length === 0;\n            const blockIndented = depth > 2;\n\n            if (\n              selectionAtBlockStart &&\n              selectionEmpty &&\n              blockEmpty &&\n              blockIndented\n            ) {\n              return commands.liftListItem(\"blockContainer\");\n            }\n\n            return false;\n          }),\n        // Creates a new block and moves the selection to it if the current one is empty, while the selection is also\n        // empty & at the start of the block.\n        () =>\n          commands.command(({ state, chain }) => {\n            const { node, endPos } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const selectionAtBlockStart =\n              state.selection.$anchor.parentOffset === 0;\n            const selectionEmpty =\n              state.selection.anchor === state.selection.head;\n            const blockEmpty = node.textContent.length === 0;\n\n            if (selectionAtBlockStart && selectionEmpty && blockEmpty) {\n              const newBlockInsertionPos = endPos + 1;\n              const newBlockContentPos = newBlockInsertionPos + 2;\n\n              chain()\n                .BNCreateBlock(newBlockInsertionPos)\n                .setTextSelection(newBlockContentPos)\n                .run();\n\n              return true;\n            }\n\n            return false;\n          }),\n        // Splits the current block, moving content inside that's after the cursor to a new text block below. Also\n        // deletes the selection beforehand, if it's not empty.\n        () =>\n          commands.command(({ state, chain }) => {\n            const { node } = getBlockInfoFromPos(\n              state.doc,\n              state.selection.from\n            )!;\n\n            const blockEmpty = node.textContent.length === 0;\n\n            if (!blockEmpty) {\n              chain()\n                .deleteSelection()\n                .BNSplitBlock(state.selection.from, false)\n                .run();\n\n              return true;\n            }\n\n            return false;\n          }),\n      ]);\n\n    return {\n      Backspace: handleBackspace,\n      Enter: handleEnter,\n      // Always returning true for tab key presses ensures they're not captured by the browser. Otherwise, they blur the\n      // editor since the browser will try to use tab for keyboard navigation.\n      Tab: () => {\n        this.editor.commands.sinkListItem(\"blockContainer\");\n        return true;\n      },\n      \"Shift-Tab\": () => {\n        this.editor.commands.liftListItem(\"blockContainer\");\n        return true;\n      },\n      \"Mod-Alt-0\": () =>\n        this.editor.commands.BNCreateBlock(\n          this.editor.state.selection.anchor + 2\n        ),\n      \"Mod-Alt-1\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"1\",\n          },\n        }),\n      \"Mod-Alt-2\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"2\",\n          },\n        }),\n      \"Mod-Alt-3\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"heading\",\n          props: {\n            level: \"3\",\n          },\n        }),\n      \"Mod-Shift-7\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"bulletListItem\",\n          props: {},\n        }),\n      \"Mod-Shift-8\": () =>\n        this.editor.commands.BNUpdateBlock(this.editor.state.selection.anchor, {\n          type: \"numberedListItem\",\n          props: {},\n        }),\n    };\n  },\n});\n","import { mergeAttributes, Node } from \"@tiptap/core\";\nimport styles from \"./Block.module.css\";\n\nexport const BlockGroup = Node.create({\n  name: \"blockGroup\",\n  group: \"blockGroup\",\n  content: \"blockContainer+\",\n\n  addOptions() {\n    return {\n      HTMLAttributes: {},\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"div\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.getAttribute(\"data-node-type\") === \"blockGroup\") {\n            // Null means the element matches, but we don't want to add any attributes to the node.\n            return null;\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(this.options.HTMLAttributes, HTMLAttributes, {\n        class: styles.blockGroup,\n        \"data-node-type\": \"blockGroup\",\n      }),\n      0,\n    ];\n  },\n});\n","import { mergeAttributes, Node } from \"@tiptap/core\";\nimport styles from \"../../Block.module.css\";\n\nexport const ParagraphBlockContent = Node.create({\n  name: \"paragraph\",\n  group: \"blockContent\",\n  content: \"inline*\",\n\n  parseHTML() {\n    return [\n      {\n        tag: \"p\",\n        priority: 200,\n        node: \"paragraph\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockContent,\n        \"data-content-type\": this.name,\n      }),\n      [\"p\", 0],\n    ];\n  },\n});\n","import { InputRule, mergeAttributes, Node } from \"@tiptap/core\";\nimport styles from \"../../Block.module.css\";\n\nexport const HeadingBlockContent = Node.create({\n  name: \"heading\",\n  group: \"blockContent\",\n  content: \"inline*\",\n\n  addAttributes() {\n    return {\n      level: {\n        default: \"1\",\n        // instead of \"level\" attributes, use \"data-level\"\n        parseHTML: (element) => element.getAttribute(\"data-level\"),\n        renderHTML: (attributes) => {\n          return {\n            \"data-level\": attributes.level,\n          };\n        },\n      },\n    };\n  },\n\n  addInputRules() {\n    return [\n      ...[\"1\", \"2\", \"3\"].map((level) => {\n        // Creates a heading of appropriate level when starting with \"#\", \"##\", or \"###\".\n        return new InputRule({\n          find: new RegExp(`^(#{${parseInt(level)}})\\\\s$`),\n          handler: ({ state, chain, range }) => {\n            chain()\n              .BNUpdateBlock(state.selection.from, {\n                type: \"heading\",\n                props: {\n                  level: level as \"1\" | \"2\" | \"3\",\n                },\n              })\n              // Removes the \"#\" character(s) used to set the heading.\n              .deleteRange({ from: range.from, to: range.to });\n          },\n        });\n      }),\n    ];\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"h1\",\n        attrs: { level: \"1\" },\n        node: \"heading\",\n      },\n      {\n        tag: \"h2\",\n        attrs: { level: \"2\" },\n        node: \"heading\",\n      },\n      {\n        tag: \"h3\",\n        attrs: { level: \"3\" },\n        node: \"heading\",\n      },\n    ];\n  },\n\n  renderHTML({ node, HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockContent,\n        \"data-content-type\": this.name,\n      }),\n      [\"h\" + node.attrs.level, 0],\n    ];\n  },\n});\n","import { Editor } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../../../helpers/getBlockInfoFromPos\";\n\nexport const handleEnter = (editor: Editor) => {\n  const { node, contentType } = getBlockInfoFromPos(\n    editor.state.doc,\n    editor.state.selection.from\n  )!;\n\n  const selectionEmpty =\n    editor.state.selection.anchor === editor.state.selection.head;\n\n  if (!contentType.name.endsWith(\"ListItem\") || !selectionEmpty) {\n    return false;\n  }\n\n  return editor.commands.first(({ state, chain, commands }) => [\n    () =>\n      // Changes list item block to a text block if the content is empty.\n      commands.command(() => {\n        if (node.textContent.length === 0) {\n          return commands.BNUpdateBlock(state.selection.from, {\n            type: \"paragraph\",\n            props: {},\n          });\n        }\n\n        return false;\n      }),\n\n    () =>\n      // Splits the current block, moving content inside that's after the cursor to a new block of the same type\n      // below.\n      commands.command(() => {\n        if (node.textContent.length > 0) {\n          chain()\n            .deleteSelection()\n            .BNSplitBlock(state.selection.from, true)\n            .run();\n\n          return true;\n        }\n\n        return false;\n      }),\n  ]);\n};\n","import { InputRule, mergeAttributes, Node } from \"@tiptap/core\";\nimport styles from \"../../../Block.module.css\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts\";\n\nexport const BulletListItemBlockContent = Node.create({\n  name: \"bulletListItem\",\n  group: \"blockContent\",\n  content: \"inline*\",\n\n  addInputRules() {\n    return [\n      // Creates an unordered list when starting with \"-\", \"+\", or \"*\".\n      new InputRule({\n        find: new RegExp(`^[-+*]\\\\s$`),\n        handler: ({ state, chain, range }) => {\n          chain()\n            .BNUpdateBlock(state.selection.from, {\n              type: \"bulletListItem\",\n              props: {},\n            })\n            // Removes the \"-\", \"+\", or \"*\" character used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => handleEnter(this.editor),\n    };\n  },\n\n  parseHTML() {\n    return [\n      // Case for regular HTML list structure.\n      {\n        tag: \"li\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.tagName === \"UL\") {\n            return {};\n          }\n\n          return false;\n        },\n        node: \"bulletListItem\",\n      },\n      // Case for BlockNote list structure.\n      {\n        tag: \"p\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.getAttribute(\"data-content-type\") === \"bulletListItem\") {\n            return {};\n          }\n\n          return false;\n        },\n        priority: 300,\n        node: \"bulletListItem\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockContent,\n        \"data-content-type\": this.name,\n      }),\n      [\"p\", 0],\n    ];\n  },\n});\n","import { Plugin, PluginKey } from \"prosemirror-state\";\nimport { getBlockInfoFromPos } from \"../../../../helpers/getBlockInfoFromPos\";\n\n// ProseMirror Plugin which automatically assigns indices to ordered list items per nesting level.\nconst PLUGIN_KEY = new PluginKey(`numbered-list-indexing`);\nexport const NumberedListIndexingPlugin = () => {\n  return new Plugin({\n    key: PLUGIN_KEY,\n    appendTransaction: (_transactions, _oldState, newState) => {\n      const tr = newState.tr;\n      tr.setMeta(\"numberedListIndexing\", true);\n\n      let modified = false;\n\n      // Traverses each node the doc using DFS, so blocks which are on the same nesting level will be traversed in the\n      // same order they appear. This means the index of each list item block can be calculated by incrementing the\n      // index of the previous list item block.\n      newState.doc.descendants((node, pos) => {\n        if (\n          node.type.name === \"blockContainer\" &&\n          node.firstChild!.type.name === \"numberedListItem\"\n        ) {\n          let newIndex = \"1\";\n          const isFirstBlockInDoc = pos === 1;\n\n          const blockInfo = getBlockInfoFromPos(tr.doc, pos + 1)!;\n          if (blockInfo === undefined) {\n            return;\n          }\n\n          // Checks if this block is the start of a new ordered list, i.e. if it's the first block in the document, the\n          // first block in its nesting level, or the previous block is not an ordered list item.\n          if (!isFirstBlockInDoc) {\n            const prevBlockInfo = getBlockInfoFromPos(tr.doc, pos - 2)!;\n            if (prevBlockInfo === undefined) {\n              return;\n            }\n\n            const isFirstBlockInNestingLevel =\n              blockInfo.depth !== prevBlockInfo.depth;\n\n            if (!isFirstBlockInNestingLevel) {\n              const prevBlockContentNode = prevBlockInfo.contentNode;\n              const prevBlockContentType = prevBlockInfo.contentType;\n\n              const isPrevBlockOrderedListItem =\n                prevBlockContentType.name === \"numberedListItem\";\n\n              if (isPrevBlockOrderedListItem) {\n                const prevBlockIndex = prevBlockContentNode.attrs[\"index\"];\n\n                newIndex = (parseInt(prevBlockIndex) + 1).toString();\n              }\n            }\n          }\n\n          const contentNode = blockInfo.contentNode;\n          const index = contentNode.attrs[\"index\"];\n\n          if (index !== newIndex) {\n            modified = true;\n\n            tr.setNodeMarkup(pos + 1, undefined, {\n              index: newIndex,\n            });\n          }\n        }\n      });\n\n      return modified ? tr : null;\n    },\n  });\n};\n","import { InputRule, mergeAttributes, Node } from \"@tiptap/core\";\nimport styles from \"../../../Block.module.css\";\nimport { handleEnter } from \"../ListItemKeyboardShortcuts\";\nimport { NumberedListIndexingPlugin } from \"./NumberedListIndexingPlugin\";\n\nexport const NumberedListItemBlockContent = Node.create({\n  name: \"numberedListItem\",\n  group: \"blockContent\",\n  content: \"inline*\",\n\n  addAttributes() {\n    return {\n      index: {\n        default: null,\n        parseHTML: (element) => element.getAttribute(\"data-index\"),\n        renderHTML: (attributes) => {\n          return {\n            \"data-index\": attributes.index,\n          };\n        },\n      },\n    };\n  },\n\n  addInputRules() {\n    return [\n      // Creates an ordered list when starting with \"1.\".\n      new InputRule({\n        find: new RegExp(`^1\\\\.\\\\s$`),\n        handler: ({ state, chain, range }) => {\n          chain()\n            .BNUpdateBlock(state.selection.from, {\n              type: \"numberedListItem\",\n              props: {},\n            })\n            // Removes the \"1.\" characters used to set the list.\n            .deleteRange({ from: range.from, to: range.to });\n        },\n      }),\n    ];\n  },\n\n  addKeyboardShortcuts() {\n    return {\n      Enter: () => handleEnter(this.editor),\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [NumberedListIndexingPlugin()];\n  },\n\n  parseHTML() {\n    return [\n      // Case for regular HTML list structure.\n      // (e.g.: when pasting from other apps)\n      {\n        tag: \"li\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.tagName === \"OL\") {\n            return {};\n          }\n\n          return false;\n        },\n        node: \"numberedListItem\",\n      },\n      // Case for BlockNote list structure.\n      // (e.g.: when pasting from blocknote)\n      {\n        tag: \"p\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          const parent = element.parentElement;\n\n          if (parent === null) {\n            return false;\n          }\n\n          if (parent.getAttribute(\"data-content-type\") === \"numberedListItem\") {\n            return {};\n          }\n\n          return false;\n        },\n        priority: 300,\n        node: \"numberedListItem\",\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\n      \"div\",\n      mergeAttributes(HTMLAttributes, {\n        class: styles.blockContent,\n        \"data-content-type\": this.name,\n      }),\n      // we use a <p> tag, because for <li> tags we'd need to add a <ul> parent for around siblings to be semantically correct,\n      // which would be quite cumbersome\n      [\"p\", 0],\n    ];\n  },\n});\n","import { Node } from \"@tiptap/core\";\nimport { BlockContainer } from \"./nodes/BlockContainer\";\nimport { BlockGroup } from \"./nodes/BlockGroup\";\nimport { ParagraphBlockContent } from \"./nodes/BlockContent/ParagraphBlockContent/ParagraphBlockContent\";\nimport { HeadingBlockContent } from \"./nodes/BlockContent/HeadingBlockContent/HeadingBlockContent\";\nimport { BulletListItemBlockContent } from \"./nodes/BlockContent/ListItemBlockContent/BulletListItemBlockContent/BulletListItemBlockContent\";\nimport { NumberedListItemBlockContent } from \"./nodes/BlockContent/ListItemBlockContent/NumberedListItemBlockContent/NumberedListItemBlockContent\";\n\nexport const blocks: any[] = [\n  ParagraphBlockContent,\n  HeadingBlockContent,\n  BulletListItemBlockContent,\n  NumberedListItemBlockContent,\n  BlockContainer,\n  BlockGroup,\n  Node.create({\n    name: \"doc\",\n    topNode: true,\n    content: \"blockGroup\",\n  }),\n];\n","import { findParentNode } from \"@tiptap/core\";\n\nexport const findBlock = findParentNode(\n  (node) => node.type.name === \"blockContainer\"\n);\n","import { Editor, Range } from \"@tiptap/core\";\nimport { EditorState, Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet, EditorView } from \"prosemirror-view\";\nimport { findBlock } from \"../../../extensions/Blocks/helpers/findBlock\";\nimport {\n  SuggestionsMenu,\n  SuggestionsMenuDynamicParams,\n  SuggestionsMenuFactory,\n  SuggestionsMenuStaticParams,\n} from \"./SuggestionsMenuFactoryTypes\";\nimport { SuggestionItem } from \"./SuggestionItem\";\nimport { BlockNoteEditor } from \"../../../BlockNoteEditor\";\n\nexport type SuggestionPluginOptions<T extends SuggestionItem> = {\n  /**\n   * The name of the plugin.\n   *\n   * Used for ensuring that the plugin key is unique when more than one instance of the SuggestionPlugin is used.\n   */\n  pluginKey: PluginKey;\n\n  /**\n   * The BlockNote editor.\n   */\n  editor: BlockNoteEditor;\n\n  /**\n   * The character that should trigger the suggestion menu to pop up (e.g. a '/' for commands), when typed by the user.\n   */\n  defaultTriggerCharacter: string;\n\n  suggestionsMenuFactory: SuggestionsMenuFactory<T>;\n\n  /**\n   * The callback that gets executed when an item is selected by the user.\n   *\n   * **NOTE:** The command text is not removed automatically from the editor by this plugin,\n   * this should be done manually. The `editor` and `range` properties passed\n   * to the callback function might come in handy when doing this.\n   */\n  onSelectItem?: (props: { item: T; editor: BlockNoteEditor }) => void;\n\n  /**\n   * A function that should supply the plugin with items to suggest, based on a certain query string.\n   */\n  items?: (query: string) => T[];\n\n  allow?: (props: { editor: Editor; range: Range }) => boolean;\n};\n\ntype SuggestionPluginState<T extends SuggestionItem> = {\n  // True when the menu is shown, false when hidden.\n  active: boolean;\n  // The character that triggered the menu being shown. Allowing the trigger to be different to the default\n  // trigger allows other extensions to open it programmatically.\n  triggerCharacter: string | undefined;\n  // The editor position just after the trigger character, i.e. where the user query begins. Used to figure out\n  // which menu items to show and can also be used to delete the trigger character.\n  queryStartPos: number | undefined;\n  // The items that should be shown in the menu.\n  items: T[];\n  // The index of the item in the menu that's currently hovered using the keyboard.\n  keyboardHoveredItemIndex: number | undefined;\n  // The number of characters typed after the last query that matched with at least 1 item. Used to close the\n  // menu if the user keeps entering queries that don't return any results.\n  notFoundCount: number | undefined;\n  decorationId: string | undefined;\n};\n\nfunction getDefaultPluginState<\n  T extends SuggestionItem\n>(): SuggestionPluginState<T> {\n  return {\n    active: false,\n    triggerCharacter: undefined,\n    queryStartPos: undefined,\n    items: [] as T[],\n    keyboardHoveredItemIndex: undefined,\n    notFoundCount: 0,\n    decorationId: undefined,\n  };\n}\n\ntype SuggestionPluginViewOptions<T extends SuggestionItem> = {\n  editor: BlockNoteEditor;\n  pluginKey: PluginKey;\n  onSelectItem: (props: { item: T; editor: BlockNoteEditor }) => void;\n  suggestionsMenuFactory: SuggestionsMenuFactory<T>;\n};\n\nclass SuggestionPluginView<T extends SuggestionItem> {\n  editor: BlockNoteEditor;\n  pluginKey: PluginKey;\n\n  suggestionsMenu: SuggestionsMenu<T>;\n\n  pluginState: SuggestionPluginState<T>;\n  itemCallback: (item: T) => void;\n\n  constructor({\n    editor,\n    pluginKey,\n    onSelectItem: selectItemCallback = () => {},\n    suggestionsMenuFactory,\n  }: SuggestionPluginViewOptions<T>) {\n    this.editor = editor;\n    this.pluginKey = pluginKey;\n\n    this.pluginState = getDefaultPluginState<T>();\n\n    this.itemCallback = (item: T) => {\n      editor._tiptapEditor\n        .chain()\n        .focus()\n        .deleteRange({\n          from:\n            this.pluginState.queryStartPos! -\n            this.pluginState.triggerCharacter!.length,\n          to: editor._tiptapEditor.state.selection.from,\n        })\n        .run();\n\n      selectItemCallback({\n        item: item,\n        editor: editor,\n      });\n    };\n\n    this.suggestionsMenu = suggestionsMenuFactory(this.getStaticParams());\n\n    document.addEventListener(\"scroll\", this.handleScroll);\n  }\n\n  handleScroll = () => {\n    if (this.pluginKey.getState(this.editor._tiptapEditor.state).active) {\n      this.suggestionsMenu.render(this.getDynamicParams(), false);\n    }\n  };\n\n  update(view: EditorView, prevState: EditorState) {\n    const prev = this.pluginKey.getState(prevState);\n    const next = this.pluginKey.getState(view.state);\n\n    // See how the state changed\n    const started = !prev.active && next.active;\n    const stopped = prev.active && !next.active;\n    // TODO: Currently also true for cases in which an update isn't needed so selected list item index updates still\n    //  cause the view to update. May need to be more strict.\n    const changed = prev.active && next.active;\n\n    // Cancel when suggestion isn't active\n    if (!started && !changed && !stopped) {\n      return;\n    }\n\n    this.pluginState = stopped ? prev : next;\n\n    if (stopped || !this.editor.isEditable) {\n      this.suggestionsMenu.hide();\n\n      // Listener stops focus moving to the menu on click.\n      this.suggestionsMenu.element!.removeEventListener(\"mousedown\", (event) =>\n        event.preventDefault()\n      );\n    }\n\n    if (changed) {\n      this.suggestionsMenu.render(this.getDynamicParams(), false);\n    }\n\n    if (started && this.editor.isEditable) {\n      this.suggestionsMenu.render(this.getDynamicParams(), true);\n\n      // Listener stops focus moving to the menu on click.\n      this.suggestionsMenu.element!.addEventListener(\"mousedown\", (event) =>\n        event.preventDefault()\n      );\n    }\n  }\n\n  destroy() {\n    document.removeEventListener(\"scroll\", this.handleScroll);\n  }\n\n  getStaticParams(): SuggestionsMenuStaticParams<T> {\n    return {\n      itemCallback: (item: T) => this.itemCallback(item),\n    };\n  }\n\n  getDynamicParams(): SuggestionsMenuDynamicParams<T> {\n    const decorationNode = document.querySelector(\n      `[data-decoration-id=\"${this.pluginState.decorationId}\"]`\n    );\n\n    return {\n      items: this.pluginState.items,\n      keyboardHoveredItemIndex: this.pluginState.keyboardHoveredItemIndex!,\n      referenceRect: decorationNode!.getBoundingClientRect(),\n    };\n  }\n}\n\n/**\n * A ProseMirror plugin for suggestions, designed to make '/'-commands possible as well as mentions.\n *\n * This is basically a simplified version of TipTap's [Suggestions](https://github.com/ueberdosis/tiptap/tree/db92a9b313c5993b723c85cd30256f1d4a0b65e1/packages/suggestion) plugin.\n *\n * This version is adapted from the aforementioned version in the following ways:\n * - This version supports generic items instead of only strings (to allow for more advanced filtering for example)\n * - This version hides some unnecessary complexity from the user of the plugin.\n * - This version handles key events differently\n *\n * @param options options for configuring the plugin\n * @returns the prosemirror plugin\n */\nexport function createSuggestionPlugin<T extends SuggestionItem>({\n  pluginKey,\n  editor,\n  defaultTriggerCharacter,\n  suggestionsMenuFactory,\n  onSelectItem: selectItemCallback = () => {},\n  items = () => [],\n}: SuggestionPluginOptions<T>) {\n  // Assertions\n  if (defaultTriggerCharacter.length !== 1) {\n    throw new Error(\"'char' should be a single character\");\n  }\n\n  const deactivate = (view: EditorView) => {\n    view.dispatch(view.state.tr.setMeta(pluginKey, { deactivate: true }));\n  };\n\n  // Plugin key is passed in as a parameter, so it can be exported and used in the DraggableBlocksPlugin.\n  return new Plugin({\n    key: pluginKey,\n\n    view: (view: EditorView) =>\n      new SuggestionPluginView({\n        editor: editor,\n        pluginKey: pluginKey,\n        onSelectItem: (props: { item: T; editor: BlockNoteEditor }) => {\n          deactivate(view);\n          selectItemCallback(props);\n        },\n        suggestionsMenuFactory: suggestionsMenuFactory,\n      }),\n\n    state: {\n      // Initialize the plugin's internal state.\n      init(): SuggestionPluginState<T> {\n        return getDefaultPluginState<T>();\n      },\n\n      // Apply changes to the plugin state from an editor transaction.\n      apply(transaction, prev, oldState, newState): SuggestionPluginState<T> {\n        // TODO: More clearly define which transactions should be ignored.\n        if (transaction.getMeta(\"orderedListIndexing\") !== undefined) {\n          return prev;\n        }\n\n        // Checks if the menu should be shown.\n        if (transaction.getMeta(pluginKey)?.activate) {\n          return {\n            active: true,\n            triggerCharacter:\n              transaction.getMeta(pluginKey)?.triggerCharacter || \"\",\n            queryStartPos: newState.selection.from,\n            items: items(\"\"),\n            keyboardHoveredItemIndex: 0,\n            // TODO: Maybe should be 1 if the menu has no possible items? Probably redundant since a menu with no items\n            //  is useless in practice.\n            notFoundCount: 0,\n            decorationId: `id_${Math.floor(Math.random() * 0xffffffff)}`,\n          };\n        }\n\n        // Checks if the menu is hidden, in which case it doesn't need to be hidden or updated.\n        if (!prev.active) {\n          return prev;\n        }\n\n        const next = { ...prev };\n\n        // Updates which menu items to show by checking which items the current query (the text between the trigger\n        // character and caret) matches with.\n        next.items = items(\n          newState.doc.textBetween(prev.queryStartPos!, newState.selection.from)\n        );\n\n        // Updates notFoundCount if the query doesn't match any items.\n        next.notFoundCount = 0;\n        if (next.items.length === 0) {\n          // Checks how many characters were typed or deleted since the last transaction, and updates the notFoundCount\n          // accordingly. Also ensures the notFoundCount does not become negative.\n          next.notFoundCount = Math.max(\n            0,\n            prev.notFoundCount! +\n              (newState.selection.from - oldState.selection.from)\n          );\n        }\n\n        // Hides the menu. This is done after items and notFoundCount are already updated as notFoundCount is needed to\n        // check if the menu should be hidden.\n        if (\n          // Highlighting text should hide the menu.\n          newState.selection.from !== newState.selection.to ||\n          // Transactions with plugin metadata {deactivate: true} should hide the menu.\n          transaction.getMeta(pluginKey)?.deactivate ||\n          // Certain mouse events should hide the menu.\n          // TODO: Change to global mousedown listener.\n          transaction.getMeta(\"focus\") ||\n          transaction.getMeta(\"blur\") ||\n          transaction.getMeta(\"pointer\") ||\n          // Moving the caret before the character which triggered the menu should hide it.\n          (prev.active && newState.selection.from < prev.queryStartPos!) ||\n          // Entering more than 3 characters, after the last query that matched with at least 1 menu item, should hide\n          // the menu.\n          next.notFoundCount > 3\n        ) {\n          return getDefaultPluginState<T>();\n        }\n\n        // Updates keyboardHoveredItemIndex if necessary.\n        if (\n          transaction.getMeta(pluginKey)?.selectedItemIndexChanged !== undefined\n        ) {\n          let newIndex =\n            transaction.getMeta(pluginKey).selectedItemIndexChanged;\n\n          // Allows selection to jump between first and last items.\n          if (newIndex < 0) {\n            newIndex = prev.items.length - 1;\n          } else if (newIndex >= prev.items.length) {\n            newIndex = 0;\n          }\n\n          next.keyboardHoveredItemIndex = newIndex;\n        }\n\n        return next;\n      },\n    },\n\n    props: {\n      handleKeyDown(view, event) {\n        const menuIsActive = (this as Plugin).getState(view.state).active;\n\n        // Shows the menu if the default trigger character was pressed and the menu isn't active.\n        if (event.key === defaultTriggerCharacter && !menuIsActive) {\n          view.dispatch(\n            view.state.tr\n              .insertText(defaultTriggerCharacter)\n              .scrollIntoView()\n              .setMeta(pluginKey, {\n                activate: true,\n                triggerCharacter: defaultTriggerCharacter,\n              })\n          );\n\n          return true;\n        }\n\n        // Doesn't handle other keystrokes if the menu isn't active.\n        if (!menuIsActive) {\n          return false;\n        }\n\n        // Handles keystrokes for navigating the menu.\n        const {\n          triggerCharacter,\n          queryStartPos,\n          items,\n          keyboardHoveredItemIndex,\n        } = pluginKey.getState(view.state);\n\n        // Moves the keyboard selection to the previous item.\n        if (event.key === \"ArrowUp\") {\n          view.dispatch(\n            view.state.tr.setMeta(pluginKey, {\n              selectedItemIndexChanged: keyboardHoveredItemIndex - 1,\n            })\n          );\n          return true;\n        }\n\n        // Moves the keyboard selection to the next item.\n        if (event.key === \"ArrowDown\") {\n          view.dispatch(\n            view.state.tr.setMeta(pluginKey, {\n              selectedItemIndexChanged: keyboardHoveredItemIndex + 1,\n            })\n          );\n          return true;\n        }\n\n        // Selects an item and closes the menu.\n        if (event.key === \"Enter\") {\n          deactivate(view);\n          editor._tiptapEditor\n            .chain()\n            .focus()\n            .deleteRange({\n              from: queryStartPos! - triggerCharacter!.length,\n              to: editor._tiptapEditor.state.selection.from,\n            })\n            .run();\n\n          selectItemCallback({\n            item: items[keyboardHoveredItemIndex],\n            editor: editor,\n          });\n\n          return true;\n        }\n\n        // Closes the menu.\n        if (event.key === \"Escape\") {\n          deactivate(view);\n          return true;\n        }\n\n        return false;\n      },\n\n      // Hides menu in cases where mouse click does not cause an editor state change.\n      handleClick(view) {\n        deactivate(view);\n      },\n\n      // Setup decorator on the currently active suggestion.\n      decorations(state) {\n        const { active, decorationId, queryStartPos, triggerCharacter } = (\n          this as Plugin\n        ).getState(state);\n\n        if (!active) {\n          return null;\n        }\n\n        // If the menu was opened programmatically by another extension, it may not use a trigger character. In this\n        // case, the decoration is set on the whole block instead, as the decoration range would otherwise be empty.\n        if (triggerCharacter === \"\") {\n          const blockNode = findBlock(state.selection);\n          if (blockNode) {\n            return DecorationSet.create(state.doc, [\n              Decoration.node(\n                blockNode.pos,\n                blockNode.pos + blockNode.node.nodeSize,\n                {\n                  nodeName: \"span\",\n                  class: \"suggestion-decorator\",\n                  \"data-decoration-id\": decorationId,\n                }\n              ),\n            ]);\n          }\n        }\n        // Creates an inline decoration around the trigger character.\n        return DecorationSet.create(state.doc, [\n          Decoration.inline(\n            queryStartPos - triggerCharacter.length,\n            queryStartPos,\n            {\n              nodeName: \"span\",\n              class: \"suggestion-decorator\",\n              \"data-decoration-id\": decorationId,\n            }\n          ),\n        ]);\n      },\n    },\n  });\n}\n","import { Extension } from \"@tiptap/core\";\nimport { PluginKey } from \"prosemirror-state\";\nimport { createSuggestionPlugin } from \"../../shared/plugins/suggestion/SuggestionPlugin\";\nimport { SuggestionsMenuFactory } from \"../../shared/plugins/suggestion/SuggestionsMenuFactoryTypes\";\nimport { BaseSlashMenuItem } from \"./BaseSlashMenuItem\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\n\nexport type SlashMenuOptions = {\n  editor: BlockNoteEditor | undefined;\n  commands: BaseSlashMenuItem[] | undefined;\n  slashMenuFactory: SuggestionsMenuFactory<any> | undefined;\n};\n\nexport const SlashMenuPluginKey = new PluginKey(\"suggestions-slash-commands\");\n\nexport const SlashMenuExtension = Extension.create<SlashMenuOptions>({\n  name: \"slash-command\",\n\n  addOptions() {\n    return {\n      editor: undefined,\n      commands: undefined,\n      slashMenuFactory: undefined,\n    };\n  },\n\n  addProseMirrorPlugins() {\n    if (!this.options.slashMenuFactory || !this.options.commands) {\n      throw new Error(\"required args not defined for SlashMenuExtension\");\n    }\n\n    const commands = this.options.commands;\n\n    return [\n      createSuggestionPlugin<BaseSlashMenuItem>({\n        pluginKey: SlashMenuPluginKey,\n        editor: this.options.editor!,\n        defaultTriggerCharacter: \"/\",\n        suggestionsMenuFactory: this.options.slashMenuFactory!,\n        items: (query) => {\n          return commands.filter((cmd: BaseSlashMenuItem) => cmd.match(query));\n        },\n        onSelectItem: ({ item, editor }) => {\n          item.execute(editor);\n        },\n      }),\n    ];\n  },\n});\n","import { Selection } from \"prosemirror-state\";\nimport { Fragment, Node, ResolvedPos, Slice } from \"prosemirror-model\";\nimport { Mappable } from \"prosemirror-transform\";\n\n/**\n * This class represents an editor selection which spans multiple nodes/blocks. It's currently only used to allow users\n * to drag multiple blocks at the same time. Expects the selection anchor and head to be between nodes, i.e. just before\n * the first target node and just after the last, and that anchor and head are at the same nesting level.\n *\n * Partially based on ProseMirror's NodeSelection implementation:\n * (https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.ts)\n * MultipleNodeSelection differs from NodeSelection in the following ways:\n * 1. Stores which nodes are included in the selection instead of just a single node.\n * 2. Already expects the selection to start just before the first target node and ends just after the last, while a\n * NodeSelection automatically sets both anchor and head to just before the single target node.\n */\nexport class MultipleNodeSelection extends Selection {\n  nodes: Array<Node>;\n\n  constructor($anchor: ResolvedPos, $head: ResolvedPos) {\n    super($anchor, $head);\n\n    // Parent is at the same nesting level as anchor/head since they are just before/ just after target nodes.\n    const parentNode = $anchor.node();\n\n    this.nodes = [];\n    $anchor.doc.nodesBetween($anchor.pos, $head.pos, (node, _pos, parent) => {\n      if (parent !== null && parent.eq(parentNode)) {\n        this.nodes.push(node);\n        return false;\n      }\n      return;\n    });\n  }\n\n  static create(doc: Node, from: number, to = from): MultipleNodeSelection {\n    return new MultipleNodeSelection(doc.resolve(from), doc.resolve(to));\n  }\n\n  content(): Slice {\n    return new Slice(Fragment.from(this.nodes), 0, 0);\n  }\n\n  eq(selection: Selection): boolean {\n    if (!(selection instanceof MultipleNodeSelection)) {\n      return false;\n    }\n\n    if (this.nodes.length !== selection.nodes.length) {\n      return false;\n    }\n\n    if (this.from !== selection.from || this.to !== selection.to) {\n      return false;\n    }\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      if (!this.nodes[i].eq(selection.nodes[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  map(doc: Node, mapping: Mappable): Selection {\n    let fromResult = mapping.mapResult(this.from);\n    let toResult = mapping.mapResult(this.to);\n\n    if (toResult.deleted) {\n      return Selection.near(doc.resolve(fromResult.pos));\n    }\n\n    if (fromResult.deleted) {\n      return Selection.near(doc.resolve(toResult.pos));\n    }\n\n    return new MultipleNodeSelection(\n      doc.resolve(fromResult.pos),\n      doc.resolve(toResult.pos)\n    );\n  }\n\n  toJSON(): any {\n    return { type: \"node\", anchor: this.anchor, head: this.head };\n  }\n}\n","import { Editor } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\nimport { NodeSelection, Plugin, PluginKey, Selection } from \"prosemirror-state\";\nimport * as pv from \"prosemirror-view\";\nimport { EditorView } from \"prosemirror-view\";\nimport styles from \"../../editor.module.css\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\nimport { SlashMenuPluginKey } from \"../SlashMenu/SlashMenuExtension\";\nimport {\n  BlockSideMenu,\n  BlockSideMenuDynamicParams,\n  BlockSideMenuFactory,\n  BlockSideMenuStaticParams,\n} from \"./BlockSideMenuFactoryTypes\";\nimport { DraggableBlocksOptions } from \"./DraggableBlocksExtension\";\nimport { MultipleNodeSelection } from \"./MultipleNodeSelection\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\n\nconst serializeForClipboard = (pv as any).__serializeForClipboard;\n// code based on https://github.com/ueberdosis/tiptap/issues/323#issuecomment-506637799\n\nlet dragImageElement: Element | undefined;\n\nfunction getDraggableBlockFromCoords(\n  coords: { left: number; top: number },\n  view: EditorView\n) {\n  if (!view.dom.isConnected) {\n    // view is not connected to the DOM, this can cause posAtCoords to fail\n    // (Cannot read properties of null (reading 'nearestDesc'), https://github.com/TypeCellOS/BlockNote/issues/123)\n    return undefined;\n  }\n\n  let pos = view.posAtCoords(coords);\n  if (!pos) {\n    return undefined;\n  }\n  let node = view.domAtPos(pos.pos).node as HTMLElement;\n\n  if (node === view.dom) {\n    // mouse over root\n    return undefined;\n  }\n\n  while (\n    node &&\n    node.parentNode &&\n    node.parentNode !== view.dom &&\n    !node.hasAttribute?.(\"data-id\")\n  ) {\n    node = node.parentNode as HTMLElement;\n  }\n  if (!node) {\n    return undefined;\n  }\n  return { node, id: node.getAttribute(\"data-id\")! };\n}\n\nfunction blockPositionFromCoords(\n  coords: { left: number; top: number },\n  view: EditorView\n) {\n  let block = getDraggableBlockFromCoords(coords, view);\n\n  if (block && block.node.nodeType === 1) {\n    // TODO: this uses undocumented PM APIs? do we need this / let's add docs?\n    const docView = (view as any).docView;\n    let desc = docView.nearestDesc(block.node, true);\n    if (!desc || desc === docView) {\n      return null;\n    }\n    return desc.posBefore;\n  }\n  return null;\n}\n\nfunction blockPositionsFromSelection(selection: Selection, doc: Node) {\n  // Absolute positions just before the first block spanned by the selection, and just after the last block. Having the\n  // selection start and end just before and just after the target blocks ensures no whitespace/line breaks are left\n  // behind after dragging & dropping them.\n  let beforeFirstBlockPos: number;\n  let afterLastBlockPos: number;\n\n  // Even the user starts dragging blocks but drops them in the same place, the selection will still be moved just\n  // before & just after the blocks spanned by the selection, and therefore doesn't need to change if they try to drag\n  // the same blocks again. If this happens, the anchor & head move out of the block content node they were originally\n  // in. If the anchor should update but the head shouldn't and vice versa, it means the user selection is outside a\n  // block content node, which should never happen.\n  const selectionStartInBlockContent =\n    doc.resolve(selection.from).node().type.spec.group === \"blockContent\";\n  const selectionEndInBlockContent =\n    doc.resolve(selection.to).node().type.spec.group === \"blockContent\";\n\n  // Ensures that entire outermost nodes are selected if the selection spans multiple nesting levels.\n  const minDepth = Math.min(selection.$anchor.depth, selection.$head.depth);\n\n  if (selectionStartInBlockContent && selectionEndInBlockContent) {\n    // Absolute positions at the start of the first block in the selection and at the end of the last block. User\n    // selections will always start and end in block content nodes, but we want the start and end positions of their\n    // parent block nodes, which is why minDepth - 1 is used.\n    const startFirstBlockPos = selection.$from.start(minDepth - 1);\n    const endLastBlockPos = selection.$to.end(minDepth - 1);\n\n    // Shifting start and end positions by one moves them just outside the first and last selected blocks.\n    beforeFirstBlockPos = doc.resolve(startFirstBlockPos - 1).pos;\n    afterLastBlockPos = doc.resolve(endLastBlockPos + 1).pos;\n  } else {\n    beforeFirstBlockPos = selection.from;\n    afterLastBlockPos = selection.to;\n  }\n\n  return { from: beforeFirstBlockPos, to: afterLastBlockPos };\n}\n\nfunction setDragImage(view: EditorView, from: number, to = from) {\n  if (from === to) {\n    // Moves to position to be just after the first (and only) selected block.\n    to += view.state.doc.resolve(from + 1).node().nodeSize;\n  }\n\n  // Parent element is cloned to remove all unselected children without affecting the editor content.\n  const parentClone = view.domAtPos(from).node.cloneNode(true) as Element;\n  const parent = view.domAtPos(from).node as Element;\n\n  const getElementIndex = (parentElement: Element, targetElement: Element) =>\n    Array.prototype.indexOf.call(parentElement.children, targetElement);\n\n  const firstSelectedBlockIndex = getElementIndex(\n    parent,\n    // Expects from position to be just before the first selected block.\n    view.domAtPos(from + 1).node.parentElement!\n  );\n  const lastSelectedBlockIndex = getElementIndex(\n    parent,\n    // Expects to position to be just after the last selected block.\n    view.domAtPos(to - 1).node.parentElement!\n  );\n\n  for (let i = parent.childElementCount - 1; i >= 0; i--) {\n    if (i > lastSelectedBlockIndex || i < firstSelectedBlockIndex) {\n      parentClone.removeChild(parentClone.children[i]);\n    }\n  }\n\n  // dataTransfer.setDragImage(element) only works if element is attached to the DOM.\n  unsetDragImage();\n  dragImageElement = parentClone;\n\n  // TODO: This is hacky, need a better way of assigning classes to the editor so that they can also be applied to the\n  //  drag preview.\n  const classes = view.dom.className.split(\" \");\n  const inheritedClasses = classes\n    .filter(\n      (className) =>\n        !className.includes(\"bn\") &&\n        !className.includes(\"ProseMirror\") &&\n        !className.includes(\"editor\")\n    )\n    .join(\" \");\n\n  dragImageElement.className =\n    dragImageElement.className +\n    \" \" +\n    styles.dragPreview +\n    \" \" +\n    inheritedClasses;\n\n  document.body.appendChild(dragImageElement);\n}\n\nfunction unsetDragImage() {\n  if (dragImageElement !== undefined) {\n    document.body.removeChild(dragImageElement);\n    dragImageElement = undefined;\n  }\n}\n\nfunction dragStart(e: DragEvent, view: EditorView) {\n  if (!e.dataTransfer) {\n    return;\n  }\n\n  const editorBoundingBox = view.dom.getBoundingClientRect();\n\n  let coords = {\n    left: editorBoundingBox.left + editorBoundingBox.width / 2, // take middle of editor\n    top: e.clientY,\n  };\n\n  let pos = blockPositionFromCoords(coords, view);\n  if (pos != null) {\n    const selection = view.state.selection;\n    const doc = view.state.doc;\n\n    const { from, to } = blockPositionsFromSelection(selection, doc);\n\n    const draggedBlockInSelection = from <= pos && pos < to;\n    const multipleBlocksSelected =\n      selection.$anchor.node() !== selection.$head.node() ||\n      selection instanceof MultipleNodeSelection;\n\n    if (draggedBlockInSelection && multipleBlocksSelected) {\n      view.dispatch(\n        view.state.tr.setSelection(MultipleNodeSelection.create(doc, from, to))\n      );\n      setDragImage(view, from, to);\n    } else {\n      view.dispatch(\n        view.state.tr.setSelection(NodeSelection.create(view.state.doc, pos))\n      );\n      setDragImage(view, pos);\n    }\n\n    let slice = view.state.selection.content();\n    let { dom, text } = serializeForClipboard(view, slice);\n\n    e.dataTransfer.clearData();\n    e.dataTransfer.setData(\"text/html\", dom.innerHTML);\n    e.dataTransfer.setData(\"text/plain\", text);\n    e.dataTransfer.effectAllowed = \"move\";\n    e.dataTransfer.setDragImage(dragImageElement!, 0, 0);\n    view.dragging = { slice, move: true };\n  }\n}\n\nexport type BlockMenuViewProps = {\n  tiptapEditor: Editor;\n  editor: BlockNoteEditor;\n  blockMenuFactory: BlockSideMenuFactory;\n  horizontalPosAnchoredAtRoot: boolean;\n};\n\nexport class BlockMenuView {\n  editor: BlockNoteEditor;\n  private ttEditor: Editor;\n\n  // When true, the drag handle with be anchored at the same level as root elements\n  // When false, the drag handle with be just to the left of the element\n  horizontalPosAnchoredAtRoot: boolean;\n\n  horizontalPosAnchor: number;\n\n  blockMenu: BlockSideMenu;\n\n  hoveredBlock: HTMLElement | undefined;\n\n  // Used to check if currently dragged content comes from this editor instance.\n  isDragging = false;\n  menuOpen = false;\n  menuFrozen = false;\n\n  constructor({\n    tiptapEditor,\n    editor,\n    blockMenuFactory,\n    horizontalPosAnchoredAtRoot,\n  }: BlockMenuViewProps) {\n    this.editor = editor;\n    this.ttEditor = tiptapEditor;\n    this.horizontalPosAnchoredAtRoot = horizontalPosAnchoredAtRoot;\n    this.horizontalPosAnchor = (\n      this.ttEditor.view.dom.firstChild! as HTMLElement\n    ).getBoundingClientRect().x;\n\n    this.blockMenu = blockMenuFactory(this.getStaticParams());\n\n    document.body.addEventListener(\"drop\", this.onDrop, true);\n    document.body.addEventListener(\"dragover\", this.onDragOver);\n    this.ttEditor.view.dom.addEventListener(\"dragstart\", this.onDragStart);\n\n    // Shows or updates menu position whenever the cursor moves, if the menu isn't frozen.\n    document.body.addEventListener(\"mousemove\", this.onMouseMove, true);\n\n    // Makes menu scroll with the page.\n    document.addEventListener(\"scroll\", this.onScroll);\n\n    // Hides and unfreezes the menu whenever the user selects the editor with the mouse or presses a key.\n    // TODO: Better integration with suggestions menu and only editor scope?\n    document.body.addEventListener(\"mousedown\", this.onMouseDown, true);\n    document.body.addEventListener(\"keydown\", this.onKeyDown, true);\n  }\n\n  /**\n   * Sets isDragging when dragging text.\n   */\n  onDragStart = () => {\n    this.isDragging = true;\n  };\n\n  /**\n   * If the event is outside the editor contents,\n   * we dispatch a fake event, so that we can still drop the content\n   * when dragging / dropping to the side of the editor\n   */\n  onDrop = (event: DragEvent) => {\n    if ((event as any).synthetic || !this.isDragging) {\n      return;\n    }\n    let pos = this.ttEditor.view.posAtCoords({\n      left: event.clientX,\n      top: event.clientY,\n    });\n\n    this.isDragging = false;\n\n    if (!pos || pos.inside === -1) {\n      const evt = new Event(\"drop\", event) as any;\n      const editorBoundingBox = (\n        this.ttEditor.view.dom.firstChild! as HTMLElement\n      ).getBoundingClientRect();\n      evt.clientX = editorBoundingBox.left + editorBoundingBox.width / 2;\n      evt.clientY = event.clientY;\n      evt.dataTransfer = event.dataTransfer;\n      evt.preventDefault = () => event.preventDefault();\n      evt.synthetic = true; // prevent recursion\n      // console.log(\"dispatch fake drop\");\n      this.ttEditor.view.dom.dispatchEvent(evt);\n    }\n  };\n\n  /**\n   * If the event is outside of the editor contents,\n   * we dispatch a fake event, so that we can still drop the content\n   * when dragging / dropping to the side of the editor\n   */\n  onDragOver = (event: DragEvent) => {\n    if ((event as any).synthetic || !this.isDragging) {\n      return;\n    }\n    let pos = this.ttEditor.view.posAtCoords({\n      left: event.clientX,\n      top: event.clientY,\n    });\n\n    if (!pos || pos.inside === -1) {\n      const evt = new Event(\"dragover\", event) as any;\n      const editorBoundingBox = (\n        this.ttEditor.view.dom.firstChild! as HTMLElement\n      ).getBoundingClientRect();\n      evt.clientX = editorBoundingBox.left + editorBoundingBox.width / 2;\n      evt.clientY = event.clientY;\n      evt.dataTransfer = event.dataTransfer;\n      evt.preventDefault = () => event.preventDefault();\n      evt.synthetic = true; // prevent recursion\n      // console.log(\"dispatch fake dragover\");\n      this.ttEditor.view.dom.dispatchEvent(evt);\n    }\n  };\n\n  onKeyDown = (_event: KeyboardEvent) => {\n    if (this.menuOpen) {\n      this.menuOpen = false;\n      this.blockMenu.hide();\n    }\n\n    this.menuFrozen = false;\n  };\n\n  onMouseDown = (event: MouseEvent) => {\n    if (this.blockMenu.element?.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    if (this.menuOpen) {\n      this.menuOpen = false;\n      this.blockMenu.hide();\n    }\n\n    this.menuFrozen = false;\n  };\n\n  onMouseMove = (event: MouseEvent) => {\n    if (this.menuFrozen) {\n      return;\n    }\n\n    // Editor itself may have padding or other styling which affects size/position, so we get the boundingRect of\n    // the first child (i.e. the blockGroup that wraps all blocks in the editor) for a more accurate bounding box.\n    const editorBoundingBox = (\n      this.ttEditor.view.dom.firstChild! as HTMLElement\n    ).getBoundingClientRect();\n\n    this.horizontalPosAnchor = editorBoundingBox.x;\n\n    // Gets block at mouse cursor's vertical position.\n    const coords = {\n      left: editorBoundingBox.left + editorBoundingBox.width / 2, // take middle of editor\n      top: event.clientY,\n    };\n    const block = getDraggableBlockFromCoords(coords, this.ttEditor.view);\n\n    // Closes the menu if the mouse cursor is beyond the editor vertically.\n    if (!block || !this.editor.isEditable) {\n      if (this.menuOpen) {\n        this.menuOpen = false;\n        this.blockMenu.hide();\n      }\n\n      return;\n    }\n\n    // Doesn't update if the menu is already open and the mouse cursor is still hovering the same block.\n    if (\n      this.menuOpen &&\n      this.hoveredBlock?.hasAttribute(\"data-id\") &&\n      this.hoveredBlock?.getAttribute(\"data-id\") === block.id\n    ) {\n      return;\n    }\n\n    this.hoveredBlock = block.node;\n\n    // Gets the block's content node, which lets to ignore child blocks when determining the block menu's position.\n    const blockContent = block.node.firstChild as HTMLElement;\n\n    if (!blockContent) {\n      return;\n    }\n\n    // Shows or updates elements.\n    if (this.editor.isEditable) {\n      if (!this.menuOpen) {\n        this.menuOpen = true;\n        this.blockMenu.render(this.getDynamicParams(), true);\n      } else {\n        this.blockMenu.render(this.getDynamicParams(), false);\n      }\n    }\n  };\n\n  onScroll = () => {\n    if (this.menuOpen) {\n      this.blockMenu.render(this.getDynamicParams(), false);\n    }\n  };\n\n  destroy() {\n    if (this.menuOpen) {\n      this.menuOpen = false;\n      this.blockMenu.hide();\n    }\n    document.body.removeEventListener(\"mousemove\", this.onMouseMove);\n    document.body.removeEventListener(\"dragover\", this.onDragOver);\n    this.ttEditor.view.dom.removeEventListener(\"dragstart\", this.onDragStart);\n    document.body.removeEventListener(\"drop\", this.onDrop);\n    document.body.removeEventListener(\"mousedown\", this.onMouseDown);\n    document.removeEventListener(\"scroll\", this.onScroll);\n    document.body.removeEventListener(\"keydown\", this.onKeyDown);\n  }\n\n  addBlock() {\n    this.menuOpen = false;\n    this.menuFrozen = true;\n    this.blockMenu.hide();\n\n    const blockContent = this.hoveredBlock!.firstChild! as HTMLElement;\n    const blockContentBoundingBox = blockContent.getBoundingClientRect();\n\n    const pos = this.ttEditor.view.posAtCoords({\n      left: blockContentBoundingBox.left + blockContentBoundingBox.width / 2,\n      top: blockContentBoundingBox.top + blockContentBoundingBox.height / 2,\n    });\n    if (!pos) {\n      return;\n    }\n\n    const blockInfo = getBlockInfoFromPos(this.ttEditor.state.doc, pos.pos);\n    if (blockInfo === undefined) {\n      return;\n    }\n\n    const { contentNode, endPos } = blockInfo;\n\n    // Creates a new block if current one is not empty for the suggestion menu to open in.\n    if (contentNode.textContent.length !== 0) {\n      const newBlockInsertionPos = endPos + 1;\n      const newBlockContentPos = newBlockInsertionPos + 2;\n\n      this.ttEditor\n        .chain()\n        .BNCreateBlock(newBlockInsertionPos)\n        .BNUpdateBlock(newBlockContentPos, { type: \"paragraph\", props: {} })\n        .setTextSelection(newBlockContentPos)\n        .run();\n    } else {\n      this.ttEditor.commands.setTextSelection(endPos);\n    }\n\n    // Focuses and activates the suggestion menu.\n    this.ttEditor.view.focus();\n    this.ttEditor.view.dispatch(\n      this.ttEditor.view.state.tr.scrollIntoView().setMeta(SlashMenuPluginKey, {\n        // TODO import suggestion plugin key\n        activate: true,\n        type: \"drag\",\n      })\n    );\n  }\n\n  getStaticParams(): BlockSideMenuStaticParams {\n    return {\n      editor: this.editor,\n      addBlock: () => this.addBlock(),\n      blockDragStart: (event: DragEvent) => {\n        // Sets isDragging when dragging blocks.\n        this.isDragging = true;\n        dragStart(event, this.ttEditor.view);\n      },\n      blockDragEnd: () => unsetDragImage(),\n      freezeMenu: () => {\n        this.menuFrozen = true;\n      },\n      unfreezeMenu: () => {\n        this.menuFrozen = false;\n      },\n    };\n  }\n\n  getDynamicParams(): BlockSideMenuDynamicParams {\n    const blockContent = this.hoveredBlock!.firstChild! as HTMLElement;\n    const blockContentBoundingBox = blockContent.getBoundingClientRect();\n\n    return {\n      block: this.editor.getBlock(this.hoveredBlock!.getAttribute(\"data-id\")!)!,\n      referenceRect: new DOMRect(\n        this.horizontalPosAnchoredAtRoot\n          ? this.horizontalPosAnchor\n          : blockContentBoundingBox.x,\n        blockContentBoundingBox.y,\n        blockContentBoundingBox.width,\n        blockContentBoundingBox.height\n      ),\n    };\n  }\n}\n\nexport const createDraggableBlocksPlugin = (\n  options: DraggableBlocksOptions\n) => {\n  return new Plugin({\n    key: new PluginKey(\"DraggableBlocksPlugin\"),\n    view: () =>\n      new BlockMenuView({\n        tiptapEditor: options.tiptapEditor,\n        editor: options.editor,\n        blockMenuFactory: options.blockSideMenuFactory,\n        horizontalPosAnchoredAtRoot: true,\n      }),\n  });\n};\n","import { Editor, Extension } from \"@tiptap/core\";\nimport { BlockSideMenuFactory } from \"./BlockSideMenuFactoryTypes\";\nimport { createDraggableBlocksPlugin } from \"./DraggableBlocksPlugin\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\n\nexport type DraggableBlocksOptions = {\n  tiptapEditor: Editor;\n  editor: BlockNoteEditor;\n  blockSideMenuFactory: BlockSideMenuFactory;\n};\n\n/**\n * This extension adds a menu to the side of blocks which features various BlockNote functions such as adding and\n * removing blocks. More importantly, it adds a drag handle which allows the user to drag and drop blocks.\n *\n * code based on https://github.com/ueberdosis/tiptap/issues/323#issuecomment-506637799\n */\nexport const DraggableBlocksExtension =\n  Extension.create<DraggableBlocksOptions>({\n    name: \"DraggableBlocksExtension\",\n    priority: 1000, // Need to be high, in order to hide menu when typing slash\n    addProseMirrorPlugins() {\n      if (!this.options.blockSideMenuFactory) {\n        throw new Error(\n          \"UI Element factory not defined for DraggableBlocksExtension\"\n        );\n      }\n      return [\n        createDraggableBlocksPlugin({\n          tiptapEditor: this.editor,\n          editor: this.options.editor,\n          blockSideMenuFactory: this.options.blockSideMenuFactory,\n        }),\n      ];\n    },\n  });\n","import {\n  Editor,\n  isNodeSelection,\n  isTextSelection,\n  posToDOMRect,\n} from \"@tiptap/core\";\nimport { EditorState, Plugin, PluginKey } from \"prosemirror-state\";\nimport { EditorView } from \"prosemirror-view\";\nimport { BlockNoteEditor } from \"../..\";\nimport {\n  FormattingToolbar,\n  FormattingToolbarDynamicParams,\n  FormattingToolbarFactory,\n  FormattingToolbarStaticParams,\n} from \"./FormattingToolbarFactoryTypes\";\n\n// Same as TipTap bubblemenu plugin, but with these changes:\n// https://github.com/ueberdosis/tiptap/pull/2596/files\nexport interface FormattingToolbarPluginProps {\n  pluginKey: PluginKey;\n  tiptapEditor: Editor;\n  editor: BlockNoteEditor;\n  formattingToolbarFactory: FormattingToolbarFactory;\n  shouldShow?:\n    | ((props: {\n        editor: BlockNoteEditor;\n        view: EditorView;\n        state: EditorState;\n        oldState?: EditorState;\n        from: number;\n        to: number;\n      }) => boolean)\n    | null;\n}\n\nexport type FormattingToolbarViewProps = FormattingToolbarPluginProps & {\n  view: EditorView;\n};\n\nexport class FormattingToolbarView {\n  public editor: BlockNoteEditor;\n  private ttEditor: Editor;\n\n  public view: EditorView;\n\n  public formattingToolbar: FormattingToolbar;\n\n  public preventHide = false;\n\n  public preventShow = false;\n\n  public toolbarIsOpen = false;\n\n  public prevWasEditable: boolean | null = null;\n\n  public shouldShow: Exclude<FormattingToolbarPluginProps[\"shouldShow\"], null> =\n    ({ view, state, from, to }) => {\n      const { doc, selection } = state;\n      const { empty } = selection;\n\n      // Sometime check for `empty` is not enough.\n      // Doubleclick an empty paragraph returns a node size of 2.\n      // So we check also for an empty text size.\n      const isEmptyTextBlock =\n        !doc.textBetween(from, to).length && isTextSelection(state.selection);\n\n      return !(!view.hasFocus() || empty || isEmptyTextBlock);\n    };\n\n  constructor({\n    editor,\n    tiptapEditor,\n    formattingToolbarFactory,\n    view,\n    shouldShow,\n  }: FormattingToolbarViewProps) {\n    this.editor = editor;\n    this.ttEditor = tiptapEditor;\n    this.view = view;\n\n    this.formattingToolbar = formattingToolbarFactory(this.getStaticParams());\n\n    if (shouldShow) {\n      this.shouldShow = shouldShow;\n    }\n\n    this.view.dom.addEventListener(\"mousedown\", this.viewMousedownHandler);\n    this.view.dom.addEventListener(\"mouseup\", this.viewMouseupHandler);\n    this.view.dom.addEventListener(\"dragstart\", this.dragstartHandler);\n\n    this.ttEditor.on(\"focus\", this.focusHandler);\n    this.ttEditor.on(\"blur\", this.blurHandler);\n    \n    document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n\n  viewMousedownHandler = () => {\n    this.preventShow = true;\n  };\n\n  viewMouseupHandler = () => {\n    this.preventShow = false;\n    setTimeout(() => this.update(this.ttEditor.view));\n  };\n\n  dragstartHandler = () => {\n    this.formattingToolbar.hide();\n    this.toolbarIsOpen = false;\n  };\n\n  focusHandler = () => {\n    // we use `setTimeout` to make sure `selection` is already updated\n    setTimeout(() => this.update(this.ttEditor.view));\n  };\n\n  blurHandler = ({ event }: { event: FocusEvent }) => {\n    if (this.preventHide) {\n      this.preventHide = false;\n\n      return;\n    }\n\n    if (\n      event?.relatedTarget &&\n      this.formattingToolbar.element?.parentNode?.contains(\n        event.relatedTarget as Node\n      )\n    ) {\n      return;\n    }\n\n    if (this.toolbarIsOpen) {\n      this.formattingToolbar.hide();\n      this.toolbarIsOpen = false;\n    }\n  };\n\n  scrollHandler = () => {\n    if (this.toolbarIsOpen) {\n      this.formattingToolbar.render(this.getDynamicParams(), false);\n    }\n  };\n\n  update(view: EditorView, oldState?: EditorState) {\n    const { state, composing } = view;\n    const { doc, selection } = state;\n    const isSame =\n      oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);\n\n    if (\n      (this.prevWasEditable === null ||\n        this.prevWasEditable === this.editor.isEditable) &&\n      (composing || isSame)\n    ) {\n      return;\n    }\n\n    this.prevWasEditable = this.editor.isEditable;\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    const shouldShow = this.shouldShow?.({\n      editor: this.editor,\n      view,\n      state,\n      oldState,\n      from,\n      to,\n    });\n\n    // Checks if menu should be shown.\n    if (\n      this.editor.isEditable &&\n      !this.toolbarIsOpen &&\n      !this.preventShow &&\n      (shouldShow || this.preventHide)\n    ) {\n      this.formattingToolbar.render(this.getDynamicParams(), true);\n      this.toolbarIsOpen = true;\n\n      // TODO: Is this necessary? Also for other menu plugins.\n      // Listener stops focus moving to the menu on click.\n      this.formattingToolbar.element!.addEventListener(\"mousedown\", (event) =>\n        event.preventDefault()\n      );\n\n      return;\n    }\n\n    // Checks if menu should be updated.\n    if (\n      this.toolbarIsOpen &&\n      !this.preventShow &&\n      (shouldShow || this.preventHide)\n    ) {\n      this.formattingToolbar.render(this.getDynamicParams(), false);\n      return;\n    }\n\n    // Checks if menu should be hidden.\n    if (\n      this.toolbarIsOpen &&\n      !this.preventHide &&\n      (!shouldShow || this.preventShow || !this.editor.isEditable)\n    ) {\n      this.formattingToolbar.hide();\n      this.toolbarIsOpen = false;\n\n      // Listener stops focus moving to the menu on click.\n      this.formattingToolbar.element!.removeEventListener(\n        \"mousedown\",\n        (event) => event.preventDefault()\n      );\n\n      return;\n    }\n  }\n\n  destroy() {\n    this.view.dom.removeEventListener(\"mousedown\", this.viewMousedownHandler);\n    this.view.dom.removeEventListener(\"mouseup\", this.viewMouseupHandler);\n    this.view.dom.removeEventListener(\"dragstart\", this.dragstartHandler);\n\n    this.ttEditor.off(\"focus\", this.focusHandler);\n    this.ttEditor.off(\"blur\", this.blurHandler);\n\n    document.removeEventListener(\"scroll\", this.scrollHandler);\n  }\n\n  getSelectionBoundingBox() {\n    const { state } = this.ttEditor.view;\n    const { selection } = state;\n\n    // support for CellSelections\n    const { ranges } = selection;\n    const from = Math.min(...ranges.map((range) => range.$from.pos));\n    const to = Math.max(...ranges.map((range) => range.$to.pos));\n\n    if (isNodeSelection(selection)) {\n      const node = this.ttEditor.view.nodeDOM(from) as HTMLElement;\n\n      if (node) {\n        return node.getBoundingClientRect();\n      }\n    }\n\n    return posToDOMRect(this.ttEditor.view, from, to);\n  }\n\n  getStaticParams(): FormattingToolbarStaticParams {\n    return {\n      editor: this.editor,\n    };\n  }\n\n  getDynamicParams(): FormattingToolbarDynamicParams {\n    return {\n      referenceRect: this.getSelectionBoundingBox(),\n    };\n  }\n}\n\nexport const createFormattingToolbarPlugin = (\n  options: FormattingToolbarPluginProps\n) => {\n  return new Plugin({\n    key: new PluginKey(\"FormattingToolbarPlugin\"),\n    view: (view) => new FormattingToolbarView({ view, ...options }),\n  });\n};\n","import { Extension } from \"@tiptap/core\";\nimport { PluginKey } from \"prosemirror-state\";\nimport { BlockNoteEditor } from \"../..\";\nimport { FormattingToolbarFactory } from \"./FormattingToolbarFactoryTypes\";\nimport { createFormattingToolbarPlugin } from \"./FormattingToolbarPlugin\";\n\n/**\n * The menu that is displayed when selecting a piece of text.\n */\nexport const FormattingToolbarExtension = Extension.create<{\n  formattingToolbarFactory: FormattingToolbarFactory;\n  editor: BlockNoteEditor;\n}>({\n  name: \"FormattingToolbarExtension\",\n\n  addProseMirrorPlugins() {\n    if (!this.options.formattingToolbarFactory || !this.options.editor) {\n      throw new Error(\n        \"required args not defined for FormattingToolbarExtension\"\n      );\n    }\n\n    return [\n      createFormattingToolbarPlugin({\n        tiptapEditor: this.editor,\n        editor: this.options.editor,\n        formattingToolbarFactory: this.options.formattingToolbarFactory,\n        pluginKey: new PluginKey(\"FormattingToolbarPlugin\"),\n      }),\n    ];\n  },\n});\n","import { Editor, getMarkRange, posToDOMRect, Range } from \"@tiptap/core\";\nimport { Mark } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport {\n  HyperlinkToolbar,\n  HyperlinkToolbarDynamicParams,\n  HyperlinkToolbarFactory,\n  HyperlinkToolbarStaticParams,\n} from \"./HyperlinkToolbarFactoryTypes\";\nconst PLUGIN_KEY = new PluginKey(\"HyperlinkToolbarPlugin\");\n\nexport type HyperlinkToolbarPluginProps = {\n  hyperlinkToolbarFactory: HyperlinkToolbarFactory;\n};\n\nexport type HyperlinkToolbarViewProps = {\n  editor: Editor;\n  hyperlinkToolbarFactory: HyperlinkToolbarFactory;\n};\n\nclass HyperlinkToolbarView {\n  editor: Editor;\n\n  hyperlinkToolbar: HyperlinkToolbar;\n\n  menuUpdateTimer: NodeJS.Timeout | undefined;\n  startMenuUpdateTimer: () => void;\n  stopMenuUpdateTimer: () => void;\n\n  mouseHoveredHyperlinkMark: Mark | undefined;\n  mouseHoveredHyperlinkMarkRange: Range | undefined;\n\n  keyboardHoveredHyperlinkMark: Mark | undefined;\n  keyboardHoveredHyperlinkMarkRange: Range | undefined;\n\n  hyperlinkMark: Mark | undefined;\n  hyperlinkMarkRange: Range | undefined;\n\n  constructor({ editor, hyperlinkToolbarFactory }: HyperlinkToolbarViewProps) {\n    this.editor = editor;\n\n    this.hyperlinkToolbar = hyperlinkToolbarFactory(this.getStaticParams());\n\n    this.startMenuUpdateTimer = () => {\n      this.menuUpdateTimer = setTimeout(() => {\n        this.update();\n      }, 250);\n    };\n\n    this.stopMenuUpdateTimer = () => {\n      if (this.menuUpdateTimer) {\n        clearTimeout(this.menuUpdateTimer);\n        this.menuUpdateTimer = undefined;\n      }\n\n      return false;\n    };\n\n    this.editor.view.dom.addEventListener(\"mouseover\", this.mouseOverHandler);\n    document.addEventListener(\"scroll\", this.scrollHandler);\n  }\n\n  mouseOverHandler = (event: MouseEvent) => {\n    // Resets the hyperlink mark currently hovered by the mouse cursor.\n    this.mouseHoveredHyperlinkMark = undefined;\n    this.mouseHoveredHyperlinkMarkRange = undefined;\n\n    this.stopMenuUpdateTimer();\n\n    if (\n      event.target instanceof HTMLAnchorElement &&\n      event.target.nodeName === \"A\"\n    ) {\n      // Finds link mark at the hovered element's position to update mouseHoveredHyperlinkMark and\n      // mouseHoveredHyperlinkMarkRange.\n      const hoveredHyperlinkElement = event.target;\n      const posInHoveredHyperlinkMark =\n        this.editor.view.posAtDOM(hoveredHyperlinkElement, 0) + 1;\n      const resolvedPosInHoveredHyperlinkMark = this.editor.state.doc.resolve(\n        posInHoveredHyperlinkMark\n      );\n      const marksAtPos = resolvedPosInHoveredHyperlinkMark.marks();\n\n      for (const mark of marksAtPos) {\n        if (mark.type.name === this.editor.schema.mark(\"link\").type.name) {\n          this.mouseHoveredHyperlinkMark = mark;\n          this.mouseHoveredHyperlinkMarkRange =\n            getMarkRange(\n              resolvedPosInHoveredHyperlinkMark,\n              mark.type,\n              mark.attrs\n            ) || undefined;\n\n          break;\n        }\n      }\n    }\n\n    this.startMenuUpdateTimer();\n\n    return false;\n  };\n\n  scrollHandler = () => {\n    if (this.hyperlinkMark !== undefined) {\n      this.hyperlinkToolbar.render(this.getDynamicParams(), false);\n    }\n  };\n\n  update() {\n    if (!this.editor.view.hasFocus()) {\n      return;\n    }\n\n    // Saves the currently hovered hyperlink mark before it's updated.\n    const prevHyperlinkMark = this.hyperlinkMark;\n\n    // Resets the currently hovered hyperlink mark.\n    this.hyperlinkMark = undefined;\n    this.hyperlinkMarkRange = undefined;\n\n    // Resets the hyperlink mark currently hovered by the keyboard cursor.\n    this.keyboardHoveredHyperlinkMark = undefined;\n    this.keyboardHoveredHyperlinkMarkRange = undefined;\n\n    // Finds link mark at the editor selection's position to update keyboardHoveredHyperlinkMark and\n    // keyboardHoveredHyperlinkMarkRange.\n    if (this.editor.state.selection.empty) {\n      const marksAtPos = this.editor.state.selection.$from.marks();\n\n      for (const mark of marksAtPos) {\n        if (mark.type.name === this.editor.schema.mark(\"link\").type.name) {\n          this.keyboardHoveredHyperlinkMark = mark;\n          this.keyboardHoveredHyperlinkMarkRange =\n            getMarkRange(\n              this.editor.state.selection.$from,\n              mark.type,\n              mark.attrs\n            ) || undefined;\n\n          break;\n        }\n      }\n    }\n\n    if (this.mouseHoveredHyperlinkMark) {\n      this.hyperlinkMark = this.mouseHoveredHyperlinkMark;\n      this.hyperlinkMarkRange = this.mouseHoveredHyperlinkMarkRange;\n    }\n\n    // Keyboard cursor position takes precedence over mouse hovered hyperlink.\n    if (this.keyboardHoveredHyperlinkMark) {\n      this.hyperlinkMark = this.keyboardHoveredHyperlinkMark;\n      this.hyperlinkMarkRange = this.keyboardHoveredHyperlinkMarkRange;\n    }\n\n    if (this.hyperlinkMark && this.editor.isEditable) {\n      this.getDynamicParams();\n\n      // Shows menu.\n      if (!prevHyperlinkMark) {\n        this.hyperlinkToolbar.render(this.getDynamicParams(), true);\n\n        this.hyperlinkToolbar.element?.addEventListener(\n          \"mouseleave\",\n          this.startMenuUpdateTimer\n        );\n        this.hyperlinkToolbar.element?.addEventListener(\n          \"mouseenter\",\n          this.stopMenuUpdateTimer\n        );\n\n        return;\n      }\n\n      // Updates menu.\n      this.hyperlinkToolbar.render(this.getDynamicParams(), false);\n\n      return;\n    }\n\n    // Hides menu.\n    if (prevHyperlinkMark && (!this.hyperlinkMark || !this.editor.isEditable)) {\n      this.hyperlinkToolbar.element?.removeEventListener(\n        \"mouseleave\",\n        this.startMenuUpdateTimer\n      );\n      this.hyperlinkToolbar.element?.removeEventListener(\n        \"mouseenter\",\n        this.stopMenuUpdateTimer\n      );\n\n      this.hyperlinkToolbar.hide();\n\n      return;\n    }\n  }\n\n  destroy() {\n    this.editor.view.dom.removeEventListener(\n      \"mouseover\",\n      this.mouseOverHandler\n    );\n    document.removeEventListener(\"scroll\", this.scrollHandler);\n  }\n\n  getStaticParams(): HyperlinkToolbarStaticParams {\n    return {\n      editHyperlink: (url: string, text: string) => {\n        const tr = this.editor.view.state.tr.insertText(\n          text,\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.to\n        );\n        tr.addMark(\n          this.hyperlinkMarkRange!.from,\n          this.hyperlinkMarkRange!.from + text.length,\n          this.editor.schema.mark(\"link\", { href: url })\n        );\n        this.editor.view.dispatch(tr);\n        this.editor.view.focus();\n\n        this.hyperlinkToolbar.hide();\n      },\n      deleteHyperlink: () => {\n        this.editor.view.dispatch(\n          this.editor.view.state.tr\n            .removeMark(\n              this.hyperlinkMarkRange!.from,\n              this.hyperlinkMarkRange!.to,\n              this.hyperlinkMark!.type\n            )\n            .setMeta(\"preventAutolink\", true)\n        );\n        this.editor.view.focus();\n\n        this.hyperlinkToolbar.hide();\n      },\n    };\n  }\n\n  getDynamicParams(): HyperlinkToolbarDynamicParams {\n    return {\n      url: this.hyperlinkMark!.attrs.href,\n      text: this.editor.view.state.doc.textBetween(\n        this.hyperlinkMarkRange!.from,\n        this.hyperlinkMarkRange!.to\n      ),\n      referenceRect: posToDOMRect(\n        this.editor.view,\n        this.hyperlinkMarkRange!.from,\n        this.hyperlinkMarkRange!.to\n      ),\n    };\n  }\n}\n\nexport const createHyperlinkToolbarPlugin = (\n  editor: Editor,\n  options: HyperlinkToolbarPluginProps\n) => {\n  return new Plugin({\n    key: PLUGIN_KEY,\n    view: () =>\n      new HyperlinkToolbarView({\n        editor: editor,\n        hyperlinkToolbarFactory: options.hyperlinkToolbarFactory,\n      }),\n  });\n};\n","import { Link } from \"@tiptap/extension-link\";\nimport {\n  createHyperlinkToolbarPlugin,\n  HyperlinkToolbarPluginProps,\n} from \"./HyperlinkToolbarPlugin\";\n\n/**\n * This custom link includes a special menu for editing/deleting/opening the link.\n * The menu will be triggered by hovering over the link with the mouse,\n * or by moving the cursor inside the link text\n */\nconst Hyperlink = Link.extend<HyperlinkToolbarPluginProps>({\n  priority: 500,\n  addProseMirrorPlugins() {\n    if (!this.options.hyperlinkToolbarFactory) {\n      throw new Error(\"UI Element factory not defined for HyperlinkMark\");\n    }\n\n    return [\n      ...(this.parent?.() || []),\n      createHyperlinkToolbarPlugin(this.editor, {\n        hyperlinkToolbarFactory: this.options.hyperlinkToolbarFactory,\n      }),\n    ];\n  },\n});\n\nexport default Hyperlink;\n","import { Editor, Extension } from \"@tiptap/core\";\nimport { Node as ProsemirrorNode } from \"prosemirror-model\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\nimport { Decoration, DecorationSet } from \"prosemirror-view\";\nimport { SlashMenuPluginKey } from \"../SlashMenu/SlashMenuExtension\";\n\nconst PLUGIN_KEY = new PluginKey(`blocknote-placeholder`);\n\n/**\n * This is a modified version of the tiptap\n * placeholder plugin, that also sets hasAnchorClass\n *\n * It does not set a data-placeholder (text is currently done in css)\n *\n */\nexport interface PlaceholderOptions {\n  emptyEditorClass: string;\n  emptyNodeClass: string;\n  isFilterClass: string;\n  hasAnchorClass: string;\n  placeholder:\n    | ((PlaceholderProps: {\n        editor: Editor;\n        node: ProsemirrorNode;\n        pos: number;\n        hasAnchor: boolean;\n      }) => string)\n    | string;\n  showOnlyWhenEditable: boolean;\n  showOnlyCurrent: boolean;\n  includeChildren: boolean;\n}\n\nexport const Placeholder = Extension.create<PlaceholderOptions>({\n  name: \"placeholder\",\n\n  addOptions() {\n    return {\n      emptyEditorClass: \"is-editor-empty\",\n      emptyNodeClass: \"is-empty\",\n      isFilterClass: \"is-filter\",\n      hasAnchorClass: \"has-anchor\",\n      placeholder: \"Write something …\",\n      showOnlyWhenEditable: true,\n      showOnlyCurrent: true,\n      includeChildren: false,\n    };\n  },\n\n  addProseMirrorPlugins() {\n    return [\n      new Plugin({\n        key: PLUGIN_KEY,\n        props: {\n          decorations: (state) => {\n            const { doc, selection } = state;\n            // Get state of slash menu\n            const menuState = SlashMenuPluginKey.getState(state);\n            const active =\n              this.editor.isEditable || !this.options.showOnlyWhenEditable;\n            const { anchor } = selection;\n            const decorations: Decoration[] = [];\n\n            if (!active) {\n              return;\n            }\n\n            doc.descendants((node, pos) => {\n              const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;\n              const isEmpty = !node.isLeaf && !node.childCount;\n\n              if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {\n                const classes = [this.options.emptyNodeClass];\n\n                if (this.editor.isEmpty) {\n                  classes.push(this.options.emptyEditorClass);\n                }\n\n                if (hasAnchor) {\n                  classes.push(this.options.hasAnchorClass);\n                }\n\n                // If slash menu is of drag type and active, show the filter placeholder\n                if (menuState?.triggerCharacter === \"\" && menuState?.active) {\n                  classes.push(this.options.isFilterClass);\n                }\n                // using widget, didn't work (caret position bug)\n                // const decoration = Decoration.widget(\n                //   pos + 1,\n                //   () => {\n                //     const el = document.createElement(\"span\");\n                //     el.innerText = \"hello\";\n                //     return el;\n                //   },\n                //   { side: 0 }\n\n                // Code that sets variables / classes\n                // const ph =\n                //   typeof this.options.placeholder === \"function\"\n                //     ? this.options.placeholder({\n                //         editor: this.editor,\n                //         node,\n                //         pos,\n                //         hasAnchor,\n                //       })\n                //     : this.options.placeholder;\n                // const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                //   class: classes.join(\" \"),\n                //   style: `--placeholder:'${ph.replaceAll(\"'\", \"\\\\'\")}';`,\n                //   \"data-placeholder\": ph,\n                // });\n\n                // Latest version, only set isEmpty and hasAnchor, rest is done via CSS\n\n                const decoration = Decoration.node(pos, pos + node.nodeSize, {\n                  class: classes.join(\" \"),\n                });\n                decorations.push(decoration);\n              }\n\n              return this.options.includeChildren;\n            });\n\n            return DecorationSet.create(doc, decorations);\n          },\n        },\n      }),\n    ];\n  },\n});\n","/**\n * A generic interface used in all suggestion menus (slash menu, mentions, etc)\n */\nexport class SuggestionItem {\n  constructor(public name: string, public match: (query: string) => boolean) {}\n}\n","import { SuggestionItem } from \"../../shared/plugins/suggestion/SuggestionItem\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\n\n/**\n * A class that defines a slash command (/<command>).\n *\n * (Not to be confused with ProseMirror commands nor TipTap commands.)\n */\nexport class BaseSlashMenuItem extends SuggestionItem {\n  /**\n   * Constructs a new slash-command.\n   *\n   * @param name The name of the command\n   * @param execute The callback for creating a new node\n   * @param aliases Aliases for this command\n   */\n  constructor(\n    public readonly name: string,\n    public readonly execute: (editor: BlockNoteEditor) => void,\n    public readonly aliases: string[] = []\n  ) {\n    super(name, (query: string): boolean => {\n      return (\n        this.name.toLowerCase().startsWith(query.toLowerCase()) ||\n        this.aliases.filter((alias) =>\n          alias.toLowerCase().startsWith(query.toLowerCase())\n        ).length !== 0\n      );\n    });\n  }\n}\n","import { BaseSlashMenuItem } from \"./BaseSlashMenuItem\";\nimport { PartialBlock } from \"../Blocks/api/blockTypes\";\nimport { BlockNoteEditor } from \"../../BlockNoteEditor\";\n\nfunction insertOrUpdateBlock(editor: BlockNoteEditor, block: PartialBlock) {\n  const currentBlock = editor.getTextCursorPosition().block;\n\n  if (\n    (currentBlock.content.length === 1 &&\n      currentBlock.content[0].type === \"text\" &&\n      currentBlock.content[0].text === \"/\") ||\n    currentBlock.content.length === 0\n  ) {\n    editor.updateBlock(currentBlock, block);\n  } else {\n    editor.insertBlocks([block], currentBlock, \"after\");\n    editor.setTextCursorPosition(editor.getTextCursorPosition().nextBlock!);\n  }\n}\n\n/**\n * An array containing commands for creating all default blocks.\n */\nexport const defaultSlashMenuItems: BaseSlashMenuItem[] = [\n  // Command for creating a level 1 heading\n  new BaseSlashMenuItem(\n    \"Heading\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"heading\",\n        props: { level: \"1\" },\n      }),\n    [\"h\", \"heading1\", \"h1\"]\n  ),\n\n  // Command for creating a level 2 heading\n  new BaseSlashMenuItem(\n    \"Heading 2\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"heading\",\n        props: { level: \"2\" },\n      }),\n    [\"h2\", \"heading2\", \"subheading\"]\n  ),\n\n  // Command for creating a level 3 heading\n  new BaseSlashMenuItem(\n    \"Heading 3\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"heading\",\n        props: { level: \"3\" },\n      }),\n    [\"h3\", \"heading3\", \"subheading\"]\n  ),\n\n  // Command for creating an ordered list\n  new BaseSlashMenuItem(\n    \"Numbered List\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"numberedListItem\",\n      }),\n    [\"li\", \"list\", \"numberedlist\", \"numbered list\"]\n  ),\n\n  // Command for creating a bullet list\n  new BaseSlashMenuItem(\n    \"Bullet List\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"bulletListItem\",\n      }),\n    [\"ul\", \"list\", \"bulletlist\", \"bullet list\"]\n  ),\n\n  // Command for creating a paragraph (pretty useless)\n  new BaseSlashMenuItem(\n    \"Paragraph\",\n    (editor) =>\n      insertOrUpdateBlock(editor, {\n        type: \"paragraph\",\n      }),\n    [\"p\"]\n  ),\n\n  //     replaceRangeWithNode(editor, range, node);\n\n  //     return true;\n  //   },\n  //   [\"ol\", \"orderedlist\"],\n  //   OrderedListIcon,\n  //   \"Used to display an ordered (enumerated) list item\"\n  // ),\n\n  // Command for creating a blockquote\n  // blockquote: new SlashCommand(\n  //   \"Block Quote\",\n  //   CommandGroup.BASIC_BLOCKS,\n  //   (editor, range) => {\n  //     const paragraph = editor.schema.node(\"paragraph\");\n  //     const node = editor.schema.node(\n  //       \"blockquote\",\n  //       { \"block-id\": uniqueId.generate() },\n  //       paragraph\n  //     );\n\n  //     replaceRangeWithNode(editor, range, node);\n\n  //     return true;\n  //   },\n  //   [\"quote\", \"blockquote\"],\n  //   QuoteIcon,\n  //   \"Used to make a quote stand out\",\n  //   \"Ctrl+Shift+B\"\n  // ),\n\n  // Command for creating a horizontal rule\n  // horizontalRule: new SlashCommand(\n  //   \"Horizontal Rule\",\n  //   CommandGroup.BASIC_BLOCKS,\n  //   (editor, range) => {\n  //     const node = editor.schema.node(\"horizontalRule\", {\n  //       \"block-id\": uniqueId.generate(),\n  //     });\n\n  //     // insert horizontal rule, create a new block after the horizontal rule if applicable\n  //     // and put the cursor in the block after the horizontal rule.\n  //     editor\n  //       .chain()\n  //       .focus()\n  //       .replaceRangeAndUpdateSelection(range, node)\n  //       .command(({ tr, dispatch }) => {\n  //         if (dispatch) {\n  //           // the node immediately after the cursor\n  //           const nodeAfter = tr.selection.$to.nodeAfter;\n\n  //           // the position of the cursor\n  //           const cursorPos = tr.selection.$to.pos;\n\n  //           // check if there is no node after the cursor (end of document)\n  //           if (!nodeAfter) {\n  //             // create a new block of the default type (probably paragraph) after the cursor\n  //             const { parent } = tr.selection.$to;\n  //             const node = parent.type.contentMatch.defaultType?.create();\n\n  //             if (node) {\n  //               tr.insert(cursorPos, node);\n  //             }\n  //           }\n\n  //           // try to put the cursor at the start of the node directly after the inserted horizontal rule\n  //           tr.doc.nodesBetween(cursorPos, cursorPos + 1, (node, pos) => {\n  //             if (node.type.name !== \"horizontalRule\") {\n  //               tr.setSelection(TextSelection.create(tr.doc, pos));\n  //             }\n  //           });\n  //         }\n\n  //         return true;\n  //       })\n  //       .scrollIntoView()\n  //       .run();\n  //     return true;\n  //   },\n  //   [\"hr\", \"horizontalrule\"],\n  //   SeparatorIcon,\n  //   \"Used to separate sections with a horizontal line\"\n  // ),\n\n  // Command for creating a table\n  // table: new SlashCommand(\n  //   \"Table\",\n  //   CommandGroup.BASIC_BLOCKS,\n  //   (editor, range) => {\n  //     editor.chain().focus().deleteRange(range).run();\n  //     // TODO: add blockid, pending https://github.com/ueberdosis/tiptap/pull/1469\n  //     editor\n  //       .chain()\n  //       .focus()\n  //       .insertTable({ rows: 1, cols: 2, withHeaderRow: false })\n  //       .scrollIntoView()\n  //       .run();\n  //     return true;\n  //   },\n  //   [\"table\", \"database\"],\n  //   TableIcon,\n  //   \"Used to create a simple table\"\n  // ),\n];\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    textAlignment: {\n      setTextAlignment: (\n        textAlignment: \"left\" | \"center\" | \"right\" | \"justify\"\n      ) => ReturnType;\n    };\n  }\n}\n\nexport const TextAlignmentExtension = Extension.create({\n  name: \"textAlignment\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        // Attribute is applied to block content instead of container so that child blocks don't inherit the text\n        // alignment styling.\n        types: [\"paragraph\", \"heading\", \"bulletListItem\", \"numberedListItem\"],\n        attributes: {\n          textAlignment: {\n            default: \"left\",\n            parseHTML: (element) => element.getAttribute(\"data-text-alignment\"),\n            renderHTML: (attributes) =>\n              attributes.textAlignment !== \"left\" && {\n                \"data-text-alignment\": attributes.textAlignment,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setTextAlignment:\n        (textAlignment) =>\n        ({ state }) => {\n          const positionsBeforeSelectedContent = [];\n\n          const blockInfo = getBlockInfoFromPos(\n            state.doc,\n            state.selection.from\n          );\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          // Finds all blockContent nodes that the current selection is in.\n          let pos = blockInfo.startPos;\n          while (pos < state.selection.to) {\n            if (\n              state.doc.resolve(pos).node().type.spec.group === \"blockContent\"\n            ) {\n              positionsBeforeSelectedContent.push(pos - 1);\n\n              pos += state.doc.resolve(pos).node().nodeSize - 1;\n            } else {\n              pos += 1;\n            }\n          }\n\n          // Sets text alignment for all blockContent nodes that the current selection is in.\n          for (const pos of positionsBeforeSelectedContent) {\n            state.tr.setNodeAttribute(pos, \"textAlignment\", textAlignment);\n          }\n\n          return true;\n        },\n    };\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { getBlockInfoFromPos } from \"../Blocks/helpers/getBlockInfoFromPos\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    blockTextColor: {\n      setBlockTextColor: (posInBlock: number, color: string) => ReturnType;\n    };\n  }\n}\n\nexport const TextColorExtension = Extension.create({\n  name: \"blockTextColor\",\n\n  addGlobalAttributes() {\n    return [\n      {\n        types: [\"blockContainer\"],\n        attributes: {\n          textColor: {\n            default: \"default\",\n            parseHTML: (element) =>\n              element.hasAttribute(\"data-text-color\")\n                ? element.getAttribute(\"data-text-color\")\n                : \"default\",\n            renderHTML: (attributes) =>\n              attributes.textColor !== \"default\" && {\n                \"data-text-color\": attributes.textColor,\n              },\n          },\n        },\n      },\n    ];\n  },\n\n  addCommands() {\n    return {\n      setBlockTextColor:\n        (posInBlock, color) =>\n        ({ state, view }) => {\n          const blockInfo = getBlockInfoFromPos(state.doc, posInBlock);\n          if (blockInfo === undefined) {\n            return false;\n          }\n\n          state.tr.setNodeAttribute(blockInfo.startPos - 1, \"textColor\", color);\n\n          view.focus();\n\n          return true;\n        },\n    };\n  },\n});\n","import { Mark } from \"@tiptap/core\";\n\ndeclare module \"@tiptap/core\" {\n  interface Commands<ReturnType> {\n    textColor: {\n      setTextColor: (color: string) => ReturnType;\n    };\n  }\n}\n\nexport const TextColorMark = Mark.create({\n  name: \"textColor\",\n\n  addAttributes() {\n    return {\n      color: {\n        default: undefined,\n        parseHTML: (element) => element.getAttribute(\"data-text-color\"),\n        renderHTML: (attributes) => ({\n          \"data-text-color\": attributes.color,\n        }),\n      },\n    };\n  },\n\n  parseHTML() {\n    return [\n      {\n        tag: \"span\",\n        getAttrs: (element) => {\n          if (typeof element === \"string\") {\n            return false;\n          }\n\n          if (element.hasAttribute(\"data-text-color\")) {\n            return { color: element.getAttribute(\"data-text-color\") };\n          }\n\n          return false;\n        },\n      },\n    ];\n  },\n\n  renderHTML({ HTMLAttributes }) {\n    return [\"span\", HTMLAttributes, 0];\n  },\n\n  addCommands() {\n    return {\n      setTextColor:\n        (color) =>\n        ({ commands }) => {\n          if (color !== \"default\") {\n            return commands.setMark(this.name, { color: color });\n          }\n\n          return commands.unsetMark(this.name);\n        },\n    };\n  },\n});\n","import { Extension } from \"@tiptap/core\";\nimport { Plugin, PluginKey } from \"prosemirror-state\";\n\n// based on https://github.com/ueberdosis/tiptap/blob/40a9404c94c7fef7900610c195536384781ae101/demos/src/Experiments/TrailingNode/Vue/trailing-node.ts\n\n/**\n * Extension based on:\n * - https://github.com/ueberdosis/tiptap/blob/v1/packages/tiptap-extensions/src/extensions/TrailingNode.js\n * - https://github.com/remirror/remirror/blob/e0f1bec4a1e8073ce8f5500d62193e52321155b9/packages/prosemirror-trailing-node/src/trailing-node-plugin.ts\n */\n\nexport interface TrailingNodeOptions {\n  node: string;\n}\n\n/**\n * Add a trailing node to the document so the user can always click at the bottom of the document and start typing\n */\nexport const TrailingNode = Extension.create<TrailingNodeOptions>({\n  name: \"trailingNode\",\n\n  addProseMirrorPlugins() {\n    const plugin = new PluginKey(this.name);\n    // const disabledNodes = Object.entries(this.editor.schema.nodes)\n    //   .map(([, value]) => value)\n    //   .filter((node) => this.options.notAfter.includes(node.name));\n\n    return [\n      new Plugin({\n        key: plugin,\n        appendTransaction: (_, __, state) => {\n          const { doc, tr, schema } = state;\n          const shouldInsertNodeAtEnd = plugin.getState(state);\n          const endPosition = doc.content.size - 2;\n          const type = schema.nodes[\"blockContainer\"];\n          const contentType = schema.nodes[\"paragraph\"];\n          if (!shouldInsertNodeAtEnd) {\n            return;\n          }\n\n          return tr.insert(\n            endPosition,\n            type.create(undefined, contentType.create())\n          );\n        },\n        state: {\n          init: (_, _state) => {\n            // (maybe fix): use same logic as apply() here\n            // so it works when initializing\n          },\n          apply: (tr, value) => {\n            if (!tr.docChanged) {\n              return value;\n            }\n\n            let lastNode = tr.doc.lastChild;\n\n            if (!lastNode || lastNode.type.name !== \"blockGroup\") {\n              throw new Error(\"Expected blockGroup\");\n            }\n\n            lastNode = lastNode.lastChild;\n\n            if (!lastNode || lastNode.type.name !== \"blockContainer\") {\n              throw new Error(\"Expected blockContainer\");\n            }\n            return lastNode.nodeSize > 4; // empty <block><content/></block> is length 4\n          },\n        },\n      }),\n    ];\n  },\n});\n","import { Extensions, extensions } from \"@tiptap/core\";\n\nimport { BlockNoteEditor } from \"./BlockNoteEditor\";\n\nimport { Bold } from \"@tiptap/extension-bold\";\nimport { Code } from \"@tiptap/extension-code\";\nimport Collaboration from \"@tiptap/extension-collaboration\";\nimport CollaborationCursor from \"@tiptap/extension-collaboration-cursor\";\nimport { Dropcursor } from \"@tiptap/extension-dropcursor\";\nimport { Gapcursor } from \"@tiptap/extension-gapcursor\";\nimport { HardBreak } from \"@tiptap/extension-hard-break\";\nimport { History } from \"@tiptap/extension-history\";\nimport { Italic } from \"@tiptap/extension-italic\";\nimport { Link } from \"@tiptap/extension-link\";\nimport { Strike } from \"@tiptap/extension-strike\";\nimport { Text } from \"@tiptap/extension-text\";\nimport { Underline } from \"@tiptap/extension-underline\";\nimport * as Y from \"yjs\";\nimport styles from \"./editor.module.css\";\nimport { BackgroundColorExtension } from \"./extensions/BackgroundColor/BackgroundColorExtension\";\nimport { BackgroundColorMark } from \"./extensions/BackgroundColor/BackgroundColorMark\";\nimport { blocks } from \"./extensions/Blocks\";\nimport blockStyles from \"./extensions/Blocks/nodes/Block.module.css\";\nimport { BlockSideMenuFactory } from \"./extensions/DraggableBlocks/BlockSideMenuFactoryTypes\";\nimport { DraggableBlocksExtension } from \"./extensions/DraggableBlocks/DraggableBlocksExtension\";\nimport { FormattingToolbarExtension } from \"./extensions/FormattingToolbar/FormattingToolbarExtension\";\nimport { FormattingToolbarFactory } from \"./extensions/FormattingToolbar/FormattingToolbarFactoryTypes\";\nimport HyperlinkMark from \"./extensions/HyperlinkToolbar/HyperlinkMark\";\nimport { HyperlinkToolbarFactory } from \"./extensions/HyperlinkToolbar/HyperlinkToolbarFactoryTypes\";\nimport { Placeholder } from \"./extensions/Placeholder/PlaceholderExtension\";\nimport { BaseSlashMenuItem, SlashMenuExtension } from \"./extensions/SlashMenu\";\nimport { TextAlignmentExtension } from \"./extensions/TextAlignment/TextAlignmentExtension\";\nimport { TextColorExtension } from \"./extensions/TextColor/TextColorExtension\";\nimport { TextColorMark } from \"./extensions/TextColor/TextColorMark\";\nimport { TrailingNode } from \"./extensions/TrailingNode/TrailingNodeExtension\";\nimport UniqueID from \"./extensions/UniqueID/UniqueID\";\nimport { SuggestionsMenuFactory } from \"./shared/plugins/suggestion/SuggestionsMenuFactoryTypes\";\n\nexport type UiFactories = Partial<{\n  formattingToolbarFactory: FormattingToolbarFactory;\n  hyperlinkToolbarFactory: HyperlinkToolbarFactory;\n  slashMenuFactory: SuggestionsMenuFactory<BaseSlashMenuItem>;\n  blockSideMenuFactory: BlockSideMenuFactory;\n}>;\n\n/**\n * Get all the Tiptap extensions BlockNote is configured with by default\n */\nexport const getBlockNoteExtensions = (opts: {\n  editor: BlockNoteEditor;\n  uiFactories: UiFactories;\n  slashCommands: BaseSlashMenuItem[];\n  collaboration?: {\n    fragment: Y.XmlFragment;\n    user: {\n      name: string;\n      color: string;\n    };\n    provider: any;\n    renderCursor?: (user: any) => HTMLElement;\n  };\n}) => {\n  const ret: Extensions = [\n    extensions.ClipboardTextSerializer,\n    extensions.Commands,\n    extensions.Editable,\n    extensions.FocusEvents,\n    extensions.Tabindex,\n\n    // DevTools,\n    Gapcursor,\n\n    // DropCursor,\n    Placeholder.configure({\n      emptyNodeClass: blockStyles.isEmpty,\n      hasAnchorClass: blockStyles.hasAnchor,\n      isFilterClass: blockStyles.isFilter,\n      includeChildren: true,\n      showOnlyCurrent: false,\n    }),\n    UniqueID.configure({\n      types: [\"blockContainer\"],\n    }),\n    HardBreak,\n    // Comments,\n\n    // basics:\n    Text,\n\n    // marks:\n    Bold,\n    Code,\n    Italic,\n    Strike,\n    Underline,\n    TextColorMark,\n    TextColorExtension,\n    BackgroundColorMark,\n    BackgroundColorExtension,\n    TextAlignmentExtension,\n\n    // custom blocks:\n    ...blocks,\n\n    Dropcursor.configure({ width: 5, color: \"#ddeeff\" }),\n    // This needs to be at the bottom of this list, because Key events (such as enter, when selecting a /command),\n    // should be handled before Enter handlers in other components like splitListItem\n    TrailingNode,\n  ];\n\n  if (opts.collaboration) {\n    ret.push(\n      Collaboration.configure({\n        fragment: opts.collaboration.fragment,\n      })\n    );\n    const defaultRender = (user: { color: string; name: string }) => {\n      const cursor = document.createElement(\"span\");\n\n      cursor.classList.add(styles[\"collaboration-cursor__caret\"]);\n      cursor.setAttribute(\"style\", `border-color: ${user.color}`);\n\n      const label = document.createElement(\"span\");\n\n      label.classList.add(styles[\"collaboration-cursor__label\"]);\n      label.setAttribute(\"style\", `background-color: ${user.color}`);\n      label.insertBefore(document.createTextNode(user.name), null);\n\n      const nonbreakingSpace1 = document.createTextNode(\"\\u2060\");\n      const nonbreakingSpace2 = document.createTextNode(\"\\u2060\");\n      cursor.insertBefore(nonbreakingSpace1, null);\n      cursor.insertBefore(label, null);\n      cursor.insertBefore(nonbreakingSpace2, null);\n      return cursor;\n    };\n    ret.push(\n      CollaborationCursor.configure({\n        user: opts.collaboration.user,\n        render: opts.collaboration.renderCursor || defaultRender,\n        provider: opts.collaboration.provider,\n      })\n    );\n  } else {\n    // disable history extension when collaboration is enabled as Yjs takes care of undo / redo\n    ret.push(History);\n  }\n\n  if (opts.uiFactories.blockSideMenuFactory) {\n    ret.push(\n      DraggableBlocksExtension.configure({\n        editor: opts.editor,\n        blockSideMenuFactory: opts.uiFactories.blockSideMenuFactory,\n      })\n    );\n  }\n\n  if (opts.uiFactories.formattingToolbarFactory) {\n    ret.push(\n      FormattingToolbarExtension.configure({\n        editor: opts.editor,\n        formattingToolbarFactory: opts.uiFactories.formattingToolbarFactory,\n      })\n    );\n  }\n\n  if (opts.uiFactories.hyperlinkToolbarFactory) {\n    ret.push(\n      HyperlinkMark.configure({\n        hyperlinkToolbarFactory: opts.uiFactories.hyperlinkToolbarFactory,\n      })\n    );\n  } else {\n    ret.push(Link);\n  }\n\n  if (opts.uiFactories.slashMenuFactory) {\n    ret.push(\n      SlashMenuExtension.configure({\n        editor: opts.editor,\n        commands: opts.slashCommands,\n        slashMenuFactory: opts.uiFactories.slashMenuFactory,\n      })\n    );\n  }\n\n  return ret;\n};\n","import { Editor, EditorOptions } from \"@tiptap/core\";\nimport { Node } from \"prosemirror-model\";\n// import \"./blocknote.css\";\nimport { Editor as TiptapEditor } from \"@tiptap/core/dist/packages/core/src/Editor\";\nimport * as Y from \"yjs\";\nimport {\n  insertBlocks,\n  removeBlocks,\n  replaceBlocks,\n  updateBlock,\n} from \"./api/blockManipulation/blockManipulation\";\nimport {\n  blocksToHTML,\n  blocksToMarkdown,\n  HTMLToBlocks,\n  markdownToBlocks,\n} from \"./api/formatConversions/formatConversions\";\nimport { nodeToBlock } from \"./api/nodeConversions/nodeConversions\";\nimport { getNodeById } from \"./api/util/nodeUtil\";\nimport { getBlockNoteExtensions, UiFactories } from \"./BlockNoteExtensions\";\nimport styles from \"./editor.module.css\";\nimport {\n  Block,\n  BlockIdentifier,\n  PartialBlock,\n} from \"./extensions/Blocks/api/blockTypes\";\nimport { TextCursorPosition } from \"./extensions/Blocks/api/cursorPositionTypes\";\nimport {\n  ColorStyle,\n  Styles,\n  ToggledStyle,\n} from \"./extensions/Blocks/api/inlineContentTypes\";\nimport { Selection } from \"./extensions/Blocks/api/selectionTypes\";\nimport { getBlockInfoFromPos } from \"./extensions/Blocks/helpers/getBlockInfoFromPos\";\nimport {\n  BaseSlashMenuItem,\n  defaultSlashMenuItems,\n} from \"./extensions/SlashMenu\";\n\nexport type BlockNoteEditorOptions = {\n  // TODO: Figure out if enableBlockNoteExtensions is needed and document them.\n  enableBlockNoteExtensions: boolean;\n\n  /**\n   * UI element factories for creating a custom UI, including custom positioning\n   * & rendering.\n   */\n  uiFactories: UiFactories;\n  /**\n   * TODO: why is this called slashCommands and not slashMenuItems?\n   *\n   * @default defaultSlashMenuItems from `./extensions/SlashMenu`\n   */\n  slashCommands: BaseSlashMenuItem[];\n\n  /**\n   * The HTML element that should be used as the parent element for the editor.\n   *\n   * @default: undefined, the editor is not attached to the DOM\n   */\n  parentElement: HTMLElement;\n  /**\n   * An object containing attributes that should be added to the editor's HTML element.\n   *\n   * @example { class: \"my-editor-class\" }\n   */\n  editorDOMAttributes: Record<string, string>;\n  /**\n   *  A callback function that runs when the editor is ready to be used.\n   */\n  onEditorReady: (editor: BlockNoteEditor) => void;\n  /**\n   * A callback function that runs whenever the editor's contents change.\n   */\n  onEditorContentChange: (editor: BlockNoteEditor) => void;\n  /**\n   * A callback function that runs whenever the text cursor position changes.\n   */\n  onTextCursorPositionChange: (editor: BlockNoteEditor) => void;\n  /**\n   * Locks the editor from being editable by the user if set to `false`.\n   */\n  editable: boolean;\n  /**\n   * The content that should be in the editor when it's created, represented as an array of partial block objects.\n   */\n  initialContent: PartialBlock[];\n  /**\n   * Use default BlockNote font and reset the styles of <p> <li> <h1> elements etc., that are used in BlockNote.\n   *\n   * @default true\n   */\n  defaultStyles: boolean;\n  /**\n   * Whether to use the light or dark theme.\n   *\n   * @default \"light\"\n   */\n  theme: \"light\" | \"dark\";\n\n  /**\n   * When enabled, allows for collaboration between multiple users.\n   */\n  collaboration: {\n    /**\n     * The Yjs XML fragment that's used for collaboration.\n     */\n    fragment: Y.XmlFragment;\n    /**\n     * The user info for the current user that's shown to other collaborators.\n     */\n    user: {\n      name: string;\n      color: string;\n    };\n    /**\n     * A Yjs provider (used for awareness / cursor information)\n     */\n    provider: any;\n    /**\n     * Optional function to customize how cursors of users are rendered\n     */\n    renderCursor?: (user: any) => HTMLElement;\n  };\n\n  // tiptap options, undocumented\n  _tiptapOptions: any;\n};\n\nconst blockNoteTipTapOptions = {\n  enableInputRules: true,\n  enablePasteRules: true,\n  enableCoreExtensions: false,\n};\n\nexport class BlockNoteEditor {\n  public readonly _tiptapEditor: TiptapEditor & { contentComponent: any };\n  private blockCache = new WeakMap<Node, Block>();\n\n  public get domElement() {\n    return this._tiptapEditor.view.dom as HTMLDivElement;\n  }\n\n  public focus() {\n    this._tiptapEditor.view.focus();\n  }\n\n  constructor(private readonly options: Partial<BlockNoteEditorOptions> = {}) {\n    // apply defaults\n    options = {\n      defaultStyles: true,\n      ...options,\n    };\n\n    const extensions = getBlockNoteExtensions({\n      editor: this,\n      uiFactories: options.uiFactories || {},\n      slashCommands: options.slashCommands || defaultSlashMenuItems,\n      collaboration: options.collaboration,\n    });\n\n    const tiptapOptions: EditorOptions = {\n      // TODO: This approach to setting initial content is \"cleaner\" but requires the PM editor schema, which is only\n      //  created after initializing the TipTap editor. Not sure it's feasible.\n      // content:\n      //   options.initialContent &&\n      //   options.initialContent.map((block) =>\n      //     blockToNode(block, this._tiptapEditor.schema).toJSON()\n      //   ),\n      ...blockNoteTipTapOptions,\n      ...options._tiptapOptions,\n      onCreate: () => {\n        options.onEditorReady?.(this);\n        options.initialContent &&\n          this.replaceBlocks(this.topLevelBlocks, options.initialContent);\n      },\n      onUpdate: () => {\n        options.onEditorContentChange?.(this);\n      },\n      onSelectionUpdate: () => {\n        options.onTextCursorPositionChange?.(this);\n      },\n      editable: options.editable === undefined ? true : options.editable,\n      extensions:\n        options.enableBlockNoteExtensions === false\n          ? options._tiptapOptions?.extensions\n          : [...(options._tiptapOptions?.extensions || []), ...extensions],\n      editorProps: {\n        attributes: {\n          \"data-theme\": options.theme || \"light\",\n          ...(options.editorDOMAttributes || {}),\n          class: [\n            styles.bnEditor,\n            styles.bnRoot,\n            options.defaultStyles ? styles.defaultStyles : \"\",\n            options.editorDOMAttributes?.class || \"\",\n          ].join(\" \"),\n        },\n      },\n    };\n\n    if (options.parentElement) {\n      tiptapOptions.element = options.parentElement;\n    }\n\n    this._tiptapEditor = new Editor(tiptapOptions) as Editor & {\n      contentComponent: any;\n    };\n  }\n\n  /**\n   * Gets a snapshot of all top-level (non-nested) blocks in the editor.\n   * @returns A snapshot of all top-level (non-nested) blocks in the editor.\n   */\n  public get topLevelBlocks(): Block[] {\n    const blocks: Block[] = [];\n\n    this._tiptapEditor.state.doc.firstChild!.descendants((node) => {\n      blocks.push(nodeToBlock(node, this.blockCache));\n\n      return false;\n    });\n\n    return blocks;\n  }\n\n  /**\n   * Gets a snapshot of an existing block from the editor.\n   * @param blockIdentifier The identifier of an existing block that should be retrieved.\n   * @returns The block that matches the identifier, or `undefined` if no matching block was found.\n   */\n  public getBlock(blockIdentifier: BlockIdentifier): Block | undefined {\n    const id =\n      typeof blockIdentifier === \"string\"\n        ? blockIdentifier\n        : blockIdentifier.id;\n    let newBlock: Block | undefined = undefined;\n\n    this._tiptapEditor.state.doc.firstChild!.descendants((node) => {\n      if (typeof newBlock !== \"undefined\") {\n        return false;\n      }\n\n      if (node.type.name !== \"blockContainer\" || node.attrs.id !== id) {\n        return true;\n      }\n\n      newBlock = nodeToBlock(node, this.blockCache);\n\n      return false;\n    });\n\n    return newBlock;\n  }\n\n  /**\n   * Traverses all blocks in the editor depth-first, and executes a callback for each.\n   * @param callback The callback to execute for each block. Returning `false` stops the traversal.\n   * @param reverse Whether the blocks should be traversed in reverse order.\n   */\n  public forEachBlock(\n    callback: (block: Block) => boolean,\n    reverse: boolean = false\n  ): void {\n    const blocks = this.topLevelBlocks.slice();\n\n    if (reverse) {\n      blocks.reverse();\n    }\n\n    function traverseBlockArray(blockArray: Block[]): boolean {\n      for (const block of blockArray) {\n        if (!callback(block)) {\n          return false;\n        }\n\n        const children = reverse\n          ? block.children.slice().reverse()\n          : block.children;\n\n        if (!traverseBlockArray(children)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    traverseBlockArray(blocks);\n  }\n\n  /**\n   * Gets a snapshot of the current text cursor position.\n   * @returns A snapshot of the current text cursor position.\n   */\n  public getTextCursorPosition(): TextCursorPosition {\n    const { node, depth, startPos, endPos } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    // Index of the current blockContainer node relative to its parent blockGroup.\n    const nodeIndex = this._tiptapEditor.state.doc\n      .resolve(endPos)\n      .index(depth - 1);\n    // Number of the parent blockGroup's child blockContainer nodes.\n    const numNodes = this._tiptapEditor.state.doc\n      .resolve(endPos + 1)\n      .node().childCount;\n\n    // Gets previous blockContainer node at the same nesting level, if the current node isn't the first child.\n    let prevNode: Node | undefined = undefined;\n    if (nodeIndex > 0) {\n      prevNode = this._tiptapEditor.state.doc.resolve(startPos - 2).node();\n    }\n\n    // Gets next blockContainer node at the same nesting level, if the current node isn't the last child.\n    let nextNode: Node | undefined = undefined;\n    if (nodeIndex < numNodes - 1) {\n      nextNode = this._tiptapEditor.state.doc.resolve(endPos + 2).node();\n    }\n\n    return {\n      block: nodeToBlock(node, this.blockCache),\n      prevBlock:\n        prevNode === undefined\n          ? undefined\n          : nodeToBlock(prevNode, this.blockCache),\n      nextBlock:\n        nextNode === undefined\n          ? undefined\n          : nodeToBlock(nextNode, this.blockCache),\n    };\n  }\n\n  /**\n   * Sets the text cursor position to the start or end of an existing block. Throws an error if the target block could\n   * not be found.\n   * @param targetBlock The identifier of an existing block that the text cursor should be moved to.\n   * @param placement Whether the text cursor should be placed at the start or end of the block.\n   */\n  public setTextCursorPosition(\n    targetBlock: BlockIdentifier,\n    placement: \"start\" | \"end\" = \"start\"\n  ) {\n    const id = typeof targetBlock === \"string\" ? targetBlock : targetBlock.id;\n\n    const { posBeforeNode } = getNodeById(id, this._tiptapEditor.state.doc);\n    const { startPos, contentNode } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      posBeforeNode + 2\n    )!;\n\n    if (placement === \"start\") {\n      this._tiptapEditor.commands.setTextSelection(startPos + 1);\n    } else {\n      this._tiptapEditor.commands.setTextSelection(\n        startPos + contentNode.nodeSize - 1\n      );\n    }\n  }\n\n  /**\n   * Gets a snapshot of the current selection.\n   */\n  public getSelection(): Selection | undefined {\n    if (\n      this._tiptapEditor.state.selection.from ===\n      this._tiptapEditor.state.selection.to\n    ) {\n      return undefined;\n    }\n\n    const blocks: Block[] = [];\n\n    this._tiptapEditor.state.doc.descendants((node, pos) => {\n      if (node.type.spec.group !== \"blockContent\") {\n        return true;\n      }\n\n      if (\n        pos + node.nodeSize < this._tiptapEditor.state.selection.from ||\n        pos > this._tiptapEditor.state.selection.to\n      ) {\n        return true;\n      }\n\n      blocks.push(\n        nodeToBlock(\n          this._tiptapEditor.state.doc.resolve(pos).node(),\n          this.blockCache\n        )\n      );\n\n      return false;\n    });\n\n    return { blocks: blocks };\n  }\n\n  /**\n   * Checks if the editor is currently editable, or if it's locked.\n   * @returns True if the editor is editable, false otherwise.\n   */\n  public get isEditable(): boolean {\n    return this._tiptapEditor.isEditable;\n  }\n\n  /**\n   * Makes the editor editable or locks it, depending on the argument passed.\n   * @param editable True to make the editor editable, or false to lock it.\n   */\n  public set isEditable(editable: boolean) {\n    this._tiptapEditor.setEditable(editable);\n  }\n\n  /**\n   * Inserts new blocks into the editor. If a block's `id` is undefined, BlockNote generates one automatically. Throws an\n   * error if the reference block could not be found.\n   * @param blocksToInsert An array of partial blocks that should be inserted.\n   * @param referenceBlock An identifier for an existing block, at which the new blocks should be inserted.\n   * @param placement Whether the blocks should be inserted just before, just after, or nested inside the\n   * `referenceBlock`. Inserts the blocks at the start of the existing block's children if \"nested\" is used.\n   */\n  public insertBlocks(\n    blocksToInsert: PartialBlock[],\n    referenceBlock: BlockIdentifier,\n    placement: \"before\" | \"after\" | \"nested\" = \"before\"\n  ): void {\n    insertBlocks(blocksToInsert, referenceBlock, placement, this._tiptapEditor);\n  }\n\n  /**\n   * Updates an existing block in the editor. Since updatedBlock is a PartialBlock object, some fields might not be\n   * defined. These undefined fields are kept as-is from the existing block. Throws an error if the block to update could\n   * not be found.\n   * @param blockToUpdate The block that should be updated.\n   * @param update A partial block which defines how the existing block should be changed.\n   */\n  public updateBlock(blockToUpdate: BlockIdentifier, update: PartialBlock) {\n    updateBlock(blockToUpdate, update, this._tiptapEditor);\n  }\n\n  /**\n   * Removes existing blocks from the editor. Throws an error if any of the blocks could not be found.\n   * @param blocksToRemove An array of identifiers for existing blocks that should be removed.\n   */\n  public removeBlocks(blocksToRemove: BlockIdentifier[]) {\n    removeBlocks(blocksToRemove, this._tiptapEditor);\n  }\n\n  /**\n   * Replaces existing blocks in the editor with new blocks. If the blocks that should be removed are not adjacent or\n   * are at different nesting levels, `blocksToInsert` will be inserted at the position of the first block in\n   * `blocksToRemove`. Throws an error if any of the blocks to remove could not be found.\n   * @param blocksToRemove An array of blocks that should be replaced.\n   * @param blocksToInsert An array of partial blocks to replace the old ones with.\n   */\n  public replaceBlocks(\n    blocksToRemove: BlockIdentifier[],\n    blocksToInsert: PartialBlock[]\n  ) {\n    replaceBlocks(blocksToRemove, blocksToInsert, this._tiptapEditor);\n  }\n\n  /**\n   * Gets the active text styles at the text cursor position or at the end of the current selection if it's active.\n   */\n  public getActiveStyles() {\n    const styles: Styles = {};\n    const marks = this._tiptapEditor.state.selection.$to.marks();\n\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    for (const mark of marks) {\n      if (toggleStyles.has(mark.type.name as ToggledStyle)) {\n        styles[mark.type.name as ToggledStyle] = true;\n      } else if (colorStyles.has(mark.type.name as ColorStyle)) {\n        styles[mark.type.name as ColorStyle] = mark.attrs.color;\n      }\n    }\n\n    return styles;\n  }\n\n  /**\n   * Adds styles to the currently selected content.\n   * @param styles The styles to add.\n   */\n  public addStyles(styles: Styles) {\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    for (const [style, value] of Object.entries(styles)) {\n      if (toggleStyles.has(style as ToggledStyle)) {\n        this._tiptapEditor.commands.setMark(style);\n      } else if (colorStyles.has(style as ColorStyle)) {\n        this._tiptapEditor.commands.setMark(style, { color: value });\n      }\n    }\n  }\n\n  /**\n   * Removes styles from the currently selected content.\n   * @param styles The styles to remove.\n   */\n  public removeStyles(styles: Styles) {\n    for (const style of Object.keys(styles)) {\n      this._tiptapEditor.commands.unsetMark(style);\n    }\n  }\n\n  /**\n   * Toggles styles on the currently selected content.\n   * @param styles The styles to toggle.\n   */\n  public toggleStyles(styles: Styles) {\n    const toggleStyles = new Set<ToggledStyle>([\n      \"bold\",\n      \"italic\",\n      \"underline\",\n      \"strike\",\n      \"code\",\n    ]);\n    const colorStyles = new Set<ColorStyle>([\"textColor\", \"backgroundColor\"]);\n\n    for (const [style, value] of Object.entries(styles)) {\n      if (toggleStyles.has(style as ToggledStyle)) {\n        this._tiptapEditor.commands.toggleMark(style);\n      } else if (colorStyles.has(style as ColorStyle)) {\n        this._tiptapEditor.commands.toggleMark(style, { color: value });\n      }\n    }\n  }\n\n  /**\n   * Gets the currently selected text.\n   */\n  public getSelectedText() {\n    return this._tiptapEditor.state.doc.textBetween(\n      this._tiptapEditor.state.selection.from,\n      this._tiptapEditor.state.selection.to\n    );\n  }\n\n  /**\n   * Gets the URL of the last link in the current selection, or `undefined` if there are no links in the selection.\n   */\n  public getSelectedLinkUrl() {\n    return this._tiptapEditor.getAttributes(\"link\").href as string | undefined;\n  }\n\n  /**\n   * Creates a new link to replace the selected content.\n   * @param url The link URL.\n   * @param text The text to display the link with.\n   */\n  public createLink(url: string, text?: string) {\n    if (url === \"\") {\n      return;\n    }\n\n    let { from, to } = this._tiptapEditor.state.selection;\n\n    if (!text) {\n      text = this._tiptapEditor.state.doc.textBetween(from, to);\n    }\n\n    const mark = this._tiptapEditor.schema.mark(\"link\", { href: url });\n\n    this._tiptapEditor.view.dispatch(\n      this._tiptapEditor.view.state.tr\n        .insertText(text, from, to)\n        .addMark(from, from + text.length, mark)\n    );\n  }\n\n  /**\n   * Checks if the block containing the text cursor can be nested.\n   */\n  public canNestBlock() {\n    const { startPos, depth } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    return this._tiptapEditor.state.doc.resolve(startPos).index(depth - 1) > 0;\n  }\n\n  /**\n   * Nests the block containing the text cursor into the block above it.\n   */\n  public nestBlock() {\n    this._tiptapEditor.commands.sinkListItem(\"blockContainer\");\n  }\n\n  /**\n   * Checks if the block containing the text cursor is nested.\n   */\n  public canUnnestBlock() {\n    const { depth } = getBlockInfoFromPos(\n      this._tiptapEditor.state.doc,\n      this._tiptapEditor.state.selection.from\n    )!;\n\n    return depth > 2;\n  }\n\n  /**\n   * Lifts the block containing the text cursor out of its parent.\n   */\n  public unnestBlock() {\n    this._tiptapEditor.commands.liftListItem(\"blockContainer\");\n  }\n\n  /**\n   * Serializes blocks into an HTML string. To better conform to HTML standards, children of blocks which aren't list\n   * items are un-nested in the output HTML.\n   * @param blocks An array of blocks that should be serialized into HTML.\n   * @returns The blocks, serialized as an HTML string.\n   */\n  public async blocksToHTML(blocks: Block[]): Promise<string> {\n    return blocksToHTML(blocks, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Parses blocks from an HTML string. Tries to create `Block` objects out of any HTML block-level elements, and\n   * `InlineNode` objects from any HTML inline elements, though not all element types are recognized. If BlockNote\n   * doesn't recognize an HTML element's tag, it will parse it as a paragraph or plain text.\n   * @param html The HTML string to parse blocks from.\n   * @returns The blocks parsed from the HTML string.\n   */\n  public async HTMLToBlocks(html: string): Promise<Block[]> {\n    return HTMLToBlocks(html, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Serializes blocks into a Markdown string. The output is simplified as Markdown does not support all features of\n   * BlockNote - children of blocks which aren't list items are un-nested and certain styles are removed.\n   * @param blocks An array of blocks that should be serialized into Markdown.\n   * @returns The blocks, serialized as a Markdown string.\n   */\n  public async blocksToMarkdown(blocks: Block[]): Promise<string> {\n    return blocksToMarkdown(blocks, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Creates a list of blocks from a Markdown string. Tries to create `Block` and `InlineNode` objects based on\n   * Markdown syntax, though not all symbols are recognized. If BlockNote doesn't recognize a symbol, it will parse it\n   * as text.\n   * @param markdown The Markdown string to parse blocks from.\n   * @returns The blocks parsed from the Markdown string.\n   */\n  public async markdownToBlocks(markdown: string): Promise<Block[]> {\n    return markdownToBlocks(markdown, this._tiptapEditor.schema);\n  }\n\n  /**\n   * Updates the user info for the current user that's shown to other collaborators.\n   */\n  public updateCollaborationUserInfo(user: { name: string; color: string }) {\n    if (!this.options.collaboration) {\n      throw new Error(\n        \"Cannot update collaboration user info when collaboration is disabled.\"\n      );\n    }\n    this._tiptapEditor.commands.updateUser(user);\n  }\n}\n"],"names":["globalProps","blockProps","getBlockInfoFromPos","doc","posInBlock","$pos","maxDepth","node","depth","id","contentNode","contentType","numChildBlocks","startPos","endPos","removeDuplicates","array","by","seen","item","key","findDuplicates","items","filtered","el","index","UniqueID","Extension","v4","element","attributes","extension","view","state","tr","types","attributeName","generateID","findChildren","pos","dragSourceElement","transformPasted","Plugin","PluginKey","transactions","oldState","newState","docChanges","transaction","filterTransactions","_a","_b","transform","combineTransactionSteps","mapping","getChangedRanges","newRange","newNodes","findChildrenInRange","newIds","duplicatedNewIds","deleted","handleDragstart","event","slice","removeId","fragment","list","nodeWithoutId","Fragment","Slice","UnreachableCaseError","val","toggleStyles","colorStyles","styledTextToNode","styledText","schema","marks","style","value","linkToNodes","link","linkMark","styledTextArrayToNodes","content","nodes","inlineContentToNodes","blockContent","blockToNode","block","type","children","child","groupNode","contentNodeToInlineContent","currentLink","styles","mark","nodeToBlock","blockCache","cachedBlock","blockInfo","props","attr","i","getNodeById","targetNode","posBeforeNode","insertBlocks","blocksToInsert","referenceBlock","placement","editor","nodesToInsert","blockSpec","insertionPos","blockGroupNode","updateBlock","blockToUpdate","update","removeBlocks","blocksToRemove","idsOfBlocksToRemove","removedSize","oldDocSize","newDocSize","notFoundIds","replaceBlocks","removeUnderlines","removeUnderlinesHelper","tree","numChildElements","numElementsAdded","simplifyBlocks","options","listItemBlockTypes","simplifyBlocksHelper","activeList","blockContainer","blockGroup","isListItemBlock","listItemBlockType","numElementsRemoved","fromDom","listItemElement","blocksToHTML","blocks","htmlParentElement","serializer","DOMSerializer","htmlNode","unified","rehypeParse","rehypeStringify","HTMLToBlocks","html","parentNode","DOMParser","blocksToMarkdown","rehypeRemark","remarkGfm","remarkStringify","markdownToBlocks","markdown","htmlString","remarkParse","remarkRehype","BackgroundColorExtension","color","BackgroundColorMark","Mark","HTMLAttributes","commands","PLUGIN_KEY","nodeAttributes","PreviousBlockTypePlugin","timeout","_editorView","_prevState","prev","currentTransactionOriginalOldBlockAttrs","oldNodes","oldNodesById","oldNode","oldContentNode","newContentNode","newAttrs","oldAttrs","pluginState","decorations","prevAttrs","decorationAttrs","nodeAttr","decoration","Decoration","DecorationSet","BlockAttributes","BlockContainer","Node","attrs","HTMLAttr","mergeAttributes","dispatch","newBlock","childNodes","posBetweenBlocks","nextNodeIsBlock","prevNodeIsBlock","nextBlockInfo","childBlocksStart","childBlocksEnd","childBlocksRange","prevBlockEndPos","prevBlockInfo","TextSelection","keepType","originalBlockContent","newBlockContent","newBlockInsertionPos","newBlockContentPos","selectionAtBlockStart","isParagraph","selectionEmpty","blockAtDocStart","blockEmpty","blockIndented","chain","BlockGroup","ParagraphBlockContent","HeadingBlockContent","level","InputRule","range","handleEnter","BulletListItemBlockContent","parent","NumberedListIndexingPlugin","_transactions","_oldState","modified","newIndex","isFirstBlockInDoc","prevBlockContentNode","prevBlockIndex","NumberedListItemBlockContent","findBlock","findParentNode","getDefaultPluginState","SuggestionPluginView","pluginKey","selectItemCallback","suggestionsMenuFactory","__publicField","prevState","next","started","stopped","changed","decorationNode","createSuggestionPlugin","defaultTriggerCharacter","deactivate","_c","_d","menuIsActive","triggerCharacter","queryStartPos","keyboardHoveredItemIndex","active","decorationId","blockNode","SlashMenuPluginKey","SlashMenuExtension","query","cmd","MultipleNodeSelection","Selection","$anchor","$head","_pos","from","to","selection","fromResult","toResult","serializeForClipboard","pv","dragImageElement","getDraggableBlockFromCoords","coords","blockPositionFromCoords","docView","desc","blockPositionsFromSelection","beforeFirstBlockPos","afterLastBlockPos","selectionStartInBlockContent","selectionEndInBlockContent","minDepth","startFirstBlockPos","endLastBlockPos","setDragImage","parentClone","getElementIndex","parentElement","targetElement","firstSelectedBlockIndex","lastSelectedBlockIndex","unsetDragImage","inheritedClasses","className","dragStart","e","editorBoundingBox","draggedBlockInSelection","multipleBlocksSelected","NodeSelection","dom","text","BlockMenuView","tiptapEditor","blockMenuFactory","horizontalPosAnchoredAtRoot","evt","_event","blockContentBoundingBox","createDraggableBlocksPlugin","DraggableBlocksExtension","FormattingToolbarView","formattingToolbarFactory","shouldShow","empty","isEmptyTextBlock","isTextSelection","composing","isSame","ranges","isNodeSelection","posToDOMRect","createFormattingToolbarPlugin","FormattingToolbarExtension","HyperlinkToolbarView","hyperlinkToolbarFactory","hoveredHyperlinkElement","posInHoveredHyperlinkMark","resolvedPosInHoveredHyperlinkMark","marksAtPos","getMarkRange","prevHyperlinkMark","url","createHyperlinkToolbarPlugin","Hyperlink","Link","Placeholder","menuState","anchor","hasAnchor","isEmpty","classes","SuggestionItem","name","match","BaseSlashMenuItem","execute","aliases","alias","insertOrUpdateBlock","currentBlock","defaultSlashMenuItems","TextAlignmentExtension","textAlignment","positionsBeforeSelectedContent","TextColorExtension","TextColorMark","TrailingNode","plugin","_","__","shouldInsertNodeAtEnd","endPosition","_state","lastNode","getBlockNoteExtensions","opts","ret","extensions","Gapcursor","blockStyles","HardBreak","Text","Bold","Code","Italic","Strike","Underline","Dropcursor","Collaboration","defaultRender","user","cursor","label","nonbreakingSpace1","nonbreakingSpace2","CollaborationCursor","History","HyperlinkMark","blockNoteTipTapOptions","BlockNoteEditor","tiptapOptions","Editor","blockIdentifier","callback","reverse","traverseBlockArray","blockArray","nodeIndex","numNodes","prevNode","nextNode","targetBlock","editable"],"mappings":"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"}